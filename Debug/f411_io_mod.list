
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026f94  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006998  08037138  08037138  00028138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803dad0  0803dad0  0002f870  2**0
                  CONTENTS
  4 .ARM          00000008  0803dad0  0803dad0  0002ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803dad8  0803dad8  0002f870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803dad8  0803dad8  0002ead8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803dae0  0803dae0  0002eae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803dae4  0002f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019a68  20000870  0803e354  0002f870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a2d8  0803e354  000302d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002f870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00060ccc  00000000  00000000  0002f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c8b  00000000  00000000  0009056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003430  00000000  00000000  000991f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003344  00000000  00000000  0009c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025373  00000000  00000000  0009f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000517b7  00000000  00000000  000c4cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd266  00000000  00000000  00116496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d36fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c9b0  00000000  00000000  001d3740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0002a260  00000000  00000000  001e00f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0020a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0803711c 	.word	0x0803711c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	0803711c 	.word	0x0803711c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80110dc:	b500      	push	{lr}
 80110de:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80110e0:	2300      	movs	r3, #0
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80110ea:	4815      	ldr	r0, [pc, #84]	@ (8011140 <MX_ADC1_Init+0x64>)
 80110ec:	4a15      	ldr	r2, [pc, #84]	@ (8011144 <MX_ADC1_Init+0x68>)
 80110ee:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80110f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80110f4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80110f6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80110f8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80110fa:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80110fc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011100:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011102:	4a11      	ldr	r2, [pc, #68]	@ (8011148 <MX_ADC1_Init+0x6c>)
 8011104:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011106:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8011108:	2201      	movs	r2, #1
 801110a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801110c:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011110:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011112:	f005 fcd5 	bl	8016ac0 <HAL_ADC_Init>
 8011116:	b968      	cbnz	r0, 8011134 <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8011118:	2312      	movs	r3, #18
 801111a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 801111c:	2301      	movs	r3, #1
 801111e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8011120:	2300      	movs	r3, #0
 8011122:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011124:	4669      	mov	r1, sp
 8011126:	4806      	ldr	r0, [pc, #24]	@ (8011140 <MX_ADC1_Init+0x64>)
 8011128:	f005 fcf6 	bl	8016b18 <HAL_ADC_ConfigChannel>
 801112c:	b928      	cbnz	r0, 801113a <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801112e:	b005      	add	sp, #20
 8011130:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011134:	f001 f976 	bl	8012424 <Error_Handler>
 8011138:	e7ee      	b.n	8011118 <MX_ADC1_Init+0x3c>
    Error_Handler();
 801113a:	f001 f973 	bl	8012424 <Error_Handler>
}
 801113e:	e7f6      	b.n	801112e <MX_ADC1_Init+0x52>
 8011140:	2000088c 	.word	0x2000088c
 8011144:	40012000 	.word	0x40012000
 8011148:	0f000001 	.word	0x0f000001

0801114c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 801114c:	6802      	ldr	r2, [r0, #0]
 801114e:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <HAL_ADC_MspInit+0x28>)
 8011150:	429a      	cmp	r2, r3
 8011152:	d000      	beq.n	8011156 <HAL_ADC_MspInit+0xa>
 8011154:	4770      	bx	lr
{
 8011156:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011158:	2300      	movs	r3, #0
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	4b06      	ldr	r3, [pc, #24]	@ (8011178 <HAL_ADC_MspInit+0x2c>)
 801115e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011164:	645a      	str	r2, [r3, #68]	@ 0x44
 8011166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8011170:	b002      	add	sp, #8
 8011172:	4770      	bx	lr
 8011174:	40012000 	.word	0x40012000
 8011178:	40023800 	.word	0x40023800

0801117c <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 801117c:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 801117e:	2200      	movs	r2, #0
 8011180:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011184:	4801      	ldr	r0, [pc, #4]	@ (801118c <EthBegin+0x10>)
 8011186:	f005 ff8e 	bl	80170a6 <HAL_GPIO_WritePin>
}
 801118a:	bd08      	pop	{r3, pc}
 801118c:	40020400 	.word	0x40020400

08011190 <EthEnd>:

void EthEnd(void * param){
 8011190:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011192:	2201      	movs	r2, #1
 8011194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011198:	4801      	ldr	r0, [pc, #4]	@ (80111a0 <EthEnd+0x10>)
 801119a:	f005 ff84 	bl	80170a6 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 801119e:	bd08      	pop	{r3, pc}
 80111a0:	40020400 	.word	0x40020400

080111a4 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 80111a4:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80111a6:	2200      	movs	r2, #0
 80111a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111ac:	4801      	ldr	r0, [pc, #4]	@ (80111b4 <FlashBegin+0x10>)
 80111ae:	f005 ff7a 	bl	80170a6 <HAL_GPIO_WritePin>
}
 80111b2:	bd08      	pop	{r3, pc}
 80111b4:	40020000 	.word	0x40020000

080111b8 <FlashEnd>:

void FlashEnd(void){
 80111b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80111ba:	2201      	movs	r2, #1
 80111bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111c0:	4801      	ldr	r0, [pc, #4]	@ (80111c8 <FlashEnd+0x10>)
 80111c2:	f005 ff70 	bl	80170a6 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80111c6:	bd08      	pop	{r3, pc}
 80111c8:	40020000 	.word	0x40020000

080111cc <StartIOTask>:
{
 80111cc:	b510      	push	{r4, lr}
 80111ce:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 80111d0:	4b4a      	ldr	r3, [pc, #296]	@ (80112fc <StartIOTask+0x130>)
 80111d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111d6:	900c      	str	r0, [sp, #48]	@ 0x30
 80111d8:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 80111dc:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80111e0:	f103 0408 	add.w	r4, r3, #8
 80111e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 80111ec:	3314      	adds	r3, #20
 80111ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111f2:	9007      	str	r0, [sp, #28]
 80111f4:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 80111f8:	ab04      	add	r3, sp, #16
 80111fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011202:	e072      	b.n	80112ea <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011204:	2300      	movs	r3, #0
 8011206:	461a      	mov	r2, r3
 8011208:	a901      	add	r1, sp, #4
 801120a:	483d      	ldr	r0, [pc, #244]	@ (8011300 <StartIOTask+0x134>)
 801120c:	6800      	ldr	r0, [r0, #0]
 801120e:	f008 fa6a 	bl	80196e6 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011212:	2400      	movs	r4, #0
 8011214:	e00e      	b.n	8011234 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011216:	2200      	movs	r2, #0
 8011218:	ab0e      	add	r3, sp, #56	@ 0x38
 801121a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801121e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011222:	ab0e      	add	r3, sp, #56	@ 0x38
 8011224:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011228:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801122c:	f005 ff3b 	bl	80170a6 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011230:	3401      	adds	r4, #1
 8011232:	b2e4      	uxtb	r4, r4
 8011234:	2c02      	cmp	r4, #2
 8011236:	d85e      	bhi.n	80112f6 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011238:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801123c:	446b      	add	r3, sp
 801123e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0e7      	beq.n	8011216 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 8011246:	2201      	movs	r2, #1
 8011248:	ab0e      	add	r3, sp, #56	@ 0x38
 801124a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801124e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011252:	ab0e      	add	r3, sp, #56	@ 0x38
 8011254:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011258:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801125c:	f005 ff23 	bl	80170a6 <HAL_GPIO_WritePin>
 8011260:	e7e6      	b.n	8011230 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 8011262:	ab0e      	add	r3, sp, #56	@ 0x38
 8011264:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801126c:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 8011270:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011274:	f005 ff10 	bl	8017098 <HAL_GPIO_ReadPin>
 8011278:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801127c:	446b      	add	r3, sp
 801127e:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011282:	3401      	adds	r4, #1
 8011284:	b2e4      	uxtb	r4, r4
 8011286:	2c02      	cmp	r4, #2
 8011288:	d9eb      	bls.n	8011262 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 801128a:	4c1e      	ldr	r4, [pc, #120]	@ (8011304 <StartIOTask+0x138>)
 801128c:	6820      	ldr	r0, [r4, #0]
 801128e:	f008 fa78 	bl	8019782 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8011292:	2300      	movs	r3, #0
 8011294:	461a      	mov	r2, r3
 8011296:	a902      	add	r1, sp, #8
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	f008 f9e2 	bl	8019662 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 801129e:	2400      	movs	r4, #0
 80112a0:	e014      	b.n	80112cc <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 80112a2:	ab0e      	add	r3, sp, #56	@ 0x38
 80112a4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80112a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80112ac:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 80112b0:	f853 0c28 	ldr.w	r0, [r3, #-40]
 80112b4:	f005 fef0 	bl	8017098 <HAL_GPIO_ReadPin>
 80112b8:	fab0 f080 	clz	r0, r0
 80112bc:	0940      	lsrs	r0, r0, #5
 80112be:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80112c2:	446b      	add	r3, sp
 80112c4:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 80112c8:	3401      	adds	r4, #1
 80112ca:	b2e4      	uxtb	r4, r4
 80112cc:	2c02      	cmp	r4, #2
 80112ce:	d9e8      	bls.n	80112a2 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 80112d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011308 <StartIOTask+0x13c>)
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	f008 fa55 	bl	8019782 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 80112d8:	2300      	movs	r3, #0
 80112da:	461a      	mov	r2, r3
 80112dc:	a903      	add	r1, sp, #12
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	f008 f9bf 	bl	8019662 <osMessageQueuePut>
    osDelay(1);
 80112e4:	2001      	movs	r0, #1
 80112e6:	f008 f8c4 	bl	8019472 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 80112ea:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <StartIOTask+0x134>)
 80112ec:	6818      	ldr	r0, [r3, #0]
 80112ee:	f008 fa3b 	bl	8019768 <osMessageQueueGetCount>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d186      	bne.n	8011204 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80112f6:	2400      	movs	r4, #0
 80112f8:	e7c5      	b.n	8011286 <StartIOTask+0xba>
 80112fa:	bf00      	nop
 80112fc:	08037138 	.word	0x08037138
 8011300:	200008ec 	.word	0x200008ec
 8011304:	200008f0 	.word	0x200008f0
 8011308:	200008f4 	.word	0x200008f4

0801130c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801130c:	b084      	sub	sp, #16
 801130e:	b508      	push	{r3, lr}
 8011310:	f10d 0c08 	add.w	ip, sp, #8
 8011314:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011318:	2300      	movs	r3, #0
 801131a:	461a      	mov	r2, r3
 801131c:	4661      	mov	r1, ip
 801131e:	4804      	ldr	r0, [pc, #16]	@ (8011330 <add_log_mess_to_q+0x24>)
 8011320:	6800      	ldr	r0, [r0, #0]
 8011322:	f008 f99e 	bl	8019662 <osMessageQueuePut>

}
 8011326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801132a:	b004      	add	sp, #16
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	200008e4 	.word	0x200008e4

08011334 <StartSettingsTask>:
{
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801133c:	4b7e      	ldr	r3, [pc, #504]	@ (8011538 <StartSettingsTask+0x204>)
 801133e:	4a7f      	ldr	r2, [pc, #508]	@ (801153c <StartSettingsTask+0x208>)
 8011340:	497f      	ldr	r1, [pc, #508]	@ (8011540 <StartSettingsTask+0x20c>)
 8011342:	4880      	ldr	r0, [pc, #512]	@ (8011544 <StartSettingsTask+0x210>)
 8011344:	f005 f864 	bl	8016410 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011348:	497f      	ldr	r1, [pc, #508]	@ (8011548 <StartSettingsTask+0x214>)
 801134a:	4880      	ldr	r0, [pc, #512]	@ (801154c <StartSettingsTask+0x218>)
 801134c:	f00a fcca 	bl	801bce4 <lfs_fs_ll_init>
 8011350:	2800      	cmp	r0, #0
 8011352:	db3e      	blt.n	80113d2 <StartSettingsTask+0x9e>
  mg_fs_lfs_mkdir("/web");
 8011354:	487e      	ldr	r0, [pc, #504]	@ (8011550 <StartSettingsTask+0x21c>)
 8011356:	f00a fcaf 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801135a:	4c7e      	ldr	r4, [pc, #504]	@ (8011554 <StartSettingsTask+0x220>)
 801135c:	4620      	mov	r0, r4
 801135e:	f00a fc9f 	bl	801bca0 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011362:	487d      	ldr	r0, [pc, #500]	@ (8011558 <StartSettingsTask+0x224>)
 8011364:	f00a fc9c 	bl	801bca0 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011368:	4620      	mov	r0, r4
 801136a:	f00a fca5 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801136e:	487b      	ldr	r0, [pc, #492]	@ (801155c <StartSettingsTask+0x228>)
 8011370:	f00a fca2 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011374:	487a      	ldr	r0, [pc, #488]	@ (8011560 <StartSettingsTask+0x22c>)
 8011376:	f00a fc9f 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801137a:	487a      	ldr	r0, [pc, #488]	@ (8011564 <StartSettingsTask+0x230>)
 801137c:	f00a fc9c 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011380:	4879      	ldr	r0, [pc, #484]	@ (8011568 <StartSettingsTask+0x234>)
 8011382:	f00a fc99 	bl	801bcb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/smart"); //flash usage info
 8011386:	4879      	ldr	r0, [pc, #484]	@ (801156c <StartSettingsTask+0x238>)
 8011388:	f00a fc96 	bl	801bcb8 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 801138c:	2200      	movs	r2, #0
 801138e:	a939      	add	r1, sp, #228	@ 0xe4
 8011390:	4877      	ldr	r0, [pc, #476]	@ (8011570 <StartSettingsTask+0x23c>)
 8011392:	f00a fbd9 	bl	801bb48 <mg_fs_lfs_status>
 8011396:	b330      	cbz	r0, 80113e6 <StartSettingsTask+0xb2>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011398:	2101      	movs	r1, #1
 801139a:	4875      	ldr	r0, [pc, #468]	@ (8011570 <StartSettingsTask+0x23c>)
 801139c:	f00a fc12 	bl	801bbc4 <mg_fs_lfs_open>
 80113a0:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80113a2:	22c6      	movs	r2, #198	@ 0xc6
 80113a4:	a907      	add	r1, sp, #28
 80113a6:	f00a fc3d 	bl	801bc24 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80113aa:	4620      	mov	r0, r4
 80113ac:	f00a fc2e 	bl	801bc0c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80113b0:	2200      	movs	r2, #0
 80113b2:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113b6:	2302      	movs	r3, #2
 80113b8:	a907      	add	r1, sp, #28
 80113ba:	486e      	ldr	r0, [pc, #440]	@ (8011574 <StartSettingsTask+0x240>)
 80113bc:	6800      	ldr	r0, [r0, #0]
 80113be:	f008 fbb7 	bl	8019b30 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 80113c2:	2200      	movs	r2, #0
 80113c4:	a939      	add	r1, sp, #228	@ 0xe4
 80113c6:	486c      	ldr	r0, [pc, #432]	@ (8011578 <StartSettingsTask+0x244>)
 80113c8:	f00a fbbe 	bl	801bb48 <mg_fs_lfs_status>
 80113cc:	b1c0      	cbz	r0, 8011400 <StartSettingsTask+0xcc>
{
 80113ce:	2400      	movs	r4, #0
 80113d0:	e089      	b.n	80114e6 <StartSettingsTask+0x1b2>
	  flash_not_connect_flag = 1; //indicate that flash is not found
 80113d2:	4b6a      	ldr	r3, [pc, #424]	@ (801157c <StartSettingsTask+0x248>)
 80113d4:	2201      	movs	r2, #1
 80113d6:	701a      	strb	r2, [r3, #0]
	  osDelay(3000);
 80113d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80113dc:	f008 f849 	bl	8019472 <osDelay>
	  HAL_NVIC_SystemReset();
 80113e0:	f005 fcea 	bl	8016db8 <HAL_NVIC_SystemReset>
 80113e4:	e7b6      	b.n	8011354 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80113e6:	22c6      	movs	r2, #198	@ 0xc6
 80113e8:	2100      	movs	r1, #0
 80113ea:	a807      	add	r0, sp, #28
 80113ec:	f01c fa90 	bl	802d910 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113f0:	2302      	movs	r3, #2
 80113f2:	2200      	movs	r2, #0
 80113f4:	a907      	add	r1, sp, #28
 80113f6:	485f      	ldr	r0, [pc, #380]	@ (8011574 <StartSettingsTask+0x240>)
 80113f8:	6800      	ldr	r0, [r0, #0]
 80113fa:	f008 fb99 	bl	8019b30 <xQueueGenericSend>
 80113fe:	e7e0      	b.n	80113c2 <StartSettingsTask+0x8e>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 8011400:	f240 609a 	movw	r0, #1690	@ 0x69a
 8011404:	f00a fa38 	bl	801b878 <pvPortMalloc>
	  if (web_users == NULL) {
 8011408:	4604      	mov	r4, r0
 801140a:	b390      	cbz	r0, 8011472 <StartSettingsTask+0x13e>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 801140c:	495c      	ldr	r1, [pc, #368]	@ (8011580 <StartSettingsTask+0x24c>)
 801140e:	2001      	movs	r0, #1
 8011410:	f000 ff5e 	bl	80122d0 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 8011414:	4b5b      	ldr	r3, [pc, #364]	@ (8011584 <StartSettingsTask+0x250>)
 8011416:	6818      	ldr	r0, [r3, #0]
 8011418:	6020      	str	r0, [r4, #0]
 801141a:	889b      	ldrh	r3, [r3, #4]
 801141c:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 801141e:	ad01      	add	r5, sp, #4
 8011420:	4e59      	ldr	r6, [pc, #356]	@ (8011588 <StartSettingsTask+0x254>)
 8011422:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011426:	e896 0003 	ldmia.w	r6, {r0, r1}
 801142a:	f845 0b04 	str.w	r0, [r5], #4
 801142e:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 8011430:	ad01      	add	r5, sp, #4
 8011432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011434:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8011438:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 801143c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8011440:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011444:	6828      	ldr	r0, [r5, #0]
 8011446:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 801144a:	792b      	ldrb	r3, [r5, #4]
 801144c:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 8011450:	2102      	movs	r1, #2
 8011452:	4849      	ldr	r0, [pc, #292]	@ (8011578 <StartSettingsTask+0x244>)
 8011454:	f00a fbb6 	bl	801bbc4 <mg_fs_lfs_open>
 8011458:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 801145a:	f240 629a 	movw	r2, #1690	@ 0x69a
 801145e:	4621      	mov	r1, r4
 8011460:	f00a fbec 	bl	801bc3c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011464:	4628      	mov	r0, r5
 8011466:	f00a fbd1 	bl	801bc0c <mg_fs_lfs_close>
	  free(web_users);
 801146a:	4620      	mov	r0, r4
 801146c:	f00a fa86 	bl	801b97c <vPortFree>
 8011470:	e7ad      	b.n	80113ce <StartSettingsTask+0x9a>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 8011472:	4946      	ldr	r1, [pc, #280]	@ (801158c <StartSettingsTask+0x258>)
 8011474:	2003      	movs	r0, #3
 8011476:	f000 ff2b 	bl	80122d0 <logging>
 801147a:	e7f6      	b.n	801146a <StartSettingsTask+0x136>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 801147c:	4d3c      	ldr	r5, [pc, #240]	@ (8011570 <StartSettingsTask+0x23c>)
 801147e:	4628      	mov	r0, r5
 8011480:	f00a fc0e 	bl	801bca0 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011484:	2102      	movs	r1, #2
 8011486:	4628      	mov	r0, r5
 8011488:	f00a fb9c 	bl	801bbc4 <mg_fs_lfs_open>
 801148c:	4605      	mov	r5, r0
 801148e:	2800      	cmp	r0, #0
 8011490:	d033      	beq.n	80114fa <StartSettingsTask+0x1c6>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011492:	22c6      	movs	r2, #198	@ 0xc6
 8011494:	a907      	add	r1, sp, #28
 8011496:	f00a fbd1 	bl	801bc3c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 801149a:	4628      	mov	r0, r5
 801149c:	f00a fbb6 	bl	801bc0c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80114a0:	2200      	movs	r2, #0
 80114a2:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114a6:	2302      	movs	r3, #2
 80114a8:	a907      	add	r1, sp, #28
 80114aa:	4832      	ldr	r0, [pc, #200]	@ (8011574 <StartSettingsTask+0x240>)
 80114ac:	6800      	ldr	r0, [r0, #0]
 80114ae:	f008 fb3f 	bl	8019b30 <xQueueGenericSend>
 80114b2:	e022      	b.n	80114fa <StartSettingsTask+0x1c6>
				 osDelay(1);
 80114b4:	2001      	movs	r0, #1
 80114b6:	f007 ffdc 	bl	8019472 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80114ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114be:	4834      	ldr	r0, [pc, #208]	@ (8011590 <StartSettingsTask+0x25c>)
 80114c0:	f005 fdea 	bl	8017098 <HAL_GPIO_ReadPin>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d0f5      	beq.n	80114b4 <StartSettingsTask+0x180>
			 osDelay(1000);
 80114c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114cc:	f007 ffd1 	bl	8019472 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 80114d0:	4829      	ldr	r0, [pc, #164]	@ (8011578 <StartSettingsTask+0x244>)
 80114d2:	f00a fbe5 	bl	801bca0 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 80114d6:	f005 fc6f 	bl	8016db8 <HAL_NVIC_SystemReset>
 80114da:	e000      	b.n	80114de <StartSettingsTask+0x1aa>
		 press_time = 0;
 80114dc:	2400      	movs	r4, #0
	  osDelay(1000);
 80114de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114e2:	f007 ffc6 	bl	8019472 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80114e6:	2200      	movs	r2, #0
 80114e8:	a907      	add	r1, sp, #28
 80114ea:	4b22      	ldr	r3, [pc, #136]	@ (8011574 <StartSettingsTask+0x240>)
 80114ec:	6818      	ldr	r0, [r3, #0]
 80114ee:	f008 fe32 	bl	801a156 <xQueuePeek>
	  if(mqtt_config.save){
 80114f2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1c0      	bne.n	801147c <StartSettingsTask+0x148>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80114fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114fe:	4824      	ldr	r0, [pc, #144]	@ (8011590 <StartSettingsTask+0x25c>)
 8011500:	f005 fdca 	bl	8017098 <HAL_GPIO_ReadPin>
 8011504:	2800      	cmp	r0, #0
 8011506:	d1e9      	bne.n	80114dc <StartSettingsTask+0x1a8>
		 press_time++;
 8011508:	3401      	adds	r4, #1
 801150a:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 801150c:	4d20      	ldr	r5, [pc, #128]	@ (8011590 <StartSettingsTask+0x25c>)
 801150e:	2201      	movs	r2, #1
 8011510:	2102      	movs	r1, #2
 8011512:	4628      	mov	r0, r5
 8011514:	f005 fdc7 	bl	80170a6 <HAL_GPIO_WritePin>
		 osDelay(100);
 8011518:	2064      	movs	r0, #100	@ 0x64
 801151a:	f007 ffaa 	bl	8019472 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 801151e:	2200      	movs	r2, #0
 8011520:	2102      	movs	r1, #2
 8011522:	4628      	mov	r0, r5
 8011524:	f005 fdbf 	bl	80170a6 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 8011528:	2c08      	cmp	r4, #8
 801152a:	d1d8      	bne.n	80114de <StartSettingsTask+0x1aa>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 801152c:	2201      	movs	r2, #1
 801152e:	2102      	movs	r1, #2
 8011530:	4628      	mov	r0, r5
 8011532:	f005 fdb8 	bl	80170a6 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011536:	e7c0      	b.n	80114ba <StartSettingsTask+0x186>
 8011538:	08011b5d 	.word	0x08011b5d
 801153c:	08011b81 	.word	0x08011b81
 8011540:	080111b9 	.word	0x080111b9
 8011544:	080111a5 	.word	0x080111a5
 8011548:	08011bad 	.word	0x08011bad
 801154c:	08011b99 	.word	0x08011b99
 8011550:	080373b4 	.word	0x080373b4
 8011554:	080373bc 	.word	0x080373bc
 8011558:	080373c8 	.word	0x080373c8
 801155c:	080373d8 	.word	0x080373d8
 8011560:	080373e4 	.word	0x080373e4
 8011564:	08038f98 	.word	0x08038f98
 8011568:	080373ec 	.word	0x080373ec
 801156c:	080373f4 	.word	0x080373f4
 8011570:	080373fc 	.word	0x080373fc
 8011574:	200008e8 	.word	0x200008e8
 8011578:	08037410 	.word	0x08037410
 801157c:	20000910 	.word	0x20000910
 8011580:	0803744c 	.word	0x0803744c
 8011584:	08037484 	.word	0x08037484
 8011588:	0803748c 	.word	0x0803748c
 801158c:	08037420 	.word	0x08037420
 8011590:	40020400 	.word	0x40020400

08011594 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011594:	b508      	push	{r3, lr}
	switch (param_type) {
 8011596:	2901      	cmp	r1, #1
 8011598:	d014      	beq.n	80115c4 <RW_parameters_from_queue+0x30>
 801159a:	2902      	cmp	r1, #2
 801159c:	d01a      	beq.n	80115d4 <RW_parameters_from_queue+0x40>
 801159e:	b101      	cbz	r1, 80115a2 <RW_parameters_from_queue+0xe>
}
 80115a0:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 80115a2:	b14a      	cbz	r2, 80115b8 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 80115a4:	2a01      	cmp	r2, #1
 80115a6:	d1fb      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 80115a8:	2302      	movs	r3, #2
 80115aa:	2200      	movs	r2, #0
 80115ac:	4601      	mov	r1, r0
 80115ae:	4812      	ldr	r0, [pc, #72]	@ (80115f8 <RW_parameters_from_queue+0x64>)
 80115b0:	6800      	ldr	r0, [r0, #0]
 80115b2:	f008 fabd 	bl	8019b30 <xQueueGenericSend>
 80115b6:	e7f3      	b.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 80115b8:	4601      	mov	r1, r0
 80115ba:	4b0f      	ldr	r3, [pc, #60]	@ (80115f8 <RW_parameters_from_queue+0x64>)
 80115bc:	6818      	ldr	r0, [r3, #0]
 80115be:	f008 fdca 	bl	801a156 <xQueuePeek>
 80115c2:	e7ed      	b.n	80115a0 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115c4:	2a00      	cmp	r2, #0
 80115c6:	d1eb      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 80115c8:	4601      	mov	r1, r0
 80115ca:	4b0c      	ldr	r3, [pc, #48]	@ (80115fc <RW_parameters_from_queue+0x68>)
 80115cc:	6818      	ldr	r0, [r3, #0]
 80115ce:	f008 fdc2 	bl	801a156 <xQueuePeek>
 80115d2:	e7e5      	b.n	80115a0 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115d4:	b14a      	cbz	r2, 80115ea <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 80115d6:	2a01      	cmp	r2, #1
 80115d8:	d1e2      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 80115da:	2302      	movs	r3, #2
 80115dc:	2200      	movs	r2, #0
 80115de:	4601      	mov	r1, r0
 80115e0:	4807      	ldr	r0, [pc, #28]	@ (8011600 <RW_parameters_from_queue+0x6c>)
 80115e2:	6800      	ldr	r0, [r0, #0]
 80115e4:	f008 faa4 	bl	8019b30 <xQueueGenericSend>
}
 80115e8:	e7da      	b.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 80115ea:	4601      	mov	r1, r0
 80115ec:	4b05      	ldr	r3, [pc, #20]	@ (8011604 <RW_parameters_from_queue+0x70>)
 80115ee:	6818      	ldr	r0, [r3, #0]
 80115f0:	f008 fdb1 	bl	801a156 <xQueuePeek>
 80115f4:	e7d4      	b.n	80115a0 <RW_parameters_from_queue+0xc>
 80115f6:	bf00      	nop
 80115f8:	200008e8 	.word	0x200008e8
 80115fc:	200008f4 	.word	0x200008f4
 8011600:	200008ec 	.word	0x200008ec
 8011604:	200008f0 	.word	0x200008f0

08011608 <StartDisplayTask>:
{
 8011608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160a:	b08b      	sub	sp, #44	@ 0x2c
	osDelay(1000);//
 801160c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011610:	f007 ff2f 	bl	8019472 <osDelay>
	SSD1306_Init (); // initialise the display
 8011614:	f007 fdc6 	bl	80191a4 <SSD1306_Init>
	osDelay(100);//
 8011618:	2064      	movs	r0, #100	@ 0x64
 801161a:	f007 ff2a 	bl	8019472 <osDelay>
	SSD1306_GotoXY(x=1,y=0);
 801161e:	2100      	movs	r1, #0
 8011620:	2001      	movs	r0, #1
 8011622:	f007 fd23 	bl	801906c <SSD1306_GotoXY>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011626:	2000      	movs	r0, #0
 8011628:	f007 fce4 	bl	8018ff4 <SSD1306_Fill>
	if (flash_not_connect_flag){
 801162c:	4ba9      	ldr	r3, [pc, #676]	@ (80118d4 <StartDisplayTask+0x2cc>)
 801162e:	781c      	ldrb	r4, [r3, #0]
 8011630:	2c00      	cmp	r4, #0
 8011632:	d148      	bne.n	80116c6 <StartDisplayTask+0xbe>
	SSD1306_Puts("Builded: ", &Font_7x10, SSD1306_COLOR_WHITE);
 8011634:	4da8      	ldr	r5, [pc, #672]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011636:	2201      	movs	r2, #1
 8011638:	4629      	mov	r1, r5
 801163a:	48a8      	ldr	r0, [pc, #672]	@ (80118dc <StartDisplayTask+0x2d4>)
 801163c:	f007 fd6a 	bl	8019114 <SSD1306_Puts>
	SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011640:	2201      	movs	r2, #1
 8011642:	4629      	mov	r1, r5
 8011644:	48a6      	ldr	r0, [pc, #664]	@ (80118e0 <StartDisplayTask+0x2d8>)
 8011646:	f007 fd65 	bl	8019114 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 801164a:	f104 010b 	add.w	r1, r4, #11
 801164e:	b2c9      	uxtb	r1, r1
 8011650:	2001      	movs	r0, #1
 8011652:	f007 fd0b 	bl	801906c <SSD1306_GotoXY>
	SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011656:	2201      	movs	r2, #1
 8011658:	4629      	mov	r1, r5
 801165a:	48a2      	ldr	r0, [pc, #648]	@ (80118e4 <StartDisplayTask+0x2dc>)
 801165c:	f007 fd5a 	bl	8019114 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011660:	f104 0116 	add.w	r1, r4, #22
 8011664:	b2c9      	uxtb	r1, r1
 8011666:	2001      	movs	r0, #1
 8011668:	f007 fd00 	bl	801906c <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801166c:	4b9e      	ldr	r3, [pc, #632]	@ (80118e8 <StartDisplayTask+0x2e0>)
 801166e:	6859      	ldr	r1, [r3, #4]
 8011670:	780a      	ldrb	r2, [r1, #0]
 8011672:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011674:	7888      	ldrb	r0, [r1, #2]
 8011676:	78ce      	ldrb	r6, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011678:	790f      	ldrb	r7, [r1, #4]
 801167a:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 801167c:	9103      	str	r1, [sp, #12]
 801167e:	9702      	str	r7, [sp, #8]
 8011680:	9601      	str	r6, [sp, #4]
 8011682:	9000      	str	r0, [sp, #0]
 8011684:	4999      	ldr	r1, [pc, #612]	@ (80118ec <StartDisplayTask+0x2e4>)
 8011686:	a805      	add	r0, sp, #20
 8011688:	f01b fd80 	bl	802d18c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801168c:	2201      	movs	r2, #1
 801168e:	4629      	mov	r1, r5
 8011690:	a805      	add	r0, sp, #20
 8011692:	f007 fd3f 	bl	8019114 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011696:	f104 0121 	add.w	r1, r4, #33	@ 0x21
 801169a:	b2c9      	uxtb	r1, r1
 801169c:	2001      	movs	r0, #1
 801169e:	f007 fce5 	bl	801906c <SSD1306_GotoXY>
	sprintf((char *)buf, "%s",get_flash_chip_model());
 80116a2:	f00a fb1b 	bl	801bcdc <get_flash_chip_model>
 80116a6:	4601      	mov	r1, r0
 80116a8:	a805      	add	r0, sp, #20
 80116aa:	f01d fe65 	bl	802f378 <strcpy>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80116ae:	2201      	movs	r2, #1
 80116b0:	4629      	mov	r1, r5
 80116b2:	a805      	add	r0, sp, #20
 80116b4:	f007 fd2e 	bl	8019114 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80116b8:	f007 fe1e 	bl	80192f8 <SSD1306_UpdateScreen>
	osDelay(3000);
 80116bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80116c0:	f007 fed7 	bl	8019472 <osDelay>
	int i=0;
 80116c4:	e0ce      	b.n	8011864 <StartDisplayTask+0x25c>
		SSD1306_GotoXY(x=1,y=0);
 80116c6:	2100      	movs	r1, #0
 80116c8:	2001      	movs	r0, #1
 80116ca:	f007 fccf 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80116ce:	2000      	movs	r0, #0
 80116d0:	f007 fc90 	bl	8018ff4 <SSD1306_Fill>
		SSD1306_Puts("Error. Flash mem", &Font_7x10, SSD1306_COLOR_WHITE);
 80116d4:	4c80      	ldr	r4, [pc, #512]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80116d6:	2201      	movs	r2, #1
 80116d8:	4621      	mov	r1, r4
 80116da:	4885      	ldr	r0, [pc, #532]	@ (80118f0 <StartDisplayTask+0x2e8>)
 80116dc:	f007 fd1a 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=10);
 80116e0:	210a      	movs	r1, #10
 80116e2:	2001      	movs	r0, #1
 80116e4:	f007 fcc2 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Puts("chip is not", &Font_7x10, SSD1306_COLOR_WHITE);
 80116e8:	2201      	movs	r2, #1
 80116ea:	4621      	mov	r1, r4
 80116ec:	4881      	ldr	r0, [pc, #516]	@ (80118f4 <StartDisplayTask+0x2ec>)
 80116ee:	f007 fd11 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=20);
 80116f2:	2114      	movs	r1, #20
 80116f4:	2001      	movs	r0, #1
 80116f6:	f007 fcb9 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Puts("connected. Reboot", &Font_7x10, SSD1306_COLOR_WHITE);
 80116fa:	2201      	movs	r2, #1
 80116fc:	4621      	mov	r1, r4
 80116fe:	487e      	ldr	r0, [pc, #504]	@ (80118f8 <StartDisplayTask+0x2f0>)
 8011700:	f007 fd08 	bl	8019114 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011704:	f007 fdf8 	bl	80192f8 <SSD1306_UpdateScreen>
		vTaskDelay(3000);
 8011708:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801170c:	f009 fa1c 	bl	801ab48 <vTaskDelay>
		SSD1306_GotoXY(x=1,y=20);
 8011710:	2414      	movs	r4, #20
 8011712:	e78f      	b.n	8011634 <StartDisplayTask+0x2c>
		switch (flash_status_flag) {
 8011714:	f113 0f05 	cmn.w	r3, #5
 8011718:	d108      	bne.n	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 801171a:	2128      	movs	r1, #40	@ 0x28
 801171c:	2001      	movs	r0, #1
 801171e:	f007 fca5 	bl	801906c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_IO", &Font_7x10, SSD1306_COLOR_WHITE);
 8011722:	2201      	movs	r2, #1
 8011724:	496c      	ldr	r1, [pc, #432]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011726:	4875      	ldr	r0, [pc, #468]	@ (80118fc <StartDisplayTask+0x2f4>)
 8011728:	f007 fcf4 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=0);
 801172c:	2100      	movs	r1, #0
 801172e:	2001      	movs	r0, #1
 8011730:	f007 fc9c 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011734:	4c68      	ldr	r4, [pc, #416]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011736:	2201      	movs	r2, #1
 8011738:	4621      	mov	r1, r4
 801173a:	4871      	ldr	r0, [pc, #452]	@ (8011900 <StartDisplayTask+0x2f8>)
 801173c:	f007 fcea 	bl	8019114 <SSD1306_Puts>
				(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011740:	4b69      	ldr	r3, [pc, #420]	@ (80118e8 <StartDisplayTask+0x2e0>)
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011746:	0e13      	lsrs	r3, r2, #24
		sprintf(buf,"%lu.%lu.%lu.%lu",
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011754:	b2d2      	uxtb	r2, r2
 8011756:	496b      	ldr	r1, [pc, #428]	@ (8011904 <StartDisplayTask+0x2fc>)
 8011758:	a805      	add	r0, sp, #20
 801175a:	f01b fd17 	bl	802d18c <sprintf>
		SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801175e:	2201      	movs	r2, #1
 8011760:	4621      	mov	r1, r4
 8011762:	a805      	add	r0, sp, #20
 8011764:	f007 fcd6 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x,y=y+11);
 8011768:	210b      	movs	r1, #11
 801176a:	2001      	movs	r0, #1
 801176c:	f007 fc7e 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Puts("Inputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011770:	2201      	movs	r2, #1
 8011772:	4621      	mov	r1, r4
 8011774:	4864      	ldr	r0, [pc, #400]	@ (8011908 <StartDisplayTask+0x300>)
 8011776:	f007 fccd 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 801177a:	210b      	movs	r1, #11
 801177c:	203d      	movs	r0, #61	@ 0x3d
 801177e:	f007 fc75 	bl	801906c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 8011782:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011784:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<INPUTS_COUNT ; i++){
 8011786:	e01f      	b.n	80117c8 <StartDisplayTask+0x1c0>
			SSD1306_GotoXY(x=1,y=40);
 8011788:	2128      	movs	r1, #40	@ 0x28
 801178a:	2001      	movs	r0, #1
 801178c:	f007 fc6e 	bl	801906c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_CORRUPT", &Font_7x10, SSD1306_COLOR_WHITE);
 8011790:	2201      	movs	r2, #1
 8011792:	4951      	ldr	r1, [pc, #324]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011794:	485d      	ldr	r0, [pc, #372]	@ (801190c <StartDisplayTask+0x304>)
 8011796:	f007 fcbd 	bl	8019114 <SSD1306_Puts>
			break;
 801179a:	e7c7      	b.n	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 801179c:	2128      	movs	r1, #40	@ 0x28
 801179e:	2001      	movs	r0, #1
 80117a0:	f007 fc64 	bl	801906c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOMEM", &Font_7x10, SSD1306_COLOR_WHITE);
 80117a4:	2201      	movs	r2, #1
 80117a6:	494c      	ldr	r1, [pc, #304]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117a8:	4859      	ldr	r0, [pc, #356]	@ (8011910 <StartDisplayTask+0x308>)
 80117aa:	f007 fcb3 	bl	8019114 <SSD1306_Puts>
			break;
 80117ae:	e7bd      	b.n	801172c <StartDisplayTask+0x124>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80117b0:	2201      	movs	r2, #1
 80117b2:	4949      	ldr	r1, [pc, #292]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117b4:	a805      	add	r0, sp, #20
 80117b6:	f007 fcad 	bl	8019114 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 80117ba:	3408      	adds	r4, #8
 80117bc:	b2e4      	uxtb	r4, r4
 80117be:	210b      	movs	r1, #11
 80117c0:	4620      	mov	r0, r4
 80117c2:	f007 fc53 	bl	801906c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 80117c6:	4635      	mov	r5, r6
 80117c8:	2d02      	cmp	r5, #2
 80117ca:	dc0f      	bgt.n	80117ec <StartDisplayTask+0x1e4>
			sprintf((char *)buf,"%d",i+1);
 80117cc:	1c6e      	adds	r6, r5, #1
 80117ce:	4632      	mov	r2, r6
 80117d0:	4950      	ldr	r1, [pc, #320]	@ (8011914 <StartDisplayTask+0x30c>)
 80117d2:	a805      	add	r0, sp, #20
 80117d4:	f01b fcda 	bl	802d18c <sprintf>
			if ( io_status.inputs[i] ){
 80117d8:	4b4f      	ldr	r3, [pc, #316]	@ (8011918 <StartDisplayTask+0x310>)
 80117da:	5d5b      	ldrb	r3, [r3, r5]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d0e7      	beq.n	80117b0 <StartDisplayTask+0x1a8>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 80117e0:	2200      	movs	r2, #0
 80117e2:	493d      	ldr	r1, [pc, #244]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117e4:	a805      	add	r0, sp, #20
 80117e6:	f007 fc95 	bl	8019114 <SSD1306_Puts>
 80117ea:	e7e6      	b.n	80117ba <StartDisplayTask+0x1b2>
		SSD1306_GotoXY(x=1,y=y+11);
 80117ec:	2116      	movs	r1, #22
 80117ee:	2001      	movs	r0, #1
 80117f0:	f007 fc3c 	bl	801906c <SSD1306_GotoXY>
		SSD1306_Puts("Outputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 80117f4:	2201      	movs	r2, #1
 80117f6:	4938      	ldr	r1, [pc, #224]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117f8:	4848      	ldr	r0, [pc, #288]	@ (801191c <StartDisplayTask+0x314>)
 80117fa:	f007 fc8b 	bl	8019114 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 80117fe:	2116      	movs	r1, #22
 8011800:	203d      	movs	r0, #61	@ 0x3d
 8011802:	f007 fc33 	bl	801906c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011806:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011808:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 801180a:	e00b      	b.n	8011824 <StartDisplayTask+0x21c>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801180c:	2201      	movs	r2, #1
 801180e:	4932      	ldr	r1, [pc, #200]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011810:	a805      	add	r0, sp, #20
 8011812:	f007 fc7f 	bl	8019114 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 8011816:	3408      	adds	r4, #8
 8011818:	b2e4      	uxtb	r4, r4
 801181a:	2116      	movs	r1, #22
 801181c:	4620      	mov	r0, r4
 801181e:	f007 fc25 	bl	801906c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011822:	4635      	mov	r5, r6
 8011824:	2d02      	cmp	r5, #2
 8011826:	dc10      	bgt.n	801184a <StartDisplayTask+0x242>
			sprintf((char *)buf,"%d",i+1);
 8011828:	1c6e      	adds	r6, r5, #1
 801182a:	4632      	mov	r2, r6
 801182c:	4939      	ldr	r1, [pc, #228]	@ (8011914 <StartDisplayTask+0x30c>)
 801182e:	a805      	add	r0, sp, #20
 8011830:	f01b fcac 	bl	802d18c <sprintf>
			if ( io_status.outputs[i] ){
 8011834:	4b38      	ldr	r3, [pc, #224]	@ (8011918 <StartDisplayTask+0x310>)
 8011836:	442b      	add	r3, r5
 8011838:	78db      	ldrb	r3, [r3, #3]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0e6      	beq.n	801180c <StartDisplayTask+0x204>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 801183e:	2200      	movs	r2, #0
 8011840:	4925      	ldr	r1, [pc, #148]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011842:	a805      	add	r0, sp, #20
 8011844:	f007 fc66 	bl	8019114 <SSD1306_Puts>
 8011848:	e7e5      	b.n	8011816 <StartDisplayTask+0x20e>
		SSD1306_UpdateScreen();
 801184a:	f007 fd55 	bl	80192f8 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 801184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011852:	2201      	movs	r2, #1
 8011854:	2178      	movs	r1, #120	@ 0x78
 8011856:	4832      	ldr	r0, [pc, #200]	@ (8011920 <StartDisplayTask+0x318>)
 8011858:	f005 ff7a 	bl	8017750 <HAL_I2C_IsDeviceReady>
 801185c:	bb50      	cbnz	r0, 80118b4 <StartDisplayTask+0x2ac>
		osDelay(200);
 801185e:	20c8      	movs	r0, #200	@ 0xc8
 8011860:	f007 fe07 	bl	8019472 <osDelay>
		RW_parameters_from_queue(io_status.inputs, S_INPUTS, S_READ);
 8011864:	4c2c      	ldr	r4, [pc, #176]	@ (8011918 <StartDisplayTask+0x310>)
 8011866:	2200      	movs	r2, #0
 8011868:	2101      	movs	r1, #1
 801186a:	4620      	mov	r0, r4
 801186c:	f7ff fe92 	bl	8011594 <RW_parameters_from_queue>
		RW_parameters_from_queue(io_status.outputs, S_OUTPUTS, S_READ);
 8011870:	2200      	movs	r2, #0
 8011872:	2102      	movs	r1, #2
 8011874:	1ce0      	adds	r0, r4, #3
 8011876:	f7ff fe8d 	bl	8011594 <RW_parameters_from_queue>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801187a:	2000      	movs	r0, #0
 801187c:	f007 fbba 	bl	8018ff4 <SSD1306_Fill>
		switch (flash_status_flag) {
 8011880:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <StartDisplayTask+0x31c>)
 8011882:	f993 3000 	ldrsb.w	r3, [r3]
 8011886:	f113 0f0c 	cmn.w	r3, #12
 801188a:	d087      	beq.n	801179c <StartDisplayTask+0x194>
 801188c:	f73f af42 	bgt.w	8011714 <StartDisplayTask+0x10c>
 8011890:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011894:	f43f af78 	beq.w	8011788 <StartDisplayTask+0x180>
 8011898:	f113 0f18 	cmn.w	r3, #24
 801189c:	f47f af46 	bne.w	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 80118a0:	2128      	movs	r1, #40	@ 0x28
 80118a2:	2001      	movs	r0, #1
 80118a4:	f007 fbe2 	bl	801906c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOSPC", &Font_7x10, SSD1306_COLOR_WHITE);
 80118a8:	2201      	movs	r2, #1
 80118aa:	490b      	ldr	r1, [pc, #44]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80118ac:	481e      	ldr	r0, [pc, #120]	@ (8011928 <StartDisplayTask+0x320>)
 80118ae:	f007 fc31 	bl	8019114 <SSD1306_Puts>
			break;
 80118b2:	e73b      	b.n	801172c <StartDisplayTask+0x124>
			HAL_I2C_DeInit(&hi2c1);
 80118b4:	481a      	ldr	r0, [pc, #104]	@ (8011920 <StartDisplayTask+0x318>)
 80118b6:	f005 fe75 	bl	80175a4 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80118ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118be:	f009 f943 	bl	801ab48 <vTaskDelay>
			MX_I2C1_Init();
 80118c2:	f000 fc0d 	bl	80120e0 <MX_I2C1_Init>
			vTaskDelay(1000);
 80118c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118ca:	f009 f93d 	bl	801ab48 <vTaskDelay>
			SSD1306_Init ();
 80118ce:	f007 fc69 	bl	80191a4 <SSD1306_Init>
 80118d2:	e7bc      	b.n	801184e <StartDisplayTask+0x246>
 80118d4:	20000910 	.word	0x20000910
 80118d8:	2000010c 	.word	0x2000010c
 80118dc:	080374d8 	.word	0x080374d8
 80118e0:	080374e4 	.word	0x080374e4
 80118e4:	080374f0 	.word	0x080374f0
 80118e8:	20000914 	.word	0x20000914
 80118ec:	080374fc 	.word	0x080374fc
 80118f0:	080374a4 	.word	0x080374a4
 80118f4:	080374b8 	.word	0x080374b8
 80118f8:	080374c4 	.word	0x080374c4
 80118fc:	0803751c 	.word	0x0803751c
 8011900:	08037558 	.word	0x08037558
 8011904:	0803755c 	.word	0x0803755c
 8011908:	0803756c 	.word	0x0803756c
 801190c:	08037528 	.word	0x08037528
 8011910:	08037548 	.word	0x08037548
 8011914:	0803cb0c 	.word	0x0803cb0c
 8011918:	200008d4 	.word	0x200008d4
 801191c:	08037574 	.word	0x08037574
 8011920:	2000091c 	.word	0x2000091c
 8011924:	20000911 	.word	0x20000911
 8011928:	08037538 	.word	0x08037538

0801192c <StartLoggingTask>:
{
 801192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801192e:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 8011930:	4864      	ldr	r0, [pc, #400]	@ (8011ac4 <StartLoggingTask+0x198>)
 8011932:	f000 fcc1 	bl	80122b8 <reg_logging_fn>
	logger_set_level(L_INFO);
 8011936:	2001      	movs	r0, #1
 8011938:	f000 fcc4 	bl	80122c4 <logger_set_level>
	logging(L_INFO, "Device started...");
 801193c:	4962      	ldr	r1, [pc, #392]	@ (8011ac8 <StartLoggingTask+0x19c>)
 801193e:	2001      	movs	r0, #1
 8011940:	f000 fcc6 	bl	80122d0 <logging>
	  while (mg_fs_mounted() == 0){
 8011944:	e003      	b.n	801194e <StartLoggingTask+0x22>
		  osDelay(500);
 8011946:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801194a:	f007 fd92 	bl	8019472 <osDelay>
	  while (mg_fs_mounted() == 0){
 801194e:	f00a f9bf 	bl	801bcd0 <mg_fs_mounted>
 8011952:	2800      	cmp	r0, #0
 8011954:	d0f7      	beq.n	8011946 <StartLoggingTask+0x1a>
	uint32_t count = 20000;
 8011956:	f644 6420 	movw	r4, #20000	@ 0x4e20
 801195a:	e072      	b.n	8011a42 <StartLoggingTask+0x116>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 801195c:	2300      	movs	r3, #0
 801195e:	461a      	mov	r2, r3
 8011960:	a907      	add	r1, sp, #28
 8011962:	485a      	ldr	r0, [pc, #360]	@ (8011acc <StartLoggingTask+0x1a0>)
 8011964:	6800      	ldr	r0, [r0, #0]
 8011966:	f007 febe 	bl	80196e6 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 801196a:	2102      	movs	r1, #2
 801196c:	4858      	ldr	r0, [pc, #352]	@ (8011ad0 <StartLoggingTask+0x1a4>)
 801196e:	f00a f929 	bl	801bbc4 <mg_fs_lfs_open>
 8011972:	4605      	mov	r5, r0
		  flash_status_flag = mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len);
 8011974:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 8011978:	f10d 011d 	add.w	r1, sp, #29
 801197c:	f00a f95e 	bl	801bc3c <mg_fs_lfs_write>
 8011980:	4b54      	ldr	r3, [pc, #336]	@ (8011ad4 <StartLoggingTask+0x1a8>)
 8011982:	7018      	strb	r0, [r3, #0]
		  mg_fs_lfs_close(f_pointer);
 8011984:	4628      	mov	r0, r5
 8011986:	f00a f941 	bl	801bc0c <mg_fs_lfs_close>
 801198a:	e060      	b.n	8011a4e <StartLoggingTask+0x122>
    	vPortGetHeapStats(&heap_status);
 801198c:	a848      	add	r0, sp, #288	@ 0x120
 801198e:	f00a f833 	bl	801b9f8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011992:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011994:	9304      	str	r3, [sp, #16]
 8011996:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801199c:	9302      	str	r3, [sp, #8]
 801199e:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80119a8:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 80119aa:	494b      	ldr	r1, [pc, #300]	@ (8011ad8 <StartLoggingTask+0x1ac>)
 80119ac:	2001      	movs	r0, #1
 80119ae:	f000 fc8f 	bl	80122d0 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80119b2:	4b4a      	ldr	r3, [pc, #296]	@ (8011adc <StartLoggingTask+0x1b0>)
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80119b8:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80119c6:	b2d2      	uxtb	r2, r2
 80119c8:	4945      	ldr	r1, [pc, #276]	@ (8011ae0 <StartLoggingTask+0x1b4>)
 80119ca:	2001      	movs	r0, #1
 80119cc:	f000 fc80 	bl	80122d0 <logging>
    	bytes_read  = sFLASH_GetReadedBytes();
 80119d0:	f004 ff78 	bl	80168c4 <sFLASH_GetReadedBytes>
 80119d4:	4606      	mov	r6, r0
		bytes_write = sFLASH_GetWritedBytes();
 80119d6:	f004 ff7b 	bl	80168d0 <sFLASH_GetWritedBytes>
 80119da:	4605      	mov	r5, r0
		erace_times = sFLASH_GetEraceSectorTimes();
 80119dc:	f004 ff7e 	bl	80168dc <sFLASH_GetEraceSectorTimes>
 80119e0:	4607      	mov	r7, r0
    	logging(L_INFO, "Read bytes from flash: %" PRIu32, bytes_read);
 80119e2:	4632      	mov	r2, r6
 80119e4:	493f      	ldr	r1, [pc, #252]	@ (8011ae4 <StartLoggingTask+0x1b8>)
 80119e6:	2001      	movs	r0, #1
 80119e8:	f000 fc72 	bl	80122d0 <logging>
    	logging(L_INFO, "Write bytes to flash: %" PRIu32, bytes_write);
 80119ec:	462a      	mov	r2, r5
 80119ee:	493e      	ldr	r1, [pc, #248]	@ (8011ae8 <StartLoggingTask+0x1bc>)
 80119f0:	2001      	movs	r0, #1
 80119f2:	f000 fc6d 	bl	80122d0 <logging>
    	logging(L_INFO, "Erased sectors: %" PRIu32, erace_times);
 80119f6:	463a      	mov	r2, r7
 80119f8:	493c      	ldr	r1, [pc, #240]	@ (8011aec <StartLoggingTask+0x1c0>)
 80119fa:	2001      	movs	r0, #1
 80119fc:	f000 fc68 	bl	80122d0 <logging>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, erace_times);
 8011a00:	4c3b      	ldr	r4, [pc, #236]	@ (8011af0 <StartLoggingTask+0x1c4>)
 8011a02:	463a      	mov	r2, r7
 8011a04:	2102      	movs	r1, #2
 8011a06:	4620      	mov	r0, r4
 8011a08:	f006 fd5b 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, erace_times);
 8011a0c:	463a      	mov	r2, r7
 8011a0e:	2103      	movs	r1, #3
 8011a10:	4620      	mov	r0, r4
 8011a12:	f006 fd56 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, bytes_read);
 8011a16:	4632      	mov	r2, r6
 8011a18:	2104      	movs	r1, #4
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f006 fd51 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, bytes_read);
 8011a20:	4632      	mov	r2, r6
 8011a22:	2105      	movs	r1, #5
 8011a24:	4620      	mov	r0, r4
 8011a26:	f006 fd4c 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, bytes_write);
 8011a2a:	462a      	mov	r2, r5
 8011a2c:	2106      	movs	r1, #6
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f006 fd47 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, bytes_write);
 8011a34:	462a      	mov	r2, r5
 8011a36:	2107      	movs	r1, #7
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f006 fd42 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
    	count = 0;
 8011a3e:	2400      	movs	r4, #0
    count ++;
 8011a40:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011a42:	4b22      	ldr	r3, [pc, #136]	@ (8011acc <StartLoggingTask+0x1a0>)
 8011a44:	6818      	ldr	r0, [r3, #0]
 8011a46:	f007 fe8f 	bl	8019768 <osMessageQueueGetCount>
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	d186      	bne.n	801195c <StartLoggingTask+0x30>
    osDelay(500);
 8011a4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a52:	f007 fd0e 	bl	8019472 <osDelay>
    if (count == 20000){
 8011a56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011a5a:	429c      	cmp	r4, r3
 8011a5c:	d1f0      	bne.n	8011a40 <StartLoggingTask+0x114>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011a5e:	2200      	movs	r2, #0
 8011a60:	a94f      	add	r1, sp, #316	@ 0x13c
 8011a62:	481b      	ldr	r0, [pc, #108]	@ (8011ad0 <StartLoggingTask+0x1a4>)
 8011a64:	f00a f870 	bl	801bb48 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011a68:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011a6a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d98c      	bls.n	801198c <StartLoggingTask+0x60>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011a72:	4c20      	ldr	r4, [pc, #128]	@ (8011af4 <StartLoggingTask+0x1c8>)
 8011a74:	4620      	mov	r0, r4
 8011a76:	f00a f913 	bl	801bca0 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4814      	ldr	r0, [pc, #80]	@ (8011ad0 <StartLoggingTask+0x1a4>)
 8011a7e:	f00a f903 	bl	801bc88 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011a82:	491d      	ldr	r1, [pc, #116]	@ (8011af8 <StartLoggingTask+0x1cc>)
 8011a84:	2001      	movs	r0, #1
 8011a86:	f000 fc23 	bl	80122d0 <logging>
    			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011a8a:	4b14      	ldr	r3, [pc, #80]	@ (8011adc <StartLoggingTask+0x1b0>)
 8011a8c:	6859      	ldr	r1, [r3, #4]
 8011a8e:	780a      	ldrb	r2, [r1, #0]
 8011a90:	784b      	ldrb	r3, [r1, #1]
    			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011a92:	7888      	ldrb	r0, [r1, #2]
 8011a94:	78cc      	ldrb	r4, [r1, #3]
    			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011a96:	790d      	ldrb	r5, [r1, #4]
 8011a98:	7949      	ldrb	r1, [r1, #5]
        	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011a9a:	9103      	str	r1, [sp, #12]
 8011a9c:	9502      	str	r5, [sp, #8]
 8011a9e:	9401      	str	r4, [sp, #4]
 8011aa0:	9000      	str	r0, [sp, #0]
 8011aa2:	4916      	ldr	r1, [pc, #88]	@ (8011afc <StartLoggingTask+0x1d0>)
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f000 fc13 	bl	80122d0 <logging>
        	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 8011aaa:	f00a f917 	bl	801bcdc <get_flash_chip_model>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	4913      	ldr	r1, [pc, #76]	@ (8011b00 <StartLoggingTask+0x1d4>)
 8011ab2:	2001      	movs	r0, #1
 8011ab4:	f000 fc0c 	bl	80122d0 <logging>
        	logging(L_INFO, "Firmware version: %s", dev_sw_ver);
 8011ab8:	4a12      	ldr	r2, [pc, #72]	@ (8011b04 <StartLoggingTask+0x1d8>)
 8011aba:	4913      	ldr	r1, [pc, #76]	@ (8011b08 <StartLoggingTask+0x1dc>)
 8011abc:	2001      	movs	r0, #1
 8011abe:	f000 fc07 	bl	80122d0 <logging>
 8011ac2:	e763      	b.n	801198c <StartLoggingTask+0x60>
 8011ac4:	0801130d 	.word	0x0801130d
 8011ac8:	08037580 	.word	0x08037580
 8011acc:	200008e4 	.word	0x200008e4
 8011ad0:	08037594 	.word	0x08037594
 8011ad4:	20000911 	.word	0x20000911
 8011ad8:	08037628 	.word	0x08037628
 8011adc:	20000914 	.word	0x20000914
 8011ae0:	080376bc 	.word	0x080376bc
 8011ae4:	080376d8 	.word	0x080376d8
 8011ae8:	080376f4 	.word	0x080376f4
 8011aec:	08037710 	.word	0x08037710
 8011af0:	20000980 	.word	0x20000980
 8011af4:	080375a4 	.word	0x080375a4
 8011af8:	080375b4 	.word	0x080375b4
 8011afc:	080375c8 	.word	0x080375c8
 8011b00:	080375f0 	.word	0x080375f0
 8011b04:	0803760c 	.word	0x0803760c
 8011b08:	08037610 	.word	0x08037610

08011b0c <StartWatchDogTask>:
{
 8011b0c:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 8011b0e:	4806      	ldr	r0, [pc, #24]	@ (8011b28 <StartWatchDogTask+0x1c>)
 8011b10:	f005 ff14 	bl	801793c <HAL_IWDG_Refresh>
    osDelay(500);
 8011b14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011b18:	f007 fcab 	bl	8019472 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	4803      	ldr	r0, [pc, #12]	@ (8011b2c <StartWatchDogTask+0x20>)
 8011b20:	f005 fac7 	bl	80170b2 <HAL_GPIO_TogglePin>
  for(;;)
 8011b24:	e7f3      	b.n	8011b0e <StartWatchDogTask+0x2>
 8011b26:	bf00      	nop
 8011b28:	20000970 	.word	0x20000970
 8011b2c:	40020400 	.word	0x40020400

08011b30 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 8011b30:	b500      	push	{lr}
 8011b32:	b087      	sub	sp, #28
 8011b34:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b3c:	9300      	str	r3, [sp, #0]
 8011b3e:	2301      	movs	r3, #1
 8011b40:	f10d 0217 	add.w	r2, sp, #23
 8011b44:	f10d 010f 	add.w	r1, sp, #15
 8011b48:	4803      	ldr	r0, [pc, #12]	@ (8011b58 <EthTxn+0x28>)
 8011b4a:	f006 fef0 	bl	801892e <HAL_SPI_TransmitReceive>
}
 8011b4e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011b52:	b007      	add	sp, #28
 8011b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b58:	200009a0 	.word	0x200009a0

08011b5c <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011b5c:	b500      	push	{lr}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b68:	2201      	movs	r2, #1
 8011b6a:	f10d 0107 	add.w	r1, sp, #7
 8011b6e:	4803      	ldr	r0, [pc, #12]	@ (8011b7c <FlashSPIsendByte+0x20>)
 8011b70:	f006 fdfb 	bl	801876a <HAL_SPI_Transmit>
}
 8011b74:	b003      	add	sp, #12
 8011b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b7a:	bf00      	nop
 8011b7c:	200009f8 	.word	0x200009f8

08011b80 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011b80:	b508      	push	{r3, lr}
 8011b82:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b88:	4601      	mov	r1, r0
 8011b8a:	4802      	ldr	r0, [pc, #8]	@ (8011b94 <FlashSPIrecvBuff+0x14>)
 8011b8c:	f006 fff9 	bl	8018b82 <HAL_SPI_Receive>
}
 8011b90:	bd08      	pop	{r3, pc}
 8011b92:	bf00      	nop
 8011b94:	200009f8 	.word	0x200009f8

08011b98 <FS_Lock>:
void FS_Lock(void * param){
 8011b98:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011b9a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011b9e:	4b02      	ldr	r3, [pc, #8]	@ (8011ba8 <FS_Lock+0x10>)
 8011ba0:	6818      	ldr	r0, [r3, #0]
 8011ba2:	f007 fcbd 	bl	8019520 <osMutexAcquire>
}
 8011ba6:	bd08      	pop	{r3, pc}
 8011ba8:	200008dc 	.word	0x200008dc

08011bac <FS_Unlock>:
void FS_Unlock(void * param){
 8011bac:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011bae:	4b02      	ldr	r3, [pc, #8]	@ (8011bb8 <FS_Unlock+0xc>)
 8011bb0:	6818      	ldr	r0, [r3, #0]
 8011bb2:	f007 fce4 	bl	801957e <osMutexRelease>
}
 8011bb6:	bd08      	pop	{r3, pc}
 8011bb8:	200008dc 	.word	0x200008dc

08011bbc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011bbc:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011bbe:	482c      	ldr	r0, [pc, #176]	@ (8011c70 <MX_FREERTOS_Init+0xb4>)
 8011bc0:	f007 fc65 	bl	801948e <osMutexNew>
 8011bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8011c74 <MX_FREERTOS_Init+0xb8>)
 8011bc6:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011bc8:	482b      	ldr	r0, [pc, #172]	@ (8011c78 <MX_FREERTOS_Init+0xbc>)
 8011bca:	f007 fc60 	bl	801948e <osMutexNew>
 8011bce:	4b2b      	ldr	r3, [pc, #172]	@ (8011c7c <MX_FREERTOS_Init+0xc0>)
 8011bd0:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8011c80 <MX_FREERTOS_Init+0xc4>)
 8011bd4:	2103      	movs	r1, #3
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	f007 fcf8 	bl	80195cc <osMessageQueueNew>
 8011bdc:	4b29      	ldr	r3, [pc, #164]	@ (8011c84 <MX_FREERTOS_Init+0xc8>)
 8011bde:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011be0:	4a29      	ldr	r2, [pc, #164]	@ (8011c88 <MX_FREERTOS_Init+0xcc>)
 8011be2:	2103      	movs	r1, #3
 8011be4:	2001      	movs	r0, #1
 8011be6:	f007 fcf1 	bl	80195cc <osMessageQueueNew>
 8011bea:	4b28      	ldr	r3, [pc, #160]	@ (8011c8c <MX_FREERTOS_Init+0xd0>)
 8011bec:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011bee:	4a28      	ldr	r2, [pc, #160]	@ (8011c90 <MX_FREERTOS_Init+0xd4>)
 8011bf0:	2103      	movs	r1, #3
 8011bf2:	2001      	movs	r0, #1
 8011bf4:	f007 fcea 	bl	80195cc <osMessageQueueNew>
 8011bf8:	4b26      	ldr	r3, [pc, #152]	@ (8011c94 <MX_FREERTOS_Init+0xd8>)
 8011bfa:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011bfc:	4a26      	ldr	r2, [pc, #152]	@ (8011c98 <MX_FREERTOS_Init+0xdc>)
 8011bfe:	21c6      	movs	r1, #198	@ 0xc6
 8011c00:	2001      	movs	r0, #1
 8011c02:	f007 fce3 	bl	80195cc <osMessageQueueNew>
 8011c06:	4b25      	ldr	r3, [pc, #148]	@ (8011c9c <MX_FREERTOS_Init+0xe0>)
 8011c08:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011c0a:	4a25      	ldr	r2, [pc, #148]	@ (8011ca0 <MX_FREERTOS_Init+0xe4>)
 8011c0c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8011c10:	200f      	movs	r0, #15
 8011c12:	f007 fcdb 	bl	80195cc <osMessageQueueNew>
 8011c16:	4b23      	ldr	r3, [pc, #140]	@ (8011ca4 <MX_FREERTOS_Init+0xe8>)
 8011c18:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011c1a:	4a23      	ldr	r2, [pc, #140]	@ (8011ca8 <MX_FREERTOS_Init+0xec>)
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4823      	ldr	r0, [pc, #140]	@ (8011cac <MX_FREERTOS_Init+0xf0>)
 8011c20:	f007 fbc8 	bl	80193b4 <osThreadNew>
 8011c24:	4b22      	ldr	r3, [pc, #136]	@ (8011cb0 <MX_FREERTOS_Init+0xf4>)
 8011c26:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011c28:	4a22      	ldr	r2, [pc, #136]	@ (8011cb4 <MX_FREERTOS_Init+0xf8>)
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	4822      	ldr	r0, [pc, #136]	@ (8011cb8 <MX_FREERTOS_Init+0xfc>)
 8011c2e:	f007 fbc1 	bl	80193b4 <osThreadNew>
 8011c32:	4b22      	ldr	r3, [pc, #136]	@ (8011cbc <MX_FREERTOS_Init+0x100>)
 8011c34:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011c36:	4a22      	ldr	r2, [pc, #136]	@ (8011cc0 <MX_FREERTOS_Init+0x104>)
 8011c38:	2100      	movs	r1, #0
 8011c3a:	4822      	ldr	r0, [pc, #136]	@ (8011cc4 <MX_FREERTOS_Init+0x108>)
 8011c3c:	f007 fbba 	bl	80193b4 <osThreadNew>
 8011c40:	4b21      	ldr	r3, [pc, #132]	@ (8011cc8 <MX_FREERTOS_Init+0x10c>)
 8011c42:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011c44:	4a21      	ldr	r2, [pc, #132]	@ (8011ccc <MX_FREERTOS_Init+0x110>)
 8011c46:	2100      	movs	r1, #0
 8011c48:	4821      	ldr	r0, [pc, #132]	@ (8011cd0 <MX_FREERTOS_Init+0x114>)
 8011c4a:	f007 fbb3 	bl	80193b4 <osThreadNew>
 8011c4e:	4b21      	ldr	r3, [pc, #132]	@ (8011cd4 <MX_FREERTOS_Init+0x118>)
 8011c50:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011c52:	4a21      	ldr	r2, [pc, #132]	@ (8011cd8 <MX_FREERTOS_Init+0x11c>)
 8011c54:	2100      	movs	r1, #0
 8011c56:	4821      	ldr	r0, [pc, #132]	@ (8011cdc <MX_FREERTOS_Init+0x120>)
 8011c58:	f007 fbac 	bl	80193b4 <osThreadNew>
 8011c5c:	4b20      	ldr	r3, [pc, #128]	@ (8011ce0 <MX_FREERTOS_Init+0x124>)
 8011c5e:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 8011c60:	4a20      	ldr	r2, [pc, #128]	@ (8011ce4 <MX_FREERTOS_Init+0x128>)
 8011c62:	2100      	movs	r1, #0
 8011c64:	4820      	ldr	r0, [pc, #128]	@ (8011ce8 <MX_FREERTOS_Init+0x12c>)
 8011c66:	f007 fba5 	bl	80193b4 <osThreadNew>
 8011c6a:	4b20      	ldr	r3, [pc, #128]	@ (8011cec <MX_FREERTOS_Init+0x130>)
 8011c6c:	6018      	str	r0, [r3, #0]
}
 8011c6e:	bd08      	pop	{r3, pc}
 8011c70:	0803780c 	.word	0x0803780c
 8011c74:	200008e0 	.word	0x200008e0
 8011c78:	080377fc 	.word	0x080377fc
 8011c7c:	200008dc 	.word	0x200008dc
 8011c80:	0803787c 	.word	0x0803787c
 8011c84:	200008f4 	.word	0x200008f4
 8011c88:	08037864 	.word	0x08037864
 8011c8c:	200008f0 	.word	0x200008f0
 8011c90:	0803784c 	.word	0x0803784c
 8011c94:	200008ec 	.word	0x200008ec
 8011c98:	08037834 	.word	0x08037834
 8011c9c:	200008e8 	.word	0x200008e8
 8011ca0:	0803781c 	.word	0x0803781c
 8011ca4:	200008e4 	.word	0x200008e4
 8011ca8:	08037948 	.word	0x08037948
 8011cac:	08011d19 	.word	0x08011d19
 8011cb0:	2000090c 	.word	0x2000090c
 8011cb4:	08037924 	.word	0x08037924
 8011cb8:	080111cd 	.word	0x080111cd
 8011cbc:	20000908 	.word	0x20000908
 8011cc0:	08037900 	.word	0x08037900
 8011cc4:	08011609 	.word	0x08011609
 8011cc8:	20000904 	.word	0x20000904
 8011ccc:	080378dc 	.word	0x080378dc
 8011cd0:	08011335 	.word	0x08011335
 8011cd4:	20000900 	.word	0x20000900
 8011cd8:	080378b8 	.word	0x080378b8
 8011cdc:	0801192d 	.word	0x0801192d
 8011ce0:	200008fc 	.word	0x200008fc
 8011ce4:	08037894 	.word	0x08037894
 8011ce8:	08011b0d 	.word	0x08011b0d
 8011cec:	200008f8 	.word	0x200008f8

08011cf0 <EthResetBegin>:
void EthResetBegin(void){
 8011cf0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cf8:	4801      	ldr	r0, [pc, #4]	@ (8011d00 <EthResetBegin+0x10>)
 8011cfa:	f005 f9d4 	bl	80170a6 <HAL_GPIO_WritePin>
}
 8011cfe:	bd08      	pop	{r3, pc}
 8011d00:	40020000 	.word	0x40020000

08011d04 <EthResetEnd>:
void EthResetEnd(void){
 8011d04:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011d06:	2201      	movs	r2, #1
 8011d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d0c:	4801      	ldr	r0, [pc, #4]	@ (8011d14 <EthResetEnd+0x10>)
 8011d0e:	f005 f9ca 	bl	80170a6 <HAL_GPIO_WritePin>
}
 8011d12:	bd08      	pop	{r3, pc}
 8011d14:	40020000 	.word	0x40020000

08011d18 <StartEthTask>:
{
 8011d18:	b530      	push	{r4, r5, lr}
 8011d1a:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011d1c:	ad22      	add	r5, sp, #136	@ 0x88
 8011d1e:	4b64      	ldr	r3, [pc, #400]	@ (8011eb0 <StartEthTask+0x198>)
 8011d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011d26:	ac02      	add	r4, sp, #8
 8011d28:	2280      	movs	r2, #128	@ 0x80
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f01b fdef 	bl	802d910 <memset>
 8011d32:	2340      	movs	r3, #64	@ 0x40
 8011d34:	f88d 3008 	strb.w	r3, [sp, #8]
 8011d38:	2322      	movs	r3, #34	@ 0x22
 8011d3a:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8011eb4 <StartEthTask+0x19c>)
 8011d40:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011d42:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011d46:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011d48:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011d4c:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011d4e:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011d52:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011d54:	f88d 300d 	strb.w	r3, [sp, #13]
 8011d58:	2301      	movs	r3, #1
 8011d5a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011d5e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011d62:	4b55      	ldr	r3, [pc, #340]	@ (8011eb8 <StartEthTask+0x1a0>)
 8011d64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d66:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011d68:	4b54      	ldr	r3, [pc, #336]	@ (8011ebc <StartEthTask+0x1a4>)
 8011d6a:	aa58      	add	r2, sp, #352	@ 0x160
 8011d6c:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011d6e:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011d70:	e003      	b.n	8011d7a <StartEthTask+0x62>
	  osDelay(500);
 8011d72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011d76:	f007 fb7c 	bl	8019472 <osDelay>
  while (mg_fs_mounted() == 0){
 8011d7a:	f009 ffa9 	bl	801bcd0 <mg_fs_mounted>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d0f7      	beq.n	8011d72 <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011d82:	a858      	add	r0, sp, #352	@ 0x160
 8011d84:	f012 fbb6 	bl	80244f4 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011d88:	4b4d      	ldr	r3, [pc, #308]	@ (8011ec0 <StartEthTask+0x1a8>)
 8011d8a:	2203      	movs	r2, #3
 8011d8c:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011d8e:	f003 f871 	bl	8014e74 <dash_hdl>
 8011d92:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011d94:	e00f      	b.n	8011db6 <StartEthTask+0x9e>
	  EthResetBegin();
 8011d96:	f7ff ffab 	bl	8011cf0 <EthResetBegin>
	  osDelay(500);
 8011d9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011d9e:	f007 fb68 	bl	8019472 <osDelay>
	  EthResetEnd();
 8011da2:	f7ff ffaf 	bl	8011d04 <EthResetEnd>
	  osDelay(2000);
 8011da6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011daa:	f007 fb62 	bl	8019472 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011dae:	a902      	add	r1, sp, #8
 8011db0:	a858      	add	r0, sp, #352	@ 0x160
 8011db2:	f017 ffcf 	bl	8029d54 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011db6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d0eb      	beq.n	8011d96 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011dbe:	2106      	movs	r1, #6
 8011dc0:	a802      	add	r0, sp, #8
 8011dc2:	f003 fcc1 	bl	8015748 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011dc6:	483f      	ldr	r0, [pc, #252]	@ (8011ec4 <StartEthTask+0x1ac>)
 8011dc8:	f003 f862 	bl	8014e90 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8011ebc <StartEthTask+0x1a4>)
 8011dce:	4622      	mov	r2, r4
 8011dd0:	493d      	ldr	r1, [pc, #244]	@ (8011ec8 <StartEthTask+0x1b0>)
 8011dd2:	a858      	add	r0, sp, #352	@ 0x160
 8011dd4:	f016 f9ec 	bl	80281b0 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011dd8:	e006      	b.n	8011de8 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011dda:	2101      	movs	r1, #1
 8011ddc:	a858      	add	r0, sp, #352	@ 0x160
 8011dde:	f018 fd53 	bl	802a888 <mg_mgr_poll>
    osDelay(1);
 8011de2:	2001      	movs	r0, #1
 8011de4:	f007 fb45 	bl	8019472 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011de8:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011dec:	2b03      	cmp	r3, #3
 8011dee:	d1f4      	bne.n	8011dda <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011df0:	4b32      	ldr	r3, [pc, #200]	@ (8011ebc <StartEthTask+0x1a4>)
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011df6:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011e04:	b2d2      	uxtb	r2, r2
 8011e06:	4931      	ldr	r1, [pc, #196]	@ (8011ecc <StartEthTask+0x1b4>)
 8011e08:	2001      	movs	r0, #1
 8011e0a:	f000 fa61 	bl	80122d0 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011e0e:	2200      	movs	r2, #0
 8011e10:	4611      	mov	r1, r2
 8011e12:	a826      	add	r0, sp, #152	@ 0x98
 8011e14:	f7ff fbbe 	bl	8011594 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011e18:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011e1c:	b1eb      	cbz	r3, 8011e5a <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011e1e:	492c      	ldr	r1, [pc, #176]	@ (8011ed0 <StartEthTask+0x1b8>)
 8011e20:	2001      	movs	r0, #1
 8011e22:	f000 fa55 	bl	80122d0 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011e26:	4b27      	ldr	r3, [pc, #156]	@ (8011ec4 <StartEthTask+0x1ac>)
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	ab47      	add	r3, sp, #284	@ 0x11c
 8011e32:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011e36:	a902      	add	r1, sp, #8
 8011e38:	a858      	add	r0, sp, #352	@ 0x160
 8011e3a:	f003 fbc3 	bl	80155c4 <mqtt_init>
  start_sntp(&mgr);
 8011e3e:	a858      	add	r0, sp, #352	@ 0x160
 8011e40:	f004 f8c8 	bl	8015fd4 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011e44:	a902      	add	r1, sp, #8
 8011e46:	a858      	add	r0, sp, #352	@ 0x160
 8011e48:	f004 fa90 	bl	801636c <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011e4c:	a858      	add	r0, sp, #352	@ 0x160
 8011e4e:	f001 f955 	bl	80130fc <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011e52:	f008 fd6b 	bl	801a92c <xTaskGetTickCount>
 8011e56:	4605      	mov	r5, r0
 8011e58:	e008      	b.n	8011e6c <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011e5a:	491e      	ldr	r1, [pc, #120]	@ (8011ed4 <StartEthTask+0x1bc>)
 8011e5c:	2001      	movs	r0, #1
 8011e5e:	f000 fa37 	bl	80122d0 <logging>
 8011e62:	e7ec      	b.n	8011e3e <StartEthTask+0x126>
      osDelay(1);
 8011e64:	2001      	movs	r0, #1
 8011e66:	f007 fb04 	bl	8019472 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011e6a:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011e6c:	f008 fd5e 	bl	801a92c <xTaskGetTickCount>
 8011e70:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011e72:	1b41      	subs	r1, r0, r5
 8011e74:	a858      	add	r0, sp, #352	@ 0x160
 8011e76:	f018 fd07 	bl	802a888 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	a802      	add	r0, sp, #8
 8011e80:	4798      	blx	r3
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d1ee      	bne.n	8011e64 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011e86:	f7ff ff33 	bl	8011cf0 <EthResetBegin>
    	  osDelay(100);
 8011e8a:	2064      	movs	r0, #100	@ 0x64
 8011e8c:	f007 faf1 	bl	8019472 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011e90:	f7ff ff38 	bl	8011d04 <EthResetEnd>
    	  osDelay(3000);
 8011e94:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011e98:	f007 faeb 	bl	8019472 <osDelay>
    	  mif.driver->init(&mif);
 8011e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	a802      	add	r0, sp, #8
 8011ea2:	4798      	blx	r3
    	  osDelay(7000);
 8011ea4:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011ea8:	f007 fae3 	bl	8019472 <osDelay>
 8011eac:	e7e5      	b.n	8011e7a <StartEthTask+0x162>
 8011eae:	bf00      	nop
 8011eb0:	08037154 	.word	0x08037154
 8011eb4:	1fff7a00 	.word	0x1fff7a00
 8011eb8:	20000118 	.word	0x20000118
 8011ebc:	20000914 	.word	0x20000914
 8011ec0:	2000012c 	.word	0x2000012c
 8011ec4:	08011595 	.word	0x08011595
 8011ec8:	08037724 	.word	0x08037724
 8011ecc:	080376bc 	.word	0x080376bc
 8011ed0:	08037738 	.word	0x08037738
 8011ed4:	08037750 	.word	0x08037750

08011ed8 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011ed8:	b20b      	sxth	r3, r1
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	dd20      	ble.n	8011f20 <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011ede:	b570      	push	{r4, r5, r6, lr}
 8011ee0:	b082      	sub	sp, #8
 8011ee2:	4606      	mov	r6, r0
 8011ee4:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011ee6:	188b      	adds	r3, r1, r2
 8011ee8:	2b04      	cmp	r3, #4
 8011eea:	dd02      	ble.n	8011ef2 <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011eec:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011eee:	b002      	add	sp, #8
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011ef2:	1e4c      	subs	r4, r1, #1
 8011ef4:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	2101      	movs	r1, #1
 8011efa:	a801      	add	r0, sp, #4
 8011efc:	f7ff fb4a 	bl	8011594 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011f00:	e00a      	b.n	8011f18 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011f02:	f104 0308 	add.w	r3, r4, #8
 8011f06:	446b      	add	r3, sp
 8011f08:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	b2a1      	uxth	r1, r4
 8011f10:	4630      	mov	r0, r6
 8011f12:	f000 ff49 	bl	8012da8 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011f16:	3401      	adds	r4, #1
 8011f18:	42a5      	cmp	r5, r4
 8011f1a:	dcf2      	bgt.n	8011f02 <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011f1c:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011f1e:	e7e6      	b.n	8011eee <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011f20:	2001      	movs	r0, #1
}
 8011f22:	4770      	bx	lr

08011f24 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f26:	b083      	sub	sp, #12
 8011f28:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011f2a:	b20a      	sxth	r2, r1
 8011f2c:	2a00      	cmp	r2, #0
 8011f2e:	dd43      	ble.n	8011fb8 <eMBRegCoilsCB+0x94>
 8011f30:	4605      	mov	r5, r0
 8011f32:	461f      	mov	r7, r3
 8011f34:	198b      	adds	r3, r1, r6
 8011f36:	2b04      	cmp	r3, #4
 8011f38:	dc41      	bgt.n	8011fbe <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011f3a:	b327      	cbz	r7, 8011f86 <eMBRegCoilsCB+0x62>
 8011f3c:	2f01      	cmp	r7, #1
 8011f3e:	d139      	bne.n	8011fb4 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011f40:	3901      	subs	r1, #1
 8011f42:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011f44:	2200      	movs	r2, #0
 8011f46:	2102      	movs	r1, #2
 8011f48:	a801      	add	r0, sp, #4
 8011f4a:	f7ff fb23 	bl	8011594 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011f4e:	4627      	mov	r7, r4
 8011f50:	e00f      	b.n	8011f72 <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011f52:	2201      	movs	r2, #1
 8011f54:	b2b9      	uxth	r1, r7
 8011f56:	4628      	mov	r0, r5
 8011f58:	f000 ff5a 	bl	8012e10 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	2100      	movs	r1, #0
 8011f60:	4628      	mov	r0, r5
 8011f62:	f000 ff55 	bl	8012e10 <xMBUtilGetBits>
 8011f66:	f107 0308 	add.w	r3, r7, #8
 8011f6a:	446b      	add	r3, sp
 8011f6c:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011f70:	3701      	adds	r7, #1
 8011f72:	1933      	adds	r3, r6, r4
 8011f74:	42bb      	cmp	r3, r7
 8011f76:	dcec      	bgt.n	8011f52 <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011f78:	2201      	movs	r2, #1
 8011f7a:	2102      	movs	r1, #2
 8011f7c:	a801      	add	r0, sp, #4
 8011f7e:	f7ff fb09 	bl	8011594 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011f82:	2000      	movs	r0, #0
 8011f84:	e019      	b.n	8011fba <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011f86:	1e4c      	subs	r4, r1, #1
 8011f88:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	2102      	movs	r1, #2
 8011f8e:	a801      	add	r0, sp, #4
 8011f90:	f7ff fb00 	bl	8011594 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011f94:	e00a      	b.n	8011fac <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011f96:	f104 0308 	add.w	r3, r4, #8
 8011f9a:	446b      	add	r3, sp
 8011f9c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	b2a1      	uxth	r1, r4
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f000 feff 	bl	8012da8 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011faa:	3401      	adds	r4, #1
 8011fac:	42a6      	cmp	r6, r4
 8011fae:	dcf2      	bgt.n	8011f96 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011fb0:	4638      	mov	r0, r7
 8011fb2:	e002      	b.n	8011fba <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011fb4:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011fb6:	e000      	b.n	8011fba <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011fb8:	2001      	movs	r0, #1
}
 8011fba:	b003      	add	sp, #12
 8011fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011fbe:	2001      	movs	r0, #1
 8011fc0:	e7fb      	b.n	8011fba <eMBRegCoilsCB+0x96>

08011fc2 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	4770      	bx	lr

08011fc6 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	4770      	bx	lr
	...

08011fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fd0:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fd2:	2400      	movs	r4, #0
 8011fd4:	9403      	str	r4, [sp, #12]
 8011fd6:	9404      	str	r4, [sp, #16]
 8011fd8:	9405      	str	r4, [sp, #20]
 8011fda:	9406      	str	r4, [sp, #24]
 8011fdc:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011fde:	9400      	str	r4, [sp, #0]
 8011fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80120d4 <MX_GPIO_Init+0x108>)
 8011fe2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fe4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011fe8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011ff0:	9200      	str	r2, [sp, #0]
 8011ff2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ff4:	9401      	str	r4, [sp, #4]
 8011ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ff8:	f042 0201 	orr.w	r2, r2, #1
 8011ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012000:	f002 0201 	and.w	r2, r2, #1
 8012004:	9201      	str	r2, [sp, #4]
 8012006:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012008:	9402      	str	r4, [sp, #8]
 801200a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801200c:	f042 0202 	orr.w	r2, r2, #2
 8012010:	631a      	str	r2, [r3, #48]	@ 0x30
 8012012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012014:	f003 0302 	and.w	r3, r3, #2
 8012018:	9302      	str	r3, [sp, #8]
 801201a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 801201c:	4e2e      	ldr	r6, [pc, #184]	@ (80120d8 <MX_GPIO_Init+0x10c>)
 801201e:	4622      	mov	r2, r4
 8012020:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8012024:	4630      	mov	r0, r6
 8012026:	f005 f83e 	bl	80170a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 801202a:	4d2c      	ldr	r5, [pc, #176]	@ (80120dc <MX_GPIO_Init+0x110>)
 801202c:	4622      	mov	r2, r4
 801202e:	2107      	movs	r1, #7
 8012030:	4628      	mov	r0, r5
 8012032:	f005 f838 	bl	80170a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8012036:	2201      	movs	r2, #1
 8012038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801203c:	4628      	mov	r0, r5
 801203e:	f005 f832 	bl	80170a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8012042:	2201      	movs	r2, #1
 8012044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012048:	4630      	mov	r0, r6
 801204a:	f005 f82c 	bl	80170a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 801204e:	f04f 0907 	mov.w	r9, #7
 8012052:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012056:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012058:	f04f 0802 	mov.w	r8, #2
 801205c:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012060:	a903      	add	r1, sp, #12
 8012062:	4630      	mov	r0, r6
 8012064:	f004 feac 	bl	8016dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8012068:	23e0      	movs	r3, #224	@ 0xe0
 801206a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801206c:	2701      	movs	r7, #1
 801206e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012070:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012072:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012074:	a903      	add	r1, sp, #12
 8012076:	4630      	mov	r0, r6
 8012078:	f004 fea2 	bl	8016dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 801207c:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012080:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012082:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012084:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012086:	a903      	add	r1, sp, #12
 8012088:	4628      	mov	r0, r5
 801208a:	f004 fe99 	bl	8016dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 801208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012092:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012094:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012096:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012098:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 801209c:	a903      	add	r1, sp, #12
 801209e:	4628      	mov	r0, r5
 80120a0:	f004 fe8e 	bl	8016dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 80120a4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80120a8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80120aa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80120ae:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120b2:	a903      	add	r1, sp, #12
 80120b4:	4630      	mov	r0, r6
 80120b6:	f004 fe83 	bl	8016dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80120ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80120be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80120c0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120c2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80120c4:	a903      	add	r1, sp, #12
 80120c6:	4628      	mov	r0, r5
 80120c8:	f004 fe7a 	bl	8016dc0 <HAL_GPIO_Init>

}
 80120cc:	b009      	add	sp, #36	@ 0x24
 80120ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120d2:	bf00      	nop
 80120d4:	40023800 	.word	0x40023800
 80120d8:	40020000 	.word	0x40020000
 80120dc:	40020400 	.word	0x40020400

080120e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80120e0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80120e2:	480b      	ldr	r0, [pc, #44]	@ (8012110 <MX_I2C1_Init+0x30>)
 80120e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012114 <MX_I2C1_Init+0x34>)
 80120e6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 80120e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012118 <MX_I2C1_Init+0x38>)
 80120ea:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80120ec:	2300      	movs	r3, #0
 80120ee:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80120f0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80120f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80120f6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80120f8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80120fa:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80120fc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80120fe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012100:	f005 f972 	bl	80173e8 <HAL_I2C_Init>
 8012104:	b900      	cbnz	r0, 8012108 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012106:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012108:	f000 f98c 	bl	8012424 <Error_Handler>
}
 801210c:	e7fb      	b.n	8012106 <MX_I2C1_Init+0x26>
 801210e:	bf00      	nop
 8012110:	2000091c 	.word	0x2000091c
 8012114:	40005400 	.word	0x40005400
 8012118:	00030d40 	.word	0x00030d40

0801211c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801211c:	b530      	push	{r4, r5, lr}
 801211e:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012120:	2300      	movs	r3, #0
 8012122:	9303      	str	r3, [sp, #12]
 8012124:	9304      	str	r3, [sp, #16]
 8012126:	9305      	str	r3, [sp, #20]
 8012128:	9306      	str	r3, [sp, #24]
 801212a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 801212c:	6802      	ldr	r2, [r0, #0]
 801212e:	4b15      	ldr	r3, [pc, #84]	@ (8012184 <HAL_I2C_MspInit+0x68>)
 8012130:	429a      	cmp	r2, r3
 8012132:	d001      	beq.n	8012138 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8012134:	b009      	add	sp, #36	@ 0x24
 8012136:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012138:	2500      	movs	r5, #0
 801213a:	9501      	str	r5, [sp, #4]
 801213c:	4c12      	ldr	r4, [pc, #72]	@ (8012188 <HAL_I2C_MspInit+0x6c>)
 801213e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012140:	f043 0302 	orr.w	r3, r3, #2
 8012144:	6323      	str	r3, [r4, #48]	@ 0x30
 8012146:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012148:	f003 0302 	and.w	r3, r3, #2
 801214c:	9301      	str	r3, [sp, #4]
 801214e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012150:	23c0      	movs	r3, #192	@ 0xc0
 8012152:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012154:	2312      	movs	r3, #18
 8012156:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012158:	2301      	movs	r3, #1
 801215a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801215c:	2303      	movs	r3, #3
 801215e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012160:	2304      	movs	r3, #4
 8012162:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012164:	a903      	add	r1, sp, #12
 8012166:	4809      	ldr	r0, [pc, #36]	@ (801218c <HAL_I2C_MspInit+0x70>)
 8012168:	f004 fe2a 	bl	8016dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 801216c:	9502      	str	r5, [sp, #8]
 801216e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012170:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012174:	6423      	str	r3, [r4, #64]	@ 0x40
 8012176:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801217c:	9302      	str	r3, [sp, #8]
 801217e:	9b02      	ldr	r3, [sp, #8]
}
 8012180:	e7d8      	b.n	8012134 <HAL_I2C_MspInit+0x18>
 8012182:	bf00      	nop
 8012184:	40005400 	.word	0x40005400
 8012188:	40023800 	.word	0x40023800
 801218c:	40020400 	.word	0x40020400

08012190 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8012190:	6802      	ldr	r2, [r0, #0]
 8012192:	4b0a      	ldr	r3, [pc, #40]	@ (80121bc <HAL_I2C_MspDeInit+0x2c>)
 8012194:	429a      	cmp	r2, r3
 8012196:	d000      	beq.n	801219a <HAL_I2C_MspDeInit+0xa>
 8012198:	4770      	bx	lr
{
 801219a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801219c:	4a08      	ldr	r2, [pc, #32]	@ (80121c0 <HAL_I2C_MspDeInit+0x30>)
 801219e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80121a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80121a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80121a6:	4c07      	ldr	r4, [pc, #28]	@ (80121c4 <HAL_I2C_MspDeInit+0x34>)
 80121a8:	2140      	movs	r1, #64	@ 0x40
 80121aa:	4620      	mov	r0, r4
 80121ac:	f004 feec 	bl	8016f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80121b0:	2180      	movs	r1, #128	@ 0x80
 80121b2:	4620      	mov	r0, r4
 80121b4:	f004 fee8 	bl	8016f88 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80121b8:	bd10      	pop	{r4, pc}
 80121ba:	bf00      	nop
 80121bc:	40005400 	.word	0x40005400
 80121c0:	40023800 	.word	0x40023800
 80121c4:	40020400 	.word	0x40020400

080121c8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80121c8:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80121ca:	4807      	ldr	r0, [pc, #28]	@ (80121e8 <MX_IWDG_Init+0x20>)
 80121cc:	4b07      	ldr	r3, [pc, #28]	@ (80121ec <MX_IWDG_Init+0x24>)
 80121ce:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80121d0:	2303      	movs	r3, #3
 80121d2:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 80121d4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80121d8:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80121da:	f005 fb83 	bl	80178e4 <HAL_IWDG_Init>
 80121de:	b900      	cbnz	r0, 80121e2 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80121e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80121e2:	f000 f91f 	bl	8012424 <Error_Handler>
}
 80121e6:	e7fb      	b.n	80121e0 <MX_IWDG_Init+0x18>
 80121e8:	20000970 	.word	0x20000970
 80121ec:	40003000 	.word	0x40003000

080121f0 <proto>:
//#define time_ms_now() mg_now()
#define time_ms_now() get_rtc_timestamp_ms()
logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 80121f0:	b084      	sub	sp, #16
 80121f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80121f6:	b004      	add	sp, #16
 80121f8:	4770      	bx	lr

080121fa <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80121fa:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80121fc:	fb01 f400 	mul.w	r4, r1, r0
 8012200:	4620      	mov	r0, r4
 8012202:	f009 fb39 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012206:	4605      	mov	r5, r0
 8012208:	b118      	cbz	r0, 8012212 <mg_calloc+0x18>
 801220a:	4622      	mov	r2, r4
 801220c:	2100      	movs	r1, #0
 801220e:	f01b fb7f 	bl	802d910 <memset>
  return p;
}
 8012212:	4628      	mov	r0, r5
 8012214:	bd38      	pop	{r3, r4, r5, pc}
	...

08012218 <get_rtc_timestamp_ms>:
void (*_send_log_mess)(struct log_message mess) = proto;



// Function to get current timestamp from RTC
time_t get_rtc_timestamp_ms(void) {
 8012218:	b510      	push	{r4, lr}
 801221a:	b090      	sub	sp, #64	@ 0x40
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    // Read the current date and time from RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801221c:	4c25      	ldr	r4, [pc, #148]	@ (80122b4 <get_rtc_timestamp_ms+0x9c>)
 801221e:	2200      	movs	r2, #0
 8012220:	a90b      	add	r1, sp, #44	@ 0x2c
 8012222:	4620      	mov	r0, r4
 8012224:	f006 f909 	bl	801843a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8012228:	2200      	movs	r2, #0
 801222a:	a90a      	add	r1, sp, #40	@ 0x28
 801222c:	4620      	mov	r0, r4
 801222e:	f006 f92a 	bl	8018486 <HAL_RTC_GetDate>

    // Convert RTC date and time to UNIX timestamp
    struct tm t;
    memset(&t, 0, sizeof(struct tm));
 8012232:	2224      	movs	r2, #36	@ 0x24
 8012234:	2100      	movs	r1, #0
 8012236:	a801      	add	r0, sp, #4
 8012238:	f01b fb6a 	bl	802d910 <memset>

    t.tm_year = sDate.Year + 100;  // Year since 1900 (RTC year starts from 2000)
 801223c:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8012240:	3364      	adds	r3, #100	@ 0x64
 8012242:	9306      	str	r3, [sp, #24]
    t.tm_mon = sDate.Month - 1;    // RTC month is 1-12, struct tm month is 0-11
 8012244:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8012248:	3b01      	subs	r3, #1
 801224a:	9305      	str	r3, [sp, #20]
    t.tm_mday = sDate.Date;
 801224c:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8012250:	9304      	str	r3, [sp, #16]
    t.tm_hour = sTime.Hours;
 8012252:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8012256:	9303      	str	r3, [sp, #12]
    t.tm_min = sTime.Minutes;
 8012258:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 801225c:	9302      	str	r3, [sp, #8]
    t.tm_sec = sTime.Seconds;
 801225e:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012262:	9301      	str	r3, [sp, #4]

    time_t timestamp = mktime(&t); // Convert to UNIX timestamp
 8012264:	a801      	add	r0, sp, #4
 8012266:	f01b fe51 	bl	802df0c <mktime>

    // Add milliseconds from RTC subseconds
    uint32_t ms = 1000 - ((sTime.SubSeconds * 1000) / sTime.SecondFraction + 1);
 801226a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801226c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012270:	fb03 f202 	mul.w	r2, r3, r2
 8012274:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012276:	fbb2 f2f3 	udiv	r2, r2, r3
 801227a:	f5c2 7279 	rsb	r2, r2, #996	@ 0x3e4
 801227e:	3203      	adds	r2, #3

    return (timestamp * 1000) + ms;
 8012280:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 8012284:	ea4c 6cd0 	orr.w	ip, ip, r0, lsr #27
 8012288:	0143      	lsls	r3, r0, #5
 801228a:	1a1b      	subs	r3, r3, r0
 801228c:	eb6c 0c01 	sbc.w	ip, ip, r1
 8012290:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8012294:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	181b      	adds	r3, r3, r0
 801229c:	eb41 010c 	adc.w	r1, r1, ip
 80122a0:	00c9      	lsls	r1, r1, #3
 80122a2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80122a6:	00db      	lsls	r3, r3, #3
 80122a8:	18d0      	adds	r0, r2, r3
}
 80122aa:	f141 0100 	adc.w	r1, r1, #0
 80122ae:	b010      	add	sp, #64	@ 0x40
 80122b0:	bd10      	pop	{r4, pc}
 80122b2:	bf00      	nop
 80122b4:	20000980 	.word	0x20000980

080122b8 <reg_logging_fn>:



void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 80122b8:	b108      	cbz	r0, 80122be <reg_logging_fn+0x6>
		_send_log_mess = fn;
 80122ba:	4a01      	ldr	r2, [pc, #4]	@ (80122c0 <reg_logging_fn+0x8>)
 80122bc:	6010      	str	r0, [r2, #0]
	}
}
 80122be:	4770      	bx	lr
 80122c0:	20000000 	.word	0x20000000

080122c4 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 80122c4:	4b01      	ldr	r3, [pc, #4]	@ (80122cc <logger_set_level+0x8>)
 80122c6:	7018      	strb	r0, [r3, #0]
}
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	2000097c 	.word	0x2000097c

080122d0 <logging>:

void logging(logging_level_t level, const char *format, ...){
 80122d0:	b40e      	push	{r1, r2, r3}
 80122d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122d4:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 80122d8:	4b44      	ldr	r3, [pc, #272]	@ (80123ec <logging+0x11c>)
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	4283      	cmp	r3, r0
 80122de:	d905      	bls.n	80122ec <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 80122e0:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 80122e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80122e8:	b003      	add	sp, #12
 80122ea:	4770      	bx	lr
 80122ec:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 80122ee:	2101      	movs	r1, #1
 80122f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80122f4:	f7ff ff81 	bl	80121fa <mg_calloc>
    if (!tmp_buf){
 80122f8:	4605      	mov	r5, r0
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d0f0      	beq.n	80122e0 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 80122fe:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012302:	2100      	movs	r1, #0
 8012304:	a85b      	add	r0, sp, #364	@ 0x16c
 8012306:	f01b fb03 	bl	802d910 <memset>
    mess.log_level = level;
 801230a:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 801230e:	f7ff ff83 	bl	8012218 <get_rtc_timestamp_ms>
 8012312:	f7fe f95b 	bl	80105cc <__aeabi_l2d>
 8012316:	4606      	mov	r6, r0
 8012318:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 801231a:	2200      	movs	r2, #0
 801231c:	4b34      	ldr	r3, [pc, #208]	@ (80123f0 <logging+0x120>)
 801231e:	f7fe faad 	bl	801087c <__aeabi_ddiv>
 8012322:	f7fe fd45 	bl	8010db0 <__aeabi_d2lz>
 8012326:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 801232a:	a94f      	add	r1, sp, #316	@ 0x13c
 801232c:	a858      	add	r0, sp, #352	@ 0x160
 801232e:	f01b fc2b 	bl	802db88 <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8012332:	ab4f      	add	r3, sp, #316	@ 0x13c
 8012334:	4a2f      	ldr	r2, [pc, #188]	@ (80123f4 <logging+0x124>)
 8012336:	2140      	movs	r1, #64	@ 0x40
 8012338:	a83f      	add	r0, sp, #252	@ 0xfc
 801233a:	f01c fcbb 	bl	802ecb4 <strftime>
 801233e:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7fe fc20 	bl	8010b88 <__aeabi_d2iz>
 8012348:	4a2b      	ldr	r2, [pc, #172]	@ (80123f8 <logging+0x128>)
 801234a:	fb82 3200 	smull	r3, r2, r2, r0
 801234e:	17c3      	asrs	r3, r0, #31
 8012350:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8012354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012358:	fb02 0313 	mls	r3, r2, r3, r0
 801235c:	4a27      	ldr	r2, [pc, #156]	@ (80123fc <logging+0x12c>)
 801235e:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8012362:	a83f      	add	r0, sp, #252	@ 0xfc
 8012364:	4420      	add	r0, r4
 8012366:	f01a fda9 	bl	802cebc <snprintf>
 801236a:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 801236c:	1c63      	adds	r3, r4, #1
 801236e:	2220      	movs	r2, #32
 8012370:	a93f      	add	r1, sp, #252	@ 0xfc
 8012372:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8012374:	2200      	movs	r2, #0
 8012376:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8012378:	aba2      	add	r3, sp, #648	@ 0x288
 801237a:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 801237c:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8012380:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8012382:	21fd      	movs	r1, #253	@ 0xfd
 8012384:	4630      	mov	r0, r6
 8012386:	f01b f861 	bl	802d44c <vsnprintf>
 801238a:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 801238c:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8012390:	9601      	str	r6, [sp, #4]
 8012392:	4b1b      	ldr	r3, [pc, #108]	@ (8012400 <logging+0x130>)
 8012394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	ab3f      	add	r3, sp, #252	@ 0xfc
 801239c:	4a19      	ldr	r2, [pc, #100]	@ (8012404 <logging+0x134>)
 801239e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123a2:	4628      	mov	r0, r5
 80123a4:	f01a fd8a 	bl	802cebc <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 80123a8:	2cf5      	cmp	r4, #245	@ 0xf5
 80123aa:	d81b      	bhi.n	80123e4 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 80123ac:	4628      	mov	r0, r5
 80123ae:	f7fd ff77 	bl	80102a0 <strlen>
 80123b2:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 80123b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80123ba:	4629      	mov	r1, r5
 80123bc:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 80123c0:	f01b faed 	bl	802d99e <strncpy>
    if (_send_log_mess) {
 80123c4:	4b10      	ldr	r3, [pc, #64]	@ (8012408 <logging+0x138>)
 80123c6:	681e      	ldr	r6, [r3, #0]
 80123c8:	b146      	cbz	r6, 80123dc <logging+0x10c>
        _send_log_mess(mess);
 80123ca:	ac5b      	add	r4, sp, #364	@ 0x16c
 80123cc:	22f2      	movs	r2, #242	@ 0xf2
 80123ce:	a95f      	add	r1, sp, #380	@ 0x17c
 80123d0:	4668      	mov	r0, sp
 80123d2:	f01d f803 	bl	802f3dc <memcpy>
 80123d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80123da:	47b0      	blx	r6
    free(tmp_buf);
 80123dc:	4628      	mov	r0, r5
 80123de:	f009 facd 	bl	801b97c <vPortFree>
 80123e2:	e77d      	b.n	80122e0 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 80123e4:	23f6      	movs	r3, #246	@ 0xf6
 80123e6:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 80123ea:	e7e4      	b.n	80123b6 <logging+0xe6>
 80123ec:	2000097c 	.word	0x2000097c
 80123f0:	408f4000 	.word	0x408f4000
 80123f4:	0803796c 	.word	0x0803796c
 80123f8:	10624dd3 	.word	0x10624dd3
 80123fc:	08037980 	.word	0x08037980
 8012400:	20000004 	.word	0x20000004
 8012404:	08037988 	.word	0x08037988
 8012408:	20000000 	.word	0x20000000

0801240c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801240c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 801240e:	6802      	ldr	r2, [r0, #0]
 8012410:	4b03      	ldr	r3, [pc, #12]	@ (8012420 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8012412:	429a      	cmp	r2, r3
 8012414:	d000      	beq.n	8012418 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012416:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012418:	f004 fa92 	bl	8016940 <HAL_IncTick>
}
 801241c:	e7fb      	b.n	8012416 <HAL_TIM_PeriodElapsedCallback+0xa>
 801241e:	bf00      	nop
 8012420:	40014000 	.word	0x40014000

08012424 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012424:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012426:	e7fe      	b.n	8012426 <Error_Handler+0x2>

08012428 <SystemClock_Config>:
{
 8012428:	b500      	push	{lr}
 801242a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801242c:	2230      	movs	r2, #48	@ 0x30
 801242e:	2100      	movs	r1, #0
 8012430:	a808      	add	r0, sp, #32
 8012432:	f01b fa6d 	bl	802d910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012436:	2300      	movs	r3, #0
 8012438:	9303      	str	r3, [sp, #12]
 801243a:	9304      	str	r3, [sp, #16]
 801243c:	9305      	str	r3, [sp, #20]
 801243e:	9306      	str	r3, [sp, #24]
 8012440:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012442:	9301      	str	r3, [sp, #4]
 8012444:	4a20      	ldr	r2, [pc, #128]	@ (80124c8 <SystemClock_Config+0xa0>)
 8012446:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012448:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 801244c:	6411      	str	r1, [r2, #64]	@ 0x40
 801244e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012450:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8012454:	9201      	str	r2, [sp, #4]
 8012456:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012458:	9302      	str	r3, [sp, #8]
 801245a:	4b1c      	ldr	r3, [pc, #112]	@ (80124cc <SystemClock_Config+0xa4>)
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8012462:	601a      	str	r2, [r3, #0]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801246a:	9302      	str	r3, [sp, #8]
 801246c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801246e:	2309      	movs	r3, #9
 8012470:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012476:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012478:	2301      	movs	r3, #1
 801247a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801247c:	2202      	movs	r2, #2
 801247e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012480:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012484:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8012486:	2304      	movs	r3, #4
 8012488:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 801248a:	2164      	movs	r1, #100	@ 0x64
 801248c:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801248e:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8012490:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012492:	a808      	add	r0, sp, #32
 8012494:	f005 fa58 	bl	8017948 <HAL_RCC_OscConfig>
 8012498:	b988      	cbnz	r0, 80124be <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801249a:	230f      	movs	r3, #15
 801249c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801249e:	2302      	movs	r3, #2
 80124a0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80124a2:	2300      	movs	r3, #0
 80124a4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80124a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80124aa:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80124ac:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80124ae:	2103      	movs	r1, #3
 80124b0:	a803      	add	r0, sp, #12
 80124b2:	f005 fcb3 	bl	8017e1c <HAL_RCC_ClockConfig>
 80124b6:	b920      	cbnz	r0, 80124c2 <SystemClock_Config+0x9a>
}
 80124b8:	b015      	add	sp, #84	@ 0x54
 80124ba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80124be:	f7ff ffb1 	bl	8012424 <Error_Handler>
    Error_Handler();
 80124c2:	f7ff ffaf 	bl	8012424 <Error_Handler>
 80124c6:	bf00      	nop
 80124c8:	40023800 	.word	0x40023800
 80124cc:	40007000 	.word	0x40007000

080124d0 <main>:
{
 80124d0:	b500      	push	{lr}
 80124d2:	b083      	sub	sp, #12
 80124d4:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80124d6:	4b2f      	ldr	r3, [pc, #188]	@ (8012594 <main+0xc4>)
 80124d8:	4a2f      	ldr	r2, [pc, #188]	@ (8012598 <main+0xc8>)
 80124da:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80124dc:	b662      	cpsie	i
	volatile int i = 1000000;
 80124de:	4b2f      	ldr	r3, [pc, #188]	@ (801259c <main+0xcc>)
 80124e0:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80124e2:	e002      	b.n	80124ea <main+0x1a>
		i--;
 80124e4:	9b01      	ldr	r3, [sp, #4]
 80124e6:	3b01      	subs	r3, #1
 80124e8:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80124ea:	9b01      	ldr	r3, [sp, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	dcf9      	bgt.n	80124e4 <main+0x14>
  HAL_Init();
 80124f0:	f004 fa0c 	bl	801690c <HAL_Init>
  SystemClock_Config();
 80124f4:	f7ff ff98 	bl	8012428 <SystemClock_Config>
  MX_GPIO_Init();
 80124f8:	f7ff fd68 	bl	8011fcc <MX_GPIO_Init>
  MX_SPI2_Init();
 80124fc:	f000 f8e8 	bl	80126d0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012500:	f7ff fdee 	bl	80120e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8012504:	f000 f8c2 	bl	801268c <MX_SPI1_Init>
  MX_IWDG_Init();
 8012508:	f7ff fe5e 	bl	80121c8 <MX_IWDG_Init>
  MX_ADC1_Init();
 801250c:	f7fe fde6 	bl	80110dc <MX_ADC1_Init>
  MX_RTC_Init();
 8012510:	f000 f848 	bl	80125a4 <MX_RTC_Init>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3)){
 8012514:	4d22      	ldr	r5, [pc, #136]	@ (80125a0 <main+0xd0>)
 8012516:	2102      	movs	r1, #2
 8012518:	4628      	mov	r0, r5
 801251a:	f005 ffd7 	bl	80184cc <HAL_RTCEx_BKUPRead>
 801251e:	4604      	mov	r4, r0
 8012520:	2103      	movs	r1, #3
 8012522:	4628      	mov	r0, r5
 8012524:	f005 ffd2 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012528:	4284      	cmp	r4, r0
 801252a:	d01e      	beq.n	801256a <main+0x9a>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5)){
 801252c:	4d1c      	ldr	r5, [pc, #112]	@ (80125a0 <main+0xd0>)
 801252e:	2104      	movs	r1, #4
 8012530:	4628      	mov	r0, r5
 8012532:	f005 ffcb 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012536:	4604      	mov	r4, r0
 8012538:	2105      	movs	r1, #5
 801253a:	4628      	mov	r0, r5
 801253c:	f005 ffc6 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012540:	4284      	cmp	r4, r0
 8012542:	d019      	beq.n	8012578 <main+0xa8>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) == HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7)){
 8012544:	4d16      	ldr	r5, [pc, #88]	@ (80125a0 <main+0xd0>)
 8012546:	2106      	movs	r1, #6
 8012548:	4628      	mov	r0, r5
 801254a:	f005 ffbf 	bl	80184cc <HAL_RTCEx_BKUPRead>
 801254e:	4604      	mov	r4, r0
 8012550:	2107      	movs	r1, #7
 8012552:	4628      	mov	r0, r5
 8012554:	f005 ffba 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012558:	4284      	cmp	r4, r0
 801255a:	d014      	beq.n	8012586 <main+0xb6>
  osKernelInitialize();
 801255c:	f006 fefc 	bl	8019358 <osKernelInitialize>
  MX_FREERTOS_Init();
 8012560:	f7ff fb2c 	bl	8011bbc <MX_FREERTOS_Init>
  osKernelStart();
 8012564:	f006 ff0a 	bl	801937c <osKernelStart>
  while (1)
 8012568:	e7fe      	b.n	8012568 <main+0x98>
	  sFLASH_SetEraceSectorTimes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2));
 801256a:	2102      	movs	r1, #2
 801256c:	4628      	mov	r0, r5
 801256e:	f005 ffad 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012572:	f004 f9c5 	bl	8016900 <sFLASH_SetEraceSectorTimes>
 8012576:	e7d9      	b.n	801252c <main+0x5c>
	  sFLASH_SetReadedBytes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4));
 8012578:	2104      	movs	r1, #4
 801257a:	4628      	mov	r0, r5
 801257c:	f005 ffa6 	bl	80184cc <HAL_RTCEx_BKUPRead>
 8012580:	f004 f9b2 	bl	80168e8 <sFLASH_SetReadedBytes>
 8012584:	e7de      	b.n	8012544 <main+0x74>
	  sFLASH_SetWritedBytes(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6));
 8012586:	2106      	movs	r1, #6
 8012588:	4628      	mov	r0, r5
 801258a:	f005 ff9f 	bl	80184cc <HAL_RTCEx_BKUPRead>
 801258e:	f004 f9b1 	bl	80168f4 <sFLASH_SetWritedBytes>
 8012592:	e7e3      	b.n	801255c <main+0x8c>
 8012594:	e000ed00 	.word	0xe000ed00
 8012598:	08010000 	.word	0x08010000
 801259c:	000f4240 	.word	0x000f4240
 80125a0:	20000980 	.word	0x20000980

080125a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80125a4:	b500      	push	{lr}
 80125a6:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80125a8:	2300      	movs	r3, #0
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	9302      	str	r3, [sp, #8]
 80125ae:	9303      	str	r3, [sp, #12]
 80125b0:	9304      	str	r3, [sp, #16]
 80125b2:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 80125b4:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80125b6:	4820      	ldr	r0, [pc, #128]	@ (8012638 <MX_RTC_Init+0x94>)
 80125b8:	4a20      	ldr	r2, [pc, #128]	@ (801263c <MX_RTC_Init+0x98>)
 80125ba:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80125bc:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80125be:	227f      	movs	r2, #127	@ 0x7f
 80125c0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80125c2:	22ff      	movs	r2, #255	@ 0xff
 80125c4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80125c6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80125c8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80125ca:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80125cc:	f005 fe24 	bl	8018218 <HAL_RTC_Init>
 80125d0:	bb40      	cbnz	r0, 8012624 <MX_RTC_Init+0x80>
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  //check if RTC init flag exist
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32F2) {
 80125d2:	2101      	movs	r1, #1
 80125d4:	4818      	ldr	r0, [pc, #96]	@ (8012638 <MX_RTC_Init+0x94>)
 80125d6:	f005 ff79 	bl	80184cc <HAL_RTCEx_BKUPRead>
 80125da:	f243 23f2 	movw	r3, #13042	@ 0x32f2
 80125de:	4298      	cmp	r0, r3
 80125e0:	d01d      	beq.n	801261e <MX_RTC_Init+0x7a>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80125e8:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80125ec:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80125f0:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80125f2:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80125f4:	2201      	movs	r2, #1
 80125f6:	a901      	add	r1, sp, #4
 80125f8:	480f      	ldr	r0, [pc, #60]	@ (8012638 <MX_RTC_Init+0x94>)
 80125fa:	f005 fe67 	bl	80182cc <HAL_RTC_SetTime>
 80125fe:	b9a0      	cbnz	r0, 801262a <MX_RTC_Init+0x86>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8012600:	2201      	movs	r2, #1
 8012602:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8012606:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 801260a:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 801260e:	2300      	movs	r3, #0
 8012610:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8012614:	4669      	mov	r1, sp
 8012616:	4808      	ldr	r0, [pc, #32]	@ (8012638 <MX_RTC_Init+0x94>)
 8012618:	f005 feb8 	bl	801838c <HAL_RTC_SetDate>
 801261c:	b940      	cbnz	r0, 8012630 <MX_RTC_Init+0x8c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801261e:	b007      	add	sp, #28
 8012620:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8012624:	f7ff fefe 	bl	8012424 <Error_Handler>
 8012628:	e7d3      	b.n	80125d2 <MX_RTC_Init+0x2e>
    Error_Handler();
 801262a:	f7ff fefb 	bl	8012424 <Error_Handler>
 801262e:	e7e7      	b.n	8012600 <MX_RTC_Init+0x5c>
    Error_Handler();
 8012630:	f7ff fef8 	bl	8012424 <Error_Handler>
 8012634:	e7f3      	b.n	801261e <MX_RTC_Init+0x7a>
 8012636:	bf00      	nop
 8012638:	20000980 	.word	0x20000980
 801263c:	40002800 	.word	0x40002800

08012640 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8012640:	b500      	push	{lr}
 8012642:	b087      	sub	sp, #28

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012644:	2300      	movs	r3, #0
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	9301      	str	r3, [sp, #4]
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	9303      	str	r3, [sp, #12]
 801264e:	9304      	str	r3, [sp, #16]
 8012650:	9305      	str	r3, [sp, #20]
  if(rtcHandle->Instance==RTC)
 8012652:	6802      	ldr	r2, [r0, #0]
 8012654:	4b0b      	ldr	r3, [pc, #44]	@ (8012684 <HAL_RTC_MspInit+0x44>)
 8012656:	429a      	cmp	r2, r3
 8012658:	d002      	beq.n	8012660 <HAL_RTC_MspInit+0x20>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 801265a:	b007      	add	sp, #28
 801265c:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012660:	2302      	movs	r3, #2
 8012662:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8012664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012668:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801266a:	4668      	mov	r0, sp
 801266c:	f005 fcca 	bl	8018004 <HAL_RCCEx_PeriphCLKConfig>
 8012670:	b920      	cbnz	r0, 801267c <HAL_RTC_MspInit+0x3c>
    __HAL_RCC_RTC_ENABLE();
 8012672:	4b05      	ldr	r3, [pc, #20]	@ (8012688 <HAL_RTC_MspInit+0x48>)
 8012674:	2201      	movs	r2, #1
 8012676:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 801267a:	e7ee      	b.n	801265a <HAL_RTC_MspInit+0x1a>
      Error_Handler();
 801267c:	f7ff fed2 	bl	8012424 <Error_Handler>
 8012680:	e7f7      	b.n	8012672 <HAL_RTC_MspInit+0x32>
 8012682:	bf00      	nop
 8012684:	40002800 	.word	0x40002800
 8012688:	42470000 	.word	0x42470000

0801268c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 801268c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801268e:	480e      	ldr	r0, [pc, #56]	@ (80126c8 <MX_SPI1_Init+0x3c>)
 8012690:	4b0e      	ldr	r3, [pc, #56]	@ (80126cc <MX_SPI1_Init+0x40>)
 8012692:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012694:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012698:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801269a:	2300      	movs	r3, #0
 801269c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801269e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80126a0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80126a2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80126a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126a8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80126aa:	2208      	movs	r2, #8
 80126ac:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80126ae:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80126b0:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80126b2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80126b4:	230a      	movs	r3, #10
 80126b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80126b8:	f005 fff8 	bl	80186ac <HAL_SPI_Init>
 80126bc:	b900      	cbnz	r0, 80126c0 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80126be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80126c0:	f7ff feb0 	bl	8012424 <Error_Handler>
}
 80126c4:	e7fb      	b.n	80126be <MX_SPI1_Init+0x32>
 80126c6:	bf00      	nop
 80126c8:	200009f8 	.word	0x200009f8
 80126cc:	40013000 	.word	0x40013000

080126d0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80126d0:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80126d2:	480d      	ldr	r0, [pc, #52]	@ (8012708 <MX_SPI2_Init+0x38>)
 80126d4:	4b0d      	ldr	r3, [pc, #52]	@ (801270c <MX_SPI2_Init+0x3c>)
 80126d6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80126d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80126dc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80126de:	2300      	movs	r3, #0
 80126e0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80126e2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80126e4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80126e6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80126e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126ec:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80126ee:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80126f0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80126f2:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80126f4:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80126f6:	230a      	movs	r3, #10
 80126f8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80126fa:	f005 ffd7 	bl	80186ac <HAL_SPI_Init>
 80126fe:	b900      	cbnz	r0, 8012702 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012700:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012702:	f7ff fe8f 	bl	8012424 <Error_Handler>
}
 8012706:	e7fb      	b.n	8012700 <MX_SPI2_Init+0x30>
 8012708:	200009a0 	.word	0x200009a0
 801270c:	40003800 	.word	0x40003800

08012710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012710:	b500      	push	{lr}
 8012712:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012714:	2300      	movs	r3, #0
 8012716:	9305      	str	r3, [sp, #20]
 8012718:	9306      	str	r3, [sp, #24]
 801271a:	9307      	str	r3, [sp, #28]
 801271c:	9308      	str	r3, [sp, #32]
 801271e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012720:	6803      	ldr	r3, [r0, #0]
 8012722:	4a28      	ldr	r2, [pc, #160]	@ (80127c4 <HAL_SPI_MspInit+0xb4>)
 8012724:	4293      	cmp	r3, r2
 8012726:	d005      	beq.n	8012734 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8012728:	4a27      	ldr	r2, [pc, #156]	@ (80127c8 <HAL_SPI_MspInit+0xb8>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d025      	beq.n	801277a <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801272e:	b00b      	add	sp, #44	@ 0x2c
 8012730:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012734:	2100      	movs	r1, #0
 8012736:	9101      	str	r1, [sp, #4]
 8012738:	4b24      	ldr	r3, [pc, #144]	@ (80127cc <HAL_SPI_MspInit+0xbc>)
 801273a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801273c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012740:	645a      	str	r2, [r3, #68]	@ 0x44
 8012742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012744:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012748:	9201      	str	r2, [sp, #4]
 801274a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801274c:	9102      	str	r1, [sp, #8]
 801274e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012750:	f042 0202 	orr.w	r2, r2, #2
 8012754:	631a      	str	r2, [r3, #48]	@ 0x30
 8012756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012758:	f003 0302 	and.w	r3, r3, #2
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012760:	2338      	movs	r3, #56	@ 0x38
 8012762:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012764:	2302      	movs	r3, #2
 8012766:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012768:	2303      	movs	r3, #3
 801276a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801276c:	2305      	movs	r3, #5
 801276e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012770:	a905      	add	r1, sp, #20
 8012772:	4817      	ldr	r0, [pc, #92]	@ (80127d0 <HAL_SPI_MspInit+0xc0>)
 8012774:	f004 fb24 	bl	8016dc0 <HAL_GPIO_Init>
 8012778:	e7d9      	b.n	801272e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801277a:	2100      	movs	r1, #0
 801277c:	9103      	str	r1, [sp, #12]
 801277e:	4b13      	ldr	r3, [pc, #76]	@ (80127cc <HAL_SPI_MspInit+0xbc>)
 8012780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012786:	641a      	str	r2, [r3, #64]	@ 0x40
 8012788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801278a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 801278e:	9203      	str	r2, [sp, #12]
 8012790:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012792:	9104      	str	r1, [sp, #16]
 8012794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012796:	f042 0202 	orr.w	r2, r2, #2
 801279a:	631a      	str	r2, [r3, #48]	@ 0x30
 801279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801279e:	f003 0302 	and.w	r3, r3, #2
 80127a2:	9304      	str	r3, [sp, #16]
 80127a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80127a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80127aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127ac:	2302      	movs	r3, #2
 80127ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127b0:	2303      	movs	r3, #3
 80127b2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80127b4:	2305      	movs	r3, #5
 80127b6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80127b8:	a905      	add	r1, sp, #20
 80127ba:	4805      	ldr	r0, [pc, #20]	@ (80127d0 <HAL_SPI_MspInit+0xc0>)
 80127bc:	f004 fb00 	bl	8016dc0 <HAL_GPIO_Init>
}
 80127c0:	e7b5      	b.n	801272e <HAL_SPI_MspInit+0x1e>
 80127c2:	bf00      	nop
 80127c4:	40013000 	.word	0x40013000
 80127c8:	40003800 	.word	0x40003800
 80127cc:	40023800 	.word	0x40023800
 80127d0:	40020400 	.word	0x40020400

080127d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80127d4:	b500      	push	{lr}
 80127d6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80127d8:	2200      	movs	r2, #0
 80127da:	9200      	str	r2, [sp, #0]
 80127dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012814 <HAL_MspInit+0x40>)
 80127de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80127e0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80127e4:	6459      	str	r1, [r3, #68]	@ 0x44
 80127e6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80127e8:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80127ec:	9100      	str	r1, [sp, #0]
 80127ee:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80127f0:	9201      	str	r2, [sp, #4]
 80127f2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80127f4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80127f8:	6419      	str	r1, [r3, #64]	@ 0x40
 80127fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012804:	210f      	movs	r1, #15
 8012806:	f06f 0001 	mvn.w	r0, #1
 801280a:	f004 fac1 	bl	8016d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801280e:	b003      	add	sp, #12
 8012810:	f85d fb04 	ldr.w	pc, [sp], #4
 8012814:	40023800 	.word	0x40023800

08012818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012818:	b530      	push	{r4, r5, lr}
 801281a:	b089      	sub	sp, #36	@ 0x24
 801281c:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 801281e:	2400      	movs	r4, #0
 8012820:	9401      	str	r4, [sp, #4]
 8012822:	4b1d      	ldr	r3, [pc, #116]	@ (8012898 <HAL_InitTick+0x80>)
 8012824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012826:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801282a:	645a      	str	r2, [r3, #68]	@ 0x44
 801282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012836:	a902      	add	r1, sp, #8
 8012838:	a803      	add	r0, sp, #12
 801283a:	f005 fbc5 	bl	8017fc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 801283e:	f005 fbb3 	bl	8017fa8 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012842:	4a16      	ldr	r2, [pc, #88]	@ (801289c <HAL_InitTick+0x84>)
 8012844:	fba2 2300 	umull	r2, r3, r2, r0
 8012848:	0c9b      	lsrs	r3, r3, #18
 801284a:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 801284c:	4814      	ldr	r0, [pc, #80]	@ (80128a0 <HAL_InitTick+0x88>)
 801284e:	4a15      	ldr	r2, [pc, #84]	@ (80128a4 <HAL_InitTick+0x8c>)
 8012850:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8012852:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8012856:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012858:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 801285a:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 801285c:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801285e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012860:	f006 fb9a 	bl	8018f98 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8012864:	4604      	mov	r4, r0
 8012866:	b110      	cbz	r0, 801286e <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012868:	4620      	mov	r0, r4
 801286a:	b009      	add	sp, #36	@ 0x24
 801286c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 801286e:	480c      	ldr	r0, [pc, #48]	@ (80128a0 <HAL_InitTick+0x88>)
 8012870:	f006 fa4c 	bl	8018d0c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8012874:	4604      	mov	r4, r0
 8012876:	2800      	cmp	r0, #0
 8012878:	d1f6      	bne.n	8012868 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801287a:	2018      	movs	r0, #24
 801287c:	f004 fa98 	bl	8016db0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012880:	2d0f      	cmp	r5, #15
 8012882:	d901      	bls.n	8012888 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8012884:	2401      	movs	r4, #1
 8012886:	e7ef      	b.n	8012868 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012888:	2200      	movs	r2, #0
 801288a:	4629      	mov	r1, r5
 801288c:	2018      	movs	r0, #24
 801288e:	f004 fa7f 	bl	8016d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012892:	4b05      	ldr	r3, [pc, #20]	@ (80128a8 <HAL_InitTick+0x90>)
 8012894:	601d      	str	r5, [r3, #0]
 8012896:	e7e7      	b.n	8012868 <HAL_InitTick+0x50>
 8012898:	40023800 	.word	0x40023800
 801289c:	431bde83 	.word	0x431bde83
 80128a0:	20000a50 	.word	0x20000a50
 80128a4:	40014000 	.word	0x40014000
 80128a8:	20000108 	.word	0x20000108

080128ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80128ac:	e7fe      	b.n	80128ac <NMI_Handler>

080128ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80128ae:	e7fe      	b.n	80128ae <HardFault_Handler>

080128b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80128b0:	e7fe      	b.n	80128b0 <MemManage_Handler>

080128b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80128b2:	e7fe      	b.n	80128b2 <BusFault_Handler>

080128b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80128b4:	e7fe      	b.n	80128b4 <UsageFault_Handler>

080128b6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80128b6:	4770      	bx	lr

080128b8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80128b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80128ba:	4802      	ldr	r0, [pc, #8]	@ (80128c4 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80128bc:	f006 fa66 	bl	8018d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80128c0:	bd08      	pop	{r3, pc}
 80128c2:	bf00      	nop
 80128c4:	20000a50 	.word	0x20000a50

080128c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80128c8:	2001      	movs	r0, #1
 80128ca:	4770      	bx	lr

080128cc <_kill>:

int _kill(int pid, int sig)
{
 80128cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80128ce:	f01c fd4d 	bl	802f36c <__errno>
 80128d2:	2316      	movs	r3, #22
 80128d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80128d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128da:	bd08      	pop	{r3, pc}

080128dc <_exit>:

void _exit (int status)
{
 80128dc:	b508      	push	{r3, lr}
  _kill(status, -1);
 80128de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80128e2:	f7ff fff3 	bl	80128cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80128e6:	e7fe      	b.n	80128e6 <_exit+0xa>

080128e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	460c      	mov	r4, r1
 80128ec:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128ee:	2500      	movs	r5, #0
 80128f0:	e006      	b.n	8012900 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80128f2:	f3af 8000 	nop.w
 80128f6:	4621      	mov	r1, r4
 80128f8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128fc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80128fe:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012900:	42b5      	cmp	r5, r6
 8012902:	dbf6      	blt.n	80128f2 <_read+0xa>
  }

  return len;
}
 8012904:	4630      	mov	r0, r6
 8012906:	bd70      	pop	{r4, r5, r6, pc}

08012908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012908:	b570      	push	{r4, r5, r6, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801290e:	2500      	movs	r5, #0
 8012910:	e004      	b.n	801291c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8012912:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801291a:	3501      	adds	r5, #1
 801291c:	42b5      	cmp	r5, r6
 801291e:	dbf8      	blt.n	8012912 <_write+0xa>
  }
  return len;
}
 8012920:	4630      	mov	r0, r6
 8012922:	bd70      	pop	{r4, r5, r6, pc}

08012924 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012928:	4770      	bx	lr

0801292a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 801292a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801292e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012930:	2000      	movs	r0, #0
 8012932:	4770      	bx	lr

08012934 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8012934:	2001      	movs	r0, #1
 8012936:	4770      	bx	lr

08012938 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8012938:	2000      	movs	r0, #0
 801293a:	4770      	bx	lr

0801293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801293c:	b510      	push	{r4, lr}
 801293e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012940:	4a0c      	ldr	r2, [pc, #48]	@ (8012974 <_sbrk+0x38>)
 8012942:	490d      	ldr	r1, [pc, #52]	@ (8012978 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012944:	480d      	ldr	r0, [pc, #52]	@ (801297c <_sbrk+0x40>)
 8012946:	6800      	ldr	r0, [r0, #0]
 8012948:	b140      	cbz	r0, 801295c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801294a:	480c      	ldr	r0, [pc, #48]	@ (801297c <_sbrk+0x40>)
 801294c:	6800      	ldr	r0, [r0, #0]
 801294e:	4403      	add	r3, r0
 8012950:	1a52      	subs	r2, r2, r1
 8012952:	4293      	cmp	r3, r2
 8012954:	d806      	bhi.n	8012964 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8012956:	4a09      	ldr	r2, [pc, #36]	@ (801297c <_sbrk+0x40>)
 8012958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 801295a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 801295c:	4807      	ldr	r0, [pc, #28]	@ (801297c <_sbrk+0x40>)
 801295e:	4c08      	ldr	r4, [pc, #32]	@ (8012980 <_sbrk+0x44>)
 8012960:	6004      	str	r4, [r0, #0]
 8012962:	e7f2      	b.n	801294a <_sbrk+0xe>
    errno = ENOMEM;
 8012964:	f01c fd02 	bl	802f36c <__errno>
 8012968:	230c      	movs	r3, #12
 801296a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 801296c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012970:	e7f3      	b.n	801295a <_sbrk+0x1e>
 8012972:	bf00      	nop
 8012974:	20020000 	.word	0x20020000
 8012978:	00000800 	.word	0x00000800
 801297c:	20000a9c 	.word	0x20000a9c
 8012980:	2001a2d8 	.word	0x2001a2d8

08012984 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012984:	4a03      	ldr	r2, [pc, #12]	@ (8012994 <SystemInit+0x10>)
 8012986:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801298a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801298e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012992:	4770      	bx	lr
 8012994:	e000ed00 	.word	0xe000ed00

08012998 <Reset_Handler>:
 8012998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80129d0 <LoopFillZerobss+0xe>
 801299c:	f7ff fff2 	bl	8012984 <SystemInit>
 80129a0:	480c      	ldr	r0, [pc, #48]	@ (80129d4 <LoopFillZerobss+0x12>)
 80129a2:	490d      	ldr	r1, [pc, #52]	@ (80129d8 <LoopFillZerobss+0x16>)
 80129a4:	4a0d      	ldr	r2, [pc, #52]	@ (80129dc <LoopFillZerobss+0x1a>)
 80129a6:	2300      	movs	r3, #0
 80129a8:	e002      	b.n	80129b0 <LoopCopyDataInit>

080129aa <CopyDataInit>:
 80129aa:	58d4      	ldr	r4, [r2, r3]
 80129ac:	50c4      	str	r4, [r0, r3]
 80129ae:	3304      	adds	r3, #4

080129b0 <LoopCopyDataInit>:
 80129b0:	18c4      	adds	r4, r0, r3
 80129b2:	428c      	cmp	r4, r1
 80129b4:	d3f9      	bcc.n	80129aa <CopyDataInit>
 80129b6:	4a0a      	ldr	r2, [pc, #40]	@ (80129e0 <LoopFillZerobss+0x1e>)
 80129b8:	4c0a      	ldr	r4, [pc, #40]	@ (80129e4 <LoopFillZerobss+0x22>)
 80129ba:	2300      	movs	r3, #0
 80129bc:	e001      	b.n	80129c2 <LoopFillZerobss>

080129be <FillZerobss>:
 80129be:	6013      	str	r3, [r2, #0]
 80129c0:	3204      	adds	r2, #4

080129c2 <LoopFillZerobss>:
 80129c2:	42a2      	cmp	r2, r4
 80129c4:	d3fb      	bcc.n	80129be <FillZerobss>
 80129c6:	f01c fcdf 	bl	802f388 <__libc_init_array>
 80129ca:	f7ff fd81 	bl	80124d0 <main>
 80129ce:	4770      	bx	lr
 80129d0:	20020000 	.word	0x20020000
 80129d4:	20000000 	.word	0x20000000
 80129d8:	20000870 	.word	0x20000870
 80129dc:	0803dae4 	.word	0x0803dae4
 80129e0:	20000870 	.word	0x20000870
 80129e4:	2001a2d8 	.word	0x2001a2d8

080129e8 <ADC_IRQHandler>:
 80129e8:	e7fe      	b.n	80129e8 <ADC_IRQHandler>

080129ea <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80129ea:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80129ec:	880b      	ldrh	r3, [r1, #0]
 80129ee:	2b05      	cmp	r3, #5
 80129f0:	d001      	beq.n	80129f6 <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129f2:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80129f4:	bd38      	pop	{r3, r4, r5, pc}
 80129f6:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80129f8:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80129fa:	7881      	ldrb	r1, [r0, #2]
 80129fc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012a00:	3101      	adds	r1, #1
 8012a02:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8012a04:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8012a06:	7902      	ldrb	r2, [r0, #4]
 8012a08:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8012a0c:	1e53      	subs	r3, r2, #1
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012a14:	4563      	cmp	r3, ip
 8012a16:	d820      	bhi.n	8012a5a <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012a20:	8823      	ldrh	r3, [r4, #0]
 8012a22:	3301      	adds	r3, #1
 8012a24:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 8012a26:	f012 0f07 	tst.w	r2, #7
 8012a2a:	d010      	beq.n	8012a4e <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8012a2c:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012a30:	3301      	adds	r3, #1
 8012a32:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012a34:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8012a36:	8823      	ldrh	r3, [r4, #0]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	3002      	adds	r0, #2
 8012a40:	f7ff fa70 	bl	8011f24 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012a44:	b930      	cbnz	r0, 8012a54 <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 8012a46:	8823      	ldrh	r3, [r4, #0]
 8012a48:	442b      	add	r3, r5
 8012a4a:	8023      	strh	r3, [r4, #0]
 8012a4c:	e7d2      	b.n	80129f4 <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012a4e:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012a52:	e7ef      	b.n	8012a34 <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012a54:	f000 f9f0 	bl	8012e38 <prveMBError2Exception>
 8012a58:	e7cc      	b.n	80129f4 <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a5a:	2003      	movs	r0, #3
 8012a5c:	e7ca      	b.n	80129f4 <eMBFuncReadCoils+0xa>

08012a5e <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012a5e:	880b      	ldrh	r3, [r1, #0]
 8012a60:	2b05      	cmp	r3, #5
 8012a62:	d001      	beq.n	8012a68 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a64:	2003      	movs	r0, #3
 8012a66:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012a68:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012a6a:	7881      	ldrb	r1, [r0, #2]
 8012a6c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012a70:	3101      	adds	r1, #1
 8012a72:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012a74:	7903      	ldrb	r3, [r0, #4]
 8012a76:	b9f3      	cbnz	r3, 8012ab6 <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012a78:	78c2      	ldrb	r2, [r0, #3]
 8012a7a:	1e53      	subs	r3, r2, #1
 8012a7c:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012a7e:	2bfd      	cmp	r3, #253	@ 0xfd
 8012a80:	d91b      	bls.n	8012aba <eMBFuncWriteCoil+0x5c>
{
 8012a82:	b500      	push	{lr}
 8012a84:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 8012a86:	2300      	movs	r3, #0
 8012a88:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012a8c:	2aff      	cmp	r2, #255	@ 0xff
 8012a8e:	d00b      	beq.n	8012aa8 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8012a96:	2301      	movs	r3, #1
 8012a98:	461a      	mov	r2, r3
 8012a9a:	a801      	add	r0, sp, #4
 8012a9c:	f7ff fa42 	bl	8011f24 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012aa0:	b930      	cbnz	r0, 8012ab0 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 8012aa2:	b003      	add	sp, #12
 8012aa4:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	f88d 3004 	strb.w	r3, [sp, #4]
 8012aae:	e7f2      	b.n	8012a96 <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012ab0:	f000 f9c2 	bl	8012e38 <prveMBError2Exception>
 8012ab4:	e7f5      	b.n	8012aa2 <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ab6:	2003      	movs	r0, #3
 8012ab8:	4770      	bx	lr
 8012aba:	2003      	movs	r0, #3
}
 8012abc:	4770      	bx	lr

08012abe <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012abe:	880b      	ldrh	r3, [r1, #0]
 8012ac0:	2b05      	cmp	r3, #5
 8012ac2:	d92d      	bls.n	8012b20 <eMBFuncWriteMultipleCoils+0x62>
{
 8012ac4:	b510      	push	{r4, lr}
 8012ac6:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012ac8:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012aca:	7883      	ldrb	r3, [r0, #2]
 8012acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8012ad4:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8012ad6:	7903      	ldrb	r3, [r0, #4]
 8012ad8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012adc:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012ae0:	f013 0f07 	tst.w	r3, #7
 8012ae4:	d00e      	beq.n	8012b04 <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8012ae6:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012aea:	f10c 0c01 	add.w	ip, ip, #1
 8012aee:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8012af2:	1e53      	subs	r3, r2, #1
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8012afa:	d213      	bcs.n	8012b24 <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8012afc:	45f4      	cmp	ip, lr
 8012afe:	d004      	beq.n	8012b0a <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b00:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012b02:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8012b04:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012b08:	e7f3      	b.n	8012af2 <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	3006      	adds	r0, #6
 8012b0e:	f7ff fa09 	bl	8011f24 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012b12:	b910      	cbnz	r0, 8012b1a <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8012b14:	2305      	movs	r3, #5
 8012b16:	8023      	strh	r3, [r4, #0]
 8012b18:	e7f3      	b.n	8012b02 <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 8012b1a:	f000 f98d 	bl	8012e38 <prveMBError2Exception>
 8012b1e:	e7f0      	b.n	8012b02 <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b20:	2003      	movs	r0, #3
}
 8012b22:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b24:	2003      	movs	r0, #3
 8012b26:	e7ec      	b.n	8012b02 <eMBFuncWriteMultipleCoils+0x44>

08012b28 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8012b28:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012b2a:	880b      	ldrh	r3, [r1, #0]
 8012b2c:	2b05      	cmp	r3, #5
 8012b2e:	d001      	beq.n	8012b34 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b30:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012b32:	bd38      	pop	{r3, r4, r5, pc}
 8012b34:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012b36:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012b38:	7881      	ldrb	r1, [r0, #2]
 8012b3a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012b3e:	3101      	adds	r1, #1
 8012b40:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8012b42:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8012b44:	7902      	ldrb	r2, [r0, #4]
 8012b46:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012b4a:	1e53      	subs	r3, r2, #1
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012b52:	4563      	cmp	r3, ip
 8012b54:	d81f      	bhi.n	8012b96 <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 8012b56:	2300      	movs	r3, #0
 8012b58:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012b5a:	2302      	movs	r3, #2
 8012b5c:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012b5e:	8823      	ldrh	r3, [r4, #0]
 8012b60:	3301      	adds	r3, #1
 8012b62:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8012b64:	f012 0f07 	tst.w	r2, #7
 8012b68:	d00f      	beq.n	8012b8a <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012b6a:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012b6e:	3301      	adds	r3, #1
 8012b70:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012b72:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8012b74:	8823      	ldrh	r3, [r4, #0]
 8012b76:	3301      	adds	r3, #1
 8012b78:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012b7a:	3002      	adds	r0, #2
 8012b7c:	f7ff f9ac 	bl	8011ed8 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012b80:	b930      	cbnz	r0, 8012b90 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 8012b82:	8823      	ldrh	r3, [r4, #0]
 8012b84:	442b      	add	r3, r5
 8012b86:	8023      	strh	r3, [r4, #0]
 8012b88:	e7d3      	b.n	8012b32 <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012b8a:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012b8e:	e7f0      	b.n	8012b72 <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012b90:	f000 f952 	bl	8012e38 <prveMBError2Exception>
 8012b94:	e7cd      	b.n	8012b32 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b96:	2003      	movs	r0, #3
 8012b98:	e7cb      	b.n	8012b32 <eMBFuncReadDiscreteInputs+0xa>

08012b9a <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012b9a:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012b9c:	880b      	ldrh	r3, [r1, #0]
 8012b9e:	2b05      	cmp	r3, #5
 8012ba0:	d001      	beq.n	8012ba6 <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ba2:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012ba4:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012ba6:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012ba8:	7881      	ldrb	r1, [r0, #2]
 8012baa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012bae:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	b289      	uxth	r1, r1
 8012bb6:	3003      	adds	r0, #3
 8012bb8:	f7ff fa05 	bl	8011fc6 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d0f1      	beq.n	8012ba4 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012bc0:	f000 f93a 	bl	8012e38 <prveMBError2Exception>
 8012bc4:	e7ee      	b.n	8012ba4 <eMBFuncWriteHoldingRegister+0xa>

08012bc6 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012bc6:	880b      	ldrh	r3, [r1, #0]
 8012bc8:	2b05      	cmp	r3, #5
 8012bca:	d922      	bls.n	8012c12 <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012bcc:	b510      	push	{r4, lr}
 8012bce:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012bd0:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012bd2:	7883      	ldrb	r3, [r0, #2]
 8012bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012bd8:	3301      	adds	r3, #1
 8012bda:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012bdc:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012bde:	7902      	ldrb	r2, [r0, #4]
 8012be0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012be4:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 8012be8:	1e53      	subs	r3, r2, #1
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	2b77      	cmp	r3, #119	@ 0x77
 8012bee:	d812      	bhi.n	8012c16 <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8012bf0:	0053      	lsls	r3, r2, #1
 8012bf2:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8012bf4:	4563      	cmp	r3, ip
 8012bf6:	d001      	beq.n	8012bfc <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012bf8:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012bfa:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	3006      	adds	r0, #6
 8012c00:	f7ff f9e1 	bl	8011fc6 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012c04:	b910      	cbnz	r0, 8012c0c <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8012c06:	2305      	movs	r3, #5
 8012c08:	8023      	strh	r3, [r4, #0]
 8012c0a:	e7f6      	b.n	8012bfa <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8012c0c:	f000 f914 	bl	8012e38 <prveMBError2Exception>
 8012c10:	e7f3      	b.n	8012bfa <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c12:	2003      	movs	r0, #3
}
 8012c14:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c16:	2003      	movs	r0, #3
 8012c18:	e7ef      	b.n	8012bfa <eMBFuncWriteMultipleHoldingRegister+0x34>

08012c1a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012c1a:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012c1c:	880b      	ldrh	r3, [r1, #0]
 8012c1e:	2b05      	cmp	r3, #5
 8012c20:	d001      	beq.n	8012c26 <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c22:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012c24:	bd38      	pop	{r3, r4, r5, pc}
 8012c26:	4602      	mov	r2, r0
 8012c28:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012c2a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012c2c:	7881      	ldrb	r1, [r0, #2]
 8012c2e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012c32:	3101      	adds	r1, #1
 8012c34:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012c36:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012c38:	1e6b      	subs	r3, r5, #1
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	2b7c      	cmp	r3, #124	@ 0x7c
 8012c3e:	d901      	bls.n	8012c44 <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012c40:	2003      	movs	r0, #3
 8012c42:	e7ef      	b.n	8012c24 <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 8012c44:	2300      	movs	r3, #0
 8012c46:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012c48:	f04f 0c03 	mov.w	ip, #3
 8012c4c:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012c50:	f8b4 c000 	ldrh.w	ip, [r4]
 8012c54:	f10c 0c01 	add.w	ip, ip, #1
 8012c58:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012c5c:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012c60:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 8012c64:	8822      	ldrh	r2, [r4, #0]
 8012c66:	3201      	adds	r2, #1
 8012c68:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	f7ff f9ab 	bl	8011fc6 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012c70:	b920      	cbnz	r0, 8012c7c <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 8012c72:	8823      	ldrh	r3, [r4, #0]
 8012c74:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012c78:	8023      	strh	r3, [r4, #0]
 8012c7a:	e7d3      	b.n	8012c24 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012c7c:	f000 f8dc 	bl	8012e38 <prveMBError2Exception>
 8012c80:	e7d0      	b.n	8012c24 <eMBFuncReadHoldingRegister+0xa>

08012c82 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012c84:	880b      	ldrh	r3, [r1, #0]
 8012c86:	2b09      	cmp	r3, #9
 8012c88:	d943      	bls.n	8012d12 <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012c8e:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012c90:	7881      	ldrb	r1, [r0, #2]
 8012c92:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 8012c96:	3101      	adds	r1, #1
 8012c98:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012c9a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012c9c:	7907      	ldrb	r7, [r0, #4]
 8012c9e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012ca2:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012ca4:	7981      	ldrb	r1, [r0, #6]
 8012ca6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012caa:	3101      	adds	r1, #1
 8012cac:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012cae:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012cb0:	7a02      	ldrb	r2, [r0, #8]
 8012cb2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8012cb6:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012cb8:	1e7b      	subs	r3, r7, #1
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	2b7c      	cmp	r3, #124	@ 0x7c
 8012cbe:	d82a      	bhi.n	8012d16 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012cc0:	b35a      	cbz	r2, 8012d1a <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012cc2:	2a79      	cmp	r2, #121	@ 0x79
 8012cc4:	d82b      	bhi.n	8012d1e <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8012cc6:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012cca:	d001      	beq.n	8012cd0 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ccc:	2003      	movs	r0, #3
 8012cce:	e021      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	f104 000a 	add.w	r0, r4, #10
 8012cd6:	f7ff f976 	bl	8011fc6 <eMBRegHoldingCB>
 8012cda:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012cdc:	b9b0      	cbnz	r0, 8012d0c <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012cde:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	2217      	movs	r2, #23
 8012ce4:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 8012ce8:	882a      	ldrh	r2, [r5, #0]
 8012cea:	3201      	adds	r2, #1
 8012cec:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8012cee:	007a      	lsls	r2, r7, #1
 8012cf0:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8012cf2:	882a      	ldrh	r2, [r5, #0]
 8012cf4:	3201      	adds	r2, #1
 8012cf6:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8012cf8:	463a      	mov	r2, r7
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	f7ff f963 	bl	8011fc6 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8012d00:	b920      	cbnz	r0, 8012d0c <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 8012d02:	882b      	ldrh	r3, [r5, #0]
 8012d04:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8012d08:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8012d0a:	e003      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 8012d0c:	f000 f894 	bl	8012e38 <prveMBError2Exception>
 8012d10:	e000      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 8012d12:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8012d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d16:	2003      	movs	r0, #3
 8012d18:	e7fc      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012d1a:	2003      	movs	r0, #3
 8012d1c:	e7fa      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012d1e:	2003      	movs	r0, #3
 8012d20:	e7f8      	b.n	8012d14 <eMBFuncReadWriteMultipleHoldingRegister+0x92>

08012d22 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012d22:	880a      	ldrh	r2, [r1, #0]
 8012d24:	2a05      	cmp	r2, #5
 8012d26:	d001      	beq.n	8012d2c <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d28:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012d2a:	4770      	bx	lr
{
 8012d2c:	b538      	push	{r3, r4, r5, lr}
 8012d2e:	4603      	mov	r3, r0
 8012d30:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012d32:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012d34:	7881      	ldrb	r1, [r0, #2]
 8012d36:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012d3a:	3101      	adds	r1, #1
 8012d3c:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012d3e:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012d40:	7905      	ldrb	r5, [r0, #4]
 8012d42:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012d46:	1e6a      	subs	r2, r5, #1
 8012d48:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012d4a:	2a7b      	cmp	r2, #123	@ 0x7b
 8012d4c:	d901      	bls.n	8012d52 <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012d4e:	2003      	movs	r0, #3
}
 8012d50:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012d52:	2200      	movs	r2, #0
 8012d54:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8012d56:	2204      	movs	r2, #4
 8012d58:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012d5c:	8822      	ldrh	r2, [r4, #0]
 8012d5e:	3201      	adds	r2, #1
 8012d60:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012d62:	006a      	lsls	r2, r5, #1
 8012d64:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 8012d66:	8823      	ldrh	r3, [r4, #0]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012d6c:	462a      	mov	r2, r5
 8012d6e:	f7ff f928 	bl	8011fc2 <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012d72:	b920      	cbnz	r0, 8012d7e <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012d74:	8823      	ldrh	r3, [r4, #0]
 8012d76:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012d7a:	8023      	strh	r3, [r4, #0]
 8012d7c:	e7e8      	b.n	8012d50 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012d7e:	f000 f85b 	bl	8012e38 <prveMBError2Exception>
 8012d82:	e7e5      	b.n	8012d50 <eMBFuncReadInputRegister+0x2e>

08012d84 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012d88:	4b05      	ldr	r3, [pc, #20]	@ (8012da0 <eMBFuncReportSlaveID+0x1c>)
 8012d8a:	881c      	ldrh	r4, [r3, #0]
 8012d8c:	4622      	mov	r2, r4
 8012d8e:	4905      	ldr	r1, [pc, #20]	@ (8012da4 <eMBFuncReportSlaveID+0x20>)
 8012d90:	3001      	adds	r0, #1
 8012d92:	f01c fb23 	bl	802f3dc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8012d96:	3401      	adds	r4, #1
 8012d98:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	bd38      	pop	{r3, r4, r5, pc}
 8012d9e:	bf00      	nop
 8012da0:	20000aa0 	.word	0x20000aa0
 8012da4:	20000aa4 	.word	0x20000aa4

08012da8 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012da8:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012daa:	2a08      	cmp	r2, #8
 8012dac:	d823      	bhi.n	8012df6 <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012dae:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012db2:	f001 0407 	and.w	r4, r1, #7
 8012db6:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012dba:	f04f 0c01 	mov.w	ip, #1
 8012dbe:	fa0c f202 	lsl.w	r2, ip, r2
 8012dc2:	b292      	uxth	r2, r2
 8012dc4:	3a01      	subs	r2, #1
 8012dc6:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012dc8:	f001 0107 	and.w	r1, r1, #7
 8012dcc:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012dd0:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012dd4:	eb0e 020c 	add.w	r2, lr, ip
 8012dd8:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012ddc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012de0:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012de2:	ea23 0301 	bic.w	r3, r3, r1
 8012de6:	b21b      	sxth	r3, r3
 8012de8:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8012dea:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012dee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012df2:	5483      	strb	r3, [r0, r2]
}
 8012df4:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 8012df6:	4b03      	ldr	r3, [pc, #12]	@ (8012e04 <xMBUtilSetBits+0x5c>)
 8012df8:	4a03      	ldr	r2, [pc, #12]	@ (8012e08 <xMBUtilSetBits+0x60>)
 8012dfa:	2137      	movs	r1, #55	@ 0x37
 8012dfc:	4803      	ldr	r0, [pc, #12]	@ (8012e0c <xMBUtilSetBits+0x64>)
 8012dfe:	f018 f835 	bl	802ae6c <__assert_func>
 8012e02:	bf00      	nop
 8012e04:	080379cc 	.word	0x080379cc
 8012e08:	08037a24 	.word	0x08037a24
 8012e0c:	080379dc 	.word	0x080379dc

08012e10 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012e10:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012e14:	2301      	movs	r3, #1
 8012e16:	4093      	lsls	r3, r2
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012e1c:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012e20:	4460      	add	r0, ip
 8012e22:	7840      	ldrb	r0, [r0, #1]
 8012e24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012e28:	f001 0107 	and.w	r1, r1, #7
 8012e2c:	410a      	asrs	r2, r1
 8012e2e:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012e30:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012e34:	b2c0      	uxtb	r0, r0
 8012e36:	4770      	bx	lr

08012e38 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012e38:	2801      	cmp	r0, #1
 8012e3a:	d005      	beq.n	8012e48 <prveMBError2Exception+0x10>
 8012e3c:	2807      	cmp	r0, #7
 8012e3e:	d005      	beq.n	8012e4c <prveMBError2Exception+0x14>
 8012e40:	b108      	cbz	r0, 8012e46 <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012e42:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012e44:	4770      	bx	lr
 8012e46:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012e48:	2002      	movs	r0, #2
 8012e4a:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012e4c:	2006      	movs	r0, #6
 8012e4e:	4770      	bx	lr

08012e50 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012e50:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012e52:	f000 f9ce 	bl	80131f2 <eMBTCPDoInit>
 8012e56:	4604      	mov	r4, r0
 8012e58:	b120      	cbz	r0, 8012e64 <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012e5a:	4b11      	ldr	r3, [pc, #68]	@ (8012ea0 <eMBTCPInit+0x50>)
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012e60:	4620      	mov	r0, r4
 8012e62:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012e64:	f000 f8ca 	bl	8012ffc <xMBPortEventInit>
 8012e68:	b1c0      	cbz	r0, 8012e9c <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ea4 <eMBTCPInit+0x54>)
 8012e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8012ea8 <eMBTCPInit+0x58>)
 8012e6e:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012e70:	4b0e      	ldr	r3, [pc, #56]	@ (8012eac <eMBTCPInit+0x5c>)
 8012e72:	4a0f      	ldr	r2, [pc, #60]	@ (8012eb0 <eMBTCPInit+0x60>)
 8012e74:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8012e76:	4b0f      	ldr	r3, [pc, #60]	@ (8012eb4 <eMBTCPInit+0x64>)
 8012e78:	4a0f      	ldr	r2, [pc, #60]	@ (8012eb8 <eMBTCPInit+0x68>)
 8012e7a:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8012ebc <eMBTCPInit+0x6c>)
 8012e7e:	4a10      	ldr	r2, [pc, #64]	@ (8012ec0 <eMBTCPInit+0x70>)
 8012e80:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012e82:	4b10      	ldr	r3, [pc, #64]	@ (8012ec4 <eMBTCPInit+0x74>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012e88:	4b0f      	ldr	r3, [pc, #60]	@ (8012ec8 <eMBTCPInit+0x78>)
 8012e8a:	22ff      	movs	r2, #255	@ 0xff
 8012e8c:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8012ecc <eMBTCPInit+0x7c>)
 8012e90:	2202      	movs	r2, #2
 8012e92:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8012e94:	4b02      	ldr	r3, [pc, #8]	@ (8012ea0 <eMBTCPInit+0x50>)
 8012e96:	2201      	movs	r2, #1
 8012e98:	701a      	strb	r2, [r3, #0]
 8012e9a:	e7e1      	b.n	8012e60 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012e9c:	2403      	movs	r4, #3
 8012e9e:	e7df      	b.n	8012e60 <eMBTCPInit+0x10>
 8012ea0:	2000009c 	.word	0x2000009c
 8012ea4:	20000adc 	.word	0x20000adc
 8012ea8:	08013203 	.word	0x08013203
 8012eac:	20000ad8 	.word	0x20000ad8
 8012eb0:	08013205 	.word	0x08013205
 8012eb4:	20000ad4 	.word	0x20000ad4
 8012eb8:	0801320d 	.word	0x0801320d
 8012ebc:	20000ae0 	.word	0x20000ae0
 8012ec0:	0801324d 	.word	0x0801324d
 8012ec4:	20000ad0 	.word	0x20000ad0
 8012ec8:	20000ae5 	.word	0x20000ae5
 8012ecc:	20000ae4 	.word	0x20000ae4

08012ed0 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012ed0:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012ed2:	4b06      	ldr	r3, [pc, #24]	@ (8012eec <eMBEnable+0x1c>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	2b01      	cmp	r3, #1
 8012ed8:	d001      	beq.n	8012ede <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8012eda:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012edc:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012ede:	4b04      	ldr	r3, [pc, #16]	@ (8012ef0 <eMBEnable+0x20>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8012ee4:	2000      	movs	r0, #0
 8012ee6:	4b01      	ldr	r3, [pc, #4]	@ (8012eec <eMBEnable+0x1c>)
 8012ee8:	7018      	strb	r0, [r3, #0]
 8012eea:	e7f7      	b.n	8012edc <eMBEnable+0xc>
 8012eec:	2000009c 	.word	0x2000009c
 8012ef0:	20000adc 	.word	0x20000adc

08012ef4 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8012ef4:	b530      	push	{r4, r5, lr}
 8012ef6:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8012ef8:	4b36      	ldr	r3, [pc, #216]	@ (8012fd4 <eMBPoll+0xe0>)
 8012efa:	781c      	ldrb	r4, [r3, #0]
 8012efc:	2c00      	cmp	r4, #0
 8012efe:	d163      	bne.n	8012fc8 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8012f00:	f10d 0007 	add.w	r0, sp, #7
 8012f04:	f000 f88e 	bl	8013024 <xMBPortEventGet>
 8012f08:	2801      	cmp	r0, #1
 8012f0a:	d002      	beq.n	8012f12 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	b003      	add	sp, #12
 8012f10:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8012f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d014      	beq.n	8012f44 <eMBPoll+0x50>
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d1f6      	bne.n	8012f0c <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8012fd8 <eMBPoll+0xe4>)
 8012f20:	6818      	ldr	r0, [r3, #0]
 8012f22:	7801      	ldrb	r1, [r0, #0]
 8012f24:	4b2d      	ldr	r3, [pc, #180]	@ (8012fdc <eMBPoll+0xe8>)
 8012f26:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8012f28:	4b2d      	ldr	r3, [pc, #180]	@ (8012fe0 <eMBPoll+0xec>)
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012f2e:	2300      	movs	r3, #0
 8012f30:	2b0f      	cmp	r3, #15
 8012f32:	dc25      	bgt.n	8012f80 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012f34:	4a2b      	ldr	r2, [pc, #172]	@ (8012fe4 <eMBPoll+0xf0>)
 8012f36:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012f3a:	b30a      	cbz	r2, 8012f80 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012f3c:	4291      	cmp	r1, r2
 8012f3e:	d017      	beq.n	8012f70 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012f40:	3301      	adds	r3, #1
 8012f42:	e7f5      	b.n	8012f30 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012f44:	4b28      	ldr	r3, [pc, #160]	@ (8012fe8 <eMBPoll+0xf4>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	4a28      	ldr	r2, [pc, #160]	@ (8012fec <eMBPoll+0xf8>)
 8012f4a:	4923      	ldr	r1, [pc, #140]	@ (8012fd8 <eMBPoll+0xe4>)
 8012f4c:	4828      	ldr	r0, [pc, #160]	@ (8012ff0 <eMBPoll+0xfc>)
 8012f4e:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012f50:	4605      	mov	r5, r0
 8012f52:	2800      	cmp	r0, #0
 8012f54:	d1da      	bne.n	8012f0c <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012f56:	4b26      	ldr	r3, [pc, #152]	@ (8012ff0 <eMBPoll+0xfc>)
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4a26      	ldr	r2, [pc, #152]	@ (8012ff4 <eMBPoll+0x100>)
 8012f5c:	7812      	ldrb	r2, [r2, #0]
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d001      	beq.n	8012f66 <eMBPoll+0x72>
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d132      	bne.n	8012fcc <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012f66:	2002      	movs	r0, #2
 8012f68:	f000 f850 	bl	801300c <xMBPortEventPost>
    return MB_ENOERR;
 8012f6c:	462c      	mov	r4, r5
 8012f6e:	e7cd      	b.n	8012f0c <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012f70:	4a1c      	ldr	r2, [pc, #112]	@ (8012fe4 <eMBPoll+0xf0>)
 8012f72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	491c      	ldr	r1, [pc, #112]	@ (8012fec <eMBPoll+0xf8>)
 8012f7a:	4798      	blx	r3
 8012f7c:	4b18      	ldr	r3, [pc, #96]	@ (8012fe0 <eMBPoll+0xec>)
 8012f7e:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012f80:	4b1b      	ldr	r3, [pc, #108]	@ (8012ff0 <eMBPoll+0xfc>)
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	b323      	cbz	r3, 8012fd0 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012f86:	4b16      	ldr	r3, [pc, #88]	@ (8012fe0 <eMBPoll+0xec>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	b19b      	cbz	r3, 8012fb4 <eMBPoll+0xc0>
                    usLength = 0;
 8012f8c:	4a17      	ldr	r2, [pc, #92]	@ (8012fec <eMBPoll+0xf8>)
 8012f8e:	2100      	movs	r1, #0
 8012f90:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012f92:	4912      	ldr	r1, [pc, #72]	@ (8012fdc <eMBPoll+0xe8>)
 8012f94:	7809      	ldrb	r1, [r1, #0]
 8012f96:	4810      	ldr	r0, [pc, #64]	@ (8012fd8 <eMBPoll+0xe4>)
 8012f98:	6805      	ldr	r5, [r0, #0]
 8012f9a:	f04f 0c01 	mov.w	ip, #1
 8012f9e:	f8a2 c000 	strh.w	ip, [r2]
 8012fa2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012fa6:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012fa8:	6800      	ldr	r0, [r0, #0]
 8012faa:	8811      	ldrh	r1, [r2, #0]
 8012fac:	eb01 050c 	add.w	r5, r1, ip
 8012fb0:	8015      	strh	r5, [r2, #0]
 8012fb2:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012fb4:	4b10      	ldr	r3, [pc, #64]	@ (8012ff8 <eMBPoll+0x104>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8012fec <eMBPoll+0xf8>)
 8012fba:	8812      	ldrh	r2, [r2, #0]
 8012fbc:	4906      	ldr	r1, [pc, #24]	@ (8012fd8 <eMBPoll+0xe4>)
 8012fbe:	6809      	ldr	r1, [r1, #0]
 8012fc0:	480c      	ldr	r0, [pc, #48]	@ (8012ff4 <eMBPoll+0x100>)
 8012fc2:	7800      	ldrb	r0, [r0, #0]
 8012fc4:	4798      	blx	r3
 8012fc6:	e7a1      	b.n	8012f0c <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012fc8:	2406      	movs	r4, #6
 8012fca:	e79f      	b.n	8012f0c <eMBPoll+0x18>
    return MB_ENOERR;
 8012fcc:	4604      	mov	r4, r0
 8012fce:	e79d      	b.n	8012f0c <eMBPoll+0x18>
 8012fd0:	461c      	mov	r4, r3
 8012fd2:	e79b      	b.n	8012f0c <eMBPoll+0x18>
 8012fd4:	2000009c 	.word	0x2000009c
 8012fd8:	20000ac8 	.word	0x20000ac8
 8012fdc:	20000ac5 	.word	0x20000ac5
 8012fe0:	20000ac4 	.word	0x20000ac4
 8012fe4:	2000001c 	.word	0x2000001c
 8012fe8:	20000ad4 	.word	0x20000ad4
 8012fec:	20000ac6 	.word	0x20000ac6
 8012ff0:	20000acc 	.word	0x20000acc
 8012ff4:	20000ae5 	.word	0x20000ae5
 8012ff8:	20000ae0 	.word	0x20000ae0

08012ffc <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012ffc:	4b02      	ldr	r3, [pc, #8]	@ (8013008 <xMBPortEventInit+0xc>)
 8012ffe:	2200      	movs	r2, #0
 8013000:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8013002:	2001      	movs	r0, #1
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	20000ae6 	.word	0x20000ae6

0801300c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 801300c:	2301      	movs	r3, #1
 801300e:	4a03      	ldr	r2, [pc, #12]	@ (801301c <xMBPortEventPost+0x10>)
 8013010:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8013012:	4a03      	ldr	r2, [pc, #12]	@ (8013020 <xMBPortEventPost+0x14>)
 8013014:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8013016:	4618      	mov	r0, r3
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	20000ae6 	.word	0x20000ae6
 8013020:	20000ae7 	.word	0x20000ae7

08013024 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8013024:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8013026:	4a05      	ldr	r2, [pc, #20]	@ (801303c <xMBPortEventGet+0x18>)
 8013028:	7810      	ldrb	r0, [r2, #0]
 801302a:	b130      	cbz	r0, 801303a <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 801302c:	4a04      	ldr	r2, [pc, #16]	@ (8013040 <xMBPortEventGet+0x1c>)
 801302e:	7812      	ldrb	r2, [r2, #0]
 8013030:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8013032:	4b02      	ldr	r3, [pc, #8]	@ (801303c <xMBPortEventGet+0x18>)
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8013038:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 801303a:	4770      	bx	lr
 801303c:	20000ae6 	.word	0x20000ae6
 8013040:	20000ae7 	.word	0x20000ae7

08013044 <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8013044:	2907      	cmp	r1, #7
 8013046:	d000      	beq.n	801304a <handler_mb_tcp+0x6>
 8013048:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 801304a:	b538      	push	{r3, r4, r5, lr}
 801304c:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 801304e:	4b1e      	ldr	r3, [pc, #120]	@ (80130c8 <handler_mb_tcp+0x84>)
 8013050:	f100 021c 	add.w	r2, r0, #28
 8013054:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013058:	f013 fff8 	bl	802704c <mg_check_ip_acl>
 801305c:	2801      	cmp	r0, #1
 801305e:	d006      	beq.n	801306e <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8013060:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8013064:	f043 0320 	orr.w	r3, r3, #32
 8013068:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 801306c:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 801306e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8013070:	b293      	uxth	r3, r2
 8013072:	4916      	ldr	r1, [pc, #88]	@ (80130cc <handler_mb_tcp+0x88>)
 8013074:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8013076:	b933      	cbnz	r3, 8013086 <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8013078:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 801307c:	f043 0320 	orr.w	r3, r3, #32
 8013080:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8013084:	e7f2      	b.n	801306c <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8013086:	461a      	mov	r2, r3
 8013088:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801308a:	4811      	ldr	r0, [pc, #68]	@ (80130d0 <handler_mb_tcp+0x8c>)
 801308c:	f01c f9a6 	bl	802f3dc <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8013090:	2001      	movs	r0, #1
 8013092:	f7ff ffbb 	bl	801300c <xMBPortEventPost>
			eMBPoll ();
 8013096:	f7ff ff2d 	bl	8012ef4 <eMBPoll>
			eMBPoll ();
 801309a:	f7ff ff2b 	bl	8012ef4 <eMBPoll>
			if(bFrameSent){
 801309e:	4b0d      	ldr	r3, [pc, #52]	@ (80130d4 <handler_mb_tcp+0x90>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	b933      	cbnz	r3, 80130b2 <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 80130a4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80130a8:	f043 0320 	orr.w	r3, r3, #32
 80130ac:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 80130b0:	e7dc      	b.n	801306c <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 80130b2:	2500      	movs	r5, #0
 80130b4:	4b07      	ldr	r3, [pc, #28]	@ (80130d4 <handler_mb_tcp+0x90>)
 80130b6:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 80130b8:	4b07      	ldr	r3, [pc, #28]	@ (80130d8 <handler_mb_tcp+0x94>)
 80130ba:	881a      	ldrh	r2, [r3, #0]
 80130bc:	4907      	ldr	r1, [pc, #28]	@ (80130dc <handler_mb_tcp+0x98>)
 80130be:	4620      	mov	r0, r4
 80130c0:	f015 f8de 	bl	8028280 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 80130c4:	6425      	str	r5, [r4, #64]	@ 0x40
 80130c6:	e7d1      	b.n	801306c <handler_mb_tcp+0x28>
 80130c8:	20000ae8 	.word	0x20000ae8
 80130cc:	200012f4 	.word	0x200012f4
 80130d0:	200012f8 	.word	0x200012f8
 80130d4:	20000af0 	.word	0x20000af0
 80130d8:	20000af2 	.word	0x20000af2
 80130dc:	20000af4 	.word	0x20000af4

080130e0 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 80130e0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80130e2:	fb01 f400 	mul.w	r4, r1, r0
 80130e6:	4620      	mov	r0, r4
 80130e8:	f008 fbc6 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80130ec:	4605      	mov	r5, r0
 80130ee:	b118      	cbz	r0, 80130f8 <my_calloc+0x18>
 80130f0:	4622      	mov	r2, r4
 80130f2:	2100      	movs	r1, #0
 80130f4:	f01a fc0c 	bl	802d910 <memset>
  return p;
}
 80130f8:	4628      	mov	r0, r5
 80130fa:	bd38      	pop	{r3, r4, r5, pc}

080130fc <init_mb_tcp>:



void init_mb_tcp(void * param){
 80130fc:	b530      	push	{r4, r5, lr}
 80130fe:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8013100:	2300      	movs	r3, #0
 8013102:	4a24      	ldr	r2, [pc, #144]	@ (8013194 <init_mb_tcp+0x98>)
 8013104:	4924      	ldr	r1, [pc, #144]	@ (8013198 <init_mb_tcp+0x9c>)
 8013106:	f014 ffcf 	bl	80280a8 <mg_listen>

	eMBTCPInit(0);
 801310a:	2000      	movs	r0, #0
 801310c:	f7ff fea0 	bl	8012e50 <eMBTCPInit>
	eMBEnable();
 8013110:	f7ff fede 	bl	8012ed0 <eMBEnable>

	size_t acl_size = 0;
 8013114:	2200      	movs	r2, #0
 8013116:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013118:	a901      	add	r1, sp, #4
 801311a:	4820      	ldr	r0, [pc, #128]	@ (801319c <init_mb_tcp+0xa0>)
 801311c:	f008 fd14 	bl	801bb48 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8013120:	9801      	ldr	r0, [sp, #4]
 8013122:	1e42      	subs	r2, r0, #1
 8013124:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013128:	429a      	cmp	r2, r3
 801312a:	d815      	bhi.n	8013158 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 801312c:	2101      	movs	r1, #1
 801312e:	4408      	add	r0, r1
 8013130:	f7ff ffd6 	bl	80130e0 <my_calloc>
 8013134:	4d1a      	ldr	r5, [pc, #104]	@ (80131a0 <init_mb_tcp+0xa4>)
 8013136:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8013138:	2101      	movs	r1, #1
 801313a:	4818      	ldr	r0, [pc, #96]	@ (801319c <init_mb_tcp+0xa0>)
 801313c:	f008 fd42 	bl	801bbc4 <mg_fs_lfs_open>
 8013140:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8013142:	9a01      	ldr	r2, [sp, #4]
 8013144:	6829      	ldr	r1, [r5, #0]
 8013146:	f008 fd6d 	bl	801bc24 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 801314a:	9b01      	ldr	r3, [sp, #4]
 801314c:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 801314e:	4620      	mov	r0, r4
 8013150:	f008 fd5c 	bl	801bc0c <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8013154:	b003      	add	sp, #12
 8013156:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8013158:	2101      	movs	r1, #1
 801315a:	200b      	movs	r0, #11
 801315c:	f7ff ffc0 	bl	80130e0 <my_calloc>
 8013160:	4603      	mov	r3, r0
 8013162:	4c0f      	ldr	r4, [pc, #60]	@ (80131a0 <init_mb_tcp+0xa4>)
 8013164:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8013166:	220b      	movs	r2, #11
 8013168:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 801316a:	4a0e      	ldr	r2, [pc, #56]	@ (80131a4 <init_mb_tcp+0xa8>)
 801316c:	ca03      	ldmia	r2!, {r0, r1}
 801316e:	6018      	str	r0, [r3, #0]
 8013170:	6059      	str	r1, [r3, #4]
 8013172:	8811      	ldrh	r1, [r2, #0]
 8013174:	7892      	ldrb	r2, [r2, #2]
 8013176:	8119      	strh	r1, [r3, #8]
 8013178:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 801317a:	2102      	movs	r1, #2
 801317c:	4807      	ldr	r0, [pc, #28]	@ (801319c <init_mb_tcp+0xa0>)
 801317e:	f008 fd21 	bl	801bbc4 <mg_fs_lfs_open>
 8013182:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8013184:	6862      	ldr	r2, [r4, #4]
 8013186:	6821      	ldr	r1, [r4, #0]
 8013188:	f008 fd58 	bl	801bc3c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 801318c:	4628      	mov	r0, r5
 801318e:	f008 fd3d 	bl	801bc0c <mg_fs_lfs_close>
}
 8013192:	e7df      	b.n	8013154 <init_mb_tcp+0x58>
 8013194:	08013045 	.word	0x08013045
 8013198:	08037a34 	.word	0x08037a34
 801319c:	08037a48 	.word	0x08037a48
 80131a0:	20000ae8 	.word	0x20000ae8
 80131a4:	08037a5c 	.word	0x08037a5c

080131a8 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 80131a8:	2001      	movs	r0, #1
 80131aa:	4770      	bx	lr

080131ac <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 80131ac:	4b04      	ldr	r3, [pc, #16]	@ (80131c0 <xMBTCPPortGetRequest+0x14>)
 80131ae:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 80131b0:	4b04      	ldr	r3, [pc, #16]	@ (80131c4 <xMBTCPPortGetRequest+0x18>)
 80131b2:	881a      	ldrh	r2, [r3, #0]
 80131b4:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 80131b6:	2200      	movs	r2, #0
 80131b8:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 80131ba:	2001      	movs	r0, #1
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop
 80131c0:	200012f8 	.word	0x200012f8
 80131c4:	200012f4 	.word	0x200012f4

080131c8 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 80131c8:	b510      	push	{r4, lr}
 80131ca:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 80131cc:	460a      	mov	r2, r1
 80131ce:	4601      	mov	r1, r0
 80131d0:	4804      	ldr	r0, [pc, #16]	@ (80131e4 <xMBTCPPortSendResponse+0x1c>)
 80131d2:	f01c f903 	bl	802f3dc <memcpy>
      ucTCPResponseLen = usTCPLength;
 80131d6:	4b04      	ldr	r3, [pc, #16]	@ (80131e8 <xMBTCPPortSendResponse+0x20>)
 80131d8:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 80131da:	2001      	movs	r0, #1
 80131dc:	4b03      	ldr	r3, [pc, #12]	@ (80131ec <xMBTCPPortSendResponse+0x24>)
 80131de:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 80131e0:	bd10      	pop	{r4, pc}
 80131e2:	bf00      	nop
 80131e4:	20000af4 	.word	0x20000af4
 80131e8:	20000af2 	.word	0x20000af2
 80131ec:	20000af0 	.word	0x20000af0

080131f0 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 80131f0:	4770      	bx	lr

080131f2 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 80131f2:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 80131f4:	f7ff ffd8 	bl	80131a8 <xMBTCPPortInit>
 80131f8:	b108      	cbz	r0, 80131fe <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 80131fa:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 80131fc:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 80131fe:	2003      	movs	r0, #3
 8013200:	e7fc      	b.n	80131fc <eMBTCPDoInit+0xa>

08013202 <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8013202:	4770      	bx	lr

08013204 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8013204:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8013206:	f7ff fff3 	bl	80131f0 <vMBTCPPortDisable>
}
 801320a:	bd08      	pop	{r3, pc}

0801320c <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 801320c:	b570      	push	{r4, r5, r6, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	4606      	mov	r6, r0
 8013212:	460d      	mov	r5, r1
 8013214:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8013216:	f10d 0102 	add.w	r1, sp, #2
 801321a:	a801      	add	r0, sp, #4
 801321c:	f7ff ffc6 	bl	80131ac <xMBTCPPortGetRequest>
 8013220:	b180      	cbz	r0, 8013244 <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8013222:	9b01      	ldr	r3, [sp, #4]
 8013224:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8013226:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8013228:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 801322c:	d10c      	bne.n	8013248 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 801322e:	3307      	adds	r3, #7
 8013230:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8013232:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013236:	3b07      	subs	r3, #7
 8013238:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 801323a:	23ff      	movs	r3, #255	@ 0xff
 801323c:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 801323e:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8013240:	b002      	add	sp, #8
 8013242:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8013244:	2005      	movs	r0, #5
 8013246:	e7fb      	b.n	8013240 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8013248:	2005      	movs	r0, #5
 801324a:	e7f9      	b.n	8013240 <eMBTCPReceive+0x34>

0801324c <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 801324c:	b508      	push	{r3, lr}
 801324e:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8013250:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8013252:	1c53      	adds	r3, r2, #1
 8013254:	121b      	asrs	r3, r3, #8
 8013256:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 801325a:	3201      	adds	r2, #1
 801325c:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8013260:	b289      	uxth	r1, r1
 8013262:	3807      	subs	r0, #7
 8013264:	f7ff ffb0 	bl	80131c8 <xMBTCPPortSendResponse>
 8013268:	b108      	cbz	r0, 801326e <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 801326a:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 801326c:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 801326e:	2005      	movs	r0, #5
 8013270:	e7fc      	b.n	801326c <eMBTCPSend+0x20>
	...

08013274 <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8013274:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8013276:	4b03      	ldr	r3, [pc, #12]	@ (8013284 <handle_OPTIONS_method+0x10>)
 8013278:	4a03      	ldr	r2, [pc, #12]	@ (8013288 <handle_OPTIONS_method+0x14>)
 801327a:	21c8      	movs	r1, #200	@ 0xc8
 801327c:	f011 fe4e 	bl	8024f1c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8013280:	bd08      	pop	{r3, pc}
 8013282:	bf00      	nop
 8013284:	0803c46c 	.word	0x0803c46c
 8013288:	08037a68 	.word	0x08037a68

0801328c <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 801328c:	b570      	push	{r4, r5, r6, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	4605      	mov	r5, r0
 8013292:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013294:	ae02      	add	r6, sp, #8
 8013296:	4910      	ldr	r1, [pc, #64]	@ (80132d8 <handler_dev_version+0x4c>)
 8013298:	4630      	mov	r0, r6
 801329a:	f011 ffc9 	bl	8025230 <mg_str_s>
 801329e:	2300      	movs	r3, #0
 80132a0:	9300      	str	r3, [sp, #0]
 80132a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80132a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132aa:	f012 f9e3 	bl	8025674 <mg_match>
 80132ae:	b158      	cbz	r0, 80132c8 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 80132b0:	4b0a      	ldr	r3, [pc, #40]	@ (80132dc <handler_dev_version+0x50>)
 80132b2:	9301      	str	r3, [sp, #4]
 80132b4:	4b0a      	ldr	r3, [pc, #40]	@ (80132e0 <handler_dev_version+0x54>)
 80132b6:	9300      	str	r3, [sp, #0]
 80132b8:	4b0a      	ldr	r3, [pc, #40]	@ (80132e4 <handler_dev_version+0x58>)
 80132ba:	4a0b      	ldr	r2, [pc, #44]	@ (80132e8 <handler_dev_version+0x5c>)
 80132bc:	21c8      	movs	r1, #200	@ 0xc8
 80132be:	4628      	mov	r0, r5
 80132c0:	f011 fe2c 	bl	8024f1c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 80132c4:	b004      	add	sp, #16
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80132c8:	4b08      	ldr	r3, [pc, #32]	@ (80132ec <handler_dev_version+0x60>)
 80132ca:	4a07      	ldr	r2, [pc, #28]	@ (80132e8 <handler_dev_version+0x5c>)
 80132cc:	f240 1195 	movw	r1, #405	@ 0x195
 80132d0:	4628      	mov	r0, r5
 80132d2:	f011 fe23 	bl	8024f1c <mg_http_reply>
		return;
 80132d6:	e7f5      	b.n	80132c4 <handler_dev_version+0x38>
 80132d8:	08037b08 	.word	0x08037b08
 80132dc:	08037bb4 	.word	0x08037bb4
 80132e0:	0803760c 	.word	0x0803760c
 80132e4:	08037b0c 	.word	0x08037b0c
 80132e8:	08037b44 	.word	0x08037b44
 80132ec:	08037bb8 	.word	0x08037bb8

080132f0 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 80132f0:	b570      	push	{r4, r5, r6, lr}
 80132f2:	b088      	sub	sp, #32
 80132f4:	4605      	mov	r5, r0
 80132f6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80132f8:	ae06      	add	r6, sp, #24
 80132fa:	4913      	ldr	r1, [pc, #76]	@ (8013348 <handler_dev_info+0x58>)
 80132fc:	4630      	mov	r0, r6
 80132fe:	f011 ff97 	bl	8025230 <mg_str_s>
 8013302:	2300      	movs	r3, #0
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	e896 000c 	ldmia.w	r6, {r2, r3}
 801330a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801330e:	f012 f9b1 	bl	8025674 <mg_match>
 8013312:	b188      	cbz	r0, 8013338 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 8013314:	4b0d      	ldr	r3, [pc, #52]	@ (801334c <handler_dev_info+0x5c>)
 8013316:	9304      	str	r3, [sp, #16]
 8013318:	4b0d      	ldr	r3, [pc, #52]	@ (8013350 <handler_dev_info+0x60>)
 801331a:	9303      	str	r3, [sp, #12]
 801331c:	4b0d      	ldr	r3, [pc, #52]	@ (8013354 <handler_dev_info+0x64>)
 801331e:	9302      	str	r3, [sp, #8]
 8013320:	4b0d      	ldr	r3, [pc, #52]	@ (8013358 <handler_dev_info+0x68>)
 8013322:	9301      	str	r3, [sp, #4]
 8013324:	4b0d      	ldr	r3, [pc, #52]	@ (801335c <handler_dev_info+0x6c>)
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	4b0d      	ldr	r3, [pc, #52]	@ (8013360 <handler_dev_info+0x70>)
 801332a:	4a0e      	ldr	r2, [pc, #56]	@ (8013364 <handler_dev_info+0x74>)
 801332c:	21c8      	movs	r1, #200	@ 0xc8
 801332e:	4628      	mov	r0, r5
 8013330:	f011 fdf4 	bl	8024f1c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8013334:	b008      	add	sp, #32
 8013336:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013338:	4b0b      	ldr	r3, [pc, #44]	@ (8013368 <handler_dev_info+0x78>)
 801333a:	4a0a      	ldr	r2, [pc, #40]	@ (8013364 <handler_dev_info+0x74>)
 801333c:	f240 1195 	movw	r1, #405	@ 0x195
 8013340:	4628      	mov	r0, r5
 8013342:	f011 fdeb 	bl	8024f1c <mg_http_reply>
		return;
 8013346:	e7f5      	b.n	8013334 <handler_dev_info+0x44>
 8013348:	08037b08 	.word	0x08037b08
 801334c:	08037c74 	.word	0x08037c74
 8013350:	08037c88 	.word	0x08037c88
 8013354:	08037c94 	.word	0x08037c94
 8013358:	08037bb4 	.word	0x08037bb4
 801335c:	0803760c 	.word	0x0803760c
 8013360:	08037c08 	.word	0x08037c08
 8013364:	08037b44 	.word	0x08037b44
 8013368:	08037bb8 	.word	0x08037bb8

0801336c <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 801336c:	b570      	push	{r4, r5, r6, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	4605      	mov	r5, r0
 8013372:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013374:	ae02      	add	r6, sp, #8
 8013376:	4914      	ldr	r1, [pc, #80]	@ (80133c8 <handle_firmware_deactivate+0x5c>)
 8013378:	4630      	mov	r0, r6
 801337a:	f011 ff59 	bl	8025230 <mg_str_s>
 801337e:	2300      	movs	r3, #0
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013386:	e894 0003 	ldmia.w	r4, {r0, r1}
 801338a:	f012 f973 	bl	8025674 <mg_match>
 801338e:	b198      	cbz	r0, 80133b8 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8013390:	4b0e      	ldr	r3, [pc, #56]	@ (80133cc <handle_firmware_deactivate+0x60>)
 8013392:	6a1b      	ldr	r3, [r3, #32]
 8013394:	480e      	ldr	r0, [pc, #56]	@ (80133d0 <handle_firmware_deactivate+0x64>)
 8013396:	4798      	blx	r3
 8013398:	b138      	cbz	r0, 80133aa <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801339a:	4b0e      	ldr	r3, [pc, #56]	@ (80133d4 <handle_firmware_deactivate+0x68>)
 801339c:	4a0e      	ldr	r2, [pc, #56]	@ (80133d8 <handle_firmware_deactivate+0x6c>)
 801339e:	21c8      	movs	r1, #200	@ 0xc8
 80133a0:	4628      	mov	r0, r5
 80133a2:	f011 fdbb 	bl	8024f1c <mg_http_reply>
}
 80133a6:	b004      	add	sp, #16
 80133a8:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80133aa:	4b0c      	ldr	r3, [pc, #48]	@ (80133dc <handle_firmware_deactivate+0x70>)
 80133ac:	4a0a      	ldr	r2, [pc, #40]	@ (80133d8 <handle_firmware_deactivate+0x6c>)
 80133ae:	21c8      	movs	r1, #200	@ 0xc8
 80133b0:	4628      	mov	r0, r5
 80133b2:	f011 fdb3 	bl	8024f1c <mg_http_reply>
 80133b6:	e7f6      	b.n	80133a6 <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80133b8:	4b09      	ldr	r3, [pc, #36]	@ (80133e0 <handle_firmware_deactivate+0x74>)
 80133ba:	4a07      	ldr	r2, [pc, #28]	@ (80133d8 <handle_firmware_deactivate+0x6c>)
 80133bc:	f240 1195 	movw	r1, #405	@ 0x195
 80133c0:	4628      	mov	r0, r5
 80133c2:	f011 fdab 	bl	8024f1c <mg_http_reply>
}
 80133c6:	e7ee      	b.n	80133a6 <handle_firmware_deactivate+0x3a>
 80133c8:	08037c9c 	.word	0x08037c9c
 80133cc:	200000a0 	.word	0x200000a0
 80133d0:	080373c8 	.word	0x080373c8
 80133d4:	08037ca4 	.word	0x08037ca4
 80133d8:	08037b44 	.word	0x08037b44
 80133dc:	08037ce0 	.word	0x08037ce0
 80133e0:	08037d24 	.word	0x08037d24

080133e4 <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	4605      	mov	r5, r0
 80133ea:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80133ec:	ae02      	add	r6, sp, #8
 80133ee:	4912      	ldr	r1, [pc, #72]	@ (8013438 <handle_web_files_remove+0x54>)
 80133f0:	4630      	mov	r0, r6
 80133f2:	f011 ff1d 	bl	8025230 <mg_str_s>
 80133f6:	2300      	movs	r3, #0
 80133f8:	9300      	str	r3, [sp, #0]
 80133fa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80133fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013402:	f012 f937 	bl	8025674 <mg_match>
 8013406:	b178      	cbz	r0, 8013428 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8013408:	4e0c      	ldr	r6, [pc, #48]	@ (801343c <handle_web_files_remove+0x58>)
 801340a:	6a33      	ldr	r3, [r6, #32]
 801340c:	4c0c      	ldr	r4, [pc, #48]	@ (8013440 <handle_web_files_remove+0x5c>)
 801340e:	4620      	mov	r0, r4
 8013410:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8013412:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8013414:	4620      	mov	r0, r4
 8013416:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013418:	4b0a      	ldr	r3, [pc, #40]	@ (8013444 <handle_web_files_remove+0x60>)
 801341a:	4a0b      	ldr	r2, [pc, #44]	@ (8013448 <handle_web_files_remove+0x64>)
 801341c:	21c8      	movs	r1, #200	@ 0xc8
 801341e:	4628      	mov	r0, r5
 8013420:	f011 fd7c 	bl	8024f1c <mg_http_reply>
}
 8013424:	b004      	add	sp, #16
 8013426:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013428:	4b08      	ldr	r3, [pc, #32]	@ (801344c <handle_web_files_remove+0x68>)
 801342a:	4a07      	ldr	r2, [pc, #28]	@ (8013448 <handle_web_files_remove+0x64>)
 801342c:	f240 1195 	movw	r1, #405	@ 0x195
 8013430:	4628      	mov	r0, r5
 8013432:	f011 fd73 	bl	8024f1c <mg_http_reply>
}
 8013436:	e7f5      	b.n	8013424 <handle_web_files_remove+0x40>
 8013438:	08037c9c 	.word	0x08037c9c
 801343c:	200000a0 	.word	0x200000a0
 8013440:	080373b4 	.word	0x080373b4
 8013444:	08037d74 	.word	0x08037d74
 8013448:	08037b44 	.word	0x08037b44
 801344c:	08037d24 	.word	0x08037d24

08013450 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8013450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013452:	b0c3      	sub	sp, #268	@ 0x10c
 8013454:	4606      	mov	r6, r0
 8013456:	460d      	mov	r5, r1
	char username[128] = {0};
 8013458:	2400      	movs	r4, #0
 801345a:	9422      	str	r4, [sp, #136]	@ 0x88
 801345c:	277c      	movs	r7, #124	@ 0x7c
 801345e:	463a      	mov	r2, r7
 8013460:	4621      	mov	r1, r4
 8013462:	a823      	add	r0, sp, #140	@ 0x8c
 8013464:	f01a fa54 	bl	802d910 <memset>
	char pass[128] = {0};
 8013468:	9402      	str	r4, [sp, #8]
 801346a:	463a      	mov	r2, r7
 801346c:	4621      	mov	r1, r4
 801346e:	a803      	add	r0, sp, #12
 8013470:	f01a fa4e 	bl	802d910 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013474:	2280      	movs	r2, #128	@ 0x80
 8013476:	9200      	str	r2, [sp, #0]
 8013478:	ab02      	add	r3, sp, #8
 801347a:	a922      	add	r1, sp, #136	@ 0x88
 801347c:	4628      	mov	r0, r5
 801347e:	f012 fdff 	bl	8026080 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8013482:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8013486:	b113      	cbz	r3, 801348e <handler_logout+0x3e>
 8013488:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801348c:	b962      	cbnz	r2, 80134a8 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 801348e:	b913      	cbnz	r3, 8013496 <handler_logout+0x46>
 8013490:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013494:	bb4b      	cbnz	r3, 80134ea <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8013496:	4b21      	ldr	r3, [pc, #132]	@ (801351c <handler_logout+0xcc>)
 8013498:	4a21      	ldr	r2, [pc, #132]	@ (8013520 <handler_logout+0xd0>)
 801349a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801349e:	4630      	mov	r0, r6
 80134a0:	f011 fd3c 	bl	8024f1c <mg_http_reply>
}
 80134a4:	b043      	add	sp, #268	@ 0x10c
 80134a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 80134a8:	4b1e      	ldr	r3, [pc, #120]	@ (8013524 <handler_logout+0xd4>)
 80134aa:	4a1d      	ldr	r2, [pc, #116]	@ (8013520 <handler_logout+0xd0>)
 80134ac:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80134b0:	4630      	mov	r0, r6
 80134b2:	f011 fd33 	bl	8024f1c <mg_http_reply>
        return;
 80134b6:	e7f5      	b.n	80134a4 <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 80134b8:	23b8      	movs	r3, #184	@ 0xb8
 80134ba:	fb03 f404 	mul.w	r4, r3, r4
 80134be:	4f1a      	ldr	r7, [pc, #104]	@ (8013528 <handler_logout+0xd8>)
 80134c0:	19e5      	adds	r5, r4, r7
 80134c2:	462a      	mov	r2, r5
 80134c4:	4919      	ldr	r1, [pc, #100]	@ (801352c <handler_logout+0xdc>)
 80134c6:	2001      	movs	r0, #1
 80134c8:	f7fe ff02 	bl	80122d0 <logging>
				web_tokens[i].token[0] = '\0';
 80134cc:	2300      	movs	r3, #0
 80134ce:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 80134d2:	2000      	movs	r0, #0
 80134d4:	2100      	movs	r1, #0
 80134d6:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 80134da:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 80134dc:	4b14      	ldr	r3, [pc, #80]	@ (8013530 <handler_logout+0xe0>)
 80134de:	4a10      	ldr	r2, [pc, #64]	@ (8013520 <handler_logout+0xd0>)
 80134e0:	21c8      	movs	r1, #200	@ 0xc8
 80134e2:	4630      	mov	r0, r6
 80134e4:	f011 fd1a 	bl	8024f1c <mg_http_reply>
		        return;
 80134e8:	e7dc      	b.n	80134a4 <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 80134ea:	2400      	movs	r4, #0
 80134ec:	2c09      	cmp	r4, #9
 80134ee:	dc0c      	bgt.n	801350a <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 80134f0:	23b8      	movs	r3, #184	@ 0xb8
 80134f2:	fb04 f303 	mul.w	r3, r4, r3
 80134f6:	3380      	adds	r3, #128	@ 0x80
 80134f8:	a902      	add	r1, sp, #8
 80134fa:	480b      	ldr	r0, [pc, #44]	@ (8013528 <handler_logout+0xd8>)
 80134fc:	4418      	add	r0, r3
 80134fe:	f7fc fe6f 	bl	80101e0 <strcmp>
 8013502:	2800      	cmp	r0, #0
 8013504:	d0d8      	beq.n	80134b8 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8013506:	3401      	adds	r4, #1
 8013508:	e7f0      	b.n	80134ec <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 801350a:	4b0a      	ldr	r3, [pc, #40]	@ (8013534 <handler_logout+0xe4>)
 801350c:	4a04      	ldr	r2, [pc, #16]	@ (8013520 <handler_logout+0xd0>)
 801350e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013512:	4630      	mov	r0, r6
 8013514:	f011 fd02 	bl	8024f1c <mg_http_reply>
        return;
 8013518:	e7c4      	b.n	80134a4 <handler_logout+0x54>
 801351a:	bf00      	nop
 801351c:	08037ec0 	.word	0x08037ec0
 8013520:	08037b44 	.word	0x08037b44
 8013524:	08037dbc 	.word	0x08037dbc
 8013528:	20001af8 	.word	0x20001af8
 801352c:	08037e3c 	.word	0x08037e3c
 8013530:	08037e50 	.word	0x08037e50
 8013534:	08037e8c 	.word	0x08037e8c

08013538 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8013538:	b530      	push	{r4, r5, lr}
 801353a:	b0c7      	sub	sp, #284	@ 0x11c
 801353c:	4605      	mov	r5, r0
 801353e:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8013540:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013544:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8013548:	d024      	beq.n	8013594 <handle_login+0x5c>
 801354a:	4b14      	ldr	r3, [pc, #80]	@ (801359c <handle_login+0x64>)
              cookie_name, u->token,
 801354c:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013550:	b312      	cbz	r2, 8013598 <handle_login+0x60>
 8013552:	4a13      	ldr	r2, [pc, #76]	@ (80135a0 <handle_login+0x68>)
 8013554:	4813      	ldr	r0, [pc, #76]	@ (80135a4 <handle_login+0x6c>)
 8013556:	9002      	str	r0, [sp, #8]
 8013558:	9201      	str	r2, [sp, #4]
 801355a:	9100      	str	r1, [sp, #0]
 801355c:	4a12      	ldr	r2, [pc, #72]	@ (80135a8 <handle_login+0x70>)
 801355e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013562:	a806      	add	r0, sp, #24
 8013564:	f010 ffdc 	bl	8024520 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8013568:	9405      	str	r4, [sp, #20]
 801356a:	2200      	movs	r2, #0
 801356c:	9204      	str	r2, [sp, #16]
 801356e:	4b0f      	ldr	r3, [pc, #60]	@ (80135ac <handle_login+0x74>)
 8013570:	9303      	str	r3, [sp, #12]
 8013572:	490f      	ldr	r1, [pc, #60]	@ (80135b0 <handle_login+0x78>)
 8013574:	9102      	str	r1, [sp, #8]
 8013576:	9201      	str	r2, [sp, #4]
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	4b0e      	ldr	r3, [pc, #56]	@ (80135b4 <handle_login+0x7c>)
 801357c:	aa06      	add	r2, sp, #24
 801357e:	21c8      	movs	r1, #200	@ 0xc8
 8013580:	4628      	mov	r0, r5
 8013582:	f011 fccb 	bl	8024f1c <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 8013586:	4622      	mov	r2, r4
 8013588:	490b      	ldr	r1, [pc, #44]	@ (80135b8 <handle_login+0x80>)
 801358a:	2001      	movs	r0, #1
 801358c:	f7fe fea0 	bl	80122d0 <logging>
}
 8013590:	b047      	add	sp, #284	@ 0x11c
 8013592:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8013594:	4b09      	ldr	r3, [pc, #36]	@ (80135bc <handle_login+0x84>)
 8013596:	e7d9      	b.n	801354c <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013598:	4a09      	ldr	r2, [pc, #36]	@ (80135c0 <handle_login+0x88>)
 801359a:	e7db      	b.n	8013554 <handle_login+0x1c>
 801359c:	08037f38 	.word	0x08037f38
 80135a0:	08037f5c 	.word	0x08037f5c
 80135a4:	0002a300 	.word	0x0002a300
 80135a8:	08037f68 	.word	0x08037f68
 80135ac:	080236dd 	.word	0x080236dd
 80135b0:	08038fe0 	.word	0x08038fe0
 80135b4:	08037fac 	.word	0x08037fac
 80135b8:	08037fb4 	.word	0x08037fb4
 80135bc:	08037f4c 	.word	0x08037f4c
 80135c0:	080381c0 	.word	0x080381c0

080135c4 <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 80135c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135c8:	b0e5      	sub	sp, #404	@ 0x194
 80135ca:	4605      	mov	r5, r0
 80135cc:	460c      	mov	r4, r1
 80135ce:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 80135d0:	2100      	movs	r1, #0
 80135d2:	9159      	str	r1, [sp, #356]	@ 0x164
 80135d4:	2225      	movs	r2, #37	@ 0x25
 80135d6:	a85a      	add	r0, sp, #360	@ 0x168
 80135d8:	f01a f99a 	bl	802d910 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 80135dc:	2280      	movs	r2, #128	@ 0x80
 80135de:	9200      	str	r2, [sp, #0]
 80135e0:	ab02      	add	r3, sp, #8
 80135e2:	a922      	add	r1, sp, #136	@ 0x88
 80135e4:	4620      	mov	r0, r4
 80135e6:	f012 fd4b 	bl	8026080 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80135ea:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80135ee:	b113      	cbz	r3, 80135f6 <auth+0x32>
 80135f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80135f4:	b94a      	cbnz	r2, 801360a <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f040 80bb 	bne.w	8013772 <auth+0x1ae>
 80135fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013600:	2b00      	cmp	r3, #0
 8013602:	f040 80b2 	bne.w	801376a <auth+0x1a6>
	return false;
 8013606:	2000      	movs	r0, #0
 8013608:	e0b4      	b.n	8013774 <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 801360a:	aa22      	add	r2, sp, #136	@ 0x88
 801360c:	495b      	ldr	r1, [pc, #364]	@ (801377c <auth+0x1b8>)
 801360e:	2001      	movs	r0, #1
 8013610:	f7fe fe5e 	bl	80122d0 <logging>
		mg_sha1_init(&sha1_ctx);
 8013614:	a842      	add	r0, sp, #264	@ 0x108
 8013616:	f011 fd59 	bl	80250cc <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 801361a:	a802      	add	r0, sp, #8
 801361c:	f7fc fe40 	bl	80102a0 <strlen>
 8013620:	4602      	mov	r2, r0
 8013622:	a902      	add	r1, sp, #8
 8013624:	a842      	add	r0, sp, #264	@ 0x108
 8013626:	f011 fd6b 	bl	8025100 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 801362a:	a942      	add	r1, sp, #264	@ 0x108
 801362c:	a859      	add	r0, sp, #356	@ 0x164
 801362e:	f011 fda1 	bl	8025174 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8013632:	2400      	movs	r4, #0
 8013634:	e02a      	b.n	801368c <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8013636:	4641      	mov	r1, r8
 8013638:	4628      	mov	r0, r5
 801363a:	f7ff ff7d 	bl	8013538 <handle_login>
 801363e:	e066      	b.n	801370e <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8013640:	4f4f      	ldr	r7, [pc, #316]	@ (8013780 <auth+0x1bc>)
 8013642:	2280      	movs	r2, #128	@ 0x80
 8013644:	a922      	add	r1, sp, #136	@ 0x88
 8013646:	4638      	mov	r0, r7
 8013648:	f01a f9a9 	bl	802d99e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 801364c:	f017 f9b0 	bl	802a9b0 <mg_now>
 8013650:	4b4c      	ldr	r3, [pc, #304]	@ (8013784 <auth+0x1c0>)
 8013652:	18c3      	adds	r3, r0, r3
 8013654:	f141 0100 	adc.w	r1, r1, #0
 8013658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801365c:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013660:	2128      	movs	r1, #40	@ 0x28
 8013662:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013666:	f013 f951 	bl	802690c <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 801366a:	b94e      	cbnz	r6, 8013680 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 801366c:	22b8      	movs	r2, #184	@ 0xb8
 801366e:	4b46      	ldr	r3, [pc, #280]	@ (8013788 <auth+0x1c4>)
 8013670:	fb02 3204 	mla	r2, r2, r4, r3
 8013674:	4945      	ldr	r1, [pc, #276]	@ (801378c <auth+0x1c8>)
 8013676:	2001      	movs	r0, #1
 8013678:	f7fe fe2a 	bl	80122d0 <logging>
					return true;
 801367c:	2001      	movs	r0, #1
 801367e:	e079      	b.n	8013774 <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013680:	4639      	mov	r1, r7
 8013682:	4628      	mov	r0, r5
 8013684:	f7ff ff58 	bl	8013538 <handle_login>
 8013688:	e7f0      	b.n	801366c <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 801368a:	3401      	adds	r4, #1
 801368c:	2c09      	cmp	r4, #9
 801368e:	dc45      	bgt.n	801371c <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013690:	a922      	add	r1, sp, #136	@ 0x88
 8013692:	20a9      	movs	r0, #169	@ 0xa9
 8013694:	4b3e      	ldr	r3, [pc, #248]	@ (8013790 <auth+0x1cc>)
 8013696:	fb00 3004 	mla	r0, r0, r4, r3
 801369a:	f7fc fda1 	bl	80101e0 <strcmp>
 801369e:	2800      	cmp	r0, #0
 80136a0:	d1f3      	bne.n	801368a <auth+0xc6>
 80136a2:	23a9      	movs	r3, #169	@ 0xa9
 80136a4:	fb04 f303 	mul.w	r3, r4, r3
 80136a8:	3380      	adds	r3, #128	@ 0x80
 80136aa:	a959      	add	r1, sp, #356	@ 0x164
 80136ac:	4838      	ldr	r0, [pc, #224]	@ (8013790 <auth+0x1cc>)
 80136ae:	4418      	add	r0, r3
 80136b0:	f7fc fd96 	bl	80101e0 <strcmp>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	d1e8      	bne.n	801368a <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 80136b8:	4b33      	ldr	r3, [pc, #204]	@ (8013788 <auth+0x1c4>)
 80136ba:	22b8      	movs	r2, #184	@ 0xb8
 80136bc:	fb02 3304 	mla	r3, r2, r4, r3
 80136c0:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 80136c4:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 80136c8:	f017 f972 	bl	802a9b0 <mg_now>
 80136cc:	4580      	cmp	r8, r0
 80136ce:	418f      	sbcs	r7, r1
 80136d0:	d2b6      	bcs.n	8013640 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 80136d2:	27b8      	movs	r7, #184	@ 0xb8
 80136d4:	fb04 f707 	mul.w	r7, r4, r7
 80136d8:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013788 <auth+0x1c4>
 80136dc:	eb07 0809 	add.w	r8, r7, r9
 80136e0:	2280      	movs	r2, #128	@ 0x80
 80136e2:	a922      	add	r1, sp, #136	@ 0x88
 80136e4:	4640      	mov	r0, r8
 80136e6:	f01a f95a 	bl	802d99e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80136ea:	f017 f961 	bl	802a9b0 <mg_now>
 80136ee:	4b25      	ldr	r3, [pc, #148]	@ (8013784 <auth+0x1c0>)
 80136f0:	18c0      	adds	r0, r0, r3
 80136f2:	f141 0100 	adc.w	r1, r1, #0
 80136f6:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80136fa:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80136fe:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013702:	2128      	movs	r1, #40	@ 0x28
 8013704:	4448      	add	r0, r9
 8013706:	f013 f901 	bl	802690c <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 801370a:	2e00      	cmp	r6, #0
 801370c:	d193      	bne.n	8013636 <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 801370e:	4642      	mov	r2, r8
 8013710:	491e      	ldr	r1, [pc, #120]	@ (801378c <auth+0x1c8>)
 8013712:	2001      	movs	r0, #1
 8013714:	f7fe fddc 	bl	80122d0 <logging>
						return true;
 8013718:	2001      	movs	r0, #1
 801371a:	e02b      	b.n	8013774 <auth+0x1b0>
	return false;
 801371c:	2000      	movs	r0, #0
 801371e:	e029      	b.n	8013774 <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8013720:	22b8      	movs	r2, #184	@ 0xb8
 8013722:	4b19      	ldr	r3, [pc, #100]	@ (8013788 <auth+0x1c4>)
 8013724:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	4b1a      	ldr	r3, [pc, #104]	@ (8013794 <auth+0x1d0>)
 801372c:	4a1a      	ldr	r2, [pc, #104]	@ (8013798 <auth+0x1d4>)
 801372e:	21c8      	movs	r1, #200	@ 0xc8
 8013730:	4628      	mov	r0, r5
 8013732:	f011 fbf3 	bl	8024f1c <mg_http_reply>
 8013736:	e016      	b.n	8013766 <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 8013738:	3401      	adds	r4, #1
 801373a:	2c09      	cmp	r4, #9
 801373c:	dc17      	bgt.n	801376e <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 801373e:	23b8      	movs	r3, #184	@ 0xb8
 8013740:	fb04 f303 	mul.w	r3, r4, r3
 8013744:	3380      	adds	r3, #128	@ 0x80
 8013746:	a902      	add	r1, sp, #8
 8013748:	480f      	ldr	r0, [pc, #60]	@ (8013788 <auth+0x1c4>)
 801374a:	4418      	add	r0, r3
 801374c:	f7fc fd48 	bl	80101e0 <strcmp>
 8013750:	2800      	cmp	r0, #0
 8013752:	d1f1      	bne.n	8013738 <auth+0x174>
 8013754:	23b8      	movs	r3, #184	@ 0xb8
 8013756:	fb04 f303 	mul.w	r3, r4, r3
 801375a:	4a0b      	ldr	r2, [pc, #44]	@ (8013788 <auth+0x1c4>)
 801375c:	5cd3      	ldrb	r3, [r2, r3]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d0ea      	beq.n	8013738 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013762:	2e00      	cmp	r6, #0
 8013764:	d1dc      	bne.n	8013720 <auth+0x15c>
				return true;
 8013766:	2001      	movs	r0, #1
 8013768:	e004      	b.n	8013774 <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 801376a:	2400      	movs	r4, #0
 801376c:	e7e5      	b.n	801373a <auth+0x176>
	return false;
 801376e:	2000      	movs	r0, #0
 8013770:	e000      	b.n	8013774 <auth+0x1b0>
 8013772:	2000      	movs	r0, #0
}
 8013774:	b065      	add	sp, #404	@ 0x194
 8013776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801377a:	bf00      	nop
 801377c:	08037fd0 	.word	0x08037fd0
 8013780:	20001bb0 	.word	0x20001bb0
 8013784:	0a4cb800 	.word	0x0a4cb800
 8013788:	20001af8 	.word	0x20001af8
 801378c:	08037ff0 	.word	0x08037ff0
 8013790:	20002228 	.word	0x20002228
 8013794:	0803800c 	.word	0x0803800c
 8013798:	08037b44 	.word	0x08037b44

0801379c <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 801379c:	b510      	push	{r4, lr}
 801379e:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 80137a0:	2201      	movs	r2, #1
 80137a2:	f7ff ff0f 	bl	80135c4 <auth>
 80137a6:	b100      	cbz	r0, 80137aa <handler_authanticate+0xe>
}
 80137a8:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 80137aa:	4b04      	ldr	r3, [pc, #16]	@ (80137bc <handler_authanticate+0x20>)
 80137ac:	4a04      	ldr	r2, [pc, #16]	@ (80137c0 <handler_authanticate+0x24>)
 80137ae:	f240 1193 	movw	r1, #403	@ 0x193
 80137b2:	4620      	mov	r0, r4
 80137b4:	f011 fbb2 	bl	8024f1c <mg_http_reply>
}
 80137b8:	e7f6      	b.n	80137a8 <handler_authanticate+0xc>
 80137ba:	bf00      	nop
 80137bc:	0803804c 	.word	0x0803804c
 80137c0:	08037b44 	.word	0x08037b44

080137c4 <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 80137c4:	b510      	push	{r4, lr}
 80137c6:	b090      	sub	sp, #64	@ 0x40
 80137c8:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 80137ca:	a809      	add	r0, sp, #36	@ 0x24
 80137cc:	f008 f914 	bl	801b9f8 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 80137d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137d2:	9306      	str	r3, [sp, #24]
 80137d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137d6:	9305      	str	r3, [sp, #20]
 80137d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80137da:	9304      	str	r3, [sp, #16]
 80137dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137de:	9303      	str	r3, [sp, #12]
 80137e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137e2:	9302      	str	r3, [sp, #8]
 80137e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137e6:	9301      	str	r3, [sp, #4]
 80137e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	4b03      	ldr	r3, [pc, #12]	@ (80137fc <handle_ram_status_get+0x38>)
 80137ee:	4a04      	ldr	r2, [pc, #16]	@ (8013800 <handle_ram_status_get+0x3c>)
 80137f0:	21c8      	movs	r1, #200	@ 0xc8
 80137f2:	4620      	mov	r0, r4
 80137f4:	f011 fb92 	bl	8024f1c <mg_http_reply>
}
 80137f8:	b010      	add	sp, #64	@ 0x40
 80137fa:	bd10      	pop	{r4, pc}
 80137fc:	0803807c 	.word	0x0803807c
 8013800:	08038180 	.word	0x08038180

08013804 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8013804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013806:	b091      	sub	sp, #68	@ 0x44
 8013808:	4606      	mov	r6, r0
 801380a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801380c:	ad0c      	add	r5, sp, #48	@ 0x30
 801380e:	494b      	ldr	r1, [pc, #300]	@ (801393c <handle_io_status_get+0x138>)
 8013810:	4628      	mov	r0, r5
 8013812:	f011 fd0d 	bl	8025230 <mg_str_s>
 8013816:	2300      	movs	r3, #0
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801381e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013822:	f011 ff27 	bl	8025674 <mg_match>
 8013826:	b328      	cbz	r0, 8013874 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8013828:	4c45      	ldr	r4, [pc, #276]	@ (8013940 <handle_io_status_get+0x13c>)
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	2200      	movs	r2, #0
 801382e:	2101      	movs	r1, #1
 8013830:	a80a      	add	r0, sp, #40	@ 0x28
 8013832:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8013834:	6823      	ldr	r3, [r4, #0]
 8013836:	2200      	movs	r2, #0
 8013838:	2102      	movs	r1, #2
 801383a:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 801383e:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8013840:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013844:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013848:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 801384c:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013850:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8013854:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013858:	9505      	str	r5, [sp, #20]
 801385a:	9404      	str	r4, [sp, #16]
 801385c:	9003      	str	r0, [sp, #12]
 801385e:	9102      	str	r1, [sp, #8]
 8013860:	9201      	str	r2, [sp, #4]
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	4b37      	ldr	r3, [pc, #220]	@ (8013944 <handle_io_status_get+0x140>)
 8013866:	4a38      	ldr	r2, [pc, #224]	@ (8013948 <handle_io_status_get+0x144>)
 8013868:	21c8      	movs	r1, #200	@ 0xc8
 801386a:	4630      	mov	r0, r6
 801386c:	f011 fb56 	bl	8024f1c <mg_http_reply>
}
 8013870:	b011      	add	sp, #68	@ 0x44
 8013872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013874:	ad0e      	add	r5, sp, #56	@ 0x38
 8013876:	4935      	ldr	r1, [pc, #212]	@ (801394c <handle_io_status_get+0x148>)
 8013878:	4628      	mov	r0, r5
 801387a:	f011 fcd9 	bl	8025230 <mg_str_s>
 801387e:	2300      	movs	r3, #0
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013886:	e894 0003 	ldmia.w	r4, {r0, r1}
 801388a:	f011 fef3 	bl	8025674 <mg_match>
 801388e:	2800      	cmp	r0, #0
 8013890:	d04b      	beq.n	801392a <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8013892:	ab08      	add	r3, sp, #32
 8013894:	4a2e      	ldr	r2, [pc, #184]	@ (8013950 <handle_io_status_get+0x14c>)
 8013896:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801389a:	c903      	ldmia	r1, {r0, r1}
 801389c:	f010 fc04 	bl	80240a8 <mg_json_get_num>
 80138a0:	2800      	cmp	r0, #0
 80138a2:	d03a      	beq.n	801391a <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 80138a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80138a6:	4a2b      	ldr	r2, [pc, #172]	@ (8013954 <handle_io_status_get+0x150>)
 80138a8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80138ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138b0:	f010 fbfa 	bl	80240a8 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d030      	beq.n	801391a <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 80138b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80138bc:	f7fd f98c 	bl	8010bd8 <__aeabi_d2uiz>
 80138c0:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 80138c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138c6:	f7fd f987 	bl	8010bd8 <__aeabi_d2uiz>
 80138ca:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80138cc:	1e63      	subs	r3, r4, #1
 80138ce:	b2db      	uxtb	r3, r3
 80138d0:	2b02      	cmp	r3, #2
 80138d2:	d801      	bhi.n	80138d8 <handle_io_status_get+0xd4>
 80138d4:	2d01      	cmp	r5, #1
 80138d6:	d907      	bls.n	80138e8 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80138d8:	4b1f      	ldr	r3, [pc, #124]	@ (8013958 <handle_io_status_get+0x154>)
 80138da:	4a1b      	ldr	r2, [pc, #108]	@ (8013948 <handle_io_status_get+0x144>)
 80138dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138e0:	4630      	mov	r0, r6
 80138e2:	f011 fb1b 	bl	8024f1c <mg_http_reply>
 80138e6:	e7c3      	b.n	8013870 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80138e8:	4f15      	ldr	r7, [pc, #84]	@ (8013940 <handle_io_status_get+0x13c>)
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	2200      	movs	r2, #0
 80138ee:	2102      	movs	r1, #2
 80138f0:	a807      	add	r0, sp, #28
 80138f2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80138f4:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80138f8:	446b      	add	r3, sp
 80138fa:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	2201      	movs	r2, #1
 8013902:	2102      	movs	r1, #2
 8013904:	a807      	add	r0, sp, #28
 8013906:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8013908:	9501      	str	r5, [sp, #4]
 801390a:	9400      	str	r4, [sp, #0]
 801390c:	4b13      	ldr	r3, [pc, #76]	@ (801395c <handle_io_status_get+0x158>)
 801390e:	4a0e      	ldr	r2, [pc, #56]	@ (8013948 <handle_io_status_get+0x144>)
 8013910:	21c8      	movs	r1, #200	@ 0xc8
 8013912:	4630      	mov	r0, r6
 8013914:	f011 fb02 	bl	8024f1c <mg_http_reply>
 8013918:	e7aa      	b.n	8013870 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 801391a:	4b11      	ldr	r3, [pc, #68]	@ (8013960 <handle_io_status_get+0x15c>)
 801391c:	4a0a      	ldr	r2, [pc, #40]	@ (8013948 <handle_io_status_get+0x144>)
 801391e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013922:	4630      	mov	r0, r6
 8013924:	f011 fafa 	bl	8024f1c <mg_http_reply>
 8013928:	e7a2      	b.n	8013870 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801392a:	4b0e      	ldr	r3, [pc, #56]	@ (8013964 <handle_io_status_get+0x160>)
 801392c:	4a06      	ldr	r2, [pc, #24]	@ (8013948 <handle_io_status_get+0x144>)
 801392e:	f240 1195 	movw	r1, #405	@ 0x195
 8013932:	4630      	mov	r0, r6
 8013934:	f011 faf2 	bl	8024f1c <mg_http_reply>
}
 8013938:	e79a      	b.n	8013870 <handle_io_status_get+0x6c>
 801393a:	bf00      	nop
 801393c:	08037b08 	.word	0x08037b08
 8013940:	200028c4 	.word	0x200028c4
 8013944:	080381c4 	.word	0x080381c4
 8013948:	08037b44 	.word	0x08037b44
 801394c:	08037c9c 	.word	0x08037c9c
 8013950:	080381f8 	.word	0x080381f8
 8013954:	08038204 	.word	0x08038204
 8013958:	08038244 	.word	0x08038244
 801395c:	0803820c 	.word	0x0803820c
 8013960:	08038280 	.word	0x08038280
 8013964:	080382bc 	.word	0x080382bc

08013968 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013968:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801396a:	fb01 f400 	mul.w	r4, r1, r0
 801396e:	4620      	mov	r0, r4
 8013970:	f007 ff82 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013974:	4605      	mov	r5, r0
 8013976:	b118      	cbz	r0, 8013980 <mg_calloc+0x18>
 8013978:	4622      	mov	r2, r4
 801397a:	2100      	movs	r1, #0
 801397c:	f019 ffc8 	bl	802d910 <memset>
}
 8013980:	4628      	mov	r0, r5
 8013982:	bd38      	pop	{r3, r4, r5, pc}

08013984 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8013984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013986:	b08b      	sub	sp, #44	@ 0x2c
 8013988:	4606      	mov	r6, r0
 801398a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801398c:	ad06      	add	r5, sp, #24
 801398e:	4984      	ldr	r1, [pc, #528]	@ (8013ba0 <handle_mqtt_conf+0x21c>)
 8013990:	4628      	mov	r0, r5
 8013992:	f011 fc4d 	bl	8025230 <mg_str_s>
 8013996:	2300      	movs	r3, #0
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801399e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139a2:	f011 fe67 	bl	8025674 <mg_match>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d03b      	beq.n	8013a22 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80139aa:	21c6      	movs	r1, #198	@ 0xc6
 80139ac:	2001      	movs	r0, #1
 80139ae:	f7ff ffdb 	bl	8013968 <mg_calloc>
		if (mqtt_config == NULL) {
 80139b2:	4605      	mov	r5, r0
 80139b4:	b340      	cbz	r0, 8013a08 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 80139b6:	4b7b      	ldr	r3, [pc, #492]	@ (8013ba4 <handle_mqtt_conf+0x220>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	2200      	movs	r2, #0
 80139bc:	4611      	mov	r1, r2
 80139be:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 80139c0:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 80139c4:	4638      	mov	r0, r7
 80139c6:	f7fc fc6b 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 80139ca:	b2c4      	uxtb	r4, r0
 80139cc:	4622      	mov	r2, r4
 80139ce:	212a      	movs	r1, #42	@ 0x2a
 80139d0:	4638      	mov	r0, r7
 80139d2:	f019 ff9d 	bl	802d910 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 80139d6:	442c      	add	r4, r5
 80139d8:	2300      	movs	r3, #0
 80139da:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80139de:	786b      	ldrb	r3, [r5, #1]
 80139e0:	b1eb      	cbz	r3, 8013a1e <handle_mqtt_conf+0x9a>
 80139e2:	4b71      	ldr	r3, [pc, #452]	@ (8013ba8 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80139e4:	1caa      	adds	r2, r5, #2
 80139e6:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80139ea:	9703      	str	r7, [sp, #12]
 80139ec:	9102      	str	r1, [sp, #8]
 80139ee:	9201      	str	r2, [sp, #4]
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	4b6e      	ldr	r3, [pc, #440]	@ (8013bac <handle_mqtt_conf+0x228>)
 80139f4:	4a6e      	ldr	r2, [pc, #440]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 80139f6:	21c8      	movs	r1, #200	@ 0xc8
 80139f8:	4630      	mov	r0, r6
 80139fa:	f011 fa8f 	bl	8024f1c <mg_http_reply>
		free(mqtt_config);
 80139fe:	4628      	mov	r0, r5
 8013a00:	f007 ffbc 	bl	801b97c <vPortFree>
}
 8013a04:	b00b      	add	sp, #44	@ 0x2c
 8013a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013a08:	4b6a      	ldr	r3, [pc, #424]	@ (8013bb4 <handle_mqtt_conf+0x230>)
 8013a0a:	4a69      	ldr	r2, [pc, #420]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013a0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a10:	4630      	mov	r0, r6
 8013a12:	f011 fa83 	bl	8024f1c <mg_http_reply>
			free(mqtt_config);
 8013a16:	4628      	mov	r0, r5
 8013a18:	f007 ffb0 	bl	801b97c <vPortFree>
			return;
 8013a1c:	e7f2      	b.n	8013a04 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013a1e:	4b66      	ldr	r3, [pc, #408]	@ (8013bb8 <handle_mqtt_conf+0x234>)
 8013a20:	e7e0      	b.n	80139e4 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013a22:	ad08      	add	r5, sp, #32
 8013a24:	4965      	ldr	r1, [pc, #404]	@ (8013bbc <handle_mqtt_conf+0x238>)
 8013a26:	4628      	mov	r0, r5
 8013a28:	f011 fc02 	bl	8025230 <mg_str_s>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a38:	f011 fe1c 	bl	8025674 <mg_match>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	f000 80a7 	beq.w	8013b90 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013a42:	21c6      	movs	r1, #198	@ 0xc6
 8013a44:	2001      	movs	r0, #1
 8013a46:	f7ff ff8f 	bl	8013968 <mg_calloc>
		if (mqtt_config == NULL) {
 8013a4a:	4605      	mov	r5, r0
 8013a4c:	b310      	cbz	r0, 8013a94 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013a4e:	ab05      	add	r3, sp, #20
 8013a50:	4a5b      	ldr	r2, [pc, #364]	@ (8013bc0 <handle_mqtt_conf+0x23c>)
 8013a52:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013a56:	c903      	ldmia	r1, {r0, r1}
 8013a58:	f010 f8bc 	bl	8023bd4 <mg_json_get>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	db24      	blt.n	8013aaa <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013a60:	1c6b      	adds	r3, r5, #1
 8013a62:	4a58      	ldr	r2, [pc, #352]	@ (8013bc4 <handle_mqtt_conf+0x240>)
 8013a64:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013a68:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013a6c:	f010 fb42 	bl	80240f4 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013a70:	4a55      	ldr	r2, [pc, #340]	@ (8013bc8 <handle_mqtt_conf+0x244>)
 8013a72:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013a76:	f012 fccb 	bl	8026410 <mg_json_get_str>
 8013a7a:	4607      	mov	r7, r0
 8013a7c:	b328      	cbz	r0, 8013aca <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013a7e:	f017 f9b3 	bl	802ade8 <is_valid_mqtt_url>
 8013a82:	4603      	mov	r3, r0
 8013a84:	b1e0      	cbz	r0, 8013ac0 <handle_mqtt_conf+0x13c>
					switch (err) {
 8013a86:	3304      	adds	r3, #4
 8013a88:	2b03      	cmp	r3, #3
 8013a8a:	d879      	bhi.n	8013b80 <handle_mqtt_conf+0x1fc>
 8013a8c:	e8df f003 	tbb	[pc, r3]
 8013a90:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013a94:	4b47      	ldr	r3, [pc, #284]	@ (8013bb4 <handle_mqtt_conf+0x230>)
 8013a96:	4a46      	ldr	r2, [pc, #280]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013a98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	f011 fa3d 	bl	8024f1c <mg_http_reply>
			free(mqtt_config);
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	f007 ff6a 	bl	801b97c <vPortFree>
			return;
 8013aa8:	e7ac      	b.n	8013a04 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013aaa:	4b48      	ldr	r3, [pc, #288]	@ (8013bcc <handle_mqtt_conf+0x248>)
 8013aac:	4a40      	ldr	r2, [pc, #256]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013aae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f011 fa32 	bl	8024f1c <mg_http_reply>
		free(mqtt_config);
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f007 ff5f 	bl	801b97c <vPortFree>
 8013abe:	e7a1      	b.n	8013a04 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013ac0:	227f      	movs	r2, #127	@ 0x7f
 8013ac2:	4639      	mov	r1, r7
 8013ac4:	1ca8      	adds	r0, r5, #2
 8013ac6:	f019 ff6a 	bl	802d99e <strncpy>
			free(broker);
 8013aca:	4638      	mov	r0, r7
 8013acc:	f007 ff56 	bl	801b97c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013ad0:	4a3f      	ldr	r2, [pc, #252]	@ (8013bd0 <handle_mqtt_conf+0x24c>)
 8013ad2:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 8013ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ada:	f012 fc99 	bl	8026410 <mg_json_get_str>
 8013ade:	4607      	mov	r7, r0
 8013ae0:	b128      	cbz	r0, 8013aee <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8013ae2:	2220      	movs	r2, #32
 8013ae4:	4601      	mov	r1, r0
 8013ae6:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013aea:	f019 ff58 	bl	802d99e <strncpy>
			free(username);
 8013aee:	4638      	mov	r0, r7
 8013af0:	f007 ff44 	bl	801b97c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8013af4:	4a37      	ldr	r2, [pc, #220]	@ (8013bd4 <handle_mqtt_conf+0x250>)
 8013af6:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013afe:	f012 fc87 	bl	8026410 <mg_json_get_str>
 8013b02:	4604      	mov	r4, r0
 8013b04:	b128      	cbz	r0, 8013b12 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8013b06:	2220      	movs	r2, #32
 8013b08:	4601      	mov	r1, r0
 8013b0a:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8013b0e:	f019 ff46 	bl	802d99e <strncpy>
			free(password);
 8013b12:	4620      	mov	r0, r4
 8013b14:	f007 ff32 	bl	801b97c <vPortFree>
			mqtt_config->save = 1;
 8013b18:	2201      	movs	r2, #1
 8013b1a:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013b1c:	4b21      	ldr	r3, [pc, #132]	@ (8013ba4 <handle_mqtt_conf+0x220>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2100      	movs	r1, #0
 8013b22:	4628      	mov	r0, r5
 8013b24:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013b26:	4b2c      	ldr	r3, [pc, #176]	@ (8013bd8 <handle_mqtt_conf+0x254>)
 8013b28:	4a21      	ldr	r2, [pc, #132]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b2a:	21c8      	movs	r1, #200	@ 0xc8
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	f011 f9f5 	bl	8024f1c <mg_http_reply>
 8013b32:	e7c1      	b.n	8013ab8 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b34:	4b29      	ldr	r3, [pc, #164]	@ (8013bdc <handle_mqtt_conf+0x258>)
 8013b36:	4a1e      	ldr	r2, [pc, #120]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b38:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f011 f9ed 	bl	8024f1c <mg_http_reply>
					free(broker);
 8013b42:	4638      	mov	r0, r7
 8013b44:	f007 ff1a 	bl	801b97c <vPortFree>
					free(mqtt_config);
 8013b48:	4628      	mov	r0, r5
 8013b4a:	f007 ff17 	bl	801b97c <vPortFree>
					return;
 8013b4e:	e759      	b.n	8013a04 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b50:	4b23      	ldr	r3, [pc, #140]	@ (8013be0 <handle_mqtt_conf+0x25c>)
 8013b52:	4a17      	ldr	r2, [pc, #92]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b58:	4630      	mov	r0, r6
 8013b5a:	f011 f9df 	bl	8024f1c <mg_http_reply>
							break;
 8013b5e:	e7f0      	b.n	8013b42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b60:	4b20      	ldr	r3, [pc, #128]	@ (8013be4 <handle_mqtt_conf+0x260>)
 8013b62:	4a13      	ldr	r2, [pc, #76]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b68:	4630      	mov	r0, r6
 8013b6a:	f011 f9d7 	bl	8024f1c <mg_http_reply>
							break;
 8013b6e:	e7e8      	b.n	8013b42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b70:	4b1d      	ldr	r3, [pc, #116]	@ (8013be8 <handle_mqtt_conf+0x264>)
 8013b72:	4a0f      	ldr	r2, [pc, #60]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f011 f9cf 	bl	8024f1c <mg_http_reply>
							break;
 8013b7e:	e7e0      	b.n	8013b42 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b80:	4b1a      	ldr	r3, [pc, #104]	@ (8013bec <handle_mqtt_conf+0x268>)
 8013b82:	4a0b      	ldr	r2, [pc, #44]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b88:	4630      	mov	r0, r6
 8013b8a:	f011 f9c7 	bl	8024f1c <mg_http_reply>
							break;
 8013b8e:	e7d8      	b.n	8013b42 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013b90:	4b17      	ldr	r3, [pc, #92]	@ (8013bf0 <handle_mqtt_conf+0x26c>)
 8013b92:	4a07      	ldr	r2, [pc, #28]	@ (8013bb0 <handle_mqtt_conf+0x22c>)
 8013b94:	f240 1195 	movw	r1, #405	@ 0x195
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f011 f9bf 	bl	8024f1c <mg_http_reply>
 8013b9e:	e731      	b.n	8013a04 <handle_mqtt_conf+0x80>
 8013ba0:	08037b08 	.word	0x08037b08
 8013ba4:	200028c4 	.word	0x200028c4
 8013ba8:	08038310 	.word	0x08038310
 8013bac:	0803835c 	.word	0x0803835c
 8013bb0:	08037b44 	.word	0x08037b44
 8013bb4:	08038320 	.word	0x08038320
 8013bb8:	08038318 	.word	0x08038318
 8013bbc:	08037c9c 	.word	0x08037c9c
 8013bc0:	080383a4 	.word	0x080383a4
 8013bc4:	080383d8 	.word	0x080383d8
 8013bc8:	080383e4 	.word	0x080383e4
 8013bcc:	080383a8 	.word	0x080383a8
 8013bd0:	0803852c 	.word	0x0803852c
 8013bd4:	08038538 	.word	0x08038538
 8013bd8:	08038544 	.word	0x08038544
 8013bdc:	080383f0 	.word	0x080383f0
 8013be0:	08038434 	.word	0x08038434
 8013be4:	08038480 	.word	0x08038480
 8013be8:	080384c0 	.word	0x080384c0
 8013bec:	080384f8 	.word	0x080384f8
 8013bf0:	080382bc 	.word	0x080382bc

08013bf4 <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	b08a      	sub	sp, #40	@ 0x28
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013bfc:	ad04      	add	r5, sp, #16
 8013bfe:	495e      	ldr	r1, [pc, #376]	@ (8013d78 <handle_mb_tcp_access_list+0x184>)
 8013c00:	4628      	mov	r0, r5
 8013c02:	f011 fb15 	bl	8025230 <mg_str_s>
 8013c06:	2300      	movs	r3, #0
 8013c08:	9300      	str	r3, [sp, #0]
 8013c0a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c12:	f011 fd2f 	bl	8025674 <mg_match>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d03d      	beq.n	8013c96 <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013c1e:	a903      	add	r1, sp, #12
 8013c20:	4856      	ldr	r0, [pc, #344]	@ (8013d7c <handle_mb_tcp_access_list+0x188>)
 8013c22:	f007 ff91 	bl	801bb48 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8013c26:	9803      	ldr	r0, [sp, #12]
 8013c28:	1e42      	subs	r2, r0, #1
 8013c2a:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d829      	bhi.n	8013c86 <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 8013c32:	2101      	movs	r1, #1
 8013c34:	4408      	add	r0, r1
 8013c36:	f7ff fe97 	bl	8013968 <mg_calloc>
			if (acl == NULL){
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	b1b8      	cbz	r0, 8013c6e <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8013c3e:	2101      	movs	r1, #1
 8013c40:	484e      	ldr	r0, [pc, #312]	@ (8013d7c <handle_mb_tcp_access_list+0x188>)
 8013c42:	f007 ffbf 	bl	801bbc4 <mg_fs_lfs_open>
 8013c46:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013c48:	9a03      	ldr	r2, [sp, #12]
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	f007 ffea 	bl	801bc24 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013c50:	4628      	mov	r0, r5
 8013c52:	f007 ffdb 	bl	801bc0c <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 8013c56:	9400      	str	r4, [sp, #0]
 8013c58:	4b49      	ldr	r3, [pc, #292]	@ (8013d80 <handle_mb_tcp_access_list+0x18c>)
 8013c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013c5c:	21c8      	movs	r1, #200	@ 0xc8
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f011 f95c 	bl	8024f1c <mg_http_reply>
	        free(acl);
 8013c64:	4620      	mov	r0, r4
 8013c66:	f007 fe89 	bl	801b97c <vPortFree>
}
 8013c6a:	b00a      	add	sp, #40	@ 0x28
 8013c6c:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013c6e:	4946      	ldr	r1, [pc, #280]	@ (8013d88 <handle_mb_tcp_access_list+0x194>)
 8013c70:	2003      	movs	r0, #3
 8013c72:	f7fe fb2d 	bl	80122d0 <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013c76:	4b45      	ldr	r3, [pc, #276]	@ (8013d8c <handle_mb_tcp_access_list+0x198>)
 8013c78:	4a42      	ldr	r2, [pc, #264]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013c7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f011 f94c 	bl	8024f1c <mg_http_reply>
		        return;
 8013c84:	e7f1      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 8013c86:	4b42      	ldr	r3, [pc, #264]	@ (8013d90 <handle_mb_tcp_access_list+0x19c>)
 8013c88:	4a3e      	ldr	r2, [pc, #248]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013c8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f011 f944 	bl	8024f1c <mg_http_reply>
	        return;
 8013c94:	e7e9      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013c96:	ad06      	add	r5, sp, #24
 8013c98:	493e      	ldr	r1, [pc, #248]	@ (8013d94 <handle_mb_tcp_access_list+0x1a0>)
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f011 fac8 	bl	8025230 <mg_str_s>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013cac:	f011 fce2 	bl	8025674 <mg_match>
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	d058      	beq.n	8013d66 <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 8013cb4:	ab03      	add	r3, sp, #12
 8013cb6:	4a38      	ldr	r2, [pc, #224]	@ (8013d98 <handle_mb_tcp_access_list+0x1a4>)
 8013cb8:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013cbc:	c903      	ldmia	r1, {r0, r1}
 8013cbe:	f00f ff89 	bl	8023bd4 <mg_json_get>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	db34      	blt.n	8013d30 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 8013cc6:	4a35      	ldr	r2, [pc, #212]	@ (8013d9c <handle_mb_tcp_access_list+0x1a8>)
 8013cc8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013ccc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013cd0:	f012 fb9e 	bl	8026410 <mg_json_get_str>
		if (acl){
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d03d      	beq.n	8013d56 <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013cda:	ad08      	add	r5, sp, #32
 8013cdc:	4601      	mov	r1, r0
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f011 faa6 	bl	8025230 <mg_str_s>
 8013ce4:	f106 021c 	add.w	r2, r6, #28
 8013ce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013cec:	f013 f9ae 	bl	802704c <mg_check_ip_acl>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	db25      	blt.n	8013d40 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 8013cf4:	4d21      	ldr	r5, [pc, #132]	@ (8013d7c <handle_mb_tcp_access_list+0x188>)
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f007 ffd2 	bl	801bca0 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8013cfc:	2102      	movs	r1, #2
 8013cfe:	4628      	mov	r0, r5
 8013d00:	f007 ff60 	bl	801bbc4 <mg_fs_lfs_open>
 8013d04:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 8013d06:	4620      	mov	r0, r4
 8013d08:	f7fc faca 	bl	80102a0 <strlen>
 8013d0c:	1c42      	adds	r2, r0, #1
 8013d0e:	4621      	mov	r1, r4
 8013d10:	4628      	mov	r0, r5
 8013d12:	f007 ff93 	bl	801bc3c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 8013d16:	4628      	mov	r0, r5
 8013d18:	f007 ff78 	bl	801bc0c <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013d1c:	4b20      	ldr	r3, [pc, #128]	@ (8013da0 <handle_mb_tcp_access_list+0x1ac>)
 8013d1e:	4a19      	ldr	r2, [pc, #100]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013d20:	21c8      	movs	r1, #200	@ 0xc8
 8013d22:	4630      	mov	r0, r6
 8013d24:	f011 f8fa 	bl	8024f1c <mg_http_reply>
				free(acl);
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f007 fe27 	bl	801b97c <vPortFree>
				return;
 8013d2e:	e79c      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013d30:	4b1c      	ldr	r3, [pc, #112]	@ (8013da4 <handle_mb_tcp_access_list+0x1b0>)
 8013d32:	4a14      	ldr	r2, [pc, #80]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013d34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d38:	4630      	mov	r0, r6
 8013d3a:	f011 f8ef 	bl	8024f1c <mg_http_reply>
			return;
 8013d3e:	e794      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013d40:	4b19      	ldr	r3, [pc, #100]	@ (8013da8 <handle_mb_tcp_access_list+0x1b4>)
 8013d42:	4a10      	ldr	r2, [pc, #64]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013d44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f011 f8e7 	bl	8024f1c <mg_http_reply>
				free(acl);
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f007 fe14 	bl	801b97c <vPortFree>
				return;
 8013d54:	e789      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013d56:	4b15      	ldr	r3, [pc, #84]	@ (8013dac <handle_mb_tcp_access_list+0x1b8>)
 8013d58:	4a0a      	ldr	r2, [pc, #40]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013d5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d5e:	4630      	mov	r0, r6
 8013d60:	f011 f8dc 	bl	8024f1c <mg_http_reply>
			return;
 8013d64:	e781      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013d66:	4b12      	ldr	r3, [pc, #72]	@ (8013db0 <handle_mb_tcp_access_list+0x1bc>)
 8013d68:	4a06      	ldr	r2, [pc, #24]	@ (8013d84 <handle_mb_tcp_access_list+0x190>)
 8013d6a:	f240 1195 	movw	r1, #405	@ 0x195
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f011 f8d4 	bl	8024f1c <mg_http_reply>
		return;
 8013d74:	e779      	b.n	8013c6a <handle_mb_tcp_access_list+0x76>
 8013d76:	bf00      	nop
 8013d78:	08037b08 	.word	0x08037b08
 8013d7c:	08037a48 	.word	0x08037a48
 8013d80:	080385dc 	.word	0x080385dc
 8013d84:	08037b44 	.word	0x08037b44
 8013d88:	08038580 	.word	0x08038580
 8013d8c:	080385b4 	.word	0x080385b4
 8013d90:	08038608 	.word	0x08038608
 8013d94:	08037c9c 	.word	0x08037c9c
 8013d98:	080383a4 	.word	0x080383a4
 8013d9c:	0803863c 	.word	0x0803863c
 8013da0:	08038684 	.word	0x08038684
 8013da4:	080383a8 	.word	0x080383a8
 8013da8:	0803864c 	.word	0x0803864c
 8013dac:	080386d8 	.word	0x080386d8
 8013db0:	08038720 	.word	0x08038720

08013db4 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db8:	b0c7      	sub	sp, #284	@ 0x11c
 8013dba:	4681      	mov	r9, r0
 8013dbc:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013dbe:	2272      	movs	r2, #114	@ 0x72
 8013dc0:	498e      	ldr	r1, [pc, #568]	@ (8013ffc <handle_dev_status+0x248>)
 8013dc2:	a827      	add	r0, sp, #156	@ 0x9c
 8013dc4:	f01b fb0a 	bl	802f3dc <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013dc8:	2101      	movs	r1, #1
 8013dca:	201e      	movs	r0, #30
 8013dcc:	f7ff fdcc 	bl	8013968 <mg_calloc>
 8013dd0:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013dd2:	2101      	movs	r1, #1
 8013dd4:	202e      	movs	r0, #46	@ 0x2e
 8013dd6:	f7ff fdc7 	bl	8013968 <mg_calloc>
 8013dda:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013ddc:	2101      	movs	r1, #1
 8013dde:	202e      	movs	r0, #46	@ 0x2e
 8013de0:	f7ff fdc2 	bl	8013968 <mg_calloc>
 8013de4:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013de6:	2101      	movs	r1, #1
 8013de8:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013dec:	f7ff fdbc 	bl	8013968 <mg_calloc>
 8013df0:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013df2:	2101      	movs	r1, #1
 8013df4:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013df8:	f7ff fdb6 	bl	8013968 <mg_calloc>
 8013dfc:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013dfe:	2e00      	cmp	r6, #0
 8013e00:	f000 80e3 	beq.w	8013fca <handle_dev_status+0x216>
 8013e04:	2f00      	cmp	r7, #0
 8013e06:	f000 80e0 	beq.w	8013fca <handle_dev_status+0x216>
 8013e0a:	f1b8 0f00 	cmp.w	r8, #0
 8013e0e:	f000 80dc 	beq.w	8013fca <handle_dev_status+0x216>
 8013e12:	2c00      	cmp	r4, #0
 8013e14:	f000 80d9 	beq.w	8013fca <handle_dev_status+0x216>
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	f000 80d6 	beq.w	8013fca <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013e1e:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013e22:	4977      	ldr	r1, [pc, #476]	@ (8014000 <handle_dev_status+0x24c>)
 8013e24:	4658      	mov	r0, fp
 8013e26:	f011 fa03 	bl	8025230 <mg_str_s>
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013e32:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013e36:	f011 fc1d 	bl	8025674 <mg_match>
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	f000 80bd 	beq.w	8013fba <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013e40:	f001 fbba 	bl	80155b8 <get_mqtt_connection>
			if(!mqtt_connection){
 8013e44:	4682      	mov	sl, r0
 8013e46:	b358      	cbz	r0, 8013ea0 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013e48:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013e4c:	f013 0f20 	tst.w	r3, #32
 8013e50:	d12c      	bne.n	8013eac <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013e52:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013e56:	f013 0f20 	tst.w	r3, #32
 8013e5a:	d02d      	beq.n	8013eb8 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013e5c:	221e      	movs	r2, #30
 8013e5e:	4969      	ldr	r1, [pc, #420]	@ (8014004 <handle_dev_status+0x250>)
 8013e60:	4630      	mov	r0, r6
 8013e62:	f019 fd9c 	bl	802d99e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013e66:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 801402c <handle_dev_status+0x278>
 8013e6a:	f10a 0308 	add.w	r3, sl, #8
 8013e6e:	9300      	str	r3, [sp, #0]
 8013e70:	465b      	mov	r3, fp
 8013e72:	4a65      	ldr	r2, [pc, #404]	@ (8014008 <handle_dev_status+0x254>)
 8013e74:	212e      	movs	r1, #46	@ 0x2e
 8013e76:	4640      	mov	r0, r8
 8013e78:	f010 fb52 	bl	8024520 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013e7c:	f10a 031c 	add.w	r3, sl, #28
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	465b      	mov	r3, fp
 8013e84:	4a60      	ldr	r2, [pc, #384]	@ (8014008 <handle_dev_status+0x254>)
 8013e86:	212e      	movs	r1, #46	@ 0x2e
 8013e88:	4638      	mov	r0, r7
 8013e8a:	f010 fb49 	bl	8024520 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f7fc fa06 	bl	80102a0 <strlen>
 8013e94:	4b5d      	ldr	r3, [pc, #372]	@ (801400c <handle_dev_status+0x258>)
 8013e96:	881b      	ldrh	r3, [r3, #0]
 8013e98:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013e9a:	f04f 0a01 	mov.w	sl, #1
 8013e9e:	e028      	b.n	8013ef2 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013ea0:	221e      	movs	r2, #30
 8013ea2:	495b      	ldr	r1, [pc, #364]	@ (8014010 <handle_dev_status+0x25c>)
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f019 fd7a 	bl	802d99e <strncpy>
 8013eaa:	e7f0      	b.n	8013e8e <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013eac:	221e      	movs	r2, #30
 8013eae:	4959      	ldr	r1, [pc, #356]	@ (8014014 <handle_dev_status+0x260>)
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f019 fd74 	bl	802d99e <strncpy>
 8013eb6:	e7d6      	b.n	8013e66 <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013eb8:	221e      	movs	r2, #30
 8013eba:	4957      	ldr	r1, [pc, #348]	@ (8014018 <handle_dev_status+0x264>)
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f019 fd6e 	bl	802d99e <strncpy>
 8013ec2:	e7d0      	b.n	8013e66 <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013ec4:	fa5f f38a 	uxtb.w	r3, sl
 8013ec8:	2201      	movs	r2, #1
 8013eca:	2180      	movs	r1, #128	@ 0x80
 8013ecc:	a807      	add	r0, sp, #28
 8013ece:	f001 ff63 	bl	8015d98 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013ed2:	a907      	add	r1, sp, #28
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f019 fd23 	bl	802d920 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7fc f9e0 	bl	80102a0 <strlen>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	1821      	adds	r1, r4, r0
 8013ee4:	4a4d      	ldr	r2, [pc, #308]	@ (801401c <handle_dev_status+0x268>)
 8013ee6:	6810      	ldr	r0, [r2, #0]
 8013ee8:	50e0      	str	r0, [r4, r3]
 8013eea:	7913      	ldrb	r3, [r2, #4]
 8013eec:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013eee:	f10a 0a01 	add.w	sl, sl, #1
 8013ef2:	f1ba 0f03 	cmp.w	sl, #3
 8013ef6:	dde5      	ble.n	8013ec4 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013ef8:	f04f 0a01 	mov.w	sl, #1
 8013efc:	e007      	b.n	8013f0e <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013efe:	4620      	mov	r0, r4
 8013f00:	f7fc f9ce 	bl	80102a0 <strlen>
 8013f04:	4b41      	ldr	r3, [pc, #260]	@ (801400c <handle_dev_status+0x258>)
 8013f06:	881b      	ldrh	r3, [r3, #0]
 8013f08:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013f0a:	f10a 0a01 	add.w	sl, sl, #1
 8013f0e:	f1ba 0f03 	cmp.w	sl, #3
 8013f12:	dc18      	bgt.n	8013f46 <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013f14:	fa5f f38a 	uxtb.w	r3, sl
 8013f18:	2202      	movs	r2, #2
 8013f1a:	2180      	movs	r1, #128	@ 0x80
 8013f1c:	a807      	add	r0, sp, #28
 8013f1e:	f001 ff3b 	bl	8015d98 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013f22:	a907      	add	r1, sp, #28
 8013f24:	4620      	mov	r0, r4
 8013f26:	f019 fcfb 	bl	802d920 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013f2a:	f1ba 0f02 	cmp.w	sl, #2
 8013f2e:	dce6      	bgt.n	8013efe <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013f30:	4620      	mov	r0, r4
 8013f32:	f7fc f9b5 	bl	80102a0 <strlen>
 8013f36:	4603      	mov	r3, r0
 8013f38:	1821      	adds	r1, r4, r0
 8013f3a:	4a38      	ldr	r2, [pc, #224]	@ (801401c <handle_dev_status+0x268>)
 8013f3c:	6810      	ldr	r0, [r2, #0]
 8013f3e:	50e0      	str	r0, [r4, r3]
 8013f40:	7913      	ldrb	r3, [r2, #4]
 8013f42:	710b      	strb	r3, [r1, #4]
 8013f44:	e7e1      	b.n	8013f0a <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013f46:	4628      	mov	r0, r5
 8013f48:	f7fc f9aa 	bl	80102a0 <strlen>
 8013f4c:	4b2f      	ldr	r3, [pc, #188]	@ (801400c <handle_dev_status+0x258>)
 8013f4e:	881b      	ldrh	r3, [r3, #0]
 8013f50:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013f52:	f04f 0a01 	mov.w	sl, #1
 8013f56:	e007      	b.n	8013f68 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f7fc f9a1 	bl	80102a0 <strlen>
 8013f5e:	4b2b      	ldr	r3, [pc, #172]	@ (801400c <handle_dev_status+0x258>)
 8013f60:	881b      	ldrh	r3, [r3, #0]
 8013f62:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013f64:	f10a 0a01 	add.w	sl, sl, #1
 8013f68:	f1ba 0f03 	cmp.w	sl, #3
 8013f6c:	dc18      	bgt.n	8013fa0 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013f6e:	fa5f f38a 	uxtb.w	r3, sl
 8013f72:	2202      	movs	r2, #2
 8013f74:	2180      	movs	r1, #128	@ 0x80
 8013f76:	a807      	add	r0, sp, #28
 8013f78:	f001 fef6 	bl	8015d68 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013f7c:	a907      	add	r1, sp, #28
 8013f7e:	4628      	mov	r0, r5
 8013f80:	f019 fcce 	bl	802d920 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013f84:	f1ba 0f02 	cmp.w	sl, #2
 8013f88:	dce6      	bgt.n	8013f58 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f7fc f988 	bl	80102a0 <strlen>
 8013f90:	4603      	mov	r3, r0
 8013f92:	1829      	adds	r1, r5, r0
 8013f94:	4a21      	ldr	r2, [pc, #132]	@ (801401c <handle_dev_status+0x268>)
 8013f96:	6810      	ldr	r0, [r2, #0]
 8013f98:	50e8      	str	r0, [r5, r3]
 8013f9a:	7913      	ldrb	r3, [r2, #4]
 8013f9c:	710b      	strb	r3, [r1, #4]
 8013f9e:	e7e1      	b.n	8013f64 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013fa0:	9504      	str	r5, [sp, #16]
 8013fa2:	9403      	str	r4, [sp, #12]
 8013fa4:	9702      	str	r7, [sp, #8]
 8013fa6:	f8cd 8004 	str.w	r8, [sp, #4]
 8013faa:	9600      	str	r6, [sp, #0]
 8013fac:	ab27      	add	r3, sp, #156	@ 0x9c
 8013fae:	4a1c      	ldr	r2, [pc, #112]	@ (8014020 <handle_dev_status+0x26c>)
 8013fb0:	21c8      	movs	r1, #200	@ 0xc8
 8013fb2:	4648      	mov	r0, r9
 8013fb4:	f010 ffb2 	bl	8024f1c <mg_http_reply>
 8013fb8:	e00e      	b.n	8013fd8 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013fba:	4b1a      	ldr	r3, [pc, #104]	@ (8014024 <handle_dev_status+0x270>)
 8013fbc:	4a18      	ldr	r2, [pc, #96]	@ (8014020 <handle_dev_status+0x26c>)
 8013fbe:	f240 1195 	movw	r1, #405	@ 0x195
 8013fc2:	4648      	mov	r0, r9
 8013fc4:	f010 ffaa 	bl	8024f1c <mg_http_reply>
 8013fc8:	e006      	b.n	8013fd8 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013fca:	4b17      	ldr	r3, [pc, #92]	@ (8014028 <handle_dev_status+0x274>)
 8013fcc:	4a14      	ldr	r2, [pc, #80]	@ (8014020 <handle_dev_status+0x26c>)
 8013fce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013fd2:	4648      	mov	r0, r9
 8013fd4:	f010 ffa2 	bl	8024f1c <mg_http_reply>
	free(mqtt_status_str);
 8013fd8:	4630      	mov	r0, r6
 8013fda:	f007 fccf 	bl	801b97c <vPortFree>
	free(mqtt_server_addr);
 8013fde:	4638      	mov	r0, r7
 8013fe0:	f007 fccc 	bl	801b97c <vPortFree>
	free(mqtt_local_addr);
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	f007 fcc9 	bl	801b97c <vPortFree>
	free(pub_topics_str);
 8013fea:	4620      	mov	r0, r4
 8013fec:	f007 fcc6 	bl	801b97c <vPortFree>
	free(subscr_topics_str);
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	f007 fcc3 	bl	801b97c <vPortFree>
}
 8013ff6:	b047      	add	sp, #284	@ 0x11c
 8013ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ffc:	080387e0 	.word	0x080387e0
 8014000:	08037b08 	.word	0x08037b08
 8014004:	08038780 	.word	0x08038780
 8014008:	08038794 	.word	0x08038794
 801400c:	08038798 	.word	0x08038798
 8014010:	0803c5fc 	.word	0x0803c5fc
 8014014:	08038774 	.word	0x08038774
 8014018:	08038788 	.word	0x08038788
 801401c:	0803879c 	.word	0x0803879c
 8014020:	08037b44 	.word	0x08037b44
 8014024:	080382bc 	.word	0x080382bc
 8014028:	080387a4 	.word	0x080387a4
 801402c:	08026fcd 	.word	0x08026fcd

08014030 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8014030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014032:	b08d      	sub	sp, #52	@ 0x34
 8014034:	4607      	mov	r7, r0
 8014036:	460c      	mov	r4, r1
 8014038:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801403a:	ae08      	add	r6, sp, #32
 801403c:	4923      	ldr	r1, [pc, #140]	@ (80140cc <handle_fs_get_log+0x9c>)
 801403e:	4630      	mov	r0, r6
 8014040:	f011 f8f6 	bl	8025230 <mg_str_s>
 8014044:	2300      	movs	r3, #0
 8014046:	9300      	str	r3, [sp, #0]
 8014048:	e896 000c 	ldmia.w	r6, {r2, r3}
 801404c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014050:	f011 fb10 	bl	8025674 <mg_match>
 8014054:	b318      	cbz	r0, 801409e <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8014056:	2300      	movs	r3, #0
 8014058:	9302      	str	r3, [sp, #8]
 801405a:	9303      	str	r3, [sp, #12]
 801405c:	9304      	str	r3, [sp, #16]
 801405e:	9305      	str	r3, [sp, #20]
 8014060:	9306      	str	r3, [sp, #24]
 8014062:	9307      	str	r3, [sp, #28]
 8014064:	4b1a      	ldr	r3, [pc, #104]	@ (80140d0 <handle_fs_get_log+0xa0>)
 8014066:	9302      	str	r3, [sp, #8]
 8014068:	4b1a      	ldr	r3, [pc, #104]	@ (80140d4 <handle_fs_get_log+0xa4>)
 801406a:	9307      	str	r3, [sp, #28]
		switch (number) {
 801406c:	b145      	cbz	r5, 8014080 <handle_fs_get_log+0x50>
 801406e:	2d01      	cmp	r5, #1
 8014070:	d00e      	beq.n	8014090 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8014072:	ab02      	add	r3, sp, #8
 8014074:	4a18      	ldr	r2, [pc, #96]	@ (80140d8 <handle_fs_get_log+0xa8>)
 8014076:	4621      	mov	r1, r4
 8014078:	4638      	mov	r0, r7
 801407a:	f011 fcb7 	bl	80259ec <mg_http_serve_file>
				break;
 801407e:	e005      	b.n	801408c <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8014080:	ab02      	add	r3, sp, #8
 8014082:	4a15      	ldr	r2, [pc, #84]	@ (80140d8 <handle_fs_get_log+0xa8>)
 8014084:	4621      	mov	r1, r4
 8014086:	4638      	mov	r0, r7
 8014088:	f011 fcb0 	bl	80259ec <mg_http_serve_file>
}
 801408c:	b00d      	add	sp, #52	@ 0x34
 801408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8014090:	ab02      	add	r3, sp, #8
 8014092:	4a12      	ldr	r2, [pc, #72]	@ (80140dc <handle_fs_get_log+0xac>)
 8014094:	4621      	mov	r1, r4
 8014096:	4638      	mov	r0, r7
 8014098:	f011 fca8 	bl	80259ec <mg_http_serve_file>
				break;
 801409c:	e7f6      	b.n	801408c <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801409e:	ad0a      	add	r5, sp, #40	@ 0x28
 80140a0:	490f      	ldr	r1, [pc, #60]	@ (80140e0 <handle_fs_get_log+0xb0>)
 80140a2:	4628      	mov	r0, r5
 80140a4:	f011 f8c4 	bl	8025230 <mg_str_s>
 80140a8:	2300      	movs	r3, #0
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	e895 000c 	ldmia.w	r5, {r2, r3}
 80140b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80140b4:	f011 fade 	bl	8025674 <mg_match>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d1e7      	bne.n	801408c <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80140bc:	4b09      	ldr	r3, [pc, #36]	@ (80140e4 <handle_fs_get_log+0xb4>)
 80140be:	4a0a      	ldr	r2, [pc, #40]	@ (80140e8 <handle_fs_get_log+0xb8>)
 80140c0:	f240 1195 	movw	r1, #405	@ 0x195
 80140c4:	4638      	mov	r0, r7
 80140c6:	f010 ff29 	bl	8024f1c <mg_http_reply>
}
 80140ca:	e7df      	b.n	801408c <handle_fs_get_log+0x5c>
 80140cc:	08037b08 	.word	0x08037b08
 80140d0:	08038f98 	.word	0x08038f98
 80140d4:	200000a0 	.word	0x200000a0
 80140d8:	08037594 	.word	0x08037594
 80140dc:	080375a4 	.word	0x080375a4
 80140e0:	08037c9c 	.word	0x08037c9c
 80140e4:	08038854 	.word	0x08038854
 80140e8:	08037b44 	.word	0x08037b44

080140ec <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 80140ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ee:	4604      	mov	r4, r0
 80140f0:	460d      	mov	r5, r1
 80140f2:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 80140f4:	4f0b      	ldr	r7, [pc, #44]	@ (8014124 <write_users+0x38>)
 80140f6:	6a3b      	ldr	r3, [r7, #32]
 80140f8:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 80140fa:	2202      	movs	r2, #2
 80140fc:	4621      	mov	r1, r4
 80140fe:	4638      	mov	r0, r7
 8014100:	f00f fc7e 	bl	8023a00 <mg_fs_open>
 8014104:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	22a9      	movs	r2, #169	@ 0xa9
 801410a:	fb06 f202 	mul.w	r2, r6, r2
 801410e:	4629      	mov	r1, r5
 8014110:	6800      	ldr	r0, [r0, #0]
 8014112:	4798      	blx	r3
	mg_fs_close(fd);
 8014114:	4620      	mov	r0, r4
 8014116:	f00f fc8c 	bl	8023a32 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 801411a:	4903      	ldr	r1, [pc, #12]	@ (8014128 <write_users+0x3c>)
 801411c:	2001      	movs	r0, #1
 801411e:	f7fe f8d7 	bl	80122d0 <logging>
}
 8014122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014124:	200000a0 	.word	0x200000a0
 8014128:	080388ac 	.word	0x080388ac

0801412c <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 801412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014130:	b0ae      	sub	sp, #184	@ 0xb8
 8014132:	4606      	mov	r6, r0
 8014134:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014136:	ad26      	add	r5, sp, #152	@ 0x98
 8014138:	49a8      	ldr	r1, [pc, #672]	@ (80143dc <handle_manage_user+0x2b0>)
 801413a:	4628      	mov	r0, r5
 801413c:	f011 f878 	bl	8025230 <mg_str_s>
 8014140:	2300      	movs	r3, #0
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014148:	e894 0003 	ldmia.w	r4, {r0, r1}
 801414c:	f011 fa92 	bl	8025674 <mg_match>
 8014150:	2800      	cmp	r0, #0
 8014152:	d143      	bne.n	80141dc <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014154:	ad28      	add	r5, sp, #160	@ 0xa0
 8014156:	49a2      	ldr	r1, [pc, #648]	@ (80143e0 <handle_manage_user+0x2b4>)
 8014158:	4628      	mov	r0, r5
 801415a:	f011 f869 	bl	8025230 <mg_str_s>
 801415e:	2300      	movs	r3, #0
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014166:	e894 0003 	ldmia.w	r4, {r0, r1}
 801416a:	f011 fa83 	bl	8025674 <mg_match>
 801416e:	2800      	cmp	r0, #0
 8014170:	f000 80fd 	beq.w	801436e <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8014174:	ab03      	add	r3, sp, #12
 8014176:	4a9b      	ldr	r2, [pc, #620]	@ (80143e4 <handle_manage_user+0x2b8>)
 8014178:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801417c:	c903      	ldmia	r1, {r0, r1}
 801417e:	f00f fd29 	bl	8023bd4 <mg_json_get>
 8014182:	2800      	cmp	r0, #0
 8014184:	f2c0 8089 	blt.w	801429a <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8014188:	4a97      	ldr	r2, [pc, #604]	@ (80143e8 <handle_manage_user+0x2bc>)
 801418a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801418e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014192:	f012 f93d 	bl	8026410 <mg_json_get_str>
 8014196:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8014198:	4a94      	ldr	r2, [pc, #592]	@ (80143ec <handle_manage_user+0x2c0>)
 801419a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801419e:	f012 f937 	bl	8026410 <mg_json_get_str>
 80141a2:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80141a4:	2d00      	cmp	r5, #0
 80141a6:	f000 80d4 	beq.w	8014352 <handle_manage_user+0x226>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	f000 80d1 	beq.w	8014352 <handle_manage_user+0x226>
 80141b0:	782b      	ldrb	r3, [r5, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f000 80cd 	beq.w	8014352 <handle_manage_user+0x226>
 80141b8:	7803      	ldrb	r3, [r0, #0]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	f000 80c9 	beq.w	8014352 <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 80141c0:	2400      	movs	r4, #0
 80141c2:	2c09      	cmp	r4, #9
 80141c4:	dc7f      	bgt.n	80142c6 <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 80141c6:	4629      	mov	r1, r5
 80141c8:	20a9      	movs	r0, #169	@ 0xa9
 80141ca:	4b89      	ldr	r3, [pc, #548]	@ (80143f0 <handle_manage_user+0x2c4>)
 80141cc:	fb00 3004 	mla	r0, r0, r4, r3
 80141d0:	f7fc f806 	bl	80101e0 <strcmp>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d068      	beq.n	80142aa <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 80141d8:	3401      	adds	r4, #1
 80141da:	e7f2      	b.n	80141c2 <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 80141dc:	2101      	movs	r1, #1
 80141de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80141e2:	f7ff fbc1 	bl	8013968 <mg_calloc>
 80141e6:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 80141e8:	2101      	movs	r1, #1
 80141ea:	20a0      	movs	r0, #160	@ 0xa0
 80141ec:	f7ff fbbc 	bl	8013968 <mg_calloc>
 80141f0:	4680      	mov	r8, r0
	    if (response && user_entry) {
 80141f2:	2f00      	cmp	r7, #0
 80141f4:	d03d      	beq.n	8014272 <handle_manage_user+0x146>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d03b      	beq.n	8014272 <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 80141fa:	4b7e      	ldr	r3, [pc, #504]	@ (80143f4 <handle_manage_user+0x2c8>)
 80141fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80141fe:	6038      	str	r0, [r7, #0]
 8014200:	6079      	str	r1, [r7, #4]
 8014202:	60ba      	str	r2, [r7, #8]
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	733b      	strb	r3, [r7, #12]
 8014208:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 801420a:	2400      	movs	r4, #0
 801420c:	e008      	b.n	8014220 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 801420e:	4643      	mov	r3, r8
 8014210:	4a79      	ldr	r2, [pc, #484]	@ (80143f8 <handle_manage_user+0x2cc>)
 8014212:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8014216:	1978      	adds	r0, r7, r5
 8014218:	f018 fe50 	bl	802cebc <snprintf>
 801421c:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 801421e:	3401      	adds	r4, #1
 8014220:	2c09      	cmp	r4, #9
 8014222:	dc18      	bgt.n	8014256 <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8014224:	22a9      	movs	r2, #169	@ 0xa9
 8014226:	fb04 f202 	mul.w	r2, r4, r2
 801422a:	4b71      	ldr	r3, [pc, #452]	@ (80143f0 <handle_manage_user+0x2c4>)
 801422c:	5c9a      	ldrb	r2, [r3, r2]
 801422e:	2a00      	cmp	r2, #0
 8014230:	d0f5      	beq.n	801421e <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8014232:	22a9      	movs	r2, #169	@ 0xa9
 8014234:	fb02 3304 	mla	r3, r2, r4, r3
 8014238:	4a70      	ldr	r2, [pc, #448]	@ (80143fc <handle_manage_user+0x2d0>)
 801423a:	21a0      	movs	r1, #160	@ 0xa0
 801423c:	4640      	mov	r0, r8
 801423e:	f018 fe3d 	bl	802cebc <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8014242:	2d0c      	cmp	r5, #12
 8014244:	d9e3      	bls.n	801420e <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8014246:	4a6e      	ldr	r2, [pc, #440]	@ (8014400 <handle_manage_user+0x2d4>)
 8014248:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801424c:	1978      	adds	r0, r7, r5
 801424e:	f018 fe35 	bl	802cebc <snprintf>
 8014252:	4405      	add	r5, r0
 8014254:	e7db      	b.n	801420e <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8014256:	4a6b      	ldr	r2, [pc, #428]	@ (8014404 <handle_manage_user+0x2d8>)
 8014258:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 801425c:	1978      	adds	r0, r7, r5
 801425e:	f018 fe2d 	bl	802cebc <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8014262:	9700      	str	r7, [sp, #0]
 8014264:	4b64      	ldr	r3, [pc, #400]	@ (80143f8 <handle_manage_user+0x2cc>)
 8014266:	4a68      	ldr	r2, [pc, #416]	@ (8014408 <handle_manage_user+0x2dc>)
 8014268:	21c8      	movs	r1, #200	@ 0xc8
 801426a:	4630      	mov	r0, r6
 801426c:	f010 fe56 	bl	8024f1c <mg_http_reply>
 8014270:	e00a      	b.n	8014288 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8014272:	4966      	ldr	r1, [pc, #408]	@ (801440c <handle_manage_user+0x2e0>)
 8014274:	2003      	movs	r0, #3
 8014276:	f7fe f82b 	bl	80122d0 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801427a:	4b65      	ldr	r3, [pc, #404]	@ (8014410 <handle_manage_user+0x2e4>)
 801427c:	4a62      	ldr	r2, [pc, #392]	@ (8014408 <handle_manage_user+0x2dc>)
 801427e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014282:	4630      	mov	r0, r6
 8014284:	f010 fe4a 	bl	8024f1c <mg_http_reply>
	    free(response);
 8014288:	4638      	mov	r0, r7
 801428a:	f007 fb77 	bl	801b97c <vPortFree>
	    free(user_entry);
 801428e:	4640      	mov	r0, r8
 8014290:	f007 fb74 	bl	801b97c <vPortFree>
}
 8014294:	b02e      	add	sp, #184	@ 0xb8
 8014296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 801429a:	4b5e      	ldr	r3, [pc, #376]	@ (8014414 <handle_manage_user+0x2e8>)
 801429c:	4a5a      	ldr	r2, [pc, #360]	@ (8014408 <handle_manage_user+0x2dc>)
 801429e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80142a2:	4630      	mov	r0, r6
 80142a4:	f010 fe3a 	bl	8024f1c <mg_http_reply>
	        return;
 80142a8:	e7f4      	b.n	8014294 <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 80142aa:	4b5b      	ldr	r3, [pc, #364]	@ (8014418 <handle_manage_user+0x2ec>)
 80142ac:	4a56      	ldr	r2, [pc, #344]	@ (8014408 <handle_manage_user+0x2dc>)
 80142ae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80142b2:	4630      	mov	r0, r6
 80142b4:	f010 fe32 	bl	8024f1c <mg_http_reply>
	                free(username_add);
 80142b8:	4628      	mov	r0, r5
 80142ba:	f007 fb5f 	bl	801b97c <vPortFree>
	                free(password_add);
 80142be:	4638      	mov	r0, r7
 80142c0:	f007 fb5c 	bl	801b97c <vPortFree>
	                return;
 80142c4:	e7e6      	b.n	8014294 <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 80142c6:	2400      	movs	r4, #0
 80142c8:	9404      	str	r4, [sp, #16]
 80142ca:	2225      	movs	r2, #37	@ 0x25
 80142cc:	4621      	mov	r1, r4
 80142ce:	a805      	add	r0, sp, #20
 80142d0:	f019 fb1e 	bl	802d910 <memset>
			mg_sha1_init(&sha1_ctx);
 80142d4:	a80f      	add	r0, sp, #60	@ 0x3c
 80142d6:	f010 fef9 	bl	80250cc <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 80142da:	4638      	mov	r0, r7
 80142dc:	f7fb ffe0 	bl	80102a0 <strlen>
 80142e0:	4602      	mov	r2, r0
 80142e2:	4639      	mov	r1, r7
 80142e4:	a80f      	add	r0, sp, #60	@ 0x3c
 80142e6:	f010 ff0b 	bl	8025100 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 80142ea:	a90f      	add	r1, sp, #60	@ 0x3c
 80142ec:	a804      	add	r0, sp, #16
 80142ee:	f010 ff41 	bl	8025174 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 80142f2:	4621      	mov	r1, r4
 80142f4:	2909      	cmp	r1, #9
 80142f6:	dc24      	bgt.n	8014342 <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 80142f8:	23a9      	movs	r3, #169	@ 0xa9
 80142fa:	fb01 f303 	mul.w	r3, r1, r3
 80142fe:	4a3c      	ldr	r2, [pc, #240]	@ (80143f0 <handle_manage_user+0x2c4>)
 8014300:	5cd3      	ldrb	r3, [r2, r3]
 8014302:	b10b      	cbz	r3, 8014308 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 8014304:	3101      	adds	r1, #1
 8014306:	e7f5      	b.n	80142f4 <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8014308:	23a9      	movs	r3, #169	@ 0xa9
 801430a:	fb03 f401 	mul.w	r4, r3, r1
 801430e:	4690      	mov	r8, r2
 8014310:	227f      	movs	r2, #127	@ 0x7f
 8014312:	4629      	mov	r1, r5
 8014314:	eb08 0004 	add.w	r0, r8, r4
 8014318:	f019 fb41 	bl	802d99e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 801431c:	3480      	adds	r4, #128	@ 0x80
 801431e:	2228      	movs	r2, #40	@ 0x28
 8014320:	a904      	add	r1, sp, #16
 8014322:	eb08 0004 	add.w	r0, r8, r4
 8014326:	f019 fb3a 	bl	802d99e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 801432a:	220a      	movs	r2, #10
 801432c:	4641      	mov	r1, r8
 801432e:	483b      	ldr	r0, [pc, #236]	@ (801441c <handle_manage_user+0x2f0>)
 8014330:	f7ff fedc 	bl	80140ec <write_users>
	            mg_http_reply(c, 200, headers,
 8014334:	4b3a      	ldr	r3, [pc, #232]	@ (8014420 <handle_manage_user+0x2f4>)
 8014336:	4a34      	ldr	r2, [pc, #208]	@ (8014408 <handle_manage_user+0x2dc>)
 8014338:	21c8      	movs	r1, #200	@ 0xc8
 801433a:	4630      	mov	r0, r6
 801433c:	f010 fdee 	bl	8024f1c <mg_http_reply>
 8014340:	e00e      	b.n	8014360 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 8014342:	4b38      	ldr	r3, [pc, #224]	@ (8014424 <handle_manage_user+0x2f8>)
 8014344:	4a30      	ldr	r2, [pc, #192]	@ (8014408 <handle_manage_user+0x2dc>)
 8014346:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801434a:	4630      	mov	r0, r6
 801434c:	f010 fde6 	bl	8024f1c <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8014350:	e006      	b.n	8014360 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 8014352:	4b35      	ldr	r3, [pc, #212]	@ (8014428 <handle_manage_user+0x2fc>)
 8014354:	4a2c      	ldr	r2, [pc, #176]	@ (8014408 <handle_manage_user+0x2dc>)
 8014356:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801435a:	4630      	mov	r0, r6
 801435c:	f010 fdde 	bl	8024f1c <mg_http_reply>
		free(username_add);
 8014360:	4628      	mov	r0, r5
 8014362:	f007 fb0b 	bl	801b97c <vPortFree>
		free(password_add);
 8014366:	4638      	mov	r0, r7
 8014368:	f007 fb08 	bl	801b97c <vPortFree>
		return;
 801436c:	e792      	b.n	8014294 <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 801436e:	ad2a      	add	r5, sp, #168	@ 0xa8
 8014370:	492e      	ldr	r1, [pc, #184]	@ (801442c <handle_manage_user+0x300>)
 8014372:	4628      	mov	r0, r5
 8014374:	f010 ff5c 	bl	8025230 <mg_str_s>
 8014378:	2300      	movs	r3, #0
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014384:	f011 f976 	bl	8025674 <mg_match>
 8014388:	2800      	cmp	r0, #0
 801438a:	d155      	bne.n	8014438 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 801438c:	ad2c      	add	r5, sp, #176	@ 0xb0
 801438e:	4928      	ldr	r1, [pc, #160]	@ (8014430 <handle_manage_user+0x304>)
 8014390:	4628      	mov	r0, r5
 8014392:	f010 ff4d 	bl	8025230 <mg_str_s>
 8014396:	2300      	movs	r3, #0
 8014398:	9300      	str	r3, [sp, #0]
 801439a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801439e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143a2:	f011 f967 	bl	8025674 <mg_match>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	f000 80f3 	beq.w	8014592 <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 80143ac:	4a0e      	ldr	r2, [pc, #56]	@ (80143e8 <handle_manage_user+0x2bc>)
 80143ae:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80143b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143b6:	f012 f82b 	bl	8026410 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 80143ba:	4607      	mov	r7, r0
 80143bc:	b118      	cbz	r0, 80143c6 <handle_manage_user+0x29a>
 80143be:	7803      	ldrb	r3, [r0, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f040 80cf 	bne.w	8014564 <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 80143c6:	4b1b      	ldr	r3, [pc, #108]	@ (8014434 <handle_manage_user+0x308>)
 80143c8:	4a0f      	ldr	r2, [pc, #60]	@ (8014408 <handle_manage_user+0x2dc>)
 80143ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80143ce:	4630      	mov	r0, r6
 80143d0:	f010 fda4 	bl	8024f1c <mg_http_reply>
	    free(username_del);
 80143d4:	4638      	mov	r0, r7
 80143d6:	f007 fad1 	bl	801b97c <vPortFree>
 80143da:	e75b      	b.n	8014294 <handle_manage_user+0x168>
 80143dc:	08037b08 	.word	0x08037b08
 80143e0:	08037c9c 	.word	0x08037c9c
 80143e4:	080383a4 	.word	0x080383a4
 80143e8:	080388ec 	.word	0x080388ec
 80143ec:	080388f4 	.word	0x080388f4
 80143f0:	20002228 	.word	0x20002228
 80143f4:	080388c4 	.word	0x080388c4
 80143f8:	0803c608 	.word	0x0803c608
 80143fc:	080388d4 	.word	0x080388d4
 8014400:	080388e4 	.word	0x080388e4
 8014404:	080388e8 	.word	0x080388e8
 8014408:	08037b44 	.word	0x08037b44
 801440c:	08038580 	.word	0x08038580
 8014410:	080385b4 	.word	0x080385b4
 8014414:	080383a8 	.word	0x080383a8
 8014418:	080388fc 	.word	0x080388fc
 801441c:	08037410 	.word	0x08037410
 8014420:	08038938 	.word	0x08038938
 8014424:	08038974 	.word	0x08038974
 8014428:	080389a8 	.word	0x080389a8
 801442c:	080389e8 	.word	0x080389e8
 8014430:	08038aa4 	.word	0x08038aa4
 8014434:	08038b40 	.word	0x08038b40
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8014438:	ab03      	add	r3, sp, #12
 801443a:	4a5a      	ldr	r2, [pc, #360]	@ (80145a4 <handle_manage_user+0x478>)
 801443c:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8014440:	c903      	ldmia	r1, {r0, r1}
 8014442:	f00f fbc7 	bl	8023bd4 <mg_json_get>
 8014446:	2800      	cmp	r0, #0
 8014448:	db21      	blt.n	801448e <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 801444a:	4a57      	ldr	r2, [pc, #348]	@ (80145a8 <handle_manage_user+0x47c>)
 801444c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8014450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014454:	f011 ffdc 	bl	8026410 <mg_json_get_str>
 8014458:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 801445a:	4a54      	ldr	r2, [pc, #336]	@ (80145ac <handle_manage_user+0x480>)
 801445c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014460:	f011 ffd6 	bl	8026410 <mg_json_get_str>
 8014464:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8014466:	b125      	cbz	r5, 8014472 <handle_manage_user+0x346>
 8014468:	b118      	cbz	r0, 8014472 <handle_manage_user+0x346>
 801446a:	782b      	ldrb	r3, [r5, #0]
 801446c:	b10b      	cbz	r3, 8014472 <handle_manage_user+0x346>
 801446e:	7803      	ldrb	r3, [r0, #0]
 8014470:	b9bb      	cbnz	r3, 80144a2 <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 8014472:	4b4f      	ldr	r3, [pc, #316]	@ (80145b0 <handle_manage_user+0x484>)
 8014474:	4a4f      	ldr	r2, [pc, #316]	@ (80145b4 <handle_manage_user+0x488>)
 8014476:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801447a:	4630      	mov	r0, r6
 801447c:	f010 fd4e 	bl	8024f1c <mg_http_reply>
	    free(username_edit);
 8014480:	4628      	mov	r0, r5
 8014482:	f007 fa7b 	bl	801b97c <vPortFree>
	    free(new_password);
 8014486:	4620      	mov	r0, r4
 8014488:	f007 fa78 	bl	801b97c <vPortFree>
	    return;
 801448c:	e702      	b.n	8014294 <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 801448e:	4b4a      	ldr	r3, [pc, #296]	@ (80145b8 <handle_manage_user+0x48c>)
 8014490:	4a48      	ldr	r2, [pc, #288]	@ (80145b4 <handle_manage_user+0x488>)
 8014492:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014496:	4630      	mov	r0, r6
 8014498:	f010 fd40 	bl	8024f1c <mg_http_reply>
	    char *new_password = NULL;
 801449c:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 801449e:	4625      	mov	r5, r4
 80144a0:	e7ee      	b.n	8014480 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 80144a2:	2700      	movs	r7, #0
 80144a4:	9704      	str	r7, [sp, #16]
 80144a6:	2225      	movs	r2, #37	@ 0x25
 80144a8:	4639      	mov	r1, r7
 80144aa:	a805      	add	r0, sp, #20
 80144ac:	f019 fa30 	bl	802d910 <memset>
	            mg_sha1_init(&sha1_ctx);
 80144b0:	a80f      	add	r0, sp, #60	@ 0x3c
 80144b2:	f010 fe0b 	bl	80250cc <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 80144b6:	4620      	mov	r0, r4
 80144b8:	f7fb fef2 	bl	80102a0 <strlen>
 80144bc:	4602      	mov	r2, r0
 80144be:	4621      	mov	r1, r4
 80144c0:	a80f      	add	r0, sp, #60	@ 0x3c
 80144c2:	f010 fe1d 	bl	8025100 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 80144c6:	a90f      	add	r1, sp, #60	@ 0x3c
 80144c8:	a804      	add	r0, sp, #16
 80144ca:	f010 fe53 	bl	8025174 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 80144ce:	2f09      	cmp	r7, #9
 80144d0:	dc25      	bgt.n	801451e <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 80144d2:	4629      	mov	r1, r5
 80144d4:	20a9      	movs	r0, #169	@ 0xa9
 80144d6:	4b39      	ldr	r3, [pc, #228]	@ (80145bc <handle_manage_user+0x490>)
 80144d8:	fb00 3007 	mla	r0, r0, r7, r3
 80144dc:	f7fb fe80 	bl	80101e0 <strcmp>
 80144e0:	b108      	cbz	r0, 80144e6 <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 80144e2:	3701      	adds	r7, #1
 80144e4:	e7f3      	b.n	80144ce <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80144e6:	23a9      	movs	r3, #169	@ 0xa9
 80144e8:	fb03 f707 	mul.w	r7, r3, r7
 80144ec:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80144f0:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80145bc <handle_manage_user+0x490>
 80144f4:	2228      	movs	r2, #40	@ 0x28
 80144f6:	a904      	add	r1, sp, #16
 80144f8:	4440      	add	r0, r8
 80144fa:	f019 fa50 	bl	802d99e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 80144fe:	4447      	add	r7, r8
 8014500:	2300      	movs	r3, #0
 8014502:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8014506:	220a      	movs	r2, #10
 8014508:	4641      	mov	r1, r8
 801450a:	482d      	ldr	r0, [pc, #180]	@ (80145c0 <handle_manage_user+0x494>)
 801450c:	f7ff fdee 	bl	80140ec <write_users>
	                mg_http_reply(c, 200, headers,
 8014510:	4b2c      	ldr	r3, [pc, #176]	@ (80145c4 <handle_manage_user+0x498>)
 8014512:	4a28      	ldr	r2, [pc, #160]	@ (80145b4 <handle_manage_user+0x488>)
 8014514:	21c8      	movs	r1, #200	@ 0xc8
 8014516:	4630      	mov	r0, r6
 8014518:	f010 fd00 	bl	8024f1c <mg_http_reply>
 801451c:	e7b0      	b.n	8014480 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 801451e:	4b2a      	ldr	r3, [pc, #168]	@ (80145c8 <handle_manage_user+0x49c>)
 8014520:	4a24      	ldr	r2, [pc, #144]	@ (80145b4 <handle_manage_user+0x488>)
 8014522:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014526:	4630      	mov	r0, r6
 8014528:	f010 fcf8 	bl	8024f1c <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 801452c:	e7a8      	b.n	8014480 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 801452e:	2280      	movs	r2, #128	@ 0x80
 8014530:	2100      	movs	r1, #0
 8014532:	4628      	mov	r0, r5
 8014534:	f019 f9ec 	bl	802d910 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8014538:	23a9      	movs	r3, #169	@ 0xa9
 801453a:	fb03 f004 	mul.w	r0, r3, r4
 801453e:	3080      	adds	r0, #128	@ 0x80
 8014540:	4c1e      	ldr	r4, [pc, #120]	@ (80145bc <handle_manage_user+0x490>)
 8014542:	2229      	movs	r2, #41	@ 0x29
 8014544:	2100      	movs	r1, #0
 8014546:	4420      	add	r0, r4
 8014548:	f019 f9e2 	bl	802d910 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 801454c:	220a      	movs	r2, #10
 801454e:	4621      	mov	r1, r4
 8014550:	481b      	ldr	r0, [pc, #108]	@ (80145c0 <handle_manage_user+0x494>)
 8014552:	f7ff fdcb 	bl	80140ec <write_users>
	            mg_http_reply(c, 200, headers,
 8014556:	4b1d      	ldr	r3, [pc, #116]	@ (80145cc <handle_manage_user+0x4a0>)
 8014558:	4a16      	ldr	r2, [pc, #88]	@ (80145b4 <handle_manage_user+0x488>)
 801455a:	21c8      	movs	r1, #200	@ 0xc8
 801455c:	4630      	mov	r0, r6
 801455e:	f010 fcdd 	bl	8024f1c <mg_http_reply>
 8014562:	e737      	b.n	80143d4 <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014564:	2401      	movs	r4, #1
 8014566:	2c09      	cmp	r4, #9
 8014568:	dc0b      	bgt.n	8014582 <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 801456a:	23a9      	movs	r3, #169	@ 0xa9
 801456c:	4d13      	ldr	r5, [pc, #76]	@ (80145bc <handle_manage_user+0x490>)
 801456e:	fb03 5504 	mla	r5, r3, r4, r5
 8014572:	4639      	mov	r1, r7
 8014574:	4628      	mov	r0, r5
 8014576:	f7fb fe33 	bl	80101e0 <strcmp>
 801457a:	2800      	cmp	r0, #0
 801457c:	d0d7      	beq.n	801452e <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801457e:	3401      	adds	r4, #1
 8014580:	e7f1      	b.n	8014566 <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 8014582:	4b13      	ldr	r3, [pc, #76]	@ (80145d0 <handle_manage_user+0x4a4>)
 8014584:	4a0b      	ldr	r2, [pc, #44]	@ (80145b4 <handle_manage_user+0x488>)
 8014586:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801458a:	4630      	mov	r0, r6
 801458c:	f010 fcc6 	bl	8024f1c <mg_http_reply>
 8014590:	e720      	b.n	80143d4 <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014592:	4b10      	ldr	r3, [pc, #64]	@ (80145d4 <handle_manage_user+0x4a8>)
 8014594:	4a07      	ldr	r2, [pc, #28]	@ (80145b4 <handle_manage_user+0x488>)
 8014596:	f240 1195 	movw	r1, #405	@ 0x195
 801459a:	4630      	mov	r0, r6
 801459c:	f010 fcbe 	bl	8024f1c <mg_http_reply>
 80145a0:	e678      	b.n	8014294 <handle_manage_user+0x168>
 80145a2:	bf00      	nop
 80145a4:	080383a4 	.word	0x080383a4
 80145a8:	080388ec 	.word	0x080388ec
 80145ac:	080388f4 	.word	0x080388f4
 80145b0:	08038a60 	.word	0x08038a60
 80145b4:	08037b44 	.word	0x08037b44
 80145b8:	080383a8 	.word	0x080383a8
 80145bc:	20002228 	.word	0x20002228
 80145c0:	08037410 	.word	0x08037410
 80145c4:	080389ec 	.word	0x080389ec
 80145c8:	08038a30 	.word	0x08038a30
 80145cc:	08038aac 	.word	0x08038aac
 80145d0:	08038aec 	.word	0x08038aec
 80145d4:	08038b80 	.word	0x08038b80

080145d8 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 80145d8:	b570      	push	{r4, r5, r6, lr}
 80145da:	460e      	mov	r6, r1
 80145dc:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 80145de:	2201      	movs	r2, #1
 80145e0:	4601      	mov	r1, r0
 80145e2:	480e      	ldr	r0, [pc, #56]	@ (801461c <load_users+0x44>)
 80145e4:	f00f fa0c 	bl	8023a00 <mg_fs_open>
	if (!fd) {
 80145e8:	b188      	cbz	r0, 801460e <load_users+0x36>
 80145ea:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80145ec:	4b0b      	ldr	r3, [pc, #44]	@ (801461c <load_users+0x44>)
 80145ee:	691b      	ldr	r3, [r3, #16]
 80145f0:	22a9      	movs	r2, #169	@ 0xa9
 80145f2:	fb04 f202 	mul.w	r2, r4, r2
 80145f6:	4631      	mov	r1, r6
 80145f8:	6800      	ldr	r0, [r0, #0]
 80145fa:	4798      	blx	r3
	mg_fs_close(fd);
 80145fc:	4628      	mov	r0, r5
 80145fe:	f00f fa18 	bl	8023a32 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 8014602:	4907      	ldr	r1, [pc, #28]	@ (8014620 <load_users+0x48>)
 8014604:	2001      	movs	r0, #1
 8014606:	f7fd fe63 	bl	80122d0 <logging>
	return true;
 801460a:	2001      	movs	r0, #1
}
 801460c:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 801460e:	4905      	ldr	r1, [pc, #20]	@ (8014624 <load_users+0x4c>)
 8014610:	2003      	movs	r0, #3
 8014612:	f7fd fe5d 	bl	80122d0 <logging>
		return false;
 8014616:	2000      	movs	r0, #0
 8014618:	e7f8      	b.n	801460c <load_users+0x34>
 801461a:	bf00      	nop
 801461c:	200000a0 	.word	0x200000a0
 8014620:	08038bfc 	.word	0x08038bfc
 8014624:	08038be0 	.word	0x08038be0

08014628 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	4605      	mov	r5, r0
 801462e:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014630:	ae04      	add	r6, sp, #16
 8014632:	4915      	ldr	r1, [pc, #84]	@ (8014688 <handle_restart_mcu+0x60>)
 8014634:	4630      	mov	r0, r6
 8014636:	f010 fdfb 	bl	8025230 <mg_str_s>
 801463a:	2300      	movs	r3, #0
 801463c:	9300      	str	r3, [sp, #0]
 801463e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014646:	f011 f815 	bl	8025674 <mg_match>
 801464a:	b1a0      	cbz	r0, 8014676 <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 801464c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 801464e:	6818      	ldr	r0, [r3, #0]
 8014650:	2300      	movs	r3, #0
 8014652:	9302      	str	r3, [sp, #8]
 8014654:	4b0d      	ldr	r3, [pc, #52]	@ (801468c <handle_restart_mcu+0x64>)
 8014656:	9301      	str	r3, [sp, #4]
 8014658:	2301      	movs	r3, #1
 801465a:	9300      	str	r3, [sp, #0]
 801465c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014660:	2300      	movs	r3, #0
 8014662:	f011 ffc7 	bl	80265f4 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8014666:	4b0a      	ldr	r3, [pc, #40]	@ (8014690 <handle_restart_mcu+0x68>)
 8014668:	4a0a      	ldr	r2, [pc, #40]	@ (8014694 <handle_restart_mcu+0x6c>)
 801466a:	21c8      	movs	r1, #200	@ 0xc8
 801466c:	4628      	mov	r0, r5
 801466e:	f010 fc55 	bl	8024f1c <mg_http_reply>
}
 8014672:	b006      	add	sp, #24
 8014674:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014676:	4b08      	ldr	r3, [pc, #32]	@ (8014698 <handle_restart_mcu+0x70>)
 8014678:	4a06      	ldr	r2, [pc, #24]	@ (8014694 <handle_restart_mcu+0x6c>)
 801467a:	f240 1195 	movw	r1, #405	@ 0x195
 801467e:	4628      	mov	r0, r5
 8014680:	f010 fc4c 	bl	8024f1c <mg_http_reply>
}
 8014684:	e7f5      	b.n	8014672 <handle_restart_mcu+0x4a>
 8014686:	bf00      	nop
 8014688:	08037c9c 	.word	0x08037c9c
 801468c:	08016db9 	.word	0x08016db9
 8014690:	08038c18 	.word	0x08038c18
 8014694:	08037b44 	.word	0x08037b44
 8014698:	08037d24 	.word	0x08037d24

0801469c <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 801469c:	b570      	push	{r4, r5, r6, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	4605      	mov	r5, r0
 80146a2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80146a4:	ae02      	add	r6, sp, #8
 80146a6:	4914      	ldr	r1, [pc, #80]	@ (80146f8 <handle_activete_and_reboot+0x5c>)
 80146a8:	4630      	mov	r0, r6
 80146aa:	f010 fdc1 	bl	8025230 <mg_str_s>
 80146ae:	2300      	movs	r3, #0
 80146b0:	9300      	str	r3, [sp, #0]
 80146b2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80146ba:	f010 ffdb 	bl	8025674 <mg_match>
 80146be:	b198      	cbz	r0, 80146e8 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80146c0:	4b0e      	ldr	r3, [pc, #56]	@ (80146fc <handle_activete_and_reboot+0x60>)
 80146c2:	69db      	ldr	r3, [r3, #28]
 80146c4:	490e      	ldr	r1, [pc, #56]	@ (8014700 <handle_activete_and_reboot+0x64>)
 80146c6:	480f      	ldr	r0, [pc, #60]	@ (8014704 <handle_activete_and_reboot+0x68>)
 80146c8:	4798      	blx	r3
 80146ca:	b128      	cbz	r0, 80146d8 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 80146cc:	4621      	mov	r1, r4
 80146ce:	4628      	mov	r0, r5
 80146d0:	f7ff ffaa 	bl	8014628 <handle_restart_mcu>
}
 80146d4:	b004      	add	sp, #16
 80146d6:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80146d8:	4b0b      	ldr	r3, [pc, #44]	@ (8014708 <handle_activete_and_reboot+0x6c>)
 80146da:	4a0c      	ldr	r2, [pc, #48]	@ (801470c <handle_activete_and_reboot+0x70>)
 80146dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80146e0:	4628      	mov	r0, r5
 80146e2:	f010 fc1b 	bl	8024f1c <mg_http_reply>
 80146e6:	e7f5      	b.n	80146d4 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80146e8:	4b09      	ldr	r3, [pc, #36]	@ (8014710 <handle_activete_and_reboot+0x74>)
 80146ea:	4a08      	ldr	r2, [pc, #32]	@ (801470c <handle_activete_and_reboot+0x70>)
 80146ec:	f240 1195 	movw	r1, #405	@ 0x195
 80146f0:	4628      	mov	r0, r5
 80146f2:	f010 fc13 	bl	8024f1c <mg_http_reply>
}
 80146f6:	e7ed      	b.n	80146d4 <handle_activete_and_reboot+0x38>
 80146f8:	08037c9c 	.word	0x08037c9c
 80146fc:	200000a0 	.word	0x200000a0
 8014700:	080373c8 	.word	0x080373c8
 8014704:	08038c50 	.word	0x08038c50
 8014708:	08038c68 	.word	0x08038c68
 801470c:	08037b44 	.word	0x08037b44
 8014710:	08037d24 	.word	0x08037d24

08014714 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8014714:	b570      	push	{r4, r5, r6, lr}
 8014716:	b0c4      	sub	sp, #272	@ 0x110
 8014718:	4606      	mov	r6, r0
 801471a:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 801471c:	ad42      	add	r5, sp, #264	@ 0x108
 801471e:	4920      	ldr	r1, [pc, #128]	@ (80147a0 <handle_fs_mkdir+0x8c>)
 8014720:	4628      	mov	r0, r5
 8014722:	f010 fd85 	bl	8025230 <mg_str_s>
 8014726:	2300      	movs	r3, #0
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801472e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014732:	f010 ff9f 	bl	8025674 <mg_match>
 8014736:	b350      	cbz	r0, 801478e <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8014738:	237b      	movs	r3, #123	@ 0x7b
 801473a:	aa23      	add	r2, sp, #140	@ 0x8c
 801473c:	4919      	ldr	r1, [pc, #100]	@ (80147a4 <handle_fs_mkdir+0x90>)
 801473e:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8014742:	f011 fc62 	bl	802600a <mg_http_get_var>
 8014746:	2800      	cmp	r0, #0
 8014748:	dd19      	ble.n	801477e <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 801474a:	ab23      	add	r3, sp, #140	@ 0x8c
 801474c:	4a16      	ldr	r2, [pc, #88]	@ (80147a8 <handle_fs_mkdir+0x94>)
 801474e:	2180      	movs	r1, #128	@ 0x80
 8014750:	a803      	add	r0, sp, #12
 8014752:	f018 fbb3 	bl	802cebc <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 8014756:	4b15      	ldr	r3, [pc, #84]	@ (80147ac <handle_fs_mkdir+0x98>)
 8014758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801475a:	a803      	add	r0, sp, #12
 801475c:	4798      	blx	r3
 801475e:	b130      	cbz	r0, 801476e <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8014760:	4b13      	ldr	r3, [pc, #76]	@ (80147b0 <handle_fs_mkdir+0x9c>)
 8014762:	4a14      	ldr	r2, [pc, #80]	@ (80147b4 <handle_fs_mkdir+0xa0>)
 8014764:	21c8      	movs	r1, #200	@ 0xc8
 8014766:	4630      	mov	r0, r6
 8014768:	f010 fbd8 	bl	8024f1c <mg_http_reply>
 801476c:	e016      	b.n	801479c <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 801476e:	4b12      	ldr	r3, [pc, #72]	@ (80147b8 <handle_fs_mkdir+0xa4>)
 8014770:	4a10      	ldr	r2, [pc, #64]	@ (80147b4 <handle_fs_mkdir+0xa0>)
 8014772:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014776:	4630      	mov	r0, r6
 8014778:	f010 fbd0 	bl	8024f1c <mg_http_reply>
 801477c:	e00e      	b.n	801479c <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801477e:	4b0f      	ldr	r3, [pc, #60]	@ (80147bc <handle_fs_mkdir+0xa8>)
 8014780:	4a0c      	ldr	r2, [pc, #48]	@ (80147b4 <handle_fs_mkdir+0xa0>)
 8014782:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014786:	4630      	mov	r0, r6
 8014788:	f010 fbc8 	bl	8024f1c <mg_http_reply>
 801478c:	e006      	b.n	801479c <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801478e:	4b0c      	ldr	r3, [pc, #48]	@ (80147c0 <handle_fs_mkdir+0xac>)
 8014790:	4a08      	ldr	r2, [pc, #32]	@ (80147b4 <handle_fs_mkdir+0xa0>)
 8014792:	f240 1195 	movw	r1, #405	@ 0x195
 8014796:	4630      	mov	r0, r6
 8014798:	f010 fbc0 	bl	8024f1c <mg_http_reply>
}
 801479c:	b044      	add	sp, #272	@ 0x110
 801479e:	bd70      	pop	{r4, r5, r6, pc}
 80147a0:	08037c9c 	.word	0x08037c9c
 80147a4:	08038cac 	.word	0x08038cac
 80147a8:	08038cb4 	.word	0x08038cb4
 80147ac:	200000a0 	.word	0x200000a0
 80147b0:	08038cbc 	.word	0x08038cbc
 80147b4:	08037b44 	.word	0x08037b44
 80147b8:	08038cf0 	.word	0x08038cf0
 80147bc:	08038d2c 	.word	0x08038d2c
 80147c0:	08037d24 	.word	0x08037d24

080147c4 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	b0a4      	sub	sp, #144	@ 0x90
 80147c8:	4605      	mov	r5, r0
 80147ca:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80147cc:	ae22      	add	r6, sp, #136	@ 0x88
 80147ce:	491c      	ldr	r1, [pc, #112]	@ (8014840 <handle_firmware_upload+0x7c>)
 80147d0:	4630      	mov	r0, r6
 80147d2:	f010 fd2d 	bl	8025230 <mg_str_s>
 80147d6:	2300      	movs	r3, #0
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80147e2:	f010 ff47 	bl	8025674 <mg_match>
 80147e6:	b308      	cbz	r0, 801482c <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80147e8:	2380      	movs	r3, #128	@ 0x80
 80147ea:	aa02      	add	r2, sp, #8
 80147ec:	4915      	ldr	r1, [pc, #84]	@ (8014844 <handle_firmware_upload+0x80>)
 80147ee:	f104 0010 	add.w	r0, r4, #16
 80147f2:	f011 fc0a 	bl	802600a <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80147f6:	4914      	ldr	r1, [pc, #80]	@ (8014848 <handle_firmware_upload+0x84>)
 80147f8:	a802      	add	r0, sp, #8
 80147fa:	f7fb fcf1 	bl	80101e0 <strcmp>
 80147fe:	b958      	cbnz	r0, 8014818 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8014800:	4b12      	ldr	r3, [pc, #72]	@ (801484c <handle_firmware_upload+0x88>)
 8014802:	9300      	str	r3, [sp, #0]
 8014804:	4b12      	ldr	r3, [pc, #72]	@ (8014850 <handle_firmware_upload+0x8c>)
 8014806:	4a13      	ldr	r2, [pc, #76]	@ (8014854 <handle_firmware_upload+0x90>)
 8014808:	4621      	mov	r1, r4
 801480a:	4628      	mov	r0, r5
 801480c:	f013 f9c4 	bl	8027b98 <mg_http_upload>
			vTaskDelay(1);
 8014810:	2001      	movs	r0, #1
 8014812:	f006 f999 	bl	801ab48 <vTaskDelay>
 8014816:	e010      	b.n	801483a <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8014818:	4b0b      	ldr	r3, [pc, #44]	@ (8014848 <handle_firmware_upload+0x84>)
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	4b0e      	ldr	r3, [pc, #56]	@ (8014858 <handle_firmware_upload+0x94>)
 801481e:	4a0f      	ldr	r2, [pc, #60]	@ (801485c <handle_firmware_upload+0x98>)
 8014820:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014824:	4628      	mov	r0, r5
 8014826:	f010 fb79 	bl	8024f1c <mg_http_reply>
 801482a:	e006      	b.n	801483a <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801482c:	4b0c      	ldr	r3, [pc, #48]	@ (8014860 <handle_firmware_upload+0x9c>)
 801482e:	4a0b      	ldr	r2, [pc, #44]	@ (801485c <handle_firmware_upload+0x98>)
 8014830:	f240 1195 	movw	r1, #405	@ 0x195
 8014834:	4628      	mov	r0, r5
 8014836:	f010 fb71 	bl	8024f1c <mg_http_reply>
}
 801483a:	b024      	add	sp, #144	@ 0x90
 801483c:	bd70      	pop	{r4, r5, r6, pc}
 801483e:	bf00      	nop
 8014840:	08037c9c 	.word	0x08037c9c
 8014844:	0803c558 	.word	0x0803c558
 8014848:	08038d68 	.word	0x08038d68
 801484c:	0003d090 	.word	0x0003d090
 8014850:	080373bc 	.word	0x080373bc
 8014854:	200000a0 	.word	0x200000a0
 8014858:	08038d78 	.word	0x08038d78
 801485c:	08037b44 	.word	0x08037b44
 8014860:	08037d24 	.word	0x08037d24

08014864 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8014864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014866:	b097      	sub	sp, #92	@ 0x5c
 8014868:	4604      	mov	r4, r0
 801486a:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 801486c:	2101      	movs	r1, #1
 801486e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8014872:	f7ff f879 	bl	8013968 <mg_calloc>
	if (buff == NULL){
 8014876:	4605      	mov	r5, r0
 8014878:	b150      	cbz	r0, 8014890 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 801487a:	2201      	movs	r2, #1
 801487c:	4621      	mov	r1, r4
 801487e:	4828      	ldr	r0, [pc, #160]	@ (8014920 <calc_file_md5sum+0xbc>)
 8014880:	f00f f8be 	bl	8023a00 <mg_fs_open>
	if (fd==NULL){
 8014884:	4604      	mov	r4, r0
 8014886:	b140      	cbz	r0, 801489a <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014888:	4668      	mov	r0, sp
 801488a:	f00f fcc9 	bl	8024220 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801488e:	e010      	b.n	80148b2 <calc_file_md5sum+0x4e>
		free(buff);
 8014890:	f007 f874 	bl	801b97c <vPortFree>
		return -1;
 8014894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014898:	e040      	b.n	801491c <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 801489a:	f00f f8ca 	bl	8023a32 <mg_fs_close>
		free(buff);
 801489e:	4628      	mov	r0, r5
 80148a0:	f007 f86c 	bl	801b97c <vPortFree>
		return -2;
 80148a4:	f06f 0001 	mvn.w	r0, #1
 80148a8:	e038      	b.n	801491c <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 80148aa:	4629      	mov	r1, r5
 80148ac:	4668      	mov	r0, sp
 80148ae:	f00f fccd 	bl	802424c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 80148b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014920 <calc_file_md5sum+0xbc>)
 80148b4:	691b      	ldr	r3, [r3, #16]
 80148b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80148ba:	4629      	mov	r1, r5
 80148bc:	6820      	ldr	r0, [r4, #0]
 80148be:	4798      	blx	r3
 80148c0:	4602      	mov	r2, r0
 80148c2:	2800      	cmp	r0, #0
 80148c4:	d1f1      	bne.n	80148aa <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 80148c6:	4620      	mov	r0, r4
 80148c8:	f00f f8b3 	bl	8023a32 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 80148cc:	2101      	movs	r1, #1
 80148ce:	2010      	movs	r0, #16
 80148d0:	f7ff f84a 	bl	8013968 <mg_calloc>
	if (digest == NULL){
 80148d4:	4607      	mov	r7, r0
 80148d6:	b128      	cbz	r0, 80148e4 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 80148d8:	4601      	mov	r1, r0
 80148da:	4668      	mov	r0, sp
 80148dc:	f00f fd0d 	bl	80242fa <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 80148e0:	2400      	movs	r4, #0
 80148e2:	e012      	b.n	801490a <calc_file_md5sum+0xa6>
		free(buff);
 80148e4:	4628      	mov	r0, r5
 80148e6:	f007 f849 	bl	801b97c <vPortFree>
		free(digest);
 80148ea:	4638      	mov	r0, r7
 80148ec:	f007 f846 	bl	801b97c <vPortFree>
		return -1;
 80148f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148f4:	e012      	b.n	801491c <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80148f6:	0061      	lsls	r1, r4, #1
 80148f8:	5d3b      	ldrb	r3, [r7, r4]
 80148fa:	4a0a      	ldr	r2, [pc, #40]	@ (8014924 <calc_file_md5sum+0xc0>)
 80148fc:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8014900:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8014904:	f018 fada 	bl	802cebc <snprintf>
	for (int i = 0; i < 16; ++i) {
 8014908:	3401      	adds	r4, #1
 801490a:	2c0f      	cmp	r4, #15
 801490c:	ddf3      	ble.n	80148f6 <calc_file_md5sum+0x92>
	free(buff);
 801490e:	4628      	mov	r0, r5
 8014910:	f007 f834 	bl	801b97c <vPortFree>
	free(digest);
 8014914:	4638      	mov	r0, r7
 8014916:	f007 f831 	bl	801b97c <vPortFree>
	return 0;
 801491a:	2000      	movs	r0, #0
}
 801491c:	b017      	add	sp, #92	@ 0x5c
 801491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014920:	200000a0 	.word	0x200000a0
 8014924:	08038dc4 	.word	0x08038dc4

08014928 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8014928:	b570      	push	{r4, r5, r6, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	4605      	mov	r5, r0
 801492e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014930:	ae02      	add	r6, sp, #8
 8014932:	4919      	ldr	r1, [pc, #100]	@ (8014998 <handle_firmware_md5+0x70>)
 8014934:	4630      	mov	r0, r6
 8014936:	f010 fc7b 	bl	8025230 <mg_str_s>
 801493a:	2300      	movs	r3, #0
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014946:	f010 fe95 	bl	8025674 <mg_match>
 801494a:	b1e8      	cbz	r0, 8014988 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 801494c:	2101      	movs	r1, #1
 801494e:	2021      	movs	r0, #33	@ 0x21
 8014950:	f7ff f80a 	bl	8013968 <mg_calloc>
 8014954:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8014956:	4601      	mov	r1, r0
 8014958:	4810      	ldr	r0, [pc, #64]	@ (801499c <handle_firmware_md5+0x74>)
 801495a:	f7ff ff83 	bl	8014864 <calc_file_md5sum>
 801495e:	b958      	cbnz	r0, 8014978 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014960:	9400      	str	r4, [sp, #0]
 8014962:	4b0f      	ldr	r3, [pc, #60]	@ (80149a0 <handle_firmware_md5+0x78>)
 8014964:	4a0f      	ldr	r2, [pc, #60]	@ (80149a4 <handle_firmware_md5+0x7c>)
 8014966:	21c8      	movs	r1, #200	@ 0xc8
 8014968:	4628      	mov	r0, r5
 801496a:	f010 fad7 	bl	8024f1c <mg_http_reply>
		free(md5_str);
 801496e:	4620      	mov	r0, r4
 8014970:	f007 f804 	bl	801b97c <vPortFree>
}
 8014974:	b004      	add	sp, #16
 8014976:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014978:	4b0b      	ldr	r3, [pc, #44]	@ (80149a8 <handle_firmware_md5+0x80>)
 801497a:	4a0a      	ldr	r2, [pc, #40]	@ (80149a4 <handle_firmware_md5+0x7c>)
 801497c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014980:	4628      	mov	r0, r5
 8014982:	f010 facb 	bl	8024f1c <mg_http_reply>
 8014986:	e7f2      	b.n	801496e <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014988:	4b08      	ldr	r3, [pc, #32]	@ (80149ac <handle_firmware_md5+0x84>)
 801498a:	4a06      	ldr	r2, [pc, #24]	@ (80149a4 <handle_firmware_md5+0x7c>)
 801498c:	f240 1195 	movw	r1, #405	@ 0x195
 8014990:	4628      	mov	r0, r5
 8014992:	f010 fac3 	bl	8024f1c <mg_http_reply>
}
 8014996:	e7ed      	b.n	8014974 <handle_firmware_md5+0x4c>
 8014998:	08037b08 	.word	0x08037b08
 801499c:	08038c50 	.word	0x08038c50
 80149a0:	08038dcc 	.word	0x08038dcc
 80149a4:	08037b44 	.word	0x08037b44
 80149a8:	08038df0 	.word	0x08038df0
 80149ac:	08037bb8 	.word	0x08037bb8

080149b0 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 80149b0:	290b      	cmp	r1, #11
 80149b2:	d000      	beq.n	80149b6 <dashboard+0x6>
 80149b4:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 80149b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149b8:	b0b5      	sub	sp, #212	@ 0xd4
 80149ba:	4605      	mov	r5, r0
 80149bc:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 80149be:	2200      	movs	r2, #0
 80149c0:	4621      	mov	r1, r4
 80149c2:	f7fe fdff 	bl	80135c4 <auth>
 80149c6:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 80149c8:	ae08      	add	r6, sp, #32
 80149ca:	49af      	ldr	r1, [pc, #700]	@ (8014c88 <dashboard+0x2d8>)
 80149cc:	4630      	mov	r0, r6
 80149ce:	f010 fc2f 	bl	8025230 <mg_str_s>
 80149d2:	2300      	movs	r3, #0
 80149d4:	9300      	str	r3, [sp, #0]
 80149d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80149de:	f010 fe49 	bl	8025674 <mg_match>
 80149e2:	b120      	cbz	r0, 80149ee <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 80149e4:	4628      	mov	r0, r5
 80149e6:	f7fe fc45 	bl	8013274 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80149ea:	b035      	add	sp, #212	@ 0xd4
 80149ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80149ee:	ae0a      	add	r6, sp, #40	@ 0x28
 80149f0:	49a6      	ldr	r1, [pc, #664]	@ (8014c8c <dashboard+0x2dc>)
 80149f2:	4630      	mov	r0, r6
 80149f4:	f010 fc1c 	bl	8025230 <mg_str_s>
 80149f8:	2300      	movs	r3, #0
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a00:	f104 0108 	add.w	r1, r4, #8
 8014a04:	c903      	ldmia	r1, {r0, r1}
 8014a06:	f010 fe35 	bl	8025674 <mg_match>
 8014a0a:	b100      	cbz	r0, 8014a0e <dashboard+0x5e>
 8014a0c:	b1bf      	cbz	r7, 8014a3e <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8014a0e:	ae0c      	add	r6, sp, #48	@ 0x30
 8014a10:	499f      	ldr	r1, [pc, #636]	@ (8014c90 <dashboard+0x2e0>)
 8014a12:	4630      	mov	r0, r6
 8014a14:	f010 fc0c 	bl	8025230 <mg_str_s>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a20:	f104 0108 	add.w	r1, r4, #8
 8014a24:	c903      	ldmia	r1, {r0, r1}
 8014a26:	f010 fe25 	bl	8025674 <mg_match>
 8014a2a:	b180      	cbz	r0, 8014a4e <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 8014a2c:	4999      	ldr	r1, [pc, #612]	@ (8014c94 <dashboard+0x2e4>)
 8014a2e:	2001      	movs	r0, #1
 8014a30:	f7fd fc4e 	bl	80122d0 <logging>
        	 handler_authanticate(c,hm);
 8014a34:	4621      	mov	r1, r4
 8014a36:	4628      	mov	r0, r5
 8014a38:	f7fe feb0 	bl	801379c <handler_authanticate>
 8014a3c:	e7d5      	b.n	80149ea <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 8014a3e:	4b96      	ldr	r3, [pc, #600]	@ (8014c98 <dashboard+0x2e8>)
 8014a40:	4a96      	ldr	r2, [pc, #600]	@ (8014c9c <dashboard+0x2ec>)
 8014a42:	f240 1193 	movw	r1, #403	@ 0x193
 8014a46:	4628      	mov	r0, r5
 8014a48:	f010 fa68 	bl	8024f1c <mg_http_reply>
 8014a4c:	e7cd      	b.n	80149ea <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014a4e:	ae0e      	add	r6, sp, #56	@ 0x38
 8014a50:	4993      	ldr	r1, [pc, #588]	@ (8014ca0 <dashboard+0x2f0>)
 8014a52:	4630      	mov	r0, r6
 8014a54:	f010 fbec 	bl	8025230 <mg_str_s>
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a60:	f104 0108 	add.w	r1, r4, #8
 8014a64:	c903      	ldmia	r1, {r0, r1}
 8014a66:	f010 fe05 	bl	8025674 <mg_match>
 8014a6a:	b140      	cbz	r0, 8014a7e <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014a6c:	498d      	ldr	r1, [pc, #564]	@ (8014ca4 <dashboard+0x2f4>)
 8014a6e:	2001      	movs	r0, #1
 8014a70:	f7fd fc2e 	bl	80122d0 <logging>
			handler_logout(c,hm);
 8014a74:	4621      	mov	r1, r4
 8014a76:	4628      	mov	r0, r5
 8014a78:	f7fe fcea 	bl	8013450 <handler_logout>
 8014a7c:	e7b5      	b.n	80149ea <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014a7e:	ae10      	add	r6, sp, #64	@ 0x40
 8014a80:	4989      	ldr	r1, [pc, #548]	@ (8014ca8 <dashboard+0x2f8>)
 8014a82:	4630      	mov	r0, r6
 8014a84:	f010 fbd4 	bl	8025230 <mg_str_s>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a90:	f104 0108 	add.w	r1, r4, #8
 8014a94:	c903      	ldmia	r1, {r0, r1}
 8014a96:	f010 fded 	bl	8025674 <mg_match>
 8014a9a:	b138      	cbz	r0, 8014aac <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014a9c:	4983      	ldr	r1, [pc, #524]	@ (8014cac <dashboard+0x2fc>)
 8014a9e:	2001      	movs	r0, #1
 8014aa0:	f7fd fc16 	bl	80122d0 <logging>
			handle_ram_status_get(c);
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f7fe fe8d 	bl	80137c4 <handle_ram_status_get>
 8014aaa:	e79e      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014aac:	ae12      	add	r6, sp, #72	@ 0x48
 8014aae:	4980      	ldr	r1, [pc, #512]	@ (8014cb0 <dashboard+0x300>)
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	f010 fbbd 	bl	8025230 <mg_str_s>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014abe:	f104 0108 	add.w	r1, r4, #8
 8014ac2:	c903      	ldmia	r1, {r0, r1}
 8014ac4:	f010 fdd6 	bl	8025674 <mg_match>
 8014ac8:	b140      	cbz	r0, 8014adc <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014aca:	497a      	ldr	r1, [pc, #488]	@ (8014cb4 <dashboard+0x304>)
 8014acc:	2001      	movs	r0, #1
 8014ace:	f7fd fbff 	bl	80122d0 <logging>
			handle_io_status_get(c, hm);
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f7fe fe95 	bl	8013804 <handle_io_status_get>
 8014ada:	e786      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014adc:	ae14      	add	r6, sp, #80	@ 0x50
 8014ade:	4976      	ldr	r1, [pc, #472]	@ (8014cb8 <dashboard+0x308>)
 8014ae0:	4630      	mov	r0, r6
 8014ae2:	f010 fba5 	bl	8025230 <mg_str_s>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014aee:	f104 0108 	add.w	r1, r4, #8
 8014af2:	c903      	ldmia	r1, {r0, r1}
 8014af4:	f010 fdbe 	bl	8025674 <mg_match>
 8014af8:	b140      	cbz	r0, 8014b0c <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 8014afa:	4970      	ldr	r1, [pc, #448]	@ (8014cbc <dashboard+0x30c>)
 8014afc:	2001      	movs	r0, #1
 8014afe:	f7fd fbe7 	bl	80122d0 <logging>
			handle_mqtt_conf(c, hm);
 8014b02:	4621      	mov	r1, r4
 8014b04:	4628      	mov	r0, r5
 8014b06:	f7fe ff3d 	bl	8013984 <handle_mqtt_conf>
 8014b0a:	e76e      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 8014b0c:	ae16      	add	r6, sp, #88	@ 0x58
 8014b0e:	496c      	ldr	r1, [pc, #432]	@ (8014cc0 <dashboard+0x310>)
 8014b10:	4630      	mov	r0, r6
 8014b12:	f010 fb8d 	bl	8025230 <mg_str_s>
 8014b16:	2300      	movs	r3, #0
 8014b18:	9300      	str	r3, [sp, #0]
 8014b1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b1e:	f104 0108 	add.w	r1, r4, #8
 8014b22:	c903      	ldmia	r1, {r0, r1}
 8014b24:	f010 fda6 	bl	8025674 <mg_match>
 8014b28:	b140      	cbz	r0, 8014b3c <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 8014b2a:	4966      	ldr	r1, [pc, #408]	@ (8014cc4 <dashboard+0x314>)
 8014b2c:	2001      	movs	r0, #1
 8014b2e:	f7fd fbcf 	bl	80122d0 <logging>
			handle_mb_tcp_access_list(c, hm);
 8014b32:	4621      	mov	r1, r4
 8014b34:	4628      	mov	r0, r5
 8014b36:	f7ff f85d 	bl	8013bf4 <handle_mb_tcp_access_list>
 8014b3a:	e756      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8014b3c:	ae18      	add	r6, sp, #96	@ 0x60
 8014b3e:	4962      	ldr	r1, [pc, #392]	@ (8014cc8 <dashboard+0x318>)
 8014b40:	4630      	mov	r0, r6
 8014b42:	f010 fb75 	bl	8025230 <mg_str_s>
 8014b46:	2300      	movs	r3, #0
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b4e:	f104 0108 	add.w	r1, r4, #8
 8014b52:	c903      	ldmia	r1, {r0, r1}
 8014b54:	f010 fd8e 	bl	8025674 <mg_match>
 8014b58:	b140      	cbz	r0, 8014b6c <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014b5a:	495c      	ldr	r1, [pc, #368]	@ (8014ccc <dashboard+0x31c>)
 8014b5c:	2001      	movs	r0, #1
 8014b5e:	f7fd fbb7 	bl	80122d0 <logging>
			handle_dev_status(c, hm);
 8014b62:	4621      	mov	r1, r4
 8014b64:	4628      	mov	r0, r5
 8014b66:	f7ff f925 	bl	8013db4 <handle_dev_status>
 8014b6a:	e73e      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014b6c:	ae1a      	add	r6, sp, #104	@ 0x68
 8014b6e:	4958      	ldr	r1, [pc, #352]	@ (8014cd0 <dashboard+0x320>)
 8014b70:	4630      	mov	r0, r6
 8014b72:	f010 fb5d 	bl	8025230 <mg_str_s>
 8014b76:	2300      	movs	r3, #0
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b7e:	68e1      	ldr	r1, [r4, #12]
 8014b80:	68a0      	ldr	r0, [r4, #8]
 8014b82:	f010 fd77 	bl	8025674 <mg_match>
 8014b86:	b148      	cbz	r0, 8014b9c <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014b88:	4952      	ldr	r1, [pc, #328]	@ (8014cd4 <dashboard+0x324>)
 8014b8a:	2001      	movs	r0, #1
 8014b8c:	f7fd fba0 	bl	80122d0 <logging>
			handle_fs_get_log(c, hm, 0);
 8014b90:	2200      	movs	r2, #0
 8014b92:	4621      	mov	r1, r4
 8014b94:	4628      	mov	r0, r5
 8014b96:	f7ff fa4b 	bl	8014030 <handle_fs_get_log>
 8014b9a:	e726      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014b9c:	ae1c      	add	r6, sp, #112	@ 0x70
 8014b9e:	494e      	ldr	r1, [pc, #312]	@ (8014cd8 <dashboard+0x328>)
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f010 fb45 	bl	8025230 <mg_str_s>
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bae:	68e1      	ldr	r1, [r4, #12]
 8014bb0:	68a0      	ldr	r0, [r4, #8]
 8014bb2:	f010 fd5f 	bl	8025674 <mg_match>
 8014bb6:	b148      	cbz	r0, 8014bcc <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014bb8:	4948      	ldr	r1, [pc, #288]	@ (8014cdc <dashboard+0x32c>)
 8014bba:	2001      	movs	r0, #1
 8014bbc:	f7fd fb88 	bl	80122d0 <logging>
			handle_fs_get_log(c, hm, 1);
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	4621      	mov	r1, r4
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	f7ff fa33 	bl	8014030 <handle_fs_get_log>
 8014bca:	e70e      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014bcc:	ae1e      	add	r6, sp, #120	@ 0x78
 8014bce:	4944      	ldr	r1, [pc, #272]	@ (8014ce0 <dashboard+0x330>)
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	f010 fb2d 	bl	8025230 <mg_str_s>
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bde:	68e1      	ldr	r1, [r4, #12]
 8014be0:	68a0      	ldr	r0, [r4, #8]
 8014be2:	f010 fd47 	bl	8025674 <mg_match>
 8014be6:	b140      	cbz	r0, 8014bfa <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 8014be8:	493e      	ldr	r1, [pc, #248]	@ (8014ce4 <dashboard+0x334>)
 8014bea:	2001      	movs	r0, #1
 8014bec:	f7fd fb70 	bl	80122d0 <logging>
			handle_manage_user(c, hm);
 8014bf0:	4621      	mov	r1, r4
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f7ff fa9a 	bl	801412c <handle_manage_user>
 8014bf8:	e6f7      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8014bfa:	ae20      	add	r6, sp, #128	@ 0x80
 8014bfc:	493a      	ldr	r1, [pc, #232]	@ (8014ce8 <dashboard+0x338>)
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f010 fb16 	bl	8025230 <mg_str_s>
 8014c04:	2300      	movs	r3, #0
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c0c:	68e1      	ldr	r1, [r4, #12]
 8014c0e:	68a0      	ldr	r0, [r4, #8]
 8014c10:	f010 fd30 	bl	8025674 <mg_match>
 8014c14:	b140      	cbz	r0, 8014c28 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 8014c16:	4935      	ldr	r1, [pc, #212]	@ (8014cec <dashboard+0x33c>)
 8014c18:	2001      	movs	r0, #1
 8014c1a:	f7fd fb59 	bl	80122d0 <logging>
			handle_restart_mcu(c, hm);
 8014c1e:	4621      	mov	r1, r4
 8014c20:	4628      	mov	r0, r5
 8014c22:	f7ff fd01 	bl	8014628 <handle_restart_mcu>
 8014c26:	e6e0      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 8014c28:	ae22      	add	r6, sp, #136	@ 0x88
 8014c2a:	4931      	ldr	r1, [pc, #196]	@ (8014cf0 <dashboard+0x340>)
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	f010 faff 	bl	8025230 <mg_str_s>
 8014c32:	2300      	movs	r3, #0
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c3a:	68e1      	ldr	r1, [r4, #12]
 8014c3c:	68a0      	ldr	r0, [r4, #8]
 8014c3e:	f010 fd19 	bl	8025674 <mg_match>
 8014c42:	b140      	cbz	r0, 8014c56 <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 8014c44:	492b      	ldr	r1, [pc, #172]	@ (8014cf4 <dashboard+0x344>)
 8014c46:	2001      	movs	r0, #1
 8014c48:	f7fd fb42 	bl	80122d0 <logging>
			handler_dev_version(c, hm);
 8014c4c:	4621      	mov	r1, r4
 8014c4e:	4628      	mov	r0, r5
 8014c50:	f7fe fb1c 	bl	801328c <handler_dev_version>
 8014c54:	e6c9      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 8014c56:	ae24      	add	r6, sp, #144	@ 0x90
 8014c58:	4927      	ldr	r1, [pc, #156]	@ (8014cf8 <dashboard+0x348>)
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	f010 fae8 	bl	8025230 <mg_str_s>
 8014c60:	2300      	movs	r3, #0
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c68:	68e1      	ldr	r1, [r4, #12]
 8014c6a:	68a0      	ldr	r0, [r4, #8]
 8014c6c:	f010 fd02 	bl	8025674 <mg_match>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d045      	beq.n	8014d00 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 8014c74:	4921      	ldr	r1, [pc, #132]	@ (8014cfc <dashboard+0x34c>)
 8014c76:	2001      	movs	r0, #1
 8014c78:	f7fd fb2a 	bl	80122d0 <logging>
			handler_dev_info(c, hm);
 8014c7c:	4621      	mov	r1, r4
 8014c7e:	4628      	mov	r0, r5
 8014c80:	f7fe fb36 	bl	80132f0 <handler_dev_info>
 8014c84:	e6b1      	b.n	80149ea <dashboard+0x3a>
 8014c86:	bf00      	nop
 8014c88:	08038e30 	.word	0x08038e30
 8014c8c:	08038e38 	.word	0x08038e38
 8014c90:	08038e50 	.word	0x08038e50
 8014c94:	08038e5c 	.word	0x08038e5c
 8014c98:	08038e40 	.word	0x08038e40
 8014c9c:	080381c0 	.word	0x080381c0
 8014ca0:	08038e70 	.word	0x08038e70
 8014ca4:	08038e7c 	.word	0x08038e7c
 8014ca8:	08038e94 	.word	0x08038e94
 8014cac:	08038ea4 	.word	0x08038ea4
 8014cb0:	08038ec0 	.word	0x08038ec0
 8014cb4:	08038ed0 	.word	0x08038ed0
 8014cb8:	08038ee8 	.word	0x08038ee8
 8014cbc:	08038efc 	.word	0x08038efc
 8014cc0:	08038f18 	.word	0x08038f18
 8014cc4:	08038f28 	.word	0x08038f28
 8014cc8:	08038f44 	.word	0x08038f44
 8014ccc:	08038f58 	.word	0x08038f58
 8014cd0:	08038f74 	.word	0x08038f74
 8014cd4:	08038f84 	.word	0x08038f84
 8014cd8:	08038fa0 	.word	0x08038fa0
 8014cdc:	08038fb4 	.word	0x08038fb4
 8014ce0:	08038fd4 	.word	0x08038fd4
 8014ce4:	08038fe8 	.word	0x08038fe8
 8014ce8:	08039004 	.word	0x08039004
 8014cec:	08039018 	.word	0x08039018
 8014cf0:	08039038 	.word	0x08039038
 8014cf4:	0803904c 	.word	0x0803904c
 8014cf8:	0803906c 	.word	0x0803906c
 8014cfc:	08039080 	.word	0x08039080
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014d00:	ae26      	add	r6, sp, #152	@ 0x98
 8014d02:	4950      	ldr	r1, [pc, #320]	@ (8014e44 <dashboard+0x494>)
 8014d04:	4630      	mov	r0, r6
 8014d06:	f010 fa93 	bl	8025230 <mg_str_s>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d12:	68e1      	ldr	r1, [r4, #12]
 8014d14:	68a0      	ldr	r0, [r4, #8]
 8014d16:	f010 fcad 	bl	8025674 <mg_match>
 8014d1a:	b120      	cbz	r0, 8014d26 <dashboard+0x376>
			handle_firmware_upload(c, hm);
 8014d1c:	4621      	mov	r1, r4
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f7ff fd50 	bl	80147c4 <handle_firmware_upload>
 8014d24:	e661      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8014d26:	ae28      	add	r6, sp, #160	@ 0xa0
 8014d28:	4947      	ldr	r1, [pc, #284]	@ (8014e48 <dashboard+0x498>)
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	f010 fa80 	bl	8025230 <mg_str_s>
 8014d30:	2300      	movs	r3, #0
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d38:	68e1      	ldr	r1, [r4, #12]
 8014d3a:	68a0      	ldr	r0, [r4, #8]
 8014d3c:	f010 fc9a 	bl	8025674 <mg_match>
 8014d40:	b140      	cbz	r0, 8014d54 <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 8014d42:	4942      	ldr	r1, [pc, #264]	@ (8014e4c <dashboard+0x49c>)
 8014d44:	2001      	movs	r0, #1
 8014d46:	f7fd fac3 	bl	80122d0 <logging>
			handle_firmware_md5(c, hm);
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	f7ff fdeb 	bl	8014928 <handle_firmware_md5>
 8014d52:	e64a      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 8014d54:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014d56:	493e      	ldr	r1, [pc, #248]	@ (8014e50 <dashboard+0x4a0>)
 8014d58:	4630      	mov	r0, r6
 8014d5a:	f010 fa69 	bl	8025230 <mg_str_s>
 8014d5e:	2300      	movs	r3, #0
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d66:	68e1      	ldr	r1, [r4, #12]
 8014d68:	68a0      	ldr	r0, [r4, #8]
 8014d6a:	f010 fc83 	bl	8025674 <mg_match>
 8014d6e:	b140      	cbz	r0, 8014d82 <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014d70:	4938      	ldr	r1, [pc, #224]	@ (8014e54 <dashboard+0x4a4>)
 8014d72:	2001      	movs	r0, #1
 8014d74:	f7fd faac 	bl	80122d0 <logging>
			handle_activete_and_reboot(c, hm);
 8014d78:	4621      	mov	r1, r4
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f7ff fc8e 	bl	801469c <handle_activete_and_reboot>
 8014d80:	e633      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014d82:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014d84:	4934      	ldr	r1, [pc, #208]	@ (8014e58 <dashboard+0x4a8>)
 8014d86:	4630      	mov	r0, r6
 8014d88:	f010 fa52 	bl	8025230 <mg_str_s>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d94:	68e1      	ldr	r1, [r4, #12]
 8014d96:	68a0      	ldr	r0, [r4, #8]
 8014d98:	f010 fc6c 	bl	8025674 <mg_match>
 8014d9c:	b120      	cbz	r0, 8014da8 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4628      	mov	r0, r5
 8014da2:	f7fe fae3 	bl	801336c <handle_firmware_deactivate>
 8014da6:	e620      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014da8:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014daa:	492c      	ldr	r1, [pc, #176]	@ (8014e5c <dashboard+0x4ac>)
 8014dac:	4630      	mov	r0, r6
 8014dae:	f010 fa3f 	bl	8025230 <mg_str_s>
 8014db2:	2300      	movs	r3, #0
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014dba:	68e1      	ldr	r1, [r4, #12]
 8014dbc:	68a0      	ldr	r0, [r4, #8]
 8014dbe:	f010 fc59 	bl	8025674 <mg_match>
 8014dc2:	b120      	cbz	r0, 8014dce <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 8014dc4:	4621      	mov	r1, r4
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f7fe fb0c 	bl	80133e4 <handle_web_files_remove>
 8014dcc:	e60d      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014dce:	ae30      	add	r6, sp, #192	@ 0xc0
 8014dd0:	4923      	ldr	r1, [pc, #140]	@ (8014e60 <dashboard+0x4b0>)
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f010 fa2c 	bl	8025230 <mg_str_s>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	9300      	str	r3, [sp, #0]
 8014ddc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014de0:	68e1      	ldr	r1, [r4, #12]
 8014de2:	68a0      	ldr	r0, [r4, #8]
 8014de4:	f010 fc46 	bl	8025674 <mg_match>
 8014de8:	b140      	cbz	r0, 8014dfc <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014dea:	4b1e      	ldr	r3, [pc, #120]	@ (8014e64 <dashboard+0x4b4>)
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	4b1e      	ldr	r3, [pc, #120]	@ (8014e68 <dashboard+0x4b8>)
 8014df0:	4a1e      	ldr	r2, [pc, #120]	@ (8014e6c <dashboard+0x4bc>)
 8014df2:	4621      	mov	r1, r4
 8014df4:	4628      	mov	r0, r5
 8014df6:	f012 fecf 	bl	8027b98 <mg_http_upload>
 8014dfa:	e5f6      	b.n	80149ea <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014dfc:	ae32      	add	r6, sp, #200	@ 0xc8
 8014dfe:	491c      	ldr	r1, [pc, #112]	@ (8014e70 <dashboard+0x4c0>)
 8014e00:	4630      	mov	r0, r6
 8014e02:	f010 fa15 	bl	8025230 <mg_str_s>
 8014e06:	2300      	movs	r3, #0
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014e0e:	68e1      	ldr	r1, [r4, #12]
 8014e10:	68a0      	ldr	r0, [r4, #8]
 8014e12:	f010 fc2f 	bl	8025674 <mg_match>
 8014e16:	b120      	cbz	r0, 8014e22 <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014e18:	4621      	mov	r1, r4
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f7ff fc7a 	bl	8014714 <handle_fs_mkdir>
 8014e20:	e5e3      	b.n	80149ea <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014e22:	2300      	movs	r3, #0
 8014e24:	9302      	str	r3, [sp, #8]
 8014e26:	9303      	str	r3, [sp, #12]
 8014e28:	9304      	str	r3, [sp, #16]
 8014e2a:	9305      	str	r3, [sp, #20]
 8014e2c:	9306      	str	r3, [sp, #24]
 8014e2e:	9307      	str	r3, [sp, #28]
 8014e30:	4b0d      	ldr	r3, [pc, #52]	@ (8014e68 <dashboard+0x4b8>)
 8014e32:	9302      	str	r3, [sp, #8]
 8014e34:	4b0d      	ldr	r3, [pc, #52]	@ (8014e6c <dashboard+0x4bc>)
 8014e36:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014e38:	aa02      	add	r2, sp, #8
 8014e3a:	4621      	mov	r1, r4
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f012 fdc5 	bl	80279cc <mg_http_serve_dir>
}
 8014e42:	e5d2      	b.n	80149ea <dashboard+0x3a>
 8014e44:	0803909c 	.word	0x0803909c
 8014e48:	080390b4 	.word	0x080390b4
 8014e4c:	080390c8 	.word	0x080390c8
 8014e50:	080390e4 	.word	0x080390e4
 8014e54:	080390f8 	.word	0x080390f8
 8014e58:	08039118 	.word	0x08039118
 8014e5c:	08039134 	.word	0x08039134
 8014e60:	08039150 	.word	0x08039150
 8014e64:	0016e360 	.word	0x0016e360
 8014e68:	080373b4 	.word	0x080373b4
 8014e6c:	200000a0 	.word	0x200000a0
 8014e70:	0803916c 	.word	0x0803916c

08014e74 <dash_hdl>:

void * dash_hdl (void){
 8014e74:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8014e76:	220a      	movs	r2, #10
 8014e78:	4902      	ldr	r1, [pc, #8]	@ (8014e84 <dash_hdl+0x10>)
 8014e7a:	4803      	ldr	r0, [pc, #12]	@ (8014e88 <dash_hdl+0x14>)
 8014e7c:	f7ff fbac 	bl	80145d8 <load_users>

	return &dashboard;
}
 8014e80:	4802      	ldr	r0, [pc, #8]	@ (8014e8c <dash_hdl+0x18>)
 8014e82:	bd08      	pop	{r3, pc}
 8014e84:	20002228 	.word	0x20002228
 8014e88:	08037410 	.word	0x08037410
 8014e8c:	080149b1 	.word	0x080149b1

08014e90 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014e90:	4b01      	ldr	r3, [pc, #4]	@ (8014e98 <reg_parameter_handler+0x8>)
 8014e92:	6018      	str	r0, [r3, #0]
}
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	200028c4 	.word	0x200028c4

08014e9c <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8014f08 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	b103      	cbz	r3, 8014ea4 <_ZL18mqtt_timer_handlerPv+0x8>
 8014ea2:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8014ea4:	b530      	push	{r4, r5, lr}
 8014ea6:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014ea8:	4918      	ldr	r1, [pc, #96]	@ (8014f0c <_ZL18mqtt_timer_handlerPv+0x70>)
 8014eaa:	2001      	movs	r0, #1
 8014eac:	f7fd fa10 	bl	80122d0 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014eb0:	4c17      	ldr	r4, [pc, #92]	@ (8014f10 <_ZL18mqtt_timer_handlerPv+0x74>)
 8014eb2:	2240      	movs	r2, #64	@ 0x40
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f018 fd2a 	bl	802d910 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014ebc:	ad02      	add	r5, sp, #8
 8014ebe:	4b15      	ldr	r3, [pc, #84]	@ (8014f14 <_ZL18mqtt_timer_handlerPv+0x78>)
 8014ec0:	6819      	ldr	r1, [r3, #0]
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	f010 f9b4 	bl	8025230 <mg_str_s>
 8014ec8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ecc:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014ed0:	4b11      	ldr	r3, [pc, #68]	@ (8014f18 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8014ed2:	6819      	ldr	r1, [r3, #0]
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f010 f9ab 	bl	8025230 <mg_str_s>
 8014eda:	f104 0308 	add.w	r3, r4, #8
 8014ede:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ee2:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8014ee6:	233c      	movs	r3, #60	@ 0x3c
 8014ee8:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014eea:	2300      	movs	r3, #0
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	4b0b      	ldr	r3, [pc, #44]	@ (8014f1c <_ZL18mqtt_timer_handlerPv+0x80>)
 8014ef0:	4622      	mov	r2, r4
 8014ef2:	490b      	ldr	r1, [pc, #44]	@ (8014f20 <_ZL18mqtt_timer_handlerPv+0x84>)
 8014ef4:	6809      	ldr	r1, [r1, #0]
 8014ef6:	480b      	ldr	r0, [pc, #44]	@ (8014f24 <_ZL18mqtt_timer_handlerPv+0x88>)
 8014ef8:	6800      	ldr	r0, [r0, #0]
 8014efa:	f014 ff0d 	bl	8029d18 <mg_mqtt_connect>
 8014efe:	4b02      	ldr	r3, [pc, #8]	@ (8014f08 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014f00:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014f02:	b005      	add	sp, #20
 8014f04:	bd30      	pop	{r4, r5, pc}
 8014f06:	bf00      	nop
 8014f08:	200028e8 	.word	0x200028e8
 8014f0c:	08039188 	.word	0x08039188
 8014f10:	200028ec 	.word	0x200028ec
 8014f14:	20002940 	.word	0x20002940
 8014f18:	2000293c 	.word	0x2000293c
 8014f1c:	080154f5 	.word	0x080154f5
 8014f20:	20002944 	.word	0x20002944
 8014f24:	20002930 	.word	0x20002930

08014f28 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f2c:	b085      	sub	sp, #20
 8014f2e:	4681      	mov	r9, r0
 8014f30:	4688      	mov	r8, r1
 8014f32:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8014f34:	4c2a      	ldr	r4, [pc, #168]	@ (8014fe0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8014f36:	f100 0308 	add.w	r3, r0, #8
 8014f3a:	9300      	str	r3, [sp, #0]
 8014f3c:	4b29      	ldr	r3, [pc, #164]	@ (8014fe4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8014fe8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014f40:	2128      	movs	r1, #40	@ 0x28
 8014f42:	6820      	ldr	r0, [r4, #0]
 8014f44:	f00f faec 	bl	8024520 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014f48:	6824      	ldr	r4, [r4, #0]
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	f7fb f9a8 	bl	80102a0 <strlen>
 8014f50:	4601      	mov	r1, r0
 8014f52:	4620      	mov	r0, r4
 8014f54:	f000 fc1e 	bl	8015794 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014f58:	2600      	movs	r6, #0
 8014f5a:	e03b      	b.n	8014fd4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014f5c:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014f60:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014f64:	791d      	ldrb	r5, [r3, #4]
 8014f66:	4f21      	ldr	r7, [pc, #132]	@ (8014fec <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014f68:	462b      	mov	r3, r5
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	2180      	movs	r1, #128	@ 0x80
 8014f6e:	6838      	ldr	r0, [r7, #0]
 8014f70:	f000 fc2e 	bl	80157d0 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014f74:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014ff8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014f78:	462b      	mov	r3, r5
 8014f7a:	4622      	mov	r2, r4
 8014f7c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014f80:	f8db 0000 	ldr.w	r0, [fp]
 8014f84:	f000 fcd4 	bl	8015930 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014f88:	4d19      	ldr	r5, [pc, #100]	@ (8014ff0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014f8a:	ac02      	add	r4, sp, #8
 8014f8c:	6839      	ldr	r1, [r7, #0]
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f010 f94e 	bl	8025230 <mg_str_s>
 8014f94:	f105 0318 	add.w	r3, r5, #24
 8014f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014f9c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014fa0:	f8db 1000 	ldr.w	r1, [fp]
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f010 f943 	bl	8025230 <mg_str_s>
 8014faa:	f105 0320 	add.w	r3, r5, #32
 8014fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014fb2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014fb6:	2401      	movs	r4, #1
 8014fb8:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014fbc:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014fc0:	4629      	mov	r1, r5
 8014fc2:	4648      	mov	r0, r9
 8014fc4:	f013 fc0e 	bl	80287e4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014fc8:	683a      	ldr	r2, [r7, #0]
 8014fca:	490a      	ldr	r1, [pc, #40]	@ (8014ff4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f7fd f97f 	bl	80122d0 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014fd2:	4426      	add	r6, r4
 8014fd4:	4556      	cmp	r6, sl
 8014fd6:	d3c1      	bcc.n	8014f5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014fd8:	b005      	add	sp, #20
 8014fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fde:	bf00      	nop
 8014fe0:	200028e4 	.word	0x200028e4
 8014fe4:	08026fb1 	.word	0x08026fb1
 8014fe8:	08038794 	.word	0x08038794
 8014fec:	20002938 	.word	0x20002938
 8014ff0:	200028ec 	.word	0x200028ec
 8014ff4:	080391a8 	.word	0x080391a8
 8014ff8:	20002934 	.word	0x20002934

08014ffc <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014ffc:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014ffe:	fb01 f400 	mul.w	r4, r1, r0
 8015002:	4620      	mov	r0, r4
 8015004:	f006 fc38 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015008:	4605      	mov	r5, r0
 801500a:	b118      	cbz	r0, 8015014 <_ZL9my_callocjj+0x18>
 801500c:	4622      	mov	r2, r4
 801500e:	2100      	movs	r1, #0
 8015010:	f018 fc7e 	bl	802d910 <memset>
}
 8015014:	4628      	mov	r0, r5
 8015016:	bd38      	pop	{r3, r4, r5, pc}

08015018 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8015018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801501c:	b087      	sub	sp, #28
 801501e:	4607      	mov	r7, r0
 8015020:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8015022:	4d58      	ldr	r5, [pc, #352]	@ (8015184 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	2200      	movs	r2, #0
 8015028:	2101      	movs	r1, #1
 801502a:	a804      	add	r0, sp, #16
 801502c:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 801502e:	682b      	ldr	r3, [r5, #0]
 8015030:	2200      	movs	r2, #0
 8015032:	2102      	movs	r1, #2
 8015034:	f10d 0013 	add.w	r0, sp, #19
 8015038:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 801503a:	2203      	movs	r2, #3
 801503c:	4952      	ldr	r1, [pc, #328]	@ (8015188 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 801503e:	a804      	add	r0, sp, #16
 8015040:	f018 fbd2 	bl	802d7e8 <memcmp>
 8015044:	b948      	cbnz	r0, 801505a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8015046:	2203      	movs	r2, #3
 8015048:	4950      	ldr	r1, [pc, #320]	@ (801518c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 801504a:	f10d 0013 	add.w	r0, sp, #19
 801504e:	f018 fbcb 	bl	802d7e8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8015052:	b910      	cbnz	r0, 801505a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8015054:	2c00      	cmp	r4, #0
 8015056:	f000 8091 	beq.w	801517c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 801505a:	4b4b      	ldr	r3, [pc, #300]	@ (8015188 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 801505c:	aa06      	add	r2, sp, #24
 801505e:	e912 0003 	ldmdb	r2, {r0, r1}
 8015062:	6018      	str	r0, [r3, #0]
 8015064:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8015066:	2101      	movs	r1, #1
 8015068:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801506c:	f7ff ffc6 	bl	8014ffc <_ZL9my_callocjj>
 8015070:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8015072:	2101      	movs	r1, #1
 8015074:	2080      	movs	r0, #128	@ 0x80
 8015076:	f7ff ffc1 	bl	8014ffc <_ZL9my_callocjj>
 801507a:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 801507c:	2200      	movs	r2, #0
 801507e:	e038      	b.n	80150f2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8015080:	f102 0801 	add.w	r8, r2, #1
 8015084:	fa5f f888 	uxtb.w	r8, r8
 8015088:	f102 0318 	add.w	r3, r2, #24
 801508c:	eb0d 0203 	add.w	r2, sp, r3
 8015090:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	4643      	mov	r3, r8
 8015098:	2201      	movs	r2, #1
 801509a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 801509e:	4630      	mov	r0, r6
 80150a0:	f000 fe3a 	bl	8015d18 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 80150a4:	4643      	mov	r3, r8
 80150a6:	2201      	movs	r2, #1
 80150a8:	2180      	movs	r1, #128	@ 0x80
 80150aa:	4628      	mov	r0, r5
 80150ac:	f000 fe74 	bl	8015d98 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 80150b0:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8015190 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 80150b4:	ac02      	add	r4, sp, #8
 80150b6:	4629      	mov	r1, r5
 80150b8:	4620      	mov	r0, r4
 80150ba:	f010 f8b9 	bl	8025230 <mg_str_s>
 80150be:	f109 0318 	add.w	r3, r9, #24
 80150c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80150c6:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80150ca:	4631      	mov	r1, r6
 80150cc:	4620      	mov	r0, r4
 80150ce:	f010 f8af 	bl	8025230 <mg_str_s>
 80150d2:	f109 0320 	add.w	r3, r9, #32
 80150d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80150da:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80150de:	2300      	movs	r3, #0
 80150e0:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80150e4:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80150e8:	4649      	mov	r1, r9
 80150ea:	4638      	mov	r0, r7
 80150ec:	f013 fb7a 	bl	80287e4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 80150f0:	4642      	mov	r2, r8
 80150f2:	2a02      	cmp	r2, #2
 80150f4:	d9c4      	bls.n	8015080 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 80150f6:	2200      	movs	r2, #0
 80150f8:	e038      	b.n	801516c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 80150fa:	f102 0801 	add.w	r8, r2, #1
 80150fe:	fa5f f888 	uxtb.w	r8, r8
 8015102:	f102 0318 	add.w	r3, r2, #24
 8015106:	eb0d 0203 	add.w	r2, sp, r3
 801510a:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	4643      	mov	r3, r8
 8015112:	2202      	movs	r2, #2
 8015114:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8015118:	4630      	mov	r0, r6
 801511a:	f000 fdfd 	bl	8015d18 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 801511e:	4643      	mov	r3, r8
 8015120:	2202      	movs	r2, #2
 8015122:	2180      	movs	r1, #128	@ 0x80
 8015124:	4628      	mov	r0, r5
 8015126:	f000 fe37 	bl	8015d98 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 801512a:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8015190 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 801512e:	ac02      	add	r4, sp, #8
 8015130:	4629      	mov	r1, r5
 8015132:	4620      	mov	r0, r4
 8015134:	f010 f87c 	bl	8025230 <mg_str_s>
 8015138:	f109 0318 	add.w	r3, r9, #24
 801513c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015140:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8015144:	4631      	mov	r1, r6
 8015146:	4620      	mov	r0, r4
 8015148:	f010 f872 	bl	8025230 <mg_str_s>
 801514c:	f109 0320 	add.w	r3, r9, #32
 8015150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015154:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 801515e:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8015162:	4649      	mov	r1, r9
 8015164:	4638      	mov	r0, r7
 8015166:	f013 fb3d 	bl	80287e4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 801516a:	4642      	mov	r2, r8
 801516c:	2a02      	cmp	r2, #2
 801516e:	d9c4      	bls.n	80150fa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8015170:	4630      	mov	r0, r6
 8015172:	f006 fc03 	bl	801b97c <vPortFree>
		free(topik);
 8015176:	4628      	mov	r0, r5
 8015178:	f006 fc00 	bl	801b97c <vPortFree>
}
 801517c:	b007      	add	sp, #28
 801517e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015182:	bf00      	nop
 8015184:	200028d0 	.word	0x200028d0
 8015188:	200028c8 	.word	0x200028c8
 801518c:	200028cb 	.word	0x200028cb
 8015190:	200028ec 	.word	0x200028ec

08015194 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8015194:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8015196:	4b05      	ldr	r3, [pc, #20]	@ (80151ac <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8015198:	6818      	ldr	r0, [r3, #0]
 801519a:	b110      	cbz	r0, 80151a2 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 801519c:	4b04      	ldr	r3, [pc, #16]	@ (80151b0 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	b903      	cbnz	r3, 80151a4 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 80151a2:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 80151a4:	2100      	movs	r1, #0
 80151a6:	f7ff ff37 	bl	8015018 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80151aa:	e7fa      	b.n	80151a2 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 80151ac:	200028e8 	.word	0x200028e8
 80151b0:	200028d4 	.word	0x200028d4

080151b4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 80151b4:	b508      	push	{r3, lr}
	if(is_registered){
 80151b6:	4b05      	ldr	r3, [pc, #20]	@ (80151cc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	b903      	cbnz	r3, 80151be <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 80151bc:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 80151be:	2101      	movs	r1, #1
 80151c0:	4b03      	ldr	r3, [pc, #12]	@ (80151d0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 80151c2:	6818      	ldr	r0, [r3, #0]
 80151c4:	f7ff ff28 	bl	8015018 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80151c8:	e7f8      	b.n	80151bc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 80151ca:	bf00      	nop
 80151cc:	200028d4 	.word	0x200028d4
 80151d0:	200028e8 	.word	0x200028e8

080151d4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80151d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d8:	b083      	sub	sp, #12
 80151da:	4681      	mov	r9, r0
 80151dc:	460d      	mov	r5, r1
 80151de:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 80151e0:	2400      	movs	r4, #0
 80151e2:	e000      	b.n	80151e6 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 80151e4:	3401      	adds	r4, #1
 80151e6:	42b4      	cmp	r4, r6
 80151e8:	d22e      	bcs.n	8015248 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80151ea:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80151ee:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80151f2:	2b02      	cmp	r3, #2
 80151f4:	d1f6      	bne.n	80151e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80151f6:	2101      	movs	r1, #1
 80151f8:	2080      	movs	r0, #128	@ 0x80
 80151fa:	f7ff feff 	bl	8014ffc <_ZL9my_callocjj>
 80151fe:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8015200:	f898 3004 	ldrb.w	r3, [r8, #4]
 8015204:	2202      	movs	r2, #2
 8015206:	2180      	movs	r1, #128	@ 0x80
 8015208:	f000 fdae 	bl	8015d68 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 801520c:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8015254 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8015210:	f04f 0b01 	mov.w	fp, #1
 8015214:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8015218:	46ea      	mov	sl, sp
 801521a:	4639      	mov	r1, r7
 801521c:	4650      	mov	r0, sl
 801521e:	f010 f807 	bl	8025230 <mg_str_s>
 8015222:	f108 0318 	add.w	r3, r8, #24
 8015226:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801522a:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 801522e:	4641      	mov	r1, r8
 8015230:	4648      	mov	r0, r9
 8015232:	f013 fa89 	bl	8028748 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8015236:	463a      	mov	r2, r7
 8015238:	4905      	ldr	r1, [pc, #20]	@ (8015250 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 801523a:	4658      	mov	r0, fp
 801523c:	f7fd f848 	bl	80122d0 <logging>
			free(topik);
 8015240:	4638      	mov	r0, r7
 8015242:	f006 fb9b 	bl	801b97c <vPortFree>
 8015246:	e7cd      	b.n	80151e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8015248:	b003      	add	sp, #12
 801524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801524e:	bf00      	nop
 8015250:	080391cc 	.word	0x080391cc
 8015254:	200028ec 	.word	0x200028ec

08015258 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8015258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801525c:	b087      	sub	sp, #28
	int relay_number = 0;  // Переменная для хранения номера реле
 801525e:	2300      	movs	r3, #0
 8015260:	9303      	str	r3, [sp, #12]
    const char *topic = mess->topic.buf;
 8015262:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 8015264:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 8015266:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8015268:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 801526a:	b1ac      	cbz	r4, 8015298 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 801526c:	b1a7      	cbz	r7, 8015298 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 801526e:	b105      	cbz	r5, 8015272 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8015270:	bb0e      	cbnz	r6, 80152b6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 8015272:	498c      	ldr	r1, [pc, #560]	@ (80154a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8015274:	2003      	movs	r0, #3
 8015276:	f7fd f82b 	bl	80122d0 <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 801527a:	4b8b      	ldr	r3, [pc, #556]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	f340 8101 	ble.w	8015486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 8015284:	4b89      	ldr	r3, [pc, #548]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015286:	229a      	movs	r2, #154	@ 0x9a
 8015288:	4989      	ldr	r1, [pc, #548]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801528a:	2001      	movs	r0, #1
 801528c:	f011 ff44 	bl	8027118 <mg_log_prefix>
 8015290:	4888      	ldr	r0, [pc, #544]	@ (80154b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 8015292:	f00f fdef 	bl	8024e74 <mg_log>
    	return;
 8015296:	e0f6      	b.n	8015486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8015298:	4b83      	ldr	r3, [pc, #524]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	f340 80f2 	ble.w	8015486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 80152a2:	4b82      	ldr	r3, [pc, #520]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80152a4:	2294      	movs	r2, #148	@ 0x94
 80152a6:	4982      	ldr	r1, [pc, #520]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80152a8:	2001      	movs	r0, #1
 80152aa:	f011 ff35 	bl	8027118 <mg_log_prefix>
 80152ae:	4882      	ldr	r0, [pc, #520]	@ (80154b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 80152b0:	f00f fde0 	bl	8024e74 <mg_log>
    	return;
 80152b4:	e0e7      	b.n	8015486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 80152b6:	2101      	movs	r1, #1
 80152b8:	1870      	adds	r0, r6, r1
 80152ba:	f7ff fe9f 	bl	8014ffc <_ZL9my_callocjj>
 80152be:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 80152c0:	2101      	movs	r1, #1
 80152c2:	1868      	adds	r0, r5, r1
 80152c4:	f7ff fe9a 	bl	8014ffc <_ZL9my_callocjj>
 80152c8:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 80152ca:	4632      	mov	r2, r6
 80152cc:	4621      	mov	r1, r4
 80152ce:	4648      	mov	r0, r9
 80152d0:	f018 fb65 	bl	802d99e <strncpy>
    strncpy(local_topic, topic, topic_len);
 80152d4:	462a      	mov	r2, r5
 80152d6:	4639      	mov	r1, r7
 80152d8:	4640      	mov	r0, r8
 80152da:	f018 fb60 	bl	802d99e <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80152de:	4b77      	ldr	r3, [pc, #476]	@ (80154bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2200      	movs	r2, #0
 80152e4:	2102      	movs	r1, #2
 80152e6:	a805      	add	r0, sp, #20
 80152e8:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80152ea:	9b05      	ldr	r3, [sp, #20]
 80152ec:	f8ad 3010 	strh.w	r3, [sp, #16]
 80152f0:	0c1b      	lsrs	r3, r3, #16
 80152f2:	f88d 3012 	strb.w	r3, [sp, #18]
    const char *switch_position = strstr(local_topic, "switch");
 80152f6:	4972      	ldr	r1, [pc, #456]	@ (80154c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 80152f8:	4640      	mov	r0, r8
 80152fa:	f018 fb89 	bl	802da10 <strstr>
    if (switch_position != NULL) {
 80152fe:	2800      	cmp	r0, #0
 8015300:	f000 80b2 	beq.w	8015468 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8015304:	aa03      	add	r2, sp, #12
 8015306:	496f      	ldr	r1, [pc, #444]	@ (80154c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 8015308:	f017 ff60 	bl	802d1cc <sscanf>
 801530c:	2801      	cmp	r0, #1
 801530e:	d009      	beq.n	8015324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8015310:	4b65      	ldr	r3, [pc, #404]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	f300 809d 	bgt.w	8015454 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 801531a:	496b      	ldr	r1, [pc, #428]	@ (80154c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 801531c:	2003      	movs	r0, #3
 801531e:	f7fc ffd7 	bl	80122d0 <logging>
 8015322:	e0aa      	b.n	801547a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015324:	4b60      	ldr	r3, [pc, #384]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2b01      	cmp	r3, #1
 801532a:	dc19      	bgt.n	8015360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x108>
    		logging(L_INFO, "Recv control message in topik %s, relay number %d, action %s", local_topic, relay_number, local_message);
 801532c:	f8cd 9000 	str.w	r9, [sp]
 8015330:	9b03      	ldr	r3, [sp, #12]
 8015332:	4642      	mov	r2, r8
 8015334:	4965      	ldr	r1, [pc, #404]	@ (80154cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 8015336:	2001      	movs	r0, #1
 8015338:	f7fc ffca 	bl	80122d0 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 801533c:	9c03      	ldr	r4, [sp, #12]
 801533e:	1e63      	subs	r3, r4, #1
 8015340:	2b02      	cmp	r3, #2
 8015342:	d819      	bhi.n	8015378 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x120>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 8015344:	2e02      	cmp	r6, #2
 8015346:	d034      	beq.n	80153b2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15a>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015348:	2e03      	cmp	r6, #3
 801534a:	d055      	beq.n	80153f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a0>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 801534c:	4b56      	ldr	r3, [pc, #344]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	dc74      	bgt.n	801543e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 8015354:	464a      	mov	r2, r9
 8015356:	495e      	ldr	r1, [pc, #376]	@ (80154d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015358:	2003      	movs	r0, #3
 801535a:	f7fc ffb9 	bl	80122d0 <logging>
 801535e:	e08c      	b.n	801547a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015360:	4b52      	ldr	r3, [pc, #328]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015362:	22ad      	movs	r2, #173	@ 0xad
 8015364:	4952      	ldr	r1, [pc, #328]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015366:	2002      	movs	r0, #2
 8015368:	f011 fed6 	bl	8027118 <mg_log_prefix>
 801536c:	4642      	mov	r2, r8
 801536e:	9903      	ldr	r1, [sp, #12]
 8015370:	4858      	ldr	r0, [pc, #352]	@ (80154d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 8015372:	f00f fd7f 	bl	8024e74 <mg_log>
 8015376:	e7d9      	b.n	801532c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015378:	4b4b      	ldr	r3, [pc, #300]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	dc0c      	bgt.n	801539a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x142>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8015380:	9b03      	ldr	r3, [sp, #12]
 8015382:	2203      	movs	r2, #3
 8015384:	4954      	ldr	r1, [pc, #336]	@ (80154d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8015386:	4610      	mov	r0, r2
 8015388:	f7fc ffa2 	bl	80122d0 <logging>
    		    free(local_message);
 801538c:	4648      	mov	r0, r9
 801538e:	f006 faf5 	bl	801b97c <vPortFree>
    		    free(local_topic);
 8015392:	4640      	mov	r0, r8
 8015394:	f006 faf2 	bl	801b97c <vPortFree>
    			return;
 8015398:	e075      	b.n	8015486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801539a:	4b44      	ldr	r3, [pc, #272]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801539c:	22b2      	movs	r2, #178	@ 0xb2
 801539e:	4944      	ldr	r1, [pc, #272]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80153a0:	2001      	movs	r0, #1
 80153a2:	f011 feb9 	bl	8027118 <mg_log_prefix>
 80153a6:	9a03      	ldr	r2, [sp, #12]
 80153a8:	2103      	movs	r1, #3
 80153aa:	484b      	ldr	r0, [pc, #300]	@ (80154d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 80153ac:	f00f fd62 	bl	8024e74 <mg_log>
 80153b0:	e7e6      	b.n	8015380 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x128>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 80153b2:	2202      	movs	r2, #2
 80153b4:	4949      	ldr	r1, [pc, #292]	@ (80154dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 80153b6:	4648      	mov	r0, r9
 80153b8:	f018 fadf 	bl	802d97a <strncmp>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d1c3      	bne.n	8015348 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 1;
 80153c0:	f104 0317 	add.w	r3, r4, #23
 80153c4:	446b      	add	r3, sp
 80153c6:	2201      	movs	r2, #1
 80153c8:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80153cc:	4b36      	ldr	r3, [pc, #216]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	4293      	cmp	r3, r2
 80153d2:	dc06      	bgt.n	80153e2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18a>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80153d4:	4b39      	ldr	r3, [pc, #228]	@ (80154bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2201      	movs	r2, #1
 80153da:	2102      	movs	r1, #2
 80153dc:	a804      	add	r0, sp, #16
 80153de:	4798      	blx	r3
 80153e0:	e04b      	b.n	801547a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80153e2:	4b32      	ldr	r3, [pc, #200]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80153e4:	22bf      	movs	r2, #191	@ 0xbf
 80153e6:	4932      	ldr	r1, [pc, #200]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80153e8:	2002      	movs	r0, #2
 80153ea:	f011 fe95 	bl	8027118 <mg_log_prefix>
 80153ee:	9903      	ldr	r1, [sp, #12]
 80153f0:	483b      	ldr	r0, [pc, #236]	@ (80154e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 80153f2:	f00f fd3f 	bl	8024e74 <mg_log>
 80153f6:	e7ed      	b.n	80153d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17c>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 80153f8:	2203      	movs	r2, #3
 80153fa:	493a      	ldr	r1, [pc, #232]	@ (80154e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 80153fc:	4648      	mov	r0, r9
 80153fe:	f018 fabc 	bl	802d97a <strncmp>
 8015402:	2800      	cmp	r0, #0
 8015404:	d1a2      	bne.n	801534c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf4>
				sw_w[relay_number-1] = 0;
 8015406:	f104 0317 	add.w	r3, r4, #23
 801540a:	446b      	add	r3, sp
 801540c:	2200      	movs	r2, #0
 801540e:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8015412:	4b25      	ldr	r3, [pc, #148]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2b01      	cmp	r3, #1
 8015418:	dc06      	bgt.n	8015428 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d0>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801541a:	4b28      	ldr	r3, [pc, #160]	@ (80154bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2201      	movs	r2, #1
 8015420:	2102      	movs	r1, #2
 8015422:	a804      	add	r0, sp, #16
 8015424:	4798      	blx	r3
 8015426:	e028      	b.n	801547a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8015428:	4b20      	ldr	r3, [pc, #128]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801542a:	22c3      	movs	r2, #195	@ 0xc3
 801542c:	4920      	ldr	r1, [pc, #128]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801542e:	2002      	movs	r0, #2
 8015430:	f011 fe72 	bl	8027118 <mg_log_prefix>
 8015434:	9903      	ldr	r1, [sp, #12]
 8015436:	482c      	ldr	r0, [pc, #176]	@ (80154e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 8015438:	f00f fd1c 	bl	8024e74 <mg_log>
 801543c:	e7ed      	b.n	801541a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 801543e:	4b1b      	ldr	r3, [pc, #108]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015440:	22c7      	movs	r2, #199	@ 0xc7
 8015442:	491b      	ldr	r1, [pc, #108]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015444:	2001      	movs	r0, #1
 8015446:	f011 fe67 	bl	8027118 <mg_log_prefix>
 801544a:	4649      	mov	r1, r9
 801544c:	4820      	ldr	r0, [pc, #128]	@ (80154d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 801544e:	f00f fd11 	bl	8024e74 <mg_log>
 8015452:	e77f      	b.n	8015354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8015454:	4b15      	ldr	r3, [pc, #84]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015456:	22cc      	movs	r2, #204	@ 0xcc
 8015458:	4915      	ldr	r1, [pc, #84]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801545a:	2001      	movs	r0, #1
 801545c:	f011 fe5c 	bl	8027118 <mg_log_prefix>
 8015460:	4822      	ldr	r0, [pc, #136]	@ (80154ec <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 8015462:	f00f fd07 	bl	8024e74 <mg_log>
 8015466:	e758      	b.n	801531a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015468:	4b0f      	ldr	r3, [pc, #60]	@ (80154a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	dc0d      	bgt.n	801548c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 8015470:	4642      	mov	r2, r8
 8015472:	491f      	ldr	r1, [pc, #124]	@ (80154f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 8015474:	2003      	movs	r0, #3
 8015476:	f7fc ff2b 	bl	80122d0 <logging>
    free(local_message);
 801547a:	4648      	mov	r0, r9
 801547c:	f006 fa7e 	bl	801b97c <vPortFree>
    free(local_topic);
 8015480:	4640      	mov	r0, r8
 8015482:	f006 fa7b 	bl	801b97c <vPortFree>
}
 8015486:	b007      	add	sp, #28
 8015488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 801548c:	4b07      	ldr	r3, [pc, #28]	@ (80154ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801548e:	22d0      	movs	r2, #208	@ 0xd0
 8015490:	4907      	ldr	r1, [pc, #28]	@ (80154b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015492:	2001      	movs	r0, #1
 8015494:	f011 fe40 	bl	8027118 <mg_log_prefix>
 8015498:	4641      	mov	r1, r8
 801549a:	4815      	ldr	r0, [pc, #84]	@ (80154f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 801549c:	f00f fcea 	bl	8024e74 <mg_log>
 80154a0:	e7e6      	b.n	8015470 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 80154a2:	bf00      	nop
 80154a4:	08039258 	.word	0x08039258
 80154a8:	2000012c 	.word	0x2000012c
 80154ac:	080391e8 	.word	0x080391e8
 80154b0:	08039208 	.word	0x08039208
 80154b4:	08039280 	.word	0x08039280
 80154b8:	08039234 	.word	0x08039234
 80154bc:	200028d0 	.word	0x200028d0
 80154c0:	080392ac 	.word	0x080392ac
 80154c4:	080392b4 	.word	0x080392b4
 80154c8:	08039420 	.word	0x08039420
 80154cc:	080392ec 	.word	0x080392ec
 80154d0:	080393ac 	.word	0x080393ac
 80154d4:	080392c0 	.word	0x080392c0
 80154d8:	0803932c 	.word	0x0803932c
 80154dc:	0803937c 	.word	0x0803937c
 80154e0:	08039380 	.word	0x08039380
 80154e4:	08039394 	.word	0x08039394
 80154e8:	08039398 	.word	0x08039398
 80154ec:	080393e8 	.word	0x080393e8
 80154f0:	08039458 	.word	0x08039458

080154f4 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80154f4:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80154f6:	2910      	cmp	r1, #16
 80154f8:	d031      	beq.n	801555e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 80154fa:	4605      	mov	r5, r0
 80154fc:	2911      	cmp	r1, #17
 80154fe:	d002      	beq.n	8015506 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8015500:	2909      	cmp	r1, #9
 8015502:	d03a      	beq.n	801557a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8015504:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8015506:	4b22      	ldr	r3, [pc, #136]	@ (8015590 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b02      	cmp	r3, #2
 801550c:	dc1d      	bgt.n	801554a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 801550e:	4921      	ldr	r1, [pc, #132]	@ (8015594 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8015510:	2001      	movs	r0, #1
 8015512:	f7fc fedd 	bl	80122d0 <logging>
		mqtt_conn = conn;
 8015516:	4b20      	ldr	r3, [pc, #128]	@ (8015598 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015518:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 801551a:	4b20      	ldr	r3, [pc, #128]	@ (801559c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d1f0      	bne.n	8015504 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8015522:	4e1f      	ldr	r6, [pc, #124]	@ (80155a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8015524:	2206      	movs	r2, #6
 8015526:	4631      	mov	r1, r6
 8015528:	4628      	mov	r0, r5
 801552a:	f7ff fcfd 	bl	8014f28 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 801552e:	4c1a      	ldr	r4, [pc, #104]	@ (8015598 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015530:	2101      	movs	r1, #1
 8015532:	6820      	ldr	r0, [r4, #0]
 8015534:	f7ff fd70 	bl	8015018 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8015538:	2206      	movs	r2, #6
 801553a:	4631      	mov	r1, r6
 801553c:	6820      	ldr	r0, [r4, #0]
 801553e:	f7ff fe49 	bl	80151d4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8015542:	4b16      	ldr	r3, [pc, #88]	@ (801559c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015544:	2201      	movs	r2, #1
 8015546:	701a      	strb	r2, [r3, #0]
 8015548:	e7dc      	b.n	8015504 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 801554a:	4b16      	ldr	r3, [pc, #88]	@ (80155a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 801554c:	22e1      	movs	r2, #225	@ 0xe1
 801554e:	4916      	ldr	r1, [pc, #88]	@ (80155a8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8015550:	2003      	movs	r0, #3
 8015552:	f011 fde1 	bl	8027118 <mg_log_prefix>
 8015556:	4815      	ldr	r0, [pc, #84]	@ (80155ac <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8015558:	f00f fc8c 	bl	8024e74 <mg_log>
 801555c:	e7d7      	b.n	801550e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 801555e:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8015560:	4913      	ldr	r1, [pc, #76]	@ (80155b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8015562:	2001      	movs	r0, #1
 8015564:	f7fc feb4 	bl	80122d0 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8015568:	4620      	mov	r0, r4
 801556a:	f7ff fe75 	bl	8015258 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 801556e:	2100      	movs	r1, #0
 8015570:	4b09      	ldr	r3, [pc, #36]	@ (8015598 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015572:	6818      	ldr	r0, [r3, #0]
 8015574:	f7ff fd50 	bl	8015018 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8015578:	e7c4      	b.n	8015504 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 801557a:	490e      	ldr	r1, [pc, #56]	@ (80155b4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 801557c:	2001      	movs	r0, #1
 801557e:	f7fc fea7 	bl	80122d0 <logging>
		mqtt_conn     = NULL;
 8015582:	2300      	movs	r3, #0
 8015584:	4a04      	ldr	r2, [pc, #16]	@ (8015598 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015586:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8015588:	4a04      	ldr	r2, [pc, #16]	@ (801559c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801558a:	7013      	strb	r3, [r2, #0]
}
 801558c:	e7ba      	b.n	8015504 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 801558e:	bf00      	nop
 8015590:	2000012c 	.word	0x2000012c
 8015594:	080394b4 	.word	0x080394b4
 8015598:	200028e8 	.word	0x200028e8
 801559c:	200028d4 	.word	0x200028d4
 80155a0:	200000c8 	.word	0x200000c8
 80155a4:	08039488 	.word	0x08039488
 80155a8:	08039208 	.word	0x08039208
 80155ac:	0803949c 	.word	0x0803949c
 80155b0:	080394cc 	.word	0x080394cc
 80155b4:	080394f0 	.word	0x080394f0

080155b8 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 80155b8:	4b01      	ldr	r3, [pc, #4]	@ (80155c0 <get_mqtt_connection+0x8>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop
 80155c0:	200028e8 	.word	0x200028e8

080155c4 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80155c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155c8:	b086      	sub	sp, #24
 80155ca:	4606      	mov	r6, r0
 80155cc:	460c      	mov	r4, r1
 80155ce:	4691      	mov	r9, r2
 80155d0:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80155d2:	2101      	movs	r1, #1
 80155d4:	2080      	movs	r0, #128	@ 0x80
 80155d6:	f7ff fd11 	bl	8014ffc <_ZL9my_callocjj>
 80155da:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8015724 <mqtt_init+0x160>
 80155de:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80155e2:	2101      	movs	r1, #1
 80155e4:	2021      	movs	r0, #33	@ 0x21
 80155e6:	f7ff fd09 	bl	8014ffc <_ZL9my_callocjj>
 80155ea:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8015728 <mqtt_init+0x164>
 80155ee:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80155f2:	2101      	movs	r1, #1
 80155f4:	2021      	movs	r0, #33	@ 0x21
 80155f6:	f7ff fd01 	bl	8014ffc <_ZL9my_callocjj>
 80155fa:	4f3b      	ldr	r7, [pc, #236]	@ (80156e8 <mqtt_init+0x124>)
 80155fc:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80155fe:	2101      	movs	r1, #1
 8015600:	2080      	movs	r0, #128	@ 0x80
 8015602:	f7ff fcfb 	bl	8014ffc <_ZL9my_callocjj>
 8015606:	4b39      	ldr	r3, [pc, #228]	@ (80156ec <mqtt_init+0x128>)
 8015608:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 801560a:	2101      	movs	r1, #1
 801560c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015610:	f7ff fcf4 	bl	8014ffc <_ZL9my_callocjj>
 8015614:	4b36      	ldr	r3, [pc, #216]	@ (80156f0 <mqtt_init+0x12c>)
 8015616:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8015618:	2101      	movs	r1, #1
 801561a:	2028      	movs	r0, #40	@ 0x28
 801561c:	f7ff fcee 	bl	8014ffc <_ZL9my_callocjj>
 8015620:	4b34      	ldr	r3, [pc, #208]	@ (80156f4 <mqtt_init+0x130>)
 8015622:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8015624:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015626:	4b34      	ldr	r3, [pc, #208]	@ (80156f8 <mqtt_init+0x134>)
 8015628:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 801562a:	f8da a000 	ldr.w	sl, [sl]
 801562e:	4649      	mov	r1, r9
 8015630:	4650      	mov	r0, sl
 8015632:	f019 fea1 	bl	802f378 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8015636:	f8d8 9000 	ldr.w	r9, [r8]
 801563a:	4629      	mov	r1, r5
 801563c:	4648      	mov	r0, r9
 801563e:	f019 fe9b 	bl	802f378 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8015642:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015644:	6838      	ldr	r0, [r7, #0]
 8015646:	f019 fe97 	bl	802f378 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 801564a:	464b      	mov	r3, r9
 801564c:	4652      	mov	r2, sl
 801564e:	492b      	ldr	r1, [pc, #172]	@ (80156fc <mqtt_init+0x138>)
 8015650:	2001      	movs	r0, #1
 8015652:	f7fc fe3d 	bl	80122d0 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8015656:	4d2a      	ldr	r5, [pc, #168]	@ (8015700 <mqtt_init+0x13c>)
 8015658:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 801565a:	4b2a      	ldr	r3, [pc, #168]	@ (8015704 <mqtt_init+0x140>)
 801565c:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 801565e:	2106      	movs	r1, #6
 8015660:	4620      	mov	r0, r4
 8015662:	f000 f871 	bl	8015748 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8015666:	4e28      	ldr	r6, [pc, #160]	@ (8015708 <mqtt_init+0x144>)
 8015668:	ac04      	add	r4, sp, #16
 801566a:	f8d8 1000 	ldr.w	r1, [r8]
 801566e:	4620      	mov	r0, r4
 8015670:	f00f fdde 	bl	8025230 <mg_str_s>
 8015674:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015678:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 801567c:	6839      	ldr	r1, [r7, #0]
 801567e:	4620      	mov	r0, r4
 8015680:	f00f fdd6 	bl	8025230 <mg_str_s>
 8015684:	f106 0308 	add.w	r3, r6, #8
 8015688:	e894 0003 	ldmia.w	r4, {r0, r1}
 801568c:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8015690:	233c      	movs	r3, #60	@ 0x3c
 8015692:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8015694:	2400      	movs	r4, #0
 8015696:	9402      	str	r4, [sp, #8]
 8015698:	4b1c      	ldr	r3, [pc, #112]	@ (801570c <mqtt_init+0x148>)
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	2303      	movs	r3, #3
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80156a4:	2300      	movs	r3, #0
 80156a6:	6828      	ldr	r0, [r5, #0]
 80156a8:	f010 ffa4 	bl	80265f4 <mg_timer_add>
 80156ac:	4b18      	ldr	r3, [pc, #96]	@ (8015710 <mqtt_init+0x14c>)
 80156ae:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80156b0:	9402      	str	r4, [sp, #8]
 80156b2:	4b18      	ldr	r3, [pc, #96]	@ (8015714 <mqtt_init+0x150>)
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	2601      	movs	r6, #1
 80156b8:	9600      	str	r6, [sp, #0]
 80156ba:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80156be:	2300      	movs	r3, #0
 80156c0:	6828      	ldr	r0, [r5, #0]
 80156c2:	f010 ff97 	bl	80265f4 <mg_timer_add>
 80156c6:	4b14      	ldr	r3, [pc, #80]	@ (8015718 <mqtt_init+0x154>)
 80156c8:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80156ca:	9402      	str	r4, [sp, #8]
 80156cc:	4b13      	ldr	r3, [pc, #76]	@ (801571c <mqtt_init+0x158>)
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	9600      	str	r6, [sp, #0]
 80156d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80156d6:	2300      	movs	r3, #0
 80156d8:	6828      	ldr	r0, [r5, #0]
 80156da:	f010 ff8b 	bl	80265f4 <mg_timer_add>
 80156de:	4b10      	ldr	r3, [pc, #64]	@ (8015720 <mqtt_init+0x15c>)
 80156e0:	6018      	str	r0, [r3, #0]

}
 80156e2:	b006      	add	sp, #24
 80156e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e8:	2000293c 	.word	0x2000293c
 80156ec:	20002938 	.word	0x20002938
 80156f0:	20002934 	.word	0x20002934
 80156f4:	200028e4 	.word	0x200028e4
 80156f8:	200028d0 	.word	0x200028d0
 80156fc:	08039508 	.word	0x08039508
 8015700:	20002930 	.word	0x20002930
 8015704:	2000292c 	.word	0x2000292c
 8015708:	200028ec 	.word	0x200028ec
 801570c:	08014e9d 	.word	0x08014e9d
 8015710:	200028e0 	.word	0x200028e0
 8015714:	080151b5 	.word	0x080151b5
 8015718:	200028dc 	.word	0x200028dc
 801571c:	08015195 	.word	0x08015195
 8015720:	200028d8 	.word	0x200028d8
 8015724:	20002944 	.word	0x20002944
 8015728:	20002940 	.word	0x20002940

0801572c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 801572c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801572e:	fb01 f400 	mul.w	r4, r1, r0
 8015732:	4620      	mov	r0, r4
 8015734:	f006 f8a0 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015738:	4605      	mov	r5, r0
 801573a:	b118      	cbz	r0, 8015744 <_ZL9my_callocjj+0x18>
 801573c:	4622      	mov	r2, r4
 801573e:	2100      	movs	r1, #0
 8015740:	f018 f8e6 	bl	802d910 <memset>
}
 8015744:	4628      	mov	r0, r5
 8015746:	bd38      	pop	{r3, r4, r5, pc}

08015748 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	4606      	mov	r6, r0
 801574c:	460d      	mov	r5, r1

	if ( unical_id){
 801574e:	4b0f      	ldr	r3, [pc, #60]	@ (801578c <set_device_id+0x44>)
 8015750:	6818      	ldr	r0, [r3, #0]
 8015752:	b108      	cbz	r0, 8015758 <set_device_id+0x10>
		free(unical_id);
 8015754:	f006 f912 	bl	801b97c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015758:	0068      	lsls	r0, r5, #1
 801575a:	2101      	movs	r1, #1
 801575c:	4408      	add	r0, r1
 801575e:	f7ff ffe5 	bl	801572c <_ZL9my_callocjj>
 8015762:	4b0a      	ldr	r3, [pc, #40]	@ (801578c <set_device_id+0x44>)
 8015764:	6018      	str	r0, [r3, #0]


	if (unical_id){
 8015766:	b108      	cbz	r0, 801576c <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8015768:	2400      	movs	r4, #0
 801576a:	e00b      	b.n	8015784 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801576c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015770:	e00b      	b.n	801578a <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8015772:	4b06      	ldr	r3, [pc, #24]	@ (801578c <set_device_id+0x44>)
 8015774:	6818      	ldr	r0, [r3, #0]
 8015776:	5d32      	ldrb	r2, [r6, r4]
 8015778:	4905      	ldr	r1, [pc, #20]	@ (8015790 <set_device_id+0x48>)
 801577a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801577e:	f017 fd05 	bl	802d18c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8015782:	3401      	adds	r4, #1
 8015784:	42ac      	cmp	r4, r5
 8015786:	d3f4      	bcc.n	8015772 <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 8015788:	2000      	movs	r0, #0
}
 801578a:	bd70      	pop	{r4, r5, r6, pc}
 801578c:	2000294c 	.word	0x2000294c
 8015790:	08039534 	.word	0x08039534

08015794 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	4605      	mov	r5, r0
 8015798:	460c      	mov	r4, r1

	if(dev_conf_ip){
 801579a:	4b0c      	ldr	r3, [pc, #48]	@ (80157cc <set_device_conf_ip+0x38>)
 801579c:	6818      	ldr	r0, [r3, #0]
 801579e:	b108      	cbz	r0, 80157a4 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 80157a0:	f006 f8ec 	bl	801b97c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 80157a4:	2101      	movs	r1, #1
 80157a6:	1860      	adds	r0, r4, r1
 80157a8:	f7ff ffc0 	bl	801572c <_ZL9my_callocjj>
 80157ac:	4b07      	ldr	r3, [pc, #28]	@ (80157cc <set_device_conf_ip+0x38>)
 80157ae:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 80157b0:	b140      	cbz	r0, 80157c4 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 80157b2:	4622      	mov	r2, r4
 80157b4:	4629      	mov	r1, r5
 80157b6:	f018 f8f2 	bl	802d99e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 80157ba:	4b04      	ldr	r3, [pc, #16]	@ (80157cc <set_device_conf_ip+0x38>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2000      	movs	r0, #0
 80157c0:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 80157c2:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80157c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157c8:	e7fb      	b.n	80157c2 <set_device_conf_ip+0x2e>
 80157ca:	bf00      	nop
 80157cc:	20002948 	.word	0x20002948

080157d0 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 80157d0:	b500      	push	{lr}
 80157d2:	b087      	sub	sp, #28

	strcpy(buff, "");
 80157d4:	f04f 0c00 	mov.w	ip, #0
 80157d8:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80157dc:	3a01      	subs	r2, #1
 80157de:	2a07      	cmp	r2, #7
 80157e0:	f200 8087 	bhi.w	80158f2 <get_config_topik_string+0x122>
 80157e4:	e8df f002 	tbb	[pc, r2]
 80157e8:	45251604 	.word	0x45251604
 80157ec:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80157f0:	9304      	str	r3, [sp, #16]
 80157f2:	4b41      	ldr	r3, [pc, #260]	@ (80158f8 <get_config_topik_string+0x128>)
 80157f4:	9303      	str	r3, [sp, #12]
 80157f6:	4b41      	ldr	r3, [pc, #260]	@ (80158fc <get_config_topik_string+0x12c>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	9302      	str	r3, [sp, #8]
 80157fc:	4b40      	ldr	r3, [pc, #256]	@ (8015900 <get_config_topik_string+0x130>)
 80157fe:	9301      	str	r3, [sp, #4]
 8015800:	4b40      	ldr	r3, [pc, #256]	@ (8015904 <get_config_topik_string+0x134>)
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	4b40      	ldr	r3, [pc, #256]	@ (8015908 <get_config_topik_string+0x138>)
 8015806:	4a41      	ldr	r2, [pc, #260]	@ (801590c <get_config_topik_string+0x13c>)
 8015808:	f017 fb58 	bl	802cebc <snprintf>
			return -1;
			break;
	}


	return 0;
 801580c:	2000      	movs	r0, #0
}
 801580e:	b007      	add	sp, #28
 8015810:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8015814:	9304      	str	r3, [sp, #16]
 8015816:	4b3e      	ldr	r3, [pc, #248]	@ (8015910 <get_config_topik_string+0x140>)
 8015818:	9303      	str	r3, [sp, #12]
 801581a:	4a38      	ldr	r2, [pc, #224]	@ (80158fc <get_config_topik_string+0x12c>)
 801581c:	6812      	ldr	r2, [r2, #0]
 801581e:	9202      	str	r2, [sp, #8]
 8015820:	4a37      	ldr	r2, [pc, #220]	@ (8015900 <get_config_topik_string+0x130>)
 8015822:	9201      	str	r2, [sp, #4]
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	4b38      	ldr	r3, [pc, #224]	@ (8015908 <get_config_topik_string+0x138>)
 8015828:	4a38      	ldr	r2, [pc, #224]	@ (801590c <get_config_topik_string+0x13c>)
 801582a:	f017 fb47 	bl	802cebc <snprintf>
	return 0;
 801582e:	2000      	movs	r0, #0
			break;
 8015830:	e7ed      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8015832:	9304      	str	r3, [sp, #16]
 8015834:	4b37      	ldr	r3, [pc, #220]	@ (8015914 <get_config_topik_string+0x144>)
 8015836:	9303      	str	r3, [sp, #12]
 8015838:	4b30      	ldr	r3, [pc, #192]	@ (80158fc <get_config_topik_string+0x12c>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	9302      	str	r3, [sp, #8]
 801583e:	4b30      	ldr	r3, [pc, #192]	@ (8015900 <get_config_topik_string+0x130>)
 8015840:	9301      	str	r3, [sp, #4]
 8015842:	4b35      	ldr	r3, [pc, #212]	@ (8015918 <get_config_topik_string+0x148>)
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	4b30      	ldr	r3, [pc, #192]	@ (8015908 <get_config_topik_string+0x138>)
 8015848:	4a30      	ldr	r2, [pc, #192]	@ (801590c <get_config_topik_string+0x13c>)
 801584a:	f017 fb37 	bl	802cebc <snprintf>
	return 0;
 801584e:	2000      	movs	r0, #0
			break;
 8015850:	e7dd      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8015852:	9304      	str	r3, [sp, #16]
 8015854:	4b31      	ldr	r3, [pc, #196]	@ (801591c <get_config_topik_string+0x14c>)
 8015856:	9303      	str	r3, [sp, #12]
 8015858:	4b28      	ldr	r3, [pc, #160]	@ (80158fc <get_config_topik_string+0x12c>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	9302      	str	r3, [sp, #8]
 801585e:	4b28      	ldr	r3, [pc, #160]	@ (8015900 <get_config_topik_string+0x130>)
 8015860:	9301      	str	r3, [sp, #4]
 8015862:	4b2d      	ldr	r3, [pc, #180]	@ (8015918 <get_config_topik_string+0x148>)
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	4b28      	ldr	r3, [pc, #160]	@ (8015908 <get_config_topik_string+0x138>)
 8015868:	4a28      	ldr	r2, [pc, #160]	@ (801590c <get_config_topik_string+0x13c>)
 801586a:	f017 fb27 	bl	802cebc <snprintf>
	return 0;
 801586e:	2000      	movs	r0, #0
			break;
 8015870:	e7cd      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8015872:	9304      	str	r3, [sp, #16]
 8015874:	4b2a      	ldr	r3, [pc, #168]	@ (8015920 <get_config_topik_string+0x150>)
 8015876:	9303      	str	r3, [sp, #12]
 8015878:	4b20      	ldr	r3, [pc, #128]	@ (80158fc <get_config_topik_string+0x12c>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	9302      	str	r3, [sp, #8]
 801587e:	4b20      	ldr	r3, [pc, #128]	@ (8015900 <get_config_topik_string+0x130>)
 8015880:	9301      	str	r3, [sp, #4]
 8015882:	4b25      	ldr	r3, [pc, #148]	@ (8015918 <get_config_topik_string+0x148>)
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	4b20      	ldr	r3, [pc, #128]	@ (8015908 <get_config_topik_string+0x138>)
 8015888:	4a20      	ldr	r2, [pc, #128]	@ (801590c <get_config_topik_string+0x13c>)
 801588a:	f017 fb17 	bl	802cebc <snprintf>
	return 0;
 801588e:	2000      	movs	r0, #0
			break;
 8015890:	e7bd      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	4b23      	ldr	r3, [pc, #140]	@ (8015924 <get_config_topik_string+0x154>)
 8015896:	9303      	str	r3, [sp, #12]
 8015898:	4b18      	ldr	r3, [pc, #96]	@ (80158fc <get_config_topik_string+0x12c>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	9302      	str	r3, [sp, #8]
 801589e:	4b18      	ldr	r3, [pc, #96]	@ (8015900 <get_config_topik_string+0x130>)
 80158a0:	9301      	str	r3, [sp, #4]
 80158a2:	4b1d      	ldr	r3, [pc, #116]	@ (8015918 <get_config_topik_string+0x148>)
 80158a4:	9300      	str	r3, [sp, #0]
 80158a6:	4b18      	ldr	r3, [pc, #96]	@ (8015908 <get_config_topik_string+0x138>)
 80158a8:	4a18      	ldr	r2, [pc, #96]	@ (801590c <get_config_topik_string+0x13c>)
 80158aa:	f017 fb07 	bl	802cebc <snprintf>
	return 0;
 80158ae:	2000      	movs	r0, #0
			break;
 80158b0:	e7ad      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 80158b2:	9304      	str	r3, [sp, #16]
 80158b4:	4b1c      	ldr	r3, [pc, #112]	@ (8015928 <get_config_topik_string+0x158>)
 80158b6:	9303      	str	r3, [sp, #12]
 80158b8:	4b10      	ldr	r3, [pc, #64]	@ (80158fc <get_config_topik_string+0x12c>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	9302      	str	r3, [sp, #8]
 80158be:	4b10      	ldr	r3, [pc, #64]	@ (8015900 <get_config_topik_string+0x130>)
 80158c0:	9301      	str	r3, [sp, #4]
 80158c2:	4b15      	ldr	r3, [pc, #84]	@ (8015918 <get_config_topik_string+0x148>)
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	4b10      	ldr	r3, [pc, #64]	@ (8015908 <get_config_topik_string+0x138>)
 80158c8:	4a10      	ldr	r2, [pc, #64]	@ (801590c <get_config_topik_string+0x13c>)
 80158ca:	f017 faf7 	bl	802cebc <snprintf>
	return 0;
 80158ce:	2000      	movs	r0, #0
			break;
 80158d0:	e79d      	b.n	801580e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 80158d2:	9304      	str	r3, [sp, #16]
 80158d4:	4b15      	ldr	r3, [pc, #84]	@ (801592c <get_config_topik_string+0x15c>)
 80158d6:	9303      	str	r3, [sp, #12]
 80158d8:	4b08      	ldr	r3, [pc, #32]	@ (80158fc <get_config_topik_string+0x12c>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	9302      	str	r3, [sp, #8]
 80158de:	4b08      	ldr	r3, [pc, #32]	@ (8015900 <get_config_topik_string+0x130>)
 80158e0:	9301      	str	r3, [sp, #4]
 80158e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015918 <get_config_topik_string+0x148>)
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	4b08      	ldr	r3, [pc, #32]	@ (8015908 <get_config_topik_string+0x138>)
 80158e8:	4a08      	ldr	r2, [pc, #32]	@ (801590c <get_config_topik_string+0x13c>)
 80158ea:	f017 fae7 	bl	802cebc <snprintf>
	return 0;
 80158ee:	2000      	movs	r0, #0
			break;
 80158f0:	e78d      	b.n	801580e <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80158f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158f6:	e78a      	b.n	801580e <get_config_topik_string+0x3e>
 80158f8:	08039554 	.word	0x08039554
 80158fc:	2000294c 	.word	0x2000294c
 8015900:	08037c94 	.word	0x08037c94
 8015904:	0803955c 	.word	0x0803955c
 8015908:	200000f8 	.word	0x200000f8
 801590c:	0803953c 	.word	0x0803953c
 8015910:	080392ac 	.word	0x080392ac
 8015914:	0803956c 	.word	0x0803956c
 8015918:	08039574 	.word	0x08039574
 801591c:	0803957c 	.word	0x0803957c
 8015920:	08039584 	.word	0x08039584
 8015924:	0803958c 	.word	0x0803958c
 8015928:	0803959c 	.word	0x0803959c
 801592c:	080395ac 	.word	0x080395ac

08015930 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8015930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015934:	b099      	sub	sp, #100	@ 0x64
 8015936:	9017      	str	r0, [sp, #92]	@ 0x5c
 8015938:	460d      	mov	r5, r1
 801593a:	4617      	mov	r7, r2
 801593c:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 801593e:	460a      	mov	r2, r1
 8015940:	2100      	movs	r1, #0
 8015942:	f017 ffe5 	bl	802d910 <memset>

	switch (payload_type) {
 8015946:	1e7a      	subs	r2, r7, #1
 8015948:	2a07      	cmp	r2, #7
 801594a:	f200 81ba 	bhi.w	8015cc2 <get_config_payload_string+0x392>
 801594e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015952:	0008      	.short	0x0008
 8015954:	00a10043 	.word	0x00a10043
 8015958:	00c500ea 	.word	0x00c500ea
 801595c:	0193016e 	.word	0x0193016e
 8015960:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015962:	2101      	movs	r1, #1
 8015964:	2080      	movs	r0, #128	@ 0x80
 8015966:	f7ff fee1 	bl	801572c <_ZL9my_callocjj>
 801596a:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 801596c:	9400      	str	r4, [sp, #0]
 801596e:	4b80      	ldr	r3, [pc, #512]	@ (8015b70 <get_config_payload_string+0x240>)
 8015970:	4a80      	ldr	r2, [pc, #512]	@ (8015b74 <get_config_payload_string+0x244>)
 8015972:	2180      	movs	r1, #128	@ 0x80
 8015974:	f017 faa2 	bl	802cebc <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8015978:	4b7f      	ldr	r3, [pc, #508]	@ (8015b78 <get_config_payload_string+0x248>)
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	4b7f      	ldr	r3, [pc, #508]	@ (8015b7c <get_config_payload_string+0x24c>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	9314      	str	r3, [sp, #80]	@ 0x50
 8015982:	4b7f      	ldr	r3, [pc, #508]	@ (8015b80 <get_config_payload_string+0x250>)
 8015984:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015986:	4b7f      	ldr	r3, [pc, #508]	@ (8015b84 <get_config_payload_string+0x254>)
 8015988:	9312      	str	r3, [sp, #72]	@ 0x48
 801598a:	4b7f      	ldr	r3, [pc, #508]	@ (8015b88 <get_config_payload_string+0x258>)
 801598c:	9311      	str	r3, [sp, #68]	@ 0x44
 801598e:	4b7f      	ldr	r3, [pc, #508]	@ (8015b8c <get_config_payload_string+0x25c>)
 8015990:	9310      	str	r3, [sp, #64]	@ 0x40
 8015992:	4b7f      	ldr	r3, [pc, #508]	@ (8015b90 <get_config_payload_string+0x260>)
 8015994:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015996:	920e      	str	r2, [sp, #56]	@ 0x38
 8015998:	4b7e      	ldr	r3, [pc, #504]	@ (8015b94 <get_config_payload_string+0x264>)
 801599a:	930d      	str	r3, [sp, #52]	@ 0x34
 801599c:	497e      	ldr	r1, [pc, #504]	@ (8015b98 <get_config_payload_string+0x268>)
 801599e:	910c      	str	r1, [sp, #48]	@ 0x30
 80159a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80159a2:	497e      	ldr	r1, [pc, #504]	@ (8015b9c <get_config_payload_string+0x26c>)
 80159a4:	910a      	str	r1, [sp, #40]	@ 0x28
 80159a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80159a8:	9308      	str	r3, [sp, #32]
 80159aa:	9707      	str	r7, [sp, #28]
 80159ac:	487c      	ldr	r0, [pc, #496]	@ (8015ba0 <get_config_payload_string+0x270>)
 80159ae:	9006      	str	r0, [sp, #24]
 80159b0:	9405      	str	r4, [sp, #20]
 80159b2:	9104      	str	r1, [sp, #16]
 80159b4:	9403      	str	r4, [sp, #12]
 80159b6:	9102      	str	r1, [sp, #8]
 80159b8:	9201      	str	r2, [sp, #4]
 80159ba:	9300      	str	r3, [sp, #0]
 80159bc:	4b79      	ldr	r3, [pc, #484]	@ (8015ba4 <get_config_payload_string+0x274>)
 80159be:	4a7a      	ldr	r2, [pc, #488]	@ (8015ba8 <get_config_payload_string+0x278>)
 80159c0:	4629      	mov	r1, r5
 80159c2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80159c4:	f017 fa7a 	bl	802cebc <snprintf>
 80159c8:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 80159ca:	4638      	mov	r0, r7
 80159cc:	f005 ffd6 	bl	801b97c <vPortFree>

			return len;
 80159d0:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 80159d2:	b019      	add	sp, #100	@ 0x64
 80159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80159d8:	2101      	movs	r1, #1
 80159da:	2080      	movs	r0, #128	@ 0x80
 80159dc:	f7ff fea6 	bl	801572c <_ZL9my_callocjj>
 80159e0:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80159e2:	2101      	movs	r1, #1
 80159e4:	2080      	movs	r0, #128	@ 0x80
 80159e6:	f7ff fea1 	bl	801572c <_ZL9my_callocjj>
 80159ea:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 80159ec:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8015be0 <get_config_payload_string+0x2b0>
 80159f0:	9400      	str	r4, [sp, #0]
 80159f2:	464b      	mov	r3, r9
 80159f4:	4a6d      	ldr	r2, [pc, #436]	@ (8015bac <get_config_payload_string+0x27c>)
 80159f6:	2180      	movs	r1, #128	@ 0x80
 80159f8:	4638      	mov	r0, r7
 80159fa:	f017 fa5f 	bl	802cebc <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 80159fe:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8015b94 <get_config_payload_string+0x264>
 8015a02:	4e65      	ldr	r6, [pc, #404]	@ (8015b98 <get_config_payload_string+0x268>)
 8015a04:	9602      	str	r6, [sp, #8]
 8015a06:	9701      	str	r7, [sp, #4]
 8015a08:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015b78 <get_config_payload_string+0x248>
 8015a0c:	f8db 3000 	ldr.w	r3, [fp]
 8015a10:	9300      	str	r3, [sp, #0]
 8015a12:	4653      	mov	r3, sl
 8015a14:	4a66      	ldr	r2, [pc, #408]	@ (8015bb0 <get_config_payload_string+0x280>)
 8015a16:	2180      	movs	r1, #128	@ 0x80
 8015a18:	4640      	mov	r0, r8
 8015a1a:	f017 fa4f 	bl	802cebc <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8015a1e:	9400      	str	r4, [sp, #0]
 8015a20:	4b64      	ldr	r3, [pc, #400]	@ (8015bb4 <get_config_payload_string+0x284>)
 8015a22:	4a54      	ldr	r2, [pc, #336]	@ (8015b74 <get_config_payload_string+0x244>)
 8015a24:	2180      	movs	r1, #128	@ 0x80
 8015a26:	4638      	mov	r0, r7
 8015a28:	f017 fa48 	bl	802cebc <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8015a2c:	f8db 3000 	ldr.w	r3, [fp]
 8015a30:	4a52      	ldr	r2, [pc, #328]	@ (8015b7c <get_config_payload_string+0x24c>)
 8015a32:	6812      	ldr	r2, [r2, #0]
 8015a34:	9214      	str	r2, [sp, #80]	@ 0x50
 8015a36:	4a52      	ldr	r2, [pc, #328]	@ (8015b80 <get_config_payload_string+0x250>)
 8015a38:	9213      	str	r2, [sp, #76]	@ 0x4c
 8015a3a:	4a52      	ldr	r2, [pc, #328]	@ (8015b84 <get_config_payload_string+0x254>)
 8015a3c:	9212      	str	r2, [sp, #72]	@ 0x48
 8015a3e:	4a52      	ldr	r2, [pc, #328]	@ (8015b88 <get_config_payload_string+0x258>)
 8015a40:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a42:	4a52      	ldr	r2, [pc, #328]	@ (8015b8c <get_config_payload_string+0x25c>)
 8015a44:	9210      	str	r2, [sp, #64]	@ 0x40
 8015a46:	4a52      	ldr	r2, [pc, #328]	@ (8015b90 <get_config_payload_string+0x260>)
 8015a48:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015a4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8015a4c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015a50:	960c      	str	r6, [sp, #48]	@ 0x30
 8015a52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015a54:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8015a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a5a:	f8cd a020 	str.w	sl, [sp, #32]
 8015a5e:	9707      	str	r7, [sp, #28]
 8015a60:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a64:	9405      	str	r4, [sp, #20]
 8015a66:	f8cd 9010 	str.w	r9, [sp, #16]
 8015a6a:	9403      	str	r4, [sp, #12]
 8015a6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a70:	9301      	str	r3, [sp, #4]
 8015a72:	f8cd a000 	str.w	sl, [sp]
 8015a76:	464b      	mov	r3, r9
 8015a78:	4a4b      	ldr	r2, [pc, #300]	@ (8015ba8 <get_config_payload_string+0x278>)
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a7e:	f017 fa1d 	bl	802cebc <snprintf>
 8015a82:	4604      	mov	r4, r0
			free(name);
 8015a84:	4638      	mov	r0, r7
 8015a86:	f005 ff79 	bl	801b97c <vPortFree>
			free(com_topik);
 8015a8a:	4640      	mov	r0, r8
 8015a8c:	f005 ff76 	bl	801b97c <vPortFree>
			return len;
 8015a90:	b2e0      	uxtb	r0, r4
 8015a92:	e79e      	b.n	80159d2 <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8015a94:	4b38      	ldr	r3, [pc, #224]	@ (8015b78 <get_config_payload_string+0x248>)
 8015a96:	6819      	ldr	r1, [r3, #0]
 8015a98:	4b3e      	ldr	r3, [pc, #248]	@ (8015b94 <get_config_payload_string+0x264>)
 8015a9a:	4a47      	ldr	r2, [pc, #284]	@ (8015bb8 <get_config_payload_string+0x288>)
 8015a9c:	4837      	ldr	r0, [pc, #220]	@ (8015b7c <get_config_payload_string+0x24c>)
 8015a9e:	6800      	ldr	r0, [r0, #0]
 8015aa0:	9010      	str	r0, [sp, #64]	@ 0x40
 8015aa2:	4837      	ldr	r0, [pc, #220]	@ (8015b80 <get_config_payload_string+0x250>)
 8015aa4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015aa6:	4837      	ldr	r0, [pc, #220]	@ (8015b84 <get_config_payload_string+0x254>)
 8015aa8:	900e      	str	r0, [sp, #56]	@ 0x38
 8015aaa:	4837      	ldr	r0, [pc, #220]	@ (8015b88 <get_config_payload_string+0x258>)
 8015aac:	900d      	str	r0, [sp, #52]	@ 0x34
 8015aae:	4837      	ldr	r0, [pc, #220]	@ (8015b8c <get_config_payload_string+0x25c>)
 8015ab0:	900c      	str	r0, [sp, #48]	@ 0x30
 8015ab2:	4837      	ldr	r0, [pc, #220]	@ (8015b90 <get_config_payload_string+0x260>)
 8015ab4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015ab6:	910a      	str	r1, [sp, #40]	@ 0x28
 8015ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015aba:	4840      	ldr	r0, [pc, #256]	@ (8015bbc <get_config_payload_string+0x28c>)
 8015abc:	9008      	str	r0, [sp, #32]
 8015abe:	9207      	str	r2, [sp, #28]
 8015ac0:	9106      	str	r1, [sp, #24]
 8015ac2:	9305      	str	r3, [sp, #20]
 8015ac4:	483e      	ldr	r0, [pc, #248]	@ (8015bc0 <get_config_payload_string+0x290>)
 8015ac6:	9004      	str	r0, [sp, #16]
 8015ac8:	483e      	ldr	r0, [pc, #248]	@ (8015bc4 <get_config_payload_string+0x294>)
 8015aca:	9003      	str	r0, [sp, #12]
 8015acc:	9202      	str	r2, [sp, #8]
 8015ace:	483e      	ldr	r0, [pc, #248]	@ (8015bc8 <get_config_payload_string+0x298>)
 8015ad0:	9001      	str	r0, [sp, #4]
 8015ad2:	9100      	str	r1, [sp, #0]
 8015ad4:	4934      	ldr	r1, [pc, #208]	@ (8015ba8 <get_config_payload_string+0x278>)
 8015ad6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015ad8:	f017 fb58 	bl	802d18c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015adc:	4b26      	ldr	r3, [pc, #152]	@ (8015b78 <get_config_payload_string+0x248>)
 8015ade:	6819      	ldr	r1, [r3, #0]
 8015ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8015b94 <get_config_payload_string+0x264>)
 8015ae2:	4a3a      	ldr	r2, [pc, #232]	@ (8015bcc <get_config_payload_string+0x29c>)
 8015ae4:	4825      	ldr	r0, [pc, #148]	@ (8015b7c <get_config_payload_string+0x24c>)
 8015ae6:	6800      	ldr	r0, [r0, #0]
 8015ae8:	9010      	str	r0, [sp, #64]	@ 0x40
 8015aea:	4825      	ldr	r0, [pc, #148]	@ (8015b80 <get_config_payload_string+0x250>)
 8015aec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015aee:	4825      	ldr	r0, [pc, #148]	@ (8015b84 <get_config_payload_string+0x254>)
 8015af0:	900e      	str	r0, [sp, #56]	@ 0x38
 8015af2:	4825      	ldr	r0, [pc, #148]	@ (8015b88 <get_config_payload_string+0x258>)
 8015af4:	900d      	str	r0, [sp, #52]	@ 0x34
 8015af6:	4825      	ldr	r0, [pc, #148]	@ (8015b8c <get_config_payload_string+0x25c>)
 8015af8:	900c      	str	r0, [sp, #48]	@ 0x30
 8015afa:	4825      	ldr	r0, [pc, #148]	@ (8015b90 <get_config_payload_string+0x260>)
 8015afc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015afe:	910a      	str	r1, [sp, #40]	@ 0x28
 8015b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b02:	4833      	ldr	r0, [pc, #204]	@ (8015bd0 <get_config_payload_string+0x2a0>)
 8015b04:	9008      	str	r0, [sp, #32]
 8015b06:	9207      	str	r2, [sp, #28]
 8015b08:	9106      	str	r1, [sp, #24]
 8015b0a:	9305      	str	r3, [sp, #20]
 8015b0c:	4831      	ldr	r0, [pc, #196]	@ (8015bd4 <get_config_payload_string+0x2a4>)
 8015b0e:	9004      	str	r0, [sp, #16]
 8015b10:	4823      	ldr	r0, [pc, #140]	@ (8015ba0 <get_config_payload_string+0x270>)
 8015b12:	9003      	str	r0, [sp, #12]
 8015b14:	9202      	str	r2, [sp, #8]
 8015b16:	482c      	ldr	r0, [pc, #176]	@ (8015bc8 <get_config_payload_string+0x298>)
 8015b18:	9001      	str	r0, [sp, #4]
 8015b1a:	9100      	str	r1, [sp, #0]
 8015b1c:	4922      	ldr	r1, [pc, #136]	@ (8015ba8 <get_config_payload_string+0x278>)
 8015b1e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015b20:	f017 fb34 	bl	802d18c <sprintf>
			break;
 8015b24:	e7da      	b.n	8015adc <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8015b26:	4b14      	ldr	r3, [pc, #80]	@ (8015b78 <get_config_payload_string+0x248>)
 8015b28:	6819      	ldr	r1, [r3, #0]
 8015b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8015b94 <get_config_payload_string+0x264>)
 8015b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8015ba4 <get_config_payload_string+0x274>)
 8015b2e:	4813      	ldr	r0, [pc, #76]	@ (8015b7c <get_config_payload_string+0x24c>)
 8015b30:	6800      	ldr	r0, [r0, #0]
 8015b32:	9010      	str	r0, [sp, #64]	@ 0x40
 8015b34:	4812      	ldr	r0, [pc, #72]	@ (8015b80 <get_config_payload_string+0x250>)
 8015b36:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015b38:	4812      	ldr	r0, [pc, #72]	@ (8015b84 <get_config_payload_string+0x254>)
 8015b3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8015b3c:	4812      	ldr	r0, [pc, #72]	@ (8015b88 <get_config_payload_string+0x258>)
 8015b3e:	900d      	str	r0, [sp, #52]	@ 0x34
 8015b40:	4812      	ldr	r0, [pc, #72]	@ (8015b8c <get_config_payload_string+0x25c>)
 8015b42:	900c      	str	r0, [sp, #48]	@ 0x30
 8015b44:	4812      	ldr	r0, [pc, #72]	@ (8015b90 <get_config_payload_string+0x260>)
 8015b46:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015b48:	910a      	str	r1, [sp, #40]	@ 0x28
 8015b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b4c:	4822      	ldr	r0, [pc, #136]	@ (8015bd8 <get_config_payload_string+0x2a8>)
 8015b4e:	9008      	str	r0, [sp, #32]
 8015b50:	9207      	str	r2, [sp, #28]
 8015b52:	9106      	str	r1, [sp, #24]
 8015b54:	9305      	str	r3, [sp, #20]
 8015b56:	4821      	ldr	r0, [pc, #132]	@ (8015bdc <get_config_payload_string+0x2ac>)
 8015b58:	9004      	str	r0, [sp, #16]
 8015b5a:	4811      	ldr	r0, [pc, #68]	@ (8015ba0 <get_config_payload_string+0x270>)
 8015b5c:	9003      	str	r0, [sp, #12]
 8015b5e:	9202      	str	r2, [sp, #8]
 8015b60:	4819      	ldr	r0, [pc, #100]	@ (8015bc8 <get_config_payload_string+0x298>)
 8015b62:	9001      	str	r0, [sp, #4]
 8015b64:	9100      	str	r1, [sp, #0]
 8015b66:	4910      	ldr	r1, [pc, #64]	@ (8015ba8 <get_config_payload_string+0x278>)
 8015b68:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015b6a:	f017 fb0f 	bl	802d18c <sprintf>
			break;
 8015b6e:	e7b5      	b.n	8015adc <get_config_payload_string+0x1ac>
 8015b70:	080395b4 	.word	0x080395b4
 8015b74:	080395c0 	.word	0x080395c0
 8015b78:	2000294c 	.word	0x2000294c
 8015b7c:	20002948 	.word	0x20002948
 8015b80:	0803760c 	.word	0x0803760c
 8015b84:	08037bb4 	.word	0x08037bb4
 8015b88:	080395c8 	.word	0x080395c8
 8015b8c:	08037c74 	.word	0x08037c74
 8015b90:	08037c88 	.word	0x08037c88
 8015b94:	08037c94 	.word	0x08037c94
 8015b98:	080381c0 	.word	0x080381c0
 8015b9c:	08039554 	.word	0x08039554
 8015ba0:	0803baa8 	.word	0x0803baa8
 8015ba4:	08039584 	.word	0x08039584
 8015ba8:	08039730 	.word	0x08039730
 8015bac:	080395d8 	.word	0x080395d8
 8015bb0:	08039708 	.word	0x08039708
 8015bb4:	080395e0 	.word	0x080395e0
 8015bb8:	0803956c 	.word	0x0803956c
 8015bbc:	080395f4 	.word	0x080395f4
 8015bc0:	080395f8 	.word	0x080395f8
 8015bc4:	08039608 	.word	0x08039608
 8015bc8:	0803962c 	.word	0x0803962c
 8015bcc:	0803957c 	.word	0x0803957c
 8015bd0:	08039634 	.word	0x08039634
 8015bd4:	08039638 	.word	0x08039638
 8015bd8:	08039648 	.word	0x08039648
 8015bdc:	0803964c 	.word	0x0803964c
 8015be0:	080392ac 	.word	0x080392ac
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8015be4:	4b38      	ldr	r3, [pc, #224]	@ (8015cc8 <get_config_payload_string+0x398>)
 8015be6:	6819      	ldr	r1, [r3, #0]
 8015be8:	4b38      	ldr	r3, [pc, #224]	@ (8015ccc <get_config_payload_string+0x39c>)
 8015bea:	4a39      	ldr	r2, [pc, #228]	@ (8015cd0 <get_config_payload_string+0x3a0>)
 8015bec:	4839      	ldr	r0, [pc, #228]	@ (8015cd4 <get_config_payload_string+0x3a4>)
 8015bee:	6800      	ldr	r0, [r0, #0]
 8015bf0:	9010      	str	r0, [sp, #64]	@ 0x40
 8015bf2:	4839      	ldr	r0, [pc, #228]	@ (8015cd8 <get_config_payload_string+0x3a8>)
 8015bf4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015bf6:	4839      	ldr	r0, [pc, #228]	@ (8015cdc <get_config_payload_string+0x3ac>)
 8015bf8:	900e      	str	r0, [sp, #56]	@ 0x38
 8015bfa:	4839      	ldr	r0, [pc, #228]	@ (8015ce0 <get_config_payload_string+0x3b0>)
 8015bfc:	900d      	str	r0, [sp, #52]	@ 0x34
 8015bfe:	4839      	ldr	r0, [pc, #228]	@ (8015ce4 <get_config_payload_string+0x3b4>)
 8015c00:	900c      	str	r0, [sp, #48]	@ 0x30
 8015c02:	4839      	ldr	r0, [pc, #228]	@ (8015ce8 <get_config_payload_string+0x3b8>)
 8015c04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015c06:	910a      	str	r1, [sp, #40]	@ 0x28
 8015c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c0a:	4838      	ldr	r0, [pc, #224]	@ (8015cec <get_config_payload_string+0x3bc>)
 8015c0c:	9008      	str	r0, [sp, #32]
 8015c0e:	9207      	str	r2, [sp, #28]
 8015c10:	9106      	str	r1, [sp, #24]
 8015c12:	9305      	str	r3, [sp, #20]
 8015c14:	4836      	ldr	r0, [pc, #216]	@ (8015cf0 <get_config_payload_string+0x3c0>)
 8015c16:	9004      	str	r0, [sp, #16]
 8015c18:	4836      	ldr	r0, [pc, #216]	@ (8015cf4 <get_config_payload_string+0x3c4>)
 8015c1a:	9003      	str	r0, [sp, #12]
 8015c1c:	9202      	str	r2, [sp, #8]
 8015c1e:	4836      	ldr	r0, [pc, #216]	@ (8015cf8 <get_config_payload_string+0x3c8>)
 8015c20:	9001      	str	r0, [sp, #4]
 8015c22:	9100      	str	r1, [sp, #0]
 8015c24:	4935      	ldr	r1, [pc, #212]	@ (8015cfc <get_config_payload_string+0x3cc>)
 8015c26:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015c28:	f017 fab0 	bl	802d18c <sprintf>
			break;
 8015c2c:	e756      	b.n	8015adc <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8015c2e:	4b26      	ldr	r3, [pc, #152]	@ (8015cc8 <get_config_payload_string+0x398>)
 8015c30:	6819      	ldr	r1, [r3, #0]
 8015c32:	4b26      	ldr	r3, [pc, #152]	@ (8015ccc <get_config_payload_string+0x39c>)
 8015c34:	4a32      	ldr	r2, [pc, #200]	@ (8015d00 <get_config_payload_string+0x3d0>)
 8015c36:	4827      	ldr	r0, [pc, #156]	@ (8015cd4 <get_config_payload_string+0x3a4>)
 8015c38:	6800      	ldr	r0, [r0, #0]
 8015c3a:	9010      	str	r0, [sp, #64]	@ 0x40
 8015c3c:	4826      	ldr	r0, [pc, #152]	@ (8015cd8 <get_config_payload_string+0x3a8>)
 8015c3e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015c40:	4826      	ldr	r0, [pc, #152]	@ (8015cdc <get_config_payload_string+0x3ac>)
 8015c42:	900e      	str	r0, [sp, #56]	@ 0x38
 8015c44:	4826      	ldr	r0, [pc, #152]	@ (8015ce0 <get_config_payload_string+0x3b0>)
 8015c46:	900d      	str	r0, [sp, #52]	@ 0x34
 8015c48:	4826      	ldr	r0, [pc, #152]	@ (8015ce4 <get_config_payload_string+0x3b4>)
 8015c4a:	900c      	str	r0, [sp, #48]	@ 0x30
 8015c4c:	4826      	ldr	r0, [pc, #152]	@ (8015ce8 <get_config_payload_string+0x3b8>)
 8015c4e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015c50:	910a      	str	r1, [sp, #40]	@ 0x28
 8015c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c54:	482b      	ldr	r0, [pc, #172]	@ (8015d04 <get_config_payload_string+0x3d4>)
 8015c56:	9008      	str	r0, [sp, #32]
 8015c58:	9207      	str	r2, [sp, #28]
 8015c5a:	9106      	str	r1, [sp, #24]
 8015c5c:	9305      	str	r3, [sp, #20]
 8015c5e:	482a      	ldr	r0, [pc, #168]	@ (8015d08 <get_config_payload_string+0x3d8>)
 8015c60:	9004      	str	r0, [sp, #16]
 8015c62:	4824      	ldr	r0, [pc, #144]	@ (8015cf4 <get_config_payload_string+0x3c4>)
 8015c64:	9003      	str	r0, [sp, #12]
 8015c66:	9202      	str	r2, [sp, #8]
 8015c68:	4823      	ldr	r0, [pc, #140]	@ (8015cf8 <get_config_payload_string+0x3c8>)
 8015c6a:	9001      	str	r0, [sp, #4]
 8015c6c:	9100      	str	r1, [sp, #0]
 8015c6e:	4923      	ldr	r1, [pc, #140]	@ (8015cfc <get_config_payload_string+0x3cc>)
 8015c70:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015c72:	f017 fa8b 	bl	802d18c <sprintf>
			break;
 8015c76:	e731      	b.n	8015adc <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8015c78:	4b13      	ldr	r3, [pc, #76]	@ (8015cc8 <get_config_payload_string+0x398>)
 8015c7a:	6819      	ldr	r1, [r3, #0]
 8015c7c:	4b13      	ldr	r3, [pc, #76]	@ (8015ccc <get_config_payload_string+0x39c>)
 8015c7e:	4a23      	ldr	r2, [pc, #140]	@ (8015d0c <get_config_payload_string+0x3dc>)
 8015c80:	4814      	ldr	r0, [pc, #80]	@ (8015cd4 <get_config_payload_string+0x3a4>)
 8015c82:	6800      	ldr	r0, [r0, #0]
 8015c84:	9010      	str	r0, [sp, #64]	@ 0x40
 8015c86:	4814      	ldr	r0, [pc, #80]	@ (8015cd8 <get_config_payload_string+0x3a8>)
 8015c88:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015c8a:	4814      	ldr	r0, [pc, #80]	@ (8015cdc <get_config_payload_string+0x3ac>)
 8015c8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8015c8e:	4814      	ldr	r0, [pc, #80]	@ (8015ce0 <get_config_payload_string+0x3b0>)
 8015c90:	900d      	str	r0, [sp, #52]	@ 0x34
 8015c92:	4814      	ldr	r0, [pc, #80]	@ (8015ce4 <get_config_payload_string+0x3b4>)
 8015c94:	900c      	str	r0, [sp, #48]	@ 0x30
 8015c96:	4814      	ldr	r0, [pc, #80]	@ (8015ce8 <get_config_payload_string+0x3b8>)
 8015c98:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015c9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8015c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c9e:	481c      	ldr	r0, [pc, #112]	@ (8015d10 <get_config_payload_string+0x3e0>)
 8015ca0:	9008      	str	r0, [sp, #32]
 8015ca2:	9207      	str	r2, [sp, #28]
 8015ca4:	9106      	str	r1, [sp, #24]
 8015ca6:	9305      	str	r3, [sp, #20]
 8015ca8:	481a      	ldr	r0, [pc, #104]	@ (8015d14 <get_config_payload_string+0x3e4>)
 8015caa:	9004      	str	r0, [sp, #16]
 8015cac:	4811      	ldr	r0, [pc, #68]	@ (8015cf4 <get_config_payload_string+0x3c4>)
 8015cae:	9003      	str	r0, [sp, #12]
 8015cb0:	9202      	str	r2, [sp, #8]
 8015cb2:	4811      	ldr	r0, [pc, #68]	@ (8015cf8 <get_config_payload_string+0x3c8>)
 8015cb4:	9001      	str	r0, [sp, #4]
 8015cb6:	9100      	str	r1, [sp, #0]
 8015cb8:	4910      	ldr	r1, [pc, #64]	@ (8015cfc <get_config_payload_string+0x3cc>)
 8015cba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015cbc:	f017 fa66 	bl	802d18c <sprintf>
			break;
 8015cc0:	e70c      	b.n	8015adc <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8015cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015cc6:	e684      	b.n	80159d2 <get_config_payload_string+0xa2>
 8015cc8:	2000294c 	.word	0x2000294c
 8015ccc:	08037c94 	.word	0x08037c94
 8015cd0:	0803958c 	.word	0x0803958c
 8015cd4:	20002948 	.word	0x20002948
 8015cd8:	0803760c 	.word	0x0803760c
 8015cdc:	08037bb4 	.word	0x08037bb4
 8015ce0:	080395c8 	.word	0x080395c8
 8015ce4:	08037c74 	.word	0x08037c74
 8015ce8:	08037c88 	.word	0x08037c88
 8015cec:	08039670 	.word	0x08039670
 8015cf0:	08039674 	.word	0x08039674
 8015cf4:	0803baa8 	.word	0x0803baa8
 8015cf8:	0803962c 	.word	0x0803962c
 8015cfc:	08039730 	.word	0x08039730
 8015d00:	0803959c 	.word	0x0803959c
 8015d04:	08039694 	.word	0x08039694
 8015d08:	08039698 	.word	0x08039698
 8015d0c:	080395ac 	.word	0x080395ac
 8015d10:	080396c4 	.word	0x080396c4
 8015d14:	080396c8 	.word	0x080396c8

08015d18 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015d18:	b530      	push	{r4, r5, lr}
 8015d1a:	b083      	sub	sp, #12
 8015d1c:	461c      	mov	r4, r3
 8015d1e:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8015d22:	2a01      	cmp	r2, #1
 8015d24:	d00b      	beq.n	8015d3e <gen_bin_sensor_status_payload_JSON+0x26>
 8015d26:	2a02      	cmp	r2, #2
 8015d28:	d10b      	bne.n	8015d42 <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8015d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8015d54 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8015d2c:	b15d      	cbz	r5, 8015d46 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8015d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8015d58 <gen_bin_sensor_status_payload_JSON+0x40>)
 8015d30:	9201      	str	r2, [sp, #4]
 8015d32:	9400      	str	r4, [sp, #0]
 8015d34:	4a09      	ldr	r2, [pc, #36]	@ (8015d5c <gen_bin_sensor_status_payload_JSON+0x44>)
 8015d36:	f017 f8c1 	bl	802cebc <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8015d3a:	b003      	add	sp, #12
 8015d3c:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8015d3e:	4b08      	ldr	r3, [pc, #32]	@ (8015d60 <gen_bin_sensor_status_payload_JSON+0x48>)
 8015d40:	e7f4      	b.n	8015d2c <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8015d42:	2300      	movs	r3, #0
 8015d44:	e7f2      	b.n	8015d2c <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015d46:	4a07      	ldr	r2, [pc, #28]	@ (8015d64 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015d48:	9201      	str	r2, [sp, #4]
 8015d4a:	9400      	str	r4, [sp, #0]
 8015d4c:	4a03      	ldr	r2, [pc, #12]	@ (8015d5c <gen_bin_sensor_status_payload_JSON+0x44>)
 8015d4e:	f017 f8b5 	bl	802cebc <snprintf>
 8015d52:	e7f2      	b.n	8015d3a <gen_bin_sensor_status_payload_JSON+0x22>
 8015d54:	080392ac 	.word	0x080392ac
 8015d58:	0803937c 	.word	0x0803937c
 8015d5c:	080396f8 	.word	0x080396f8
 8015d60:	08039554 	.word	0x08039554
 8015d64:	08039394 	.word	0x08039394

08015d68 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015d68:	b500      	push	{lr}
 8015d6a:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015d6c:	9302      	str	r3, [sp, #8]
 8015d6e:	4b06      	ldr	r3, [pc, #24]	@ (8015d88 <generate_comand_topik_for_subscrabe+0x20>)
 8015d70:	9301      	str	r3, [sp, #4]
 8015d72:	4b06      	ldr	r3, [pc, #24]	@ (8015d8c <generate_comand_topik_for_subscrabe+0x24>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	9300      	str	r3, [sp, #0]
 8015d78:	4b05      	ldr	r3, [pc, #20]	@ (8015d90 <generate_comand_topik_for_subscrabe+0x28>)
 8015d7a:	4a06      	ldr	r2, [pc, #24]	@ (8015d94 <generate_comand_topik_for_subscrabe+0x2c>)
 8015d7c:	f017 f89e 	bl	802cebc <snprintf>
			break;
	}
}
 8015d80:	b005      	add	sp, #20
 8015d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d86:	bf00      	nop
 8015d88:	080392ac 	.word	0x080392ac
 8015d8c:	2000294c 	.word	0x2000294c
 8015d90:	08037c94 	.word	0x08037c94
 8015d94:	080396d4 	.word	0x080396d4

08015d98 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015d98:	b500      	push	{lr}
 8015d9a:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015d9c:	f04f 0c00 	mov.w	ip, #0
 8015da0:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015da4:	2a01      	cmp	r2, #1
 8015da6:	d006      	beq.n	8015db6 <generate_status_topik+0x1e>
 8015da8:	2a02      	cmp	r2, #2
 8015daa:	d00f      	beq.n	8015dcc <generate_status_topik+0x34>
 8015dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8015db0:	b005      	add	sp, #20
 8015db2:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015db6:	9302      	str	r3, [sp, #8]
 8015db8:	4b0a      	ldr	r3, [pc, #40]	@ (8015de4 <generate_status_topik+0x4c>)
 8015dba:	9301      	str	r3, [sp, #4]
 8015dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8015de8 <generate_status_topik+0x50>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	9300      	str	r3, [sp, #0]
 8015dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015dec <generate_status_topik+0x54>)
 8015dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8015df0 <generate_status_topik+0x58>)
 8015dc6:	f017 f879 	bl	802cebc <snprintf>
 8015dca:	e7f1      	b.n	8015db0 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	4b09      	ldr	r3, [pc, #36]	@ (8015df4 <generate_status_topik+0x5c>)
 8015dd0:	9301      	str	r3, [sp, #4]
 8015dd2:	4b05      	ldr	r3, [pc, #20]	@ (8015de8 <generate_status_topik+0x50>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	4b04      	ldr	r3, [pc, #16]	@ (8015dec <generate_status_topik+0x54>)
 8015dda:	4a05      	ldr	r2, [pc, #20]	@ (8015df0 <generate_status_topik+0x58>)
 8015ddc:	f017 f86e 	bl	802cebc <snprintf>
 8015de0:	e7e6      	b.n	8015db0 <generate_status_topik+0x18>
 8015de2:	bf00      	nop
 8015de4:	08039554 	.word	0x08039554
 8015de8:	2000294c 	.word	0x2000294c
 8015dec:	08037c94 	.word	0x08037c94
 8015df0:	080396e4 	.word	0x080396e4
 8015df4:	080392ac 	.word	0x080392ac

08015df8 <timer_fn>:
	}
	(void) c;
}


void timer_fn(void *arg) {
 8015df8:	b508      	push	{r3, lr}
	struct mg_mgr *mgr = (struct mg_mgr *) arg;
	if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015dfa:	4b08      	ldr	r3, [pc, #32]	@ (8015e1c <timer_fn+0x24>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	b12b      	cbz	r3, 8015e0c <timer_fn+0x14>
	if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015e00:	4b06      	ldr	r3, [pc, #24]	@ (8015e1c <timer_fn+0x24>)
 8015e02:	6818      	ldr	r0, [r3, #0]
 8015e04:	b108      	cbz	r0, 8015e0a <timer_fn+0x12>
 8015e06:	f014 fe97 	bl	802ab38 <mg_sntp_request>
}
 8015e0a:	bd08      	pop	{r3, pc}
	if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015e0c:	4a04      	ldr	r2, [pc, #16]	@ (8015e20 <timer_fn+0x28>)
 8015e0e:	4619      	mov	r1, r3
 8015e10:	f014 ff64 	bl	802acdc <mg_sntp_connect>
 8015e14:	4b01      	ldr	r3, [pc, #4]	@ (8015e1c <timer_fn+0x24>)
 8015e16:	6018      	str	r0, [r3, #0]
 8015e18:	e7f2      	b.n	8015e00 <timer_fn+0x8>
 8015e1a:	bf00      	nop
 8015e1c:	20002950 	.word	0x20002950
 8015e20:	08015efd 	.word	0x08015efd

08015e24 <update_rtc_from_ntp>:
void update_rtc_from_ntp(uint64_t unix_ms) {
 8015e24:	b510      	push	{r4, lr}
 8015e26:	b096      	sub	sp, #88	@ 0x58
    RTC_TimeTypeDef sTime = {0};
 8015e28:	2300      	movs	r3, #0
 8015e2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8015e2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8015e2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015e30:	9314      	str	r3, [sp, #80]	@ 0x50
 8015e32:	9315      	str	r3, [sp, #84]	@ 0x54
    RTC_DateTypeDef sDate = {0};
 8015e34:	9310      	str	r3, [sp, #64]	@ 0x40
    time_t unix_time = unix_ms / 1000;  // Convert milliseconds to seconds
 8015e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f7fa ff8c 	bl	8010d58 <__aeabi_uldivmod>
 8015e40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
    gmtime_r(&unix_time, &t);  // Parse time into the tm structure
 8015e44:	a905      	add	r1, sp, #20
 8015e46:	a80e      	add	r0, sp, #56	@ 0x38
 8015e48:	f017 fdf8 	bl	802da3c <gmtime_r>
    sTime.Hours = t.tm_hour;
 8015e4c:	9b07      	ldr	r3, [sp, #28]
 8015e4e:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    sTime.Minutes = t.tm_min;
 8015e52:	9b06      	ldr	r3, [sp, #24]
 8015e54:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
    sTime.Seconds = t.tm_sec;
 8015e58:	9b05      	ldr	r3, [sp, #20]
 8015e5a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
    sDate.Year = t.tm_year - 100; // STM32 counts years from 2000, while tm_year starts from 1900
 8015e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e60:	3b64      	subs	r3, #100	@ 0x64
 8015e62:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
    sDate.Month = t.tm_mon + 1;   // tm_mon [0..11], RTC [1..12]
 8015e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e68:	3301      	adds	r3, #1
 8015e6a:	f88d 3041 	strb.w	r3, [sp, #65]	@ 0x41
    sDate.Date = t.tm_mday;
 8015e6e:	9b08      	ldr	r3, [sp, #32]
 8015e70:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
    sDate.WeekDay = t.tm_wday == 0 ? 7 : t.tm_wday; // In STM32, Sunday = 7
 8015e74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e76:	b363      	cbz	r3, 8015ed2 <update_rtc_from_ntp+0xae>
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8015e7e:	2200      	movs	r2, #0
 8015e80:	a911      	add	r1, sp, #68	@ 0x44
 8015e82:	481a      	ldr	r0, [pc, #104]	@ (8015eec <update_rtc_from_ntp+0xc8>)
 8015e84:	f002 fa22 	bl	80182cc <HAL_RTC_SetTime>
 8015e88:	bb28      	cbnz	r0, 8015ed6 <update_rtc_from_ntp+0xb2>
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	a910      	add	r1, sp, #64	@ 0x40
 8015e8e:	4817      	ldr	r0, [pc, #92]	@ (8015eec <update_rtc_from_ntp+0xc8>)
 8015e90:	f002 fa7c 	bl	801838c <HAL_RTC_SetDate>
 8015e94:	bb20      	cbnz	r0, 8015ee0 <update_rtc_from_ntp+0xbc>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8015e96:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8015e9a:	2101      	movs	r1, #1
 8015e9c:	4813      	ldr	r0, [pc, #76]	@ (8015eec <update_rtc_from_ntp+0xc8>)
 8015e9e:	f002 fb10 	bl	80184c2 <HAL_RTCEx_BKUPWrite>
            sDate.Year + 2000, sDate.Month, sDate.Date,
 8015ea2:	f89d 2043 	ldrb.w	r2, [sp, #67]	@ 0x43
 8015ea6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8015eaa:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 8015eae:	f89d 0045 	ldrb.w	r0, [sp, #69]	@ 0x45
 8015eb2:	f89d 4046 	ldrb.w	r4, [sp, #70]	@ 0x46
    logging(L_INFO, "RTC updated: %04d-%02d-%02d %02d:%02d:%02d",
 8015eb6:	9403      	str	r4, [sp, #12]
 8015eb8:	9002      	str	r0, [sp, #8]
 8015eba:	9101      	str	r1, [sp, #4]
 8015ebc:	9300      	str	r3, [sp, #0]
 8015ebe:	f89d 3041 	ldrb.w	r3, [sp, #65]	@ 0x41
 8015ec2:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8015ec6:	490a      	ldr	r1, [pc, #40]	@ (8015ef0 <update_rtc_from_ntp+0xcc>)
 8015ec8:	2001      	movs	r0, #1
 8015eca:	f7fc fa01 	bl	80122d0 <logging>
}
 8015ece:	b016      	add	sp, #88	@ 0x58
 8015ed0:	bd10      	pop	{r4, pc}
    sDate.WeekDay = t.tm_wday == 0 ? 7 : t.tm_wday; // In STM32, Sunday = 7
 8015ed2:	2307      	movs	r3, #7
 8015ed4:	e7d1      	b.n	8015e7a <update_rtc_from_ntp+0x56>
        logging(L_ERR, "Failed to set RTC time");
 8015ed6:	4907      	ldr	r1, [pc, #28]	@ (8015ef4 <update_rtc_from_ntp+0xd0>)
 8015ed8:	2003      	movs	r0, #3
 8015eda:	f7fc f9f9 	bl	80122d0 <logging>
 8015ede:	e7d4      	b.n	8015e8a <update_rtc_from_ntp+0x66>
        logging(L_ERR, "Failed to set RTC date");
 8015ee0:	4905      	ldr	r1, [pc, #20]	@ (8015ef8 <update_rtc_from_ntp+0xd4>)
 8015ee2:	2003      	movs	r0, #3
 8015ee4:	f7fc f9f4 	bl	80122d0 <logging>
 8015ee8:	e7d5      	b.n	8015e96 <update_rtc_from_ntp+0x72>
 8015eea:	bf00      	nop
 8015eec:	20000980 	.word	0x20000980
 8015ef0:	080398e0 	.word	0x080398e0
 8015ef4:	080398b0 	.word	0x080398b0
 8015ef8:	080398c8 	.word	0x080398c8

08015efc <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ev == MG_EV_SNTP_TIME) {
 8015efe:	2912      	cmp	r1, #18
 8015f00:	d002      	beq.n	8015f08 <sfn+0xc>
	} else if (ev == MG_EV_CLOSE) {
 8015f02:	2909      	cmp	r1, #9
 8015f04:	d04a      	beq.n	8015f9c <sfn+0xa0>
}
 8015f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f08:	4614      	mov	r4, r2
		logging(L_INFO, "Response from NTP server received");
 8015f0a:	4928      	ldr	r1, [pc, #160]	@ (8015fac <sfn+0xb0>)
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	f7fc f9df 	bl	80122d0 <logging>
		uint64_t curtime = mg_now();
 8015f12:	f014 fd4d 	bl	802a9b0 <mg_now>
 8015f16:	4606      	mov	r6, r0
 8015f18:	460d      	mov	r5, r1
		MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015f1a:	4b25      	ldr	r3, [pc, #148]	@ (8015fb0 <sfn+0xb4>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	dc24      	bgt.n	8015f6c <sfn+0x70>
		logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015f22:	4632      	mov	r2, r6
 8015f24:	462b      	mov	r3, r5
 8015f26:	4923      	ldr	r1, [pc, #140]	@ (8015fb4 <sfn+0xb8>)
 8015f28:	2001      	movs	r0, #1
 8015f2a:	f7fc f9d1 	bl	80122d0 <logging>
		uint64_t t = *(uint64_t *) ev_data;
 8015f2e:	6827      	ldr	r7, [r4, #0]
 8015f30:	6864      	ldr	r4, [r4, #4]
		s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015f32:	f011 f8eb 	bl	802710c <mg_millis>
 8015f36:	1a38      	subs	r0, r7, r0
 8015f38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015f3c:	f04f 0300 	mov.w	r3, #0
 8015f40:	eb64 0101 	sbc.w	r1, r4, r1
 8015f44:	f7fa ff08 	bl	8010d58 <__aeabi_uldivmod>
 8015f48:	4b1b      	ldr	r3, [pc, #108]	@ (8015fb8 <sfn+0xbc>)
 8015f4a:	e9c3 0100 	strd	r0, r1, [r3]
		MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015f4e:	4b18      	ldr	r3, [pc, #96]	@ (8015fb0 <sfn+0xb4>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b01      	cmp	r3, #1
 8015f54:	dc16      	bgt.n	8015f84 <sfn+0x88>
		logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8015f56:	463a      	mov	r2, r7
 8015f58:	4623      	mov	r3, r4
 8015f5a:	4918      	ldr	r1, [pc, #96]	@ (8015fbc <sfn+0xc0>)
 8015f5c:	2001      	movs	r0, #1
 8015f5e:	f7fc f9b7 	bl	80122d0 <logging>
		update_rtc_from_ntp(curtime);
 8015f62:	4630      	mov	r0, r6
 8015f64:	4629      	mov	r1, r5
 8015f66:	f7ff ff5d 	bl	8015e24 <update_rtc_from_ntp>
 8015f6a:	e7cc      	b.n	8015f06 <sfn+0xa>
		MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015f6c:	4b14      	ldr	r3, [pc, #80]	@ (8015fc0 <sfn+0xc4>)
 8015f6e:	2242      	movs	r2, #66	@ 0x42
 8015f70:	4914      	ldr	r1, [pc, #80]	@ (8015fc4 <sfn+0xc8>)
 8015f72:	2002      	movs	r0, #2
 8015f74:	f011 f8d0 	bl	8027118 <mg_log_prefix>
 8015f78:	4632      	mov	r2, r6
 8015f7a:	462b      	mov	r3, r5
 8015f7c:	480d      	ldr	r0, [pc, #52]	@ (8015fb4 <sfn+0xb8>)
 8015f7e:	f00e ff79 	bl	8024e74 <mg_log>
 8015f82:	e7ce      	b.n	8015f22 <sfn+0x26>
		MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015f84:	4b0e      	ldr	r3, [pc, #56]	@ (8015fc0 <sfn+0xc4>)
 8015f86:	2247      	movs	r2, #71	@ 0x47
 8015f88:	490e      	ldr	r1, [pc, #56]	@ (8015fc4 <sfn+0xc8>)
 8015f8a:	2002      	movs	r0, #2
 8015f8c:	f011 f8c4 	bl	8027118 <mg_log_prefix>
 8015f90:	463a      	mov	r2, r7
 8015f92:	4623      	mov	r3, r4
 8015f94:	480c      	ldr	r0, [pc, #48]	@ (8015fc8 <sfn+0xcc>)
 8015f96:	f00e ff6d 	bl	8024e74 <mg_log>
 8015f9a:	e7dc      	b.n	8015f56 <sfn+0x5a>
		logging(L_INFO, "NTP connection is closed");
 8015f9c:	490b      	ldr	r1, [pc, #44]	@ (8015fcc <sfn+0xd0>)
 8015f9e:	2001      	movs	r0, #1
 8015fa0:	f7fc f996 	bl	80122d0 <logging>
		s_sntp_conn = NULL;
 8015fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8015fd0 <sfn+0xd4>)
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	601a      	str	r2, [r3, #0]
}
 8015faa:	e7ac      	b.n	8015f06 <sfn+0xa>
 8015fac:	0803990c 	.word	0x0803990c
 8015fb0:	2000012c 	.word	0x2000012c
 8015fb4:	08039950 	.word	0x08039950
 8015fb8:	20002958 	.word	0x20002958
 8015fbc:	080399a8 	.word	0x080399a8
 8015fc0:	08039a04 	.word	0x08039a04
 8015fc4:	08039930 	.word	0x08039930
 8015fc8:	08039984 	.word	0x08039984
 8015fcc:	080399cc 	.word	0x080399cc
 8015fd0:	20002950 	.word	0x20002950

08015fd4 <start_sntp>:

void start_sntp(void *arg){
 8015fd4:	b530      	push	{r4, r5, lr}
 8015fd6:	b085      	sub	sp, #20
 8015fd8:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015fda:	490d      	ldr	r1, [pc, #52]	@ (8016010 <start_sntp+0x3c>)
 8015fdc:	2001      	movs	r0, #1
 8015fde:	f7fc f977 	bl	80122d0 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8015fe2:	9402      	str	r4, [sp, #8]
 8015fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8016014 <start_sntp+0x40>)
 8015fe6:	9501      	str	r5, [sp, #4]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f010 fafe 	bl	80265f4 <mg_timer_add>
	mg_timer_add(mgr, 4000000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every ~ 60 minutes
 8015ff8:	9402      	str	r4, [sp, #8]
 8015ffa:	9501      	str	r5, [sp, #4]
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	9300      	str	r3, [sp, #0]
 8016000:	4a05      	ldr	r2, [pc, #20]	@ (8016018 <start_sntp+0x44>)
 8016002:	2300      	movs	r3, #0
 8016004:	4620      	mov	r0, r4
 8016006:	f010 faf5 	bl	80265f4 <mg_timer_add>

}
 801600a:	b005      	add	sp, #20
 801600c:	bd30      	pop	{r4, r5, pc}
 801600e:	bf00      	nop
 8016010:	080399e8 	.word	0x080399e8
 8016014:	08015df9 	.word	0x08015df9
 8016018:	003d0900 	.word	0x003d0900

0801601c <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 801601c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801601e:	fb01 f400 	mul.w	r4, r1, r0
 8016022:	4620      	mov	r0, r4
 8016024:	f005 fc28 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8016028:	4605      	mov	r5, r0
 801602a:	b118      	cbz	r0, 8016034 <my_calloc+0x18>
 801602c:	4622      	mov	r2, r4
 801602e:	2100      	movs	r1, #0
 8016030:	f017 fc6e 	bl	802d910 <memset>
}
 8016034:	4628      	mov	r0, r5
 8016036:	bd38      	pop	{r3, r4, r5, pc}

08016038 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8016038:	b570      	push	{r4, r5, r6, lr}
 801603a:	b088      	sub	sp, #32
 801603c:	4605      	mov	r5, r0
 801603e:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8016040:	4917      	ldr	r1, [pc, #92]	@ (80160a0 <dev_description_handler+0x68>)
 8016042:	2000      	movs	r0, #0
 8016044:	f7fc f944 	bl	80122d0 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8016048:	ae06      	add	r6, sp, #24
 801604a:	4916      	ldr	r1, [pc, #88]	@ (80160a4 <dev_description_handler+0x6c>)
 801604c:	4630      	mov	r0, r6
 801604e:	f00f f8ef 	bl	8025230 <mg_str_s>
 8016052:	2300      	movs	r3, #0
 8016054:	9300      	str	r3, [sp, #0]
 8016056:	e896 000c 	ldmia.w	r6, {r2, r3}
 801605a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801605e:	f00f fb09 	bl	8025674 <mg_match>
 8016062:	b1a8      	cbz	r0, 8016090 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8016064:	4b10      	ldr	r3, [pc, #64]	@ (80160a8 <dev_description_handler+0x70>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	9305      	str	r3, [sp, #20]
 801606a:	4b10      	ldr	r3, [pc, #64]	@ (80160ac <dev_description_handler+0x74>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	9304      	str	r3, [sp, #16]
 8016070:	4b0f      	ldr	r3, [pc, #60]	@ (80160b0 <dev_description_handler+0x78>)
 8016072:	9303      	str	r3, [sp, #12]
 8016074:	4b0f      	ldr	r3, [pc, #60]	@ (80160b4 <dev_description_handler+0x7c>)
 8016076:	9302      	str	r3, [sp, #8]
 8016078:	4b0f      	ldr	r3, [pc, #60]	@ (80160b8 <dev_description_handler+0x80>)
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	4b0f      	ldr	r3, [pc, #60]	@ (80160bc <dev_description_handler+0x84>)
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	4b0f      	ldr	r3, [pc, #60]	@ (80160c0 <dev_description_handler+0x88>)
 8016082:	4a10      	ldr	r2, [pc, #64]	@ (80160c4 <dev_description_handler+0x8c>)
 8016084:	21c8      	movs	r1, #200	@ 0xc8
 8016086:	4628      	mov	r0, r5
 8016088:	f00e ff48 	bl	8024f1c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 801608c:	b008      	add	sp, #32
 801608e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8016090:	4b0d      	ldr	r3, [pc, #52]	@ (80160c8 <dev_description_handler+0x90>)
 8016092:	4a0c      	ldr	r2, [pc, #48]	@ (80160c4 <dev_description_handler+0x8c>)
 8016094:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016098:	4628      	mov	r0, r5
 801609a:	f00e ff3f 	bl	8024f1c <mg_http_reply>
}
 801609e:	e7f5      	b.n	801608c <dev_description_handler+0x54>
 80160a0:	08039a08 	.word	0x08039a08
 80160a4:	08037b08 	.word	0x08037b08
 80160a8:	2000296c 	.word	0x2000296c
 80160ac:	20002974 	.word	0x20002974
 80160b0:	0803760c 	.word	0x0803760c
 80160b4:	08037c74 	.word	0x08037c74
 80160b8:	080395c8 	.word	0x080395c8
 80160bc:	08037c88 	.word	0x08037c88
 80160c0:	08039d10 	.word	0x08039d10
 80160c4:	080381c0 	.word	0x080381c0
 80160c8:	08038854 	.word	0x08038854

080160cc <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 80160cc:	b510      	push	{r4, lr}
 80160ce:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 80160d0:	4905      	ldr	r1, [pc, #20]	@ (80160e8 <dev_404_handler+0x1c>)
 80160d2:	2000      	movs	r0, #0
 80160d4:	f7fc f8fc 	bl	80122d0 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 80160d8:	4b04      	ldr	r3, [pc, #16]	@ (80160ec <dev_404_handler+0x20>)
 80160da:	4a05      	ldr	r2, [pc, #20]	@ (80160f0 <dev_404_handler+0x24>)
 80160dc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80160e0:	4620      	mov	r0, r4
 80160e2:	f00e ff1b 	bl	8024f1c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 80160e6:	bd10      	pop	{r4, pc}
 80160e8:	08039a28 	.word	0x08039a28
 80160ec:	08039a40 	.word	0x08039a40
 80160f0:	080381c0 	.word	0x080381c0

080160f4 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 80160f4:	290b      	cmp	r1, #11
 80160f6:	d000      	beq.n	80160fa <ssdp_web_handler+0x6>
 80160f8:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 80160fa:	b570      	push	{r4, r5, r6, lr}
 80160fc:	b086      	sub	sp, #24
 80160fe:	4605      	mov	r5, r0
 8016100:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8016102:	4917      	ldr	r1, [pc, #92]	@ (8016160 <ssdp_web_handler+0x6c>)
 8016104:	2000      	movs	r0, #0
 8016106:	f7fc f8e3 	bl	80122d0 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 801610a:	ae02      	add	r6, sp, #8
 801610c:	4915      	ldr	r1, [pc, #84]	@ (8016164 <ssdp_web_handler+0x70>)
 801610e:	4630      	mov	r0, r6
 8016110:	f00f f88e 	bl	8025230 <mg_str_s>
 8016114:	2300      	movs	r3, #0
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	e896 000c 	ldmia.w	r6, {r2, r3}
 801611c:	f104 0108 	add.w	r1, r4, #8
 8016120:	c903      	ldmia	r1, {r0, r1}
 8016122:	f00f faa7 	bl	8025674 <mg_match>
 8016126:	b128      	cbz	r0, 8016134 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8016128:	4621      	mov	r1, r4
 801612a:	4628      	mov	r0, r5
 801612c:	f7ff ff84 	bl	8016038 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8016130:	b006      	add	sp, #24
 8016132:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8016134:	ae04      	add	r6, sp, #16
 8016136:	490c      	ldr	r1, [pc, #48]	@ (8016168 <ssdp_web_handler+0x74>)
 8016138:	4630      	mov	r0, r6
 801613a:	f00f f879 	bl	8025230 <mg_str_s>
 801613e:	2300      	movs	r3, #0
 8016140:	9300      	str	r3, [sp, #0]
 8016142:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016146:	f104 0108 	add.w	r1, r4, #8
 801614a:	c903      	ldmia	r1, {r0, r1}
 801614c:	f00f fa92 	bl	8025674 <mg_match>
 8016150:	2800      	cmp	r0, #0
 8016152:	d0ed      	beq.n	8016130 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8016154:	4621      	mov	r1, r4
 8016156:	4628      	mov	r0, r5
 8016158:	f7ff ffb8 	bl	80160cc <dev_404_handler>
}
 801615c:	e7e8      	b.n	8016130 <ssdp_web_handler+0x3c>
 801615e:	bf00      	nop
 8016160:	08039a6c 	.word	0x08039a6c
 8016164:	08039a94 	.word	0x08039a94
 8016168:	08039aac 	.word	0x08039aac

0801616c <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 801616c:	b510      	push	{r4, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	4602      	mov	r2, r0
 8016172:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8016174:	0e14      	lsrs	r4, r2, #24
 8016176:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 801617a:	0c11      	lsrs	r1, r2, #16
 801617c:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8016180:	0a13      	lsrs	r3, r2, #8
 8016182:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8016186:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 801618a:	9401      	str	r4, [sp, #4]
 801618c:	b2c9      	uxtb	r1, r1
 801618e:	9100      	str	r1, [sp, #0]
 8016190:	b2db      	uxtb	r3, r3
 8016192:	b2d2      	uxtb	r2, r2
 8016194:	4902      	ldr	r1, [pc, #8]	@ (80161a0 <ip_to_string+0x34>)
 8016196:	f016 fff9 	bl	802d18c <sprintf>
}
 801619a:	b004      	add	sp, #16
 801619c:	bd10      	pop	{r4, pc}
 801619e:	bf00      	nop
 80161a0:	08039ab0 	.word	0x08039ab0

080161a4 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 80161a4:	b570      	push	{r4, r5, r6, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 80161aa:	491e      	ldr	r1, [pc, #120]	@ (8016224 <send_ssdp_notify+0x80>)
 80161ac:	2000      	movs	r0, #0
 80161ae:	f7fc f88f 	bl	80122d0 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 80161b2:	4b1d      	ldr	r3, [pc, #116]	@ (8016228 <send_ssdp_notify+0x84>)
 80161b4:	6818      	ldr	r0, [r3, #0]
 80161b6:	f7fa f873 	bl	80102a0 <strlen>
 80161ba:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 80161bc:	2101      	movs	r1, #1
 80161be:	f200 1039 	addw	r0, r0, #313	@ 0x139
 80161c2:	f7ff ff2b 	bl	801601c <my_calloc>
 80161c6:	4a19      	ldr	r2, [pc, #100]	@ (801622c <send_ssdp_notify+0x88>)
 80161c8:	6010      	str	r0, [r2, #0]
	if (!buff) {
 80161ca:	b330      	cbz	r0, 801621a <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 80161cc:	4b18      	ldr	r3, [pc, #96]	@ (8016230 <send_ssdp_notify+0x8c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	4d18      	ldr	r5, [pc, #96]	@ (8016234 <send_ssdp_notify+0x90>)
 80161d2:	6829      	ldr	r1, [r5, #0]
 80161d4:	6898      	ldr	r0, [r3, #8]
 80161d6:	f7ff ffc9 	bl	801616c <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 80161da:	4b13      	ldr	r3, [pc, #76]	@ (8016228 <send_ssdp_notify+0x84>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	9302      	str	r3, [sp, #8]
 80161e0:	4b15      	ldr	r3, [pc, #84]	@ (8016238 <send_ssdp_notify+0x94>)
 80161e2:	9301      	str	r3, [sp, #4]
 80161e4:	682b      	ldr	r3, [r5, #0]
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	4b14      	ldr	r3, [pc, #80]	@ (801623c <send_ssdp_notify+0x98>)
 80161ea:	4a15      	ldr	r2, [pc, #84]	@ (8016240 <send_ssdp_notify+0x9c>)
 80161ec:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 80161f0:	480e      	ldr	r0, [pc, #56]	@ (801622c <send_ssdp_notify+0x88>)
 80161f2:	6800      	ldr	r0, [r0, #0]
 80161f4:	f016 fe62 	bl	802cebc <snprintf>
    if (udp_conn != NULL) {
 80161f8:	b14e      	cbz	r6, 801620e <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 80161fa:	4b0c      	ldr	r3, [pc, #48]	@ (801622c <send_ssdp_notify+0x88>)
 80161fc:	681c      	ldr	r4, [r3, #0]
 80161fe:	4620      	mov	r0, r4
 8016200:	f7fa f84e 	bl	80102a0 <strlen>
 8016204:	4602      	mov	r2, r0
 8016206:	4621      	mov	r1, r4
 8016208:	4630      	mov	r0, r6
 801620a:	f012 f839 	bl	8028280 <mg_send>
    free(buff);
 801620e:	4b07      	ldr	r3, [pc, #28]	@ (801622c <send_ssdp_notify+0x88>)
 8016210:	6818      	ldr	r0, [r3, #0]
 8016212:	f005 fbb3 	bl	801b97c <vPortFree>
}
 8016216:	b004      	add	sp, #16
 8016218:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 801621a:	490a      	ldr	r1, [pc, #40]	@ (8016244 <send_ssdp_notify+0xa0>)
 801621c:	2003      	movs	r0, #3
 801621e:	f7fc f857 	bl	80122d0 <logging>
		return; //TODO add log
 8016222:	e7f8      	b.n	8016216 <send_ssdp_notify+0x72>
 8016224:	08039abc 	.word	0x08039abc
 8016228:	20002974 	.word	0x20002974
 801622c:	20002970 	.word	0x20002970
 8016230:	20002964 	.word	0x20002964
 8016234:	2000296c 	.word	0x2000296c
 8016238:	08039b0c 	.word	0x08039b0c
 801623c:	08039b04 	.word	0x08039b04
 8016240:	08039c18 	.word	0x08039c18
 8016244:	08039ad4 	.word	0x08039ad4

08016248 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8016248:	2907      	cmp	r1, #7
 801624a:	d000      	beq.n	801624e <ssdp_listener_handler+0x6>
 801624c:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 801624e:	b570      	push	{r4, r5, r6, lr}
 8016250:	b088      	sub	sp, #32
 8016252:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8016254:	491a      	ldr	r1, [pc, #104]	@ (80162c0 <ssdp_listener_handler+0x78>)
 8016256:	2000      	movs	r0, #0
 8016258:	f7fc f83a 	bl	80122d0 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 801625c:	4b19      	ldr	r3, [pc, #100]	@ (80162c4 <ssdp_listener_handler+0x7c>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	ad02      	add	r5, sp, #8
 8016262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016264:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016266:	4628      	mov	r0, r5
 8016268:	f00e ffee 	bl	8025248 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 801626c:	ae04      	add	r6, sp, #16
 801626e:	4916      	ldr	r1, [pc, #88]	@ (80162c8 <ssdp_listener_handler+0x80>)
 8016270:	4630      	mov	r0, r6
 8016272:	f00e ffdd 	bl	8025230 <mg_str_s>
 8016276:	2300      	movs	r3, #0
 8016278:	9300      	str	r3, [sp, #0]
 801627a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801627e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016282:	f00f f9f7 	bl	8025674 <mg_match>
 8016286:	b918      	cbnz	r0, 8016290 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8016288:	2300      	movs	r3, #0
 801628a:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 801628c:	b008      	add	sp, #32
 801628e:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8016290:	ad06      	add	r5, sp, #24
 8016292:	490e      	ldr	r1, [pc, #56]	@ (80162cc <ssdp_listener_handler+0x84>)
 8016294:	4628      	mov	r0, r5
 8016296:	f00e ffcb 	bl	8025230 <mg_str_s>
 801629a:	2300      	movs	r3, #0
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	e895 000c 	ldmia.w	r5, {r2, r3}
 80162a2:	a902      	add	r1, sp, #8
 80162a4:	c903      	ldmia	r1, {r0, r1}
 80162a6:	f00f f9e5 	bl	8025674 <mg_match>
 80162aa:	2800      	cmp	r0, #0
 80162ac:	d0ec      	beq.n	8016288 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 80162ae:	4908      	ldr	r1, [pc, #32]	@ (80162d0 <ssdp_listener_handler+0x88>)
 80162b0:	2000      	movs	r0, #0
 80162b2:	f7fc f80d 	bl	80122d0 <logging>
			send_ssdp_notify(udp_listen_conn);
 80162b6:	4b03      	ldr	r3, [pc, #12]	@ (80162c4 <ssdp_listener_handler+0x7c>)
 80162b8:	6818      	ldr	r0, [r3, #0]
 80162ba:	f7ff ff73 	bl	80161a4 <send_ssdp_notify>
 80162be:	e7e3      	b.n	8016288 <ssdp_listener_handler+0x40>
 80162c0:	08039b14 	.word	0x08039b14
 80162c4:	20002960 	.word	0x20002960
 80162c8:	08039b48 	.word	0x08039b48
 80162cc:	08039b54 	.word	0x08039b54
 80162d0:	08039b64 	.word	0x08039b64

080162d4 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 80162d4:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 80162d6:	490c      	ldr	r1, [pc, #48]	@ (8016308 <ssdp_timer_handler+0x34>)
 80162d8:	2000      	movs	r0, #0
 80162da:	f7fb fff9 	bl	80122d0 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 80162de:	2300      	movs	r3, #0
 80162e0:	461a      	mov	r2, r3
 80162e2:	490a      	ldr	r1, [pc, #40]	@ (801630c <ssdp_timer_handler+0x38>)
 80162e4:	480a      	ldr	r0, [pc, #40]	@ (8016310 <ssdp_timer_handler+0x3c>)
 80162e6:	6800      	ldr	r0, [r0, #0]
 80162e8:	f013 fc9e 	bl	8029c28 <mg_connect>
	if (conn == NULL){
 80162ec:	b130      	cbz	r0, 80162fc <ssdp_timer_handler+0x28>
 80162ee:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 80162f0:	f7ff ff58 	bl	80161a4 <send_ssdp_notify>
	mg_close_conn(conn);
 80162f4:	4620      	mov	r0, r4
 80162f6:	f011 fe81 	bl	8027ffc <mg_close_conn>
}
 80162fa:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 80162fc:	4905      	ldr	r1, [pc, #20]	@ (8016314 <ssdp_timer_handler+0x40>)
 80162fe:	2003      	movs	r0, #3
 8016300:	f7fb ffe6 	bl	80122d0 <logging>
		return ;
 8016304:	e7f9      	b.n	80162fa <ssdp_timer_handler+0x26>
 8016306:	bf00      	nop
 8016308:	08039b94 	.word	0x08039b94
 801630c:	08039eb4 	.word	0x08039eb4
 8016310:	20002968 	.word	0x20002968
 8016314:	08039bac 	.word	0x08039bac

08016318 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8016318:	b570      	push	{r4, r5, r6, lr}
 801631a:	4606      	mov	r6, r0
 801631c:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 801631e:	4910      	ldr	r1, [pc, #64]	@ (8016360 <ssdp_set_id+0x48>)
 8016320:	2000      	movs	r0, #0
 8016322:	f7fb ffd5 	bl	80122d0 <logging>
	if (id && (id_len > 0)){
 8016326:	b1d6      	cbz	r6, 801635e <ssdp_set_id+0x46>
 8016328:	b1cd      	cbz	r5, 801635e <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 801632a:	4b0e      	ldr	r3, [pc, #56]	@ (8016364 <ssdp_set_id+0x4c>)
 801632c:	6818      	ldr	r0, [r3, #0]
 801632e:	b108      	cbz	r0, 8016334 <ssdp_set_id+0x1c>
 8016330:	f005 fb24 	bl	801b97c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8016334:	0068      	lsls	r0, r5, #1
 8016336:	2101      	movs	r1, #1
 8016338:	4408      	add	r0, r1
 801633a:	f7ff fe6f 	bl	801601c <my_calloc>
 801633e:	4b09      	ldr	r3, [pc, #36]	@ (8016364 <ssdp_set_id+0x4c>)
 8016340:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8016342:	b160      	cbz	r0, 801635e <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8016344:	2400      	movs	r4, #0
 8016346:	e008      	b.n	801635a <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8016348:	4b06      	ldr	r3, [pc, #24]	@ (8016364 <ssdp_set_id+0x4c>)
 801634a:	6818      	ldr	r0, [r3, #0]
 801634c:	5d32      	ldrb	r2, [r6, r4]
 801634e:	4906      	ldr	r1, [pc, #24]	@ (8016368 <ssdp_set_id+0x50>)
 8016350:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8016354:	f016 ff1a 	bl	802d18c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8016358:	3401      	adds	r4, #1
 801635a:	42a5      	cmp	r5, r4
 801635c:	d8f4      	bhi.n	8016348 <ssdp_set_id+0x30>
}
 801635e:	bd70      	pop	{r4, r5, r6, pc}
 8016360:	08039bd4 	.word	0x08039bd4
 8016364:	20002974 	.word	0x20002974
 8016368:	08039534 	.word	0x08039534

0801636c <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 801636c:	b530      	push	{r4, r5, lr}
 801636e:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8016370:	4b18      	ldr	r3, [pc, #96]	@ (80163d4 <ssdp_start_server+0x68>)
 8016372:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8016374:	4b18      	ldr	r3, [pc, #96]	@ (80163d8 <ssdp_start_server+0x6c>)
 8016376:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8016378:	2101      	movs	r1, #1
 801637a:	2028      	movs	r0, #40	@ 0x28
 801637c:	f7ff fe4e 	bl	801601c <my_calloc>
 8016380:	4b16      	ldr	r3, [pc, #88]	@ (80163dc <ssdp_start_server+0x70>)
 8016382:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8016384:	b318      	cbz	r0, 80163ce <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8016386:	4d14      	ldr	r5, [pc, #80]	@ (80163d8 <ssdp_start_server+0x6c>)
 8016388:	2106      	movs	r1, #6
 801638a:	6828      	ldr	r0, [r5, #0]
 801638c:	f7ff ffc4 	bl	8016318 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8016390:	4913      	ldr	r1, [pc, #76]	@ (80163e0 <ssdp_start_server+0x74>)
 8016392:	2001      	movs	r0, #1
 8016394:	f7fb ff9c 	bl	80122d0 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8016398:	4c0e      	ldr	r4, [pc, #56]	@ (80163d4 <ssdp_start_server+0x68>)
 801639a:	2300      	movs	r3, #0
 801639c:	9302      	str	r3, [sp, #8]
 801639e:	4b11      	ldr	r3, [pc, #68]	@ (80163e4 <ssdp_start_server+0x78>)
 80163a0:	9301      	str	r3, [sp, #4]
 80163a2:	2303      	movs	r3, #3
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80163aa:	2300      	movs	r3, #0
 80163ac:	6820      	ldr	r0, [r4, #0]
 80163ae:	f010 f921 	bl	80265f4 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 80163b2:	682b      	ldr	r3, [r5, #0]
 80163b4:	4a0c      	ldr	r2, [pc, #48]	@ (80163e8 <ssdp_start_server+0x7c>)
 80163b6:	490d      	ldr	r1, [pc, #52]	@ (80163ec <ssdp_start_server+0x80>)
 80163b8:	6820      	ldr	r0, [r4, #0]
 80163ba:	f011 fef9 	bl	80281b0 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 80163be:	682b      	ldr	r3, [r5, #0]
 80163c0:	4a0b      	ldr	r2, [pc, #44]	@ (80163f0 <ssdp_start_server+0x84>)
 80163c2:	490c      	ldr	r1, [pc, #48]	@ (80163f4 <ssdp_start_server+0x88>)
 80163c4:	6820      	ldr	r0, [r4, #0]
 80163c6:	f011 fe6f 	bl	80280a8 <mg_listen>
 80163ca:	4b0b      	ldr	r3, [pc, #44]	@ (80163f8 <ssdp_start_server+0x8c>)
 80163cc:	6018      	str	r0, [r3, #0]
}
 80163ce:	b005      	add	sp, #20
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	bf00      	nop
 80163d4:	20002968 	.word	0x20002968
 80163d8:	20002964 	.word	0x20002964
 80163dc:	2000296c 	.word	0x2000296c
 80163e0:	08039be8 	.word	0x08039be8
 80163e4:	080162d5 	.word	0x080162d5
 80163e8:	080160f5 	.word	0x080160f5
 80163ec:	08039c00 	.word	0x08039c00
 80163f0:	08016249 	.word	0x08016249
 80163f4:	08039eb4 	.word	0x08039eb4
 80163f8:	20002960 	.word	0x20002960

080163fc <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80163fc:	4770      	bx	lr
	...

08016400 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8016400:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8016402:	4b02      	ldr	r3, [pc, #8]	@ (801640c <sFLASH_SPI_ReadBuffer+0xc>)
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	4798      	blx	r3
}
 8016408:	bd08      	pop	{r3, pc}
 801640a:	bf00      	nop
 801640c:	200029c4 	.word	0x200029c4

08016410 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8016410:	b410      	push	{r4}
	if (chip_select){
 8016412:	b158      	cbz	r0, 801642c <SPI_flash_reg_cb+0x1c>
 8016414:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8016416:	4809      	ldr	r0, [pc, #36]	@ (801643c <SPI_flash_reg_cb+0x2c>)
 8016418:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 801641a:	b159      	cbz	r1, 8016434 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 801641c:	4807      	ldr	r0, [pc, #28]	@ (801643c <SPI_flash_reg_cb+0x2c>)
 801641e:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8016420:	4906      	ldr	r1, [pc, #24]	@ (801643c <SPI_flash_reg_cb+0x2c>)
 8016422:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8016424:	608b      	str	r3, [r1, #8]
}
 8016426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801642a:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 801642c:	4803      	ldr	r0, [pc, #12]	@ (801643c <SPI_flash_reg_cb+0x2c>)
 801642e:	4c04      	ldr	r4, [pc, #16]	@ (8016440 <SPI_flash_reg_cb+0x30>)
 8016430:	60c4      	str	r4, [r0, #12]
 8016432:	e7f2      	b.n	801641a <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8016434:	4901      	ldr	r1, [pc, #4]	@ (801643c <SPI_flash_reg_cb+0x2c>)
 8016436:	4802      	ldr	r0, [pc, #8]	@ (8016440 <SPI_flash_reg_cb+0x30>)
 8016438:	6108      	str	r0, [r1, #16]
 801643a:	e7f1      	b.n	8016420 <SPI_flash_reg_cb+0x10>
 801643c:	200029c4 	.word	0x200029c4
 8016440:	080163fd 	.word	0x080163fd

08016444 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8016444:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8016446:	4b02      	ldr	r3, [pc, #8]	@ (8016450 <sFLASH_CS_LOW+0xc>)
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	4798      	blx	r3
}
 801644c:	bd08      	pop	{r3, pc}
 801644e:	bf00      	nop
 8016450:	200029c4 	.word	0x200029c4

08016454 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8016454:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8016456:	4b02      	ldr	r3, [pc, #8]	@ (8016460 <sFLASH_CS_HIGH+0xc>)
 8016458:	691b      	ldr	r3, [r3, #16]
 801645a:	4798      	blx	r3
}
 801645c:	bd08      	pop	{r3, pc}
 801645e:	bf00      	nop
 8016460:	200029c4 	.word	0x200029c4

08016464 <sFLASH_ReadByte>:
{
 8016464:	b500      	push	{lr}
 8016466:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8016468:	4b05      	ldr	r3, [pc, #20]	@ (8016480 <sFLASH_ReadByte+0x1c>)
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	2101      	movs	r1, #1
 801646e:	f10d 0007 	add.w	r0, sp, #7
 8016472:	4798      	blx	r3
}
 8016474:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016478:	b003      	add	sp, #12
 801647a:	f85d fb04 	ldr.w	pc, [sp], #4
 801647e:	bf00      	nop
 8016480:	200029c4 	.word	0x200029c4

08016484 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8016484:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8016486:	4b02      	ldr	r3, [pc, #8]	@ (8016490 <sFLASH_SendByte+0xc>)
 8016488:	689b      	ldr	r3, [r3, #8]
 801648a:	4798      	blx	r3
}
 801648c:	bd08      	pop	{r3, pc}
 801648e:	bf00      	nop
 8016490:	200029c4 	.word	0x200029c4

08016494 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8016494:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8016496:	f7ff ffd5 	bl	8016444 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801649a:	2066      	movs	r0, #102	@ 0x66
 801649c:	f7ff fff2 	bl	8016484 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80164a0:	2099      	movs	r0, #153	@ 0x99
 80164a2:	f7ff ffef 	bl	8016484 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80164a6:	f7ff ffd5 	bl	8016454 <sFLASH_CS_HIGH>
}
 80164aa:	bd08      	pop	{r3, pc}

080164ac <sFLASH_Init>:
void sFLASH_Init(void){
 80164ac:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80164ae:	2064      	movs	r0, #100	@ 0x64
 80164b0:	f000 fa58 	bl	8016964 <HAL_Delay>
    sFLASH_Reset();
 80164b4:	f7ff ffee 	bl	8016494 <sFLASH_Reset>
    HAL_Delay(100);
 80164b8:	2064      	movs	r0, #100	@ 0x64
 80164ba:	f000 fa53 	bl	8016964 <HAL_Delay>
    HAL_Delay(100);
 80164be:	2064      	movs	r0, #100	@ 0x64
 80164c0:	f000 fa50 	bl	8016964 <HAL_Delay>
}
 80164c4:	bd08      	pop	{r3, pc}
	...

080164c8 <sFLASH_ReadBuffer>:
{
 80164c8:	b570      	push	{r4, r5, r6, lr}
 80164ca:	4606      	mov	r6, r0
 80164cc:	460d      	mov	r5, r1
 80164ce:	4614      	mov	r4, r2
  sFLASH_CS_LOW();
 80164d0:	f7ff ffb8 	bl	8016444 <sFLASH_CS_LOW>
  read_bytes = read_bytes + NumByteToRead;
 80164d4:	4a1b      	ldr	r2, [pc, #108]	@ (8016544 <sFLASH_ReadBuffer+0x7c>)
 80164d6:	6813      	ldr	r3, [r2, #0]
 80164d8:	4423      	add	r3, r4
 80164da:	6013      	str	r3, [r2, #0]
  if (NumByteToRead > 16){
 80164dc:	2c10      	cmp	r4, #16
 80164de:	d917      	bls.n	8016510 <sFLASH_ReadBuffer+0x48>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80164e0:	200b      	movs	r0, #11
 80164e2:	f7ff ffcf 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80164e6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80164ea:	f7ff ffcb 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80164ee:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80164f2:	f7ff ffc7 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80164f6:	b2e8      	uxtb	r0, r5
 80164f8:	f7ff ffc4 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 80164fc:	2000      	movs	r0, #0
 80164fe:	f7ff ffc1 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8016502:	4621      	mov	r1, r4
 8016504:	4630      	mov	r0, r6
 8016506:	f7ff ff7b 	bl	8016400 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 801650a:	f7ff ffa3 	bl	8016454 <sFLASH_CS_HIGH>
}
 801650e:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8016510:	2003      	movs	r0, #3
 8016512:	f7ff ffb7 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8016516:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801651a:	f7ff ffb3 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801651e:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8016522:	f7ff ffaf 	bl	8016484 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8016526:	b2e8      	uxtb	r0, r5
 8016528:	f7ff ffac 	bl	8016484 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 801652c:	e004      	b.n	8016538 <sFLASH_ReadBuffer+0x70>
		  *pBuffer = sFLASH_ReadByte();
 801652e:	f7ff ff99 	bl	8016464 <sFLASH_ReadByte>
 8016532:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8016536:	462c      	mov	r4, r5
 8016538:	1e63      	subs	r3, r4, #1
 801653a:	b29d      	uxth	r5, r3
 801653c:	2c00      	cmp	r4, #0
 801653e:	d1f6      	bne.n	801652e <sFLASH_ReadBuffer+0x66>
 8016540:	e7e3      	b.n	801650a <sFLASH_ReadBuffer+0x42>
 8016542:	bf00      	nop
 8016544:	20002978 	.word	0x20002978

08016548 <sFLASH_ReadID>:
{
 8016548:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 801654a:	f7ff ff7b 	bl	8016444 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801654e:	f7ff ff81 	bl	8016454 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8016552:	f7ff ff77 	bl	8016444 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8016556:	f7ff ff7d 	bl	8016454 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801655a:	f7ff ff73 	bl	8016444 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 801655e:	209f      	movs	r0, #159	@ 0x9f
 8016560:	f7ff ff90 	bl	8016484 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8016564:	f7ff ff7e 	bl	8016464 <sFLASH_ReadByte>
 8016568:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 801656a:	f7ff ff7b 	bl	8016464 <sFLASH_ReadByte>
 801656e:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8016570:	f7ff ff78 	bl	8016464 <sFLASH_ReadByte>
 8016574:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8016576:	f7ff ff6d 	bl	8016454 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801657a:	0224      	lsls	r4, r4, #8
 801657c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8016580:	ea44 0005 	orr.w	r0, r4, r5
 8016584:	bd70      	pop	{r4, r5, r6, pc}
	...

08016588 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8016588:	b538      	push	{r3, r4, r5, lr}
 801658a:	4605      	mov	r5, r0
	sFLASH_Init();
 801658c:	f7ff ff8e 	bl	80164ac <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8016590:	f7ff ffda 	bl	8016548 <sFLASH_ReadID>
	switch (flash_id) {
 8016594:	4b55      	ldr	r3, [pc, #340]	@ (80166ec <sFLASH_GetInfo+0x164>)
 8016596:	4298      	cmp	r0, r3
 8016598:	f000 8085 	beq.w	80166a6 <sFLASH_GetInfo+0x11e>
 801659c:	f0c0 809c 	bcc.w	80166d8 <sFLASH_GetInfo+0x150>
 80165a0:	4b53      	ldr	r3, [pc, #332]	@ (80166f0 <sFLASH_GetInfo+0x168>)
 80165a2:	4298      	cmp	r0, r3
 80165a4:	f200 8098 	bhi.w	80166d8 <sFLASH_GetInfo+0x150>
 80165a8:	3b03      	subs	r3, #3
 80165aa:	4298      	cmp	r0, r3
 80165ac:	f0c0 8094 	bcc.w	80166d8 <sFLASH_GetInfo+0x150>
 80165b0:	4b50      	ldr	r3, [pc, #320]	@ (80166f4 <sFLASH_GetInfo+0x16c>)
 80165b2:	4403      	add	r3, r0
 80165b4:	2b03      	cmp	r3, #3
 80165b6:	f200 808f 	bhi.w	80166d8 <sFLASH_GetInfo+0x150>
 80165ba:	e8df f003 	tbb	[pc, r3]
 80165be:	2b02      	.short	0x2b02
 80165c0:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80165c2:	4c4d      	ldr	r4, [pc, #308]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 80165c4:	4b4d      	ldr	r3, [pc, #308]	@ (80166fc <sFLASH_GetInfo+0x174>)
 80165c6:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80165c8:	2301      	movs	r3, #1
 80165ca:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80165cc:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80165ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80165d2:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80165d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80165d8:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 80165da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80165de:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q16", sizeof(flash_info.model_name) - 1);
 80165e0:	2231      	movs	r2, #49	@ 0x31
 80165e2:	4947      	ldr	r1, [pc, #284]	@ (8016700 <sFLASH_GetInfo+0x178>)
 80165e4:	f104 000e 	add.w	r0, r4, #14
 80165e8:	f017 f9d9 	bl	802d99e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80165ec:	2300      	movs	r3, #0
 80165ee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 80165f2:	46ac      	mov	ip, r5
 80165f4:	4c40      	ldr	r4, [pc, #256]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 80165f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801660c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8016610:	4628      	mov	r0, r5
 8016612:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8016614:	4c38      	ldr	r4, [pc, #224]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 8016616:	4b3b      	ldr	r3, [pc, #236]	@ (8016704 <sFLASH_GetInfo+0x17c>)
 8016618:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801661a:	2301      	movs	r3, #1
 801661c:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801661e:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016624:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801662a:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 801662c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016630:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q32", sizeof(flash_info.model_name) - 1);
 8016632:	2231      	movs	r2, #49	@ 0x31
 8016634:	4934      	ldr	r1, [pc, #208]	@ (8016708 <sFLASH_GetInfo+0x180>)
 8016636:	f104 000e 	add.w	r0, r4, #14
 801663a:	f017 f9b0 	bl	802d99e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801663e:	2300      	movs	r3, #0
 8016640:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016644:	e7d5      	b.n	80165f2 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8016646:	4c2c      	ldr	r4, [pc, #176]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 8016648:	4b30      	ldr	r3, [pc, #192]	@ (801670c <sFLASH_GetInfo+0x184>)
 801664a:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801664c:	2301      	movs	r3, #1
 801664e:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016650:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016656:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801665c:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 801665e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016662:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q64", sizeof(flash_info.model_name) - 1);
 8016664:	2231      	movs	r2, #49	@ 0x31
 8016666:	492a      	ldr	r1, [pc, #168]	@ (8016710 <sFLASH_GetInfo+0x188>)
 8016668:	f104 000e 	add.w	r0, r4, #14
 801666c:	f017 f997 	bl	802d99e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016670:	2300      	movs	r3, #0
 8016672:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016676:	e7bc      	b.n	80165f2 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8016678:	4c1f      	ldr	r4, [pc, #124]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 801667a:	4b1d      	ldr	r3, [pc, #116]	@ (80166f0 <sFLASH_GetInfo+0x168>)
 801667c:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801667e:	2301      	movs	r3, #1
 8016680:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016682:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016688:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801668a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801668e:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016690:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q128", sizeof(flash_info.model_name) - 1);
 8016692:	2231      	movs	r2, #49	@ 0x31
 8016694:	491f      	ldr	r1, [pc, #124]	@ (8016714 <sFLASH_GetInfo+0x18c>)
 8016696:	f104 000e 	add.w	r0, r4, #14
 801669a:	f017 f980 	bl	802d99e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801669e:	2300      	movs	r3, #0
 80166a0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80166a4:	e7a5      	b.n	80165f2 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80166a6:	4c14      	ldr	r4, [pc, #80]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 80166a8:	4b10      	ldr	r3, [pc, #64]	@ (80166ec <sFLASH_GetInfo+0x164>)
 80166aa:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80166ac:	2301      	movs	r3, #1
 80166ae:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80166b0:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80166b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80166b6:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80166b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80166bc:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 80166be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80166c2:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 80166c4:	2231      	movs	r2, #49	@ 0x31
 80166c6:	4914      	ldr	r1, [pc, #80]	@ (8016718 <sFLASH_GetInfo+0x190>)
 80166c8:	f104 000e 	add.w	r0, r4, #14
 80166cc:	f017 f967 	bl	802d99e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80166d0:	2300      	movs	r3, #0
 80166d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80166d6:	e78c      	b.n	80165f2 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80166d8:	4807      	ldr	r0, [pc, #28]	@ (80166f8 <sFLASH_GetInfo+0x170>)
 80166da:	2300      	movs	r3, #0
 80166dc:	f840 3b0e 	str.w	r3, [r0], #14
			strncpy(flash_info.model_name, "Unknown", sizeof(flash_info.model_name) - 1);
 80166e0:	2231      	movs	r2, #49	@ 0x31
 80166e2:	490e      	ldr	r1, [pc, #56]	@ (801671c <sFLASH_GetInfo+0x194>)
 80166e4:	f017 f95b 	bl	802d99e <strncpy>
			break;
 80166e8:	e783      	b.n	80165f2 <sFLASH_GetInfo+0x6a>
 80166ea:	bf00      	nop
 80166ec:	00c22016 	.word	0x00c22016
 80166f0:	00ef4018 	.word	0x00ef4018
 80166f4:	ff10bfeb 	.word	0xff10bfeb
 80166f8:	20002984 	.word	0x20002984
 80166fc:	00ef4015 	.word	0x00ef4015
 8016700:	08039ed0 	.word	0x08039ed0
 8016704:	00ef4016 	.word	0x00ef4016
 8016708:	08039ee0 	.word	0x08039ee0
 801670c:	00ef4017 	.word	0x00ef4017
 8016710:	08039ef0 	.word	0x08039ef0
 8016714:	08039f00 	.word	0x08039f00
 8016718:	08039f10 	.word	0x08039f10
 801671c:	08039f18 	.word	0x08039f18

08016720 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8016720:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8016722:	f7ff fe8f 	bl	8016444 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8016726:	2006      	movs	r0, #6
 8016728:	f7ff feac 	bl	8016484 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801672c:	f7ff fe92 	bl	8016454 <sFLASH_CS_HIGH>
}
 8016730:	bd08      	pop	{r3, pc}
	...

08016734 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8016734:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8016736:	4d09      	ldr	r5, [pc, #36]	@ (801675c <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8016738:	f7ff fe84 	bl	8016444 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 801673c:	2005      	movs	r0, #5
 801673e:	f7ff fea1 	bl	8016484 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8016742:	f7ff fe8f 	bl	8016464 <sFLASH_ReadByte>
 8016746:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8016748:	f7ff fe84 	bl	8016454 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 801674c:	462b      	mov	r3, r5
 801674e:	3d01      	subs	r5, #1
 8016750:	b113      	cbz	r3, 8016758 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8016752:	f014 0f01 	tst.w	r4, #1
 8016756:	d1ef      	bne.n	8016738 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8016758:	bd38      	pop	{r3, r4, r5, pc}
 801675a:	bf00      	nop
 801675c:	000186a0 	.word	0x000186a0

08016760 <sFLASH_EraseSector>:
{
 8016760:	b510      	push	{r4, lr}
 8016762:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8016764:	f7ff ffdc 	bl	8016720 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016768:	f7ff fe6c 	bl	8016444 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 801676c:	2020      	movs	r0, #32
 801676e:	f7ff fe89 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8016772:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016776:	f7ff fe85 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 801677a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801677e:	f7ff fe81 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8016782:	b2e0      	uxtb	r0, r4
 8016784:	f7ff fe7e 	bl	8016484 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8016788:	f7ff fe64 	bl	8016454 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 801678c:	f7ff ffd2 	bl	8016734 <sFLASH_WaitForWriteEnd>
  erace_sectors++ ;
 8016790:	4a02      	ldr	r2, [pc, #8]	@ (801679c <sFLASH_EraseSector+0x3c>)
 8016792:	6813      	ldr	r3, [r2, #0]
 8016794:	3301      	adds	r3, #1
 8016796:	6013      	str	r3, [r2, #0]
}
 8016798:	bd10      	pop	{r4, pc}
 801679a:	bf00      	nop
 801679c:	20002980 	.word	0x20002980

080167a0 <sFLASH_WritePage>:
{
 80167a0:	b570      	push	{r4, r5, r6, lr}
 80167a2:	4606      	mov	r6, r0
 80167a4:	460c      	mov	r4, r1
 80167a6:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 80167a8:	f7ff ffba 	bl	8016720 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80167ac:	f7ff fe4a 	bl	8016444 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80167b0:	2002      	movs	r0, #2
 80167b2:	f7ff fe67 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80167b6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80167ba:	f7ff fe63 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80167be:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80167c2:	f7ff fe5f 	bl	8016484 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 80167c6:	b2e0      	uxtb	r0, r4
 80167c8:	f7ff fe5c 	bl	8016484 <sFLASH_SendByte>
  while (NumByteToWrite--)
 80167cc:	e004      	b.n	80167d8 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 80167ce:	f816 0b01 	ldrb.w	r0, [r6], #1
 80167d2:	f7ff fe57 	bl	8016484 <sFLASH_SendByte>
  while (NumByteToWrite--)
 80167d6:	4625      	mov	r5, r4
 80167d8:	1e6b      	subs	r3, r5, #1
 80167da:	b29c      	uxth	r4, r3
 80167dc:	2d00      	cmp	r5, #0
 80167de:	d1f6      	bne.n	80167ce <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 80167e0:	f7ff fe38 	bl	8016454 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80167e4:	f7ff ffa6 	bl	8016734 <sFLASH_WaitForWriteEnd>
}
 80167e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080167ec <sFLASH_WriteBuffer>:
{
 80167ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167f0:	4605      	mov	r5, r0
 80167f2:	460c      	mov	r4, r1
 80167f4:	4617      	mov	r7, r2
  write_bytes = write_bytes + NumByteToWrite;
 80167f6:	4a32      	ldr	r2, [pc, #200]	@ (80168c0 <sFLASH_WriteBuffer+0xd4>)
 80167f8:	6813      	ldr	r3, [r2, #0]
 80167fa:	443b      	add	r3, r7
 80167fc:	6013      	str	r3, [r2, #0]
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80167fe:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016800:	0a39      	lsrs	r1, r7, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8016802:	b9db      	cbnz	r3, 801683c <sFLASH_WriteBuffer+0x50>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016804:	b979      	cbnz	r1, 8016826 <sFLASH_WriteBuffer+0x3a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016806:	463a      	mov	r2, r7
 8016808:	4621      	mov	r1, r4
 801680a:	f7ff ffc9 	bl	80167a0 <sFLASH_WritePage>
 801680e:	e013      	b.n	8016838 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016814:	4621      	mov	r1, r4
 8016816:	4628      	mov	r0, r5
 8016818:	f7ff ffc2 	bl	80167a0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801681c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016820:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016824:	4631      	mov	r1, r6
 8016826:	1e4b      	subs	r3, r1, #1
 8016828:	b2de      	uxtb	r6, r3
 801682a:	2900      	cmp	r1, #0
 801682c:	d1f0      	bne.n	8016810 <sFLASH_WriteBuffer+0x24>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801682e:	b2fa      	uxtb	r2, r7
 8016830:	4621      	mov	r1, r4
 8016832:	4628      	mov	r0, r5
 8016834:	f7ff ffb4 	bl	80167a0 <sFLASH_WritePage>
}
 8016838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801683c:	f1c3 0800 	rsb	r8, r3, #0
 8016840:	fa5f f888 	uxtb.w	r8, r8
 8016844:	b2fa      	uxtb	r2, r7
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016846:	b9a1      	cbnz	r1, 8016872 <sFLASH_WriteBuffer+0x86>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8016848:	4590      	cmp	r8, r2
 801684a:	d20d      	bcs.n	8016868 <sFLASH_WriteBuffer+0x7c>
        temp = NumOfSingle - count;
 801684c:	4413      	add	r3, r2
 801684e:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016850:	4642      	mov	r2, r8
 8016852:	4621      	mov	r1, r4
 8016854:	f7ff ffa4 	bl	80167a0 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8016858:	4632      	mov	r2, r6
 801685a:	eb08 0104 	add.w	r1, r8, r4
 801685e:	eb05 0008 	add.w	r0, r5, r8
 8016862:	f7ff ff9d 	bl	80167a0 <sFLASH_WritePage>
 8016866:	e7e7      	b.n	8016838 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016868:	463a      	mov	r2, r7
 801686a:	4621      	mov	r1, r4
 801686c:	f7ff ff98 	bl	80167a0 <sFLASH_WritePage>
 8016870:	e7e2      	b.n	8016838 <sFLASH_WriteBuffer+0x4c>
      NumByteToWrite -= count;
 8016872:	eba7 0708 	sub.w	r7, r7, r8
 8016876:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801687a:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801687e:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016880:	4642      	mov	r2, r8
 8016882:	4621      	mov	r1, r4
 8016884:	f7ff ff8c 	bl	80167a0 <sFLASH_WritePage>
      WriteAddr +=  count;
 8016888:	4444      	add	r4, r8
      pBuffer += count;
 801688a:	4445      	add	r5, r8
      while (NumOfPage--)
 801688c:	e00a      	b.n	80168a4 <sFLASH_WriteBuffer+0xb8>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801688e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016892:	4621      	mov	r1, r4
 8016894:	4628      	mov	r0, r5
 8016896:	f7ff ff83 	bl	80167a0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801689a:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 801689e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80168a2:	4646      	mov	r6, r8
 80168a4:	1e73      	subs	r3, r6, #1
 80168a6:	fa5f f883 	uxtb.w	r8, r3
 80168aa:	2e00      	cmp	r6, #0
 80168ac:	d1ef      	bne.n	801688e <sFLASH_WriteBuffer+0xa2>
      if (NumOfSingle != 0)
 80168ae:	2f00      	cmp	r7, #0
 80168b0:	d0c2      	beq.n	8016838 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80168b2:	fa5f f289 	uxtb.w	r2, r9
 80168b6:	4621      	mov	r1, r4
 80168b8:	4628      	mov	r0, r5
 80168ba:	f7ff ff71 	bl	80167a0 <sFLASH_WritePage>
}
 80168be:	e7bb      	b.n	8016838 <sFLASH_WriteBuffer+0x4c>
 80168c0:	2000297c 	.word	0x2000297c

080168c4 <sFLASH_GetReadedBytes>:

uint32_t sFLASH_GetReadedBytes(void){
	return read_bytes;
}
 80168c4:	4b01      	ldr	r3, [pc, #4]	@ (80168cc <sFLASH_GetReadedBytes+0x8>)
 80168c6:	6818      	ldr	r0, [r3, #0]
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	20002978 	.word	0x20002978

080168d0 <sFLASH_GetWritedBytes>:

uint32_t sFLASH_GetWritedBytes(void){
	return write_bytes;
}
 80168d0:	4b01      	ldr	r3, [pc, #4]	@ (80168d8 <sFLASH_GetWritedBytes+0x8>)
 80168d2:	6818      	ldr	r0, [r3, #0]
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	2000297c 	.word	0x2000297c

080168dc <sFLASH_GetEraceSectorTimes>:

uint32_t sFLASH_GetEraceSectorTimes(void){
	return erace_sectors;
}
 80168dc:	4b01      	ldr	r3, [pc, #4]	@ (80168e4 <sFLASH_GetEraceSectorTimes+0x8>)
 80168de:	6818      	ldr	r0, [r3, #0]
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	20002980 	.word	0x20002980

080168e8 <sFLASH_SetReadedBytes>:

void sFLASH_SetReadedBytes(uint32_t bytes){
	read_bytes = bytes;
 80168e8:	4b01      	ldr	r3, [pc, #4]	@ (80168f0 <sFLASH_SetReadedBytes+0x8>)
 80168ea:	6018      	str	r0, [r3, #0]
}
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	20002978 	.word	0x20002978

080168f4 <sFLASH_SetWritedBytes>:

void sFLASH_SetWritedBytes(uint32_t bytes){
	write_bytes = bytes;
 80168f4:	4b01      	ldr	r3, [pc, #4]	@ (80168fc <sFLASH_SetWritedBytes+0x8>)
 80168f6:	6018      	str	r0, [r3, #0]
}
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop
 80168fc:	2000297c 	.word	0x2000297c

08016900 <sFLASH_SetEraceSectorTimes>:

void sFLASH_SetEraceSectorTimes(uint32_t sectors){
	erace_sectors = sectors;
 8016900:	4b01      	ldr	r3, [pc, #4]	@ (8016908 <sFLASH_SetEraceSectorTimes+0x8>)
 8016902:	6018      	str	r0, [r3, #0]
}
 8016904:	4770      	bx	lr
 8016906:	bf00      	nop
 8016908:	20002980 	.word	0x20002980

0801690c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801690c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801690e:	4b0b      	ldr	r3, [pc, #44]	@ (801693c <HAL_Init+0x30>)
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016916:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801691e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016920:	681a      	ldr	r2, [r3, #0]
 8016922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016926:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016928:	2003      	movs	r0, #3
 801692a:	f000 fa1f 	bl	8016d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801692e:	200f      	movs	r0, #15
 8016930:	f7fb ff72 	bl	8012818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016934:	f7fb ff4e 	bl	80127d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8016938:	2000      	movs	r0, #0
 801693a:	bd08      	pop	{r3, pc}
 801693c:	40023c00 	.word	0x40023c00

08016940 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8016940:	4a03      	ldr	r2, [pc, #12]	@ (8016950 <HAL_IncTick+0x10>)
 8016942:	6811      	ldr	r1, [r2, #0]
 8016944:	4b03      	ldr	r3, [pc, #12]	@ (8016954 <HAL_IncTick+0x14>)
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	440b      	add	r3, r1
 801694a:	6013      	str	r3, [r2, #0]
}
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop
 8016950:	200029d8 	.word	0x200029d8
 8016954:	20000106 	.word	0x20000106

08016958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8016958:	4b01      	ldr	r3, [pc, #4]	@ (8016960 <HAL_GetTick+0x8>)
 801695a:	6818      	ldr	r0, [r3, #0]
}
 801695c:	4770      	bx	lr
 801695e:	bf00      	nop
 8016960:	200029d8 	.word	0x200029d8

08016964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016964:	b538      	push	{r3, r4, r5, lr}
 8016966:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8016968:	f7ff fff6 	bl	8016958 <HAL_GetTick>
 801696c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801696e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8016972:	d002      	beq.n	801697a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8016974:	4b04      	ldr	r3, [pc, #16]	@ (8016988 <HAL_Delay+0x24>)
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 801697a:	f7ff ffed 	bl	8016958 <HAL_GetTick>
 801697e:	1b40      	subs	r0, r0, r5
 8016980:	42a0      	cmp	r0, r4
 8016982:	d3fa      	bcc.n	801697a <HAL_Delay+0x16>
  {
  }
}
 8016984:	bd38      	pop	{r3, r4, r5, pc}
 8016986:	bf00      	nop
 8016988:	20000106 	.word	0x20000106

0801698c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801698c:	4b4a      	ldr	r3, [pc, #296]	@ (8016ab8 <ADC_Init+0x12c>)
 801698e:	685a      	ldr	r2, [r3, #4]
 8016990:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8016994:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8016996:	685a      	ldr	r2, [r3, #4]
 8016998:	6841      	ldr	r1, [r0, #4]
 801699a:	430a      	orrs	r2, r1
 801699c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801699e:	6802      	ldr	r2, [r0, #0]
 80169a0:	6853      	ldr	r3, [r2, #4]
 80169a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80169a6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80169a8:	6802      	ldr	r2, [r0, #0]
 80169aa:	6853      	ldr	r3, [r2, #4]
 80169ac:	6901      	ldr	r1, [r0, #16]
 80169ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80169b2:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80169b4:	6802      	ldr	r2, [r0, #0]
 80169b6:	6853      	ldr	r3, [r2, #4]
 80169b8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80169bc:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80169be:	6802      	ldr	r2, [r0, #0]
 80169c0:	6853      	ldr	r3, [r2, #4]
 80169c2:	6881      	ldr	r1, [r0, #8]
 80169c4:	430b      	orrs	r3, r1
 80169c6:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80169c8:	6802      	ldr	r2, [r0, #0]
 80169ca:	6893      	ldr	r3, [r2, #8]
 80169cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80169d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80169d2:	6802      	ldr	r2, [r0, #0]
 80169d4:	6893      	ldr	r3, [r2, #8]
 80169d6:	68c1      	ldr	r1, [r0, #12]
 80169d8:	430b      	orrs	r3, r1
 80169da:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80169dc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80169de:	4b37      	ldr	r3, [pc, #220]	@ (8016abc <ADC_Init+0x130>)
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d057      	beq.n	8016a94 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80169e4:	6802      	ldr	r2, [r0, #0]
 80169e6:	6893      	ldr	r3, [r2, #8]
 80169e8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80169ec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80169ee:	6802      	ldr	r2, [r0, #0]
 80169f0:	6893      	ldr	r3, [r2, #8]
 80169f2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80169f4:	430b      	orrs	r3, r1
 80169f6:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80169f8:	6802      	ldr	r2, [r0, #0]
 80169fa:	6893      	ldr	r3, [r2, #8]
 80169fc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8016a00:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8016a02:	6802      	ldr	r2, [r0, #0]
 8016a04:	6893      	ldr	r3, [r2, #8]
 8016a06:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016a08:	430b      	orrs	r3, r1
 8016a0a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8016a0c:	6802      	ldr	r2, [r0, #0]
 8016a0e:	6893      	ldr	r3, [r2, #8]
 8016a10:	f023 0302 	bic.w	r3, r3, #2
 8016a14:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8016a16:	6802      	ldr	r2, [r0, #0]
 8016a18:	6893      	ldr	r3, [r2, #8]
 8016a1a:	7e01      	ldrb	r1, [r0, #24]
 8016a1c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8016a20:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8016a22:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d03f      	beq.n	8016aaa <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8016a2a:	6802      	ldr	r2, [r0, #0]
 8016a2c:	6853      	ldr	r3, [r2, #4]
 8016a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016a32:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8016a34:	6802      	ldr	r2, [r0, #0]
 8016a36:	6853      	ldr	r3, [r2, #4]
 8016a38:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016a3c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8016a3e:	6801      	ldr	r1, [r0, #0]
 8016a40:	684b      	ldr	r3, [r1, #4]
 8016a42:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8016a44:	3a01      	subs	r2, #1
 8016a46:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8016a4a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8016a4c:	6802      	ldr	r2, [r0, #0]
 8016a4e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8016a50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8016a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8016a56:	6801      	ldr	r1, [r0, #0]
 8016a58:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8016a5a:	69c2      	ldr	r2, [r0, #28]
 8016a5c:	3a01      	subs	r2, #1
 8016a5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8016a62:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8016a64:	6802      	ldr	r2, [r0, #0]
 8016a66:	6893      	ldr	r3, [r2, #8]
 8016a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016a6c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8016a6e:	6802      	ldr	r2, [r0, #0]
 8016a70:	6893      	ldr	r3, [r2, #8]
 8016a72:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8016a76:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8016a7a:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8016a7c:	6802      	ldr	r2, [r0, #0]
 8016a7e:	6893      	ldr	r3, [r2, #8]
 8016a80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016a84:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8016a86:	6802      	ldr	r2, [r0, #0]
 8016a88:	6893      	ldr	r3, [r2, #8]
 8016a8a:	6941      	ldr	r1, [r0, #20]
 8016a8c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8016a90:	6093      	str	r3, [r2, #8]
}
 8016a92:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016a94:	6802      	ldr	r2, [r0, #0]
 8016a96:	6893      	ldr	r3, [r2, #8]
 8016a98:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8016a9c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8016a9e:	6802      	ldr	r2, [r0, #0]
 8016aa0:	6893      	ldr	r3, [r2, #8]
 8016aa2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8016aa6:	6093      	str	r3, [r2, #8]
 8016aa8:	e7b0      	b.n	8016a0c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8016aaa:	6802      	ldr	r2, [r0, #0]
 8016aac:	6853      	ldr	r3, [r2, #4]
 8016aae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016ab2:	6053      	str	r3, [r2, #4]
 8016ab4:	e7ca      	b.n	8016a4c <ADC_Init+0xc0>
 8016ab6:	bf00      	nop
 8016ab8:	40012300 	.word	0x40012300
 8016abc:	0f000001 	.word	0x0f000001

08016ac0 <HAL_ADC_Init>:
  if (hadc == NULL)
 8016ac0:	b338      	cbz	r0, 8016b12 <HAL_ADC_Init+0x52>
{
 8016ac2:	b510      	push	{r4, lr}
 8016ac4:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8016ac6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8016ac8:	b143      	cbz	r3, 8016adc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8016aca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016acc:	f013 0f10 	tst.w	r3, #16
 8016ad0:	d00b      	beq.n	8016aea <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8016ad2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8016ada:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8016adc:	f7fa fb36 	bl	801114c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8016ae4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8016ae8:	e7ef      	b.n	8016aca <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8016aea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016aec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8016af0:	f023 0302 	bic.w	r3, r3, #2
 8016af4:	f043 0302 	orr.w	r3, r3, #2
 8016af8:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8016afa:	4620      	mov	r0, r4
 8016afc:	f7ff ff46 	bl	801698c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8016b00:	2000      	movs	r0, #0
 8016b02:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8016b04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b06:	f023 0303 	bic.w	r3, r3, #3
 8016b0a:	f043 0301 	orr.w	r3, r3, #1
 8016b0e:	6423      	str	r3, [r4, #64]	@ 0x40
 8016b10:	e7e0      	b.n	8016ad4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8016b12:	2001      	movs	r0, #1
}
 8016b14:	4770      	bx	lr
	...

08016b18 <HAL_ADC_ConfigChannel>:
{
 8016b18:	b430      	push	{r4, r5}
 8016b1a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8016b20:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8016b24:	2a01      	cmp	r2, #1
 8016b26:	f000 80c0 	beq.w	8016caa <HAL_ADC_ConfigChannel+0x192>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8016b32:	680a      	ldr	r2, [r1, #0]
 8016b34:	2a09      	cmp	r2, #9
 8016b36:	d940      	bls.n	8016bba <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8016b38:	6804      	ldr	r4, [r0, #0]
 8016b3a:	68e0      	ldr	r0, [r4, #12]
 8016b3c:	b292      	uxth	r2, r2
 8016b3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b42:	3a1e      	subs	r2, #30
 8016b44:	f04f 0c07 	mov.w	ip, #7
 8016b48:	fa0c f202 	lsl.w	r2, ip, r2
 8016b4c:	ea20 0202 	bic.w	r2, r0, r2
 8016b50:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8016b52:	681c      	ldr	r4, [r3, #0]
 8016b54:	68e0      	ldr	r0, [r4, #12]
 8016b56:	880a      	ldrh	r2, [r1, #0]
 8016b58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b5c:	3a1e      	subs	r2, #30
 8016b5e:	688d      	ldr	r5, [r1, #8]
 8016b60:	fa05 f202 	lsl.w	r2, r5, r2
 8016b64:	4302      	orrs	r2, r0
 8016b66:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8016b68:	684a      	ldr	r2, [r1, #4]
 8016b6a:	2a06      	cmp	r2, #6
 8016b6c:	d83c      	bhi.n	8016be8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8016b6e:	681c      	ldr	r4, [r3, #0]
 8016b70:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8016b72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016b76:	3a05      	subs	r2, #5
 8016b78:	f04f 0c1f 	mov.w	ip, #31
 8016b7c:	fa0c f202 	lsl.w	r2, ip, r2
 8016b80:	ea20 0202 	bic.w	r2, r0, r2
 8016b84:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8016b86:	681c      	ldr	r4, [r3, #0]
 8016b88:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8016b8a:	684a      	ldr	r2, [r1, #4]
 8016b8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016b90:	3a05      	subs	r2, #5
 8016b92:	f8b1 c000 	ldrh.w	ip, [r1]
 8016b96:	fa0c f202 	lsl.w	r2, ip, r2
 8016b9a:	4302      	orrs	r2, r0
 8016b9c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8016b9e:	6818      	ldr	r0, [r3, #0]
 8016ba0:	4a43      	ldr	r2, [pc, #268]	@ (8016cb0 <HAL_ADC_ConfigChannel+0x198>)
 8016ba2:	4290      	cmp	r0, r2
 8016ba4:	d050      	beq.n	8016c48 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8016ba6:	6818      	ldr	r0, [r3, #0]
 8016ba8:	4a41      	ldr	r2, [pc, #260]	@ (8016cb0 <HAL_ADC_ConfigChannel+0x198>)
 8016baa:	4290      	cmp	r0, r2
 8016bac:	d059      	beq.n	8016c62 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8016bae:	2000      	movs	r0, #0
 8016bb0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8016bb4:	b002      	add	sp, #8
 8016bb6:	bc30      	pop	{r4, r5}
 8016bb8:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8016bba:	6804      	ldr	r4, [r0, #0]
 8016bbc:	6920      	ldr	r0, [r4, #16]
 8016bbe:	b292      	uxth	r2, r2
 8016bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016bc4:	f04f 0c07 	mov.w	ip, #7
 8016bc8:	fa0c f202 	lsl.w	r2, ip, r2
 8016bcc:	ea20 0202 	bic.w	r2, r0, r2
 8016bd0:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8016bd2:	681c      	ldr	r4, [r3, #0]
 8016bd4:	6920      	ldr	r0, [r4, #16]
 8016bd6:	880a      	ldrh	r2, [r1, #0]
 8016bd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016bdc:	688d      	ldr	r5, [r1, #8]
 8016bde:	fa05 f202 	lsl.w	r2, r5, r2
 8016be2:	4302      	orrs	r2, r0
 8016be4:	6122      	str	r2, [r4, #16]
 8016be6:	e7bf      	b.n	8016b68 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8016be8:	2a0c      	cmp	r2, #12
 8016bea:	d816      	bhi.n	8016c1a <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8016bec:	681d      	ldr	r5, [r3, #0]
 8016bee:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016bf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016bf4:	3a23      	subs	r2, #35	@ 0x23
 8016bf6:	241f      	movs	r4, #31
 8016bf8:	fa04 f202 	lsl.w	r2, r4, r2
 8016bfc:	ea20 0202 	bic.w	r2, r0, r2
 8016c00:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8016c02:	681d      	ldr	r5, [r3, #0]
 8016c04:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016c06:	684a      	ldr	r2, [r1, #4]
 8016c08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016c0c:	3a23      	subs	r2, #35	@ 0x23
 8016c0e:	880c      	ldrh	r4, [r1, #0]
 8016c10:	fa04 f202 	lsl.w	r2, r4, r2
 8016c14:	4302      	orrs	r2, r0
 8016c16:	632a      	str	r2, [r5, #48]	@ 0x30
 8016c18:	e7c1      	b.n	8016b9e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8016c1a:	681d      	ldr	r5, [r3, #0]
 8016c1c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016c1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016c22:	3a41      	subs	r2, #65	@ 0x41
 8016c24:	241f      	movs	r4, #31
 8016c26:	fa04 f202 	lsl.w	r2, r4, r2
 8016c2a:	ea20 0202 	bic.w	r2, r0, r2
 8016c2e:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8016c30:	681d      	ldr	r5, [r3, #0]
 8016c32:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016c34:	684a      	ldr	r2, [r1, #4]
 8016c36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016c3a:	3a41      	subs	r2, #65	@ 0x41
 8016c3c:	880c      	ldrh	r4, [r1, #0]
 8016c3e:	fa04 f202 	lsl.w	r2, r4, r2
 8016c42:	4302      	orrs	r2, r0
 8016c44:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8016c46:	e7aa      	b.n	8016b9e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8016c48:	680a      	ldr	r2, [r1, #0]
 8016c4a:	2a12      	cmp	r2, #18
 8016c4c:	d1ab      	bne.n	8016ba6 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8016c4e:	4a19      	ldr	r2, [pc, #100]	@ (8016cb4 <HAL_ADC_ConfigChannel+0x19c>)
 8016c50:	6850      	ldr	r0, [r2, #4]
 8016c52:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8016c56:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8016c58:	6850      	ldr	r0, [r2, #4]
 8016c5a:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8016c5e:	6050      	str	r0, [r2, #4]
 8016c60:	e7a1      	b.n	8016ba6 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8016c62:	680a      	ldr	r2, [r1, #0]
 8016c64:	4814      	ldr	r0, [pc, #80]	@ (8016cb8 <HAL_ADC_ConfigChannel+0x1a0>)
 8016c66:	4282      	cmp	r2, r0
 8016c68:	d001      	beq.n	8016c6e <HAL_ADC_ConfigChannel+0x156>
 8016c6a:	2a11      	cmp	r2, #17
 8016c6c:	d19f      	bne.n	8016bae <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8016c6e:	4a11      	ldr	r2, [pc, #68]	@ (8016cb4 <HAL_ADC_ConfigChannel+0x19c>)
 8016c70:	6850      	ldr	r0, [r2, #4]
 8016c72:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8016c76:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8016c78:	6850      	ldr	r0, [r2, #4]
 8016c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8016c7e:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8016c80:	6809      	ldr	r1, [r1, #0]
 8016c82:	4a0d      	ldr	r2, [pc, #52]	@ (8016cb8 <HAL_ADC_ConfigChannel+0x1a0>)
 8016c84:	4291      	cmp	r1, r2
 8016c86:	d192      	bne.n	8016bae <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8016c88:	4a0c      	ldr	r2, [pc, #48]	@ (8016cbc <HAL_ADC_ConfigChannel+0x1a4>)
 8016c8a:	6812      	ldr	r2, [r2, #0]
 8016c8c:	490c      	ldr	r1, [pc, #48]	@ (8016cc0 <HAL_ADC_ConfigChannel+0x1a8>)
 8016c8e:	fba1 1202 	umull	r1, r2, r1, r2
 8016c92:	0c92      	lsrs	r2, r2, #18
 8016c94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016c98:	0052      	lsls	r2, r2, #1
 8016c9a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8016c9c:	9a01      	ldr	r2, [sp, #4]
 8016c9e:	2a00      	cmp	r2, #0
 8016ca0:	d085      	beq.n	8016bae <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8016ca2:	9a01      	ldr	r2, [sp, #4]
 8016ca4:	3a01      	subs	r2, #1
 8016ca6:	9201      	str	r2, [sp, #4]
 8016ca8:	e7f8      	b.n	8016c9c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8016caa:	2002      	movs	r0, #2
 8016cac:	e782      	b.n	8016bb4 <HAL_ADC_ConfigChannel+0x9c>
 8016cae:	bf00      	nop
 8016cb0:	40012000 	.word	0x40012000
 8016cb4:	40012300 	.word	0x40012300
 8016cb8:	10000012 	.word	0x10000012
 8016cbc:	20000018 	.word	0x20000018
 8016cc0:	431bde83 	.word	0x431bde83

08016cc4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	db07      	blt.n	8016cd8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016cc8:	f000 021f 	and.w	r2, r0, #31
 8016ccc:	0940      	lsrs	r0, r0, #5
 8016cce:	2301      	movs	r3, #1
 8016cd0:	4093      	lsls	r3, r2
 8016cd2:	4a02      	ldr	r2, [pc, #8]	@ (8016cdc <__NVIC_EnableIRQ+0x18>)
 8016cd4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop
 8016cdc:	e000e100 	.word	0xe000e100

08016ce0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	db08      	blt.n	8016cf6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ce4:	0109      	lsls	r1, r1, #4
 8016ce6:	b2c9      	uxtb	r1, r1
 8016ce8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8016cec:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8016cf0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8016cf4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016cf6:	f000 000f 	and.w	r0, r0, #15
 8016cfa:	0109      	lsls	r1, r1, #4
 8016cfc:	b2c9      	uxtb	r1, r1
 8016cfe:	4b01      	ldr	r3, [pc, #4]	@ (8016d04 <__NVIC_SetPriority+0x24>)
 8016d00:	5419      	strb	r1, [r3, r0]
  }
}
 8016d02:	4770      	bx	lr
 8016d04:	e000ed14 	.word	0xe000ed14

08016d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016d08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016d0a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016d0e:	f1c0 0c07 	rsb	ip, r0, #7
 8016d12:	f1bc 0f04 	cmp.w	ip, #4
 8016d16:	bf28      	it	cs
 8016d18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016d1c:	1d03      	adds	r3, r0, #4
 8016d1e:	2b06      	cmp	r3, #6
 8016d20:	d90f      	bls.n	8016d42 <NVIC_EncodePriority+0x3a>
 8016d22:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016d24:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8016d28:	fa0e f00c 	lsl.w	r0, lr, ip
 8016d2c:	ea21 0100 	bic.w	r1, r1, r0
 8016d30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016d32:	fa0e fe03 	lsl.w	lr, lr, r3
 8016d36:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8016d3a:	ea41 0002 	orr.w	r0, r1, r2
 8016d3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016d42:	2300      	movs	r3, #0
 8016d44:	e7ee      	b.n	8016d24 <NVIC_EncodePriority+0x1c>
	...

08016d48 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8016d48:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016d4c:	4905      	ldr	r1, [pc, #20]	@ (8016d64 <__NVIC_SystemReset+0x1c>)
 8016d4e:	68ca      	ldr	r2, [r1, #12]
 8016d50:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016d54:	4b04      	ldr	r3, [pc, #16]	@ (8016d68 <__NVIC_SystemReset+0x20>)
 8016d56:	4313      	orrs	r3, r2
 8016d58:	60cb      	str	r3, [r1, #12]
 8016d5a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8016d5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016d60:	e7fd      	b.n	8016d5e <__NVIC_SystemReset+0x16>
 8016d62:	bf00      	nop
 8016d64:	e000ed00 	.word	0xe000ed00
 8016d68:	05fa0004 	.word	0x05fa0004

08016d6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016d6c:	4a07      	ldr	r2, [pc, #28]	@ (8016d8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8016d6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016d70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8016d74:	041b      	lsls	r3, r3, #16
 8016d76:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016d78:	0200      	lsls	r0, r0, #8
 8016d7a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016d7e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8016d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8016d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8016d88:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8016d8a:	4770      	bx	lr
 8016d8c:	e000ed00 	.word	0xe000ed00

08016d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016d90:	b510      	push	{r4, lr}
 8016d92:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016d94:	4b05      	ldr	r3, [pc, #20]	@ (8016dac <HAL_NVIC_SetPriority+0x1c>)
 8016d96:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016d98:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8016d9c:	f7ff ffb4 	bl	8016d08 <NVIC_EncodePriority>
 8016da0:	4601      	mov	r1, r0
 8016da2:	4620      	mov	r0, r4
 8016da4:	f7ff ff9c 	bl	8016ce0 <__NVIC_SetPriority>
}
 8016da8:	bd10      	pop	{r4, pc}
 8016daa:	bf00      	nop
 8016dac:	e000ed00 	.word	0xe000ed00

08016db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016db0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016db2:	f7ff ff87 	bl	8016cc4 <__NVIC_EnableIRQ>
}
 8016db6:	bd08      	pop	{r3, pc}

08016db8 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8016db8:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8016dba:	f7ff ffc5 	bl	8016d48 <__NVIC_SystemReset>
	...

08016dc0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	2b0f      	cmp	r3, #15
 8016dc4:	f200 80d7 	bhi.w	8016f76 <HAL_GPIO_Init+0x1b6>
{
 8016dc8:	b570      	push	{r4, r5, r6, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	e065      	b.n	8016e9a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016dce:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016dd0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016dd4:	2403      	movs	r4, #3
 8016dd6:	fa04 f40e 	lsl.w	r4, r4, lr
 8016dda:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016dde:	68cc      	ldr	r4, [r1, #12]
 8016de0:	fa04 f40e 	lsl.w	r4, r4, lr
 8016de4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8016de6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016de8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016dea:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016dee:	684a      	ldr	r2, [r1, #4]
 8016df0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8016df4:	409a      	lsls	r2, r3
 8016df6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016df8:	6042      	str	r2, [r0, #4]
 8016dfa:	e05c      	b.n	8016eb6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016dfc:	08dc      	lsrs	r4, r3, #3
 8016dfe:	3408      	adds	r4, #8
 8016e00:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016e04:	f003 0507 	and.w	r5, r3, #7
 8016e08:	00ad      	lsls	r5, r5, #2
 8016e0a:	f04f 0e0f 	mov.w	lr, #15
 8016e0e:	fa0e fe05 	lsl.w	lr, lr, r5
 8016e12:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016e16:	690a      	ldr	r2, [r1, #16]
 8016e18:	40aa      	lsls	r2, r5
 8016e1a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8016e1e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016e22:	e05c      	b.n	8016ede <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016e24:	2204      	movs	r2, #4
 8016e26:	e000      	b.n	8016e2a <HAL_GPIO_Init+0x6a>
 8016e28:	2200      	movs	r2, #0
 8016e2a:	fa02 f20e 	lsl.w	r2, r2, lr
 8016e2e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016e30:	3402      	adds	r4, #2
 8016e32:	4d51      	ldr	r5, [pc, #324]	@ (8016f78 <HAL_GPIO_Init+0x1b8>)
 8016e34:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016e38:	4a50      	ldr	r2, [pc, #320]	@ (8016f7c <HAL_GPIO_Init+0x1bc>)
 8016e3a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8016e3c:	ea6f 020c 	mvn.w	r2, ip
 8016e40:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016e44:	684e      	ldr	r6, [r1, #4]
 8016e46:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8016e4a:	d001      	beq.n	8016e50 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8016e4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8016e50:	4c4a      	ldr	r4, [pc, #296]	@ (8016f7c <HAL_GPIO_Init+0x1bc>)
 8016e52:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8016e54:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8016e56:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016e5a:	684e      	ldr	r6, [r1, #4]
 8016e5c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8016e60:	d001      	beq.n	8016e66 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8016e62:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8016e66:	4c45      	ldr	r4, [pc, #276]	@ (8016f7c <HAL_GPIO_Init+0x1bc>)
 8016e68:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8016e6a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8016e6c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016e70:	684e      	ldr	r6, [r1, #4]
 8016e72:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8016e76:	d001      	beq.n	8016e7c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8016e78:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8016e7c:	4c3f      	ldr	r4, [pc, #252]	@ (8016f7c <HAL_GPIO_Init+0x1bc>)
 8016e7e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016e80:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8016e82:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016e84:	684d      	ldr	r5, [r1, #4]
 8016e86:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8016e8a:	d001      	beq.n	8016e90 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8016e8c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8016e90:	4c3a      	ldr	r4, [pc, #232]	@ (8016f7c <HAL_GPIO_Init+0x1bc>)
 8016e92:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016e94:	3301      	adds	r3, #1
 8016e96:	2b0f      	cmp	r3, #15
 8016e98:	d86b      	bhi.n	8016f72 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016e9e:	680c      	ldr	r4, [r1, #0]
 8016ea0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8016ea4:	ea32 0404 	bics.w	r4, r2, r4
 8016ea8:	d1f4      	bne.n	8016e94 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016eaa:	684c      	ldr	r4, [r1, #4]
 8016eac:	f004 0403 	and.w	r4, r4, #3
 8016eb0:	3c01      	subs	r4, #1
 8016eb2:	2c01      	cmp	r4, #1
 8016eb4:	d98b      	bls.n	8016dce <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016eb6:	684a      	ldr	r2, [r1, #4]
 8016eb8:	f002 0203 	and.w	r2, r2, #3
 8016ebc:	2a03      	cmp	r2, #3
 8016ebe:	d009      	beq.n	8016ed4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8016ec0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016ec2:	005d      	lsls	r5, r3, #1
 8016ec4:	2203      	movs	r2, #3
 8016ec6:	40aa      	lsls	r2, r5
 8016ec8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016ecc:	688a      	ldr	r2, [r1, #8]
 8016ece:	40aa      	lsls	r2, r5
 8016ed0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8016ed2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016ed4:	684a      	ldr	r2, [r1, #4]
 8016ed6:	f002 0203 	and.w	r2, r2, #3
 8016eda:	2a02      	cmp	r2, #2
 8016edc:	d08e      	beq.n	8016dfc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8016ede:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016ee0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016ee4:	2203      	movs	r2, #3
 8016ee6:	fa02 f20e 	lsl.w	r2, r2, lr
 8016eea:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016eee:	684a      	ldr	r2, [r1, #4]
 8016ef0:	f002 0203 	and.w	r2, r2, #3
 8016ef4:	fa02 f20e 	lsl.w	r2, r2, lr
 8016ef8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8016efa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016efc:	684a      	ldr	r2, [r1, #4]
 8016efe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8016f02:	d0c7      	beq.n	8016e94 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016f04:	2200      	movs	r2, #0
 8016f06:	9201      	str	r2, [sp, #4]
 8016f08:	4a1d      	ldr	r2, [pc, #116]	@ (8016f80 <HAL_GPIO_Init+0x1c0>)
 8016f0a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8016f0c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8016f10:	6454      	str	r4, [r2, #68]	@ 0x44
 8016f12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016f14:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016f18:	9201      	str	r2, [sp, #4]
 8016f1a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8016f1c:	089c      	lsrs	r4, r3, #2
 8016f1e:	1ca5      	adds	r5, r4, #2
 8016f20:	4a15      	ldr	r2, [pc, #84]	@ (8016f78 <HAL_GPIO_Init+0x1b8>)
 8016f22:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016f26:	f003 0e03 	and.w	lr, r3, #3
 8016f2a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016f2e:	220f      	movs	r2, #15
 8016f30:	fa02 f20e 	lsl.w	r2, r2, lr
 8016f34:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016f38:	4a12      	ldr	r2, [pc, #72]	@ (8016f84 <HAL_GPIO_Init+0x1c4>)
 8016f3a:	4290      	cmp	r0, r2
 8016f3c:	f43f af74 	beq.w	8016e28 <HAL_GPIO_Init+0x68>
 8016f40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016f44:	4290      	cmp	r0, r2
 8016f46:	d00e      	beq.n	8016f66 <HAL_GPIO_Init+0x1a6>
 8016f48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016f4c:	4290      	cmp	r0, r2
 8016f4e:	d00c      	beq.n	8016f6a <HAL_GPIO_Init+0x1aa>
 8016f50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016f54:	4290      	cmp	r0, r2
 8016f56:	d00a      	beq.n	8016f6e <HAL_GPIO_Init+0x1ae>
 8016f58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016f5c:	4290      	cmp	r0, r2
 8016f5e:	f43f af61 	beq.w	8016e24 <HAL_GPIO_Init+0x64>
 8016f62:	2207      	movs	r2, #7
 8016f64:	e761      	b.n	8016e2a <HAL_GPIO_Init+0x6a>
 8016f66:	2201      	movs	r2, #1
 8016f68:	e75f      	b.n	8016e2a <HAL_GPIO_Init+0x6a>
 8016f6a:	2202      	movs	r2, #2
 8016f6c:	e75d      	b.n	8016e2a <HAL_GPIO_Init+0x6a>
 8016f6e:	2203      	movs	r2, #3
 8016f70:	e75b      	b.n	8016e2a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8016f72:	b002      	add	sp, #8
 8016f74:	bd70      	pop	{r4, r5, r6, pc}
 8016f76:	4770      	bx	lr
 8016f78:	40013800 	.word	0x40013800
 8016f7c:	40013c00 	.word	0x40013c00
 8016f80:	40023800 	.word	0x40023800
 8016f84:	40020000 	.word	0x40020000

08016f88 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016f88:	2300      	movs	r3, #0
 8016f8a:	2b0f      	cmp	r3, #15
 8016f8c:	d87c      	bhi.n	8017088 <HAL_GPIO_DeInit+0x100>
{
 8016f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f90:	e02d      	b.n	8016fee <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016f92:	2504      	movs	r5, #4
 8016f94:	e000      	b.n	8016f98 <HAL_GPIO_DeInit+0x10>
 8016f96:	2500      	movs	r5, #0
 8016f98:	fa05 f50c 	lsl.w	r5, r5, ip
 8016f9c:	42a5      	cmp	r5, r4
 8016f9e:	d057      	beq.n	8017050 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016fa0:	6804      	ldr	r4, [r0, #0]
 8016fa2:	005d      	lsls	r5, r3, #1
 8016fa4:	f04f 0c03 	mov.w	ip, #3
 8016fa8:	fa0c fc05 	lsl.w	ip, ip, r5
 8016fac:	ea24 040c 	bic.w	r4, r4, ip
 8016fb0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016fb2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8016fb6:	f10e 0e08 	add.w	lr, lr, #8
 8016fba:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8016fbe:	f003 0607 	and.w	r6, r3, #7
 8016fc2:	00b6      	lsls	r6, r6, #2
 8016fc4:	250f      	movs	r5, #15
 8016fc6:	40b5      	lsls	r5, r6
 8016fc8:	ea24 0405 	bic.w	r4, r4, r5
 8016fcc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016fd0:	68c4      	ldr	r4, [r0, #12]
 8016fd2:	ea24 040c 	bic.w	r4, r4, ip
 8016fd6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016fd8:	6844      	ldr	r4, [r0, #4]
 8016fda:	ea24 0202 	bic.w	r2, r4, r2
 8016fde:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016fe0:	6882      	ldr	r2, [r0, #8]
 8016fe2:	ea22 020c 	bic.w	r2, r2, ip
 8016fe6:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016fe8:	3301      	adds	r3, #1
 8016fea:	2b0f      	cmp	r3, #15
 8016fec:	d84b      	bhi.n	8017086 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8016fee:	2201      	movs	r2, #1
 8016ff0:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8016ff2:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016ff6:	ea32 0401 	bics.w	r4, r2, r1
 8016ffa:	d1f5      	bne.n	8016fe8 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016ffc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8017000:	f10e 0502 	add.w	r5, lr, #2
 8017004:	4c21      	ldr	r4, [pc, #132]	@ (801708c <HAL_GPIO_DeInit+0x104>)
 8017006:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801700a:	f003 0c03 	and.w	ip, r3, #3
 801700e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8017012:	250f      	movs	r5, #15
 8017014:	fa05 f70c 	lsl.w	r7, r5, ip
 8017018:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801701a:	4d1d      	ldr	r5, [pc, #116]	@ (8017090 <HAL_GPIO_DeInit+0x108>)
 801701c:	42a8      	cmp	r0, r5
 801701e:	d0ba      	beq.n	8016f96 <HAL_GPIO_DeInit+0xe>
 8017020:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8017024:	42a8      	cmp	r0, r5
 8017026:	d00d      	beq.n	8017044 <HAL_GPIO_DeInit+0xbc>
 8017028:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801702c:	42a8      	cmp	r0, r5
 801702e:	d00b      	beq.n	8017048 <HAL_GPIO_DeInit+0xc0>
 8017030:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8017034:	42a8      	cmp	r0, r5
 8017036:	d009      	beq.n	801704c <HAL_GPIO_DeInit+0xc4>
 8017038:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801703c:	42a8      	cmp	r0, r5
 801703e:	d0a8      	beq.n	8016f92 <HAL_GPIO_DeInit+0xa>
 8017040:	2507      	movs	r5, #7
 8017042:	e7a9      	b.n	8016f98 <HAL_GPIO_DeInit+0x10>
 8017044:	2501      	movs	r5, #1
 8017046:	e7a7      	b.n	8016f98 <HAL_GPIO_DeInit+0x10>
 8017048:	2502      	movs	r5, #2
 801704a:	e7a5      	b.n	8016f98 <HAL_GPIO_DeInit+0x10>
 801704c:	2503      	movs	r5, #3
 801704e:	e7a3      	b.n	8016f98 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8017050:	4c10      	ldr	r4, [pc, #64]	@ (8017094 <HAL_GPIO_DeInit+0x10c>)
 8017052:	6825      	ldr	r5, [r4, #0]
 8017054:	ea25 0506 	bic.w	r5, r5, r6
 8017058:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801705a:	6865      	ldr	r5, [r4, #4]
 801705c:	ea25 0506 	bic.w	r5, r5, r6
 8017060:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8017062:	68e5      	ldr	r5, [r4, #12]
 8017064:	ea25 0506 	bic.w	r5, r5, r6
 8017068:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801706a:	68a5      	ldr	r5, [r4, #8]
 801706c:	ea25 0506 	bic.w	r5, r5, r6
 8017070:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8017072:	4e06      	ldr	r6, [pc, #24]	@ (801708c <HAL_GPIO_DeInit+0x104>)
 8017074:	f10e 0402 	add.w	r4, lr, #2
 8017078:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801707c:	ea25 0507 	bic.w	r5, r5, r7
 8017080:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8017084:	e78c      	b.n	8016fa0 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8017086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017088:	4770      	bx	lr
 801708a:	bf00      	nop
 801708c:	40013800 	.word	0x40013800
 8017090:	40020000 	.word	0x40020000
 8017094:	40013c00 	.word	0x40013c00

08017098 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017098:	6903      	ldr	r3, [r0, #16]
 801709a:	4219      	tst	r1, r3
 801709c:	d001      	beq.n	80170a2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801709e:	2001      	movs	r0, #1
 80170a0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80170a2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80170a4:	4770      	bx	lr

080170a6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80170a6:	b10a      	cbz	r2, 80170ac <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80170a8:	6181      	str	r1, [r0, #24]
 80170aa:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80170ac:	0409      	lsls	r1, r1, #16
 80170ae:	6181      	str	r1, [r0, #24]
  }
}
 80170b0:	4770      	bx	lr

080170b2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80170b2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80170b4:	ea01 0203 	and.w	r2, r1, r3
 80170b8:	ea21 0103 	bic.w	r1, r1, r3
 80170bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80170c0:	6181      	str	r1, [r0, #24]
}
 80170c2:	4770      	bx	lr

080170c4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80170c4:	6803      	ldr	r3, [r0, #0]
 80170c6:	695a      	ldr	r2, [r3, #20]
 80170c8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80170cc:	d101      	bne.n	80170d2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80170ce:	2000      	movs	r0, #0
}
 80170d0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80170d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80170d6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80170d8:	2300      	movs	r3, #0
 80170da:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80170dc:	2220      	movs	r2, #32
 80170de:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80170e2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80170e6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80170e8:	f042 0204 	orr.w	r2, r2, #4
 80170ec:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80170ee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80170f2:	2001      	movs	r0, #1
 80170f4:	4770      	bx	lr

080170f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80170f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170fa:	4606      	mov	r6, r0
 80170fc:	460c      	mov	r4, r1
 80170fe:	4617      	mov	r7, r2
 8017100:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017102:	e03b      	b.n	801717c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017104:	f7ff fc28 	bl	8016958 <HAL_GetTick>
 8017108:	9b06      	ldr	r3, [sp, #24]
 801710a:	1ac0      	subs	r0, r0, r3
 801710c:	4540      	cmp	r0, r8
 801710e:	d802      	bhi.n	8017116 <I2C_WaitOnFlagUntilTimeout+0x20>
 8017110:	f1b8 0f00 	cmp.w	r8, #0
 8017114:	d132      	bne.n	801717c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8017116:	2d01      	cmp	r5, #1
 8017118:	d018      	beq.n	801714c <I2C_WaitOnFlagUntilTimeout+0x56>
 801711a:	6833      	ldr	r3, [r6, #0]
 801711c:	699b      	ldr	r3, [r3, #24]
 801711e:	ea24 0303 	bic.w	r3, r4, r3
 8017122:	b29b      	uxth	r3, r3
 8017124:	fab3 f383 	clz	r3, r3
 8017128:	095b      	lsrs	r3, r3, #5
 801712a:	429f      	cmp	r7, r3
 801712c:	d126      	bne.n	801717c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 801712e:	2300      	movs	r3, #0
 8017130:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8017132:	2220      	movs	r2, #32
 8017134:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8017138:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801713c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801713e:	f042 0220 	orr.w	r2, r2, #32
 8017142:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8017144:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8017148:	2001      	movs	r0, #1
 801714a:	e027      	b.n	801719c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801714c:	6833      	ldr	r3, [r6, #0]
 801714e:	695b      	ldr	r3, [r3, #20]
 8017150:	ea24 0303 	bic.w	r3, r4, r3
 8017154:	b29b      	uxth	r3, r3
 8017156:	fab3 f383 	clz	r3, r3
 801715a:	095b      	lsrs	r3, r3, #5
 801715c:	e7e5      	b.n	801712a <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801715e:	6833      	ldr	r3, [r6, #0]
 8017160:	695b      	ldr	r3, [r3, #20]
 8017162:	ea24 0c03 	bic.w	ip, r4, r3
 8017166:	fa1f fc8c 	uxth.w	ip, ip
 801716a:	fabc fc8c 	clz	ip, ip
 801716e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017172:	4567      	cmp	r7, ip
 8017174:	d111      	bne.n	801719a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8017176:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801717a:	d1c3      	bne.n	8017104 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801717c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8017180:	2d01      	cmp	r5, #1
 8017182:	d0ec      	beq.n	801715e <I2C_WaitOnFlagUntilTimeout+0x68>
 8017184:	6833      	ldr	r3, [r6, #0]
 8017186:	699b      	ldr	r3, [r3, #24]
 8017188:	ea24 0c03 	bic.w	ip, r4, r3
 801718c:	fa1f fc8c 	uxth.w	ip, ip
 8017190:	fabc fc8c 	clz	ip, ip
 8017194:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017198:	e7eb      	b.n	8017172 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 801719a:	2000      	movs	r0, #0
}
 801719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80171a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171a4:	4605      	mov	r5, r0
 80171a6:	460e      	mov	r6, r1
 80171a8:	4690      	mov	r8, r2
 80171aa:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80171ac:	e053      	b.n	8017256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80171b4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171b6:	682b      	ldr	r3, [r5, #0]
 80171b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80171bc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80171be:	2300      	movs	r3, #0
 80171c0:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80171c2:	2220      	movs	r2, #32
 80171c4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80171c8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80171cc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80171ce:	f042 0204 	orr.w	r2, r2, #4
 80171d2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80171d4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80171d8:	2001      	movs	r0, #1
 80171da:	e04a      	b.n	8017272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80171dc:	f7ff fbbc 	bl	8016958 <HAL_GetTick>
 80171e0:	eba0 0009 	sub.w	r0, r0, r9
 80171e4:	4540      	cmp	r0, r8
 80171e6:	d802      	bhi.n	80171ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80171e8:	f1b8 0f00 	cmp.w	r8, #0
 80171ec:	d133      	bne.n	8017256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80171ee:	2f01      	cmp	r7, #1
 80171f0:	d017      	beq.n	8017222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80171f2:	682b      	ldr	r3, [r5, #0]
 80171f4:	699b      	ldr	r3, [r3, #24]
 80171f6:	ea26 0303 	bic.w	r3, r6, r3
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	3b00      	subs	r3, #0
 80171fe:	bf18      	it	ne
 8017200:	2301      	movne	r3, #1
 8017202:	b343      	cbz	r3, 8017256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017204:	2300      	movs	r3, #0
 8017206:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017208:	2220      	movs	r2, #32
 801720a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801720e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017212:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8017214:	f042 0220 	orr.w	r2, r2, #32
 8017218:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801721a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 801721e:	2001      	movs	r0, #1
 8017220:	e027      	b.n	8017272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8017222:	682b      	ldr	r3, [r5, #0]
 8017224:	695b      	ldr	r3, [r3, #20]
 8017226:	ea26 0303 	bic.w	r3, r6, r3
 801722a:	b29b      	uxth	r3, r3
 801722c:	3b00      	subs	r3, #0
 801722e:	bf18      	it	ne
 8017230:	2301      	movne	r3, #1
 8017232:	e7e6      	b.n	8017202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017234:	682b      	ldr	r3, [r5, #0]
 8017236:	699c      	ldr	r4, [r3, #24]
 8017238:	ea26 0404 	bic.w	r4, r6, r4
 801723c:	b2a4      	uxth	r4, r4
 801723e:	3c00      	subs	r4, #0
 8017240:	bf18      	it	ne
 8017242:	2401      	movne	r4, #1
 8017244:	b1a4      	cbz	r4, 8017270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017246:	682b      	ldr	r3, [r5, #0]
 8017248:	695a      	ldr	r2, [r3, #20]
 801724a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801724e:	d1ae      	bne.n	80171ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8017250:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8017254:	d1c2      	bne.n	80171dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017256:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801725a:	2f01      	cmp	r7, #1
 801725c:	d1ea      	bne.n	8017234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 801725e:	682b      	ldr	r3, [r5, #0]
 8017260:	695c      	ldr	r4, [r3, #20]
 8017262:	ea26 0404 	bic.w	r4, r6, r4
 8017266:	b2a4      	uxth	r4, r4
 8017268:	3c00      	subs	r4, #0
 801726a:	bf18      	it	ne
 801726c:	2401      	movne	r4, #1
 801726e:	e7e9      	b.n	8017244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8017270:	2000      	movs	r0, #0
}
 8017272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08017278 <I2C_MasterRequestWrite>:
{
 8017278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801727a:	b083      	sub	sp, #12
 801727c:	4604      	mov	r4, r0
 801727e:	460d      	mov	r5, r1
 8017280:	4616      	mov	r6, r2
 8017282:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017284:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8017286:	2b08      	cmp	r3, #8
 8017288:	d00d      	beq.n	80172a6 <I2C_MasterRequestWrite+0x2e>
 801728a:	2b01      	cmp	r3, #1
 801728c:	d00b      	beq.n	80172a6 <I2C_MasterRequestWrite+0x2e>
 801728e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8017292:	d008      	beq.n	80172a6 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8017294:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017296:	2b12      	cmp	r3, #18
 8017298:	d10a      	bne.n	80172b0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801729a:	6802      	ldr	r2, [r0, #0]
 801729c:	6813      	ldr	r3, [r2, #0]
 801729e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80172a2:	6013      	str	r3, [r2, #0]
 80172a4:	e004      	b.n	80172b0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80172a6:	6822      	ldr	r2, [r4, #0]
 80172a8:	6813      	ldr	r3, [r2, #0]
 80172aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80172ae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80172b0:	9700      	str	r7, [sp, #0]
 80172b2:	4633      	mov	r3, r6
 80172b4:	2200      	movs	r2, #0
 80172b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80172ba:	4620      	mov	r0, r4
 80172bc:	f7ff ff1b 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 80172c0:	b980      	cbnz	r0, 80172e4 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80172c2:	6923      	ldr	r3, [r4, #16]
 80172c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80172c8:	d116      	bne.n	80172f8 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80172ca:	6823      	ldr	r3, [r4, #0]
 80172cc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80172d0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80172d2:	463b      	mov	r3, r7
 80172d4:	4632      	mov	r2, r6
 80172d6:	4913      	ldr	r1, [pc, #76]	@ (8017324 <I2C_MasterRequestWrite+0xac>)
 80172d8:	4620      	mov	r0, r4
 80172da:	f7ff ff61 	bl	80171a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80172de:	b9f8      	cbnz	r0, 8017320 <I2C_MasterRequestWrite+0xa8>
}
 80172e0:	b003      	add	sp, #12
 80172e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80172e4:	6823      	ldr	r3, [r4, #0]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80172ec:	d002      	beq.n	80172f4 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80172ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80172f2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80172f4:	2003      	movs	r0, #3
 80172f6:	e7f3      	b.n	80172e0 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80172f8:	11eb      	asrs	r3, r5, #7
 80172fa:	6822      	ldr	r2, [r4, #0]
 80172fc:	f003 0306 	and.w	r3, r3, #6
 8017300:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8017304:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8017306:	463b      	mov	r3, r7
 8017308:	4632      	mov	r2, r6
 801730a:	4907      	ldr	r1, [pc, #28]	@ (8017328 <I2C_MasterRequestWrite+0xb0>)
 801730c:	4620      	mov	r0, r4
 801730e:	f7ff ff47 	bl	80171a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017312:	b918      	cbnz	r0, 801731c <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8017314:	6823      	ldr	r3, [r4, #0]
 8017316:	b2ed      	uxtb	r5, r5
 8017318:	611d      	str	r5, [r3, #16]
 801731a:	e7da      	b.n	80172d2 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 801731c:	2001      	movs	r0, #1
 801731e:	e7df      	b.n	80172e0 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8017320:	2001      	movs	r0, #1
 8017322:	e7dd      	b.n	80172e0 <I2C_MasterRequestWrite+0x68>
 8017324:	00010002 	.word	0x00010002
 8017328:	00010008 	.word	0x00010008

0801732c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 801732c:	b570      	push	{r4, r5, r6, lr}
 801732e:	4604      	mov	r4, r0
 8017330:	460d      	mov	r5, r1
 8017332:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	695b      	ldr	r3, [r3, #20]
 8017338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801733c:	d121      	bne.n	8017382 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801733e:	4620      	mov	r0, r4
 8017340:	f7ff fec0 	bl	80170c4 <I2C_IsAcknowledgeFailed>
 8017344:	b9f8      	cbnz	r0, 8017386 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8017346:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801734a:	d0f3      	beq.n	8017334 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801734c:	f7ff fb04 	bl	8016958 <HAL_GetTick>
 8017350:	1b80      	subs	r0, r0, r6
 8017352:	42a8      	cmp	r0, r5
 8017354:	d801      	bhi.n	801735a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8017356:	2d00      	cmp	r5, #0
 8017358:	d1ec      	bne.n	8017334 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 801735a:	6823      	ldr	r3, [r4, #0]
 801735c:	695b      	ldr	r3, [r3, #20]
 801735e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017362:	d1e7      	bne.n	8017334 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017364:	2300      	movs	r3, #0
 8017366:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017368:	2220      	movs	r2, #32
 801736a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801736e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017372:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017374:	f042 0220 	orr.w	r2, r2, #32
 8017378:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801737a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 801737e:	2001      	movs	r0, #1
 8017380:	e000      	b.n	8017384 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8017382:	2000      	movs	r0, #0
}
 8017384:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8017386:	2001      	movs	r0, #1
 8017388:	e7fc      	b.n	8017384 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0801738a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 801738a:	b570      	push	{r4, r5, r6, lr}
 801738c:	4604      	mov	r4, r0
 801738e:	460d      	mov	r5, r1
 8017390:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017392:	6823      	ldr	r3, [r4, #0]
 8017394:	695b      	ldr	r3, [r3, #20]
 8017396:	f013 0f04 	tst.w	r3, #4
 801739a:	d121      	bne.n	80173e0 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801739c:	4620      	mov	r0, r4
 801739e:	f7ff fe91 	bl	80170c4 <I2C_IsAcknowledgeFailed>
 80173a2:	b9f8      	cbnz	r0, 80173e4 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80173a4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80173a8:	d0f3      	beq.n	8017392 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80173aa:	f7ff fad5 	bl	8016958 <HAL_GetTick>
 80173ae:	1b80      	subs	r0, r0, r6
 80173b0:	42a8      	cmp	r0, r5
 80173b2:	d801      	bhi.n	80173b8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80173b4:	2d00      	cmp	r5, #0
 80173b6:	d1ec      	bne.n	8017392 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	695b      	ldr	r3, [r3, #20]
 80173bc:	f013 0f04 	tst.w	r3, #4
 80173c0:	d1e7      	bne.n	8017392 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80173c2:	2300      	movs	r3, #0
 80173c4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80173c6:	2220      	movs	r2, #32
 80173c8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80173cc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80173d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80173d2:	f042 0220 	orr.w	r2, r2, #32
 80173d6:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80173d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80173dc:	2001      	movs	r0, #1
 80173de:	e000      	b.n	80173e2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80173e0:	2000      	movs	r0, #0
}
 80173e2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80173e4:	2001      	movs	r0, #1
 80173e6:	e7fc      	b.n	80173e2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080173e8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80173e8:	2800      	cmp	r0, #0
 80173ea:	f000 80cc 	beq.w	8017586 <HAL_I2C_Init+0x19e>
{
 80173ee:	b570      	push	{r4, r5, r6, lr}
 80173f0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80173f2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d077      	beq.n	80174ea <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80173fa:	2324      	movs	r3, #36	@ 0x24
 80173fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8017400:	6822      	ldr	r2, [r4, #0]
 8017402:	6813      	ldr	r3, [r2, #0]
 8017404:	f023 0301 	bic.w	r3, r3, #1
 8017408:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801740a:	6822      	ldr	r2, [r4, #0]
 801740c:	6813      	ldr	r3, [r2, #0]
 801740e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017412:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017414:	6822      	ldr	r2, [r4, #0]
 8017416:	6813      	ldr	r3, [r2, #0]
 8017418:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801741c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801741e:	f000 fdb3 	bl	8017f88 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017422:	6862      	ldr	r2, [r4, #4]
 8017424:	4b5a      	ldr	r3, [pc, #360]	@ (8017590 <HAL_I2C_Init+0x1a8>)
 8017426:	429a      	cmp	r2, r3
 8017428:	d864      	bhi.n	80174f4 <HAL_I2C_Init+0x10c>
 801742a:	4b5a      	ldr	r3, [pc, #360]	@ (8017594 <HAL_I2C_Init+0x1ac>)
 801742c:	4298      	cmp	r0, r3
 801742e:	bf8c      	ite	hi
 8017430:	2300      	movhi	r3, #0
 8017432:	2301      	movls	r3, #1
 8017434:	2b00      	cmp	r3, #0
 8017436:	f040 80a8 	bne.w	801758a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 801743a:	4957      	ldr	r1, [pc, #348]	@ (8017598 <HAL_I2C_Init+0x1b0>)
 801743c:	fba1 3100 	umull	r3, r1, r1, r0
 8017440:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8017442:	6825      	ldr	r5, [r4, #0]
 8017444:	686a      	ldr	r2, [r5, #4]
 8017446:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801744a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 801744e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017450:	6821      	ldr	r1, [r4, #0]
 8017452:	6a0a      	ldr	r2, [r1, #32]
 8017454:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8017458:	6866      	ldr	r6, [r4, #4]
 801745a:	4d4d      	ldr	r5, [pc, #308]	@ (8017590 <HAL_I2C_Init+0x1a8>)
 801745c:	42ae      	cmp	r6, r5
 801745e:	d84f      	bhi.n	8017500 <HAL_I2C_Init+0x118>
 8017460:	3301      	adds	r3, #1
 8017462:	4313      	orrs	r3, r2
 8017464:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017466:	6821      	ldr	r1, [r4, #0]
 8017468:	69ca      	ldr	r2, [r1, #28]
 801746a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 801746e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8017472:	6865      	ldr	r5, [r4, #4]
 8017474:	4b46      	ldr	r3, [pc, #280]	@ (8017590 <HAL_I2C_Init+0x1a8>)
 8017476:	429d      	cmp	r5, r3
 8017478:	d84c      	bhi.n	8017514 <HAL_I2C_Init+0x12c>
 801747a:	1e43      	subs	r3, r0, #1
 801747c:	006d      	lsls	r5, r5, #1
 801747e:	fbb3 f3f5 	udiv	r3, r3, r5
 8017482:	3301      	adds	r3, #1
 8017484:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8017488:	4203      	tst	r3, r0
 801748a:	d078      	beq.n	801757e <HAL_I2C_Init+0x196>
 801748c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017490:	431a      	orrs	r2, r3
 8017492:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017494:	6821      	ldr	r1, [r4, #0]
 8017496:	680b      	ldr	r3, [r1, #0]
 8017498:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801749c:	69e2      	ldr	r2, [r4, #28]
 801749e:	6a20      	ldr	r0, [r4, #32]
 80174a0:	4302      	orrs	r2, r0
 80174a2:	4313      	orrs	r3, r2
 80174a4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80174a6:	6821      	ldr	r1, [r4, #0]
 80174a8:	688b      	ldr	r3, [r1, #8]
 80174aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80174ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80174b2:	6922      	ldr	r2, [r4, #16]
 80174b4:	68e0      	ldr	r0, [r4, #12]
 80174b6:	4302      	orrs	r2, r0
 80174b8:	4313      	orrs	r3, r2
 80174ba:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80174bc:	6821      	ldr	r1, [r4, #0]
 80174be:	68cb      	ldr	r3, [r1, #12]
 80174c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80174c4:	6962      	ldr	r2, [r4, #20]
 80174c6:	69a0      	ldr	r0, [r4, #24]
 80174c8:	4302      	orrs	r2, r0
 80174ca:	4313      	orrs	r3, r2
 80174cc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80174ce:	6822      	ldr	r2, [r4, #0]
 80174d0:	6813      	ldr	r3, [r2, #0]
 80174d2:	f043 0301 	orr.w	r3, r3, #1
 80174d6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80174d8:	2000      	movs	r0, #0
 80174da:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80174dc:	2320      	movs	r3, #32
 80174de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80174e2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80174e4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80174e8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80174ea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80174ee:	f7fa fe15 	bl	801211c <HAL_I2C_MspInit>
 80174f2:	e782      	b.n	80173fa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80174f4:	4b29      	ldr	r3, [pc, #164]	@ (801759c <HAL_I2C_Init+0x1b4>)
 80174f6:	4298      	cmp	r0, r3
 80174f8:	bf8c      	ite	hi
 80174fa:	2300      	movhi	r3, #0
 80174fc:	2301      	movls	r3, #1
 80174fe:	e799      	b.n	8017434 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017500:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8017504:	fb05 f303 	mul.w	r3, r5, r3
 8017508:	4d25      	ldr	r5, [pc, #148]	@ (80175a0 <HAL_I2C_Init+0x1b8>)
 801750a:	fba5 5303 	umull	r5, r3, r5, r3
 801750e:	099b      	lsrs	r3, r3, #6
 8017510:	3301      	adds	r3, #1
 8017512:	e7a6      	b.n	8017462 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017514:	68a6      	ldr	r6, [r4, #8]
 8017516:	b9be      	cbnz	r6, 8017548 <HAL_I2C_Init+0x160>
 8017518:	1e43      	subs	r3, r0, #1
 801751a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801751e:	fbb3 f3fc 	udiv	r3, r3, ip
 8017522:	3301      	adds	r3, #1
 8017524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017528:	fab3 f383 	clz	r3, r3
 801752c:	095b      	lsrs	r3, r3, #5
 801752e:	bb43      	cbnz	r3, 8017582 <HAL_I2C_Init+0x19a>
 8017530:	b9c6      	cbnz	r6, 8017564 <HAL_I2C_Init+0x17c>
 8017532:	1e43      	subs	r3, r0, #1
 8017534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017538:	fbb3 f3f5 	udiv	r3, r3, r5
 801753c:	3301      	adds	r3, #1
 801753e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017546:	e7a3      	b.n	8017490 <HAL_I2C_Init+0xa8>
 8017548:	1e43      	subs	r3, r0, #1
 801754a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 801754e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8017552:	fbb3 f3fc 	udiv	r3, r3, ip
 8017556:	3301      	adds	r3, #1
 8017558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801755c:	fab3 f383 	clz	r3, r3
 8017560:	095b      	lsrs	r3, r3, #5
 8017562:	e7e4      	b.n	801752e <HAL_I2C_Init+0x146>
 8017564:	1e43      	subs	r3, r0, #1
 8017566:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801756a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801756e:	fbb3 f3f5 	udiv	r3, r3, r5
 8017572:	3301      	adds	r3, #1
 8017574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801757c:	e788      	b.n	8017490 <HAL_I2C_Init+0xa8>
 801757e:	2304      	movs	r3, #4
 8017580:	e786      	b.n	8017490 <HAL_I2C_Init+0xa8>
 8017582:	2301      	movs	r3, #1
 8017584:	e784      	b.n	8017490 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8017586:	2001      	movs	r0, #1
}
 8017588:	4770      	bx	lr
    return HAL_ERROR;
 801758a:	2001      	movs	r0, #1
 801758c:	e7ac      	b.n	80174e8 <HAL_I2C_Init+0x100>
 801758e:	bf00      	nop
 8017590:	000186a0 	.word	0x000186a0
 8017594:	001e847f 	.word	0x001e847f
 8017598:	431bde83 	.word	0x431bde83
 801759c:	003d08ff 	.word	0x003d08ff
 80175a0:	10624dd3 	.word	0x10624dd3

080175a4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80175a4:	b1a8      	cbz	r0, 80175d2 <HAL_I2C_DeInit+0x2e>
{
 80175a6:	b510      	push	{r4, lr}
 80175a8:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80175aa:	2324      	movs	r3, #36	@ 0x24
 80175ac:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80175b0:	6802      	ldr	r2, [r0, #0]
 80175b2:	6813      	ldr	r3, [r2, #0]
 80175b4:	f023 0301 	bic.w	r3, r3, #1
 80175b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80175ba:	f7fa fde9 	bl	8012190 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80175be:	2000      	movs	r0, #0
 80175c0:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80175c2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80175c6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80175c8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 80175cc:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80175d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80175d2:	2001      	movs	r0, #1
}
 80175d4:	4770      	bx	lr
	...

080175d8 <HAL_I2C_Master_Transmit>:
{
 80175d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175dc:	b085      	sub	sp, #20
 80175de:	4604      	mov	r4, r0
 80175e0:	460f      	mov	r7, r1
 80175e2:	4691      	mov	r9, r2
 80175e4:	4698      	mov	r8, r3
 80175e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80175e8:	f7ff f9b6 	bl	8016958 <HAL_GetTick>
 80175ec:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80175ee:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80175f2:	b2c0      	uxtb	r0, r0
 80175f4:	2820      	cmp	r0, #32
 80175f6:	d004      	beq.n	8017602 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80175f8:	2702      	movs	r7, #2
}
 80175fa:	4638      	mov	r0, r7
 80175fc:	b005      	add	sp, #20
 80175fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017602:	9500      	str	r5, [sp, #0]
 8017604:	2319      	movs	r3, #25
 8017606:	2201      	movs	r2, #1
 8017608:	494f      	ldr	r1, [pc, #316]	@ (8017748 <HAL_I2C_Master_Transmit+0x170>)
 801760a:	4620      	mov	r0, r4
 801760c:	f7ff fd73 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 8017610:	2800      	cmp	r0, #0
 8017612:	f040 8092 	bne.w	801773a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8017616:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801761a:	2b01      	cmp	r3, #1
 801761c:	f000 808f 	beq.w	801773e <HAL_I2C_Master_Transmit+0x166>
 8017620:	2301      	movs	r3, #1
 8017622:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017626:	6823      	ldr	r3, [r4, #0]
 8017628:	681a      	ldr	r2, [r3, #0]
 801762a:	f012 0f01 	tst.w	r2, #1
 801762e:	d103      	bne.n	8017638 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	f042 0201 	orr.w	r2, r2, #1
 8017636:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017638:	6822      	ldr	r2, [r4, #0]
 801763a:	6813      	ldr	r3, [r2, #0]
 801763c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017640:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8017642:	2321      	movs	r3, #33	@ 0x21
 8017644:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8017648:	2310      	movs	r3, #16
 801764a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801764e:	2300      	movs	r3, #0
 8017650:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8017652:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8017656:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801765a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801765c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801765e:	4b3b      	ldr	r3, [pc, #236]	@ (801774c <HAL_I2C_Master_Transmit+0x174>)
 8017660:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017662:	462b      	mov	r3, r5
 8017664:	4632      	mov	r2, r6
 8017666:	4639      	mov	r1, r7
 8017668:	4620      	mov	r0, r4
 801766a:	f7ff fe05 	bl	8017278 <I2C_MasterRequestWrite>
 801766e:	4607      	mov	r7, r0
 8017670:	2800      	cmp	r0, #0
 8017672:	d166      	bne.n	8017742 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017674:	2300      	movs	r3, #0
 8017676:	9303      	str	r3, [sp, #12]
 8017678:	6823      	ldr	r3, [r4, #0]
 801767a:	695a      	ldr	r2, [r3, #20]
 801767c:	9203      	str	r2, [sp, #12]
 801767e:	699b      	ldr	r3, [r3, #24]
 8017680:	9303      	str	r3, [sp, #12]
 8017682:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8017684:	e011      	b.n	80176aa <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017686:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017688:	2b04      	cmp	r3, #4
 801768a:	d001      	beq.n	8017690 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 801768c:	2701      	movs	r7, #1
 801768e:	e7b4      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017690:	6822      	ldr	r2, [r4, #0]
 8017692:	6813      	ldr	r3, [r2, #0]
 8017694:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017698:	6013      	str	r3, [r2, #0]
 801769a:	e7f7      	b.n	801768c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801769c:	462a      	mov	r2, r5
 801769e:	4631      	mov	r1, r6
 80176a0:	4620      	mov	r0, r4
 80176a2:	f7ff fe72 	bl	801738a <I2C_WaitOnBTFFlagUntilTimeout>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d12e      	bne.n	8017708 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80176aa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d036      	beq.n	801771e <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80176b0:	462a      	mov	r2, r5
 80176b2:	4631      	mov	r1, r6
 80176b4:	4620      	mov	r0, r4
 80176b6:	f7ff fe39 	bl	801732c <I2C_WaitOnTXEFlagUntilTimeout>
 80176ba:	2800      	cmp	r0, #0
 80176bc:	d1e3      	bne.n	8017686 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80176be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80176c0:	6823      	ldr	r3, [r4, #0]
 80176c2:	7812      	ldrb	r2, [r2, #0]
 80176c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80176c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80176c8:	1c43      	adds	r3, r0, #1
 80176ca:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80176cc:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80176ce:	b289      	uxth	r1, r1
 80176d0:	3901      	subs	r1, #1
 80176d2:	b289      	uxth	r1, r1
 80176d4:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80176d6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80176d8:	3b01      	subs	r3, #1
 80176da:	b29b      	uxth	r3, r3
 80176dc:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80176de:	6822      	ldr	r2, [r4, #0]
 80176e0:	6951      	ldr	r1, [r2, #20]
 80176e2:	f011 0f04 	tst.w	r1, #4
 80176e6:	d0d9      	beq.n	801769c <HAL_I2C_Master_Transmit+0xc4>
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d0d7      	beq.n	801769c <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80176ec:	7843      	ldrb	r3, [r0, #1]
 80176ee:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80176f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80176f2:	3301      	adds	r3, #1
 80176f4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80176f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80176f8:	b29b      	uxth	r3, r3
 80176fa:	3b01      	subs	r3, #1
 80176fc:	b29b      	uxth	r3, r3
 80176fe:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8017700:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017702:	3b01      	subs	r3, #1
 8017704:	8523      	strh	r3, [r4, #40]	@ 0x28
 8017706:	e7c9      	b.n	801769c <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801770a:	2b04      	cmp	r3, #4
 801770c:	d001      	beq.n	8017712 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 801770e:	2701      	movs	r7, #1
 8017710:	e773      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017712:	6822      	ldr	r2, [r4, #0]
 8017714:	6813      	ldr	r3, [r2, #0]
 8017716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801771a:	6013      	str	r3, [r2, #0]
 801771c:	e7f7      	b.n	801770e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801771e:	6822      	ldr	r2, [r4, #0]
 8017720:	6813      	ldr	r3, [r2, #0]
 8017722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017726:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8017728:	2320      	movs	r3, #32
 801772a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801772e:	2300      	movs	r3, #0
 8017730:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8017734:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8017738:	e75f      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 801773a:	2702      	movs	r7, #2
 801773c:	e75d      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 801773e:	2702      	movs	r7, #2
 8017740:	e75b      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8017742:	2701      	movs	r7, #1
 8017744:	e759      	b.n	80175fa <HAL_I2C_Master_Transmit+0x22>
 8017746:	bf00      	nop
 8017748:	00100002 	.word	0x00100002
 801774c:	ffff0000 	.word	0xffff0000

08017750 <HAL_I2C_IsDeviceReady>:
{
 8017750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017754:	b085      	sub	sp, #20
 8017756:	4604      	mov	r4, r0
 8017758:	4688      	mov	r8, r1
 801775a:	4691      	mov	r9, r2
 801775c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801775e:	f7ff f8fb 	bl	8016958 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017762:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8017766:	b2db      	uxtb	r3, r3
 8017768:	2b20      	cmp	r3, #32
 801776a:	d003      	beq.n	8017774 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 801776c:	2002      	movs	r0, #2
}
 801776e:	b005      	add	sp, #20
 8017770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017774:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017776:	9000      	str	r0, [sp, #0]
 8017778:	2319      	movs	r3, #25
 801777a:	2201      	movs	r2, #1
 801777c:	4957      	ldr	r1, [pc, #348]	@ (80178dc <HAL_I2C_IsDeviceReady+0x18c>)
 801777e:	4620      	mov	r0, r4
 8017780:	f7ff fcb9 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 8017784:	2800      	cmp	r0, #0
 8017786:	f040 80a0 	bne.w	80178ca <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 801778a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801778e:	2b01      	cmp	r3, #1
 8017790:	f000 809d 	beq.w	80178ce <HAL_I2C_IsDeviceReady+0x17e>
 8017794:	2301      	movs	r3, #1
 8017796:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801779a:	6823      	ldr	r3, [r4, #0]
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	f012 0f01 	tst.w	r2, #1
 80177a2:	d103      	bne.n	80177ac <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80177a4:	681a      	ldr	r2, [r3, #0]
 80177a6:	f042 0201 	orr.w	r2, r2, #1
 80177aa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80177ac:	6822      	ldr	r2, [r4, #0]
 80177ae:	6813      	ldr	r3, [r2, #0]
 80177b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80177b4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80177b6:	2324      	movs	r3, #36	@ 0x24
 80177b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80177bc:	2700      	movs	r7, #0
 80177be:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80177c0:	4b47      	ldr	r3, [pc, #284]	@ (80178e0 <HAL_I2C_IsDeviceReady+0x190>)
 80177c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80177c4:	e040      	b.n	8017848 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80177c6:	6823      	ldr	r3, [r4, #0]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80177ce:	d002      	beq.n	80177d6 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80177d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80177d4:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 80177d6:	2003      	movs	r0, #3
 80177d8:	e7c9      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80177da:	23a0      	movs	r3, #160	@ 0xa0
 80177dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80177e0:	6822      	ldr	r2, [r4, #0]
 80177e2:	6953      	ldr	r3, [r2, #20]
 80177e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80177e8:	6952      	ldr	r2, [r2, #20]
 80177ea:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80177ee:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 80177f2:	fa5f fc8c 	uxtb.w	ip, ip
 80177f6:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 80177fa:	d009      	beq.n	8017810 <HAL_I2C_IsDeviceReady+0xc0>
 80177fc:	b943      	cbnz	r3, 8017810 <HAL_I2C_IsDeviceReady+0xc0>
 80177fe:	b93a      	cbnz	r2, 8017810 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017800:	f7ff f8aa 	bl	8016958 <HAL_GetTick>
 8017804:	1b80      	subs	r0, r0, r6
 8017806:	42a8      	cmp	r0, r5
 8017808:	d8e7      	bhi.n	80177da <HAL_I2C_IsDeviceReady+0x8a>
 801780a:	2d00      	cmp	r5, #0
 801780c:	d1e8      	bne.n	80177e0 <HAL_I2C_IsDeviceReady+0x90>
 801780e:	e7e4      	b.n	80177da <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8017810:	2320      	movs	r3, #32
 8017812:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8017816:	6823      	ldr	r3, [r4, #0]
 8017818:	695a      	ldr	r2, [r3, #20]
 801781a:	f012 0f02 	tst.w	r2, #2
 801781e:	d131      	bne.n	8017884 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017826:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017828:	6823      	ldr	r3, [r4, #0]
 801782a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801782e:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017830:	9600      	str	r6, [sp, #0]
 8017832:	2319      	movs	r3, #25
 8017834:	2201      	movs	r2, #1
 8017836:	4929      	ldr	r1, [pc, #164]	@ (80178dc <HAL_I2C_IsDeviceReady+0x18c>)
 8017838:	4620      	mov	r0, r4
 801783a:	f7ff fc5c 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 801783e:	2800      	cmp	r0, #0
 8017840:	d149      	bne.n	80178d6 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8017842:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8017844:	454f      	cmp	r7, r9
 8017846:	d238      	bcs.n	80178ba <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017848:	6822      	ldr	r2, [r4, #0]
 801784a:	6813      	ldr	r3, [r2, #0]
 801784c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017850:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8017852:	9600      	str	r6, [sp, #0]
 8017854:	462b      	mov	r3, r5
 8017856:	2200      	movs	r2, #0
 8017858:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801785c:	4620      	mov	r0, r4
 801785e:	f7ff fc4a 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 8017862:	2800      	cmp	r0, #0
 8017864:	d1af      	bne.n	80177c6 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017866:	6823      	ldr	r3, [r4, #0]
 8017868:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 801786c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 801786e:	f7ff f873 	bl	8016958 <HAL_GetTick>
 8017872:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017874:	6822      	ldr	r2, [r4, #0]
 8017876:	6953      	ldr	r3, [r2, #20]
 8017878:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801787c:	6952      	ldr	r2, [r2, #20]
 801787e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8017882:	e7b4      	b.n	80177ee <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801788a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801788c:	2300      	movs	r3, #0
 801788e:	9303      	str	r3, [sp, #12]
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	695a      	ldr	r2, [r3, #20]
 8017894:	9203      	str	r2, [sp, #12]
 8017896:	699b      	ldr	r3, [r3, #24]
 8017898:	9303      	str	r3, [sp, #12]
 801789a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801789c:	9600      	str	r6, [sp, #0]
 801789e:	2319      	movs	r3, #25
 80178a0:	2201      	movs	r2, #1
 80178a2:	490e      	ldr	r1, [pc, #56]	@ (80178dc <HAL_I2C_IsDeviceReady+0x18c>)
 80178a4:	4620      	mov	r0, r4
 80178a6:	f7ff fc26 	bl	80170f6 <I2C_WaitOnFlagUntilTimeout>
 80178aa:	b990      	cbnz	r0, 80178d2 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80178ac:	2320      	movs	r3, #32
 80178ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80178b2:	2300      	movs	r3, #0
 80178b4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80178b8:	e759      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80178ba:	2320      	movs	r3, #32
 80178bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80178c0:	2300      	movs	r3, #0
 80178c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80178c6:	2001      	movs	r0, #1
 80178c8:	e751      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80178ca:	2002      	movs	r0, #2
 80178cc:	e74f      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80178ce:	2002      	movs	r0, #2
 80178d0:	e74d      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80178d2:	2001      	movs	r0, #1
 80178d4:	e74b      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80178d6:	2001      	movs	r0, #1
 80178d8:	e749      	b.n	801776e <HAL_I2C_IsDeviceReady+0x1e>
 80178da:	bf00      	nop
 80178dc:	00100002 	.word	0x00100002
 80178e0:	ffff0000 	.word	0xffff0000

080178e4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80178e4:	b340      	cbz	r0, 8017938 <HAL_IWDG_Init+0x54>
{
 80178e6:	b538      	push	{r3, r4, r5, lr}
 80178e8:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80178ea:	6803      	ldr	r3, [r0, #0]
 80178ec:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80178f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80178f2:	6803      	ldr	r3, [r0, #0]
 80178f4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80178f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80178fa:	6803      	ldr	r3, [r0, #0]
 80178fc:	6842      	ldr	r2, [r0, #4]
 80178fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8017900:	6803      	ldr	r3, [r0, #0]
 8017902:	6882      	ldr	r2, [r0, #8]
 8017904:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8017906:	f7ff f827 	bl	8016958 <HAL_GetTick>
 801790a:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	68da      	ldr	r2, [r3, #12]
 8017910:	f012 0f03 	tst.w	r2, #3
 8017914:	d00b      	beq.n	801792e <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8017916:	f7ff f81f 	bl	8016958 <HAL_GetTick>
 801791a:	1b40      	subs	r0, r0, r5
 801791c:	2831      	cmp	r0, #49	@ 0x31
 801791e:	d9f5      	bls.n	801790c <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8017920:	6823      	ldr	r3, [r4, #0]
 8017922:	68db      	ldr	r3, [r3, #12]
 8017924:	f013 0f03 	tst.w	r3, #3
 8017928:	d0f0      	beq.n	801790c <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 801792a:	2003      	movs	r0, #3
 801792c:	e003      	b.n	8017936 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801792e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8017932:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8017934:	2000      	movs	r0, #0
}
 8017936:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8017938:	2001      	movs	r0, #1
}
 801793a:	4770      	bx	lr

0801793c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801793c:	6803      	ldr	r3, [r0, #0]
 801793e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8017942:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8017944:	2000      	movs	r0, #0
 8017946:	4770      	bx	lr

08017948 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8017948:	2800      	cmp	r0, #0
 801794a:	f000 81e0 	beq.w	8017d0e <HAL_RCC_OscConfig+0x3c6>
{
 801794e:	b570      	push	{r4, r5, r6, lr}
 8017950:	b082      	sub	sp, #8
 8017952:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017954:	6803      	ldr	r3, [r0, #0]
 8017956:	f013 0f01 	tst.w	r3, #1
 801795a:	d03b      	beq.n	80179d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801795c:	4b9f      	ldr	r3, [pc, #636]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 801795e:	689b      	ldr	r3, [r3, #8]
 8017960:	f003 030c 	and.w	r3, r3, #12
 8017964:	2b04      	cmp	r3, #4
 8017966:	d02c      	beq.n	80179c2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017968:	4b9c      	ldr	r3, [pc, #624]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017970:	2b08      	cmp	r3, #8
 8017972:	d021      	beq.n	80179b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017974:	6863      	ldr	r3, [r4, #4]
 8017976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801797a:	d04f      	beq.n	8017a1c <HAL_RCC_OscConfig+0xd4>
 801797c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017980:	d052      	beq.n	8017a28 <HAL_RCC_OscConfig+0xe0>
 8017982:	4b96      	ldr	r3, [pc, #600]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017984:	681a      	ldr	r2, [r3, #0]
 8017986:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	681a      	ldr	r2, [r3, #0]
 801798e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8017992:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017994:	6863      	ldr	r3, [r4, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d050      	beq.n	8017a3c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801799a:	f7fe ffdd 	bl	8016958 <HAL_GetTick>
 801799e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80179a0:	4b8e      	ldr	r3, [pc, #568]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80179a8:	d114      	bne.n	80179d4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80179aa:	f7fe ffd5 	bl	8016958 <HAL_GetTick>
 80179ae:	1b40      	subs	r0, r0, r5
 80179b0:	2864      	cmp	r0, #100	@ 0x64
 80179b2:	d9f5      	bls.n	80179a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80179b4:	2003      	movs	r0, #3
 80179b6:	e1b1      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80179b8:	4b88      	ldr	r3, [pc, #544]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80179c0:	d0d8      	beq.n	8017974 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80179c2:	4b86      	ldr	r3, [pc, #536]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80179ca:	d003      	beq.n	80179d4 <HAL_RCC_OscConfig+0x8c>
 80179cc:	6863      	ldr	r3, [r4, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	f000 819f 	beq.w	8017d12 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80179d4:	6823      	ldr	r3, [r4, #0]
 80179d6:	f013 0f02 	tst.w	r3, #2
 80179da:	d054      	beq.n	8017a86 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80179dc:	4b7f      	ldr	r3, [pc, #508]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 80179de:	689b      	ldr	r3, [r3, #8]
 80179e0:	f013 0f0c 	tst.w	r3, #12
 80179e4:	d03e      	beq.n	8017a64 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80179e6:	4b7d      	ldr	r3, [pc, #500]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 80179e8:	689b      	ldr	r3, [r3, #8]
 80179ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80179ee:	2b08      	cmp	r3, #8
 80179f0:	d033      	beq.n	8017a5a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80179f2:	68e3      	ldr	r3, [r4, #12]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d068      	beq.n	8017aca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80179f8:	4b79      	ldr	r3, [pc, #484]	@ (8017be0 <HAL_RCC_OscConfig+0x298>)
 80179fa:	2201      	movs	r2, #1
 80179fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80179fe:	f7fe ffab 	bl	8016958 <HAL_GetTick>
 8017a02:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017a04:	4b75      	ldr	r3, [pc, #468]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	f013 0f02 	tst.w	r3, #2
 8017a0c:	d154      	bne.n	8017ab8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017a0e:	f7fe ffa3 	bl	8016958 <HAL_GetTick>
 8017a12:	1b40      	subs	r0, r0, r5
 8017a14:	2802      	cmp	r0, #2
 8017a16:	d9f5      	bls.n	8017a04 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8017a18:	2003      	movs	r0, #3
 8017a1a:	e17f      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017a1c:	4a6f      	ldr	r2, [pc, #444]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a1e:	6813      	ldr	r3, [r2, #0]
 8017a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017a24:	6013      	str	r3, [r2, #0]
 8017a26:	e7b5      	b.n	8017994 <HAL_RCC_OscConfig+0x4c>
 8017a28:	4b6c      	ldr	r3, [pc, #432]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8017a30:	601a      	str	r2, [r3, #0]
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8017a38:	601a      	str	r2, [r3, #0]
 8017a3a:	e7ab      	b.n	8017994 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8017a3c:	f7fe ff8c 	bl	8016958 <HAL_GetTick>
 8017a40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017a42:	4b66      	ldr	r3, [pc, #408]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8017a4a:	d0c3      	beq.n	80179d4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017a4c:	f7fe ff84 	bl	8016958 <HAL_GetTick>
 8017a50:	1b40      	subs	r0, r0, r5
 8017a52:	2864      	cmp	r0, #100	@ 0x64
 8017a54:	d9f5      	bls.n	8017a42 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8017a56:	2003      	movs	r0, #3
 8017a58:	e160      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017a5a:	4b60      	ldr	r3, [pc, #384]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017a62:	d1c6      	bne.n	80179f2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017a64:	4b5d      	ldr	r3, [pc, #372]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f013 0f02 	tst.w	r3, #2
 8017a6c:	d003      	beq.n	8017a76 <HAL_RCC_OscConfig+0x12e>
 8017a6e:	68e3      	ldr	r3, [r4, #12]
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	f040 8150 	bne.w	8017d16 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017a76:	4a59      	ldr	r2, [pc, #356]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017a78:	6813      	ldr	r3, [r2, #0]
 8017a7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017a7e:	6921      	ldr	r1, [r4, #16]
 8017a80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017a84:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	f013 0f08 	tst.w	r3, #8
 8017a8c:	d042      	beq.n	8017b14 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8017a8e:	6963      	ldr	r3, [r4, #20]
 8017a90:	b36b      	cbz	r3, 8017aee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017a92:	4b53      	ldr	r3, [pc, #332]	@ (8017be0 <HAL_RCC_OscConfig+0x298>)
 8017a94:	2201      	movs	r2, #1
 8017a96:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017a9a:	f7fe ff5d 	bl	8016958 <HAL_GetTick>
 8017a9e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017aa4:	f013 0f02 	tst.w	r3, #2
 8017aa8:	d134      	bne.n	8017b14 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017aaa:	f7fe ff55 	bl	8016958 <HAL_GetTick>
 8017aae:	1b40      	subs	r0, r0, r5
 8017ab0:	2802      	cmp	r0, #2
 8017ab2:	d9f5      	bls.n	8017aa0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8017ab4:	2003      	movs	r0, #3
 8017ab6:	e131      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017ab8:	4a48      	ldr	r2, [pc, #288]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017aba:	6813      	ldr	r3, [r2, #0]
 8017abc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017ac0:	6921      	ldr	r1, [r4, #16]
 8017ac2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017ac6:	6013      	str	r3, [r2, #0]
 8017ac8:	e7dd      	b.n	8017a86 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8017aca:	4b45      	ldr	r3, [pc, #276]	@ (8017be0 <HAL_RCC_OscConfig+0x298>)
 8017acc:	2200      	movs	r2, #0
 8017ace:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8017ad0:	f7fe ff42 	bl	8016958 <HAL_GetTick>
 8017ad4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017ad6:	4b41      	ldr	r3, [pc, #260]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	f013 0f02 	tst.w	r3, #2
 8017ade:	d0d2      	beq.n	8017a86 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017ae0:	f7fe ff3a 	bl	8016958 <HAL_GetTick>
 8017ae4:	1b40      	subs	r0, r0, r5
 8017ae6:	2802      	cmp	r0, #2
 8017ae8:	d9f5      	bls.n	8017ad6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8017aea:	2003      	movs	r0, #3
 8017aec:	e116      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017aee:	4b3c      	ldr	r3, [pc, #240]	@ (8017be0 <HAL_RCC_OscConfig+0x298>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017af6:	f7fe ff2f 	bl	8016958 <HAL_GetTick>
 8017afa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017afc:	4b37      	ldr	r3, [pc, #220]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b00:	f013 0f02 	tst.w	r3, #2
 8017b04:	d006      	beq.n	8017b14 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017b06:	f7fe ff27 	bl	8016958 <HAL_GetTick>
 8017b0a:	1b40      	subs	r0, r0, r5
 8017b0c:	2802      	cmp	r0, #2
 8017b0e:	d9f5      	bls.n	8017afc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8017b10:	2003      	movs	r0, #3
 8017b12:	e103      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017b14:	6823      	ldr	r3, [r4, #0]
 8017b16:	f013 0f04 	tst.w	r3, #4
 8017b1a:	d077      	beq.n	8017c0c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b20:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8017b24:	d133      	bne.n	8017b8e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017b26:	2300      	movs	r3, #0
 8017b28:	9301      	str	r3, [sp, #4]
 8017b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017b2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8017b32:	641a      	str	r2, [r3, #64]	@ 0x40
 8017b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017b3a:	9301      	str	r3, [sp, #4]
 8017b3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8017b3e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017b40:	4b28      	ldr	r3, [pc, #160]	@ (8017be4 <HAL_RCC_OscConfig+0x29c>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017b48:	d023      	beq.n	8017b92 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017b4a:	68a3      	ldr	r3, [r4, #8]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d034      	beq.n	8017bba <HAL_RCC_OscConfig+0x272>
 8017b50:	2b05      	cmp	r3, #5
 8017b52:	d038      	beq.n	8017bc6 <HAL_RCC_OscConfig+0x27e>
 8017b54:	4b21      	ldr	r3, [pc, #132]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017b56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017b58:	f022 0201 	bic.w	r2, r2, #1
 8017b5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8017b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017b60:	f022 0204 	bic.w	r2, r2, #4
 8017b64:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017b66:	68a3      	ldr	r3, [r4, #8]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d03d      	beq.n	8017be8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017b6c:	f7fe fef4 	bl	8016958 <HAL_GetTick>
 8017b70:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017b72:	4b1a      	ldr	r3, [pc, #104]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b76:	f013 0f02 	tst.w	r3, #2
 8017b7a:	d146      	bne.n	8017c0a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017b7c:	f7fe feec 	bl	8016958 <HAL_GetTick>
 8017b80:	1b80      	subs	r0, r0, r6
 8017b82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017b86:	4298      	cmp	r0, r3
 8017b88:	d9f3      	bls.n	8017b72 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8017b8a:	2003      	movs	r0, #3
 8017b8c:	e0c6      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8017b8e:	2500      	movs	r5, #0
 8017b90:	e7d6      	b.n	8017b40 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017b92:	4a14      	ldr	r2, [pc, #80]	@ (8017be4 <HAL_RCC_OscConfig+0x29c>)
 8017b94:	6813      	ldr	r3, [r2, #0]
 8017b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017b9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8017b9c:	f7fe fedc 	bl	8016958 <HAL_GetTick>
 8017ba0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017ba2:	4b10      	ldr	r3, [pc, #64]	@ (8017be4 <HAL_RCC_OscConfig+0x29c>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017baa:	d1ce      	bne.n	8017b4a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017bac:	f7fe fed4 	bl	8016958 <HAL_GetTick>
 8017bb0:	1b80      	subs	r0, r0, r6
 8017bb2:	2802      	cmp	r0, #2
 8017bb4:	d9f5      	bls.n	8017ba2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8017bb6:	2003      	movs	r0, #3
 8017bb8:	e0b0      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017bba:	4a08      	ldr	r2, [pc, #32]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017bbc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8017bbe:	f043 0301 	orr.w	r3, r3, #1
 8017bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8017bc4:	e7cf      	b.n	8017b66 <HAL_RCC_OscConfig+0x21e>
 8017bc6:	4b05      	ldr	r3, [pc, #20]	@ (8017bdc <HAL_RCC_OscConfig+0x294>)
 8017bc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017bca:	f042 0204 	orr.w	r2, r2, #4
 8017bce:	671a      	str	r2, [r3, #112]	@ 0x70
 8017bd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017bd2:	f042 0201 	orr.w	r2, r2, #1
 8017bd6:	671a      	str	r2, [r3, #112]	@ 0x70
 8017bd8:	e7c5      	b.n	8017b66 <HAL_RCC_OscConfig+0x21e>
 8017bda:	bf00      	nop
 8017bdc:	40023800 	.word	0x40023800
 8017be0:	42470000 	.word	0x42470000
 8017be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017be8:	f7fe feb6 	bl	8016958 <HAL_GetTick>
 8017bec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017bee:	4b52      	ldr	r3, [pc, #328]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017bf2:	f013 0f02 	tst.w	r3, #2
 8017bf6:	d008      	beq.n	8017c0a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017bf8:	f7fe feae 	bl	8016958 <HAL_GetTick>
 8017bfc:	1b80      	subs	r0, r0, r6
 8017bfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017c02:	4298      	cmp	r0, r3
 8017c04:	d9f3      	bls.n	8017bee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8017c06:	2003      	movs	r0, #3
 8017c08:	e088      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017c0a:	b9ed      	cbnz	r5, 8017c48 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017c0c:	69a3      	ldr	r3, [r4, #24]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f000 8083 	beq.w	8017d1a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017c14:	4a48      	ldr	r2, [pc, #288]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017c16:	6892      	ldr	r2, [r2, #8]
 8017c18:	f002 020c 	and.w	r2, r2, #12
 8017c1c:	2a08      	cmp	r2, #8
 8017c1e:	d051      	beq.n	8017cc4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017c20:	2b02      	cmp	r3, #2
 8017c22:	d017      	beq.n	8017c54 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017c24:	4b45      	ldr	r3, [pc, #276]	@ (8017d3c <HAL_RCC_OscConfig+0x3f4>)
 8017c26:	2200      	movs	r2, #0
 8017c28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017c2a:	f7fe fe95 	bl	8016958 <HAL_GetTick>
 8017c2e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017c30:	4b41      	ldr	r3, [pc, #260]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017c38:	d042      	beq.n	8017cc0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017c3a:	f7fe fe8d 	bl	8016958 <HAL_GetTick>
 8017c3e:	1b00      	subs	r0, r0, r4
 8017c40:	2802      	cmp	r0, #2
 8017c42:	d9f5      	bls.n	8017c30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8017c44:	2003      	movs	r0, #3
 8017c46:	e069      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017c48:	4a3b      	ldr	r2, [pc, #236]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017c4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8017c52:	e7db      	b.n	8017c0c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017c54:	4b39      	ldr	r3, [pc, #228]	@ (8017d3c <HAL_RCC_OscConfig+0x3f4>)
 8017c56:	2200      	movs	r2, #0
 8017c58:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8017c5a:	f7fe fe7d 	bl	8016958 <HAL_GetTick>
 8017c5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017c60:	4b35      	ldr	r3, [pc, #212]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017c68:	d006      	beq.n	8017c78 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017c6a:	f7fe fe75 	bl	8016958 <HAL_GetTick>
 8017c6e:	1b40      	subs	r0, r0, r5
 8017c70:	2802      	cmp	r0, #2
 8017c72:	d9f5      	bls.n	8017c60 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8017c74:	2003      	movs	r0, #3
 8017c76:	e051      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017c78:	69e3      	ldr	r3, [r4, #28]
 8017c7a:	6a22      	ldr	r2, [r4, #32]
 8017c7c:	4313      	orrs	r3, r2
 8017c7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017c80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8017c84:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017c86:	0852      	lsrs	r2, r2, #1
 8017c88:	3a01      	subs	r2, #1
 8017c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017c90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017c94:	4a28      	ldr	r2, [pc, #160]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017c96:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8017c98:	4b28      	ldr	r3, [pc, #160]	@ (8017d3c <HAL_RCC_OscConfig+0x3f4>)
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8017c9e:	f7fe fe5b 	bl	8016958 <HAL_GetTick>
 8017ca2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017ca4:	4b24      	ldr	r3, [pc, #144]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017cac:	d106      	bne.n	8017cbc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017cae:	f7fe fe53 	bl	8016958 <HAL_GetTick>
 8017cb2:	1b00      	subs	r0, r0, r4
 8017cb4:	2802      	cmp	r0, #2
 8017cb6:	d9f5      	bls.n	8017ca4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8017cb8:	2003      	movs	r0, #3
 8017cba:	e02f      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8017cbc:	2000      	movs	r0, #0
 8017cbe:	e02d      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017cc0:	2000      	movs	r0, #0
 8017cc2:	e02b      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d02b      	beq.n	8017d20 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8017cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8017d38 <HAL_RCC_OscConfig+0x3f0>)
 8017cca:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017ccc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8017cd0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017cd2:	4291      	cmp	r1, r2
 8017cd4:	d126      	bne.n	8017d24 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8017cda:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017cdc:	428a      	cmp	r2, r1
 8017cde:	d123      	bne.n	8017d28 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017ce0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017ce2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8017ce6:	401a      	ands	r2, r3
 8017ce8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8017cec:	d11e      	bne.n	8017d2c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017cee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8017cf2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017cf4:	0852      	lsrs	r2, r2, #1
 8017cf6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017cf8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8017cfc:	d118      	bne.n	8017d30 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8017cfe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8017d02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017d04:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8017d08:	d114      	bne.n	8017d34 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	e006      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8017d0e:	2001      	movs	r0, #1
}
 8017d10:	4770      	bx	lr
        return HAL_ERROR;
 8017d12:	2001      	movs	r0, #1
 8017d14:	e002      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8017d16:	2001      	movs	r0, #1
 8017d18:	e000      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8017d1a:	2000      	movs	r0, #0
}
 8017d1c:	b002      	add	sp, #8
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8017d20:	2001      	movs	r0, #1
 8017d22:	e7fb      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8017d24:	2001      	movs	r0, #1
 8017d26:	e7f9      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017d28:	2001      	movs	r0, #1
 8017d2a:	e7f7      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017d2c:	2001      	movs	r0, #1
 8017d2e:	e7f5      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017d30:	2001      	movs	r0, #1
 8017d32:	e7f3      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017d34:	2001      	movs	r0, #1
 8017d36:	e7f1      	b.n	8017d1c <HAL_RCC_OscConfig+0x3d4>
 8017d38:	40023800 	.word	0x40023800
 8017d3c:	42470000 	.word	0x42470000

08017d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017d40:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017d42:	4b33      	ldr	r3, [pc, #204]	@ (8017e10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017d44:	689b      	ldr	r3, [r3, #8]
 8017d46:	f003 030c 	and.w	r3, r3, #12
 8017d4a:	2b04      	cmp	r3, #4
 8017d4c:	d05b      	beq.n	8017e06 <HAL_RCC_GetSysClockFreq+0xc6>
 8017d4e:	2b08      	cmp	r3, #8
 8017d50:	d15b      	bne.n	8017e0a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017d52:	4b2f      	ldr	r3, [pc, #188]	@ (8017e10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017d54:	685a      	ldr	r2, [r3, #4]
 8017d56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017d60:	d02c      	beq.n	8017dbc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017d62:	4b2b      	ldr	r3, [pc, #172]	@ (8017e10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017d64:	6858      	ldr	r0, [r3, #4]
 8017d66:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017d6a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017d6e:	ebbc 0c00 	subs.w	ip, ip, r0
 8017d72:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017d76:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017d7a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017d7e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017d82:	ebb1 010c 	subs.w	r1, r1, ip
 8017d86:	eb63 030e 	sbc.w	r3, r3, lr
 8017d8a:	00db      	lsls	r3, r3, #3
 8017d8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017d90:	00c9      	lsls	r1, r1, #3
 8017d92:	eb11 0c00 	adds.w	ip, r1, r0
 8017d96:	f143 0300 	adc.w	r3, r3, #0
 8017d9a:	0259      	lsls	r1, r3, #9
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8017da2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8017da6:	f7f8 ffd7 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8017daa:	4b19      	ldr	r3, [pc, #100]	@ (8017e10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8017db2:	3301      	adds	r3, #1
 8017db4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8017db6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8017dba:	e027      	b.n	8017e0c <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017dbc:	4b14      	ldr	r3, [pc, #80]	@ (8017e10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017dbe:	6858      	ldr	r0, [r3, #4]
 8017dc0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017dc4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017dc8:	ebbc 0c00 	subs.w	ip, ip, r0
 8017dcc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017dd0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017dd4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017dd8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017ddc:	ebb1 010c 	subs.w	r1, r1, ip
 8017de0:	eb63 030e 	sbc.w	r3, r3, lr
 8017de4:	00db      	lsls	r3, r3, #3
 8017de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017dea:	00c9      	lsls	r1, r1, #3
 8017dec:	eb11 0c00 	adds.w	ip, r1, r0
 8017df0:	f143 0300 	adc.w	r3, r3, #0
 8017df4:	0299      	lsls	r1, r3, #10
 8017df6:	2300      	movs	r3, #0
 8017df8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8017dfc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8017e00:	f7f8 ffaa 	bl	8010d58 <__aeabi_uldivmod>
 8017e04:	e7d1      	b.n	8017daa <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8017e06:	4803      	ldr	r0, [pc, #12]	@ (8017e14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017e08:	e000      	b.n	8017e0c <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017e0a:	4803      	ldr	r0, [pc, #12]	@ (8017e18 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8017e0c:	bd08      	pop	{r3, pc}
 8017e0e:	bf00      	nop
 8017e10:	40023800 	.word	0x40023800
 8017e14:	007a1200 	.word	0x007a1200
 8017e18:	00f42400 	.word	0x00f42400

08017e1c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	f000 809b 	beq.w	8017f58 <HAL_RCC_ClockConfig+0x13c>
{
 8017e22:	b570      	push	{r4, r5, r6, lr}
 8017e24:	460d      	mov	r5, r1
 8017e26:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017e28:	4b4f      	ldr	r3, [pc, #316]	@ (8017f68 <HAL_RCC_ClockConfig+0x14c>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	f003 0307 	and.w	r3, r3, #7
 8017e30:	428b      	cmp	r3, r1
 8017e32:	d208      	bcs.n	8017e46 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017e34:	b2cb      	uxtb	r3, r1
 8017e36:	4a4c      	ldr	r2, [pc, #304]	@ (8017f68 <HAL_RCC_ClockConfig+0x14c>)
 8017e38:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017e3a:	6813      	ldr	r3, [r2, #0]
 8017e3c:	f003 0307 	and.w	r3, r3, #7
 8017e40:	428b      	cmp	r3, r1
 8017e42:	f040 808b 	bne.w	8017f5c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017e46:	6823      	ldr	r3, [r4, #0]
 8017e48:	f013 0f02 	tst.w	r3, #2
 8017e4c:	d017      	beq.n	8017e7e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017e4e:	f013 0f04 	tst.w	r3, #4
 8017e52:	d004      	beq.n	8017e5e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017e54:	4a45      	ldr	r2, [pc, #276]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017e56:	6893      	ldr	r3, [r2, #8]
 8017e58:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8017e5c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017e5e:	6823      	ldr	r3, [r4, #0]
 8017e60:	f013 0f08 	tst.w	r3, #8
 8017e64:	d004      	beq.n	8017e70 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017e66:	4a41      	ldr	r2, [pc, #260]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017e68:	6893      	ldr	r3, [r2, #8]
 8017e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8017e6e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017e70:	4a3e      	ldr	r2, [pc, #248]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017e72:	6893      	ldr	r3, [r2, #8]
 8017e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017e78:	68a1      	ldr	r1, [r4, #8]
 8017e7a:	430b      	orrs	r3, r1
 8017e7c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017e7e:	6823      	ldr	r3, [r4, #0]
 8017e80:	f013 0f01 	tst.w	r3, #1
 8017e84:	d032      	beq.n	8017eec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017e86:	6863      	ldr	r3, [r4, #4]
 8017e88:	2b01      	cmp	r3, #1
 8017e8a:	d021      	beq.n	8017ed0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017e8c:	1e9a      	subs	r2, r3, #2
 8017e8e:	2a01      	cmp	r2, #1
 8017e90:	d925      	bls.n	8017ede <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017e92:	4a36      	ldr	r2, [pc, #216]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017e94:	6812      	ldr	r2, [r2, #0]
 8017e96:	f012 0f02 	tst.w	r2, #2
 8017e9a:	d061      	beq.n	8017f60 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017e9c:	4933      	ldr	r1, [pc, #204]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017e9e:	688a      	ldr	r2, [r1, #8]
 8017ea0:	f022 0203 	bic.w	r2, r2, #3
 8017ea4:	4313      	orrs	r3, r2
 8017ea6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017ea8:	f7fe fd56 	bl	8016958 <HAL_GetTick>
 8017eac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017eae:	4b2f      	ldr	r3, [pc, #188]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017eb0:	689b      	ldr	r3, [r3, #8]
 8017eb2:	f003 030c 	and.w	r3, r3, #12
 8017eb6:	6862      	ldr	r2, [r4, #4]
 8017eb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8017ebc:	d016      	beq.n	8017eec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017ebe:	f7fe fd4b 	bl	8016958 <HAL_GetTick>
 8017ec2:	1b80      	subs	r0, r0, r6
 8017ec4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017ec8:	4298      	cmp	r0, r3
 8017eca:	d9f0      	bls.n	8017eae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8017ecc:	2003      	movs	r0, #3
 8017ece:	e042      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017ed0:	4a26      	ldr	r2, [pc, #152]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017ed2:	6812      	ldr	r2, [r2, #0]
 8017ed4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017ed8:	d1e0      	bne.n	8017e9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017eda:	2001      	movs	r0, #1
 8017edc:	e03b      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017ede:	4a23      	ldr	r2, [pc, #140]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017ee0:	6812      	ldr	r2, [r2, #0]
 8017ee2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8017ee6:	d1d9      	bne.n	8017e9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017ee8:	2001      	movs	r0, #1
 8017eea:	e034      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017eec:	4b1e      	ldr	r3, [pc, #120]	@ (8017f68 <HAL_RCC_ClockConfig+0x14c>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f003 0307 	and.w	r3, r3, #7
 8017ef4:	42ab      	cmp	r3, r5
 8017ef6:	d907      	bls.n	8017f08 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017ef8:	b2ea      	uxtb	r2, r5
 8017efa:	4b1b      	ldr	r3, [pc, #108]	@ (8017f68 <HAL_RCC_ClockConfig+0x14c>)
 8017efc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	f003 0307 	and.w	r3, r3, #7
 8017f04:	42ab      	cmp	r3, r5
 8017f06:	d12d      	bne.n	8017f64 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017f08:	6823      	ldr	r3, [r4, #0]
 8017f0a:	f013 0f04 	tst.w	r3, #4
 8017f0e:	d006      	beq.n	8017f1e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017f10:	4a16      	ldr	r2, [pc, #88]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017f12:	6893      	ldr	r3, [r2, #8]
 8017f14:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8017f18:	68e1      	ldr	r1, [r4, #12]
 8017f1a:	430b      	orrs	r3, r1
 8017f1c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017f1e:	6823      	ldr	r3, [r4, #0]
 8017f20:	f013 0f08 	tst.w	r3, #8
 8017f24:	d007      	beq.n	8017f36 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017f26:	4a11      	ldr	r2, [pc, #68]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017f28:	6893      	ldr	r3, [r2, #8]
 8017f2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8017f2e:	6921      	ldr	r1, [r4, #16]
 8017f30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017f34:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017f36:	f7ff ff03 	bl	8017d40 <HAL_RCC_GetSysClockFreq>
 8017f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8017f6c <HAL_RCC_ClockConfig+0x150>)
 8017f3c:	689b      	ldr	r3, [r3, #8]
 8017f3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017f42:	4a0b      	ldr	r2, [pc, #44]	@ (8017f70 <HAL_RCC_ClockConfig+0x154>)
 8017f44:	5cd3      	ldrb	r3, [r2, r3]
 8017f46:	40d8      	lsrs	r0, r3
 8017f48:	4b0a      	ldr	r3, [pc, #40]	@ (8017f74 <HAL_RCC_ClockConfig+0x158>)
 8017f4a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8017f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8017f78 <HAL_RCC_ClockConfig+0x15c>)
 8017f4e:	6818      	ldr	r0, [r3, #0]
 8017f50:	f7fa fc62 	bl	8012818 <HAL_InitTick>
  return HAL_OK;
 8017f54:	2000      	movs	r0, #0
}
 8017f56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017f58:	2001      	movs	r0, #1
}
 8017f5a:	4770      	bx	lr
      return HAL_ERROR;
 8017f5c:	2001      	movs	r0, #1
 8017f5e:	e7fa      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8017f60:	2001      	movs	r0, #1
 8017f62:	e7f8      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017f64:	2001      	movs	r0, #1
 8017f66:	e7f6      	b.n	8017f56 <HAL_RCC_ClockConfig+0x13a>
 8017f68:	40023c00 	.word	0x40023c00
 8017f6c:	40023800 	.word	0x40023800
 8017f70:	080379bc 	.word	0x080379bc
 8017f74:	20000018 	.word	0x20000018
 8017f78:	20000108 	.word	0x20000108

08017f7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8017f7c:	4b01      	ldr	r3, [pc, #4]	@ (8017f84 <HAL_RCC_GetHCLKFreq+0x8>)
 8017f7e:	6818      	ldr	r0, [r3, #0]
 8017f80:	4770      	bx	lr
 8017f82:	bf00      	nop
 8017f84:	20000018 	.word	0x20000018

08017f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017f88:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017f8a:	f7ff fff7 	bl	8017f7c <HAL_RCC_GetHCLKFreq>
 8017f8e:	4b04      	ldr	r3, [pc, #16]	@ (8017fa0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8017f90:	689b      	ldr	r3, [r3, #8]
 8017f92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017f96:	4a03      	ldr	r2, [pc, #12]	@ (8017fa4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017f98:	5cd3      	ldrb	r3, [r2, r3]
}
 8017f9a:	40d8      	lsrs	r0, r3
 8017f9c:	bd08      	pop	{r3, pc}
 8017f9e:	bf00      	nop
 8017fa0:	40023800 	.word	0x40023800
 8017fa4:	080379b4 	.word	0x080379b4

08017fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017fa8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017faa:	f7ff ffe7 	bl	8017f7c <HAL_RCC_GetHCLKFreq>
 8017fae:	4b04      	ldr	r3, [pc, #16]	@ (8017fc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8017fb0:	689b      	ldr	r3, [r3, #8]
 8017fb2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017fb6:	4a03      	ldr	r2, [pc, #12]	@ (8017fc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017fb8:	5cd3      	ldrb	r3, [r2, r3]
}
 8017fba:	40d8      	lsrs	r0, r3
 8017fbc:	bd08      	pop	{r3, pc}
 8017fbe:	bf00      	nop
 8017fc0:	40023800 	.word	0x40023800
 8017fc4:	080379b4 	.word	0x080379b4

08017fc8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017fc8:	230f      	movs	r3, #15
 8017fca:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8017ffc <HAL_RCC_GetClockConfig+0x34>)
 8017fce:	689a      	ldr	r2, [r3, #8]
 8017fd0:	f002 0203 	and.w	r2, r2, #3
 8017fd4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017fd6:	689a      	ldr	r2, [r3, #8]
 8017fd8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8017fdc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017fde:	689a      	ldr	r2, [r3, #8]
 8017fe0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8017fe4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017fe6:	689b      	ldr	r3, [r3, #8]
 8017fe8:	08db      	lsrs	r3, r3, #3
 8017fea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8017fee:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017ff0:	4b03      	ldr	r3, [pc, #12]	@ (8018000 <HAL_RCC_GetClockConfig+0x38>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	f003 0307 	and.w	r3, r3, #7
 8017ff8:	600b      	str	r3, [r1, #0]
}
 8017ffa:	4770      	bx	lr
 8017ffc:	40023800 	.word	0x40023800
 8018000:	40023c00 	.word	0x40023c00

08018004 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018004:	b530      	push	{r4, r5, lr}
 8018006:	b083      	sub	sp, #12
 8018008:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801800a:	6803      	ldr	r3, [r0, #0]
 801800c:	f013 0f05 	tst.w	r3, #5
 8018010:	d10e      	bne.n	8018030 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8018012:	6823      	ldr	r3, [r4, #0]
 8018014:	f013 0f02 	tst.w	r3, #2
 8018018:	d138      	bne.n	801808c <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801801a:	6823      	ldr	r3, [r4, #0]
 801801c:	f013 0f08 	tst.w	r3, #8
 8018020:	f000 809d 	beq.w	801815e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8018024:	7d22      	ldrb	r2, [r4, #20]
 8018026:	4b4f      	ldr	r3, [pc, #316]	@ (8018164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8018028:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801802c:	2000      	movs	r0, #0
 801802e:	e097      	b.n	8018160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 8018030:	4b4d      	ldr	r3, [pc, #308]	@ (8018168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8018032:	2200      	movs	r2, #0
 8018034:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8018036:	f7fe fc8f 	bl	8016958 <HAL_GetTick>
 801803a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801803c:	4b4b      	ldr	r3, [pc, #300]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8018044:	d006      	beq.n	8018054 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8018046:	f7fe fc87 	bl	8016958 <HAL_GetTick>
 801804a:	1b43      	subs	r3, r0, r5
 801804c:	2b02      	cmp	r3, #2
 801804e:	d9f5      	bls.n	801803c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8018050:	2003      	movs	r0, #3
 8018052:	e085      	b.n	8018160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8018054:	6863      	ldr	r3, [r4, #4]
 8018056:	68a2      	ldr	r2, [r4, #8]
 8018058:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801805c:	68e2      	ldr	r2, [r4, #12]
 801805e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8018062:	4a42      	ldr	r2, [pc, #264]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018064:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8018068:	4b3f      	ldr	r3, [pc, #252]	@ (8018168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801806a:	2201      	movs	r2, #1
 801806c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 801806e:	f7fe fc73 	bl	8016958 <HAL_GetTick>
 8018072:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8018074:	4b3d      	ldr	r3, [pc, #244]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 801807c:	d1c9      	bne.n	8018012 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801807e:	f7fe fc6b 	bl	8016958 <HAL_GetTick>
 8018082:	1b40      	subs	r0, r0, r5
 8018084:	2802      	cmp	r0, #2
 8018086:	d9f5      	bls.n	8018074 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8018088:	2003      	movs	r0, #3
 801808a:	e069      	b.n	8018160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 801808c:	2300      	movs	r3, #0
 801808e:	9301      	str	r3, [sp, #4]
 8018090:	4b36      	ldr	r3, [pc, #216]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018094:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8018098:	641a      	str	r2, [r3, #64]	@ 0x40
 801809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801809c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80180a0:	9301      	str	r3, [sp, #4]
 80180a2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80180a4:	4a32      	ldr	r2, [pc, #200]	@ (8018170 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80180a6:	6813      	ldr	r3, [r2, #0]
 80180a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80180ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80180ae:	f7fe fc53 	bl	8016958 <HAL_GetTick>
 80180b2:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80180b4:	4b2e      	ldr	r3, [pc, #184]	@ (8018170 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80180bc:	d106      	bne.n	80180cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80180be:	f7fe fc4b 	bl	8016958 <HAL_GetTick>
 80180c2:	1b43      	subs	r3, r0, r5
 80180c4:	2b02      	cmp	r3, #2
 80180c6:	d9f5      	bls.n	80180b4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 80180c8:	2003      	movs	r0, #3
 80180ca:	e049      	b.n	8018160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80180cc:	4b27      	ldr	r3, [pc, #156]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80180ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80180d0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80180d4:	d014      	beq.n	8018100 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80180d6:	6922      	ldr	r2, [r4, #16]
 80180d8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80180dc:	429a      	cmp	r2, r3
 80180de:	d00f      	beq.n	8018100 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80180e0:	4b22      	ldr	r3, [pc, #136]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80180e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80180e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80180e8:	491f      	ldr	r1, [pc, #124]	@ (8018168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80180ea:	2001      	movs	r0, #1
 80180ec:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80180f0:	2000      	movs	r0, #0
 80180f2:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80180f6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80180f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180fa:	f013 0f01 	tst.w	r3, #1
 80180fe:	d112      	bne.n	8018126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8018100:	6923      	ldr	r3, [r4, #16]
 8018102:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8018106:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 801810a:	d01d      	beq.n	8018148 <HAL_RCCEx_PeriphCLKConfig+0x144>
 801810c:	4a17      	ldr	r2, [pc, #92]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801810e:	6893      	ldr	r3, [r2, #8]
 8018110:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8018114:	6093      	str	r3, [r2, #8]
 8018116:	4915      	ldr	r1, [pc, #84]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8018118:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 801811a:	6922      	ldr	r2, [r4, #16]
 801811c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8018120:	4313      	orrs	r3, r2
 8018122:	670b      	str	r3, [r1, #112]	@ 0x70
 8018124:	e779      	b.n	801801a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8018126:	f7fe fc17 	bl	8016958 <HAL_GetTick>
 801812a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801812c:	4b0f      	ldr	r3, [pc, #60]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801812e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018130:	f013 0f02 	tst.w	r3, #2
 8018134:	d1e4      	bne.n	8018100 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018136:	f7fe fc0f 	bl	8016958 <HAL_GetTick>
 801813a:	1b40      	subs	r0, r0, r5
 801813c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018140:	4298      	cmp	r0, r3
 8018142:	d9f3      	bls.n	801812c <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 8018144:	2003      	movs	r0, #3
 8018146:	e00b      	b.n	8018160 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8018148:	4908      	ldr	r1, [pc, #32]	@ (801816c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801814a:	688a      	ldr	r2, [r1, #8]
 801814c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8018150:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8018154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018158:	4313      	orrs	r3, r2
 801815a:	608b      	str	r3, [r1, #8]
 801815c:	e7db      	b.n	8018116 <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 801815e:	2000      	movs	r0, #0
}
 8018160:	b003      	add	sp, #12
 8018162:	bd30      	pop	{r4, r5, pc}
 8018164:	42471000 	.word	0x42471000
 8018168:	42470000 	.word	0x42470000
 801816c:	40023800 	.word	0x40023800
 8018170:	40007000 	.word	0x40007000

08018174 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018174:	b538      	push	{r3, r4, r5, lr}
 8018176:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018178:	6803      	ldr	r3, [r0, #0]
 801817a:	4a0a      	ldr	r2, [pc, #40]	@ (80181a4 <HAL_RTC_WaitForSynchro+0x30>)
 801817c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801817e:	f7fe fbeb 	bl	8016958 <HAL_GetTick>
 8018182:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018184:	6823      	ldr	r3, [r4, #0]
 8018186:	68db      	ldr	r3, [r3, #12]
 8018188:	f013 0f20 	tst.w	r3, #32
 801818c:	d107      	bne.n	801819e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801818e:	f7fe fbe3 	bl	8016958 <HAL_GetTick>
 8018192:	1b40      	subs	r0, r0, r5
 8018194:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8018198:	d9f4      	bls.n	8018184 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 801819a:	2003      	movs	r0, #3
 801819c:	e000      	b.n	80181a0 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 801819e:	2000      	movs	r0, #0
}
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	bf00      	nop
 80181a4:	00013f5f 	.word	0x00013f5f

080181a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80181a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80181aa:	6803      	ldr	r3, [r0, #0]
 80181ac:	68da      	ldr	r2, [r3, #12]
 80181ae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80181b2:	d002      	beq.n	80181ba <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80181b4:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80181b6:	4628      	mov	r0, r5
 80181b8:	bd70      	pop	{r4, r5, r6, pc}
 80181ba:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80181bc:	68da      	ldr	r2, [r3, #12]
 80181be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80181c2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80181c4:	f7fe fbc8 	bl	8016958 <HAL_GetTick>
 80181c8:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80181ca:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80181cc:	6823      	ldr	r3, [r4, #0]
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80181d4:	d1ef      	bne.n	80181b6 <RTC_EnterInitMode+0xe>
 80181d6:	2d00      	cmp	r5, #0
 80181d8:	d1ed      	bne.n	80181b6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80181da:	f7fe fbbd 	bl	8016958 <HAL_GetTick>
 80181de:	1b83      	subs	r3, r0, r6
 80181e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80181e4:	d9f2      	bls.n	80181cc <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80181e6:	2304      	movs	r3, #4
 80181e8:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80181ea:	2501      	movs	r5, #1
 80181ec:	e7ee      	b.n	80181cc <RTC_EnterInitMode+0x24>

080181ee <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80181ee:	6802      	ldr	r2, [r0, #0]
 80181f0:	68d3      	ldr	r3, [r2, #12]
 80181f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80181f6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80181f8:	6803      	ldr	r3, [r0, #0]
 80181fa:	689b      	ldr	r3, [r3, #8]
 80181fc:	f013 0f20 	tst.w	r3, #32
 8018200:	d001      	beq.n	8018206 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8018202:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8018204:	4770      	bx	lr
{
 8018206:	b510      	push	{r4, lr}
 8018208:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801820a:	f7ff ffb3 	bl	8018174 <HAL_RTC_WaitForSynchro>
 801820e:	b110      	cbz	r0, 8018216 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018210:	2304      	movs	r3, #4
 8018212:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8018214:	2001      	movs	r0, #1
}
 8018216:	bd10      	pop	{r4, pc}

08018218 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8018218:	2800      	cmp	r0, #0
 801821a:	d04a      	beq.n	80182b2 <HAL_RTC_Init+0x9a>
{
 801821c:	b510      	push	{r4, lr}
 801821e:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8018220:	7f43      	ldrb	r3, [r0, #29]
 8018222:	b153      	cbz	r3, 801823a <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018224:	2302      	movs	r3, #2
 8018226:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8018228:	6823      	ldr	r3, [r4, #0]
 801822a:	68da      	ldr	r2, [r3, #12]
 801822c:	f012 0f10 	tst.w	r2, #16
 8018230:	d007      	beq.n	8018242 <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 8018232:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8018234:	2301      	movs	r3, #1
 8018236:	7763      	strb	r3, [r4, #29]
}
 8018238:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 801823a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801823c:	f7fa fa00 	bl	8012640 <HAL_RTC_MspInit>
 8018240:	e7f0      	b.n	8018224 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018242:	22ca      	movs	r2, #202	@ 0xca
 8018244:	625a      	str	r2, [r3, #36]	@ 0x24
 8018246:	6823      	ldr	r3, [r4, #0]
 8018248:	2253      	movs	r2, #83	@ 0x53
 801824a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 801824c:	4620      	mov	r0, r4
 801824e:	f7ff ffab 	bl	80181a8 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8018252:	b128      	cbz	r0, 8018260 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018254:	6823      	ldr	r3, [r4, #0]
 8018256:	22ff      	movs	r2, #255	@ 0xff
 8018258:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 801825a:	2800      	cmp	r0, #0
 801825c:	d1ec      	bne.n	8018238 <HAL_RTC_Init+0x20>
 801825e:	e7e9      	b.n	8018234 <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8018260:	6822      	ldr	r2, [r4, #0]
 8018262:	6893      	ldr	r3, [r2, #8]
 8018264:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801826c:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801826e:	6821      	ldr	r1, [r4, #0]
 8018270:	688a      	ldr	r2, [r1, #8]
 8018272:	6863      	ldr	r3, [r4, #4]
 8018274:	6920      	ldr	r0, [r4, #16]
 8018276:	4303      	orrs	r3, r0
 8018278:	6960      	ldr	r0, [r4, #20]
 801827a:	4303      	orrs	r3, r0
 801827c:	4313      	orrs	r3, r2
 801827e:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8018280:	6823      	ldr	r3, [r4, #0]
 8018282:	68e2      	ldr	r2, [r4, #12]
 8018284:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8018286:	6822      	ldr	r2, [r4, #0]
 8018288:	6913      	ldr	r3, [r2, #16]
 801828a:	68a1      	ldr	r1, [r4, #8]
 801828c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018290:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8018292:	4620      	mov	r0, r4
 8018294:	f7ff ffab 	bl	80181ee <RTC_ExitInitMode>
    if (status == HAL_OK)
 8018298:	2800      	cmp	r0, #0
 801829a:	d1db      	bne.n	8018254 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 801829c:	6822      	ldr	r2, [r4, #0]
 801829e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80182a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80182a4:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80182a6:	6822      	ldr	r2, [r4, #0]
 80182a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80182aa:	69a1      	ldr	r1, [r4, #24]
 80182ac:	430b      	orrs	r3, r1
 80182ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80182b0:	e7d0      	b.n	8018254 <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 80182b2:	2001      	movs	r0, #1
}
 80182b4:	4770      	bx	lr

080182b6 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 80182b6:	2300      	movs	r3, #0

  while (number >= 10U)
 80182b8:	e002      	b.n	80182c0 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80182ba:	3301      	adds	r3, #1
    number -= 10U;
 80182bc:	380a      	subs	r0, #10
 80182be:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 80182c0:	2809      	cmp	r0, #9
 80182c2:	d8fa      	bhi.n	80182ba <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80182c4:	011b      	lsls	r3, r3, #4
 80182c6:	b2db      	uxtb	r3, r3
}
 80182c8:	4318      	orrs	r0, r3
 80182ca:	4770      	bx	lr

080182cc <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80182cc:	7f03      	ldrb	r3, [r0, #28]
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d05a      	beq.n	8018388 <HAL_RTC_SetTime+0xbc>
{
 80182d2:	b570      	push	{r4, r5, r6, lr}
 80182d4:	4604      	mov	r4, r0
 80182d6:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 80182d8:	2301      	movs	r3, #1
 80182da:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80182dc:	2302      	movs	r3, #2
 80182de:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80182e0:	bb32      	cbnz	r2, 8018330 <HAL_RTC_SetTime+0x64>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80182e2:	6803      	ldr	r3, [r0, #0]
 80182e4:	689b      	ldr	r3, [r3, #8]
 80182e6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80182ea:	d101      	bne.n	80182f0 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 80182ec:	2300      	movs	r3, #0
 80182ee:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80182f0:	7830      	ldrb	r0, [r6, #0]
 80182f2:	f7ff ffe0 	bl	80182b6 <RTC_ByteToBcd2>
 80182f6:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80182f8:	7870      	ldrb	r0, [r6, #1]
 80182fa:	f7ff ffdc 	bl	80182b6 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80182fe:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8018302:	78b0      	ldrb	r0, [r6, #2]
 8018304:	f7ff ffd7 	bl	80182b6 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018308:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801830a:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801830c:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018310:	6823      	ldr	r3, [r4, #0]
 8018312:	22ca      	movs	r2, #202	@ 0xca
 8018314:	625a      	str	r2, [r3, #36]	@ 0x24
 8018316:	6823      	ldr	r3, [r4, #0]
 8018318:	2253      	movs	r2, #83	@ 0x53
 801831a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 801831c:	4620      	mov	r0, r4
 801831e:	f7ff ff43 	bl	80181a8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8018322:	b1b8      	cbz	r0, 8018354 <HAL_RTC_SetTime+0x88>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018324:	6823      	ldr	r3, [r4, #0]
 8018326:	22ff      	movs	r2, #255	@ 0xff
 8018328:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 801832a:	2300      	movs	r3, #0
 801832c:	7723      	strb	r3, [r4, #28]
}
 801832e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018330:	6803      	ldr	r3, [r0, #0]
 8018332:	689b      	ldr	r3, [r3, #8]
 8018334:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018338:	d101      	bne.n	801833e <HAL_RTC_SetTime+0x72>
      sTime->TimeFormat = 0x00U;
 801833a:	2300      	movs	r3, #0
 801833c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801833e:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8018340:	7875      	ldrb	r5, [r6, #1]
 8018342:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018344:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8018348:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801834a:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801834c:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801834e:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 8018352:	e7dd      	b.n	8018310 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8018354:	6823      	ldr	r3, [r4, #0]
 8018356:	f005 357f 	and.w	r5, r5, #2139062143	@ 0x7f7f7f7f
 801835a:	f025 45fe 	bic.w	r5, r5, #2130706432	@ 0x7f000000
 801835e:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8018360:	6822      	ldr	r2, [r4, #0]
 8018362:	6893      	ldr	r3, [r2, #8]
 8018364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8018368:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801836a:	6821      	ldr	r1, [r4, #0]
 801836c:	688b      	ldr	r3, [r1, #8]
 801836e:	68f2      	ldr	r2, [r6, #12]
 8018370:	6930      	ldr	r0, [r6, #16]
 8018372:	4302      	orrs	r2, r0
 8018374:	4313      	orrs	r3, r2
 8018376:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8018378:	4620      	mov	r0, r4
 801837a:	f7ff ff38 	bl	80181ee <RTC_ExitInitMode>
  if (status == HAL_OK)
 801837e:	2800      	cmp	r0, #0
 8018380:	d1d0      	bne.n	8018324 <HAL_RTC_SetTime+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 8018382:	2301      	movs	r3, #1
 8018384:	7763      	strb	r3, [r4, #29]
 8018386:	e7cd      	b.n	8018324 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8018388:	2002      	movs	r0, #2
}
 801838a:	4770      	bx	lr

0801838c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 801838c:	7f03      	ldrb	r3, [r0, #28]
 801838e:	2b01      	cmp	r3, #1
 8018390:	d048      	beq.n	8018424 <HAL_RTC_SetDate+0x98>
{
 8018392:	b570      	push	{r4, r5, r6, lr}
 8018394:	4604      	mov	r4, r0
 8018396:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8018398:	2301      	movs	r3, #1
 801839a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801839c:	2302      	movs	r3, #2
 801839e:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80183a0:	b1ca      	cbz	r2, 80183d6 <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80183a2:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80183a4:	784d      	ldrb	r5, [r1, #1]
 80183a6:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80183a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 80183ac:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80183ae:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80183b0:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80183b2:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80183b6:	6823      	ldr	r3, [r4, #0]
 80183b8:	22ca      	movs	r2, #202	@ 0xca
 80183ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80183bc:	6823      	ldr	r3, [r4, #0]
 80183be:	2253      	movs	r2, #83	@ 0x53
 80183c0:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80183c2:	4620      	mov	r0, r4
 80183c4:	f7ff fef0 	bl	80181a8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80183c8:	b1f0      	cbz	r0, 8018408 <HAL_RTC_SetDate+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	22ff      	movs	r2, #255	@ 0xff
 80183ce:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80183d0:	2300      	movs	r3, #0
 80183d2:	7723      	strb	r3, [r4, #28]
}
 80183d4:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80183d6:	784b      	ldrb	r3, [r1, #1]
 80183d8:	f013 0f10 	tst.w	r3, #16
 80183dc:	d003      	beq.n	80183e6 <HAL_RTC_SetDate+0x5a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80183de:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80183e2:	330a      	adds	r3, #10
 80183e4:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80183e6:	78f0      	ldrb	r0, [r6, #3]
 80183e8:	f7ff ff65 	bl	80182b6 <RTC_ByteToBcd2>
 80183ec:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80183ee:	7870      	ldrb	r0, [r6, #1]
 80183f0:	f7ff ff61 	bl	80182b6 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80183f4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80183f8:	78b0      	ldrb	r0, [r6, #2]
 80183fa:	f7ff ff5c 	bl	80182b6 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80183fe:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8018400:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018402:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 8018406:	e7d6      	b.n	80183b6 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8018408:	6823      	ldr	r3, [r4, #0]
 801840a:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 801840e:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 8018412:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8018414:	4620      	mov	r0, r4
 8018416:	f7ff feea 	bl	80181ee <RTC_ExitInitMode>
  if (status == HAL_OK)
 801841a:	2800      	cmp	r0, #0
 801841c:	d1d5      	bne.n	80183ca <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 801841e:	2301      	movs	r3, #1
 8018420:	7763      	strb	r3, [r4, #29]
 8018422:	e7d2      	b.n	80183ca <HAL_RTC_SetDate+0x3e>
  __HAL_LOCK(hrtc);
 8018424:	2002      	movs	r0, #2
}
 8018426:	4770      	bx	lr

08018428 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018428:	0903      	lsrs	r3, r0, #4
 801842a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801842e:	f000 000f 	and.w	r0, r0, #15
 8018432:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8018436:	b2c0      	uxtb	r0, r0
 8018438:	4770      	bx	lr

0801843a <HAL_RTC_GetTime>:
{
 801843a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801843c:	6803      	ldr	r3, [r0, #0]
 801843e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018440:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8018442:	6803      	ldr	r3, [r0, #0]
 8018444:	691b      	ldr	r3, [r3, #16]
 8018446:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801844a:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801844c:	6803      	ldr	r3, [r0, #0]
 801844e:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8018450:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8018454:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018456:	f3c3 2606 	ubfx	r6, r3, #8, #7
 801845a:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801845c:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8018460:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8018462:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8018466:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8018468:	b95a      	cbnz	r2, 8018482 <HAL_RTC_GetTime+0x48>
 801846a:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801846c:	f7ff ffdc 	bl	8018428 <RTC_Bcd2ToByte>
 8018470:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018472:	4630      	mov	r0, r6
 8018474:	f7ff ffd8 	bl	8018428 <RTC_Bcd2ToByte>
 8018478:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801847a:	4628      	mov	r0, r5
 801847c:	f7ff ffd4 	bl	8018428 <RTC_Bcd2ToByte>
 8018480:	70a0      	strb	r0, [r4, #2]
}
 8018482:	2000      	movs	r0, #0
 8018484:	bd70      	pop	{r4, r5, r6, pc}

08018486 <HAL_RTC_GetDate>:
{
 8018486:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8018488:	6803      	ldr	r3, [r0, #0]
 801848a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801848c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8018490:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018492:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8018496:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018498:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 801849c:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801849e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80184a2:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80184a4:	b95a      	cbnz	r2, 80184be <HAL_RTC_GetDate+0x38>
 80184a6:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80184a8:	f7ff ffbe 	bl	8018428 <RTC_Bcd2ToByte>
 80184ac:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80184ae:	4630      	mov	r0, r6
 80184b0:	f7ff ffba 	bl	8018428 <RTC_Bcd2ToByte>
 80184b4:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80184b6:	4628      	mov	r0, r5
 80184b8:	f7ff ffb6 	bl	8018428 <RTC_Bcd2ToByte>
 80184bc:	70a0      	strb	r0, [r4, #2]
}
 80184be:	2000      	movs	r0, #0
 80184c0:	bd70      	pop	{r4, r5, r6, pc}

080184c2 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80184c2:	6803      	ldr	r3, [r0, #0]
 80184c4:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80184c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80184ca:	4770      	bx	lr

080184cc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80184d0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80184d4:	4770      	bx	lr
	...

080184d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80184d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184dc:	b082      	sub	sp, #8
 80184de:	4605      	mov	r5, r0
 80184e0:	4688      	mov	r8, r1
 80184e2:	4617      	mov	r7, r2
 80184e4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80184e6:	f7fe fa37 	bl	8016958 <HAL_GetTick>
 80184ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80184ec:	1a1b      	subs	r3, r3, r0
 80184ee:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80184f2:	f7fe fa31 	bl	8016958 <HAL_GetTick>
 80184f6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80184f8:	4b28      	ldr	r3, [pc, #160]	@ (801859c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8018500:	fb09 f303 	mul.w	r3, r9, r3
 8018504:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018506:	682b      	ldr	r3, [r5, #0]
 8018508:	689c      	ldr	r4, [r3, #8]
 801850a:	ea38 0404 	bics.w	r4, r8, r4
 801850e:	bf0c      	ite	eq
 8018510:	2301      	moveq	r3, #1
 8018512:	2300      	movne	r3, #0
 8018514:	42bb      	cmp	r3, r7
 8018516:	d03d      	beq.n	8018594 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018518:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801851c:	d0f3      	beq.n	8018506 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801851e:	f7fe fa1b 	bl	8016958 <HAL_GetTick>
 8018522:	eba0 000a 	sub.w	r0, r0, sl
 8018526:	4548      	cmp	r0, r9
 8018528:	d207      	bcs.n	801853a <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801852a:	9a01      	ldr	r2, [sp, #4]
 801852c:	b102      	cbz	r2, 8018530 <SPI_WaitFlagStateUntilTimeout+0x58>
 801852e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8018530:	9b01      	ldr	r3, [sp, #4]
 8018532:	3b01      	subs	r3, #1
 8018534:	9301      	str	r3, [sp, #4]
 8018536:	4691      	mov	r9, r2
 8018538:	e7e5      	b.n	8018506 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801853a:	682a      	ldr	r2, [r5, #0]
 801853c:	6853      	ldr	r3, [r2, #4]
 801853e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8018542:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018544:	686b      	ldr	r3, [r5, #4]
 8018546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801854a:	d00b      	beq.n	8018564 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801854c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801854e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018552:	d014      	beq.n	801857e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8018554:	2301      	movs	r3, #1
 8018556:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801855a:	2300      	movs	r3, #0
 801855c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018560:	2003      	movs	r0, #3
 8018562:	e018      	b.n	8018596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018564:	68ab      	ldr	r3, [r5, #8]
 8018566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801856a:	d002      	beq.n	8018572 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801856c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018570:	d1ec      	bne.n	801854c <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8018572:	682a      	ldr	r2, [r5, #0]
 8018574:	6813      	ldr	r3, [r2, #0]
 8018576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801857a:	6013      	str	r3, [r2, #0]
 801857c:	e7e6      	b.n	801854c <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 801857e:	682a      	ldr	r2, [r5, #0]
 8018580:	6813      	ldr	r3, [r2, #0]
 8018582:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018586:	6013      	str	r3, [r2, #0]
 8018588:	682a      	ldr	r2, [r5, #0]
 801858a:	6813      	ldr	r3, [r2, #0]
 801858c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018590:	6013      	str	r3, [r2, #0]
 8018592:	e7df      	b.n	8018554 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8018594:	2000      	movs	r0, #0
}
 8018596:	b002      	add	sp, #8
 8018598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801859c:	20000018 	.word	0x20000018

080185a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80185a0:	b570      	push	{r4, r5, r6, lr}
 80185a2:	b084      	sub	sp, #16
 80185a4:	4604      	mov	r4, r0
 80185a6:	460d      	mov	r5, r1
 80185a8:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80185aa:	9200      	str	r2, [sp, #0]
 80185ac:	460b      	mov	r3, r1
 80185ae:	2201      	movs	r2, #1
 80185b0:	2102      	movs	r1, #2
 80185b2:	f7ff ff91 	bl	80184d8 <SPI_WaitFlagStateUntilTimeout>
 80185b6:	b9d0      	cbnz	r0, 80185ee <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80185b8:	4b17      	ldr	r3, [pc, #92]	@ (8018618 <SPI_EndRxTxTransaction+0x78>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	4a17      	ldr	r2, [pc, #92]	@ (801861c <SPI_EndRxTxTransaction+0x7c>)
 80185be:	fba2 2303 	umull	r2, r3, r2, r3
 80185c2:	0d5b      	lsrs	r3, r3, #21
 80185c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80185c8:	fb02 f303 	mul.w	r3, r2, r3
 80185cc:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80185ce:	6863      	ldr	r3, [r4, #4]
 80185d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80185d4:	d011      	beq.n	80185fa <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80185d6:	9b03      	ldr	r3, [sp, #12]
 80185d8:	b13b      	cbz	r3, 80185ea <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80185da:	9b03      	ldr	r3, [sp, #12]
 80185dc:	3b01      	subs	r3, #1
 80185de:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80185e0:	6823      	ldr	r3, [r4, #0]
 80185e2:	689b      	ldr	r3, [r3, #8]
 80185e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80185e8:	d1f5      	bne.n	80185d6 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80185ea:	b004      	add	sp, #16
 80185ec:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80185ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80185f0:	f043 0320 	orr.w	r3, r3, #32
 80185f4:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80185f6:	2003      	movs	r0, #3
 80185f8:	e7f7      	b.n	80185ea <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80185fa:	9600      	str	r6, [sp, #0]
 80185fc:	462b      	mov	r3, r5
 80185fe:	2200      	movs	r2, #0
 8018600:	2180      	movs	r1, #128	@ 0x80
 8018602:	4620      	mov	r0, r4
 8018604:	f7ff ff68 	bl	80184d8 <SPI_WaitFlagStateUntilTimeout>
 8018608:	2800      	cmp	r0, #0
 801860a:	d0ee      	beq.n	80185ea <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801860c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801860e:	f043 0320 	orr.w	r3, r3, #32
 8018612:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018614:	2003      	movs	r0, #3
 8018616:	e7e8      	b.n	80185ea <SPI_EndRxTxTransaction+0x4a>
 8018618:	20000018 	.word	0x20000018
 801861c:	165e9f81 	.word	0x165e9f81

08018620 <SPI_EndRxTransaction>:
{
 8018620:	b510      	push	{r4, lr}
 8018622:	b082      	sub	sp, #8
 8018624:	4604      	mov	r4, r0
 8018626:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018628:	6841      	ldr	r1, [r0, #4]
 801862a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801862e:	d014      	beq.n	801865a <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018630:	6861      	ldr	r1, [r4, #4]
 8018632:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8018636:	d12a      	bne.n	801868e <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8018638:	68a1      	ldr	r1, [r4, #8]
 801863a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801863e:	d019      	beq.n	8018674 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018640:	9200      	str	r2, [sp, #0]
 8018642:	2200      	movs	r2, #0
 8018644:	2180      	movs	r1, #128	@ 0x80
 8018646:	4620      	mov	r0, r4
 8018648:	f7ff ff46 	bl	80184d8 <SPI_WaitFlagStateUntilTimeout>
 801864c:	b330      	cbz	r0, 801869c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801864e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018650:	f043 0320 	orr.w	r3, r3, #32
 8018654:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018656:	2003      	movs	r0, #3
 8018658:	e020      	b.n	801869c <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801865a:	6881      	ldr	r1, [r0, #8]
 801865c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018660:	d002      	beq.n	8018668 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018662:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8018666:	d1e3      	bne.n	8018630 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8018668:	6820      	ldr	r0, [r4, #0]
 801866a:	6801      	ldr	r1, [r0, #0]
 801866c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8018670:	6001      	str	r1, [r0, #0]
 8018672:	e7dd      	b.n	8018630 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018674:	9200      	str	r2, [sp, #0]
 8018676:	2200      	movs	r2, #0
 8018678:	2101      	movs	r1, #1
 801867a:	4620      	mov	r0, r4
 801867c:	f7ff ff2c 	bl	80184d8 <SPI_WaitFlagStateUntilTimeout>
 8018680:	b160      	cbz	r0, 801869c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018682:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018684:	f043 0320 	orr.w	r3, r3, #32
 8018688:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 801868a:	2003      	movs	r0, #3
 801868c:	e006      	b.n	801869c <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801868e:	9200      	str	r2, [sp, #0]
 8018690:	2200      	movs	r2, #0
 8018692:	2101      	movs	r1, #1
 8018694:	4620      	mov	r0, r4
 8018696:	f7ff ff1f 	bl	80184d8 <SPI_WaitFlagStateUntilTimeout>
 801869a:	b908      	cbnz	r0, 80186a0 <SPI_EndRxTransaction+0x80>
}
 801869c:	b002      	add	sp, #8
 801869e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80186a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80186a2:	f043 0320 	orr.w	r3, r3, #32
 80186a6:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80186a8:	2003      	movs	r0, #3
 80186aa:	e7f7      	b.n	801869c <SPI_EndRxTransaction+0x7c>

080186ac <HAL_SPI_Init>:
  if (hspi == NULL)
 80186ac:	2800      	cmp	r0, #0
 80186ae:	d05a      	beq.n	8018766 <HAL_SPI_Init+0xba>
{
 80186b0:	b510      	push	{r4, lr}
 80186b2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80186b4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80186b6:	b933      	cbnz	r3, 80186c6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80186b8:	6843      	ldr	r3, [r0, #4]
 80186ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80186be:	d005      	beq.n	80186cc <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80186c0:	2300      	movs	r3, #0
 80186c2:	61c3      	str	r3, [r0, #28]
 80186c4:	e002      	b.n	80186cc <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80186c6:	2300      	movs	r3, #0
 80186c8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80186ca:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80186cc:	2300      	movs	r3, #0
 80186ce:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80186d0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d040      	beq.n	801875a <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80186d8:	2302      	movs	r3, #2
 80186da:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80186de:	6822      	ldr	r2, [r4, #0]
 80186e0:	6813      	ldr	r3, [r2, #0]
 80186e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80186e6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80186e8:	6863      	ldr	r3, [r4, #4]
 80186ea:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80186ee:	68a2      	ldr	r2, [r4, #8]
 80186f0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80186f4:	4313      	orrs	r3, r2
 80186f6:	68e2      	ldr	r2, [r4, #12]
 80186f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80186fc:	4313      	orrs	r3, r2
 80186fe:	6922      	ldr	r2, [r4, #16]
 8018700:	f002 0202 	and.w	r2, r2, #2
 8018704:	4313      	orrs	r3, r2
 8018706:	6962      	ldr	r2, [r4, #20]
 8018708:	f002 0201 	and.w	r2, r2, #1
 801870c:	4313      	orrs	r3, r2
 801870e:	69a2      	ldr	r2, [r4, #24]
 8018710:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8018714:	4313      	orrs	r3, r2
 8018716:	69e2      	ldr	r2, [r4, #28]
 8018718:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 801871c:	4313      	orrs	r3, r2
 801871e:	6a22      	ldr	r2, [r4, #32]
 8018720:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8018724:	4313      	orrs	r3, r2
 8018726:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018728:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 801872c:	6821      	ldr	r1, [r4, #0]
 801872e:	4313      	orrs	r3, r2
 8018730:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8018732:	8b63      	ldrh	r3, [r4, #26]
 8018734:	f003 0304 	and.w	r3, r3, #4
 8018738:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801873a:	f002 0210 	and.w	r2, r2, #16
 801873e:	6821      	ldr	r1, [r4, #0]
 8018740:	4313      	orrs	r3, r2
 8018742:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018744:	6822      	ldr	r2, [r4, #0]
 8018746:	69d3      	ldr	r3, [r2, #28]
 8018748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801874c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801874e:	2000      	movs	r0, #0
 8018750:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8018752:	2301      	movs	r3, #1
 8018754:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8018758:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 801875a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 801875e:	4620      	mov	r0, r4
 8018760:	f7f9 ffd6 	bl	8012710 <HAL_SPI_MspInit>
 8018764:	e7b8      	b.n	80186d8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8018766:	2001      	movs	r0, #1
}
 8018768:	4770      	bx	lr

0801876a <HAL_SPI_Transmit>:
{
 801876a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801876e:	b083      	sub	sp, #12
 8018770:	4604      	mov	r4, r0
 8018772:	4689      	mov	r9, r1
 8018774:	4690      	mov	r8, r2
 8018776:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8018778:	f7fe f8ee 	bl	8016958 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 801877c:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8018780:	b2f6      	uxtb	r6, r6
 8018782:	2e01      	cmp	r6, #1
 8018784:	f040 80cc 	bne.w	8018920 <HAL_SPI_Transmit+0x1b6>
 8018788:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 801878a:	f1b9 0f00 	cmp.w	r9, #0
 801878e:	f000 80c8 	beq.w	8018922 <HAL_SPI_Transmit+0x1b8>
 8018792:	f1b8 0f00 	cmp.w	r8, #0
 8018796:	f000 80c4 	beq.w	8018922 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 801879a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801879e:	2b01      	cmp	r3, #1
 80187a0:	f000 80c3 	beq.w	801892a <HAL_SPI_Transmit+0x1c0>
 80187a4:	2301      	movs	r3, #1
 80187a6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80187aa:	2303      	movs	r3, #3
 80187ac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80187b0:	2300      	movs	r3, #0
 80187b2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80187b4:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80187b8:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80187bc:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80187c0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80187c2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80187c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80187c6:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80187c8:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80187ca:	68a3      	ldr	r3, [r4, #8]
 80187cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80187d0:	d01e      	beq.n	8018810 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80187d2:	6823      	ldr	r3, [r4, #0]
 80187d4:	681a      	ldr	r2, [r3, #0]
 80187d6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80187da:	d103      	bne.n	80187e4 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80187dc:	681a      	ldr	r2, [r3, #0]
 80187de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80187e2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80187e4:	68e3      	ldr	r3, [r4, #12]
 80187e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80187ea:	d01c      	beq.n	8018826 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80187ec:	6863      	ldr	r3, [r4, #4]
 80187ee:	b113      	cbz	r3, 80187f6 <HAL_SPI_Transmit+0x8c>
 80187f0:	f1b8 0f01 	cmp.w	r8, #1
 80187f4:	d15f      	bne.n	80188b6 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80187f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	7812      	ldrb	r2, [r2, #0]
 80187fc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80187fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018800:	3301      	adds	r3, #1
 8018802:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018804:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018806:	b29b      	uxth	r3, r3
 8018808:	3b01      	subs	r3, #1
 801880a:	b29b      	uxth	r3, r3
 801880c:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801880e:	e052      	b.n	80188b6 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8018810:	6822      	ldr	r2, [r4, #0]
 8018812:	6813      	ldr	r3, [r2, #0]
 8018814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018818:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 801881a:	6822      	ldr	r2, [r4, #0]
 801881c:	6813      	ldr	r3, [r2, #0]
 801881e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018822:	6013      	str	r3, [r2, #0]
 8018824:	e7d5      	b.n	80187d2 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018826:	6863      	ldr	r3, [r4, #4]
 8018828:	b113      	cbz	r3, 8018830 <HAL_SPI_Transmit+0xc6>
 801882a:	f1b8 0f01 	cmp.w	r8, #1
 801882e:	d115      	bne.n	801885c <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018830:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018832:	6823      	ldr	r3, [r4, #0]
 8018834:	8812      	ldrh	r2, [r2, #0]
 8018836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018838:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801883a:	3302      	adds	r3, #2
 801883c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801883e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018840:	b29b      	uxth	r3, r3
 8018842:	3b01      	subs	r3, #1
 8018844:	b29b      	uxth	r3, r3
 8018846:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018848:	e008      	b.n	801885c <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801884a:	f7fe f885 	bl	8016958 <HAL_GetTick>
 801884e:	1bc0      	subs	r0, r0, r7
 8018850:	42a8      	cmp	r0, r5
 8018852:	d302      	bcc.n	801885a <HAL_SPI_Transmit+0xf0>
 8018854:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018858:	d115      	bne.n	8018886 <HAL_SPI_Transmit+0x11c>
 801885a:	b1a5      	cbz	r5, 8018886 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 801885c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801885e:	b29b      	uxth	r3, r3
 8018860:	2b00      	cmp	r3, #0
 8018862:	d042      	beq.n	80188ea <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	689a      	ldr	r2, [r3, #8]
 8018868:	f012 0f02 	tst.w	r2, #2
 801886c:	d0ed      	beq.n	801884a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801886e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018870:	8812      	ldrh	r2, [r2, #0]
 8018872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018874:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018876:	3302      	adds	r3, #2
 8018878:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801887a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801887c:	b29b      	uxth	r3, r3
 801887e:	3b01      	subs	r3, #1
 8018880:	b29b      	uxth	r3, r3
 8018882:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018884:	e7ea      	b.n	801885c <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8018886:	2301      	movs	r3, #1
 8018888:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801888c:	2300      	movs	r3, #0
 801888e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018892:	2603      	movs	r6, #3
 8018894:	e045      	b.n	8018922 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018896:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018898:	7812      	ldrb	r2, [r2, #0]
 801889a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801889c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801889e:	3301      	adds	r3, #1
 80188a0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80188a2:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80188a6:	fa1f fc8c 	uxth.w	ip, ip
 80188aa:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80188ae:	fa1f fc8c 	uxth.w	ip, ip
 80188b2:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80188b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	b1b3      	cbz	r3, 80188ea <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80188bc:	6823      	ldr	r3, [r4, #0]
 80188be:	689a      	ldr	r2, [r3, #8]
 80188c0:	f012 0f02 	tst.w	r2, #2
 80188c4:	d1e7      	bne.n	8018896 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80188c6:	f7fe f847 	bl	8016958 <HAL_GetTick>
 80188ca:	1bc0      	subs	r0, r0, r7
 80188cc:	42a8      	cmp	r0, r5
 80188ce:	d302      	bcc.n	80188d6 <HAL_SPI_Transmit+0x16c>
 80188d0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80188d4:	d101      	bne.n	80188da <HAL_SPI_Transmit+0x170>
 80188d6:	2d00      	cmp	r5, #0
 80188d8:	d1ed      	bne.n	80188b6 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80188da:	2301      	movs	r3, #1
 80188dc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80188e0:	2300      	movs	r3, #0
 80188e2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80188e6:	2603      	movs	r6, #3
 80188e8:	e01b      	b.n	8018922 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80188ea:	463a      	mov	r2, r7
 80188ec:	4629      	mov	r1, r5
 80188ee:	4620      	mov	r0, r4
 80188f0:	f7ff fe56 	bl	80185a0 <SPI_EndRxTxTransaction>
 80188f4:	b108      	cbz	r0, 80188fa <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80188f6:	2320      	movs	r3, #32
 80188f8:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80188fa:	68a3      	ldr	r3, [r4, #8]
 80188fc:	b933      	cbnz	r3, 801890c <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	6823      	ldr	r3, [r4, #0]
 8018902:	68da      	ldr	r2, [r3, #12]
 8018904:	9201      	str	r2, [sp, #4]
 8018906:	689b      	ldr	r3, [r3, #8]
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 801890c:	2301      	movs	r3, #1
 801890e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018912:	2300      	movs	r3, #0
 8018914:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801891a:	b913      	cbnz	r3, 8018922 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 801891c:	2600      	movs	r6, #0
 801891e:	e000      	b.n	8018922 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8018920:	2602      	movs	r6, #2
}
 8018922:	4630      	mov	r0, r6
 8018924:	b003      	add	sp, #12
 8018926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801892a:	2602      	movs	r6, #2
 801892c:	e7f9      	b.n	8018922 <HAL_SPI_Transmit+0x1b8>

0801892e <HAL_SPI_TransmitReceive>:
{
 801892e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018932:	b083      	sub	sp, #12
 8018934:	4604      	mov	r4, r0
 8018936:	4688      	mov	r8, r1
 8018938:	4691      	mov	r9, r2
 801893a:	461f      	mov	r7, r3
 801893c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801893e:	f7fe f80b 	bl	8016958 <HAL_GetTick>
 8018942:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8018944:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018948:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 801894a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801894c:	2b01      	cmp	r3, #1
 801894e:	d00a      	beq.n	8018966 <HAL_SPI_TransmitReceive+0x38>
 8018950:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8018954:	f040 8105 	bne.w	8018b62 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8018958:	68a2      	ldr	r2, [r4, #8]
 801895a:	2a00      	cmp	r2, #0
 801895c:	f040 8105 	bne.w	8018b6a <HAL_SPI_TransmitReceive+0x23c>
 8018960:	2b04      	cmp	r3, #4
 8018962:	f040 8104 	bne.w	8018b6e <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018966:	f1b8 0f00 	cmp.w	r8, #0
 801896a:	f000 8102 	beq.w	8018b72 <HAL_SPI_TransmitReceive+0x244>
 801896e:	f1b9 0f00 	cmp.w	r9, #0
 8018972:	f000 8100 	beq.w	8018b76 <HAL_SPI_TransmitReceive+0x248>
 8018976:	2f00      	cmp	r7, #0
 8018978:	f000 80ff 	beq.w	8018b7a <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 801897c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8018980:	2b01      	cmp	r3, #1
 8018982:	f000 80fc 	beq.w	8018b7e <HAL_SPI_TransmitReceive+0x250>
 8018986:	2301      	movs	r3, #1
 8018988:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801898c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018990:	b2db      	uxtb	r3, r3
 8018992:	2b04      	cmp	r3, #4
 8018994:	d002      	beq.n	801899c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018996:	2305      	movs	r3, #5
 8018998:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801899c:	2300      	movs	r3, #0
 801899e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80189a0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80189a4:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80189a6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80189a8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80189ac:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80189ae:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80189b0:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80189b2:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80189b4:	6823      	ldr	r3, [r4, #0]
 80189b6:	681a      	ldr	r2, [r3, #0]
 80189b8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80189bc:	d103      	bne.n	80189c6 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80189be:	681a      	ldr	r2, [r3, #0]
 80189c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80189c4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80189c6:	68e3      	ldr	r3, [r4, #12]
 80189c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80189cc:	d011      	beq.n	80189f2 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80189ce:	6863      	ldr	r3, [r4, #4]
 80189d0:	b10b      	cbz	r3, 80189d6 <HAL_SPI_TransmitReceive+0xa8>
 80189d2:	2f01      	cmp	r7, #1
 80189d4:	d10b      	bne.n	80189ee <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80189d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80189d8:	6823      	ldr	r3, [r4, #0]
 80189da:	7812      	ldrb	r2, [r2, #0]
 80189dc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80189de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80189e0:	3301      	adds	r3, #1
 80189e2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80189e4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	3b01      	subs	r3, #1
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80189ee:	2701      	movs	r7, #1
 80189f0:	e071      	b.n	8018ad6 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80189f2:	6863      	ldr	r3, [r4, #4]
 80189f4:	b10b      	cbz	r3, 80189fa <HAL_SPI_TransmitReceive+0xcc>
 80189f6:	2f01      	cmp	r7, #1
 80189f8:	d10b      	bne.n	8018a12 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80189fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80189fc:	6823      	ldr	r3, [r4, #0]
 80189fe:	8812      	ldrh	r2, [r2, #0]
 8018a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018a04:	3302      	adds	r3, #2
 8018a06:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018a08:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	3b01      	subs	r3, #1
 8018a0e:	b29b      	uxth	r3, r3
 8018a10:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8018a12:	2701      	movs	r7, #1
 8018a14:	e01b      	b.n	8018a4e <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	689a      	ldr	r2, [r3, #8]
 8018a1a:	f012 0f01 	tst.w	r2, #1
 8018a1e:	d00e      	beq.n	8018a3e <HAL_SPI_TransmitReceive+0x110>
 8018a20:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018a22:	b292      	uxth	r2, r2
 8018a24:	b15a      	cbz	r2, 8018a3e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018a26:	68da      	ldr	r2, [r3, #12]
 8018a28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018a2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018a2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018a2e:	3302      	adds	r3, #2
 8018a30:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018a32:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	3b01      	subs	r3, #1
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8018a3c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8018a3e:	f7fd ff8b 	bl	8016958 <HAL_GetTick>
 8018a42:	1b80      	subs	r0, r0, r6
 8018a44:	42a8      	cmp	r0, r5
 8018a46:	d302      	bcc.n	8018a4e <HAL_SPI_TransmitReceive+0x120>
 8018a48:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018a4c:	d11e      	bne.n	8018a8c <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018a4e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	b91b      	cbnz	r3, 8018a5c <HAL_SPI_TransmitReceive+0x12e>
 8018a54:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018a56:	b29b      	uxth	r3, r3
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d062      	beq.n	8018b22 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018a5c:	6823      	ldr	r3, [r4, #0]
 8018a5e:	689a      	ldr	r2, [r3, #8]
 8018a60:	f012 0f02 	tst.w	r2, #2
 8018a64:	d0d7      	beq.n	8018a16 <HAL_SPI_TransmitReceive+0xe8>
 8018a66:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018a68:	b292      	uxth	r2, r2
 8018a6a:	2a00      	cmp	r2, #0
 8018a6c:	d0d3      	beq.n	8018a16 <HAL_SPI_TransmitReceive+0xe8>
 8018a6e:	2f00      	cmp	r7, #0
 8018a70:	d0d1      	beq.n	8018a16 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018a72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018a74:	8812      	ldrh	r2, [r2, #0]
 8018a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018a78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018a7a:	3302      	adds	r3, #2
 8018a7c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8018a7e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	3b01      	subs	r3, #1
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8018a88:	2700      	movs	r7, #0
 8018a8a:	e7c4      	b.n	8018a16 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018a92:	2300      	movs	r3, #0
 8018a94:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018a98:	2003      	movs	r0, #3
 8018a9a:	e063      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018a9c:	6823      	ldr	r3, [r4, #0]
 8018a9e:	689a      	ldr	r2, [r3, #8]
 8018aa0:	f012 0f01 	tst.w	r2, #1
 8018aa4:	d00e      	beq.n	8018ac4 <HAL_SPI_TransmitReceive+0x196>
 8018aa6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018aa8:	b292      	uxth	r2, r2
 8018aaa:	b15a      	cbz	r2, 8018ac4 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8018aac:	68da      	ldr	r2, [r3, #12]
 8018aae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018ab0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8018ab2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018ab8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018aba:	b29b      	uxth	r3, r3
 8018abc:	3b01      	subs	r3, #1
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8018ac2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8018ac4:	f7fd ff48 	bl	8016958 <HAL_GetTick>
 8018ac8:	1b83      	subs	r3, r0, r6
 8018aca:	42ab      	cmp	r3, r5
 8018acc:	d302      	bcc.n	8018ad4 <HAL_SPI_TransmitReceive+0x1a6>
 8018ace:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018ad2:	d11e      	bne.n	8018b12 <HAL_SPI_TransmitReceive+0x1e4>
 8018ad4:	b1ed      	cbz	r5, 8018b12 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018ad6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	b913      	cbnz	r3, 8018ae2 <HAL_SPI_TransmitReceive+0x1b4>
 8018adc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	b1fb      	cbz	r3, 8018b22 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018ae2:	6823      	ldr	r3, [r4, #0]
 8018ae4:	689a      	ldr	r2, [r3, #8]
 8018ae6:	f012 0f02 	tst.w	r2, #2
 8018aea:	d0d7      	beq.n	8018a9c <HAL_SPI_TransmitReceive+0x16e>
 8018aec:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018aee:	b292      	uxth	r2, r2
 8018af0:	2a00      	cmp	r2, #0
 8018af2:	d0d3      	beq.n	8018a9c <HAL_SPI_TransmitReceive+0x16e>
 8018af4:	2f00      	cmp	r7, #0
 8018af6:	d0d1      	beq.n	8018a9c <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8018af8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018afa:	7812      	ldrb	r2, [r2, #0]
 8018afc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8018afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b00:	3301      	adds	r3, #1
 8018b02:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8018b04:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018b06:	b29b      	uxth	r3, r3
 8018b08:	3b01      	subs	r3, #1
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8018b0e:	2700      	movs	r7, #0
 8018b10:	e7c4      	b.n	8018a9c <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8018b12:	2301      	movs	r3, #1
 8018b14:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018b18:	2300      	movs	r3, #0
 8018b1a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018b1e:	2003      	movs	r0, #3
 8018b20:	e020      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018b22:	4632      	mov	r2, r6
 8018b24:	4629      	mov	r1, r5
 8018b26:	4620      	mov	r0, r4
 8018b28:	f7ff fd3a 	bl	80185a0 <SPI_EndRxTxTransaction>
 8018b2c:	b990      	cbnz	r0, 8018b54 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8018b2e:	68a3      	ldr	r3, [r4, #8]
 8018b30:	b933      	cbnz	r3, 8018b40 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018b32:	9301      	str	r3, [sp, #4]
 8018b34:	6823      	ldr	r3, [r4, #0]
 8018b36:	68da      	ldr	r2, [r3, #12]
 8018b38:	9201      	str	r2, [sp, #4]
 8018b3a:	689b      	ldr	r3, [r3, #8]
 8018b3c:	9301      	str	r3, [sp, #4]
 8018b3e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8018b40:	2301      	movs	r3, #1
 8018b42:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018b46:	2300      	movs	r3, #0
 8018b48:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018b4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018b4e:	b14b      	cbz	r3, 8018b64 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8018b50:	2001      	movs	r0, #1
 8018b52:	e007      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018b54:	2320      	movs	r3, #32
 8018b56:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8018b58:	2300      	movs	r3, #0
 8018b5a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8018b5e:	2001      	movs	r0, #1
 8018b60:	e000      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8018b62:	2002      	movs	r0, #2
}
 8018b64:	b003      	add	sp, #12
 8018b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8018b6a:	2002      	movs	r0, #2
 8018b6c:	e7fa      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
 8018b6e:	2002      	movs	r0, #2
 8018b70:	e7f8      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8018b72:	2001      	movs	r0, #1
 8018b74:	e7f6      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
 8018b76:	2001      	movs	r0, #1
 8018b78:	e7f4      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
 8018b7a:	2001      	movs	r0, #1
 8018b7c:	e7f2      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8018b7e:	2002      	movs	r0, #2
 8018b80:	e7f0      	b.n	8018b64 <HAL_SPI_TransmitReceive+0x236>

08018b82 <HAL_SPI_Receive>:
{
 8018b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b86:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8018b88:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8018b8c:	b2f6      	uxtb	r6, r6
 8018b8e:	2e01      	cmp	r6, #1
 8018b90:	f040 80b4 	bne.w	8018cfc <HAL_SPI_Receive+0x17a>
 8018b94:	4604      	mov	r4, r0
 8018b96:	4689      	mov	r9, r1
 8018b98:	4690      	mov	r8, r2
 8018b9a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8018b9c:	6843      	ldr	r3, [r0, #4]
 8018b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018ba2:	d101      	bne.n	8018ba8 <HAL_SPI_Receive+0x26>
 8018ba4:	6883      	ldr	r3, [r0, #8]
 8018ba6:	b393      	cbz	r3, 8018c0e <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8018ba8:	f7fd fed6 	bl	8016958 <HAL_GetTick>
 8018bac:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8018bae:	f1b9 0f00 	cmp.w	r9, #0
 8018bb2:	f000 80a4 	beq.w	8018cfe <HAL_SPI_Receive+0x17c>
 8018bb6:	f1b8 0f00 	cmp.w	r8, #0
 8018bba:	f000 80a0 	beq.w	8018cfe <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8018bbe:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8018bc2:	2b01      	cmp	r3, #1
 8018bc4:	f000 809f 	beq.w	8018d06 <HAL_SPI_Receive+0x184>
 8018bc8:	2301      	movs	r3, #1
 8018bca:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8018bce:	2304      	movs	r3, #4
 8018bd0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8018bd8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8018bdc:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8018be0:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8018be4:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8018be6:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8018be8:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8018bea:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8018bec:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018bee:	68a3      	ldr	r3, [r4, #8]
 8018bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018bf4:	d015      	beq.n	8018c22 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018bf6:	6823      	ldr	r3, [r4, #0]
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018bfe:	d103      	bne.n	8018c08 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8018c00:	681a      	ldr	r2, [r3, #0]
 8018c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018c06:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8018c08:	68e3      	ldr	r3, [r4, #12]
 8018c0a:	b1f3      	cbz	r3, 8018c4a <HAL_SPI_Receive+0xc8>
 8018c0c:	e043      	b.n	8018c96 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8018c0e:	2304      	movs	r3, #4
 8018c10:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8018c14:	9500      	str	r5, [sp, #0]
 8018c16:	4613      	mov	r3, r2
 8018c18:	460a      	mov	r2, r1
 8018c1a:	f7ff fe88 	bl	801892e <HAL_SPI_TransmitReceive>
 8018c1e:	4606      	mov	r6, r0
 8018c20:	e06d      	b.n	8018cfe <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8018c22:	6822      	ldr	r2, [r4, #0]
 8018c24:	6813      	ldr	r3, [r2, #0]
 8018c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018c2a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8018c2c:	6822      	ldr	r2, [r4, #0]
 8018c2e:	6813      	ldr	r3, [r2, #0]
 8018c30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8018c34:	6013      	str	r3, [r2, #0]
 8018c36:	e7de      	b.n	8018bf6 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018c38:	f7fd fe8e 	bl	8016958 <HAL_GetTick>
 8018c3c:	1bc0      	subs	r0, r0, r7
 8018c3e:	42a8      	cmp	r0, r5
 8018c40:	d302      	bcc.n	8018c48 <HAL_SPI_Receive+0xc6>
 8018c42:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018c46:	d115      	bne.n	8018c74 <HAL_SPI_Receive+0xf2>
 8018c48:	b1a5      	cbz	r5, 8018c74 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8018c4a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d042      	beq.n	8018cd8 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018c52:	6823      	ldr	r3, [r4, #0]
 8018c54:	689a      	ldr	r2, [r3, #8]
 8018c56:	f012 0f01 	tst.w	r2, #1
 8018c5a:	d0ed      	beq.n	8018c38 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018c5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018c5e:	7b1b      	ldrb	r3, [r3, #12]
 8018c60:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8018c62:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018c64:	3301      	adds	r3, #1
 8018c66:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018c68:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	3b01      	subs	r3, #1
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8018c72:	e7ea      	b.n	8018c4a <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8018c74:	2301      	movs	r3, #1
 8018c76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018c80:	2603      	movs	r6, #3
 8018c82:	e03c      	b.n	8018cfe <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018c84:	f7fd fe68 	bl	8016958 <HAL_GetTick>
 8018c88:	1bc0      	subs	r0, r0, r7
 8018c8a:	42a8      	cmp	r0, r5
 8018c8c:	d302      	bcc.n	8018c94 <HAL_SPI_Receive+0x112>
 8018c8e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018c92:	d119      	bne.n	8018cc8 <HAL_SPI_Receive+0x146>
 8018c94:	b1c5      	cbz	r5, 8018cc8 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8018c96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018c98:	b29b      	uxth	r3, r3
 8018c9a:	b1eb      	cbz	r3, 8018cd8 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018c9c:	6823      	ldr	r3, [r4, #0]
 8018c9e:	689a      	ldr	r2, [r3, #8]
 8018ca0:	f012 0f01 	tst.w	r2, #1
 8018ca4:	d0ee      	beq.n	8018c84 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018ca6:	68da      	ldr	r2, [r3, #12]
 8018ca8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018caa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018cac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018cae:	3302      	adds	r3, #2
 8018cb0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018cb2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8018cb6:	fa1f fc8c 	uxth.w	ip, ip
 8018cba:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8018cbe:	fa1f fc8c 	uxth.w	ip, ip
 8018cc2:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8018cc6:	e7e6      	b.n	8018c96 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8018cc8:	2301      	movs	r3, #1
 8018cca:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8018cce:	2300      	movs	r3, #0
 8018cd0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018cd4:	2603      	movs	r6, #3
 8018cd6:	e012      	b.n	8018cfe <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018cd8:	463a      	mov	r2, r7
 8018cda:	4629      	mov	r1, r5
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7ff fc9f 	bl	8018620 <SPI_EndRxTransaction>
 8018ce2:	b108      	cbz	r0, 8018ce8 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018ce4:	2320      	movs	r3, #32
 8018ce6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8018ce8:	2301      	movs	r3, #1
 8018cea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018cee:	2300      	movs	r3, #0
 8018cf0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018cf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018cf6:	b913      	cbnz	r3, 8018cfe <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8018cf8:	2600      	movs	r6, #0
 8018cfa:	e000      	b.n	8018cfe <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8018cfc:	2602      	movs	r6, #2
}
 8018cfe:	4630      	mov	r0, r6
 8018d00:	b003      	add	sp, #12
 8018d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8018d06:	2602      	movs	r6, #2
 8018d08:	e7f9      	b.n	8018cfe <HAL_SPI_Receive+0x17c>

08018d0a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018d0a:	4770      	bx	lr

08018d0c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018d0c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d12f      	bne.n	8018d76 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018d16:	2302      	movs	r3, #2
 8018d18:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018d1c:	6802      	ldr	r2, [r0, #0]
 8018d1e:	68d3      	ldr	r3, [r2, #12]
 8018d20:	f043 0301 	orr.w	r3, r3, #1
 8018d24:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018d26:	6803      	ldr	r3, [r0, #0]
 8018d28:	4a15      	ldr	r2, [pc, #84]	@ (8018d80 <HAL_TIM_Base_Start_IT+0x74>)
 8018d2a:	4293      	cmp	r3, r2
 8018d2c:	d018      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
 8018d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d32:	d015      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
 8018d34:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018d38:	4293      	cmp	r3, r2
 8018d3a:	d011      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
 8018d3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018d40:	4293      	cmp	r3, r2
 8018d42:	d00d      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
 8018d44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018d48:	4293      	cmp	r3, r2
 8018d4a:	d009      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
 8018d4c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8018d50:	4293      	cmp	r3, r2
 8018d52:	d005      	beq.n	8018d60 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	f042 0201 	orr.w	r2, r2, #1
 8018d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018d60:	689a      	ldr	r2, [r3, #8]
 8018d62:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018d66:	2a06      	cmp	r2, #6
 8018d68:	d007      	beq.n	8018d7a <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8018d6a:	681a      	ldr	r2, [r3, #0]
 8018d6c:	f042 0201 	orr.w	r2, r2, #1
 8018d70:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8018d72:	2000      	movs	r0, #0
 8018d74:	4770      	bx	lr
    return HAL_ERROR;
 8018d76:	2001      	movs	r0, #1
 8018d78:	4770      	bx	lr
  return HAL_OK;
 8018d7a:	2000      	movs	r0, #0
}
 8018d7c:	4770      	bx	lr
 8018d7e:	bf00      	nop
 8018d80:	40010000 	.word	0x40010000

08018d84 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018d84:	4770      	bx	lr

08018d86 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018d86:	4770      	bx	lr

08018d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018d88:	4770      	bx	lr

08018d8a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018d8a:	4770      	bx	lr

08018d8c <HAL_TIM_IRQHandler>:
{
 8018d8c:	b570      	push	{r4, r5, r6, lr}
 8018d8e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8018d90:	6803      	ldr	r3, [r0, #0]
 8018d92:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8018d94:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8018d96:	f015 0f02 	tst.w	r5, #2
 8018d9a:	d010      	beq.n	8018dbe <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018d9c:	f016 0f02 	tst.w	r6, #2
 8018da0:	d00d      	beq.n	8018dbe <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8018da2:	f06f 0202 	mvn.w	r2, #2
 8018da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018da8:	2301      	movs	r3, #1
 8018daa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018dac:	6803      	ldr	r3, [r0, #0]
 8018dae:	699b      	ldr	r3, [r3, #24]
 8018db0:	f013 0f03 	tst.w	r3, #3
 8018db4:	d05e      	beq.n	8018e74 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8018db6:	f7ff ffe6 	bl	8018d86 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018dbe:	f015 0f04 	tst.w	r5, #4
 8018dc2:	d012      	beq.n	8018dea <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8018dc4:	f016 0f04 	tst.w	r6, #4
 8018dc8:	d00f      	beq.n	8018dea <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8018dca:	6823      	ldr	r3, [r4, #0]
 8018dcc:	f06f 0204 	mvn.w	r2, #4
 8018dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018dd2:	2302      	movs	r3, #2
 8018dd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018dd6:	6823      	ldr	r3, [r4, #0]
 8018dd8:	699b      	ldr	r3, [r3, #24]
 8018dda:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8018dde:	d04f      	beq.n	8018e80 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8018de0:	4620      	mov	r0, r4
 8018de2:	f7ff ffd0 	bl	8018d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018de6:	2300      	movs	r3, #0
 8018de8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018dea:	f015 0f08 	tst.w	r5, #8
 8018dee:	d012      	beq.n	8018e16 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8018df0:	f016 0f08 	tst.w	r6, #8
 8018df4:	d00f      	beq.n	8018e16 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8018df6:	6823      	ldr	r3, [r4, #0]
 8018df8:	f06f 0208 	mvn.w	r2, #8
 8018dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018dfe:	2304      	movs	r3, #4
 8018e00:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	69db      	ldr	r3, [r3, #28]
 8018e06:	f013 0f03 	tst.w	r3, #3
 8018e0a:	d040      	beq.n	8018e8e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f7ff ffba 	bl	8018d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e12:	2300      	movs	r3, #0
 8018e14:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8018e16:	f015 0f10 	tst.w	r5, #16
 8018e1a:	d012      	beq.n	8018e42 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8018e1c:	f016 0f10 	tst.w	r6, #16
 8018e20:	d00f      	beq.n	8018e42 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	f06f 0210 	mvn.w	r2, #16
 8018e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018e2a:	2308      	movs	r3, #8
 8018e2c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018e2e:	6823      	ldr	r3, [r4, #0]
 8018e30:	69db      	ldr	r3, [r3, #28]
 8018e32:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8018e36:	d031      	beq.n	8018e9c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f7ff ffa4 	bl	8018d86 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018e42:	f015 0f01 	tst.w	r5, #1
 8018e46:	d002      	beq.n	8018e4e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018e48:	f016 0f01 	tst.w	r6, #1
 8018e4c:	d12d      	bne.n	8018eaa <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8018e4e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8018e52:	d002      	beq.n	8018e5a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018e54:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8018e58:	d12f      	bne.n	8018eba <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8018e5a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8018e5e:	d002      	beq.n	8018e66 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8018e60:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8018e64:	d131      	bne.n	8018eca <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8018e66:	f015 0f20 	tst.w	r5, #32
 8018e6a:	d002      	beq.n	8018e72 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8018e6c:	f016 0f20 	tst.w	r6, #32
 8018e70:	d133      	bne.n	8018eda <HAL_TIM_IRQHandler+0x14e>
}
 8018e72:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e74:	f7ff ff86 	bl	8018d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e78:	4620      	mov	r0, r4
 8018e7a:	f7ff ff85 	bl	8018d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8018e7e:	e79c      	b.n	8018dba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e80:	4620      	mov	r0, r4
 8018e82:	f7ff ff7f 	bl	8018d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e86:	4620      	mov	r0, r4
 8018e88:	f7ff ff7e 	bl	8018d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8018e8c:	e7ab      	b.n	8018de6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f7ff ff78 	bl	8018d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e94:	4620      	mov	r0, r4
 8018e96:	f7ff ff77 	bl	8018d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8018e9a:	e7ba      	b.n	8018e12 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	f7ff ff71 	bl	8018d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	f7ff ff70 	bl	8018d88 <HAL_TIM_PWM_PulseFinishedCallback>
 8018ea8:	e7c9      	b.n	8018e3e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8018eaa:	6823      	ldr	r3, [r4, #0]
 8018eac:	f06f 0201 	mvn.w	r2, #1
 8018eb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f7f9 faaa 	bl	801240c <HAL_TIM_PeriodElapsedCallback>
 8018eb8:	e7c9      	b.n	8018e4e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8018eba:	6823      	ldr	r3, [r4, #0]
 8018ebc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8018ec0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f000 f895 	bl	8018ff2 <HAL_TIMEx_BreakCallback>
 8018ec8:	e7c7      	b.n	8018e5a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018eca:	6823      	ldr	r3, [r4, #0]
 8018ecc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8018ed0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	f7ff ff59 	bl	8018d8a <HAL_TIM_TriggerCallback>
 8018ed8:	e7c5      	b.n	8018e66 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8018eda:	6823      	ldr	r3, [r4, #0]
 8018edc:	f06f 0220 	mvn.w	r2, #32
 8018ee0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	f000 f884 	bl	8018ff0 <HAL_TIMEx_CommutCallback>
}
 8018ee8:	e7c3      	b.n	8018e72 <HAL_TIM_IRQHandler+0xe6>
	...

08018eec <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018eec:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018eee:	4a29      	ldr	r2, [pc, #164]	@ (8018f94 <TIM_Base_SetConfig+0xa8>)
 8018ef0:	4290      	cmp	r0, r2
 8018ef2:	d00e      	beq.n	8018f12 <TIM_Base_SetConfig+0x26>
 8018ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018ef8:	d00b      	beq.n	8018f12 <TIM_Base_SetConfig+0x26>
 8018efa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018efe:	4290      	cmp	r0, r2
 8018f00:	d007      	beq.n	8018f12 <TIM_Base_SetConfig+0x26>
 8018f02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f06:	4290      	cmp	r0, r2
 8018f08:	d003      	beq.n	8018f12 <TIM_Base_SetConfig+0x26>
 8018f0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f0e:	4290      	cmp	r0, r2
 8018f10:	d103      	bne.n	8018f1a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8018f16:	684a      	ldr	r2, [r1, #4]
 8018f18:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8018f94 <TIM_Base_SetConfig+0xa8>)
 8018f1c:	4290      	cmp	r0, r2
 8018f1e:	d01a      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f20:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018f24:	d017      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f26:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018f2a:	4290      	cmp	r0, r2
 8018f2c:	d013      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f32:	4290      	cmp	r0, r2
 8018f34:	d00f      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f3a:	4290      	cmp	r0, r2
 8018f3c:	d00b      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f3e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8018f42:	4290      	cmp	r0, r2
 8018f44:	d007      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f4a:	4290      	cmp	r0, r2
 8018f4c:	d003      	beq.n	8018f56 <TIM_Base_SetConfig+0x6a>
 8018f4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018f52:	4290      	cmp	r0, r2
 8018f54:	d103      	bne.n	8018f5e <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018f5a:	68ca      	ldr	r2, [r1, #12]
 8018f5c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018f62:	694a      	ldr	r2, [r1, #20]
 8018f64:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8018f66:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018f68:	688b      	ldr	r3, [r1, #8]
 8018f6a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018f6c:	680b      	ldr	r3, [r1, #0]
 8018f6e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018f70:	4b08      	ldr	r3, [pc, #32]	@ (8018f94 <TIM_Base_SetConfig+0xa8>)
 8018f72:	4298      	cmp	r0, r3
 8018f74:	d00a      	beq.n	8018f8c <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018f76:	2301      	movs	r3, #1
 8018f78:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018f7a:	6903      	ldr	r3, [r0, #16]
 8018f7c:	f013 0f01 	tst.w	r3, #1
 8018f80:	d003      	beq.n	8018f8a <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018f82:	6903      	ldr	r3, [r0, #16]
 8018f84:	f023 0301 	bic.w	r3, r3, #1
 8018f88:	6103      	str	r3, [r0, #16]
  }
}
 8018f8a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8018f8c:	690b      	ldr	r3, [r1, #16]
 8018f8e:	6303      	str	r3, [r0, #48]	@ 0x30
 8018f90:	e7f1      	b.n	8018f76 <TIM_Base_SetConfig+0x8a>
 8018f92:	bf00      	nop
 8018f94:	40010000 	.word	0x40010000

08018f98 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8018f98:	b340      	cbz	r0, 8018fec <HAL_TIM_Base_Init+0x54>
{
 8018f9a:	b510      	push	{r4, lr}
 8018f9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8018f9e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8018fa2:	b1f3      	cbz	r3, 8018fe2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8018fa4:	2302      	movs	r3, #2
 8018fa6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018faa:	4621      	mov	r1, r4
 8018fac:	f851 0b04 	ldr.w	r0, [r1], #4
 8018fb0:	f7ff ff9c 	bl	8018eec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018fba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8018fbe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8018fc2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8018fc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018fca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018fd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018fd6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8018fda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8018fde:	2000      	movs	r0, #0
}
 8018fe0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8018fe2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8018fe6:	f7ff fe90 	bl	8018d0a <HAL_TIM_Base_MspInit>
 8018fea:	e7db      	b.n	8018fa4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8018fec:	2001      	movs	r0, #1
}
 8018fee:	4770      	bx	lr

08018ff0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018ff0:	4770      	bx	lr

08018ff2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018ff2:	4770      	bx	lr

08018ff4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8018ff4:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018ff6:	b930      	cbnz	r0, 8019006 <SSD1306_Fill+0x12>
 8018ff8:	2100      	movs	r1, #0
 8018ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018ffe:	4803      	ldr	r0, [pc, #12]	@ (801900c <SSD1306_Fill+0x18>)
 8019000:	f014 fc86 	bl	802d910 <memset>
}
 8019004:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8019006:	21ff      	movs	r1, #255	@ 0xff
 8019008:	e7f7      	b.n	8018ffa <SSD1306_Fill+0x6>
 801900a:	bf00      	nop
 801900c:	200029e4 	.word	0x200029e4

08019010 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8019010:	287f      	cmp	r0, #127	@ 0x7f
 8019012:	d825      	bhi.n	8019060 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8019014:	293f      	cmp	r1, #63	@ 0x3f
 8019016:	d823      	bhi.n	8019060 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8019018:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 801901a:	4b12      	ldr	r3, [pc, #72]	@ (8019064 <SSD1306_DrawPixel+0x54>)
 801901c:	791b      	ldrb	r3, [r3, #4]
 801901e:	b113      	cbz	r3, 8019026 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8019020:	fab2 f282 	clz	r2, r2
 8019024:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8019026:	2a01      	cmp	r2, #1
 8019028:	d00f      	beq.n	801904a <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 801902a:	08cb      	lsrs	r3, r1, #3
 801902c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8019030:	4c0d      	ldr	r4, [pc, #52]	@ (8019068 <SSD1306_DrawPixel+0x58>)
 8019032:	5c22      	ldrb	r2, [r4, r0]
 8019034:	f001 0107 	and.w	r1, r1, #7
 8019038:	2301      	movs	r3, #1
 801903a:	408b      	lsls	r3, r1
 801903c:	43db      	mvns	r3, r3
 801903e:	b25b      	sxtb	r3, r3
 8019040:	4013      	ands	r3, r2
 8019042:	5423      	strb	r3, [r4, r0]
	}
}
 8019044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019048:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 801904a:	08cb      	lsrs	r3, r1, #3
 801904c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8019050:	4c05      	ldr	r4, [pc, #20]	@ (8019068 <SSD1306_DrawPixel+0x58>)
 8019052:	5c23      	ldrb	r3, [r4, r0]
 8019054:	f001 0107 	and.w	r1, r1, #7
 8019058:	408a      	lsls	r2, r1
 801905a:	4313      	orrs	r3, r2
 801905c:	5423      	strb	r3, [r4, r0]
 801905e:	e7f1      	b.n	8019044 <SSD1306_DrawPixel+0x34>
 8019060:	4770      	bx	lr
 8019062:	bf00      	nop
 8019064:	200029dc 	.word	0x200029dc
 8019068:	200029e4 	.word	0x200029e4

0801906c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 801906c:	4b01      	ldr	r3, [pc, #4]	@ (8019074 <SSD1306_GotoXY+0x8>)
 801906e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8019070:	8059      	strh	r1, [r3, #2]
}
 8019072:	4770      	bx	lr
 8019074:	200029dc 	.word	0x200029dc

08019078 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8019078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801907c:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801907e:	4b24      	ldr	r3, [pc, #144]	@ (8019110 <SSD1306_Putc+0x98>)
 8019080:	881b      	ldrh	r3, [r3, #0]
 8019082:	780a      	ldrb	r2, [r1, #0]
 8019084:	4413      	add	r3, r2
	if (
 8019086:	2b7f      	cmp	r3, #127	@ 0x7f
 8019088:	dc3e      	bgt.n	8019108 <SSD1306_Putc+0x90>
 801908a:	4681      	mov	r9, r0
 801908c:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801908e:	4b20      	ldr	r3, [pc, #128]	@ (8019110 <SSD1306_Putc+0x98>)
 8019090:	885b      	ldrh	r3, [r3, #2]
 8019092:	784a      	ldrb	r2, [r1, #1]
 8019094:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8019096:	2b3f      	cmp	r3, #63	@ 0x3f
 8019098:	dc38      	bgt.n	801910c <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 801909a:	2600      	movs	r6, #0
 801909c:	e020      	b.n	80190e0 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801909e:	4b1c      	ldr	r3, [pc, #112]	@ (8019110 <SSD1306_Putc+0x98>)
 80190a0:	8818      	ldrh	r0, [r3, #0]
 80190a2:	8859      	ldrh	r1, [r3, #2]
 80190a4:	4431      	add	r1, r6
 80190a6:	4420      	add	r0, r4
 80190a8:	fab8 f288 	clz	r2, r8
 80190ac:	0952      	lsrs	r2, r2, #5
 80190ae:	b289      	uxth	r1, r1
 80190b0:	b280      	uxth	r0, r0
 80190b2:	f7ff ffad 	bl	8019010 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80190b6:	3401      	adds	r4, #1
 80190b8:	782b      	ldrb	r3, [r5, #0]
 80190ba:	42a3      	cmp	r3, r4
 80190bc:	d90f      	bls.n	80190de <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80190be:	fa07 f304 	lsl.w	r3, r7, r4
 80190c2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80190c6:	d0ea      	beq.n	801909e <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80190c8:	4b11      	ldr	r3, [pc, #68]	@ (8019110 <SSD1306_Putc+0x98>)
 80190ca:	8818      	ldrh	r0, [r3, #0]
 80190cc:	8859      	ldrh	r1, [r3, #2]
 80190ce:	4431      	add	r1, r6
 80190d0:	4420      	add	r0, r4
 80190d2:	4642      	mov	r2, r8
 80190d4:	b289      	uxth	r1, r1
 80190d6:	b280      	uxth	r0, r0
 80190d8:	f7ff ff9a 	bl	8019010 <SSD1306_DrawPixel>
 80190dc:	e7eb      	b.n	80190b6 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80190de:	3601      	adds	r6, #1
 80190e0:	786a      	ldrb	r2, [r5, #1]
 80190e2:	42b2      	cmp	r2, r6
 80190e4:	d908      	bls.n	80190f8 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80190e6:	6869      	ldr	r1, [r5, #4]
 80190e8:	f1a9 0320 	sub.w	r3, r9, #32
 80190ec:	fb02 6303 	mla	r3, r2, r3, r6
 80190f0:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80190f4:	2400      	movs	r4, #0
 80190f6:	e7df      	b.n	80190b8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80190f8:	4a05      	ldr	r2, [pc, #20]	@ (8019110 <SSD1306_Putc+0x98>)
 80190fa:	8813      	ldrh	r3, [r2, #0]
 80190fc:	7829      	ldrb	r1, [r5, #0]
 80190fe:	440b      	add	r3, r1
 8019100:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8019102:	4648      	mov	r0, r9
}
 8019104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8019108:	2000      	movs	r0, #0
 801910a:	e7fb      	b.n	8019104 <SSD1306_Putc+0x8c>
 801910c:	2000      	movs	r0, #0
 801910e:	e7f9      	b.n	8019104 <SSD1306_Putc+0x8c>
 8019110:	200029dc 	.word	0x200029dc

08019114 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8019114:	b570      	push	{r4, r5, r6, lr}
 8019116:	4604      	mov	r4, r0
 8019118:	460e      	mov	r6, r1
 801911a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 801911c:	e000      	b.n	8019120 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801911e:	3401      	adds	r4, #1
	while (*str) {
 8019120:	7820      	ldrb	r0, [r4, #0]
 8019122:	b138      	cbz	r0, 8019134 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8019124:	462a      	mov	r2, r5
 8019126:	4631      	mov	r1, r6
 8019128:	f7ff ffa6 	bl	8019078 <SSD1306_Putc>
 801912c:	4603      	mov	r3, r0
 801912e:	7820      	ldrb	r0, [r4, #0]
 8019130:	4283      	cmp	r3, r0
 8019132:	d0f4      	beq.n	801911e <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8019134:	bd70      	pop	{r4, r5, r6, pc}
	...

08019138 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8019138:	b500      	push	{lr}
 801913a:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 801913c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8019140:	f04f 0c00 	mov.w	ip, #0
 8019144:	e009      	b.n	801915a <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8019146:	f10c 0e01 	add.w	lr, ip, #1
 801914a:	f812 100c 	ldrb.w	r1, [r2, ip]
 801914e:	f10d 0c08 	add.w	ip, sp, #8
 8019152:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8019156:	fa5f fc8e 	uxtb.w	ip, lr
 801915a:	459c      	cmp	ip, r3
 801915c:	d3f3      	bcc.n	8019146 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 801915e:	3301      	adds	r3, #1
 8019160:	220a      	movs	r2, #10
 8019162:	9200      	str	r2, [sp, #0]
 8019164:	b29b      	uxth	r3, r3
 8019166:	aa02      	add	r2, sp, #8
 8019168:	4601      	mov	r1, r0
 801916a:	4803      	ldr	r0, [pc, #12]	@ (8019178 <ssd1306_I2C_WriteMulti+0x40>)
 801916c:	f7fe fa34 	bl	80175d8 <HAL_I2C_Master_Transmit>
}
 8019170:	b043      	add	sp, #268	@ 0x10c
 8019172:	f85d fb04 	ldr.w	pc, [sp], #4
 8019176:	bf00      	nop
 8019178:	2000091c 	.word	0x2000091c

0801917c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 801917c:	b500      	push	{lr}
 801917e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8019180:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8019184:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8019188:	230a      	movs	r3, #10
 801918a:	9300      	str	r3, [sp, #0]
 801918c:	2302      	movs	r3, #2
 801918e:	aa03      	add	r2, sp, #12
 8019190:	4601      	mov	r1, r0
 8019192:	4803      	ldr	r0, [pc, #12]	@ (80191a0 <ssd1306_I2C_Write+0x24>)
 8019194:	f7fe fa20 	bl	80175d8 <HAL_I2C_Master_Transmit>
}
 8019198:	b005      	add	sp, #20
 801919a:	f85d fb04 	ldr.w	pc, [sp], #4
 801919e:	bf00      	nop
 80191a0:	2000091c 	.word	0x2000091c

080191a4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80191a4:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80191a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80191aa:	2201      	movs	r2, #1
 80191ac:	2178      	movs	r1, #120	@ 0x78
 80191ae:	4850      	ldr	r0, [pc, #320]	@ (80192f0 <SSD1306_Init+0x14c>)
 80191b0:	f7fe face 	bl	8017750 <HAL_I2C_IsDeviceReady>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	f040 8099 	bne.w	80192ec <SSD1306_Init+0x148>
	uint32_t p = 2500;
 80191ba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80191be:	e000      	b.n	80191c2 <SSD1306_Init+0x1e>
		p--;
 80191c0:	3b01      	subs	r3, #1
	while(p>0)
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d1fc      	bne.n	80191c0 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80191c6:	22ae      	movs	r2, #174	@ 0xae
 80191c8:	2100      	movs	r1, #0
 80191ca:	2078      	movs	r0, #120	@ 0x78
 80191cc:	f7ff ffd6 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80191d0:	2220      	movs	r2, #32
 80191d2:	2100      	movs	r1, #0
 80191d4:	2078      	movs	r0, #120	@ 0x78
 80191d6:	f7ff ffd1 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80191da:	2210      	movs	r2, #16
 80191dc:	2100      	movs	r1, #0
 80191de:	2078      	movs	r0, #120	@ 0x78
 80191e0:	f7ff ffcc 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80191e4:	22b0      	movs	r2, #176	@ 0xb0
 80191e6:	2100      	movs	r1, #0
 80191e8:	2078      	movs	r0, #120	@ 0x78
 80191ea:	f7ff ffc7 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80191ee:	22c8      	movs	r2, #200	@ 0xc8
 80191f0:	2100      	movs	r1, #0
 80191f2:	2078      	movs	r0, #120	@ 0x78
 80191f4:	f7ff ffc2 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80191f8:	2200      	movs	r2, #0
 80191fa:	4611      	mov	r1, r2
 80191fc:	2078      	movs	r0, #120	@ 0x78
 80191fe:	f7ff ffbd 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8019202:	2210      	movs	r2, #16
 8019204:	2100      	movs	r1, #0
 8019206:	2078      	movs	r0, #120	@ 0x78
 8019208:	f7ff ffb8 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 801920c:	2240      	movs	r2, #64	@ 0x40
 801920e:	2100      	movs	r1, #0
 8019210:	2078      	movs	r0, #120	@ 0x78
 8019212:	f7ff ffb3 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8019216:	2281      	movs	r2, #129	@ 0x81
 8019218:	2100      	movs	r1, #0
 801921a:	2078      	movs	r0, #120	@ 0x78
 801921c:	f7ff ffae 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8019220:	22ff      	movs	r2, #255	@ 0xff
 8019222:	2100      	movs	r1, #0
 8019224:	2078      	movs	r0, #120	@ 0x78
 8019226:	f7ff ffa9 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 801922a:	22a1      	movs	r2, #161	@ 0xa1
 801922c:	2100      	movs	r1, #0
 801922e:	2078      	movs	r0, #120	@ 0x78
 8019230:	f7ff ffa4 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8019234:	22a6      	movs	r2, #166	@ 0xa6
 8019236:	2100      	movs	r1, #0
 8019238:	2078      	movs	r0, #120	@ 0x78
 801923a:	f7ff ff9f 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 801923e:	22a8      	movs	r2, #168	@ 0xa8
 8019240:	2100      	movs	r1, #0
 8019242:	2078      	movs	r0, #120	@ 0x78
 8019244:	f7ff ff9a 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8019248:	223f      	movs	r2, #63	@ 0x3f
 801924a:	2100      	movs	r1, #0
 801924c:	2078      	movs	r0, #120	@ 0x78
 801924e:	f7ff ff95 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8019252:	22a4      	movs	r2, #164	@ 0xa4
 8019254:	2100      	movs	r1, #0
 8019256:	2078      	movs	r0, #120	@ 0x78
 8019258:	f7ff ff90 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 801925c:	22d3      	movs	r2, #211	@ 0xd3
 801925e:	2100      	movs	r1, #0
 8019260:	2078      	movs	r0, #120	@ 0x78
 8019262:	f7ff ff8b 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8019266:	2200      	movs	r2, #0
 8019268:	4611      	mov	r1, r2
 801926a:	2078      	movs	r0, #120	@ 0x78
 801926c:	f7ff ff86 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8019270:	22d5      	movs	r2, #213	@ 0xd5
 8019272:	2100      	movs	r1, #0
 8019274:	2078      	movs	r0, #120	@ 0x78
 8019276:	f7ff ff81 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 801927a:	22f0      	movs	r2, #240	@ 0xf0
 801927c:	2100      	movs	r1, #0
 801927e:	2078      	movs	r0, #120	@ 0x78
 8019280:	f7ff ff7c 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8019284:	22d9      	movs	r2, #217	@ 0xd9
 8019286:	2100      	movs	r1, #0
 8019288:	2078      	movs	r0, #120	@ 0x78
 801928a:	f7ff ff77 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 801928e:	2222      	movs	r2, #34	@ 0x22
 8019290:	2100      	movs	r1, #0
 8019292:	2078      	movs	r0, #120	@ 0x78
 8019294:	f7ff ff72 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8019298:	22da      	movs	r2, #218	@ 0xda
 801929a:	2100      	movs	r1, #0
 801929c:	2078      	movs	r0, #120	@ 0x78
 801929e:	f7ff ff6d 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80192a2:	2212      	movs	r2, #18
 80192a4:	2100      	movs	r1, #0
 80192a6:	2078      	movs	r0, #120	@ 0x78
 80192a8:	f7ff ff68 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80192ac:	22db      	movs	r2, #219	@ 0xdb
 80192ae:	2100      	movs	r1, #0
 80192b0:	2078      	movs	r0, #120	@ 0x78
 80192b2:	f7ff ff63 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80192b6:	2220      	movs	r2, #32
 80192b8:	2100      	movs	r1, #0
 80192ba:	2078      	movs	r0, #120	@ 0x78
 80192bc:	f7ff ff5e 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80192c0:	228d      	movs	r2, #141	@ 0x8d
 80192c2:	2100      	movs	r1, #0
 80192c4:	2078      	movs	r0, #120	@ 0x78
 80192c6:	f7ff ff59 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80192ca:	2214      	movs	r2, #20
 80192cc:	2100      	movs	r1, #0
 80192ce:	2078      	movs	r0, #120	@ 0x78
 80192d0:	f7ff ff54 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80192d4:	22af      	movs	r2, #175	@ 0xaf
 80192d6:	2100      	movs	r1, #0
 80192d8:	2078      	movs	r0, #120	@ 0x78
 80192da:	f7ff ff4f 	bl	801917c <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 80192de:	4b05      	ldr	r3, [pc, #20]	@ (80192f4 <SSD1306_Init+0x150>)
 80192e0:	2200      	movs	r2, #0
 80192e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80192e4:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80192e6:	2001      	movs	r0, #1
 80192e8:	7158      	strb	r0, [r3, #5]
}
 80192ea:	bd08      	pop	{r3, pc}
		return 0;
 80192ec:	2000      	movs	r0, #0
 80192ee:	e7fc      	b.n	80192ea <SSD1306_Init+0x146>
 80192f0:	2000091c 	.word	0x2000091c
 80192f4:	200029dc 	.word	0x200029dc

080192f8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80192f8:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80192fa:	2400      	movs	r4, #0
 80192fc:	e01a      	b.n	8019334 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80192fe:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8019302:	b2d2      	uxtb	r2, r2
 8019304:	2100      	movs	r1, #0
 8019306:	2078      	movs	r0, #120	@ 0x78
 8019308:	f7ff ff38 	bl	801917c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 801930c:	2200      	movs	r2, #0
 801930e:	4611      	mov	r1, r2
 8019310:	2078      	movs	r0, #120	@ 0x78
 8019312:	f7ff ff33 	bl	801917c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8019316:	2210      	movs	r2, #16
 8019318:	2100      	movs	r1, #0
 801931a:	2078      	movs	r0, #120	@ 0x78
 801931c:	f7ff ff2e 	bl	801917c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8019320:	2380      	movs	r3, #128	@ 0x80
 8019322:	4a06      	ldr	r2, [pc, #24]	@ (801933c <SSD1306_UpdateScreen+0x44>)
 8019324:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8019328:	2140      	movs	r1, #64	@ 0x40
 801932a:	2078      	movs	r0, #120	@ 0x78
 801932c:	f7ff ff04 	bl	8019138 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8019330:	3401      	adds	r4, #1
 8019332:	b2e4      	uxtb	r4, r4
 8019334:	2c07      	cmp	r4, #7
 8019336:	d9e2      	bls.n	80192fe <SSD1306_UpdateScreen+0x6>
}
 8019338:	bd10      	pop	{r4, pc}
 801933a:	bf00      	nop
 801933c:	200029e4 	.word	0x200029e4

08019340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019340:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8019342:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019346:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019348:	f001 fd4a 	bl	801ade0 <xTaskGetSchedulerState>
 801934c:	2801      	cmp	r0, #1
 801934e:	d100      	bne.n	8019352 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8019350:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8019352:	f002 f947 	bl	801b5e4 <xPortSysTickHandler>
}
 8019356:	e7fb      	b.n	8019350 <SysTick_Handler+0x10>

08019358 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019358:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 801935c:	b92b      	cbnz	r3, 801936a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 801935e:	4b06      	ldr	r3, [pc, #24]	@ (8019378 <osKernelInitialize+0x20>)
 8019360:	6818      	ldr	r0, [r3, #0]
 8019362:	b928      	cbnz	r0, 8019370 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019364:	2201      	movs	r2, #1
 8019366:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019368:	4770      	bx	lr
    stat = osErrorISR;
 801936a:	f06f 0005 	mvn.w	r0, #5
 801936e:	4770      	bx	lr
    } else {
      stat = osError;
 8019370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8019374:	4770      	bx	lr
 8019376:	bf00      	nop
 8019378:	200036e8 	.word	0x200036e8

0801937c <osKernelStart>:
 801937c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8019380:	b973      	cbnz	r3, 80193a0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8019382:	4b0a      	ldr	r3, [pc, #40]	@ (80193ac <osKernelStart+0x30>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	2b01      	cmp	r3, #1
 8019388:	d10d      	bne.n	80193a6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 801938a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801938c:	2400      	movs	r4, #0
 801938e:	4b08      	ldr	r3, [pc, #32]	@ (80193b0 <osKernelStart+0x34>)
 8019390:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019392:	4b06      	ldr	r3, [pc, #24]	@ (80193ac <osKernelStart+0x30>)
 8019394:	2202      	movs	r2, #2
 8019396:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019398:	f001 fa6a 	bl	801a870 <vTaskStartScheduler>
      stat = osOK;
 801939c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 801939e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80193a0:	f06f 0005 	mvn.w	r0, #5
 80193a4:	4770      	bx	lr
      stat = osError;
 80193a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80193aa:	4770      	bx	lr
 80193ac:	200036e8 	.word	0x200036e8
 80193b0:	e000ed00 	.word	0xe000ed00

080193b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80193b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193b6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80193b8:	2400      	movs	r4, #0
 80193ba:	9405      	str	r4, [sp, #20]
 80193bc:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80193c0:	bb7c      	cbnz	r4, 8019422 <osThreadNew+0x6e>
 80193c2:	b370      	cbz	r0, 8019422 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80193c4:	b32a      	cbz	r2, 8019412 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 80193c6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80193c8:	6993      	ldr	r3, [r2, #24]
 80193ca:	b903      	cbnz	r3, 80193ce <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80193cc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80193ce:	1e5c      	subs	r4, r3, #1
 80193d0:	2c37      	cmp	r4, #55	@ 0x37
 80193d2:	d84a      	bhi.n	801946a <osThreadNew+0xb6>
 80193d4:	6854      	ldr	r4, [r2, #4]
 80193d6:	f014 0f01 	tst.w	r4, #1
 80193da:	d148      	bne.n	801946e <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80193dc:	6956      	ldr	r6, [r2, #20]
 80193de:	b176      	cbz	r6, 80193fe <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80193e0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80193e4:	6894      	ldr	r4, [r2, #8]
 80193e6:	b134      	cbz	r4, 80193f6 <osThreadNew+0x42>
 80193e8:	68d7      	ldr	r7, [r2, #12]
 80193ea:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 80193ee:	d302      	bcc.n	80193f6 <osThreadNew+0x42>
 80193f0:	6917      	ldr	r7, [r2, #16]
 80193f2:	b107      	cbz	r7, 80193f6 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80193f4:	b9c6      	cbnz	r6, 8019428 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80193f6:	b12c      	cbz	r4, 8019404 <osThreadNew+0x50>
    mem  = -1;
 80193f8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80193fc:	e00e      	b.n	801941c <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80193fe:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8019402:	e7ef      	b.n	80193e4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019404:	68d4      	ldr	r4, [r2, #12]
 8019406:	b98c      	cbnz	r4, 801942c <osThreadNew+0x78>
 8019408:	6914      	ldr	r4, [r2, #16]
 801940a:	b194      	cbz	r4, 8019432 <osThreadNew+0x7e>
    mem  = -1;
 801940c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019410:	e004      	b.n	801941c <osThreadNew+0x68>
    name = NULL;
 8019412:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8019414:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8019416:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8019418:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 801941c:	2c01      	cmp	r4, #1
 801941e:	d00a      	beq.n	8019436 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8019420:	b1ac      	cbz	r4, 801944e <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019422:	9805      	ldr	r0, [sp, #20]
}
 8019424:	b007      	add	sp, #28
 8019426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8019428:	2401      	movs	r4, #1
 801942a:	e7f7      	b.n	801941c <osThreadNew+0x68>
    mem  = -1;
 801942c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019430:	e7f4      	b.n	801941c <osThreadNew+0x68>
          mem = 0;
 8019432:	2400      	movs	r4, #0
 8019434:	e7f2      	b.n	801941c <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019436:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019438:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801943a:	9202      	str	r2, [sp, #8]
 801943c:	9401      	str	r4, [sp, #4]
 801943e:	9300      	str	r3, [sp, #0]
 8019440:	460b      	mov	r3, r1
 8019442:	4662      	mov	r2, ip
 8019444:	4629      	mov	r1, r5
 8019446:	f001 f9a3 	bl	801a790 <xTaskCreateStatic>
 801944a:	9005      	str	r0, [sp, #20]
 801944c:	e7e9      	b.n	8019422 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801944e:	aa05      	add	r2, sp, #20
 8019450:	9201      	str	r2, [sp, #4]
 8019452:	9300      	str	r3, [sp, #0]
 8019454:	460b      	mov	r3, r1
 8019456:	fa1f f28c 	uxth.w	r2, ip
 801945a:	4629      	mov	r1, r5
 801945c:	f001 f9d5 	bl	801a80a <xTaskCreate>
 8019460:	2801      	cmp	r0, #1
 8019462:	d0de      	beq.n	8019422 <osThreadNew+0x6e>
            hTask = NULL;
 8019464:	2300      	movs	r3, #0
 8019466:	9305      	str	r3, [sp, #20]
 8019468:	e7db      	b.n	8019422 <osThreadNew+0x6e>
        return (NULL);
 801946a:	2000      	movs	r0, #0
 801946c:	e7da      	b.n	8019424 <osThreadNew+0x70>
 801946e:	2000      	movs	r0, #0
 8019470:	e7d8      	b.n	8019424 <osThreadNew+0x70>

08019472 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019472:	b508      	push	{r3, lr}
 8019474:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8019478:	b933      	cbnz	r3, 8019488 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 801947a:	b908      	cbnz	r0, 8019480 <osDelay+0xe>
    stat = osOK;
 801947c:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801947e:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8019480:	f001 fb62 	bl	801ab48 <vTaskDelay>
    stat = osOK;
 8019484:	2000      	movs	r0, #0
 8019486:	e7fa      	b.n	801947e <osDelay+0xc>
    stat = osErrorISR;
 8019488:	f06f 0005 	mvn.w	r0, #5
 801948c:	e7f7      	b.n	801947e <osDelay+0xc>

0801948e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801948e:	b570      	push	{r4, r5, r6, lr}
 8019490:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8019494:	2b00      	cmp	r3, #0
 8019496:	d13c      	bne.n	8019512 <osMutexNew+0x84>
 8019498:	4604      	mov	r4, r0
    if (attr != NULL) {
 801949a:	b100      	cbz	r0, 801949e <osMutexNew+0x10>
      type = attr->attr_bits;
 801949c:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801949e:	f013 0601 	ands.w	r6, r3, #1
 80194a2:	d000      	beq.n	80194a6 <osMutexNew+0x18>
      rmtx = 1U;
 80194a4:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80194a6:	f013 0f08 	tst.w	r3, #8
 80194aa:	d135      	bne.n	8019518 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 80194ac:	b344      	cbz	r4, 8019500 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80194ae:	68a1      	ldr	r1, [r4, #8]
 80194b0:	b111      	cbz	r1, 80194b8 <osMutexNew+0x2a>
 80194b2:	68e3      	ldr	r3, [r4, #12]
 80194b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80194b6:	d818      	bhi.n	80194ea <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80194b8:	b191      	cbz	r1, 80194e0 <osMutexNew+0x52>
      mem = -1;
 80194ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80194be:	bb6b      	cbnz	r3, 801951c <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80194c0:	b316      	cbz	r6, 8019508 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80194c2:	2004      	movs	r0, #4
 80194c4:	f000 fc04 	bl	8019cd0 <xQueueCreateMutex>
 80194c8:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80194ca:	b31d      	cbz	r5, 8019514 <osMutexNew+0x86>
        if (attr != NULL) {
 80194cc:	b104      	cbz	r4, 80194d0 <osMutexNew+0x42>
          name = attr->name;
 80194ce:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80194d0:	4621      	mov	r1, r4
 80194d2:	4628      	mov	r0, r5
 80194d4:	f000 ff64 	bl	801a3a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80194d8:	b1e6      	cbz	r6, 8019514 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80194da:	f045 0501 	orr.w	r5, r5, #1
 80194de:	e019      	b.n	8019514 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80194e0:	68e3      	ldr	r3, [r4, #12]
 80194e2:	b17b      	cbz	r3, 8019504 <osMutexNew+0x76>
      mem = -1;
 80194e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80194e8:	e7e9      	b.n	80194be <osMutexNew+0x30>
          if (rmtx != 0U) {
 80194ea:	b126      	cbz	r6, 80194f6 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80194ec:	2004      	movs	r0, #4
 80194ee:	f000 fbfa 	bl	8019ce6 <xQueueCreateMutexStatic>
 80194f2:	4605      	mov	r5, r0
 80194f4:	e7e9      	b.n	80194ca <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80194f6:	2001      	movs	r0, #1
 80194f8:	f000 fbf5 	bl	8019ce6 <xQueueCreateMutexStatic>
 80194fc:	4605      	mov	r5, r0
 80194fe:	e7e4      	b.n	80194ca <osMutexNew+0x3c>
        mem = 0;
 8019500:	2300      	movs	r3, #0
 8019502:	e7dc      	b.n	80194be <osMutexNew+0x30>
            mem = 0;
 8019504:	2300      	movs	r3, #0
 8019506:	e7da      	b.n	80194be <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8019508:	2001      	movs	r0, #1
 801950a:	f000 fbe1 	bl	8019cd0 <xQueueCreateMutex>
 801950e:	4605      	mov	r5, r0
 8019510:	e7db      	b.n	80194ca <osMutexNew+0x3c>
  hMutex = NULL;
 8019512:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8019514:	4628      	mov	r0, r5
 8019516:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8019518:	2500      	movs	r5, #0
 801951a:	e7fb      	b.n	8019514 <osMutexNew+0x86>
 801951c:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 801951e:	e7f9      	b.n	8019514 <osMutexNew+0x86>

08019520 <osMutexAcquire>:
 8019520:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8019524:	b9da      	cbnz	r2, 801955e <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8019526:	b510      	push	{r4, lr}
 8019528:	4603      	mov	r3, r0
 801952a:	460c      	mov	r4, r1
 801952c:	f020 0001 	bic.w	r0, r0, #1
 8019530:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8019534:	2b01      	cmp	r3, #1
 8019536:	d915      	bls.n	8019564 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8019538:	b141      	cbz	r1, 801954c <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801953a:	4621      	mov	r1, r4
 801953c:	f000 fdeb 	bl	801a116 <xQueueTakeMutexRecursive>
 8019540:	2801      	cmp	r0, #1
 8019542:	d012      	beq.n	801956a <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8019544:	b19c      	cbz	r4, 801956e <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8019546:	f06f 0001 	mvn.w	r0, #1
 801954a:	e00f      	b.n	801956c <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801954c:	4621      	mov	r1, r4
 801954e:	f000 fd0f 	bl	8019f70 <xQueueSemaphoreTake>
 8019552:	2801      	cmp	r0, #1
 8019554:	d00e      	beq.n	8019574 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8019556:	b17c      	cbz	r4, 8019578 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8019558:	f06f 0001 	mvn.w	r0, #1
 801955c:	e006      	b.n	801956c <osMutexAcquire+0x4c>
    stat = osErrorISR;
 801955e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8019562:	4770      	bx	lr
    stat = osErrorParameter;
 8019564:	f06f 0003 	mvn.w	r0, #3
 8019568:	e000      	b.n	801956c <osMutexAcquire+0x4c>
  stat = osOK;
 801956a:	2000      	movs	r0, #0
}
 801956c:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 801956e:	f06f 0002 	mvn.w	r0, #2
 8019572:	e7fb      	b.n	801956c <osMutexAcquire+0x4c>
  stat = osOK;
 8019574:	2000      	movs	r0, #0
 8019576:	e7f9      	b.n	801956c <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8019578:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 801957c:	e7f6      	b.n	801956c <osMutexAcquire+0x4c>

0801957e <osMutexRelease>:
 801957e:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8019582:	b9ba      	cbnz	r2, 80195b4 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019584:	b508      	push	{r3, lr}
 8019586:	4603      	mov	r3, r0
 8019588:	f020 0001 	bic.w	r0, r0, #1
 801958c:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8019590:	2b01      	cmp	r3, #1
 8019592:	d912      	bls.n	80195ba <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8019594:	b129      	cbz	r1, 80195a2 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019596:	f000 fbb5 	bl	8019d04 <xQueueGiveMutexRecursive>
 801959a:	2801      	cmp	r0, #1
 801959c:	d110      	bne.n	80195c0 <osMutexRelease+0x42>
  stat = osOK;
 801959e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80195a0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80195a2:	2300      	movs	r3, #0
 80195a4:	461a      	mov	r2, r3
 80195a6:	4619      	mov	r1, r3
 80195a8:	f000 fac2 	bl	8019b30 <xQueueGenericSend>
 80195ac:	2801      	cmp	r0, #1
 80195ae:	d10a      	bne.n	80195c6 <osMutexRelease+0x48>
  stat = osOK;
 80195b0:	2000      	movs	r0, #0
 80195b2:	e7f5      	b.n	80195a0 <osMutexRelease+0x22>
    stat = osErrorISR;
 80195b4:	f06f 0005 	mvn.w	r0, #5
}
 80195b8:	4770      	bx	lr
    stat = osErrorParameter;
 80195ba:	f06f 0003 	mvn.w	r0, #3
 80195be:	e7ef      	b.n	80195a0 <osMutexRelease+0x22>
        stat = osErrorResource;
 80195c0:	f06f 0002 	mvn.w	r0, #2
 80195c4:	e7ec      	b.n	80195a0 <osMutexRelease+0x22>
        stat = osErrorResource;
 80195c6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80195ca:	e7e9      	b.n	80195a0 <osMutexRelease+0x22>

080195cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80195cc:	b570      	push	{r4, r5, r6, lr}
 80195ce:	b082      	sub	sp, #8
 80195d0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d13a      	bne.n	801964e <osMessageQueueNew+0x82>
 80195d8:	4614      	mov	r4, r2
 80195da:	2800      	cmp	r0, #0
 80195dc:	d03b      	beq.n	8019656 <osMessageQueueNew+0x8a>
 80195de:	2900      	cmp	r1, #0
 80195e0:	d03b      	beq.n	801965a <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80195e2:	b36a      	cbz	r2, 8019640 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80195e4:	6893      	ldr	r3, [r2, #8]
 80195e6:	b14b      	cbz	r3, 80195fc <osMessageQueueNew+0x30>
 80195e8:	68d2      	ldr	r2, [r2, #12]
 80195ea:	2a4f      	cmp	r2, #79	@ 0x4f
 80195ec:	d906      	bls.n	80195fc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80195ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80195f0:	b122      	cbz	r2, 80195fc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80195f2:	fb01 f500 	mul.w	r5, r1, r0
 80195f6:	6966      	ldr	r6, [r4, #20]
 80195f8:	42ae      	cmp	r6, r5
 80195fa:	d21b      	bcs.n	8019634 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80195fc:	b173      	cbz	r3, 801961c <osMessageQueueNew+0x50>
    mem = -1;
 80195fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8019602:	bb63      	cbnz	r3, 801965e <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8019604:	2200      	movs	r2, #0
 8019606:	f000 fa6f 	bl	8019ae8 <xQueueGenericCreate>
 801960a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801960c:	b305      	cbz	r5, 8019650 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 801960e:	b104      	cbz	r4, 8019612 <osMessageQueueNew+0x46>
        name = attr->name;
 8019610:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8019612:	4621      	mov	r1, r4
 8019614:	4628      	mov	r0, r5
 8019616:	f000 fec3 	bl	801a3a0 <vQueueAddToRegistry>
 801961a:	e019      	b.n	8019650 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801961c:	68e3      	ldr	r3, [r4, #12]
 801961e:	b98b      	cbnz	r3, 8019644 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019620:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019622:	b113      	cbz	r3, 801962a <osMessageQueueNew+0x5e>
    mem = -1;
 8019624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019628:	e7eb      	b.n	8019602 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801962a:	6963      	ldr	r3, [r4, #20]
 801962c:	b16b      	cbz	r3, 801964a <osMessageQueueNew+0x7e>
    mem = -1;
 801962e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019632:	e7e6      	b.n	8019602 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8019634:	2500      	movs	r5, #0
 8019636:	9500      	str	r5, [sp, #0]
 8019638:	f000 fa0c 	bl	8019a54 <xQueueGenericCreateStatic>
 801963c:	4605      	mov	r5, r0
 801963e:	e7e5      	b.n	801960c <osMessageQueueNew+0x40>
      mem = 0;
 8019640:	2300      	movs	r3, #0
 8019642:	e7de      	b.n	8019602 <osMessageQueueNew+0x36>
    mem = -1;
 8019644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019648:	e7db      	b.n	8019602 <osMessageQueueNew+0x36>
          mem = 0;
 801964a:	2300      	movs	r3, #0
 801964c:	e7d9      	b.n	8019602 <osMessageQueueNew+0x36>
  hQueue = NULL;
 801964e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8019650:	4628      	mov	r0, r5
 8019652:	b002      	add	sp, #8
 8019654:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8019656:	2500      	movs	r5, #0
 8019658:	e7fa      	b.n	8019650 <osMessageQueueNew+0x84>
 801965a:	2500      	movs	r5, #0
 801965c:	e7f8      	b.n	8019650 <osMessageQueueNew+0x84>
 801965e:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8019660:	e7f6      	b.n	8019650 <osMessageQueueNew+0x84>

08019662 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8019662:	b510      	push	{r4, lr}
 8019664:	b082      	sub	sp, #8
 8019666:	461c      	mov	r4, r3
 8019668:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801966c:	b1c3      	cbz	r3, 80196a0 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801966e:	b318      	cbz	r0, 80196b8 <osMessageQueuePut+0x56>
 8019670:	b329      	cbz	r1, 80196be <osMessageQueuePut+0x5c>
 8019672:	bb3c      	cbnz	r4, 80196c4 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8019674:	2300      	movs	r3, #0
 8019676:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019678:	aa01      	add	r2, sp, #4
 801967a:	f000 fb63 	bl	8019d44 <xQueueGenericSendFromISR>
 801967e:	2801      	cmp	r0, #1
 8019680:	d123      	bne.n	80196ca <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8019682:	9801      	ldr	r0, [sp, #4]
 8019684:	b150      	cbz	r0, 801969c <osMessageQueuePut+0x3a>
 8019686:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801968a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801968e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019692:	f3bf 8f4f 	dsb	sy
 8019696:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801969a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801969c:	b002      	add	sp, #8
 801969e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80196a0:	b1b0      	cbz	r0, 80196d0 <osMessageQueuePut+0x6e>
 80196a2:	b1c1      	cbz	r1, 80196d6 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80196a4:	2300      	movs	r3, #0
 80196a6:	4622      	mov	r2, r4
 80196a8:	f000 fa42 	bl	8019b30 <xQueueGenericSend>
 80196ac:	2801      	cmp	r0, #1
 80196ae:	d015      	beq.n	80196dc <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80196b0:	b1b4      	cbz	r4, 80196e0 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80196b2:	f06f 0001 	mvn.w	r0, #1
 80196b6:	e7f1      	b.n	801969c <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80196b8:	f06f 0003 	mvn.w	r0, #3
 80196bc:	e7ee      	b.n	801969c <osMessageQueuePut+0x3a>
 80196be:	f06f 0003 	mvn.w	r0, #3
 80196c2:	e7eb      	b.n	801969c <osMessageQueuePut+0x3a>
 80196c4:	f06f 0003 	mvn.w	r0, #3
 80196c8:	e7e8      	b.n	801969c <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80196ca:	f06f 0002 	mvn.w	r0, #2
 80196ce:	e7e5      	b.n	801969c <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80196d0:	f06f 0003 	mvn.w	r0, #3
 80196d4:	e7e2      	b.n	801969c <osMessageQueuePut+0x3a>
 80196d6:	f06f 0003 	mvn.w	r0, #3
 80196da:	e7df      	b.n	801969c <osMessageQueuePut+0x3a>
  stat = osOK;
 80196dc:	2000      	movs	r0, #0
 80196de:	e7dd      	b.n	801969c <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80196e0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80196e4:	e7da      	b.n	801969c <osMessageQueuePut+0x3a>

080196e6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80196e6:	b510      	push	{r4, lr}
 80196e8:	b082      	sub	sp, #8
 80196ea:	461c      	mov	r4, r3
 80196ec:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80196f0:	b1c3      	cbz	r3, 8019724 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80196f2:	b310      	cbz	r0, 801973a <osMessageQueueGet+0x54>
 80196f4:	b321      	cbz	r1, 8019740 <osMessageQueueGet+0x5a>
 80196f6:	bb34      	cbnz	r4, 8019746 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80196f8:	2300      	movs	r3, #0
 80196fa:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80196fc:	aa01      	add	r2, sp, #4
 80196fe:	f000 fdd9 	bl	801a2b4 <xQueueReceiveFromISR>
 8019702:	2801      	cmp	r0, #1
 8019704:	d122      	bne.n	801974c <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8019706:	9801      	ldr	r0, [sp, #4]
 8019708:	b150      	cbz	r0, 8019720 <osMessageQueueGet+0x3a>
 801970a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801970e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019712:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019716:	f3bf 8f4f 	dsb	sy
 801971a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801971e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8019720:	b002      	add	sp, #8
 8019722:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019724:	b1a8      	cbz	r0, 8019752 <osMessageQueueGet+0x6c>
 8019726:	b1b9      	cbz	r1, 8019758 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019728:	4622      	mov	r2, r4
 801972a:	f000 fb72 	bl	8019e12 <xQueueReceive>
 801972e:	2801      	cmp	r0, #1
 8019730:	d015      	beq.n	801975e <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8019732:	b1b4      	cbz	r4, 8019762 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8019734:	f06f 0001 	mvn.w	r0, #1
 8019738:	e7f2      	b.n	8019720 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 801973a:	f06f 0003 	mvn.w	r0, #3
 801973e:	e7ef      	b.n	8019720 <osMessageQueueGet+0x3a>
 8019740:	f06f 0003 	mvn.w	r0, #3
 8019744:	e7ec      	b.n	8019720 <osMessageQueueGet+0x3a>
 8019746:	f06f 0003 	mvn.w	r0, #3
 801974a:	e7e9      	b.n	8019720 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 801974c:	f06f 0002 	mvn.w	r0, #2
 8019750:	e7e6      	b.n	8019720 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8019752:	f06f 0003 	mvn.w	r0, #3
 8019756:	e7e3      	b.n	8019720 <osMessageQueueGet+0x3a>
 8019758:	f06f 0003 	mvn.w	r0, #3
 801975c:	e7e0      	b.n	8019720 <osMessageQueueGet+0x3a>
  stat = osOK;
 801975e:	2000      	movs	r0, #0
 8019760:	e7de      	b.n	8019720 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8019762:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8019766:	e7db      	b.n	8019720 <osMessageQueueGet+0x3a>

08019768 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8019768:	b148      	cbz	r0, 801977e <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801976a:	b508      	push	{r3, lr}
 801976c:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8019770:	b112      	cbz	r2, 8019778 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8019772:	f000 fe09 	bl	801a388 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8019776:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8019778:	f000 fdf3 	bl	801a362 <uxQueueMessagesWaiting>
 801977c:	e7fb      	b.n	8019776 <osMessageQueueGetCount+0xe>
    count = 0U;
 801977e:	2000      	movs	r0, #0
}
 8019780:	4770      	bx	lr

08019782 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8019782:	b508      	push	{r3, lr}
 8019784:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8019788:	b92b      	cbnz	r3, 8019796 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 801978a:	b138      	cbz	r0, 801979c <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 801978c:	2100      	movs	r1, #0
 801978e:	f000 f90e 	bl	80199ae <xQueueGenericReset>
    stat = osOK;
 8019792:	2000      	movs	r0, #0
  }

  return (stat);
}
 8019794:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8019796:	f06f 0005 	mvn.w	r0, #5
 801979a:	e7fb      	b.n	8019794 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 801979c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80197a0:	e7f8      	b.n	8019794 <osMessageQueueReset+0x12>
	...

080197a4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80197a4:	4b03      	ldr	r3, [pc, #12]	@ (80197b4 <vApplicationGetIdleTaskMemory+0x10>)
 80197a6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80197a8:	4b03      	ldr	r3, [pc, #12]	@ (80197b8 <vApplicationGetIdleTaskMemory+0x14>)
 80197aa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80197ac:	2380      	movs	r3, #128	@ 0x80
 80197ae:	6013      	str	r3, [r2, #0]
}
 80197b0:	4770      	bx	lr
 80197b2:	bf00      	nop
 80197b4:	20003568 	.word	0x20003568
 80197b8:	20003368 	.word	0x20003368

080197bc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80197bc:	4b03      	ldr	r3, [pc, #12]	@ (80197cc <vApplicationGetTimerTaskMemory+0x10>)
 80197be:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80197c0:	4b03      	ldr	r3, [pc, #12]	@ (80197d0 <vApplicationGetTimerTaskMemory+0x14>)
 80197c2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80197c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80197c8:	6013      	str	r3, [r2, #0]
}
 80197ca:	4770      	bx	lr
 80197cc:	200031e8 	.word	0x200031e8
 80197d0:	20002de4 	.word	0x20002de4

080197d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197d4:	f100 0308 	add.w	r3, r0, #8
 80197d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80197da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80197de:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80197e4:	2300      	movs	r3, #0
 80197e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80197e8:	4770      	bx	lr

080197ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80197ea:	2300      	movs	r3, #0
 80197ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80197ee:	4770      	bx	lr

080197f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80197f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80197f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80197f4:	689a      	ldr	r2, [r3, #8]
 80197f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80197f8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80197fa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80197fc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80197fe:	6803      	ldr	r3, [r0, #0]
 8019800:	3301      	adds	r3, #1
 8019802:	6003      	str	r3, [r0, #0]
}
 8019804:	4770      	bx	lr

08019806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019806:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019808:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801980a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801980e:	d011      	beq.n	8019834 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019810:	f100 0308 	add.w	r3, r0, #8
 8019814:	461c      	mov	r4, r3
 8019816:	685b      	ldr	r3, [r3, #4]
 8019818:	681a      	ldr	r2, [r3, #0]
 801981a:	42aa      	cmp	r2, r5
 801981c:	d9fa      	bls.n	8019814 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801981e:	6863      	ldr	r3, [r4, #4]
 8019820:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019822:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019824:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8019826:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019828:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801982a:	6803      	ldr	r3, [r0, #0]
 801982c:	3301      	adds	r3, #1
 801982e:	6003      	str	r3, [r0, #0]
}
 8019830:	bc30      	pop	{r4, r5}
 8019832:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8019834:	6904      	ldr	r4, [r0, #16]
 8019836:	e7f2      	b.n	801981e <vListInsert+0x18>

08019838 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019838:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801983a:	6841      	ldr	r1, [r0, #4]
 801983c:	6882      	ldr	r2, [r0, #8]
 801983e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019840:	6841      	ldr	r1, [r0, #4]
 8019842:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019844:	685a      	ldr	r2, [r3, #4]
 8019846:	4282      	cmp	r2, r0
 8019848:	d006      	beq.n	8019858 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801984a:	2200      	movs	r2, #0
 801984c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801984e:	681a      	ldr	r2, [r3, #0]
 8019850:	3a01      	subs	r2, #1
 8019852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019854:	6818      	ldr	r0, [r3, #0]
}
 8019856:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019858:	6882      	ldr	r2, [r0, #8]
 801985a:	605a      	str	r2, [r3, #4]
 801985c:	e7f5      	b.n	801984a <uxListRemove+0x12>

0801985e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801985e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019860:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019862:	b118      	cbz	r0, 801986c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019866:	6818      	ldr	r0, [r3, #0]
 8019868:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 801986c:	4770      	bx	lr

0801986e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801986e:	b510      	push	{r4, lr}
 8019870:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019872:	f001 fe47 	bl	801b504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019876:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8019878:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801987a:	429a      	cmp	r2, r3
 801987c:	d004      	beq.n	8019888 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801987e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8019880:	f001 fe62 	bl	801b548 <vPortExitCritical>

	return xReturn;
}
 8019884:	4620      	mov	r0, r4
 8019886:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8019888:	2401      	movs	r4, #1
 801988a:	e7f9      	b.n	8019880 <prvIsQueueFull+0x12>

0801988c <prvIsQueueEmpty>:
{
 801988c:	b510      	push	{r4, lr}
 801988e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019890:	f001 fe38 	bl	801b504 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019894:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019896:	b923      	cbnz	r3, 80198a2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8019898:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801989a:	f001 fe55 	bl	801b548 <vPortExitCritical>
}
 801989e:	4620      	mov	r0, r4
 80198a0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80198a2:	2400      	movs	r4, #0
 80198a4:	e7f9      	b.n	801989a <prvIsQueueEmpty+0xe>

080198a6 <prvCopyDataToQueue>:
{
 80198a6:	b570      	push	{r4, r5, r6, lr}
 80198a8:	4604      	mov	r4, r0
 80198aa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80198ac:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80198ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80198b0:	b95a      	cbnz	r2, 80198ca <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80198b2:	6803      	ldr	r3, [r0, #0]
 80198b4:	b11b      	cbz	r3, 80198be <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80198b6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80198b8:	3601      	adds	r6, #1
 80198ba:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80198bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80198be:	6880      	ldr	r0, [r0, #8]
 80198c0:	f001 faea 	bl	801ae98 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80198c4:	2300      	movs	r3, #0
 80198c6:	60a3      	str	r3, [r4, #8]
 80198c8:	e7f6      	b.n	80198b8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80198ca:	b96d      	cbnz	r5, 80198e8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80198cc:	6840      	ldr	r0, [r0, #4]
 80198ce:	f015 fd85 	bl	802f3dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80198d2:	6863      	ldr	r3, [r4, #4]
 80198d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80198d6:	4413      	add	r3, r2
 80198d8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80198da:	68a2      	ldr	r2, [r4, #8]
 80198dc:	4293      	cmp	r3, r2
 80198de:	d319      	bcc.n	8019914 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80198e0:	6823      	ldr	r3, [r4, #0]
 80198e2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80198e4:	4628      	mov	r0, r5
 80198e6:	e7e7      	b.n	80198b8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80198e8:	68c0      	ldr	r0, [r0, #12]
 80198ea:	f015 fd77 	bl	802f3dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80198ee:	68e3      	ldr	r3, [r4, #12]
 80198f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80198f2:	4251      	negs	r1, r2
 80198f4:	1a9b      	subs	r3, r3, r2
 80198f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80198f8:	6822      	ldr	r2, [r4, #0]
 80198fa:	4293      	cmp	r3, r2
 80198fc:	d202      	bcs.n	8019904 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80198fe:	68a3      	ldr	r3, [r4, #8]
 8019900:	440b      	add	r3, r1
 8019902:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8019904:	2d02      	cmp	r5, #2
 8019906:	d001      	beq.n	801990c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8019908:	2000      	movs	r0, #0
 801990a:	e7d5      	b.n	80198b8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801990c:	b126      	cbz	r6, 8019918 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801990e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8019910:	2000      	movs	r0, #0
 8019912:	e7d1      	b.n	80198b8 <prvCopyDataToQueue+0x12>
 8019914:	4628      	mov	r0, r5
 8019916:	e7cf      	b.n	80198b8 <prvCopyDataToQueue+0x12>
 8019918:	2000      	movs	r0, #0
 801991a:	e7cd      	b.n	80198b8 <prvCopyDataToQueue+0x12>

0801991c <prvCopyDataFromQueue>:
{
 801991c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801991e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8019920:	b16a      	cbz	r2, 801993e <prvCopyDataFromQueue+0x22>
{
 8019922:	b510      	push	{r4, lr}
 8019924:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019926:	68d9      	ldr	r1, [r3, #12]
 8019928:	4411      	add	r1, r2
 801992a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801992c:	689c      	ldr	r4, [r3, #8]
 801992e:	42a1      	cmp	r1, r4
 8019930:	d301      	bcc.n	8019936 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019932:	6819      	ldr	r1, [r3, #0]
 8019934:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019936:	68d9      	ldr	r1, [r3, #12]
 8019938:	f015 fd50 	bl	802f3dc <memcpy>
}
 801993c:	bd10      	pop	{r4, pc}
 801993e:	4770      	bx	lr

08019940 <prvUnlockQueue>:
{
 8019940:	b538      	push	{r3, r4, r5, lr}
 8019942:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8019944:	f001 fdde 	bl	801b504 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8019948:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 801994c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801994e:	e001      	b.n	8019954 <prvUnlockQueue+0x14>
			--cTxLock;
 8019950:	3c01      	subs	r4, #1
 8019952:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019954:	2c00      	cmp	r4, #0
 8019956:	dd0a      	ble.n	801996e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019958:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801995a:	b143      	cbz	r3, 801996e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801995c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8019960:	f001 f99e 	bl	801aca0 <xTaskRemoveFromEventList>
 8019964:	2800      	cmp	r0, #0
 8019966:	d0f3      	beq.n	8019950 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8019968:	f001 fa2e 	bl	801adc8 <vTaskMissedYield>
 801996c:	e7f0      	b.n	8019950 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 801996e:	23ff      	movs	r3, #255	@ 0xff
 8019970:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8019974:	f001 fde8 	bl	801b548 <vPortExitCritical>
	taskENTER_CRITICAL();
 8019978:	f001 fdc4 	bl	801b504 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801997c:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8019980:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019982:	e001      	b.n	8019988 <prvUnlockQueue+0x48>
				--cRxLock;
 8019984:	3c01      	subs	r4, #1
 8019986:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019988:	2c00      	cmp	r4, #0
 801998a:	dd0a      	ble.n	80199a2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801998c:	692b      	ldr	r3, [r5, #16]
 801998e:	b143      	cbz	r3, 80199a2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019990:	f105 0010 	add.w	r0, r5, #16
 8019994:	f001 f984 	bl	801aca0 <xTaskRemoveFromEventList>
 8019998:	2800      	cmp	r0, #0
 801999a:	d0f3      	beq.n	8019984 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 801999c:	f001 fa14 	bl	801adc8 <vTaskMissedYield>
 80199a0:	e7f0      	b.n	8019984 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80199a2:	23ff      	movs	r3, #255	@ 0xff
 80199a4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80199a8:	f001 fdce 	bl	801b548 <vPortExitCritical>
}
 80199ac:	bd38      	pop	{r3, r4, r5, pc}

080199ae <xQueueGenericReset>:
{
 80199ae:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80199b0:	b1e0      	cbz	r0, 80199ec <xQueueGenericReset+0x3e>
 80199b2:	460d      	mov	r5, r1
 80199b4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80199b6:	f001 fda5 	bl	801b504 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80199ba:	6823      	ldr	r3, [r4, #0]
 80199bc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80199be:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80199c0:	fb01 3002 	mla	r0, r1, r2, r3
 80199c4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80199c6:	2000      	movs	r0, #0
 80199c8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80199ca:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80199cc:	3a01      	subs	r2, #1
 80199ce:	fb02 3301 	mla	r3, r2, r1, r3
 80199d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80199d4:	23ff      	movs	r3, #255	@ 0xff
 80199d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80199da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80199de:	b9fd      	cbnz	r5, 8019a20 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80199e0:	6923      	ldr	r3, [r4, #16]
 80199e2:	b963      	cbnz	r3, 80199fe <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80199e4:	f001 fdb0 	bl	801b548 <vPortExitCritical>
}
 80199e8:	2001      	movs	r0, #1
 80199ea:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80199ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199f0:	f383 8811 	msr	BASEPRI, r3
 80199f4:	f3bf 8f6f 	isb	sy
 80199f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80199fc:	e7fe      	b.n	80199fc <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80199fe:	f104 0010 	add.w	r0, r4, #16
 8019a02:	f001 f94d 	bl	801aca0 <xTaskRemoveFromEventList>
 8019a06:	2800      	cmp	r0, #0
 8019a08:	d0ec      	beq.n	80199e4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8019a0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019a16:	f3bf 8f4f 	dsb	sy
 8019a1a:	f3bf 8f6f 	isb	sy
 8019a1e:	e7e1      	b.n	80199e4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019a20:	f104 0010 	add.w	r0, r4, #16
 8019a24:	f7ff fed6 	bl	80197d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019a28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019a2c:	f7ff fed2 	bl	80197d4 <vListInitialise>
 8019a30:	e7d8      	b.n	80199e4 <xQueueGenericReset+0x36>

08019a32 <prvInitialiseNewQueue>:
{
 8019a32:	b538      	push	{r3, r4, r5, lr}
 8019a34:	461d      	mov	r5, r3
 8019a36:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8019a38:	460b      	mov	r3, r1
 8019a3a:	b949      	cbnz	r1, 8019a50 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019a3c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8019a3e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019a40:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019a42:	2101      	movs	r1, #1
 8019a44:	4620      	mov	r0, r4
 8019a46:	f7ff ffb2 	bl	80199ae <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8019a4a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8019a4e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019a50:	6022      	str	r2, [r4, #0]
 8019a52:	e7f4      	b.n	8019a3e <prvInitialiseNewQueue+0xc>

08019a54 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019a54:	b940      	cbnz	r0, 8019a68 <xQueueGenericCreateStatic+0x14>
 8019a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a5a:	f383 8811 	msr	BASEPRI, r3
 8019a5e:	f3bf 8f6f 	isb	sy
 8019a62:	f3bf 8f4f 	dsb	sy
 8019a66:	e7fe      	b.n	8019a66 <xQueueGenericCreateStatic+0x12>
	{
 8019a68:	b510      	push	{r4, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	461c      	mov	r4, r3
 8019a6e:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8019a70:	b153      	cbz	r3, 8019a88 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019a72:	b192      	cbz	r2, 8019a9a <xQueueGenericCreateStatic+0x46>
 8019a74:	b989      	cbnz	r1, 8019a9a <xQueueGenericCreateStatic+0x46>
 8019a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a7a:	f383 8811 	msr	BASEPRI, r3
 8019a7e:	f3bf 8f6f 	isb	sy
 8019a82:	f3bf 8f4f 	dsb	sy
 8019a86:	e7fe      	b.n	8019a86 <xQueueGenericCreateStatic+0x32>
 8019a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a8c:	f383 8811 	msr	BASEPRI, r3
 8019a90:	f3bf 8f6f 	isb	sy
 8019a94:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8019a98:	e7fe      	b.n	8019a98 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019a9a:	b16a      	cbz	r2, 8019ab8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019a9c:	2350      	movs	r3, #80	@ 0x50
 8019a9e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019aa0:	9b03      	ldr	r3, [sp, #12]
 8019aa2:	2b50      	cmp	r3, #80	@ 0x50
 8019aa4:	d013      	beq.n	8019ace <xQueueGenericCreateStatic+0x7a>
 8019aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aaa:	f383 8811 	msr	BASEPRI, r3
 8019aae:	f3bf 8f6f 	isb	sy
 8019ab2:	f3bf 8f4f 	dsb	sy
 8019ab6:	e7fe      	b.n	8019ab6 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019ab8:	2900      	cmp	r1, #0
 8019aba:	d0ef      	beq.n	8019a9c <xQueueGenericCreateStatic+0x48>
 8019abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ac0:	f383 8811 	msr	BASEPRI, r3
 8019ac4:	f3bf 8f6f 	isb	sy
 8019ac8:	f3bf 8f4f 	dsb	sy
 8019acc:	e7fe      	b.n	8019acc <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019ace:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019ad6:	9400      	str	r4, [sp, #0]
 8019ad8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019adc:	4660      	mov	r0, ip
 8019ade:	f7ff ffa8 	bl	8019a32 <prvInitialiseNewQueue>
	}
 8019ae2:	4620      	mov	r0, r4
 8019ae4:	b004      	add	sp, #16
 8019ae6:	bd10      	pop	{r4, pc}

08019ae8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019ae8:	b940      	cbnz	r0, 8019afc <xQueueGenericCreate+0x14>
 8019aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aee:	f383 8811 	msr	BASEPRI, r3
 8019af2:	f3bf 8f6f 	isb	sy
 8019af6:	f3bf 8f4f 	dsb	sy
 8019afa:	e7fe      	b.n	8019afa <xQueueGenericCreate+0x12>
	{
 8019afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019afe:	b083      	sub	sp, #12
 8019b00:	460d      	mov	r5, r1
 8019b02:	4614      	mov	r4, r2
 8019b04:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b06:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019b0a:	3050      	adds	r0, #80	@ 0x50
 8019b0c:	f001 feb4 	bl	801b878 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8019b10:	4607      	mov	r7, r0
 8019b12:	b150      	cbz	r0, 8019b2a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019b14:	2300      	movs	r3, #0
 8019b16:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019b1a:	9000      	str	r0, [sp, #0]
 8019b1c:	4623      	mov	r3, r4
 8019b1e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8019b22:	4629      	mov	r1, r5
 8019b24:	4630      	mov	r0, r6
 8019b26:	f7ff ff84 	bl	8019a32 <prvInitialiseNewQueue>
	}
 8019b2a:	4638      	mov	r0, r7
 8019b2c:	b003      	add	sp, #12
 8019b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b30 <xQueueGenericSend>:
{
 8019b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b32:	b085      	sub	sp, #20
 8019b34:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8019b36:	b188      	cbz	r0, 8019b5c <xQueueGenericSend+0x2c>
 8019b38:	460f      	mov	r7, r1
 8019b3a:	461d      	mov	r5, r3
 8019b3c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019b3e:	b1b1      	cbz	r1, 8019b6e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019b40:	2d02      	cmp	r5, #2
 8019b42:	d120      	bne.n	8019b86 <xQueueGenericSend+0x56>
 8019b44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	d01d      	beq.n	8019b86 <xQueueGenericSend+0x56>
 8019b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b4e:	f383 8811 	msr	BASEPRI, r3
 8019b52:	f3bf 8f6f 	isb	sy
 8019b56:	f3bf 8f4f 	dsb	sy
 8019b5a:	e7fe      	b.n	8019b5a <xQueueGenericSend+0x2a>
 8019b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b60:	f383 8811 	msr	BASEPRI, r3
 8019b64:	f3bf 8f6f 	isb	sy
 8019b68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019b6c:	e7fe      	b.n	8019b6c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019b6e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d0e5      	beq.n	8019b40 <xQueueGenericSend+0x10>
 8019b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b78:	f383 8811 	msr	BASEPRI, r3
 8019b7c:	f3bf 8f6f 	isb	sy
 8019b80:	f3bf 8f4f 	dsb	sy
 8019b84:	e7fe      	b.n	8019b84 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019b86:	f001 f92b 	bl	801ade0 <xTaskGetSchedulerState>
 8019b8a:	4606      	mov	r6, r0
 8019b8c:	b958      	cbnz	r0, 8019ba6 <xQueueGenericSend+0x76>
 8019b8e:	9b01      	ldr	r3, [sp, #4]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d048      	beq.n	8019c26 <xQueueGenericSend+0xf6>
 8019b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b98:	f383 8811 	msr	BASEPRI, r3
 8019b9c:	f3bf 8f6f 	isb	sy
 8019ba0:	f3bf 8f4f 	dsb	sy
 8019ba4:	e7fe      	b.n	8019ba4 <xQueueGenericSend+0x74>
 8019ba6:	2600      	movs	r6, #0
 8019ba8:	e03d      	b.n	8019c26 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019baa:	462a      	mov	r2, r5
 8019bac:	4639      	mov	r1, r7
 8019bae:	4620      	mov	r0, r4
 8019bb0:	f7ff fe79 	bl	80198a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019bb4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019bb6:	b97b      	cbnz	r3, 8019bd8 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8019bb8:	b148      	cbz	r0, 8019bce <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8019bba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019bc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019bc6:	f3bf 8f4f 	dsb	sy
 8019bca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8019bce:	f001 fcbb 	bl	801b548 <vPortExitCritical>
				return pdPASS;
 8019bd2:	2001      	movs	r0, #1
}
 8019bd4:	b005      	add	sp, #20
 8019bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019bd8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019bdc:	f001 f860 	bl	801aca0 <xTaskRemoveFromEventList>
 8019be0:	2800      	cmp	r0, #0
 8019be2:	d0f4      	beq.n	8019bce <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8019be4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019bec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019bf0:	f3bf 8f4f 	dsb	sy
 8019bf4:	f3bf 8f6f 	isb	sy
 8019bf8:	e7e9      	b.n	8019bce <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8019bfa:	f001 fca5 	bl	801b548 <vPortExitCritical>
					return errQUEUE_FULL;
 8019bfe:	2000      	movs	r0, #0
 8019c00:	e7e8      	b.n	8019bd4 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019c02:	a802      	add	r0, sp, #8
 8019c04:	f001 f892 	bl	801ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019c08:	2601      	movs	r6, #1
 8019c0a:	e019      	b.n	8019c40 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019c12:	e021      	b.n	8019c58 <xQueueGenericSend+0x128>
 8019c14:	2300      	movs	r3, #0
 8019c16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019c1a:	e023      	b.n	8019c64 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	f7ff fe8f 	bl	8019940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019c22:	f000 ff15 	bl	801aa50 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8019c26:	f001 fc6d 	bl	801b504 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019c2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8019c2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019c2e:	429a      	cmp	r2, r3
 8019c30:	d3bb      	bcc.n	8019baa <xQueueGenericSend+0x7a>
 8019c32:	2d02      	cmp	r5, #2
 8019c34:	d0b9      	beq.n	8019baa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019c36:	9b01      	ldr	r3, [sp, #4]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d0de      	beq.n	8019bfa <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8019c3c:	2e00      	cmp	r6, #0
 8019c3e:	d0e0      	beq.n	8019c02 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8019c40:	f001 fc82 	bl	801b548 <vPortExitCritical>
		vTaskSuspendAll();
 8019c44:	f000 fe6a 	bl	801a91c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019c48:	f001 fc5c 	bl	801b504 <vPortEnterCritical>
 8019c4c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8019c50:	b252      	sxtb	r2, r2
 8019c52:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019c56:	d0d9      	beq.n	8019c0c <xQueueGenericSend+0xdc>
 8019c58:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8019c5c:	b252      	sxtb	r2, r2
 8019c5e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019c62:	d0d7      	beq.n	8019c14 <xQueueGenericSend+0xe4>
 8019c64:	f001 fc70 	bl	801b548 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019c68:	a901      	add	r1, sp, #4
 8019c6a:	a802      	add	r0, sp, #8
 8019c6c:	f001 f86a 	bl	801ad44 <xTaskCheckForTimeOut>
 8019c70:	b9d8      	cbnz	r0, 8019caa <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019c72:	4620      	mov	r0, r4
 8019c74:	f7ff fdfb 	bl	801986e <prvIsQueueFull>
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	d0cf      	beq.n	8019c1c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019c7c:	9901      	ldr	r1, [sp, #4]
 8019c7e:	f104 0010 	add.w	r0, r4, #16
 8019c82:	f000 ffd9 	bl	801ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019c86:	4620      	mov	r0, r4
 8019c88:	f7ff fe5a 	bl	8019940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019c8c:	f000 fee0 	bl	801aa50 <xTaskResumeAll>
 8019c90:	2800      	cmp	r0, #0
 8019c92:	d1c8      	bne.n	8019c26 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8019c94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019c9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019ca0:	f3bf 8f4f 	dsb	sy
 8019ca4:	f3bf 8f6f 	isb	sy
 8019ca8:	e7bd      	b.n	8019c26 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8019caa:	4620      	mov	r0, r4
 8019cac:	f7ff fe48 	bl	8019940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019cb0:	f000 fece 	bl	801aa50 <xTaskResumeAll>
			return errQUEUE_FULL;
 8019cb4:	2000      	movs	r0, #0
 8019cb6:	e78d      	b.n	8019bd4 <xQueueGenericSend+0xa4>

08019cb8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8019cb8:	b148      	cbz	r0, 8019cce <prvInitialiseMutex+0x16>
	{
 8019cba:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019cc0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019cc2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019cc4:	460b      	mov	r3, r1
 8019cc6:	460a      	mov	r2, r1
 8019cc8:	f7ff ff32 	bl	8019b30 <xQueueGenericSend>
	}
 8019ccc:	bd08      	pop	{r3, pc}
 8019cce:	4770      	bx	lr

08019cd0 <xQueueCreateMutex>:
	{
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019cd4:	2100      	movs	r1, #0
 8019cd6:	2001      	movs	r0, #1
 8019cd8:	f7ff ff06 	bl	8019ae8 <xQueueGenericCreate>
 8019cdc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019cde:	f7ff ffeb 	bl	8019cb8 <prvInitialiseMutex>
	}
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	bd10      	pop	{r4, pc}

08019ce6 <xQueueCreateMutexStatic>:
	{
 8019ce6:	b510      	push	{r4, lr}
 8019ce8:	b082      	sub	sp, #8
 8019cea:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019cec:	9000      	str	r0, [sp, #0]
 8019cee:	2200      	movs	r2, #0
 8019cf0:	4611      	mov	r1, r2
 8019cf2:	2001      	movs	r0, #1
 8019cf4:	f7ff feae 	bl	8019a54 <xQueueGenericCreateStatic>
 8019cf8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019cfa:	f7ff ffdd 	bl	8019cb8 <prvInitialiseMutex>
	}
 8019cfe:	4620      	mov	r0, r4
 8019d00:	b002      	add	sp, #8
 8019d02:	bd10      	pop	{r4, pc}

08019d04 <xQueueGiveMutexRecursive>:
	{
 8019d04:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8019d06:	b138      	cbz	r0, 8019d18 <xQueueGiveMutexRecursive+0x14>
 8019d08:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019d0a:	6885      	ldr	r5, [r0, #8]
 8019d0c:	f001 f862 	bl	801add4 <xTaskGetCurrentTaskHandle>
 8019d10:	4285      	cmp	r5, r0
 8019d12:	d00a      	beq.n	8019d2a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8019d14:	2000      	movs	r0, #0
	}
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d1c:	f383 8811 	msr	BASEPRI, r3
 8019d20:	f3bf 8f6f 	isb	sy
 8019d24:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019d28:	e7fe      	b.n	8019d28 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8019d2a:	68e3      	ldr	r3, [r4, #12]
 8019d2c:	3b01      	subs	r3, #1
 8019d2e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019d30:	b10b      	cbz	r3, 8019d36 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8019d32:	2001      	movs	r0, #1
		return xReturn;
 8019d34:	e7ef      	b.n	8019d16 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8019d36:	461a      	mov	r2, r3
 8019d38:	4619      	mov	r1, r3
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f7ff fef8 	bl	8019b30 <xQueueGenericSend>
			xReturn = pdPASS;
 8019d40:	2001      	movs	r0, #1
 8019d42:	e7e8      	b.n	8019d16 <xQueueGiveMutexRecursive+0x12>

08019d44 <xQueueGenericSendFromISR>:
{
 8019d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019d48:	b190      	cbz	r0, 8019d70 <xQueueGenericSendFromISR+0x2c>
 8019d4a:	460f      	mov	r7, r1
 8019d4c:	4616      	mov	r6, r2
 8019d4e:	461c      	mov	r4, r3
 8019d50:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019d52:	b1b1      	cbz	r1, 8019d82 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019d54:	2c02      	cmp	r4, #2
 8019d56:	d120      	bne.n	8019d9a <xQueueGenericSendFromISR+0x56>
 8019d58:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d01d      	beq.n	8019d9a <xQueueGenericSendFromISR+0x56>
 8019d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d62:	f383 8811 	msr	BASEPRI, r3
 8019d66:	f3bf 8f6f 	isb	sy
 8019d6a:	f3bf 8f4f 	dsb	sy
 8019d6e:	e7fe      	b.n	8019d6e <xQueueGenericSendFromISR+0x2a>
 8019d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d74:	f383 8811 	msr	BASEPRI, r3
 8019d78:	f3bf 8f6f 	isb	sy
 8019d7c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019d80:	e7fe      	b.n	8019d80 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019d82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d0e5      	beq.n	8019d54 <xQueueGenericSendFromISR+0x10>
 8019d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d8c:	f383 8811 	msr	BASEPRI, r3
 8019d90:	f3bf 8f6f 	isb	sy
 8019d94:	f3bf 8f4f 	dsb	sy
 8019d98:	e7fe      	b.n	8019d98 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019d9a:	f001 fcd9 	bl	801b750 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019d9e:	f3ef 8811 	mrs	r8, BASEPRI
 8019da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019da6:	f383 8811 	msr	BASEPRI, r3
 8019daa:	f3bf 8f6f 	isb	sy
 8019dae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019db2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8019db4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d306      	bcc.n	8019dc8 <xQueueGenericSendFromISR+0x84>
 8019dba:	2c02      	cmp	r4, #2
 8019dbc:	d004      	beq.n	8019dc8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8019dbe:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019dc0:	f388 8811 	msr	BASEPRI, r8
}
 8019dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8019dc8:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8019dcc:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019dd0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019dd2:	4622      	mov	r2, r4
 8019dd4:	4639      	mov	r1, r7
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	f7ff fd65 	bl	80198a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8019ddc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019de0:	d006      	beq.n	8019df0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019de2:	f109 0301 	add.w	r3, r9, #1
 8019de6:	b25b      	sxtb	r3, r3
 8019de8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8019dec:	2001      	movs	r0, #1
 8019dee:	e7e7      	b.n	8019dc0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019df0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8019df2:	b90b      	cbnz	r3, 8019df8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8019df4:	2001      	movs	r0, #1
 8019df6:	e7e3      	b.n	8019dc0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019df8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8019dfc:	f000 ff50 	bl	801aca0 <xTaskRemoveFromEventList>
 8019e00:	b118      	cbz	r0, 8019e0a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8019e02:	b126      	cbz	r6, 8019e0e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019e04:	2001      	movs	r0, #1
 8019e06:	6030      	str	r0, [r6, #0]
 8019e08:	e7da      	b.n	8019dc0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8019e0a:	2001      	movs	r0, #1
 8019e0c:	e7d8      	b.n	8019dc0 <xQueueGenericSendFromISR+0x7c>
 8019e0e:	2001      	movs	r0, #1
 8019e10:	e7d6      	b.n	8019dc0 <xQueueGenericSendFromISR+0x7c>

08019e12 <xQueueReceive>:
{
 8019e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e14:	b085      	sub	sp, #20
 8019e16:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019e18:	b190      	cbz	r0, 8019e40 <xQueueReceive+0x2e>
 8019e1a:	460f      	mov	r7, r1
 8019e1c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019e1e:	b1c1      	cbz	r1, 8019e52 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019e20:	f000 ffde 	bl	801ade0 <xTaskGetSchedulerState>
 8019e24:	4606      	mov	r6, r0
 8019e26:	bb00      	cbnz	r0, 8019e6a <xQueueReceive+0x58>
 8019e28:	9b01      	ldr	r3, [sp, #4]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d05e      	beq.n	8019eec <xQueueReceive+0xda>
	__asm volatile
 8019e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e32:	f383 8811 	msr	BASEPRI, r3
 8019e36:	f3bf 8f6f 	isb	sy
 8019e3a:	f3bf 8f4f 	dsb	sy
 8019e3e:	e7fe      	b.n	8019e3e <xQueueReceive+0x2c>
 8019e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e44:	f383 8811 	msr	BASEPRI, r3
 8019e48:	f3bf 8f6f 	isb	sy
 8019e4c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019e50:	e7fe      	b.n	8019e50 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019e52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d0e3      	beq.n	8019e20 <xQueueReceive+0xe>
 8019e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e5c:	f383 8811 	msr	BASEPRI, r3
 8019e60:	f3bf 8f6f 	isb	sy
 8019e64:	f3bf 8f4f 	dsb	sy
 8019e68:	e7fe      	b.n	8019e68 <xQueueReceive+0x56>
 8019e6a:	2600      	movs	r6, #0
 8019e6c:	e03e      	b.n	8019eec <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019e6e:	4639      	mov	r1, r7
 8019e70:	4620      	mov	r0, r4
 8019e72:	f7ff fd53 	bl	801991c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019e76:	3d01      	subs	r5, #1
 8019e78:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019e7a:	6923      	ldr	r3, [r4, #16]
 8019e7c:	b923      	cbnz	r3, 8019e88 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8019e7e:	f001 fb63 	bl	801b548 <vPortExitCritical>
				return pdPASS;
 8019e82:	2001      	movs	r0, #1
}
 8019e84:	b005      	add	sp, #20
 8019e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019e88:	f104 0010 	add.w	r0, r4, #16
 8019e8c:	f000 ff08 	bl	801aca0 <xTaskRemoveFromEventList>
 8019e90:	2800      	cmp	r0, #0
 8019e92:	d0f4      	beq.n	8019e7e <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8019e94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019ea0:	f3bf 8f4f 	dsb	sy
 8019ea4:	f3bf 8f6f 	isb	sy
 8019ea8:	e7e9      	b.n	8019e7e <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8019eaa:	f001 fb4d 	bl	801b548 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019eae:	2000      	movs	r0, #0
 8019eb0:	e7e8      	b.n	8019e84 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019eb2:	a802      	add	r0, sp, #8
 8019eb4:	f000 ff3a 	bl	801ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019eb8:	2601      	movs	r6, #1
 8019eba:	e021      	b.n	8019f00 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019ec2:	e029      	b.n	8019f18 <xQueueReceive+0x106>
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019eca:	e02b      	b.n	8019f24 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f7ff fd37 	bl	8019940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019ed2:	f000 fdbd 	bl	801aa50 <xTaskResumeAll>
 8019ed6:	e009      	b.n	8019eec <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8019ed8:	4620      	mov	r0, r4
 8019eda:	f7ff fd31 	bl	8019940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019ede:	f000 fdb7 	bl	801aa50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	f7ff fcd2 	bl	801988c <prvIsQueueEmpty>
 8019ee8:	2800      	cmp	r0, #0
 8019eea:	d13f      	bne.n	8019f6c <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8019eec:	f001 fb0a 	bl	801b504 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019ef0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019ef2:	2d00      	cmp	r5, #0
 8019ef4:	d1bb      	bne.n	8019e6e <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019ef6:	9b01      	ldr	r3, [sp, #4]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d0d6      	beq.n	8019eaa <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8019efc:	2e00      	cmp	r6, #0
 8019efe:	d0d8      	beq.n	8019eb2 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8019f00:	f001 fb22 	bl	801b548 <vPortExitCritical>
		vTaskSuspendAll();
 8019f04:	f000 fd0a 	bl	801a91c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019f08:	f001 fafc 	bl	801b504 <vPortEnterCritical>
 8019f0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019f10:	b25b      	sxtb	r3, r3
 8019f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019f16:	d0d1      	beq.n	8019ebc <xQueueReceive+0xaa>
 8019f18:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019f1c:	b25b      	sxtb	r3, r3
 8019f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019f22:	d0cf      	beq.n	8019ec4 <xQueueReceive+0xb2>
 8019f24:	f001 fb10 	bl	801b548 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019f28:	a901      	add	r1, sp, #4
 8019f2a:	a802      	add	r0, sp, #8
 8019f2c:	f000 ff0a 	bl	801ad44 <xTaskCheckForTimeOut>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	d1d1      	bne.n	8019ed8 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f34:	4620      	mov	r0, r4
 8019f36:	f7ff fca9 	bl	801988c <prvIsQueueEmpty>
 8019f3a:	2800      	cmp	r0, #0
 8019f3c:	d0c6      	beq.n	8019ecc <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019f3e:	9901      	ldr	r1, [sp, #4]
 8019f40:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019f44:	f000 fe78 	bl	801ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019f48:	4620      	mov	r0, r4
 8019f4a:	f7ff fcf9 	bl	8019940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019f4e:	f000 fd7f 	bl	801aa50 <xTaskResumeAll>
 8019f52:	2800      	cmp	r0, #0
 8019f54:	d1ca      	bne.n	8019eec <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8019f56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019f5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019f62:	f3bf 8f4f 	dsb	sy
 8019f66:	f3bf 8f6f 	isb	sy
 8019f6a:	e7bf      	b.n	8019eec <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	e789      	b.n	8019e84 <xQueueReceive+0x72>

08019f70 <xQueueSemaphoreTake>:
{
 8019f70:	b570      	push	{r4, r5, r6, lr}
 8019f72:	b084      	sub	sp, #16
 8019f74:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019f76:	b158      	cbz	r0, 8019f90 <xQueueSemaphoreTake+0x20>
 8019f78:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8019f7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019f7c:	b18b      	cbz	r3, 8019fa2 <xQueueSemaphoreTake+0x32>
 8019f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f82:	f383 8811 	msr	BASEPRI, r3
 8019f86:	f3bf 8f6f 	isb	sy
 8019f8a:	f3bf 8f4f 	dsb	sy
 8019f8e:	e7fe      	b.n	8019f8e <xQueueSemaphoreTake+0x1e>
 8019f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f94:	f383 8811 	msr	BASEPRI, r3
 8019f98:	f3bf 8f6f 	isb	sy
 8019f9c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019fa0:	e7fe      	b.n	8019fa0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019fa2:	f000 ff1d 	bl	801ade0 <xTaskGetSchedulerState>
 8019fa6:	4605      	mov	r5, r0
 8019fa8:	b950      	cbnz	r0, 8019fc0 <xQueueSemaphoreTake+0x50>
 8019faa:	9b01      	ldr	r3, [sp, #4]
 8019fac:	b15b      	cbz	r3, 8019fc6 <xQueueSemaphoreTake+0x56>
 8019fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fb2:	f383 8811 	msr	BASEPRI, r3
 8019fb6:	f3bf 8f6f 	isb	sy
 8019fba:	f3bf 8f4f 	dsb	sy
 8019fbe:	e7fe      	b.n	8019fbe <xQueueSemaphoreTake+0x4e>
 8019fc0:	2600      	movs	r6, #0
 8019fc2:	4635      	mov	r5, r6
 8019fc4:	e055      	b.n	801a072 <xQueueSemaphoreTake+0x102>
 8019fc6:	4606      	mov	r6, r0
 8019fc8:	e053      	b.n	801a072 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019fca:	3b01      	subs	r3, #1
 8019fcc:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019fce:	6823      	ldr	r3, [r4, #0]
 8019fd0:	b13b      	cbz	r3, 8019fe2 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019fd2:	6923      	ldr	r3, [r4, #16]
 8019fd4:	b94b      	cbnz	r3, 8019fea <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8019fd6:	f001 fab7 	bl	801b548 <vPortExitCritical>
				return pdPASS;
 8019fda:	2601      	movs	r6, #1
}
 8019fdc:	4630      	mov	r0, r6
 8019fde:	b004      	add	sp, #16
 8019fe0:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019fe2:	f000 fff1 	bl	801afc8 <pvTaskIncrementMutexHeldCount>
 8019fe6:	60a0      	str	r0, [r4, #8]
 8019fe8:	e7f3      	b.n	8019fd2 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019fea:	f104 0010 	add.w	r0, r4, #16
 8019fee:	f000 fe57 	bl	801aca0 <xTaskRemoveFromEventList>
 8019ff2:	2800      	cmp	r0, #0
 8019ff4:	d0ef      	beq.n	8019fd6 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8019ff6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ffe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a002:	f3bf 8f4f 	dsb	sy
 801a006:	f3bf 8f6f 	isb	sy
 801a00a:	e7e4      	b.n	8019fd6 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a00c:	b146      	cbz	r6, 801a020 <xQueueSemaphoreTake+0xb0>
 801a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a012:	f383 8811 	msr	BASEPRI, r3
 801a016:	f3bf 8f6f 	isb	sy
 801a01a:	f3bf 8f4f 	dsb	sy
 801a01e:	e7fe      	b.n	801a01e <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 801a020:	f001 fa92 	bl	801b548 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a024:	e7da      	b.n	8019fdc <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a026:	a802      	add	r0, sp, #8
 801a028:	f000 fe80 	bl	801ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a02c:	2501      	movs	r5, #1
 801a02e:	e02a      	b.n	801a086 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 801a030:	2300      	movs	r3, #0
 801a032:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a036:	e032      	b.n	801a09e <xQueueSemaphoreTake+0x12e>
 801a038:	2300      	movs	r3, #0
 801a03a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a03e:	e034      	b.n	801a0aa <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801a040:	f001 fa60 	bl	801b504 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a044:	68a0      	ldr	r0, [r4, #8]
 801a046:	f000 fedb 	bl	801ae00 <xTaskPriorityInherit>
 801a04a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801a04c:	f001 fa7c 	bl	801b548 <vPortExitCritical>
 801a050:	e03b      	b.n	801a0ca <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801a052:	4620      	mov	r0, r4
 801a054:	f7ff fc74 	bl	8019940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a058:	f000 fcfa 	bl	801aa50 <xTaskResumeAll>
 801a05c:	e009      	b.n	801a072 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801a05e:	4620      	mov	r0, r4
 801a060:	f7ff fc6e 	bl	8019940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a064:	f000 fcf4 	bl	801aa50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a068:	4620      	mov	r0, r4
 801a06a:	f7ff fc0f 	bl	801988c <prvIsQueueEmpty>
 801a06e:	2800      	cmp	r0, #0
 801a070:	d142      	bne.n	801a0f8 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801a072:	f001 fa47 	bl	801b504 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a076:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d1a6      	bne.n	8019fca <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a07c:	9b01      	ldr	r3, [sp, #4]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d0c4      	beq.n	801a00c <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801a082:	2d00      	cmp	r5, #0
 801a084:	d0cf      	beq.n	801a026 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 801a086:	f001 fa5f 	bl	801b548 <vPortExitCritical>
		vTaskSuspendAll();
 801a08a:	f000 fc47 	bl	801a91c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a08e:	f001 fa39 	bl	801b504 <vPortEnterCritical>
 801a092:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a096:	b25b      	sxtb	r3, r3
 801a098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a09c:	d0c8      	beq.n	801a030 <xQueueSemaphoreTake+0xc0>
 801a09e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a0a2:	b25b      	sxtb	r3, r3
 801a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a0a8:	d0c6      	beq.n	801a038 <xQueueSemaphoreTake+0xc8>
 801a0aa:	f001 fa4d 	bl	801b548 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0ae:	a901      	add	r1, sp, #4
 801a0b0:	a802      	add	r0, sp, #8
 801a0b2:	f000 fe47 	bl	801ad44 <xTaskCheckForTimeOut>
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	d1d1      	bne.n	801a05e <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	f7ff fbe6 	bl	801988c <prvIsQueueEmpty>
 801a0c0:	2800      	cmp	r0, #0
 801a0c2:	d0c6      	beq.n	801a052 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a0c4:	6823      	ldr	r3, [r4, #0]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d0ba      	beq.n	801a040 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a0ca:	9901      	ldr	r1, [sp, #4]
 801a0cc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a0d0:	f000 fdb2 	bl	801ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a0d4:	4620      	mov	r0, r4
 801a0d6:	f7ff fc33 	bl	8019940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a0da:	f000 fcb9 	bl	801aa50 <xTaskResumeAll>
 801a0de:	2800      	cmp	r0, #0
 801a0e0:	d1c7      	bne.n	801a072 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801a0e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a0ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a0ee:	f3bf 8f4f 	dsb	sy
 801a0f2:	f3bf 8f6f 	isb	sy
 801a0f6:	e7bc      	b.n	801a072 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 801a0f8:	b90e      	cbnz	r6, 801a0fe <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 801a0fa:	2600      	movs	r6, #0
 801a0fc:	e76e      	b.n	8019fdc <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 801a0fe:	f001 fa01 	bl	801b504 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a102:	4620      	mov	r0, r4
 801a104:	f7ff fbab 	bl	801985e <prvGetDisinheritPriorityAfterTimeout>
 801a108:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a10a:	68a0      	ldr	r0, [r4, #8]
 801a10c:	f000 ff0c 	bl	801af28 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801a110:	f001 fa1a 	bl	801b548 <vPortExitCritical>
 801a114:	e7f1      	b.n	801a0fa <xQueueSemaphoreTake+0x18a>

0801a116 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 801a116:	b180      	cbz	r0, 801a13a <xQueueTakeMutexRecursive+0x24>
	{
 801a118:	b570      	push	{r4, r5, r6, lr}
 801a11a:	460c      	mov	r4, r1
 801a11c:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a11e:	6886      	ldr	r6, [r0, #8]
 801a120:	f000 fe58 	bl	801add4 <xTaskGetCurrentTaskHandle>
 801a124:	4286      	cmp	r6, r0
 801a126:	d011      	beq.n	801a14c <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a128:	4621      	mov	r1, r4
 801a12a:	4628      	mov	r0, r5
 801a12c:	f7ff ff20 	bl	8019f70 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801a130:	b180      	cbz	r0, 801a154 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a132:	68eb      	ldr	r3, [r5, #12]
 801a134:	3301      	adds	r3, #1
 801a136:	60eb      	str	r3, [r5, #12]
		return xReturn;
 801a138:	e00c      	b.n	801a154 <xQueueTakeMutexRecursive+0x3e>
 801a13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a13e:	f383 8811 	msr	BASEPRI, r3
 801a142:	f3bf 8f6f 	isb	sy
 801a146:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801a14a:	e7fe      	b.n	801a14a <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a14c:	68eb      	ldr	r3, [r5, #12]
 801a14e:	3301      	adds	r3, #1
 801a150:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 801a152:	2001      	movs	r0, #1
	}
 801a154:	bd70      	pop	{r4, r5, r6, pc}

0801a156 <xQueuePeek>:
{
 801a156:	b570      	push	{r4, r5, r6, lr}
 801a158:	b084      	sub	sp, #16
 801a15a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801a15c:	b190      	cbz	r0, 801a184 <xQueuePeek+0x2e>
 801a15e:	460e      	mov	r6, r1
 801a160:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a162:	b1c1      	cbz	r1, 801a196 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a164:	f000 fe3c 	bl	801ade0 <xTaskGetSchedulerState>
 801a168:	4605      	mov	r5, r0
 801a16a:	bb00      	cbnz	r0, 801a1ae <xQueuePeek+0x58>
 801a16c:	9b01      	ldr	r3, [sp, #4]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d05e      	beq.n	801a230 <xQueuePeek+0xda>
 801a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a176:	f383 8811 	msr	BASEPRI, r3
 801a17a:	f3bf 8f6f 	isb	sy
 801a17e:	f3bf 8f4f 	dsb	sy
 801a182:	e7fe      	b.n	801a182 <xQueuePeek+0x2c>
 801a184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a188:	f383 8811 	msr	BASEPRI, r3
 801a18c:	f3bf 8f6f 	isb	sy
 801a190:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801a194:	e7fe      	b.n	801a194 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a196:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d0e3      	beq.n	801a164 <xQueuePeek+0xe>
 801a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1a0:	f383 8811 	msr	BASEPRI, r3
 801a1a4:	f3bf 8f6f 	isb	sy
 801a1a8:	f3bf 8f4f 	dsb	sy
 801a1ac:	e7fe      	b.n	801a1ac <xQueuePeek+0x56>
 801a1ae:	2500      	movs	r5, #0
 801a1b0:	e03e      	b.n	801a230 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801a1b2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	f7ff fbb0 	bl	801991c <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801a1bc:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a1be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a1c0:	b923      	cbnz	r3, 801a1cc <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 801a1c2:	f001 f9c1 	bl	801b548 <vPortExitCritical>
				return pdPASS;
 801a1c6:	2001      	movs	r0, #1
}
 801a1c8:	b004      	add	sp, #16
 801a1ca:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a1cc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a1d0:	f000 fd66 	bl	801aca0 <xTaskRemoveFromEventList>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d0f4      	beq.n	801a1c2 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 801a1d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a1e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a1e4:	f3bf 8f4f 	dsb	sy
 801a1e8:	f3bf 8f6f 	isb	sy
 801a1ec:	e7e9      	b.n	801a1c2 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 801a1ee:	f001 f9ab 	bl	801b548 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a1f2:	2000      	movs	r0, #0
 801a1f4:	e7e8      	b.n	801a1c8 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a1f6:	a802      	add	r0, sp, #8
 801a1f8:	f000 fd98 	bl	801ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a1fc:	2501      	movs	r5, #1
 801a1fe:	e021      	b.n	801a244 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 801a200:	2300      	movs	r3, #0
 801a202:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a206:	e029      	b.n	801a25c <xQueuePeek+0x106>
 801a208:	2300      	movs	r3, #0
 801a20a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a20e:	e02b      	b.n	801a268 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 801a210:	4620      	mov	r0, r4
 801a212:	f7ff fb95 	bl	8019940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a216:	f000 fc1b 	bl	801aa50 <xTaskResumeAll>
 801a21a:	e009      	b.n	801a230 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 801a21c:	4620      	mov	r0, r4
 801a21e:	f7ff fb8f 	bl	8019940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a222:	f000 fc15 	bl	801aa50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a226:	4620      	mov	r0, r4
 801a228:	f7ff fb30 	bl	801988c <prvIsQueueEmpty>
 801a22c:	2800      	cmp	r0, #0
 801a22e:	d13f      	bne.n	801a2b0 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 801a230:	f001 f968 	bl	801b504 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a234:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a236:	2b00      	cmp	r3, #0
 801a238:	d1bb      	bne.n	801a1b2 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801a23a:	9b01      	ldr	r3, [sp, #4]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d0d6      	beq.n	801a1ee <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801a240:	2d00      	cmp	r5, #0
 801a242:	d0d8      	beq.n	801a1f6 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 801a244:	f001 f980 	bl	801b548 <vPortExitCritical>
		vTaskSuspendAll();
 801a248:	f000 fb68 	bl	801a91c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a24c:	f001 f95a 	bl	801b504 <vPortEnterCritical>
 801a250:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a254:	b25b      	sxtb	r3, r3
 801a256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a25a:	d0d1      	beq.n	801a200 <xQueuePeek+0xaa>
 801a25c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a260:	b25b      	sxtb	r3, r3
 801a262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a266:	d0cf      	beq.n	801a208 <xQueuePeek+0xb2>
 801a268:	f001 f96e 	bl	801b548 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a26c:	a901      	add	r1, sp, #4
 801a26e:	a802      	add	r0, sp, #8
 801a270:	f000 fd68 	bl	801ad44 <xTaskCheckForTimeOut>
 801a274:	2800      	cmp	r0, #0
 801a276:	d1d1      	bne.n	801a21c <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a278:	4620      	mov	r0, r4
 801a27a:	f7ff fb07 	bl	801988c <prvIsQueueEmpty>
 801a27e:	2800      	cmp	r0, #0
 801a280:	d0c6      	beq.n	801a210 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a282:	9901      	ldr	r1, [sp, #4]
 801a284:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a288:	f000 fcd6 	bl	801ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a28c:	4620      	mov	r0, r4
 801a28e:	f7ff fb57 	bl	8019940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a292:	f000 fbdd 	bl	801aa50 <xTaskResumeAll>
 801a296:	2800      	cmp	r0, #0
 801a298:	d1ca      	bne.n	801a230 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 801a29a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a2a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a2a6:	f3bf 8f4f 	dsb	sy
 801a2aa:	f3bf 8f6f 	isb	sy
 801a2ae:	e7bf      	b.n	801a230 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 801a2b0:	2000      	movs	r0, #0
 801a2b2:	e789      	b.n	801a1c8 <xQueuePeek+0x72>

0801a2b4 <xQueueReceiveFromISR>:
{
 801a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801a2b8:	b1b0      	cbz	r0, 801a2e8 <xQueueReceiveFromISR+0x34>
 801a2ba:	460d      	mov	r5, r1
 801a2bc:	4690      	mov	r8, r2
 801a2be:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a2c0:	b1d9      	cbz	r1, 801a2fa <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a2c2:	f001 fa45 	bl	801b750 <vPortValidateInterruptPriority>
	__asm volatile
 801a2c6:	f3ef 8711 	mrs	r7, BASEPRI
 801a2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ce:	f383 8811 	msr	BASEPRI, r3
 801a2d2:	f3bf 8f6f 	isb	sy
 801a2d6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a2da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a2dc:	b9ce      	cbnz	r6, 801a312 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 801a2de:	2000      	movs	r0, #0
	__asm volatile
 801a2e0:	f387 8811 	msr	BASEPRI, r7
}
 801a2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ec:	f383 8811 	msr	BASEPRI, r3
 801a2f0:	f3bf 8f6f 	isb	sy
 801a2f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801a2f8:	e7fe      	b.n	801a2f8 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a2fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d0e0      	beq.n	801a2c2 <xQueueReceiveFromISR+0xe>
 801a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a304:	f383 8811 	msr	BASEPRI, r3
 801a308:	f3bf 8f6f 	isb	sy
 801a30c:	f3bf 8f4f 	dsb	sy
 801a310:	e7fe      	b.n	801a310 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801a312:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 801a316:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a31a:	4629      	mov	r1, r5
 801a31c:	4620      	mov	r0, r4
 801a31e:	f7ff fafd 	bl	801991c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a322:	1e73      	subs	r3, r6, #1
 801a324:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 801a326:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801a32a:	d006      	beq.n	801a33a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a32c:	f109 0301 	add.w	r3, r9, #1
 801a330:	b25b      	sxtb	r3, r3
 801a332:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 801a336:	2001      	movs	r0, #1
 801a338:	e7d2      	b.n	801a2e0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a33a:	6923      	ldr	r3, [r4, #16]
 801a33c:	b90b      	cbnz	r3, 801a342 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 801a33e:	2001      	movs	r0, #1
 801a340:	e7ce      	b.n	801a2e0 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a342:	f104 0010 	add.w	r0, r4, #16
 801a346:	f000 fcab 	bl	801aca0 <xTaskRemoveFromEventList>
 801a34a:	b130      	cbz	r0, 801a35a <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 801a34c:	f1b8 0f00 	cmp.w	r8, #0
 801a350:	d005      	beq.n	801a35e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a352:	2001      	movs	r0, #1
 801a354:	f8c8 0000 	str.w	r0, [r8]
 801a358:	e7c2      	b.n	801a2e0 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 801a35a:	2001      	movs	r0, #1
 801a35c:	e7c0      	b.n	801a2e0 <xQueueReceiveFromISR+0x2c>
 801a35e:	2001      	movs	r0, #1
 801a360:	e7be      	b.n	801a2e0 <xQueueReceiveFromISR+0x2c>

0801a362 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 801a362:	b140      	cbz	r0, 801a376 <uxQueueMessagesWaiting+0x14>
{
 801a364:	b510      	push	{r4, lr}
 801a366:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801a368:	f001 f8cc 	bl	801b504 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801a36c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 801a36e:	f001 f8eb 	bl	801b548 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a372:	4620      	mov	r0, r4
 801a374:	bd10      	pop	{r4, pc}
 801a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a37a:	f383 8811 	msr	BASEPRI, r3
 801a37e:	f3bf 8f6f 	isb	sy
 801a382:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 801a386:	e7fe      	b.n	801a386 <uxQueueMessagesWaiting+0x24>

0801a388 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 801a388:	b108      	cbz	r0, 801a38e <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 801a38a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a38c:	4770      	bx	lr
 801a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a392:	f383 8811 	msr	BASEPRI, r3
 801a396:	f3bf 8f6f 	isb	sy
 801a39a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801a39e:	e7fe      	b.n	801a39e <uxQueueMessagesWaitingFromISR+0x16>

0801a3a0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	2b07      	cmp	r3, #7
 801a3a4:	d80c      	bhi.n	801a3c0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a3a6:	4a07      	ldr	r2, [pc, #28]	@ (801a3c4 <vQueueAddToRegistry+0x24>)
 801a3a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a3ac:	b10a      	cbz	r2, 801a3b2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a3ae:	3301      	adds	r3, #1
 801a3b0:	e7f7      	b.n	801a3a2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a3b2:	4a04      	ldr	r2, [pc, #16]	@ (801a3c4 <vQueueAddToRegistry+0x24>)
 801a3b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a3b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a3bc:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a3be:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a3c0:	4770      	bx	lr
 801a3c2:	bf00      	nop
 801a3c4:	200036ec 	.word	0x200036ec

0801a3c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a3c8:	b570      	push	{r4, r5, r6, lr}
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	460d      	mov	r5, r1
 801a3ce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a3d0:	f001 f898 	bl	801b504 <vPortEnterCritical>
 801a3d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a3d8:	b25b      	sxtb	r3, r3
 801a3da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a3de:	d00d      	beq.n	801a3fc <vQueueWaitForMessageRestricted+0x34>
 801a3e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a3e4:	b25b      	sxtb	r3, r3
 801a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a3ea:	d00b      	beq.n	801a404 <vQueueWaitForMessageRestricted+0x3c>
 801a3ec:	f001 f8ac 	bl	801b548 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a3f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801a3f2:	b15b      	cbz	r3, 801a40c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	f7ff faa3 	bl	8019940 <prvUnlockQueue>
	}
 801a3fa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801a402:	e7ed      	b.n	801a3e0 <vQueueWaitForMessageRestricted+0x18>
 801a404:	2300      	movs	r3, #0
 801a406:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801a40a:	e7ef      	b.n	801a3ec <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a40c:	4632      	mov	r2, r6
 801a40e:	4629      	mov	r1, r5
 801a410:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801a414:	f000 fc28 	bl	801ac68 <vTaskPlaceOnEventListRestricted>
 801a418:	e7ec      	b.n	801a3f4 <vQueueWaitForMessageRestricted+0x2c>
	...

0801a41c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a41c:	4b08      	ldr	r3, [pc, #32]	@ (801a440 <prvResetNextTaskUnblockTime+0x24>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	b923      	cbnz	r3, 801a42e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a424:	4b07      	ldr	r3, [pc, #28]	@ (801a444 <prvResetNextTaskUnblockTime+0x28>)
 801a426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a42a:	601a      	str	r2, [r3, #0]
 801a42c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a42e:	4b04      	ldr	r3, [pc, #16]	@ (801a440 <prvResetNextTaskUnblockTime+0x24>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	68db      	ldr	r3, [r3, #12]
 801a434:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a436:	685a      	ldr	r2, [r3, #4]
 801a438:	4b02      	ldr	r3, [pc, #8]	@ (801a444 <prvResetNextTaskUnblockTime+0x28>)
 801a43a:	601a      	str	r2, [r3, #0]
	}
}
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	2000379c 	.word	0x2000379c
 801a444:	20003734 	.word	0x20003734

0801a448 <prvInitialiseNewTask>:
{
 801a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a44c:	4680      	mov	r8, r0
 801a44e:	460d      	mov	r5, r1
 801a450:	4617      	mov	r7, r2
 801a452:	4699      	mov	r9, r3
 801a454:	9e08      	ldr	r6, [sp, #32]
 801a456:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801a45a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a45c:	0092      	lsls	r2, r2, #2
 801a45e:	21a5      	movs	r1, #165	@ 0xa5
 801a460:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a462:	f013 fa55 	bl	802d910 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a466:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a468:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 801a46c:	3a01      	subs	r2, #1
 801a46e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a472:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 801a476:	2d00      	cmp	r5, #0
 801a478:	d061      	beq.n	801a53e <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a47a:	f04f 0c00 	mov.w	ip, #0
 801a47e:	f1bc 0f0f 	cmp.w	ip, #15
 801a482:	d809      	bhi.n	801a498 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a484:	f815 300c 	ldrb.w	r3, [r5, ip]
 801a488:	eb04 020c 	add.w	r2, r4, ip
 801a48c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 801a490:	b113      	cbz	r3, 801a498 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a492:	f10c 0c01 	add.w	ip, ip, #1
 801a496:	e7f2      	b.n	801a47e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a498:	2300      	movs	r3, #0
 801a49a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a49e:	2e37      	cmp	r6, #55	@ 0x37
 801a4a0:	d900      	bls.n	801a4a4 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a4a2:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 801a4a4:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801a4a6:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a4a8:	2500      	movs	r5, #0
 801a4aa:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a4ac:	1d20      	adds	r0, r4, #4
 801a4ae:	f7ff f99c 	bl	80197ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a4b2:	f104 0018 	add.w	r0, r4, #24
 801a4b6:	f7ff f998 	bl	80197ea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a4ba:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a4bc:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 801a4c0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a4c2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 801a4c4:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a4c8:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801a4cc:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801a4d0:	4629      	mov	r1, r5
 801a4d2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a4d6:	f013 fa1b 	bl	802d910 <memset>
 801a4da:	4b1b      	ldr	r3, [pc, #108]	@ (801a548 <prvInitialiseNewTask+0x100>)
 801a4dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801a4de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a4e2:	6622      	str	r2, [r4, #96]	@ 0x60
 801a4e4:	33d0      	adds	r3, #208	@ 0xd0
 801a4e6:	6663      	str	r3, [r4, #100]	@ 0x64
 801a4e8:	2201      	movs	r2, #1
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 801a4f0:	f243 330e 	movw	r3, #13070	@ 0x330e
 801a4f4:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 801a4f8:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 801a4fc:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 801a500:	f241 2334 	movw	r3, #4660	@ 0x1234
 801a504:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 801a508:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 801a50c:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 801a510:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 801a514:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801a518:	2305      	movs	r3, #5
 801a51a:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 801a51e:	230b      	movs	r3, #11
 801a520:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a524:	464a      	mov	r2, r9
 801a526:	4641      	mov	r1, r8
 801a528:	4638      	mov	r0, r7
 801a52a:	f000 ffc3 	bl	801b4b4 <pxPortInitialiseStack>
 801a52e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801a530:	f1ba 0f00 	cmp.w	sl, #0
 801a534:	d001      	beq.n	801a53a <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a536:	f8ca 4000 	str.w	r4, [sl]
}
 801a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a53e:	2300      	movs	r3, #0
 801a540:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 801a544:	e7ab      	b.n	801a49e <prvInitialiseNewTask+0x56>
 801a546:	bf00      	nop
 801a548:	20019fa4 	.word	0x20019fa4

0801a54c <prvInitialiseTaskLists>:
{
 801a54c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a54e:	2400      	movs	r4, #0
 801a550:	e007      	b.n	801a562 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a552:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801a556:	0093      	lsls	r3, r2, #2
 801a558:	480e      	ldr	r0, [pc, #56]	@ (801a594 <prvInitialiseTaskLists+0x48>)
 801a55a:	4418      	add	r0, r3
 801a55c:	f7ff f93a 	bl	80197d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a560:	3401      	adds	r4, #1
 801a562:	2c37      	cmp	r4, #55	@ 0x37
 801a564:	d9f5      	bls.n	801a552 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 801a566:	4d0c      	ldr	r5, [pc, #48]	@ (801a598 <prvInitialiseTaskLists+0x4c>)
 801a568:	4628      	mov	r0, r5
 801a56a:	f7ff f933 	bl	80197d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a56e:	4c0b      	ldr	r4, [pc, #44]	@ (801a59c <prvInitialiseTaskLists+0x50>)
 801a570:	4620      	mov	r0, r4
 801a572:	f7ff f92f 	bl	80197d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a576:	480a      	ldr	r0, [pc, #40]	@ (801a5a0 <prvInitialiseTaskLists+0x54>)
 801a578:	f7ff f92c 	bl	80197d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801a57c:	4809      	ldr	r0, [pc, #36]	@ (801a5a4 <prvInitialiseTaskLists+0x58>)
 801a57e:	f7ff f929 	bl	80197d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801a582:	4809      	ldr	r0, [pc, #36]	@ (801a5a8 <prvInitialiseTaskLists+0x5c>)
 801a584:	f7ff f926 	bl	80197d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801a588:	4b08      	ldr	r3, [pc, #32]	@ (801a5ac <prvInitialiseTaskLists+0x60>)
 801a58a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a58c:	4b08      	ldr	r3, [pc, #32]	@ (801a5b0 <prvInitialiseTaskLists+0x64>)
 801a58e:	601c      	str	r4, [r3, #0]
}
 801a590:	bd38      	pop	{r3, r4, r5, pc}
 801a592:	bf00      	nop
 801a594:	200037c8 	.word	0x200037c8
 801a598:	200037b4 	.word	0x200037b4
 801a59c:	200037a0 	.word	0x200037a0
 801a5a0:	20003784 	.word	0x20003784
 801a5a4:	20003770 	.word	0x20003770
 801a5a8:	20003758 	.word	0x20003758
 801a5ac:	2000379c 	.word	0x2000379c
 801a5b0:	20003798 	.word	0x20003798

0801a5b4 <prvAddNewTaskToReadyList>:
{
 801a5b4:	b510      	push	{r4, lr}
 801a5b6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801a5b8:	f000 ffa4 	bl	801b504 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801a5bc:	4a22      	ldr	r2, [pc, #136]	@ (801a648 <prvAddNewTaskToReadyList+0x94>)
 801a5be:	6813      	ldr	r3, [r2, #0]
 801a5c0:	3301      	adds	r3, #1
 801a5c2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a5c4:	4b21      	ldr	r3, [pc, #132]	@ (801a64c <prvAddNewTaskToReadyList+0x98>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	b15b      	cbz	r3, 801a5e2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 801a5ca:	4b21      	ldr	r3, [pc, #132]	@ (801a650 <prvAddNewTaskToReadyList+0x9c>)
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	b96b      	cbnz	r3, 801a5ec <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a5d0:	4b1e      	ldr	r3, [pc, #120]	@ (801a64c <prvAddNewTaskToReadyList+0x98>)
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a5d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a5d8:	429a      	cmp	r2, r3
 801a5da:	d807      	bhi.n	801a5ec <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 801a5dc:	4b1b      	ldr	r3, [pc, #108]	@ (801a64c <prvAddNewTaskToReadyList+0x98>)
 801a5de:	601c      	str	r4, [r3, #0]
 801a5e0:	e004      	b.n	801a5ec <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 801a5e2:	4b1a      	ldr	r3, [pc, #104]	@ (801a64c <prvAddNewTaskToReadyList+0x98>)
 801a5e4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a5e6:	6813      	ldr	r3, [r2, #0]
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	d029      	beq.n	801a640 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 801a5ec:	4a19      	ldr	r2, [pc, #100]	@ (801a654 <prvAddNewTaskToReadyList+0xa0>)
 801a5ee:	6813      	ldr	r3, [r2, #0]
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a5f4:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801a5f6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a5f8:	4b17      	ldr	r3, [pc, #92]	@ (801a658 <prvAddNewTaskToReadyList+0xa4>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	4298      	cmp	r0, r3
 801a5fe:	d901      	bls.n	801a604 <prvAddNewTaskToReadyList+0x50>
 801a600:	4b15      	ldr	r3, [pc, #84]	@ (801a658 <prvAddNewTaskToReadyList+0xa4>)
 801a602:	6018      	str	r0, [r3, #0]
 801a604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a608:	1d21      	adds	r1, r4, #4
 801a60a:	4b14      	ldr	r3, [pc, #80]	@ (801a65c <prvAddNewTaskToReadyList+0xa8>)
 801a60c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a610:	f7ff f8ee 	bl	80197f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801a614:	f000 ff98 	bl	801b548 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801a618:	4b0d      	ldr	r3, [pc, #52]	@ (801a650 <prvAddNewTaskToReadyList+0x9c>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	b17b      	cbz	r3, 801a63e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a61e:	4b0b      	ldr	r3, [pc, #44]	@ (801a64c <prvAddNewTaskToReadyList+0x98>)
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a624:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a626:	429a      	cmp	r2, r3
 801a628:	d209      	bcs.n	801a63e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 801a62a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a632:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a636:	f3bf 8f4f 	dsb	sy
 801a63a:	f3bf 8f6f 	isb	sy
}
 801a63e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 801a640:	f7ff ff84 	bl	801a54c <prvInitialiseTaskLists>
 801a644:	e7d2      	b.n	801a5ec <prvAddNewTaskToReadyList+0x38>
 801a646:	bf00      	nop
 801a648:	20003754 	.word	0x20003754
 801a64c:	20003c28 	.word	0x20003c28
 801a650:	20003748 	.word	0x20003748
 801a654:	20003738 	.word	0x20003738
 801a658:	2000374c 	.word	0x2000374c
 801a65c:	200037c8 	.word	0x200037c8

0801a660 <prvDeleteTCB>:
	{
 801a660:	b510      	push	{r4, lr}
 801a662:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a664:	3058      	adds	r0, #88	@ 0x58
 801a666:	f014 fe1f 	bl	802f2a8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a66a:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 801a66e:	b163      	cbz	r3, 801a68a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a670:	2b01      	cmp	r3, #1
 801a672:	d011      	beq.n	801a698 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a674:	2b02      	cmp	r3, #2
 801a676:	d00e      	beq.n	801a696 <prvDeleteTCB+0x36>
 801a678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a67c:	f383 8811 	msr	BASEPRI, r3
 801a680:	f3bf 8f6f 	isb	sy
 801a684:	f3bf 8f4f 	dsb	sy
 801a688:	e7fe      	b.n	801a688 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 801a68a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a68c:	f001 f976 	bl	801b97c <vPortFree>
				vPortFree( pxTCB );
 801a690:	4620      	mov	r0, r4
 801a692:	f001 f973 	bl	801b97c <vPortFree>
	}
 801a696:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 801a698:	4620      	mov	r0, r4
 801a69a:	f001 f96f 	bl	801b97c <vPortFree>
 801a69e:	e7fa      	b.n	801a696 <prvDeleteTCB+0x36>

0801a6a0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a6a0:	4b0f      	ldr	r3, [pc, #60]	@ (801a6e0 <prvCheckTasksWaitingTermination+0x40>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	b1d3      	cbz	r3, 801a6dc <prvCheckTasksWaitingTermination+0x3c>
{
 801a6a6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 801a6a8:	f000 ff2c 	bl	801b504 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a6ac:	4b0d      	ldr	r3, [pc, #52]	@ (801a6e4 <prvCheckTasksWaitingTermination+0x44>)
 801a6ae:	68db      	ldr	r3, [r3, #12]
 801a6b0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a6b2:	1d20      	adds	r0, r4, #4
 801a6b4:	f7ff f8c0 	bl	8019838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a6b8:	4a0b      	ldr	r2, [pc, #44]	@ (801a6e8 <prvCheckTasksWaitingTermination+0x48>)
 801a6ba:	6813      	ldr	r3, [r2, #0]
 801a6bc:	3b01      	subs	r3, #1
 801a6be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a6c0:	4a07      	ldr	r2, [pc, #28]	@ (801a6e0 <prvCheckTasksWaitingTermination+0x40>)
 801a6c2:	6813      	ldr	r3, [r2, #0]
 801a6c4:	3b01      	subs	r3, #1
 801a6c6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 801a6c8:	f000 ff3e 	bl	801b548 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	f7ff ffc7 	bl	801a660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a6d2:	4b03      	ldr	r3, [pc, #12]	@ (801a6e0 <prvCheckTasksWaitingTermination+0x40>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d1e6      	bne.n	801a6a8 <prvCheckTasksWaitingTermination+0x8>
}
 801a6da:	bd10      	pop	{r4, pc}
 801a6dc:	4770      	bx	lr
 801a6de:	bf00      	nop
 801a6e0:	2000376c 	.word	0x2000376c
 801a6e4:	20003770 	.word	0x20003770
 801a6e8:	20003754 	.word	0x20003754

0801a6ec <prvIdleTask>:
{
 801a6ec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 801a6ee:	f7ff ffd7 	bl	801a6a0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a6f2:	4b07      	ldr	r3, [pc, #28]	@ (801a710 <prvIdleTask+0x24>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	2b01      	cmp	r3, #1
 801a6f8:	d9f9      	bls.n	801a6ee <prvIdleTask+0x2>
				taskYIELD();
 801a6fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a702:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a706:	f3bf 8f4f 	dsb	sy
 801a70a:	f3bf 8f6f 	isb	sy
 801a70e:	e7ee      	b.n	801a6ee <prvIdleTask+0x2>
 801a710:	200037c8 	.word	0x200037c8

0801a714 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a714:	b570      	push	{r4, r5, r6, lr}
 801a716:	4604      	mov	r4, r0
 801a718:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a71a:	4b17      	ldr	r3, [pc, #92]	@ (801a778 <prvAddCurrentTaskToDelayedList+0x64>)
 801a71c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a71e:	4b17      	ldr	r3, [pc, #92]	@ (801a77c <prvAddCurrentTaskToDelayedList+0x68>)
 801a720:	6818      	ldr	r0, [r3, #0]
 801a722:	3004      	adds	r0, #4
 801a724:	f7ff f888 	bl	8019838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a728:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801a72c:	d00d      	beq.n	801a74a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a72e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a730:	4b12      	ldr	r3, [pc, #72]	@ (801a77c <prvAddCurrentTaskToDelayedList+0x68>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801a736:	42a6      	cmp	r6, r4
 801a738:	d910      	bls.n	801a75c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a73a:	4b11      	ldr	r3, [pc, #68]	@ (801a780 <prvAddCurrentTaskToDelayedList+0x6c>)
 801a73c:	6818      	ldr	r0, [r3, #0]
 801a73e:	4b0f      	ldr	r3, [pc, #60]	@ (801a77c <prvAddCurrentTaskToDelayedList+0x68>)
 801a740:	6819      	ldr	r1, [r3, #0]
 801a742:	3104      	adds	r1, #4
 801a744:	f7ff f85f 	bl	8019806 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a748:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a74a:	2d00      	cmp	r5, #0
 801a74c:	d0ef      	beq.n	801a72e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a74e:	4b0b      	ldr	r3, [pc, #44]	@ (801a77c <prvAddCurrentTaskToDelayedList+0x68>)
 801a750:	6819      	ldr	r1, [r3, #0]
 801a752:	3104      	adds	r1, #4
 801a754:	480b      	ldr	r0, [pc, #44]	@ (801a784 <prvAddCurrentTaskToDelayedList+0x70>)
 801a756:	f7ff f84b 	bl	80197f0 <vListInsertEnd>
 801a75a:	e7f5      	b.n	801a748 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a75c:	4b0a      	ldr	r3, [pc, #40]	@ (801a788 <prvAddCurrentTaskToDelayedList+0x74>)
 801a75e:	6818      	ldr	r0, [r3, #0]
 801a760:	4b06      	ldr	r3, [pc, #24]	@ (801a77c <prvAddCurrentTaskToDelayedList+0x68>)
 801a762:	6819      	ldr	r1, [r3, #0]
 801a764:	3104      	adds	r1, #4
 801a766:	f7ff f84e 	bl	8019806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a76a:	4b08      	ldr	r3, [pc, #32]	@ (801a78c <prvAddCurrentTaskToDelayedList+0x78>)
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	42a3      	cmp	r3, r4
 801a770:	d9ea      	bls.n	801a748 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 801a772:	4b06      	ldr	r3, [pc, #24]	@ (801a78c <prvAddCurrentTaskToDelayedList+0x78>)
 801a774:	601c      	str	r4, [r3, #0]
}
 801a776:	e7e7      	b.n	801a748 <prvAddCurrentTaskToDelayedList+0x34>
 801a778:	20003750 	.word	0x20003750
 801a77c:	20003c28 	.word	0x20003c28
 801a780:	20003798 	.word	0x20003798
 801a784:	20003758 	.word	0x20003758
 801a788:	2000379c 	.word	0x2000379c
 801a78c:	20003734 	.word	0x20003734

0801a790 <xTaskCreateStatic>:
	{
 801a790:	b530      	push	{r4, r5, lr}
 801a792:	b087      	sub	sp, #28
 801a794:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 801a796:	b18c      	cbz	r4, 801a7bc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801a798:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a79a:	b1c5      	cbz	r5, 801a7ce <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801a79c:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 801a7a0:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a7a2:	9d04      	ldr	r5, [sp, #16]
 801a7a4:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 801a7a8:	d01a      	beq.n	801a7e0 <xTaskCreateStatic+0x50>
 801a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7ae:	f383 8811 	msr	BASEPRI, r3
 801a7b2:	f3bf 8f6f 	isb	sy
 801a7b6:	f3bf 8f4f 	dsb	sy
 801a7ba:	e7fe      	b.n	801a7ba <xTaskCreateStatic+0x2a>
 801a7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7c0:	f383 8811 	msr	BASEPRI, r3
 801a7c4:	f3bf 8f6f 	isb	sy
 801a7c8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 801a7cc:	e7fe      	b.n	801a7cc <xTaskCreateStatic+0x3c>
 801a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7d2:	f383 8811 	msr	BASEPRI, r3
 801a7d6:	f3bf 8f6f 	isb	sy
 801a7da:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 801a7de:	e7fe      	b.n	801a7de <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a7e0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a7e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a7e4:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a7e6:	2402      	movs	r4, #2
 801a7e8:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a7ec:	2400      	movs	r4, #0
 801a7ee:	9403      	str	r4, [sp, #12]
 801a7f0:	9502      	str	r5, [sp, #8]
 801a7f2:	ac05      	add	r4, sp, #20
 801a7f4:	9401      	str	r4, [sp, #4]
 801a7f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a7f8:	9400      	str	r4, [sp, #0]
 801a7fa:	f7ff fe25 	bl	801a448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a7fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a800:	f7ff fed8 	bl	801a5b4 <prvAddNewTaskToReadyList>
	}
 801a804:	9805      	ldr	r0, [sp, #20]
 801a806:	b007      	add	sp, #28
 801a808:	bd30      	pop	{r4, r5, pc}

0801a80a <xTaskCreate>:
	{
 801a80a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a80e:	b085      	sub	sp, #20
 801a810:	4607      	mov	r7, r0
 801a812:	4688      	mov	r8, r1
 801a814:	4614      	mov	r4, r2
 801a816:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a818:	0090      	lsls	r0, r2, #2
 801a81a:	f001 f82d 	bl	801b878 <pvPortMalloc>
			if( pxStack != NULL )
 801a81e:	b310      	cbz	r0, 801a866 <xTaskCreate+0x5c>
 801a820:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a822:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801a826:	f001 f827 	bl	801b878 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801a82a:	4605      	mov	r5, r0
 801a82c:	b1a8      	cbz	r0, 801a85a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801a82e:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a832:	2300      	movs	r3, #0
 801a834:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a838:	9303      	str	r3, [sp, #12]
 801a83a:	9002      	str	r0, [sp, #8]
 801a83c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a83e:	9301      	str	r3, [sp, #4]
 801a840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a842:	9300      	str	r3, [sp, #0]
 801a844:	4633      	mov	r3, r6
 801a846:	4622      	mov	r2, r4
 801a848:	4641      	mov	r1, r8
 801a84a:	4638      	mov	r0, r7
 801a84c:	f7ff fdfc 	bl	801a448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a850:	4628      	mov	r0, r5
 801a852:	f7ff feaf 	bl	801a5b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a856:	2001      	movs	r0, #1
 801a858:	e007      	b.n	801a86a <xTaskCreate+0x60>
					vPortFree( pxStack );
 801a85a:	4648      	mov	r0, r9
 801a85c:	f001 f88e 	bl	801b97c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a864:	e001      	b.n	801a86a <xTaskCreate+0x60>
 801a866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 801a86a:	b005      	add	sp, #20
 801a86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a870 <vTaskStartScheduler>:
{
 801a870:	b510      	push	{r4, lr}
 801a872:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a874:	2400      	movs	r4, #0
 801a876:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a878:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a87a:	aa07      	add	r2, sp, #28
 801a87c:	a906      	add	r1, sp, #24
 801a87e:	a805      	add	r0, sp, #20
 801a880:	f7fe ff90 	bl	80197a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a884:	9b05      	ldr	r3, [sp, #20]
 801a886:	9302      	str	r3, [sp, #8]
 801a888:	9b06      	ldr	r3, [sp, #24]
 801a88a:	9301      	str	r3, [sp, #4]
 801a88c:	9400      	str	r4, [sp, #0]
 801a88e:	4623      	mov	r3, r4
 801a890:	9a07      	ldr	r2, [sp, #28]
 801a892:	491a      	ldr	r1, [pc, #104]	@ (801a8fc <vTaskStartScheduler+0x8c>)
 801a894:	481a      	ldr	r0, [pc, #104]	@ (801a900 <vTaskStartScheduler+0x90>)
 801a896:	f7ff ff7b 	bl	801a790 <xTaskCreateStatic>
 801a89a:	4b1a      	ldr	r3, [pc, #104]	@ (801a904 <vTaskStartScheduler+0x94>)
 801a89c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801a89e:	b1e8      	cbz	r0, 801a8dc <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801a8a0:	f000 fc0c 	bl	801b0bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801a8a4:	2801      	cmp	r0, #1
 801a8a6:	d11a      	bne.n	801a8de <vTaskStartScheduler+0x6e>
 801a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8ac:	f383 8811 	msr	BASEPRI, r3
 801a8b0:	f3bf 8f6f 	isb	sy
 801a8b4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a8b8:	4b13      	ldr	r3, [pc, #76]	@ (801a908 <vTaskStartScheduler+0x98>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	3358      	adds	r3, #88	@ 0x58
 801a8be:	4a13      	ldr	r2, [pc, #76]	@ (801a90c <vTaskStartScheduler+0x9c>)
 801a8c0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801a8c2:	4b13      	ldr	r3, [pc, #76]	@ (801a910 <vTaskStartScheduler+0xa0>)
 801a8c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a8c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a8ca:	4b12      	ldr	r3, [pc, #72]	@ (801a914 <vTaskStartScheduler+0xa4>)
 801a8cc:	2201      	movs	r2, #1
 801a8ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a8d0:	4b11      	ldr	r3, [pc, #68]	@ (801a918 <vTaskStartScheduler+0xa8>)
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801a8d6:	f000 feaf 	bl	801b638 <xPortStartScheduler>
 801a8da:	e003      	b.n	801a8e4 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 801a8dc:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a8de:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801a8e2:	d001      	beq.n	801a8e8 <vTaskStartScheduler+0x78>
}
 801a8e4:	b008      	add	sp, #32
 801a8e6:	bd10      	pop	{r4, pc}
 801a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8ec:	f383 8811 	msr	BASEPRI, r3
 801a8f0:	f3bf 8f6f 	isb	sy
 801a8f4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a8f8:	e7fe      	b.n	801a8f8 <vTaskStartScheduler+0x88>
 801a8fa:	bf00      	nop
 801a8fc:	0803a68c 	.word	0x0803a68c
 801a900:	0801a6ed 	.word	0x0801a6ed
 801a904:	20003730 	.word	0x20003730
 801a908:	20003c28 	.word	0x20003c28
 801a90c:	200002d8 	.word	0x200002d8
 801a910:	20003734 	.word	0x20003734
 801a914:	20003748 	.word	0x20003748
 801a918:	20003750 	.word	0x20003750

0801a91c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801a91c:	4a02      	ldr	r2, [pc, #8]	@ (801a928 <vTaskSuspendAll+0xc>)
 801a91e:	6813      	ldr	r3, [r2, #0]
 801a920:	3301      	adds	r3, #1
 801a922:	6013      	str	r3, [r2, #0]
}
 801a924:	4770      	bx	lr
 801a926:	bf00      	nop
 801a928:	2000372c 	.word	0x2000372c

0801a92c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801a92c:	4b01      	ldr	r3, [pc, #4]	@ (801a934 <xTaskGetTickCount+0x8>)
 801a92e:	6818      	ldr	r0, [r3, #0]
}
 801a930:	4770      	bx	lr
 801a932:	bf00      	nop
 801a934:	20003750 	.word	0x20003750

0801a938 <xTaskIncrementTick>:
{
 801a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a93a:	4b3a      	ldr	r3, [pc, #232]	@ (801aa24 <xTaskIncrementTick+0xec>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d169      	bne.n	801aa16 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a942:	4b39      	ldr	r3, [pc, #228]	@ (801aa28 <xTaskIncrementTick+0xf0>)
 801a944:	681d      	ldr	r5, [r3, #0]
 801a946:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801a948:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a94a:	b9c5      	cbnz	r5, 801a97e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801a94c:	4b37      	ldr	r3, [pc, #220]	@ (801aa2c <xTaskIncrementTick+0xf4>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	b143      	cbz	r3, 801a966 <xTaskIncrementTick+0x2e>
 801a954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a958:	f383 8811 	msr	BASEPRI, r3
 801a95c:	f3bf 8f6f 	isb	sy
 801a960:	f3bf 8f4f 	dsb	sy
 801a964:	e7fe      	b.n	801a964 <xTaskIncrementTick+0x2c>
 801a966:	4a31      	ldr	r2, [pc, #196]	@ (801aa2c <xTaskIncrementTick+0xf4>)
 801a968:	6811      	ldr	r1, [r2, #0]
 801a96a:	4b31      	ldr	r3, [pc, #196]	@ (801aa30 <xTaskIncrementTick+0xf8>)
 801a96c:	6818      	ldr	r0, [r3, #0]
 801a96e:	6010      	str	r0, [r2, #0]
 801a970:	6019      	str	r1, [r3, #0]
 801a972:	4a30      	ldr	r2, [pc, #192]	@ (801aa34 <xTaskIncrementTick+0xfc>)
 801a974:	6813      	ldr	r3, [r2, #0]
 801a976:	3301      	adds	r3, #1
 801a978:	6013      	str	r3, [r2, #0]
 801a97a:	f7ff fd4f 	bl	801a41c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a97e:	4b2e      	ldr	r3, [pc, #184]	@ (801aa38 <xTaskIncrementTick+0x100>)
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	42ab      	cmp	r3, r5
 801a984:	d93d      	bls.n	801aa02 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801a986:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a988:	4b2c      	ldr	r3, [pc, #176]	@ (801aa3c <xTaskIncrementTick+0x104>)
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a98e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a992:	009a      	lsls	r2, r3, #2
 801a994:	4b2a      	ldr	r3, [pc, #168]	@ (801aa40 <xTaskIncrementTick+0x108>)
 801a996:	589b      	ldr	r3, [r3, r2]
 801a998:	2b01      	cmp	r3, #1
 801a99a:	d900      	bls.n	801a99e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 801a99c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 801a99e:	4b29      	ldr	r3, [pc, #164]	@ (801aa44 <xTaskIncrementTick+0x10c>)
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d03c      	beq.n	801aa20 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801a9a6:	2701      	movs	r7, #1
	return xSwitchRequired;
 801a9a8:	e03a      	b.n	801aa20 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801a9aa:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a9ac:	4b1f      	ldr	r3, [pc, #124]	@ (801aa2c <xTaskIncrementTick+0xf4>)
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	b343      	cbz	r3, 801aa06 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9b4:	4b1d      	ldr	r3, [pc, #116]	@ (801aa2c <xTaskIncrementTick+0xf4>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	68db      	ldr	r3, [r3, #12]
 801a9ba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a9bc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801a9be:	429d      	cmp	r5, r3
 801a9c0:	d326      	bcc.n	801aa10 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a9c2:	1d26      	adds	r6, r4, #4
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f7fe ff37 	bl	8019838 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a9ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a9cc:	b11b      	cbz	r3, 801a9d6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a9ce:	f104 0018 	add.w	r0, r4, #24
 801a9d2:	f7fe ff31 	bl	8019838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a9d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a9d8:	4a1b      	ldr	r2, [pc, #108]	@ (801aa48 <xTaskIncrementTick+0x110>)
 801a9da:	6812      	ldr	r2, [r2, #0]
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d901      	bls.n	801a9e4 <xTaskIncrementTick+0xac>
 801a9e0:	4a19      	ldr	r2, [pc, #100]	@ (801aa48 <xTaskIncrementTick+0x110>)
 801a9e2:	6013      	str	r3, [r2, #0]
 801a9e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a9e8:	009a      	lsls	r2, r3, #2
 801a9ea:	4631      	mov	r1, r6
 801a9ec:	4814      	ldr	r0, [pc, #80]	@ (801aa40 <xTaskIncrementTick+0x108>)
 801a9ee:	4410      	add	r0, r2
 801a9f0:	f7fe fefe 	bl	80197f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a9f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a9f6:	4b11      	ldr	r3, [pc, #68]	@ (801aa3c <xTaskIncrementTick+0x104>)
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9fc:	429a      	cmp	r2, r3
 801a9fe:	d2d4      	bcs.n	801a9aa <xTaskIncrementTick+0x72>
 801aa00:	e7d4      	b.n	801a9ac <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801aa02:	2700      	movs	r7, #0
 801aa04:	e7d2      	b.n	801a9ac <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa06:	4b0c      	ldr	r3, [pc, #48]	@ (801aa38 <xTaskIncrementTick+0x100>)
 801aa08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aa0c:	601a      	str	r2, [r3, #0]
					break;
 801aa0e:	e7bb      	b.n	801a988 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 801aa10:	4a09      	ldr	r2, [pc, #36]	@ (801aa38 <xTaskIncrementTick+0x100>)
 801aa12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801aa14:	e7b8      	b.n	801a988 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 801aa16:	4a0d      	ldr	r2, [pc, #52]	@ (801aa4c <xTaskIncrementTick+0x114>)
 801aa18:	6813      	ldr	r3, [r2, #0]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801aa1e:	2700      	movs	r7, #0
}
 801aa20:	4638      	mov	r0, r7
 801aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa24:	2000372c 	.word	0x2000372c
 801aa28:	20003750 	.word	0x20003750
 801aa2c:	2000379c 	.word	0x2000379c
 801aa30:	20003798 	.word	0x20003798
 801aa34:	2000373c 	.word	0x2000373c
 801aa38:	20003734 	.word	0x20003734
 801aa3c:	20003c28 	.word	0x20003c28
 801aa40:	200037c8 	.word	0x200037c8
 801aa44:	20003740 	.word	0x20003740
 801aa48:	2000374c 	.word	0x2000374c
 801aa4c:	20003744 	.word	0x20003744

0801aa50 <xTaskResumeAll>:
{
 801aa50:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801aa52:	4b35      	ldr	r3, [pc, #212]	@ (801ab28 <xTaskResumeAll+0xd8>)
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	b943      	cbnz	r3, 801aa6a <xTaskResumeAll+0x1a>
 801aa58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa5c:	f383 8811 	msr	BASEPRI, r3
 801aa60:	f3bf 8f6f 	isb	sy
 801aa64:	f3bf 8f4f 	dsb	sy
 801aa68:	e7fe      	b.n	801aa68 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801aa6a:	f000 fd4b 	bl	801b504 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801aa6e:	4b2e      	ldr	r3, [pc, #184]	@ (801ab28 <xTaskResumeAll+0xd8>)
 801aa70:	681a      	ldr	r2, [r3, #0]
 801aa72:	3a01      	subs	r2, #1
 801aa74:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d14f      	bne.n	801ab1c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801aa7c:	4b2b      	ldr	r3, [pc, #172]	@ (801ab2c <xTaskResumeAll+0xdc>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	b90b      	cbnz	r3, 801aa86 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801aa82:	2400      	movs	r4, #0
 801aa84:	e04b      	b.n	801ab1e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 801aa86:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801aa88:	4b29      	ldr	r3, [pc, #164]	@ (801ab30 <xTaskResumeAll+0xe0>)
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	b31b      	cbz	r3, 801aad6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa8e:	4b28      	ldr	r3, [pc, #160]	@ (801ab30 <xTaskResumeAll+0xe0>)
 801aa90:	68db      	ldr	r3, [r3, #12]
 801aa92:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801aa94:	f104 0018 	add.w	r0, r4, #24
 801aa98:	f7fe fece 	bl	8019838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aa9c:	1d25      	adds	r5, r4, #4
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	f7fe feca 	bl	8019838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801aaa4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801aaa6:	4b23      	ldr	r3, [pc, #140]	@ (801ab34 <xTaskResumeAll+0xe4>)
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	4298      	cmp	r0, r3
 801aaac:	d901      	bls.n	801aab2 <xTaskResumeAll+0x62>
 801aaae:	4b21      	ldr	r3, [pc, #132]	@ (801ab34 <xTaskResumeAll+0xe4>)
 801aab0:	6018      	str	r0, [r3, #0]
 801aab2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801aab6:	4629      	mov	r1, r5
 801aab8:	4b1f      	ldr	r3, [pc, #124]	@ (801ab38 <xTaskResumeAll+0xe8>)
 801aaba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801aabe:	f7fe fe97 	bl	80197f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801aac2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801aac4:	4b1d      	ldr	r3, [pc, #116]	@ (801ab3c <xTaskResumeAll+0xec>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d3dc      	bcc.n	801aa88 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801aace:	4b1c      	ldr	r3, [pc, #112]	@ (801ab40 <xTaskResumeAll+0xf0>)
 801aad0:	2201      	movs	r2, #1
 801aad2:	601a      	str	r2, [r3, #0]
 801aad4:	e7d8      	b.n	801aa88 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 801aad6:	b10c      	cbz	r4, 801aadc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 801aad8:	f7ff fca0 	bl	801a41c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801aadc:	4b19      	ldr	r3, [pc, #100]	@ (801ab44 <xTaskResumeAll+0xf4>)
 801aade:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801aae0:	b984      	cbnz	r4, 801ab04 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 801aae2:	4b17      	ldr	r3, [pc, #92]	@ (801ab40 <xTaskResumeAll+0xf0>)
 801aae4:	681c      	ldr	r4, [r3, #0]
 801aae6:	b1d4      	cbz	r4, 801ab1e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 801aae8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aaec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aaf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801aaf4:	f3bf 8f4f 	dsb	sy
 801aaf8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801aafc:	2401      	movs	r4, #1
 801aafe:	e00e      	b.n	801ab1e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 801ab00:	3c01      	subs	r4, #1
 801ab02:	d007      	beq.n	801ab14 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 801ab04:	f7ff ff18 	bl	801a938 <xTaskIncrementTick>
 801ab08:	2800      	cmp	r0, #0
 801ab0a:	d0f9      	beq.n	801ab00 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801ab0c:	4b0c      	ldr	r3, [pc, #48]	@ (801ab40 <xTaskResumeAll+0xf0>)
 801ab0e:	2201      	movs	r2, #1
 801ab10:	601a      	str	r2, [r3, #0]
 801ab12:	e7f5      	b.n	801ab00 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 801ab14:	4b0b      	ldr	r3, [pc, #44]	@ (801ab44 <xTaskResumeAll+0xf4>)
 801ab16:	2200      	movs	r2, #0
 801ab18:	601a      	str	r2, [r3, #0]
 801ab1a:	e7e2      	b.n	801aae2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801ab1c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801ab1e:	f000 fd13 	bl	801b548 <vPortExitCritical>
}
 801ab22:	4620      	mov	r0, r4
 801ab24:	bd38      	pop	{r3, r4, r5, pc}
 801ab26:	bf00      	nop
 801ab28:	2000372c 	.word	0x2000372c
 801ab2c:	20003754 	.word	0x20003754
 801ab30:	20003784 	.word	0x20003784
 801ab34:	2000374c 	.word	0x2000374c
 801ab38:	200037c8 	.word	0x200037c8
 801ab3c:	20003c28 	.word	0x20003c28
 801ab40:	20003740 	.word	0x20003740
 801ab44:	20003744 	.word	0x20003744

0801ab48 <vTaskDelay>:
	{
 801ab48:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ab4a:	b1a8      	cbz	r0, 801ab78 <vTaskDelay+0x30>
 801ab4c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801ab4e:	4b10      	ldr	r3, [pc, #64]	@ (801ab90 <vTaskDelay+0x48>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	b143      	cbz	r3, 801ab66 <vTaskDelay+0x1e>
 801ab54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab58:	f383 8811 	msr	BASEPRI, r3
 801ab5c:	f3bf 8f6f 	isb	sy
 801ab60:	f3bf 8f4f 	dsb	sy
 801ab64:	e7fe      	b.n	801ab64 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801ab66:	f7ff fed9 	bl	801a91c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ab6a:	2100      	movs	r1, #0
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	f7ff fdd1 	bl	801a714 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801ab72:	f7ff ff6d 	bl	801aa50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801ab76:	b948      	cbnz	r0, 801ab8c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801ab78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ab7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ab80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801ab84:	f3bf 8f4f 	dsb	sy
 801ab88:	f3bf 8f6f 	isb	sy
	}
 801ab8c:	bd10      	pop	{r4, pc}
 801ab8e:	bf00      	nop
 801ab90:	2000372c 	.word	0x2000372c

0801ab94 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801ab94:	4b22      	ldr	r3, [pc, #136]	@ (801ac20 <vTaskSwitchContext+0x8c>)
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	b11b      	cbz	r3, 801aba2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801ab9a:	4b22      	ldr	r3, [pc, #136]	@ (801ac24 <vTaskSwitchContext+0x90>)
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	601a      	str	r2, [r3, #0]
 801aba0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 801aba2:	4b20      	ldr	r3, [pc, #128]	@ (801ac24 <vTaskSwitchContext+0x90>)
 801aba4:	2200      	movs	r2, #0
 801aba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aba8:	4b1f      	ldr	r3, [pc, #124]	@ (801ac28 <vTaskSwitchContext+0x94>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801abb0:	008a      	lsls	r2, r1, #2
 801abb2:	491e      	ldr	r1, [pc, #120]	@ (801ac2c <vTaskSwitchContext+0x98>)
 801abb4:	588a      	ldr	r2, [r1, r2]
 801abb6:	b95a      	cbnz	r2, 801abd0 <vTaskSwitchContext+0x3c>
 801abb8:	b10b      	cbz	r3, 801abbe <vTaskSwitchContext+0x2a>
 801abba:	3b01      	subs	r3, #1
 801abbc:	e7f6      	b.n	801abac <vTaskSwitchContext+0x18>
 801abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abc2:	f383 8811 	msr	BASEPRI, r3
 801abc6:	f3bf 8f6f 	isb	sy
 801abca:	f3bf 8f4f 	dsb	sy
 801abce:	e7fe      	b.n	801abce <vTaskSwitchContext+0x3a>
 801abd0:	4608      	mov	r0, r1
 801abd2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801abd6:	008a      	lsls	r2, r1, #2
 801abd8:	4402      	add	r2, r0
 801abda:	6851      	ldr	r1, [r2, #4]
 801abdc:	6849      	ldr	r1, [r1, #4]
 801abde:	6051      	str	r1, [r2, #4]
 801abe0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801abe4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801abe8:	3208      	adds	r2, #8
 801abea:	4402      	add	r2, r0
 801abec:	4291      	cmp	r1, r2
 801abee:	d00f      	beq.n	801ac10 <vTaskSwitchContext+0x7c>
 801abf0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801abf4:	0091      	lsls	r1, r2, #2
 801abf6:	4a0d      	ldr	r2, [pc, #52]	@ (801ac2c <vTaskSwitchContext+0x98>)
 801abf8:	440a      	add	r2, r1
 801abfa:	6852      	ldr	r2, [r2, #4]
 801abfc:	68d1      	ldr	r1, [r2, #12]
 801abfe:	4a0c      	ldr	r2, [pc, #48]	@ (801ac30 <vTaskSwitchContext+0x9c>)
 801ac00:	6011      	str	r1, [r2, #0]
 801ac02:	4909      	ldr	r1, [pc, #36]	@ (801ac28 <vTaskSwitchContext+0x94>)
 801ac04:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ac06:	6813      	ldr	r3, [r2, #0]
 801ac08:	3358      	adds	r3, #88	@ 0x58
 801ac0a:	4a0a      	ldr	r2, [pc, #40]	@ (801ac34 <vTaskSwitchContext+0xa0>)
 801ac0c:	6013      	str	r3, [r2, #0]
}
 801ac0e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac10:	6848      	ldr	r0, [r1, #4]
 801ac12:	4662      	mov	r2, ip
 801ac14:	0091      	lsls	r1, r2, #2
 801ac16:	4a05      	ldr	r2, [pc, #20]	@ (801ac2c <vTaskSwitchContext+0x98>)
 801ac18:	440a      	add	r2, r1
 801ac1a:	6050      	str	r0, [r2, #4]
 801ac1c:	e7e8      	b.n	801abf0 <vTaskSwitchContext+0x5c>
 801ac1e:	bf00      	nop
 801ac20:	2000372c 	.word	0x2000372c
 801ac24:	20003740 	.word	0x20003740
 801ac28:	2000374c 	.word	0x2000374c
 801ac2c:	200037c8 	.word	0x200037c8
 801ac30:	20003c28 	.word	0x20003c28
 801ac34:	200002d8 	.word	0x200002d8

0801ac38 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801ac38:	b158      	cbz	r0, 801ac52 <vTaskPlaceOnEventList+0x1a>
{
 801ac3a:	b510      	push	{r4, lr}
 801ac3c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ac3e:	4a09      	ldr	r2, [pc, #36]	@ (801ac64 <vTaskPlaceOnEventList+0x2c>)
 801ac40:	6811      	ldr	r1, [r2, #0]
 801ac42:	3118      	adds	r1, #24
 801ac44:	f7fe fddf 	bl	8019806 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ac48:	2101      	movs	r1, #1
 801ac4a:	4620      	mov	r0, r4
 801ac4c:	f7ff fd62 	bl	801a714 <prvAddCurrentTaskToDelayedList>
}
 801ac50:	bd10      	pop	{r4, pc}
 801ac52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac56:	f383 8811 	msr	BASEPRI, r3
 801ac5a:	f3bf 8f6f 	isb	sy
 801ac5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801ac62:	e7fe      	b.n	801ac62 <vTaskPlaceOnEventList+0x2a>
 801ac64:	20003c28 	.word	0x20003c28

0801ac68 <vTaskPlaceOnEventListRestricted>:
	{
 801ac68:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801ac6a:	b170      	cbz	r0, 801ac8a <vTaskPlaceOnEventListRestricted+0x22>
 801ac6c:	460d      	mov	r5, r1
 801ac6e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ac70:	4a0a      	ldr	r2, [pc, #40]	@ (801ac9c <vTaskPlaceOnEventListRestricted+0x34>)
 801ac72:	6811      	ldr	r1, [r2, #0]
 801ac74:	3118      	adds	r1, #24
 801ac76:	f7fe fdbb 	bl	80197f0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801ac7a:	b10c      	cbz	r4, 801ac80 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 801ac7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801ac80:	4621      	mov	r1, r4
 801ac82:	4628      	mov	r0, r5
 801ac84:	f7ff fd46 	bl	801a714 <prvAddCurrentTaskToDelayedList>
	}
 801ac88:	bd38      	pop	{r3, r4, r5, pc}
 801ac8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac8e:	f383 8811 	msr	BASEPRI, r3
 801ac92:	f3bf 8f6f 	isb	sy
 801ac96:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801ac9a:	e7fe      	b.n	801ac9a <vTaskPlaceOnEventListRestricted+0x32>
 801ac9c:	20003c28 	.word	0x20003c28

0801aca0 <xTaskRemoveFromEventList>:
{
 801aca0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aca2:	68c3      	ldr	r3, [r0, #12]
 801aca4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801aca6:	b324      	cbz	r4, 801acf2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801aca8:	f104 0518 	add.w	r5, r4, #24
 801acac:	4628      	mov	r0, r5
 801acae:	f7fe fdc3 	bl	8019838 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801acb2:	4b18      	ldr	r3, [pc, #96]	@ (801ad14 <xTaskRemoveFromEventList+0x74>)
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	bb2b      	cbnz	r3, 801ad04 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801acb8:	1d25      	adds	r5, r4, #4
 801acba:	4628      	mov	r0, r5
 801acbc:	f7fe fdbc 	bl	8019838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801acc0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801acc2:	4b15      	ldr	r3, [pc, #84]	@ (801ad18 <xTaskRemoveFromEventList+0x78>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	4298      	cmp	r0, r3
 801acc8:	d901      	bls.n	801acce <xTaskRemoveFromEventList+0x2e>
 801acca:	4b13      	ldr	r3, [pc, #76]	@ (801ad18 <xTaskRemoveFromEventList+0x78>)
 801accc:	6018      	str	r0, [r3, #0]
 801acce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801acd2:	4629      	mov	r1, r5
 801acd4:	4b11      	ldr	r3, [pc, #68]	@ (801ad1c <xTaskRemoveFromEventList+0x7c>)
 801acd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801acda:	f7fe fd89 	bl	80197f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801acde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801ace0:	4b0f      	ldr	r3, [pc, #60]	@ (801ad20 <xTaskRemoveFromEventList+0x80>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d911      	bls.n	801ad0e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801acea:	2001      	movs	r0, #1
 801acec:	4b0d      	ldr	r3, [pc, #52]	@ (801ad24 <xTaskRemoveFromEventList+0x84>)
 801acee:	6018      	str	r0, [r3, #0]
}
 801acf0:	bd38      	pop	{r3, r4, r5, pc}
 801acf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acf6:	f383 8811 	msr	BASEPRI, r3
 801acfa:	f3bf 8f6f 	isb	sy
 801acfe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801ad02:	e7fe      	b.n	801ad02 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801ad04:	4629      	mov	r1, r5
 801ad06:	4808      	ldr	r0, [pc, #32]	@ (801ad28 <xTaskRemoveFromEventList+0x88>)
 801ad08:	f7fe fd72 	bl	80197f0 <vListInsertEnd>
 801ad0c:	e7e7      	b.n	801acde <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801ad0e:	2000      	movs	r0, #0
	return xReturn;
 801ad10:	e7ee      	b.n	801acf0 <xTaskRemoveFromEventList+0x50>
 801ad12:	bf00      	nop
 801ad14:	2000372c 	.word	0x2000372c
 801ad18:	2000374c 	.word	0x2000374c
 801ad1c:	200037c8 	.word	0x200037c8
 801ad20:	20003c28 	.word	0x20003c28
 801ad24:	20003740 	.word	0x20003740
 801ad28:	20003784 	.word	0x20003784

0801ad2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801ad2c:	4b03      	ldr	r3, [pc, #12]	@ (801ad3c <vTaskInternalSetTimeOutState+0x10>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ad32:	4b03      	ldr	r3, [pc, #12]	@ (801ad40 <vTaskInternalSetTimeOutState+0x14>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	6043      	str	r3, [r0, #4]
}
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	2000373c 	.word	0x2000373c
 801ad40:	20003750 	.word	0x20003750

0801ad44 <xTaskCheckForTimeOut>:
{
 801ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801ad46:	b1c8      	cbz	r0, 801ad7c <xTaskCheckForTimeOut+0x38>
 801ad48:	460c      	mov	r4, r1
 801ad4a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801ad4c:	b1f9      	cbz	r1, 801ad8e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801ad4e:	f000 fbd9 	bl	801b504 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801ad52:	4b1b      	ldr	r3, [pc, #108]	@ (801adc0 <xTaskCheckForTimeOut+0x7c>)
 801ad54:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801ad56:	686b      	ldr	r3, [r5, #4]
 801ad58:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801ad5a:	6822      	ldr	r2, [r4, #0]
 801ad5c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ad60:	d026      	beq.n	801adb0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801ad62:	4e18      	ldr	r6, [pc, #96]	@ (801adc4 <xTaskCheckForTimeOut+0x80>)
 801ad64:	6836      	ldr	r6, [r6, #0]
 801ad66:	682f      	ldr	r7, [r5, #0]
 801ad68:	42b7      	cmp	r7, r6
 801ad6a:	d001      	beq.n	801ad70 <xTaskCheckForTimeOut+0x2c>
 801ad6c:	428b      	cmp	r3, r1
 801ad6e:	d924      	bls.n	801adba <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ad70:	4282      	cmp	r2, r0
 801ad72:	d815      	bhi.n	801ada0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 801ad74:	2300      	movs	r3, #0
 801ad76:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801ad78:	2401      	movs	r4, #1
 801ad7a:	e01a      	b.n	801adb2 <xTaskCheckForTimeOut+0x6e>
 801ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad80:	f383 8811 	msr	BASEPRI, r3
 801ad84:	f3bf 8f6f 	isb	sy
 801ad88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801ad8c:	e7fe      	b.n	801ad8c <xTaskCheckForTimeOut+0x48>
 801ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad92:	f383 8811 	msr	BASEPRI, r3
 801ad96:	f3bf 8f6f 	isb	sy
 801ad9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801ad9e:	e7fe      	b.n	801ad9e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801ada0:	1a5b      	subs	r3, r3, r1
 801ada2:	4413      	add	r3, r2
 801ada4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801ada6:	4628      	mov	r0, r5
 801ada8:	f7ff ffc0 	bl	801ad2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801adac:	2400      	movs	r4, #0
 801adae:	e000      	b.n	801adb2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801adb0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801adb2:	f000 fbc9 	bl	801b548 <vPortExitCritical>
}
 801adb6:	4620      	mov	r0, r4
 801adb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801adba:	2401      	movs	r4, #1
 801adbc:	e7f9      	b.n	801adb2 <xTaskCheckForTimeOut+0x6e>
 801adbe:	bf00      	nop
 801adc0:	20003750 	.word	0x20003750
 801adc4:	2000373c 	.word	0x2000373c

0801adc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801adc8:	4b01      	ldr	r3, [pc, #4]	@ (801add0 <vTaskMissedYield+0x8>)
 801adca:	2201      	movs	r2, #1
 801adcc:	601a      	str	r2, [r3, #0]
}
 801adce:	4770      	bx	lr
 801add0:	20003740 	.word	0x20003740

0801add4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801add4:	4b01      	ldr	r3, [pc, #4]	@ (801addc <xTaskGetCurrentTaskHandle+0x8>)
 801add6:	6818      	ldr	r0, [r3, #0]
	}
 801add8:	4770      	bx	lr
 801adda:	bf00      	nop
 801addc:	20003c28 	.word	0x20003c28

0801ade0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801ade0:	4b05      	ldr	r3, [pc, #20]	@ (801adf8 <xTaskGetSchedulerState+0x18>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	b133      	cbz	r3, 801adf4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ade6:	4b05      	ldr	r3, [pc, #20]	@ (801adfc <xTaskGetSchedulerState+0x1c>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	b10b      	cbz	r3, 801adf0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801adec:	2000      	movs	r0, #0
	}
 801adee:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801adf0:	2002      	movs	r0, #2
 801adf2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801adf4:	2001      	movs	r0, #1
 801adf6:	4770      	bx	lr
 801adf8:	20003748 	.word	0x20003748
 801adfc:	2000372c 	.word	0x2000372c

0801ae00 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d03e      	beq.n	801ae82 <xTaskPriorityInherit+0x82>
	{
 801ae04:	b538      	push	{r3, r4, r5, lr}
 801ae06:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801ae08:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801ae0a:	4a20      	ldr	r2, [pc, #128]	@ (801ae8c <xTaskPriorityInherit+0x8c>)
 801ae0c:	6812      	ldr	r2, [r2, #0]
 801ae0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801ae10:	4293      	cmp	r3, r2
 801ae12:	d22e      	bcs.n	801ae72 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ae14:	6982      	ldr	r2, [r0, #24]
 801ae16:	2a00      	cmp	r2, #0
 801ae18:	db05      	blt.n	801ae26 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae1a:	4a1c      	ldr	r2, [pc, #112]	@ (801ae8c <xTaskPriorityInherit+0x8c>)
 801ae1c:	6812      	ldr	r2, [r2, #0]
 801ae1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801ae20:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801ae24:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801ae26:	6961      	ldr	r1, [r4, #20]
 801ae28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ae2c:	4a18      	ldr	r2, [pc, #96]	@ (801ae90 <xTaskPriorityInherit+0x90>)
 801ae2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ae32:	4299      	cmp	r1, r3
 801ae34:	d005      	beq.n	801ae42 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ae36:	4b15      	ldr	r3, [pc, #84]	@ (801ae8c <xTaskPriorityInherit+0x8c>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801ae3e:	2001      	movs	r0, #1
	}
 801ae40:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ae42:	1d25      	adds	r5, r4, #4
 801ae44:	4628      	mov	r0, r5
 801ae46:	f7fe fcf7 	bl	8019838 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ae4a:	4b10      	ldr	r3, [pc, #64]	@ (801ae8c <xTaskPriorityInherit+0x8c>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801ae50:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ae52:	4b10      	ldr	r3, [pc, #64]	@ (801ae94 <xTaskPriorityInherit+0x94>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	4298      	cmp	r0, r3
 801ae58:	d901      	bls.n	801ae5e <xTaskPriorityInherit+0x5e>
 801ae5a:	4b0e      	ldr	r3, [pc, #56]	@ (801ae94 <xTaskPriorityInherit+0x94>)
 801ae5c:	6018      	str	r0, [r3, #0]
 801ae5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ae62:	4629      	mov	r1, r5
 801ae64:	4b0a      	ldr	r3, [pc, #40]	@ (801ae90 <xTaskPriorityInherit+0x90>)
 801ae66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ae6a:	f7fe fcc1 	bl	80197f0 <vListInsertEnd>
				xReturn = pdTRUE;
 801ae6e:	2001      	movs	r0, #1
 801ae70:	e7e6      	b.n	801ae40 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801ae72:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801ae74:	4b05      	ldr	r3, [pc, #20]	@ (801ae8c <xTaskPriorityInherit+0x8c>)
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae7a:	429a      	cmp	r2, r3
 801ae7c:	d303      	bcc.n	801ae86 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801ae7e:	2000      	movs	r0, #0
 801ae80:	e7de      	b.n	801ae40 <xTaskPriorityInherit+0x40>
 801ae82:	2000      	movs	r0, #0
	}
 801ae84:	4770      	bx	lr
					xReturn = pdTRUE;
 801ae86:	2001      	movs	r0, #1
		return xReturn;
 801ae88:	e7da      	b.n	801ae40 <xTaskPriorityInherit+0x40>
 801ae8a:	bf00      	nop
 801ae8c:	20003c28 	.word	0x20003c28
 801ae90:	200037c8 	.word	0x200037c8
 801ae94:	2000374c 	.word	0x2000374c

0801ae98 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	d03b      	beq.n	801af14 <xTaskPriorityDisinherit+0x7c>
	{
 801ae9c:	b538      	push	{r3, r4, r5, lr}
 801ae9e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801aea0:	4b1e      	ldr	r3, [pc, #120]	@ (801af1c <xTaskPriorityDisinherit+0x84>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4283      	cmp	r3, r0
 801aea6:	d008      	beq.n	801aeba <xTaskPriorityDisinherit+0x22>
 801aea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aeac:	f383 8811 	msr	BASEPRI, r3
 801aeb0:	f3bf 8f6f 	isb	sy
 801aeb4:	f3bf 8f4f 	dsb	sy
 801aeb8:	e7fe      	b.n	801aeb8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801aeba:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801aebc:	b943      	cbnz	r3, 801aed0 <xTaskPriorityDisinherit+0x38>
 801aebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aec2:	f383 8811 	msr	BASEPRI, r3
 801aec6:	f3bf 8f6f 	isb	sy
 801aeca:	f3bf 8f4f 	dsb	sy
 801aece:	e7fe      	b.n	801aece <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801aed0:	3b01      	subs	r3, #1
 801aed2:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aed4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801aed6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801aed8:	4291      	cmp	r1, r2
 801aeda:	d01d      	beq.n	801af18 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aedc:	b10b      	cbz	r3, 801aee2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801aede:	2000      	movs	r0, #0
	}
 801aee0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aee2:	1d05      	adds	r5, r0, #4
 801aee4:	4628      	mov	r0, r5
 801aee6:	f7fe fca7 	bl	8019838 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801aeea:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801aeec:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aeee:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801aef2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801aef4:	4b0a      	ldr	r3, [pc, #40]	@ (801af20 <xTaskPriorityDisinherit+0x88>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4298      	cmp	r0, r3
 801aefa:	d901      	bls.n	801af00 <xTaskPriorityDisinherit+0x68>
 801aefc:	4b08      	ldr	r3, [pc, #32]	@ (801af20 <xTaskPriorityDisinherit+0x88>)
 801aefe:	6018      	str	r0, [r3, #0]
 801af00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801af04:	4629      	mov	r1, r5
 801af06:	4b07      	ldr	r3, [pc, #28]	@ (801af24 <xTaskPriorityDisinherit+0x8c>)
 801af08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801af0c:	f7fe fc70 	bl	80197f0 <vListInsertEnd>
					xReturn = pdTRUE;
 801af10:	2001      	movs	r0, #1
 801af12:	e7e5      	b.n	801aee0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801af14:	2000      	movs	r0, #0
	}
 801af16:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801af18:	2000      	movs	r0, #0
 801af1a:	e7e1      	b.n	801aee0 <xTaskPriorityDisinherit+0x48>
 801af1c:	20003c28 	.word	0x20003c28
 801af20:	2000374c 	.word	0x2000374c
 801af24:	200037c8 	.word	0x200037c8

0801af28 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801af28:	2800      	cmp	r0, #0
 801af2a:	d046      	beq.n	801afba <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801af2c:	b538      	push	{r3, r4, r5, lr}
 801af2e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801af30:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801af32:	b943      	cbnz	r3, 801af46 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af38:	f383 8811 	msr	BASEPRI, r3
 801af3c:	f3bf 8f6f 	isb	sy
 801af40:	f3bf 8f4f 	dsb	sy
 801af44:	e7fe      	b.n	801af44 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801af46:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801af48:	428a      	cmp	r2, r1
 801af4a:	d200      	bcs.n	801af4e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801af4c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801af4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801af50:	4291      	cmp	r1, r2
 801af52:	d001      	beq.n	801af58 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801af54:	2b01      	cmp	r3, #1
 801af56:	d000      	beq.n	801af5a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801af58:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801af5a:	4b18      	ldr	r3, [pc, #96]	@ (801afbc <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	42a3      	cmp	r3, r4
 801af60:	d022      	beq.n	801afa8 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801af62:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801af64:	69a3      	ldr	r3, [r4, #24]
 801af66:	2b00      	cmp	r3, #0
 801af68:	db02      	blt.n	801af70 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801af6a:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801af6e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801af70:	6962      	ldr	r2, [r4, #20]
 801af72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801af76:	4b12      	ldr	r3, [pc, #72]	@ (801afc0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801af78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d1eb      	bne.n	801af58 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801af80:	1d25      	adds	r5, r4, #4
 801af82:	4628      	mov	r0, r5
 801af84:	f7fe fc58 	bl	8019838 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801af88:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801af8a:	4b0e      	ldr	r3, [pc, #56]	@ (801afc4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	4298      	cmp	r0, r3
 801af90:	d901      	bls.n	801af96 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801af92:	4b0c      	ldr	r3, [pc, #48]	@ (801afc4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801af94:	6018      	str	r0, [r3, #0]
 801af96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801af9a:	4629      	mov	r1, r5
 801af9c:	4b08      	ldr	r3, [pc, #32]	@ (801afc0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801af9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801afa2:	f7fe fc25 	bl	80197f0 <vListInsertEnd>
	}
 801afa6:	e7d7      	b.n	801af58 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801afac:	f383 8811 	msr	BASEPRI, r3
 801afb0:	f3bf 8f6f 	isb	sy
 801afb4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801afb8:	e7fe      	b.n	801afb8 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801afba:	4770      	bx	lr
 801afbc:	20003c28 	.word	0x20003c28
 801afc0:	200037c8 	.word	0x200037c8
 801afc4:	2000374c 	.word	0x2000374c

0801afc8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801afc8:	4b05      	ldr	r3, [pc, #20]	@ (801afe0 <pvTaskIncrementMutexHeldCount+0x18>)
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	b123      	cbz	r3, 801afd8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801afce:	4b04      	ldr	r3, [pc, #16]	@ (801afe0 <pvTaskIncrementMutexHeldCount+0x18>)
 801afd0:	681a      	ldr	r2, [r3, #0]
 801afd2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801afd4:	3301      	adds	r3, #1
 801afd6:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801afd8:	4b01      	ldr	r3, [pc, #4]	@ (801afe0 <pvTaskIncrementMutexHeldCount+0x18>)
 801afda:	6818      	ldr	r0, [r3, #0]
	}
 801afdc:	4770      	bx	lr
 801afde:	bf00      	nop
 801afe0:	20003c28 	.word	0x20003c28

0801afe4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801afe4:	4b06      	ldr	r3, [pc, #24]	@ (801b000 <prvGetNextExpireTime+0x1c>)
 801afe6:	681a      	ldr	r2, [r3, #0]
 801afe8:	6813      	ldr	r3, [r2, #0]
 801afea:	b92b      	cbnz	r3, 801aff8 <prvGetNextExpireTime+0x14>
 801afec:	2301      	movs	r3, #1
 801afee:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801aff0:	b923      	cbnz	r3, 801affc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801aff2:	68d3      	ldr	r3, [r2, #12]
 801aff4:	6818      	ldr	r0, [r3, #0]
 801aff6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801aff8:	2300      	movs	r3, #0
 801affa:	e7f8      	b.n	801afee <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801affc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801affe:	4770      	bx	lr
 801b000:	20003d2c 	.word	0x20003d2c

0801b004 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b004:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b006:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b008:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b00a:	4291      	cmp	r1, r2
 801b00c:	d80c      	bhi.n	801b028 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b00e:	1ad2      	subs	r2, r2, r3
 801b010:	6983      	ldr	r3, [r0, #24]
 801b012:	429a      	cmp	r2, r3
 801b014:	d301      	bcc.n	801b01a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b016:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801b018:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b01a:	1d01      	adds	r1, r0, #4
 801b01c:	4b09      	ldr	r3, [pc, #36]	@ (801b044 <prvInsertTimerInActiveList+0x40>)
 801b01e:	6818      	ldr	r0, [r3, #0]
 801b020:	f7fe fbf1 	bl	8019806 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801b024:	2000      	movs	r0, #0
 801b026:	e7f7      	b.n	801b018 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b028:	429a      	cmp	r2, r3
 801b02a:	d201      	bcs.n	801b030 <prvInsertTimerInActiveList+0x2c>
 801b02c:	4299      	cmp	r1, r3
 801b02e:	d206      	bcs.n	801b03e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b030:	1d01      	adds	r1, r0, #4
 801b032:	4b05      	ldr	r3, [pc, #20]	@ (801b048 <prvInsertTimerInActiveList+0x44>)
 801b034:	6818      	ldr	r0, [r3, #0]
 801b036:	f7fe fbe6 	bl	8019806 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801b03a:	2000      	movs	r0, #0
 801b03c:	e7ec      	b.n	801b018 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801b03e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801b040:	e7ea      	b.n	801b018 <prvInsertTimerInActiveList+0x14>
 801b042:	bf00      	nop
 801b044:	20003d28 	.word	0x20003d28
 801b048:	20003d2c 	.word	0x20003d2c

0801b04c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b04c:	b530      	push	{r4, r5, lr}
 801b04e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b050:	f000 fa58 	bl	801b504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b054:	4b11      	ldr	r3, [pc, #68]	@ (801b09c <prvCheckForValidListAndQueue+0x50>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	b11b      	cbz	r3, 801b062 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b05a:	f000 fa75 	bl	801b548 <vPortExitCritical>
}
 801b05e:	b003      	add	sp, #12
 801b060:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801b062:	4d0f      	ldr	r5, [pc, #60]	@ (801b0a0 <prvCheckForValidListAndQueue+0x54>)
 801b064:	4628      	mov	r0, r5
 801b066:	f7fe fbb5 	bl	80197d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b06a:	4c0e      	ldr	r4, [pc, #56]	@ (801b0a4 <prvCheckForValidListAndQueue+0x58>)
 801b06c:	4620      	mov	r0, r4
 801b06e:	f7fe fbb1 	bl	80197d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b072:	4b0d      	ldr	r3, [pc, #52]	@ (801b0a8 <prvCheckForValidListAndQueue+0x5c>)
 801b074:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b076:	4b0d      	ldr	r3, [pc, #52]	@ (801b0ac <prvCheckForValidListAndQueue+0x60>)
 801b078:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b07a:	2300      	movs	r3, #0
 801b07c:	9300      	str	r3, [sp, #0]
 801b07e:	4b0c      	ldr	r3, [pc, #48]	@ (801b0b0 <prvCheckForValidListAndQueue+0x64>)
 801b080:	4a0c      	ldr	r2, [pc, #48]	@ (801b0b4 <prvCheckForValidListAndQueue+0x68>)
 801b082:	2110      	movs	r1, #16
 801b084:	200a      	movs	r0, #10
 801b086:	f7fe fce5 	bl	8019a54 <xQueueGenericCreateStatic>
 801b08a:	4b04      	ldr	r3, [pc, #16]	@ (801b09c <prvCheckForValidListAndQueue+0x50>)
 801b08c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801b08e:	2800      	cmp	r0, #0
 801b090:	d0e3      	beq.n	801b05a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b092:	4909      	ldr	r1, [pc, #36]	@ (801b0b8 <prvCheckForValidListAndQueue+0x6c>)
 801b094:	f7ff f984 	bl	801a3a0 <vQueueAddToRegistry>
 801b098:	e7df      	b.n	801b05a <prvCheckForValidListAndQueue+0xe>
 801b09a:	bf00      	nop
 801b09c:	20003d24 	.word	0x20003d24
 801b0a0:	20003d44 	.word	0x20003d44
 801b0a4:	20003d30 	.word	0x20003d30
 801b0a8:	20003d2c 	.word	0x20003d2c
 801b0ac:	20003d28 	.word	0x20003d28
 801b0b0:	20003c2c 	.word	0x20003c2c
 801b0b4:	20003c7c 	.word	0x20003c7c
 801b0b8:	0803a694 	.word	0x0803a694

0801b0bc <xTimerCreateTimerTask>:
{
 801b0bc:	b510      	push	{r4, lr}
 801b0be:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801b0c0:	f7ff ffc4 	bl	801b04c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801b0c4:	4b12      	ldr	r3, [pc, #72]	@ (801b110 <xTimerCreateTimerTask+0x54>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	b1cb      	cbz	r3, 801b0fe <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b0ca:	2400      	movs	r4, #0
 801b0cc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b0ce:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b0d0:	aa07      	add	r2, sp, #28
 801b0d2:	a906      	add	r1, sp, #24
 801b0d4:	a805      	add	r0, sp, #20
 801b0d6:	f7fe fb71 	bl	80197bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b0da:	9b05      	ldr	r3, [sp, #20]
 801b0dc:	9302      	str	r3, [sp, #8]
 801b0de:	9b06      	ldr	r3, [sp, #24]
 801b0e0:	9301      	str	r3, [sp, #4]
 801b0e2:	2302      	movs	r3, #2
 801b0e4:	9300      	str	r3, [sp, #0]
 801b0e6:	4623      	mov	r3, r4
 801b0e8:	9a07      	ldr	r2, [sp, #28]
 801b0ea:	490a      	ldr	r1, [pc, #40]	@ (801b114 <xTimerCreateTimerTask+0x58>)
 801b0ec:	480a      	ldr	r0, [pc, #40]	@ (801b118 <xTimerCreateTimerTask+0x5c>)
 801b0ee:	f7ff fb4f 	bl	801a790 <xTaskCreateStatic>
 801b0f2:	4b0a      	ldr	r3, [pc, #40]	@ (801b11c <xTimerCreateTimerTask+0x60>)
 801b0f4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801b0f6:	b110      	cbz	r0, 801b0fe <xTimerCreateTimerTask+0x42>
}
 801b0f8:	2001      	movs	r0, #1
 801b0fa:	b008      	add	sp, #32
 801b0fc:	bd10      	pop	{r4, pc}
 801b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b102:	f383 8811 	msr	BASEPRI, r3
 801b106:	f3bf 8f6f 	isb	sy
 801b10a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801b10e:	e7fe      	b.n	801b10e <xTimerCreateTimerTask+0x52>
 801b110:	20003d24 	.word	0x20003d24
 801b114:	0803a69c 	.word	0x0803a69c
 801b118:	0801b421 	.word	0x0801b421
 801b11c:	20003d20 	.word	0x20003d20

0801b120 <xTimerGenericCommand>:
	configASSERT( xTimer );
 801b120:	b1b8      	cbz	r0, 801b152 <xTimerGenericCommand+0x32>
 801b122:	469c      	mov	ip, r3
 801b124:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801b126:	4818      	ldr	r0, [pc, #96]	@ (801b188 <xTimerGenericCommand+0x68>)
 801b128:	6800      	ldr	r0, [r0, #0]
 801b12a:	b358      	cbz	r0, 801b184 <xTimerGenericCommand+0x64>
{
 801b12c:	b500      	push	{lr}
 801b12e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801b130:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b132:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b134:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b136:	2905      	cmp	r1, #5
 801b138:	dc1c      	bgt.n	801b174 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b13a:	f7ff fe51 	bl	801ade0 <xTaskGetSchedulerState>
 801b13e:	2802      	cmp	r0, #2
 801b140:	d010      	beq.n	801b164 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b142:	2300      	movs	r3, #0
 801b144:	461a      	mov	r2, r3
 801b146:	4669      	mov	r1, sp
 801b148:	480f      	ldr	r0, [pc, #60]	@ (801b188 <xTimerGenericCommand+0x68>)
 801b14a:	6800      	ldr	r0, [r0, #0]
 801b14c:	f7fe fcf0 	bl	8019b30 <xQueueGenericSend>
 801b150:	e015      	b.n	801b17e <xTimerGenericCommand+0x5e>
 801b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b156:	f383 8811 	msr	BASEPRI, r3
 801b15a:	f3bf 8f6f 	isb	sy
 801b15e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801b162:	e7fe      	b.n	801b162 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b164:	2300      	movs	r3, #0
 801b166:	9a06      	ldr	r2, [sp, #24]
 801b168:	4669      	mov	r1, sp
 801b16a:	4807      	ldr	r0, [pc, #28]	@ (801b188 <xTimerGenericCommand+0x68>)
 801b16c:	6800      	ldr	r0, [r0, #0]
 801b16e:	f7fe fcdf 	bl	8019b30 <xQueueGenericSend>
 801b172:	e004      	b.n	801b17e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b174:	2300      	movs	r3, #0
 801b176:	4662      	mov	r2, ip
 801b178:	4669      	mov	r1, sp
 801b17a:	f7fe fde3 	bl	8019d44 <xQueueGenericSendFromISR>
}
 801b17e:	b005      	add	sp, #20
 801b180:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801b184:	2000      	movs	r0, #0
}
 801b186:	4770      	bx	lr
 801b188:	20003d24 	.word	0x20003d24

0801b18c <prvSwitchTimerLists>:
{
 801b18c:	b570      	push	{r4, r5, r6, lr}
 801b18e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b190:	4b1b      	ldr	r3, [pc, #108]	@ (801b200 <prvSwitchTimerLists+0x74>)
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	681a      	ldr	r2, [r3, #0]
 801b196:	b362      	cbz	r2, 801b1f2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b19c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b19e:	1d25      	adds	r5, r4, #4
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	f7fe fb49 	bl	8019838 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b1a6:	6a23      	ldr	r3, [r4, #32]
 801b1a8:	4620      	mov	r0, r4
 801b1aa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b1ac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b1b0:	f013 0f04 	tst.w	r3, #4
 801b1b4:	d0ec      	beq.n	801b190 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b1b6:	69a3      	ldr	r3, [r4, #24]
 801b1b8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801b1ba:	429e      	cmp	r6, r3
 801b1bc:	d207      	bcs.n	801b1ce <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b1be:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b1c0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b1c2:	4629      	mov	r1, r5
 801b1c4:	4b0e      	ldr	r3, [pc, #56]	@ (801b200 <prvSwitchTimerLists+0x74>)
 801b1c6:	6818      	ldr	r0, [r3, #0]
 801b1c8:	f7fe fb1d 	bl	8019806 <vListInsert>
 801b1cc:	e7e0      	b.n	801b190 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b1ce:	2100      	movs	r1, #0
 801b1d0:	9100      	str	r1, [sp, #0]
 801b1d2:	460b      	mov	r3, r1
 801b1d4:	4632      	mov	r2, r6
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	f7ff ffa2 	bl	801b120 <xTimerGenericCommand>
				configASSERT( xResult );
 801b1dc:	2800      	cmp	r0, #0
 801b1de:	d1d7      	bne.n	801b190 <prvSwitchTimerLists+0x4>
 801b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1e4:	f383 8811 	msr	BASEPRI, r3
 801b1e8:	f3bf 8f6f 	isb	sy
 801b1ec:	f3bf 8f4f 	dsb	sy
 801b1f0:	e7fe      	b.n	801b1f0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801b1f2:	4a04      	ldr	r2, [pc, #16]	@ (801b204 <prvSwitchTimerLists+0x78>)
 801b1f4:	6810      	ldr	r0, [r2, #0]
 801b1f6:	4902      	ldr	r1, [pc, #8]	@ (801b200 <prvSwitchTimerLists+0x74>)
 801b1f8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801b1fa:	6013      	str	r3, [r2, #0]
}
 801b1fc:	b002      	add	sp, #8
 801b1fe:	bd70      	pop	{r4, r5, r6, pc}
 801b200:	20003d2c 	.word	0x20003d2c
 801b204:	20003d28 	.word	0x20003d28

0801b208 <prvSampleTimeNow>:
{
 801b208:	b538      	push	{r3, r4, r5, lr}
 801b20a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801b20c:	f7ff fb8e 	bl	801a92c <xTaskGetTickCount>
 801b210:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801b212:	4b07      	ldr	r3, [pc, #28]	@ (801b230 <prvSampleTimeNow+0x28>)
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	4283      	cmp	r3, r0
 801b218:	d805      	bhi.n	801b226 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801b21a:	2300      	movs	r3, #0
 801b21c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801b21e:	4b04      	ldr	r3, [pc, #16]	@ (801b230 <prvSampleTimeNow+0x28>)
 801b220:	601c      	str	r4, [r3, #0]
}
 801b222:	4620      	mov	r0, r4
 801b224:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801b226:	f7ff ffb1 	bl	801b18c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b22a:	2301      	movs	r3, #1
 801b22c:	602b      	str	r3, [r5, #0]
 801b22e:	e7f6      	b.n	801b21e <prvSampleTimeNow+0x16>
 801b230:	20003d1c 	.word	0x20003d1c

0801b234 <prvProcessExpiredTimer>:
{
 801b234:	b570      	push	{r4, r5, r6, lr}
 801b236:	b082      	sub	sp, #8
 801b238:	4606      	mov	r6, r0
 801b23a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b23c:	4917      	ldr	r1, [pc, #92]	@ (801b29c <prvProcessExpiredTimer+0x68>)
 801b23e:	6809      	ldr	r1, [r1, #0]
 801b240:	68c9      	ldr	r1, [r1, #12]
 801b242:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b244:	1d20      	adds	r0, r4, #4
 801b246:	f7fe faf7 	bl	8019838 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b24a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801b24e:	f01c 0f04 	tst.w	ip, #4
 801b252:	d108      	bne.n	801b266 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b254:	f02c 0c01 	bic.w	ip, ip, #1
 801b258:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b25c:	6a23      	ldr	r3, [r4, #32]
 801b25e:	4620      	mov	r0, r4
 801b260:	4798      	blx	r3
}
 801b262:	b002      	add	sp, #8
 801b264:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b266:	69a1      	ldr	r1, [r4, #24]
 801b268:	4633      	mov	r3, r6
 801b26a:	462a      	mov	r2, r5
 801b26c:	4431      	add	r1, r6
 801b26e:	4620      	mov	r0, r4
 801b270:	f7ff fec8 	bl	801b004 <prvInsertTimerInActiveList>
 801b274:	2800      	cmp	r0, #0
 801b276:	d0f1      	beq.n	801b25c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b278:	2100      	movs	r1, #0
 801b27a:	9100      	str	r1, [sp, #0]
 801b27c:	460b      	mov	r3, r1
 801b27e:	4632      	mov	r2, r6
 801b280:	4620      	mov	r0, r4
 801b282:	f7ff ff4d 	bl	801b120 <xTimerGenericCommand>
			configASSERT( xResult );
 801b286:	2800      	cmp	r0, #0
 801b288:	d1e8      	bne.n	801b25c <prvProcessExpiredTimer+0x28>
 801b28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b28e:	f383 8811 	msr	BASEPRI, r3
 801b292:	f3bf 8f6f 	isb	sy
 801b296:	f3bf 8f4f 	dsb	sy
 801b29a:	e7fe      	b.n	801b29a <prvProcessExpiredTimer+0x66>
 801b29c:	20003d2c 	.word	0x20003d2c

0801b2a0 <prvProcessTimerOrBlockTask>:
{
 801b2a0:	b570      	push	{r4, r5, r6, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	4606      	mov	r6, r0
 801b2a6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801b2a8:	f7ff fb38 	bl	801a91c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b2ac:	a801      	add	r0, sp, #4
 801b2ae:	f7ff ffab 	bl	801b208 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801b2b2:	9b01      	ldr	r3, [sp, #4]
 801b2b4:	bb33      	cbnz	r3, 801b304 <prvProcessTimerOrBlockTask+0x64>
 801b2b6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b2b8:	b9e4      	cbnz	r4, 801b2f4 <prvProcessTimerOrBlockTask+0x54>
 801b2ba:	42b0      	cmp	r0, r6
 801b2bc:	d213      	bcs.n	801b2e6 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b2be:	4622      	mov	r2, r4
 801b2c0:	1b71      	subs	r1, r6, r5
 801b2c2:	4b12      	ldr	r3, [pc, #72]	@ (801b30c <prvProcessTimerOrBlockTask+0x6c>)
 801b2c4:	6818      	ldr	r0, [r3, #0]
 801b2c6:	f7ff f87f 	bl	801a3c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b2ca:	f7ff fbc1 	bl	801aa50 <xTaskResumeAll>
 801b2ce:	b9d8      	cbnz	r0, 801b308 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801b2d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b2d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b2d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801b2dc:	f3bf 8f4f 	dsb	sy
 801b2e0:	f3bf 8f6f 	isb	sy
 801b2e4:	e010      	b.n	801b308 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801b2e6:	f7ff fbb3 	bl	801aa50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b2ea:	4629      	mov	r1, r5
 801b2ec:	4630      	mov	r0, r6
 801b2ee:	f7ff ffa1 	bl	801b234 <prvProcessExpiredTimer>
 801b2f2:	e009      	b.n	801b308 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b2f4:	4a06      	ldr	r2, [pc, #24]	@ (801b310 <prvProcessTimerOrBlockTask+0x70>)
 801b2f6:	6812      	ldr	r2, [r2, #0]
 801b2f8:	6812      	ldr	r2, [r2, #0]
 801b2fa:	b90a      	cbnz	r2, 801b300 <prvProcessTimerOrBlockTask+0x60>
 801b2fc:	2401      	movs	r4, #1
 801b2fe:	e7de      	b.n	801b2be <prvProcessTimerOrBlockTask+0x1e>
 801b300:	461c      	mov	r4, r3
 801b302:	e7dc      	b.n	801b2be <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801b304:	f7ff fba4 	bl	801aa50 <xTaskResumeAll>
}
 801b308:	b002      	add	sp, #8
 801b30a:	bd70      	pop	{r4, r5, r6, pc}
 801b30c:	20003d24 	.word	0x20003d24
 801b310:	20003d28 	.word	0x20003d28

0801b314 <prvProcessReceivedCommands>:
{
 801b314:	b510      	push	{r4, lr}
 801b316:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b318:	e002      	b.n	801b320 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b31a:	9b04      	ldr	r3, [sp, #16]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	da0f      	bge.n	801b340 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b320:	2200      	movs	r2, #0
 801b322:	a904      	add	r1, sp, #16
 801b324:	4b3d      	ldr	r3, [pc, #244]	@ (801b41c <prvProcessReceivedCommands+0x108>)
 801b326:	6818      	ldr	r0, [r3, #0]
 801b328:	f7fe fd73 	bl	8019e12 <xQueueReceive>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	d073      	beq.n	801b418 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b330:	9b04      	ldr	r3, [sp, #16]
 801b332:	2b00      	cmp	r3, #0
 801b334:	daf1      	bge.n	801b31a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b336:	9907      	ldr	r1, [sp, #28]
 801b338:	9806      	ldr	r0, [sp, #24]
 801b33a:	9b05      	ldr	r3, [sp, #20]
 801b33c:	4798      	blx	r3
 801b33e:	e7ec      	b.n	801b31a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b340:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b342:	6963      	ldr	r3, [r4, #20]
 801b344:	b113      	cbz	r3, 801b34c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b346:	1d20      	adds	r0, r4, #4
 801b348:	f7fe fa76 	bl	8019838 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b34c:	a803      	add	r0, sp, #12
 801b34e:	f7ff ff5b 	bl	801b208 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801b352:	9b04      	ldr	r3, [sp, #16]
 801b354:	2b09      	cmp	r3, #9
 801b356:	d8e3      	bhi.n	801b320 <prvProcessReceivedCommands+0xc>
 801b358:	e8df f003 	tbb	[pc, r3]
 801b35c:	30050505 	.word	0x30050505
 801b360:	05055037 	.word	0x05055037
 801b364:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b366:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b36a:	f043 0301 	orr.w	r3, r3, #1
 801b36e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b372:	9b05      	ldr	r3, [sp, #20]
 801b374:	69a1      	ldr	r1, [r4, #24]
 801b376:	4602      	mov	r2, r0
 801b378:	4419      	add	r1, r3
 801b37a:	4620      	mov	r0, r4
 801b37c:	f7ff fe42 	bl	801b004 <prvInsertTimerInActiveList>
 801b380:	2800      	cmp	r0, #0
 801b382:	d0cd      	beq.n	801b320 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b384:	6a23      	ldr	r3, [r4, #32]
 801b386:	4620      	mov	r0, r4
 801b388:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b38a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b38e:	f013 0f04 	tst.w	r3, #4
 801b392:	d0c5      	beq.n	801b320 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b394:	69a2      	ldr	r2, [r4, #24]
 801b396:	2100      	movs	r1, #0
 801b398:	9100      	str	r1, [sp, #0]
 801b39a:	460b      	mov	r3, r1
 801b39c:	9805      	ldr	r0, [sp, #20]
 801b39e:	4402      	add	r2, r0
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f7ff febd 	bl	801b120 <xTimerGenericCommand>
							configASSERT( xResult );
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	d1ba      	bne.n	801b320 <prvProcessReceivedCommands+0xc>
 801b3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3ae:	f383 8811 	msr	BASEPRI, r3
 801b3b2:	f3bf 8f6f 	isb	sy
 801b3b6:	f3bf 8f4f 	dsb	sy
 801b3ba:	e7fe      	b.n	801b3ba <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b3bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b3c0:	f023 0301 	bic.w	r3, r3, #1
 801b3c4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801b3c8:	e7aa      	b.n	801b320 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b3ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b3ce:	f043 0301 	orr.w	r3, r3, #1
 801b3d2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b3d6:	9905      	ldr	r1, [sp, #20]
 801b3d8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b3da:	b131      	cbz	r1, 801b3ea <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b3dc:	4603      	mov	r3, r0
 801b3de:	4602      	mov	r2, r0
 801b3e0:	4401      	add	r1, r0
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f7ff fe0e 	bl	801b004 <prvInsertTimerInActiveList>
					break;
 801b3e8:	e79a      	b.n	801b320 <prvProcessReceivedCommands+0xc>
 801b3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3ee:	f383 8811 	msr	BASEPRI, r3
 801b3f2:	f3bf 8f6f 	isb	sy
 801b3f6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b3fa:	e7fe      	b.n	801b3fa <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b3fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801b400:	f013 0f02 	tst.w	r3, #2
 801b404:	d004      	beq.n	801b410 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b406:	f023 0301 	bic.w	r3, r3, #1
 801b40a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801b40e:	e787      	b.n	801b320 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801b410:	4620      	mov	r0, r4
 801b412:	f000 fab3 	bl	801b97c <vPortFree>
 801b416:	e783      	b.n	801b320 <prvProcessReceivedCommands+0xc>
}
 801b418:	b008      	add	sp, #32
 801b41a:	bd10      	pop	{r4, pc}
 801b41c:	20003d24 	.word	0x20003d24

0801b420 <prvTimerTask>:
{
 801b420:	b500      	push	{lr}
 801b422:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b424:	a801      	add	r0, sp, #4
 801b426:	f7ff fddd 	bl	801afe4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b42a:	9901      	ldr	r1, [sp, #4]
 801b42c:	f7ff ff38 	bl	801b2a0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801b430:	f7ff ff70 	bl	801b314 <prvProcessReceivedCommands>
	for( ;; )
 801b434:	e7f6      	b.n	801b424 <prvTimerTask+0x4>
	...

0801b438 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b438:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801b43a:	2300      	movs	r3, #0
 801b43c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b43e:	4b0d      	ldr	r3, [pc, #52]	@ (801b474 <prvTaskExitError+0x3c>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b446:	d008      	beq.n	801b45a <prvTaskExitError+0x22>
 801b448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b44c:	f383 8811 	msr	BASEPRI, r3
 801b450:	f3bf 8f6f 	isb	sy
 801b454:	f3bf 8f4f 	dsb	sy
 801b458:	e7fe      	b.n	801b458 <prvTaskExitError+0x20>
 801b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b45e:	f383 8811 	msr	BASEPRI, r3
 801b462:	f3bf 8f6f 	isb	sy
 801b466:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b46a:	9b01      	ldr	r3, [sp, #4]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d0fc      	beq.n	801b46a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b470:	b002      	add	sp, #8
 801b472:	4770      	bx	lr
 801b474:	20000114 	.word	0x20000114

0801b478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b478:	4808      	ldr	r0, [pc, #32]	@ (801b49c <prvPortStartFirstTask+0x24>)
 801b47a:	6800      	ldr	r0, [r0, #0]
 801b47c:	6800      	ldr	r0, [r0, #0]
 801b47e:	f380 8808 	msr	MSP, r0
 801b482:	f04f 0000 	mov.w	r0, #0
 801b486:	f380 8814 	msr	CONTROL, r0
 801b48a:	b662      	cpsie	i
 801b48c:	b661      	cpsie	f
 801b48e:	f3bf 8f4f 	dsb	sy
 801b492:	f3bf 8f6f 	isb	sy
 801b496:	df00      	svc	0
 801b498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b49a:	0000      	.short	0x0000
 801b49c:	e000ed08 	.word	0xe000ed08

0801b4a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b4a0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801b4b0 <vPortEnableVFP+0x10>
 801b4a4:	6801      	ldr	r1, [r0, #0]
 801b4a6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801b4aa:	6001      	str	r1, [r0, #0]
 801b4ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b4ae:	0000      	.short	0x0000
 801b4b0:	e000ed88 	.word	0xe000ed88

0801b4b4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b4b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801b4b8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b4bc:	f021 0101 	bic.w	r1, r1, #1
 801b4c0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b4c4:	4b05      	ldr	r3, [pc, #20]	@ (801b4dc <pxPortInitialiseStack+0x28>)
 801b4c6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b4ca:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b4ce:	f06f 0302 	mvn.w	r3, #2
 801b4d2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801b4d6:	3844      	subs	r0, #68	@ 0x44
 801b4d8:	4770      	bx	lr
 801b4da:	bf00      	nop
 801b4dc:	0801b439 	.word	0x0801b439

0801b4e0 <SVC_Handler>:
	__asm volatile (
 801b4e0:	4b07      	ldr	r3, [pc, #28]	@ (801b500 <pxCurrentTCBConst2>)
 801b4e2:	6819      	ldr	r1, [r3, #0]
 801b4e4:	6808      	ldr	r0, [r1, #0]
 801b4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ea:	f380 8809 	msr	PSP, r0
 801b4ee:	f3bf 8f6f 	isb	sy
 801b4f2:	f04f 0000 	mov.w	r0, #0
 801b4f6:	f380 8811 	msr	BASEPRI, r0
 801b4fa:	4770      	bx	lr
 801b4fc:	f3af 8000 	nop.w

0801b500 <pxCurrentTCBConst2>:
 801b500:	20003c28 	.word	0x20003c28

0801b504 <vPortEnterCritical>:
 801b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b508:	f383 8811 	msr	BASEPRI, r3
 801b50c:	f3bf 8f6f 	isb	sy
 801b510:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801b514:	4a0b      	ldr	r2, [pc, #44]	@ (801b544 <vPortEnterCritical+0x40>)
 801b516:	6813      	ldr	r3, [r2, #0]
 801b518:	3301      	adds	r3, #1
 801b51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801b51c:	2b01      	cmp	r3, #1
 801b51e:	d000      	beq.n	801b522 <vPortEnterCritical+0x1e>
}
 801b520:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b522:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b526:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801b52a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801b52e:	d0f7      	beq.n	801b520 <vPortEnterCritical+0x1c>
 801b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b534:	f383 8811 	msr	BASEPRI, r3
 801b538:	f3bf 8f6f 	isb	sy
 801b53c:	f3bf 8f4f 	dsb	sy
 801b540:	e7fe      	b.n	801b540 <vPortEnterCritical+0x3c>
 801b542:	bf00      	nop
 801b544:	20000114 	.word	0x20000114

0801b548 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801b548:	4b09      	ldr	r3, [pc, #36]	@ (801b570 <vPortExitCritical+0x28>)
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	b943      	cbnz	r3, 801b560 <vPortExitCritical+0x18>
 801b54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b552:	f383 8811 	msr	BASEPRI, r3
 801b556:	f3bf 8f6f 	isb	sy
 801b55a:	f3bf 8f4f 	dsb	sy
 801b55e:	e7fe      	b.n	801b55e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801b560:	3b01      	subs	r3, #1
 801b562:	4a03      	ldr	r2, [pc, #12]	@ (801b570 <vPortExitCritical+0x28>)
 801b564:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b566:	b90b      	cbnz	r3, 801b56c <vPortExitCritical+0x24>
	__asm volatile
 801b568:	f383 8811 	msr	BASEPRI, r3
}
 801b56c:	4770      	bx	lr
 801b56e:	bf00      	nop
 801b570:	20000114 	.word	0x20000114
	...

0801b580 <PendSV_Handler>:
	__asm volatile
 801b580:	f3ef 8009 	mrs	r0, PSP
 801b584:	f3bf 8f6f 	isb	sy
 801b588:	4b15      	ldr	r3, [pc, #84]	@ (801b5e0 <pxCurrentTCBConst>)
 801b58a:	681a      	ldr	r2, [r3, #0]
 801b58c:	f01e 0f10 	tst.w	lr, #16
 801b590:	bf08      	it	eq
 801b592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b59a:	6010      	str	r0, [r2, #0]
 801b59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b5a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801b5a4:	f380 8811 	msr	BASEPRI, r0
 801b5a8:	f3bf 8f4f 	dsb	sy
 801b5ac:	f3bf 8f6f 	isb	sy
 801b5b0:	f7ff faf0 	bl	801ab94 <vTaskSwitchContext>
 801b5b4:	f04f 0000 	mov.w	r0, #0
 801b5b8:	f380 8811 	msr	BASEPRI, r0
 801b5bc:	bc09      	pop	{r0, r3}
 801b5be:	6819      	ldr	r1, [r3, #0]
 801b5c0:	6808      	ldr	r0, [r1, #0]
 801b5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c6:	f01e 0f10 	tst.w	lr, #16
 801b5ca:	bf08      	it	eq
 801b5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b5d0:	f380 8809 	msr	PSP, r0
 801b5d4:	f3bf 8f6f 	isb	sy
 801b5d8:	4770      	bx	lr
 801b5da:	bf00      	nop
 801b5dc:	f3af 8000 	nop.w

0801b5e0 <pxCurrentTCBConst>:
 801b5e0:	20003c28 	.word	0x20003c28

0801b5e4 <xPortSysTickHandler>:
{
 801b5e4:	b508      	push	{r3, lr}
	__asm volatile
 801b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5ea:	f383 8811 	msr	BASEPRI, r3
 801b5ee:	f3bf 8f6f 	isb	sy
 801b5f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801b5f6:	f7ff f99f 	bl	801a938 <xTaskIncrementTick>
 801b5fa:	b128      	cbz	r0, 801b608 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b5fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b604:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801b608:	2300      	movs	r3, #0
 801b60a:	f383 8811 	msr	BASEPRI, r3
}
 801b60e:	bd08      	pop	{r3, pc}

0801b610 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b610:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801b614:	2300      	movs	r3, #0
 801b616:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b618:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b61a:	4b05      	ldr	r3, [pc, #20]	@ (801b630 <vPortSetupTimerInterrupt+0x20>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	4905      	ldr	r1, [pc, #20]	@ (801b634 <vPortSetupTimerInterrupt+0x24>)
 801b620:	fba1 1303 	umull	r1, r3, r1, r3
 801b624:	099b      	lsrs	r3, r3, #6
 801b626:	3b01      	subs	r3, #1
 801b628:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b62a:	2307      	movs	r3, #7
 801b62c:	6113      	str	r3, [r2, #16]
}
 801b62e:	4770      	bx	lr
 801b630:	20000018 	.word	0x20000018
 801b634:	10624dd3 	.word	0x10624dd3

0801b638 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b638:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b63c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801b640:	4b3d      	ldr	r3, [pc, #244]	@ (801b738 <xPortStartScheduler+0x100>)
 801b642:	429a      	cmp	r2, r3
 801b644:	d01c      	beq.n	801b680 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b646:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b64a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801b64e:	4b3b      	ldr	r3, [pc, #236]	@ (801b73c <xPortStartScheduler+0x104>)
 801b650:	429a      	cmp	r2, r3
 801b652:	d01e      	beq.n	801b692 <xPortStartScheduler+0x5a>
{
 801b654:	b530      	push	{r4, r5, lr}
 801b656:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b658:	4b39      	ldr	r3, [pc, #228]	@ (801b740 <xPortStartScheduler+0x108>)
 801b65a:	781a      	ldrb	r2, [r3, #0]
 801b65c:	b2d2      	uxtb	r2, r2
 801b65e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b660:	22ff      	movs	r2, #255	@ 0xff
 801b662:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	b2db      	uxtb	r3, r3
 801b668:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b66c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b670:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801b674:	4a33      	ldr	r2, [pc, #204]	@ (801b744 <xPortStartScheduler+0x10c>)
 801b676:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b678:	4b33      	ldr	r3, [pc, #204]	@ (801b748 <xPortStartScheduler+0x110>)
 801b67a:	2207      	movs	r2, #7
 801b67c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b67e:	e01b      	b.n	801b6b8 <xPortStartScheduler+0x80>
	__asm volatile
 801b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b684:	f383 8811 	msr	BASEPRI, r3
 801b688:	f3bf 8f6f 	isb	sy
 801b68c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b690:	e7fe      	b.n	801b690 <xPortStartScheduler+0x58>
 801b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b696:	f383 8811 	msr	BASEPRI, r3
 801b69a:	f3bf 8f6f 	isb	sy
 801b69e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b6a2:	e7fe      	b.n	801b6a2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801b6a4:	4a28      	ldr	r2, [pc, #160]	@ (801b748 <xPortStartScheduler+0x110>)
 801b6a6:	6813      	ldr	r3, [r2, #0]
 801b6a8:	3b01      	subs	r3, #1
 801b6aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b6ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b6b0:	005b      	lsls	r3, r3, #1
 801b6b2:	b2db      	uxtb	r3, r3
 801b6b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b6b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b6bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b6c0:	d1f0      	bne.n	801b6a4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b6c2:	4b21      	ldr	r3, [pc, #132]	@ (801b748 <xPortStartScheduler+0x110>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	2b03      	cmp	r3, #3
 801b6c8:	d008      	beq.n	801b6dc <xPortStartScheduler+0xa4>
 801b6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b6ce:	f383 8811 	msr	BASEPRI, r3
 801b6d2:	f3bf 8f6f 	isb	sy
 801b6d6:	f3bf 8f4f 	dsb	sy
 801b6da:	e7fe      	b.n	801b6da <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b6dc:	021b      	lsls	r3, r3, #8
 801b6de:	4a1a      	ldr	r2, [pc, #104]	@ (801b748 <xPortStartScheduler+0x110>)
 801b6e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b6e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b6e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b6e8:	9b01      	ldr	r3, [sp, #4]
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	4a14      	ldr	r2, [pc, #80]	@ (801b740 <xPortStartScheduler+0x108>)
 801b6ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b6f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801b6f4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801b6f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801b6fc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b700:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801b704:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801b708:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801b70c:	f7ff ff80 	bl	801b610 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801b710:	2500      	movs	r5, #0
 801b712:	4b0e      	ldr	r3, [pc, #56]	@ (801b74c <xPortStartScheduler+0x114>)
 801b714:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801b716:	f7ff fec3 	bl	801b4a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b71a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801b71e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801b722:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801b726:	f7ff fea7 	bl	801b478 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801b72a:	f7ff fa33 	bl	801ab94 <vTaskSwitchContext>
	prvTaskExitError();
 801b72e:	f7ff fe83 	bl	801b438 <prvTaskExitError>
}
 801b732:	4628      	mov	r0, r5
 801b734:	b003      	add	sp, #12
 801b736:	bd30      	pop	{r4, r5, pc}
 801b738:	410fc271 	.word	0x410fc271
 801b73c:	410fc270 	.word	0x410fc270
 801b740:	e000e400 	.word	0xe000e400
 801b744:	20003d5c 	.word	0x20003d5c
 801b748:	20003d58 	.word	0x20003d58
 801b74c:	20000114 	.word	0x20000114

0801b750 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b750:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b754:	2b0f      	cmp	r3, #15
 801b756:	d90f      	bls.n	801b778 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b758:	4a11      	ldr	r2, [pc, #68]	@ (801b7a0 <vPortValidateInterruptPriority+0x50>)
 801b75a:	5c9b      	ldrb	r3, [r3, r2]
 801b75c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b75e:	4a11      	ldr	r2, [pc, #68]	@ (801b7a4 <vPortValidateInterruptPriority+0x54>)
 801b760:	7812      	ldrb	r2, [r2, #0]
 801b762:	429a      	cmp	r2, r3
 801b764:	d908      	bls.n	801b778 <vPortValidateInterruptPriority+0x28>
 801b766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b76a:	f383 8811 	msr	BASEPRI, r3
 801b76e:	f3bf 8f6f 	isb	sy
 801b772:	f3bf 8f4f 	dsb	sy
 801b776:	e7fe      	b.n	801b776 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b778:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801b77c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801b780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b784:	4a08      	ldr	r2, [pc, #32]	@ (801b7a8 <vPortValidateInterruptPriority+0x58>)
 801b786:	6812      	ldr	r2, [r2, #0]
 801b788:	4293      	cmp	r3, r2
 801b78a:	d908      	bls.n	801b79e <vPortValidateInterruptPriority+0x4e>
 801b78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b790:	f383 8811 	msr	BASEPRI, r3
 801b794:	f3bf 8f6f 	isb	sy
 801b798:	f3bf 8f4f 	dsb	sy
 801b79c:	e7fe      	b.n	801b79c <vPortValidateInterruptPriority+0x4c>
	}
 801b79e:	4770      	bx	lr
 801b7a0:	e000e3f0 	.word	0xe000e3f0
 801b7a4:	20003d5c 	.word	0x20003d5c
 801b7a8:	20003d58 	.word	0x20003d58

0801b7ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b7ac:	4a12      	ldr	r2, [pc, #72]	@ (801b7f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b7ae:	f012 0f07 	tst.w	r2, #7
 801b7b2:	d01f      	beq.n	801b7f4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b7b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b7b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b7ba:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801b7be:	33f8      	adds	r3, #248	@ 0xf8
 801b7c0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b7c2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b7c4:	480d      	ldr	r0, [pc, #52]	@ (801b7fc <prvHeapInit+0x50>)
 801b7c6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b7c8:	2100      	movs	r1, #0
 801b7ca:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b7cc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801b7ce:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b7d0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801b7d4:	480a      	ldr	r0, [pc, #40]	@ (801b800 <prvHeapInit+0x54>)
 801b7d6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801b7d8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b7da:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b7dc:	1a99      	subs	r1, r3, r2
 801b7de:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b7e0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b7e2:	4b08      	ldr	r3, [pc, #32]	@ (801b804 <prvHeapInit+0x58>)
 801b7e4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b7e6:	4b08      	ldr	r3, [pc, #32]	@ (801b808 <prvHeapInit+0x5c>)
 801b7e8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b7ea:	4b08      	ldr	r3, [pc, #32]	@ (801b80c <prvHeapInit+0x60>)
 801b7ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801b7f0:	601a      	str	r2, [r3, #0]
}
 801b7f2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b7f4:	4b06      	ldr	r3, [pc, #24]	@ (801b810 <prvHeapInit+0x64>)
 801b7f6:	e7e5      	b.n	801b7c4 <prvHeapInit+0x18>
 801b7f8:	20003d80 	.word	0x20003d80
 801b7fc:	20003d78 	.word	0x20003d78
 801b800:	20003d74 	.word	0x20003d74
 801b804:	20003d6c 	.word	0x20003d6c
 801b808:	20003d70 	.word	0x20003d70
 801b80c:	20003d60 	.word	0x20003d60
 801b810:	000160f8 	.word	0x000160f8

0801b814 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b814:	4b16      	ldr	r3, [pc, #88]	@ (801b870 <prvInsertBlockIntoFreeList+0x5c>)
 801b816:	461a      	mov	r2, r3
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	4283      	cmp	r3, r0
 801b81c:	d3fb      	bcc.n	801b816 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b81e:	6851      	ldr	r1, [r2, #4]
 801b820:	eb02 0c01 	add.w	ip, r2, r1
 801b824:	4584      	cmp	ip, r0
 801b826:	d009      	beq.n	801b83c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b828:	6841      	ldr	r1, [r0, #4]
 801b82a:	eb00 0c01 	add.w	ip, r0, r1
 801b82e:	4563      	cmp	r3, ip
 801b830:	d009      	beq.n	801b846 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b832:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b834:	4290      	cmp	r0, r2
 801b836:	d019      	beq.n	801b86c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b838:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801b83a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b83c:	6840      	ldr	r0, [r0, #4]
 801b83e:	4401      	add	r1, r0
 801b840:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801b842:	4610      	mov	r0, r2
 801b844:	e7f0      	b.n	801b828 <prvInsertBlockIntoFreeList+0x14>
{
 801b846:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b848:	4c0a      	ldr	r4, [pc, #40]	@ (801b874 <prvInsertBlockIntoFreeList+0x60>)
 801b84a:	6824      	ldr	r4, [r4, #0]
 801b84c:	42a3      	cmp	r3, r4
 801b84e:	d00b      	beq.n	801b868 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b850:	685b      	ldr	r3, [r3, #4]
 801b852:	4419      	add	r1, r3
 801b854:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b856:	6813      	ldr	r3, [r2, #0]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801b85c:	4290      	cmp	r0, r2
 801b85e:	d000      	beq.n	801b862 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b860:	6010      	str	r0, [r2, #0]
	}
}
 801b862:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b866:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b868:	6004      	str	r4, [r0, #0]
 801b86a:	e7f7      	b.n	801b85c <prvInsertBlockIntoFreeList+0x48>
 801b86c:	4770      	bx	lr
 801b86e:	bf00      	nop
 801b870:	20003d78 	.word	0x20003d78
 801b874:	20003d74 	.word	0x20003d74

0801b878 <pvPortMalloc>:
{
 801b878:	b538      	push	{r3, r4, r5, lr}
 801b87a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801b87c:	f7ff f84e 	bl	801a91c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801b880:	4b38      	ldr	r3, [pc, #224]	@ (801b964 <pvPortMalloc+0xec>)
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	b1b3      	cbz	r3, 801b8b4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b886:	4b38      	ldr	r3, [pc, #224]	@ (801b968 <pvPortMalloc+0xf0>)
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	421c      	tst	r4, r3
 801b88c:	d150      	bne.n	801b930 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801b88e:	2c00      	cmp	r4, #0
 801b890:	d050      	beq.n	801b934 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801b892:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b896:	f014 0f07 	tst.w	r4, #7
 801b89a:	d002      	beq.n	801b8a2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b89c:	f022 0207 	bic.w	r2, r2, #7
 801b8a0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b8a2:	2a00      	cmp	r2, #0
 801b8a4:	d055      	beq.n	801b952 <pvPortMalloc+0xda>
 801b8a6:	4b31      	ldr	r3, [pc, #196]	@ (801b96c <pvPortMalloc+0xf4>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	d353      	bcc.n	801b956 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801b8ae:	4930      	ldr	r1, [pc, #192]	@ (801b970 <pvPortMalloc+0xf8>)
 801b8b0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8b2:	e004      	b.n	801b8be <pvPortMalloc+0x46>
			prvHeapInit();
 801b8b4:	f7ff ff7a 	bl	801b7ac <prvHeapInit>
 801b8b8:	e7e5      	b.n	801b886 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801b8ba:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801b8bc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8be:	6863      	ldr	r3, [r4, #4]
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d202      	bcs.n	801b8ca <pvPortMalloc+0x52>
 801b8c4:	6823      	ldr	r3, [r4, #0]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d1f7      	bne.n	801b8ba <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801b8ca:	4b26      	ldr	r3, [pc, #152]	@ (801b964 <pvPortMalloc+0xec>)
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	42a3      	cmp	r3, r4
 801b8d0:	d043      	beq.n	801b95a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b8d2:	680d      	ldr	r5, [r1, #0]
 801b8d4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b8d6:	6823      	ldr	r3, [r4, #0]
 801b8d8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b8da:	6863      	ldr	r3, [r4, #4]
 801b8dc:	1a9b      	subs	r3, r3, r2
 801b8de:	2b10      	cmp	r3, #16
 801b8e0:	d910      	bls.n	801b904 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b8e2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8e4:	f010 0f07 	tst.w	r0, #7
 801b8e8:	d008      	beq.n	801b8fc <pvPortMalloc+0x84>
 801b8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8ee:	f383 8811 	msr	BASEPRI, r3
 801b8f2:	f3bf 8f6f 	isb	sy
 801b8f6:	f3bf 8f4f 	dsb	sy
 801b8fa:	e7fe      	b.n	801b8fa <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b8fc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b8fe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b900:	f7ff ff88 	bl	801b814 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b904:	6862      	ldr	r2, [r4, #4]
 801b906:	4919      	ldr	r1, [pc, #100]	@ (801b96c <pvPortMalloc+0xf4>)
 801b908:	680b      	ldr	r3, [r1, #0]
 801b90a:	1a9b      	subs	r3, r3, r2
 801b90c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b90e:	4919      	ldr	r1, [pc, #100]	@ (801b974 <pvPortMalloc+0xfc>)
 801b910:	6809      	ldr	r1, [r1, #0]
 801b912:	428b      	cmp	r3, r1
 801b914:	d201      	bcs.n	801b91a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b916:	4917      	ldr	r1, [pc, #92]	@ (801b974 <pvPortMalloc+0xfc>)
 801b918:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b91a:	4b13      	ldr	r3, [pc, #76]	@ (801b968 <pvPortMalloc+0xf0>)
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	4313      	orrs	r3, r2
 801b920:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b922:	2300      	movs	r3, #0
 801b924:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801b926:	4a14      	ldr	r2, [pc, #80]	@ (801b978 <pvPortMalloc+0x100>)
 801b928:	6813      	ldr	r3, [r2, #0]
 801b92a:	3301      	adds	r3, #1
 801b92c:	6013      	str	r3, [r2, #0]
 801b92e:	e002      	b.n	801b936 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801b930:	2500      	movs	r5, #0
 801b932:	e000      	b.n	801b936 <pvPortMalloc+0xbe>
 801b934:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801b936:	f7ff f88b 	bl	801aa50 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b93a:	f015 0f07 	tst.w	r5, #7
 801b93e:	d00e      	beq.n	801b95e <pvPortMalloc+0xe6>
 801b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b944:	f383 8811 	msr	BASEPRI, r3
 801b948:	f3bf 8f6f 	isb	sy
 801b94c:	f3bf 8f4f 	dsb	sy
 801b950:	e7fe      	b.n	801b950 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801b952:	2500      	movs	r5, #0
 801b954:	e7ef      	b.n	801b936 <pvPortMalloc+0xbe>
 801b956:	2500      	movs	r5, #0
 801b958:	e7ed      	b.n	801b936 <pvPortMalloc+0xbe>
 801b95a:	2500      	movs	r5, #0
 801b95c:	e7eb      	b.n	801b936 <pvPortMalloc+0xbe>
}
 801b95e:	4628      	mov	r0, r5
 801b960:	bd38      	pop	{r3, r4, r5, pc}
 801b962:	bf00      	nop
 801b964:	20003d74 	.word	0x20003d74
 801b968:	20003d60 	.word	0x20003d60
 801b96c:	20003d70 	.word	0x20003d70
 801b970:	20003d78 	.word	0x20003d78
 801b974:	20003d6c 	.word	0x20003d6c
 801b978:	20003d68 	.word	0x20003d68

0801b97c <vPortFree>:
	if( pv != NULL )
 801b97c:	2800      	cmp	r0, #0
 801b97e:	d034      	beq.n	801b9ea <vPortFree+0x6e>
{
 801b980:	b538      	push	{r3, r4, r5, lr}
 801b982:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801b984:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b988:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b98c:	4a17      	ldr	r2, [pc, #92]	@ (801b9ec <vPortFree+0x70>)
 801b98e:	6812      	ldr	r2, [r2, #0]
 801b990:	4213      	tst	r3, r2
 801b992:	d108      	bne.n	801b9a6 <vPortFree+0x2a>
 801b994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b998:	f383 8811 	msr	BASEPRI, r3
 801b99c:	f3bf 8f6f 	isb	sy
 801b9a0:	f3bf 8f4f 	dsb	sy
 801b9a4:	e7fe      	b.n	801b9a4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b9a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801b9aa:	b141      	cbz	r1, 801b9be <vPortFree+0x42>
 801b9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b9b0:	f383 8811 	msr	BASEPRI, r3
 801b9b4:	f3bf 8f6f 	isb	sy
 801b9b8:	f3bf 8f4f 	dsb	sy
 801b9bc:	e7fe      	b.n	801b9bc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b9be:	ea23 0302 	bic.w	r3, r3, r2
 801b9c2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801b9c6:	f7fe ffa9 	bl	801a91c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b9ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801b9ce:	4a08      	ldr	r2, [pc, #32]	@ (801b9f0 <vPortFree+0x74>)
 801b9d0:	6813      	ldr	r3, [r2, #0]
 801b9d2:	440b      	add	r3, r1
 801b9d4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	f7ff ff1c 	bl	801b814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b9dc:	4a05      	ldr	r2, [pc, #20]	@ (801b9f4 <vPortFree+0x78>)
 801b9de:	6813      	ldr	r3, [r2, #0]
 801b9e0:	3301      	adds	r3, #1
 801b9e2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801b9e4:	f7ff f834 	bl	801aa50 <xTaskResumeAll>
}
 801b9e8:	bd38      	pop	{r3, r4, r5, pc}
 801b9ea:	4770      	bx	lr
 801b9ec:	20003d60 	.word	0x20003d60
 801b9f0:	20003d70 	.word	0x20003d70
 801b9f4:	20003d64 	.word	0x20003d64

0801b9f8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9fa:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801b9fc:	f7fe ff8e 	bl	801a91c <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801ba00:	4b17      	ldr	r3, [pc, #92]	@ (801ba60 <vPortGetHeapStats+0x68>)
 801ba02:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801ba04:	b193      	cbz	r3, 801ba2c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ba06:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ba0a:	2500      	movs	r5, #0
 801ba0c:	462c      	mov	r4, r5
 801ba0e:	e004      	b.n	801ba1a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801ba10:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801ba12:	4a14      	ldr	r2, [pc, #80]	@ (801ba64 <vPortGetHeapStats+0x6c>)
 801ba14:	6812      	ldr	r2, [r2, #0]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d00c      	beq.n	801ba34 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801ba1a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801ba1c:	685a      	ldr	r2, [r3, #4]
 801ba1e:	42aa      	cmp	r2, r5
 801ba20:	d900      	bls.n	801ba24 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801ba22:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801ba24:	42b2      	cmp	r2, r6
 801ba26:	d2f3      	bcs.n	801ba10 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801ba28:	4616      	mov	r6, r2
 801ba2a:	e7f1      	b.n	801ba10 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ba2c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ba30:	2500      	movs	r5, #0
 801ba32:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801ba34:	f7ff f80c 	bl	801aa50 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ba38:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801ba3a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801ba3c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801ba3e:	f7ff fd61 	bl	801b504 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801ba42:	4b09      	ldr	r3, [pc, #36]	@ (801ba68 <vPortGetHeapStats+0x70>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801ba48:	4b08      	ldr	r3, [pc, #32]	@ (801ba6c <vPortGetHeapStats+0x74>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801ba4e:	4b08      	ldr	r3, [pc, #32]	@ (801ba70 <vPortGetHeapStats+0x78>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801ba54:	4b07      	ldr	r3, [pc, #28]	@ (801ba74 <vPortGetHeapStats+0x7c>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801ba5a:	f7ff fd75 	bl	801b548 <vPortExitCritical>
}
 801ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba60:	20003d78 	.word	0x20003d78
 801ba64:	20003d74 	.word	0x20003d74
 801ba68:	20003d70 	.word	0x20003d70
 801ba6c:	20003d68 	.word	0x20003d68
 801ba70:	20003d64 	.word	0x20003d64
 801ba74:	20003d6c 	.word	0x20003d6c

0801ba78 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801ba78:	2000      	movs	r0, #0
 801ba7a:	4770      	bx	lr

0801ba7c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801ba7c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801ba7e:	fb01 f400 	mul.w	r4, r1, r0
 801ba82:	4620      	mov	r0, r4
 801ba84:	f7ff fef8 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801ba88:	4605      	mov	r5, r0
 801ba8a:	b118      	cbz	r0, 801ba94 <mg_calloc+0x18>
 801ba8c:	4622      	mov	r2, r4
 801ba8e:	2100      	movs	r1, #0
 801ba90:	f011 ff3e 	bl	802d910 <memset>
}
 801ba94:	4628      	mov	r0, r5
 801ba96:	bd38      	pop	{r3, r4, r5, pc}

0801ba98 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801ba98:	b508      	push	{r3, lr}
 801ba9a:	4684      	mov	ip, r0
 801ba9c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801ba9e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801baa2:	428b      	cmp	r3, r1
 801baa4:	d90a      	bls.n	801babc <block_device_read+0x24>
 801baa6:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801baa8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801baac:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bab0:	fb01 e103 	mla	r1, r1, r3, lr
 801bab4:	f7fa fd08 	bl	80164c8 <sFLASH_ReadBuffer>
}
 801bab8:	2000      	movs	r0, #0
 801baba:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801babc:	4b03      	ldr	r3, [pc, #12]	@ (801bacc <block_device_read+0x34>)
 801babe:	4a04      	ldr	r2, [pc, #16]	@ (801bad0 <block_device_read+0x38>)
 801bac0:	f240 1123 	movw	r1, #291	@ 0x123
 801bac4:	4803      	ldr	r0, [pc, #12]	@ (801bad4 <block_device_read+0x3c>)
 801bac6:	f00f f9d1 	bl	802ae6c <__assert_func>
 801baca:	bf00      	nop
 801bacc:	0803a6a4 	.word	0x0803a6a4
 801bad0:	0803a720 	.word	0x0803a720
 801bad4:	0803a6bc 	.word	0x0803a6bc

0801bad8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801bad8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801bada:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801badc:	428b      	cmp	r3, r1
 801bade:	d906      	bls.n	801baee <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801bae0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801bae2:	fb01 f000 	mul.w	r0, r1, r0
 801bae6:	f7fa fe3b 	bl	8016760 <sFLASH_EraseSector>
}
 801baea:	2000      	movs	r0, #0
 801baec:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801baee:	4b03      	ldr	r3, [pc, #12]	@ (801bafc <block_device_erase+0x24>)
 801baf0:	4a03      	ldr	r2, [pc, #12]	@ (801bb00 <block_device_erase+0x28>)
 801baf2:	f240 112b 	movw	r1, #299	@ 0x12b
 801baf6:	4803      	ldr	r0, [pc, #12]	@ (801bb04 <block_device_erase+0x2c>)
 801baf8:	f00f f9b8 	bl	802ae6c <__assert_func>
 801bafc:	0803a6a4 	.word	0x0803a6a4
 801bb00:	0803a70c 	.word	0x0803a70c
 801bb04:	0803a6bc 	.word	0x0803a6bc

0801bb08 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801bb08:	b508      	push	{r3, lr}
 801bb0a:	4684      	mov	ip, r0
 801bb0c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801bb0e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801bb12:	428b      	cmp	r3, r1
 801bb14:	d90a      	bls.n	801bb2c <block_device_prog+0x24>
 801bb16:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801bb18:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801bb1c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb20:	fb01 e103 	mla	r1, r1, r3, lr
 801bb24:	f7fa fe62 	bl	80167ec <sFLASH_WriteBuffer>
}
 801bb28:	2000      	movs	r0, #0
 801bb2a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801bb2c:	4b03      	ldr	r3, [pc, #12]	@ (801bb3c <block_device_prog+0x34>)
 801bb2e:	4a04      	ldr	r2, [pc, #16]	@ (801bb40 <block_device_prog+0x38>)
 801bb30:	f240 1133 	movw	r1, #307	@ 0x133
 801bb34:	4803      	ldr	r0, [pc, #12]	@ (801bb44 <block_device_prog+0x3c>)
 801bb36:	f00f f999 	bl	802ae6c <__assert_func>
 801bb3a:	bf00      	nop
 801bb3c:	0803a6a4 	.word	0x0803a6a4
 801bb40:	0803a6f8 	.word	0x0803a6f8
 801bb44:	0803a6bc 	.word	0x0803a6bc

0801bb48 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801bb48:	b530      	push	{r4, r5, lr}
 801bb4a:	b0c3      	sub	sp, #268	@ 0x10c
 801bb4c:	460d      	mov	r5, r1
 801bb4e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801bb50:	466a      	mov	r2, sp
 801bb52:	4601      	mov	r1, r0
 801bb54:	480b      	ldr	r0, [pc, #44]	@ (801bb84 <mg_fs_lfs_status+0x3c>)
 801bb56:	f004 fdad 	bl	80206b4 <lfs_stat>
 801bb5a:	b110      	cbz	r0, 801bb62 <mg_fs_lfs_status+0x1a>
    return 0;
 801bb5c:	2000      	movs	r0, #0
}
 801bb5e:	b043      	add	sp, #268	@ 0x10c
 801bb60:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801bb62:	b10d      	cbz	r5, 801bb68 <mg_fs_lfs_status+0x20>
 801bb64:	9b01      	ldr	r3, [sp, #4]
 801bb66:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801bb68:	b11c      	cbz	r4, 801bb72 <mg_fs_lfs_status+0x2a>
 801bb6a:	2200      	movs	r2, #0
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801bb72:	f89d 3000 	ldrb.w	r3, [sp]
 801bb76:	2b02      	cmp	r3, #2
 801bb78:	d001      	beq.n	801bb7e <mg_fs_lfs_status+0x36>
 801bb7a:	2001      	movs	r0, #1
 801bb7c:	e7ef      	b.n	801bb5e <mg_fs_lfs_status+0x16>
 801bb7e:	2004      	movs	r0, #4
 801bb80:	e7ed      	b.n	801bb5e <mg_fs_lfs_status+0x16>
 801bb82:	bf00      	nop
 801bb84:	20019f18 	.word	0x20019f18

0801bb88 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801bb88:	b530      	push	{r4, r5, lr}
 801bb8a:	b0d1      	sub	sp, #324	@ 0x144
 801bb8c:	460d      	mov	r5, r1
 801bb8e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801bb90:	4602      	mov	r2, r0
 801bb92:	a901      	add	r1, sp, #4
 801bb94:	480a      	ldr	r0, [pc, #40]	@ (801bbc0 <mg_fs_lfs_list+0x38>)
 801bb96:	f004 feb3 	bl	8020900 <lfs_dir_open>
 801bb9a:	b120      	cbz	r0, 801bba6 <mg_fs_lfs_list+0x1e>
}
 801bb9c:	b051      	add	sp, #324	@ 0x144
 801bb9e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801bba0:	4621      	mov	r1, r4
 801bba2:	a810      	add	r0, sp, #64	@ 0x40
 801bba4:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801bba6:	aa0e      	add	r2, sp, #56	@ 0x38
 801bba8:	a901      	add	r1, sp, #4
 801bbaa:	4805      	ldr	r0, [pc, #20]	@ (801bbc0 <mg_fs_lfs_list+0x38>)
 801bbac:	f004 fee3 	bl	8020976 <lfs_dir_read>
 801bbb0:	2800      	cmp	r0, #0
 801bbb2:	dcf5      	bgt.n	801bba0 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801bbb4:	a901      	add	r1, sp, #4
 801bbb6:	4802      	ldr	r0, [pc, #8]	@ (801bbc0 <mg_fs_lfs_list+0x38>)
 801bbb8:	f004 feca 	bl	8020950 <lfs_dir_close>
}
 801bbbc:	e7ee      	b.n	801bb9c <mg_fs_lfs_list+0x14>
 801bbbe:	bf00      	nop
 801bbc0:	20019f18 	.word	0x20019f18

0801bbc4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801bbc4:	b570      	push	{r4, r5, r6, lr}
 801bbc6:	4605      	mov	r5, r0
 801bbc8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801bbca:	2054      	movs	r0, #84	@ 0x54
 801bbcc:	f7ff fe54 	bl	801b878 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801bbd0:	4606      	mov	r6, r0
 801bbd2:	b188      	cbz	r0, 801bbf8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801bbd4:	f014 0301 	ands.w	r3, r4, #1
 801bbd8:	d000      	beq.n	801bbdc <mg_fs_lfs_open+0x18>
 801bbda:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801bbdc:	f014 0f02 	tst.w	r4, #2
 801bbe0:	d003      	beq.n	801bbea <mg_fs_lfs_open+0x26>
 801bbe2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801bbe6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801bbea:	462a      	mov	r2, r5
 801bbec:	4631      	mov	r1, r6
 801bbee:	4806      	ldr	r0, [pc, #24]	@ (801bc08 <mg_fs_lfs_open+0x44>)
 801bbf0:	f004 fd76 	bl	80206e0 <lfs_file_open>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	db01      	blt.n	801bbfc <mg_fs_lfs_open+0x38>
}
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801bbfc:	4630      	mov	r0, r6
 801bbfe:	f7ff febd 	bl	801b97c <vPortFree>
        return NULL;
 801bc02:	2600      	movs	r6, #0
 801bc04:	e7f8      	b.n	801bbf8 <mg_fs_lfs_open+0x34>
 801bc06:	bf00      	nop
 801bc08:	20019f18 	.word	0x20019f18

0801bc0c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801bc0c:	b510      	push	{r4, lr}
 801bc0e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801bc10:	4601      	mov	r1, r0
 801bc12:	4803      	ldr	r0, [pc, #12]	@ (801bc20 <mg_fs_lfs_close+0x14>)
 801bc14:	f004 fd90 	bl	8020738 <lfs_file_close>
    free(file);
 801bc18:	4620      	mov	r0, r4
 801bc1a:	f7ff feaf 	bl	801b97c <vPortFree>
}
 801bc1e:	bd10      	pop	{r4, pc}
 801bc20:	20019f18 	.word	0x20019f18

0801bc24 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801bc24:	b508      	push	{r3, lr}
 801bc26:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801bc28:	460a      	mov	r2, r1
 801bc2a:	4601      	mov	r1, r0
 801bc2c:	4802      	ldr	r0, [pc, #8]	@ (801bc38 <mg_fs_lfs_read+0x14>)
 801bc2e:	f004 fda9 	bl	8020784 <lfs_file_read>
}
 801bc32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801bc36:	bd08      	pop	{r3, pc}
 801bc38:	20019f18 	.word	0x20019f18

0801bc3c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801bc3c:	b508      	push	{r3, lr}
 801bc3e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801bc40:	460a      	mov	r2, r1
 801bc42:	4601      	mov	r1, r0
 801bc44:	4802      	ldr	r0, [pc, #8]	@ (801bc50 <mg_fs_lfs_write+0x14>)
 801bc46:	f004 fdc9 	bl	80207dc <lfs_file_write>
}
 801bc4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801bc4e:	bd08      	pop	{r3, pc}
 801bc50:	20019f18 	.word	0x20019f18

0801bc54 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801bc54:	b510      	push	{r4, lr}
 801bc56:	4604      	mov	r4, r0
 801bc58:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	4601      	mov	r1, r0
 801bc5e:	4809      	ldr	r0, [pc, #36]	@ (801bc84 <mg_fs_lfs_seek+0x30>)
 801bc60:	f004 fde8 	bl	8020834 <lfs_file_seek>
 801bc64:	2800      	cmp	r0, #0
 801bc66:	db06      	blt.n	801bc76 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801bc68:	4621      	mov	r1, r4
 801bc6a:	4806      	ldr	r0, [pc, #24]	@ (801bc84 <mg_fs_lfs_seek+0x30>)
 801bc6c:	f004 fe0e 	bl	802088c <lfs_file_tell>
     if (pos < 0) {
 801bc70:	2800      	cmp	r0, #0
 801bc72:	db03      	blt.n	801bc7c <mg_fs_lfs_seek+0x28>
}
 801bc74:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801bc76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc7a:	e7fb      	b.n	801bc74 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801bc7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc80:	e7f8      	b.n	801bc74 <mg_fs_lfs_seek+0x20>
 801bc82:	bf00      	nop
 801bc84:	20019f18 	.word	0x20019f18

0801bc88 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801bc88:	b508      	push	{r3, lr}
 801bc8a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801bc8c:	4601      	mov	r1, r0
 801bc8e:	4803      	ldr	r0, [pc, #12]	@ (801bc9c <mg_fs_lfs_rename+0x14>)
 801bc90:	f004 fcfb 	bl	802068a <lfs_rename>
}
 801bc94:	fab0 f080 	clz	r0, r0
 801bc98:	0940      	lsrs	r0, r0, #5
 801bc9a:	bd08      	pop	{r3, pc}
 801bc9c:	20019f18 	.word	0x20019f18

0801bca0 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801bca0:	b508      	push	{r3, lr}
 801bca2:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801bca4:	4803      	ldr	r0, [pc, #12]	@ (801bcb4 <mg_fs_lfs_remove+0x14>)
 801bca6:	f004 fcdd 	bl	8020664 <lfs_remove>
}
 801bcaa:	fab0 f080 	clz	r0, r0
 801bcae:	0940      	lsrs	r0, r0, #5
 801bcb0:	bd08      	pop	{r3, pc}
 801bcb2:	bf00      	nop
 801bcb4:	20019f18 	.word	0x20019f18

0801bcb8 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801bcb8:	b508      	push	{r3, lr}
 801bcba:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801bcbc:	4803      	ldr	r0, [pc, #12]	@ (801bccc <mg_fs_lfs_mkdir+0x14>)
 801bcbe:	f004 fe0b 	bl	80208d8 <lfs_mkdir>
}
 801bcc2:	fab0 f080 	clz	r0, r0
 801bcc6:	0940      	lsrs	r0, r0, #5
 801bcc8:	bd08      	pop	{r3, pc}
 801bcca:	bf00      	nop
 801bccc:	20019f18 	.word	0x20019f18

0801bcd0 <mg_fs_mounted>:
}
 801bcd0:	4b01      	ldr	r3, [pc, #4]	@ (801bcd8 <mg_fs_mounted+0x8>)
 801bcd2:	7818      	ldrb	r0, [r3, #0]
 801bcd4:	4770      	bx	lr
 801bcd6:	bf00      	nop
 801bcd8:	20019eb8 	.word	0x20019eb8

0801bcdc <get_flash_chip_model>:
}
 801bcdc:	4800      	ldr	r0, [pc, #0]	@ (801bce0 <get_flash_chip_model+0x4>)
 801bcde:	4770      	bx	lr
 801bce0:	20019e86 	.word	0x20019e86

0801bce4 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bce8:	b090      	sub	sp, #64	@ 0x40
 801bcea:	4607      	mov	r7, r0
 801bcec:	460e      	mov	r6, r1
	flash_info = sFLASH_GetInfo();
 801bcee:	4c37      	ldr	r4, [pc, #220]	@ (801bdcc <lfs_fs_ll_init+0xe8>)
 801bcf0:	4668      	mov	r0, sp
 801bcf2:	f7fa fc49 	bl	8016588 <sFLASH_GetInfo>
 801bcf6:	46a6      	mov	lr, r4
 801bcf8:	46ec      	mov	ip, sp
 801bcfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bd02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bd0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bd12:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bd16:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if (flash_info.flash_id == 0x0) return -1;
 801bd1a:	6823      	ldr	r3, [r4, #0]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d052      	beq.n	801bdc6 <lfs_fs_ll_init+0xe2>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801bd20:	46a0      	mov	r8, r4
 801bd22:	8961      	ldrh	r1, [r4, #10]
 801bd24:	2001      	movs	r0, #1
 801bd26:	f7ff fea9 	bl	801ba7c <mg_calloc>
 801bd2a:	4604      	mov	r4, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801bd2c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801bd30:	2001      	movs	r0, #1
 801bd32:	f7ff fea3 	bl	801ba7c <mg_calloc>
 801bd36:	4605      	mov	r5, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801bd38:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801bd3c:	2001      	movs	r0, #1
 801bd3e:	f7ff fe9d 	bl	801ba7c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801bd42:	2c00      	cmp	r4, #0
 801bd44:	d028      	beq.n	801bd98 <lfs_fs_ll_init+0xb4>
	cfg.read_size         = flash_info.read_size;
 801bd46:	4b21      	ldr	r3, [pc, #132]	@ (801bdcc <lfs_fs_ll_init+0xe8>)
 801bd48:	889a      	ldrh	r2, [r3, #4]
 801bd4a:	4921      	ldr	r1, [pc, #132]	@ (801bdd0 <lfs_fs_ll_init+0xec>)
 801bd4c:	61ca      	str	r2, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801bd4e:	88da      	ldrh	r2, [r3, #6]
 801bd50:	620a      	str	r2, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801bd52:	891a      	ldrh	r2, [r3, #8]
 801bd54:	624a      	str	r2, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801bd56:	899a      	ldrh	r2, [r3, #12]
 801bd58:	628a      	str	r2, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801bd5a:	895b      	ldrh	r3, [r3, #10]
 801bd5c:	634b      	str	r3, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801bd5e:	630b      	str	r3, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801bd60:	63cc      	str	r4, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801bd62:	640d      	str	r5, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801bd64:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801bd66:	4b1b      	ldr	r3, [pc, #108]	@ (801bdd4 <lfs_fs_ll_init+0xf0>)
 801bd68:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801bd6a:	4b1b      	ldr	r3, [pc, #108]	@ (801bdd8 <lfs_fs_ll_init+0xf4>)
 801bd6c:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801bd6e:	4b1b      	ldr	r3, [pc, #108]	@ (801bddc <lfs_fs_ll_init+0xf8>)
 801bd70:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801bd72:	4b1b      	ldr	r3, [pc, #108]	@ (801bde0 <lfs_fs_ll_init+0xfc>)
 801bd74:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801bd76:	614f      	str	r7, [r1, #20]
	cfg.unlock	= unlock;
 801bd78:	618e      	str	r6, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801bd7a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801bd7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801bd80:	4818      	ldr	r0, [pc, #96]	@ (801bde4 <lfs_fs_ll_init+0x100>)
 801bd82:	f004 fc5c 	bl	802063e <lfs_mount>
 801bd86:	2800      	cmp	r0, #0
 801bd88:	db0d      	blt.n	801bda6 <lfs_fs_ll_init+0xc2>
    	fs_mounted = 1;
 801bd8a:	4b17      	ldr	r3, [pc, #92]	@ (801bde8 <lfs_fs_ll_init+0x104>)
 801bd8c:	2201      	movs	r2, #1
 801bd8e:	701a      	strb	r2, [r3, #0]
    	return 0;
 801bd90:	2000      	movs	r0, #0
}
 801bd92:	b010      	add	sp, #64	@ 0x40
 801bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801bd98:	2d00      	cmp	r5, #0
 801bd9a:	d1d4      	bne.n	801bd46 <lfs_fs_ll_init+0x62>
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	d1d2      	bne.n	801bd46 <lfs_fs_ll_init+0x62>
		return -2;
 801bda0:	f06f 0001 	mvn.w	r0, #1
 801bda4:	e7f5      	b.n	801bd92 <lfs_fs_ll_init+0xae>
    	lfs_format(&lfs, &cfg);
 801bda6:	4d0a      	ldr	r5, [pc, #40]	@ (801bdd0 <lfs_fs_ll_init+0xec>)
 801bda8:	4c0e      	ldr	r4, [pc, #56]	@ (801bde4 <lfs_fs_ll_init+0x100>)
 801bdaa:	4629      	mov	r1, r5
 801bdac:	4620      	mov	r0, r4
 801bdae:	f004 fc33 	bl	8020618 <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801bdb2:	4629      	mov	r1, r5
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	f004 fc42 	bl	802063e <lfs_mount>
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	d1e9      	bne.n	801bd92 <lfs_fs_ll_init+0xae>
 801bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (801bde8 <lfs_fs_ll_init+0x104>)
 801bdc0:	2201      	movs	r2, #1
 801bdc2:	701a      	strb	r2, [r3, #0]
    	return err;
 801bdc4:	e7e5      	b.n	801bd92 <lfs_fs_ll_init+0xae>
	if (flash_info.flash_id == 0x0) return -1;
 801bdc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bdca:	e7e2      	b.n	801bd92 <lfs_fs_ll_init+0xae>
 801bdcc:	20019e78 	.word	0x20019e78
 801bdd0:	20019ebc 	.word	0x20019ebc
 801bdd4:	0801ba99 	.word	0x0801ba99
 801bdd8:	0801bb09 	.word	0x0801bb09
 801bddc:	0801bad9 	.word	0x0801bad9
 801bde0:	0801ba79 	.word	0x0801ba79
 801bde4:	20019f18 	.word	0x20019f18
 801bde8:	20019eb8 	.word	0x20019eb8

0801bdec <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801bdec:	6803      	ldr	r3, [r0, #0]
 801bdee:	680a      	ldr	r2, [r1, #0]
 801bdf0:	4293      	cmp	r3, r2
 801bdf2:	d004      	beq.n	801bdfe <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801bdf4:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801bdf6:	428b      	cmp	r3, r1
 801bdf8:	d015      	beq.n	801be26 <lfs_pair_issync+0x3a>
 801bdfa:	2000      	movs	r0, #0
 801bdfc:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801bdfe:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801be00:	6844      	ldr	r4, [r0, #4]
 801be02:	684d      	ldr	r5, [r1, #4]
 801be04:	42ac      	cmp	r4, r5
 801be06:	d00a      	beq.n	801be1e <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801be08:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801be0a:	428b      	cmp	r3, r1
 801be0c:	d002      	beq.n	801be14 <lfs_pair_issync+0x28>
 801be0e:	2000      	movs	r0, #0
}
 801be10:	bc30      	pop	{r4, r5}
 801be12:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801be14:	6843      	ldr	r3, [r0, #4]
 801be16:	429a      	cmp	r2, r3
 801be18:	d003      	beq.n	801be22 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801be1a:	2000      	movs	r0, #0
 801be1c:	e7f8      	b.n	801be10 <lfs_pair_issync+0x24>
 801be1e:	2001      	movs	r0, #1
 801be20:	e7f6      	b.n	801be10 <lfs_pair_issync+0x24>
 801be22:	2001      	movs	r0, #1
 801be24:	e7f4      	b.n	801be10 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801be26:	6843      	ldr	r3, [r0, #4]
 801be28:	429a      	cmp	r2, r3
 801be2a:	d001      	beq.n	801be30 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801be2c:	2000      	movs	r0, #0
 801be2e:	4770      	bx	lr
 801be30:	2001      	movs	r0, #1
}
 801be32:	4770      	bx	lr

0801be34 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801be34:	2300      	movs	r3, #0
 801be36:	2b02      	cmp	r3, #2
 801be38:	dc0d      	bgt.n	801be56 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801be3a:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801be3c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801be40:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801be44:	4062      	eors	r2, r4
 801be46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801be4a:	3301      	adds	r3, #1
 801be4c:	2b02      	cmp	r3, #2
 801be4e:	ddf5      	ble.n	801be3c <lfs_gstate_xor+0x8>
    }
}
 801be50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be54:	4770      	bx	lr
 801be56:	4770      	bx	lr

0801be58 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801be58:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801be5a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801be5c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801be60:	d00f      	beq.n	801be82 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801be62:	6843      	ldr	r3, [r0, #4]
 801be64:	680a      	ldr	r2, [r1, #0]
 801be66:	4293      	cmp	r3, r2
 801be68:	d00d      	beq.n	801be86 <lfs_gstate_hasmovehere+0x2e>
 801be6a:	6880      	ldr	r0, [r0, #8]
 801be6c:	6849      	ldr	r1, [r1, #4]
 801be6e:	4288      	cmp	r0, r1
 801be70:	d00b      	beq.n	801be8a <lfs_gstate_hasmovehere+0x32>
 801be72:	428b      	cmp	r3, r1
 801be74:	d00b      	beq.n	801be8e <lfs_gstate_hasmovehere+0x36>
 801be76:	4282      	cmp	r2, r0
 801be78:	d001      	beq.n	801be7e <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801be7a:	2000      	movs	r0, #0
}
 801be7c:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801be7e:	2001      	movs	r0, #1
 801be80:	4770      	bx	lr
 801be82:	2000      	movs	r0, #0
 801be84:	4770      	bx	lr
 801be86:	2001      	movs	r0, #1
 801be88:	4770      	bx	lr
 801be8a:	2001      	movs	r0, #1
 801be8c:	4770      	bx	lr
 801be8e:	2001      	movs	r0, #1
 801be90:	4770      	bx	lr

0801be92 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801be92:	b082      	sub	sp, #8
 801be94:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801be96:	ab01      	add	r3, sp, #4
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	b11b      	cbz	r3, 801bea4 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801be9c:	428b      	cmp	r3, r1
 801be9e:	d1fb      	bne.n	801be98 <lfs_mlist_isopen+0x6>
            return true;
 801bea0:	2001      	movs	r0, #1
 801bea2:	e000      	b.n	801bea6 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801bea4:	2000      	movs	r0, #0
}
 801bea6:	b002      	add	sp, #8
 801bea8:	4770      	bx	lr

0801beaa <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801beaa:	3028      	adds	r0, #40	@ 0x28
 801beac:	e000      	b.n	801beb0 <lfs_mlist_remove+0x6>
 801beae:	4618      	mov	r0, r3
 801beb0:	6803      	ldr	r3, [r0, #0]
 801beb2:	b123      	cbz	r3, 801bebe <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801beb4:	428b      	cmp	r3, r1
 801beb6:	d1fa      	bne.n	801beae <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	6003      	str	r3, [r0, #0]
            break;
 801bebc:	4770      	bx	lr
        }
    }
}
 801bebe:	4770      	bx	lr

0801bec0 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801bec0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801bec2:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801bec4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801bec6:	4770      	bx	lr

0801bec8 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801bec8:	4800      	ldr	r0, [pc, #0]	@ (801becc <lfs_fs_disk_version+0x4>)
 801beca:	4770      	bx	lr
 801becc:	00020001 	.word	0x00020001

0801bed0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801bed0:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801bed2:	f7ff fff9 	bl	801bec8 <lfs_fs_disk_version>

}
 801bed6:	0c00      	lsrs	r0, r0, #16
 801bed8:	bd08      	pop	{r3, pc}

0801beda <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801beda:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801bedc:	f7ff fff4 	bl	801bec8 <lfs_fs_disk_version>
}
 801bee0:	b280      	uxth	r0, r0
 801bee2:	bd08      	pop	{r3, pc}

0801bee4 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801bee4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bee6:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801bee8:	4770      	bx	lr

0801beea <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801beea:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801beec:	2200      	movs	r2, #0
 801beee:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801bef0:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801bef2:	f7ff fff7 	bl	801bee4 <lfs_alloc_ckpoint>
}
 801bef6:	bd08      	pop	{r3, pc}

0801bef8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801bef8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801befa:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801befc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801befe:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801bf00:	fbb1 f2f3 	udiv	r2, r1, r3
 801bf04:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801bf08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801bf0a:	428b      	cmp	r3, r1
 801bf0c:	d90d      	bls.n	801bf2a <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801bf0e:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801bf10:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801bf12:	08c8      	lsrs	r0, r1, #3
 801bf14:	5c23      	ldrb	r3, [r4, r0]
 801bf16:	f001 0107 	and.w	r1, r1, #7
 801bf1a:	2201      	movs	r2, #1
 801bf1c:	408a      	lsls	r2, r1
 801bf1e:	4313      	orrs	r3, r2
 801bf20:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801bf22:	2000      	movs	r0, #0
 801bf24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf28:	4770      	bx	lr
 801bf2a:	2000      	movs	r0, #0
 801bf2c:	4770      	bx	lr
	...

0801bf30 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801bf30:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801bf32:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801bf36:	d01c      	beq.n	801bf72 <lfs_dir_traverse_filter+0x42>
 801bf38:	4a19      	ldr	r2, [pc, #100]	@ (801bfa0 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801bf3a:	6803      	ldr	r3, [r0, #0]
 801bf3c:	ea83 0401 	eor.w	r4, r3, r1
 801bf40:	4214      	tst	r4, r2
 801bf42:	d018      	beq.n	801bf76 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bf44:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801bf48:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bf4c:	d013      	beq.n	801bf76 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801bf4e:	4c14      	ldr	r4, [pc, #80]	@ (801bfa0 <lfs_dir_traverse_filter+0x70>)
 801bf50:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801bf52:	4a14      	ldr	r2, [pc, #80]	@ (801bfa4 <lfs_dir_traverse_filter+0x74>)
 801bf54:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801bf56:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801bf5a:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801bf5e:	4294      	cmp	r4, r2
 801bf60:	d009      	beq.n	801bf76 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801bf62:	0d0a      	lsrs	r2, r1, #20
 801bf64:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801bf68:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801bf6c:	d009      	beq.n	801bf82 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801bf6e:	2000      	movs	r0, #0
 801bf70:	e004      	b.n	801bf7c <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801bf72:	4a0d      	ldr	r2, [pc, #52]	@ (801bfa8 <lfs_dir_traverse_filter+0x78>)
 801bf74:	e7e1      	b.n	801bf3a <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801bf76:	2300      	movs	r3, #0
 801bf78:	6003      	str	r3, [r0, #0]
        return true;
 801bf7a:	2001      	movs	r0, #1
}
 801bf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf80:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801bf82:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801bf86:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801bf8a:	428c      	cmp	r4, r1
 801bf8c:	d305      	bcc.n	801bf9a <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801bf8e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801bf90:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801bf94:	6003      	str	r3, [r0, #0]
    return false;
 801bf96:	2000      	movs	r0, #0
 801bf98:	e7f0      	b.n	801bf7c <lfs_dir_traverse_filter+0x4c>
 801bf9a:	2000      	movs	r0, #0
 801bf9c:	e7ee      	b.n	801bf7c <lfs_dir_traverse_filter+0x4c>
 801bf9e:	bf00      	nop
 801bfa0:	7ffffc00 	.word	0x7ffffc00
 801bfa4:	000ffc00 	.word	0x000ffc00
 801bfa8:	700ffc00 	.word	0x700ffc00

0801bfac <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bfac:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bfb4:	bf08      	it	eq
 801bfb6:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801bfb8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bfbc:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801bfbe:	6803      	ldr	r3, [r0, #0]
 801bfc0:	440b      	add	r3, r1
 801bfc2:	6003      	str	r3, [r0, #0]
    return 0;
}
 801bfc4:	2000      	movs	r0, #0
 801bfc6:	4770      	bx	lr

0801bfc8 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801bfc8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801bfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	dd0b      	ble.n	801bfe8 <lfs_dir_needsrelocation+0x20>
 801bfd0:	688a      	ldr	r2, [r1, #8]
 801bfd2:	3201      	adds	r2, #1
 801bfd4:	3301      	adds	r3, #1
 801bfd6:	f043 0301 	orr.w	r3, r3, #1
 801bfda:	fbb2 f1f3 	udiv	r1, r2, r3
 801bfde:	fb03 2211 	mls	r2, r3, r1, r2
 801bfe2:	b11a      	cbz	r2, 801bfec <lfs_dir_needsrelocation+0x24>
 801bfe4:	2000      	movs	r0, #0
 801bfe6:	4770      	bx	lr
 801bfe8:	2000      	movs	r0, #0
 801bfea:	4770      	bx	lr
 801bfec:	2001      	movs	r0, #1
}
 801bfee:	4770      	bx	lr

0801bff0 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801bff0:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801bff2:	f7ff ff5a 	bl	801beaa <lfs_mlist_remove>

    return 0;
}
 801bff6:	2000      	movs	r0, #0
 801bff8:	bd08      	pop	{r3, pc}

0801bffa <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801bffa:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801bffc:	4770      	bx	lr

0801bffe <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801bffe:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c000:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c004:	d101      	bne.n	801c00a <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801c006:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801c008:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801c00a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801c00c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801c00e:	4298      	cmp	r0, r3
 801c010:	bf38      	it	cc
 801c012:	4618      	movcc	r0, r3
 801c014:	4770      	bx	lr

0801c016 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801c016:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801c01c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801c020:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801c022:	4770      	bx	lr

0801c024 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801c024:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801c026:	4b13      	ldr	r3, [pc, #76]	@ (801c074 <lfs_fs_prepmove+0x50>)
 801c028:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c02a:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801c02c:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801c030:	4561      	cmp	r1, ip
 801c032:	d017      	beq.n	801c064 <lfs_fs_prepmove+0x40>
 801c034:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801c038:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801c03c:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801c040:	ea43 030c 	orr.w	r3, r3, ip
 801c044:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801c046:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c04a:	4299      	cmp	r1, r3
 801c04c:	d00d      	beq.n	801c06a <lfs_fs_prepmove+0x46>
 801c04e:	6813      	ldr	r3, [r2, #0]
 801c050:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801c052:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c056:	4299      	cmp	r1, r3
 801c058:	d009      	beq.n	801c06e <lfs_fs_prepmove+0x4a>
 801c05a:	6853      	ldr	r3, [r2, #4]
 801c05c:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801c05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c062:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801c064:	f04f 0c00 	mov.w	ip, #0
 801c068:	e7ea      	b.n	801c040 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801c06a:	2300      	movs	r3, #0
 801c06c:	e7f0      	b.n	801c050 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801c06e:	2300      	movs	r3, #0
 801c070:	e7f4      	b.n	801c05c <lfs_fs_prepmove+0x38>
 801c072:	bf00      	nop
 801c074:	800003ff 	.word	0x800003ff

0801c078 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801c078:	6803      	ldr	r3, [r0, #0]
 801c07a:	3301      	adds	r3, #1
 801c07c:	6003      	str	r3, [r0, #0]
    return 0;
}
 801c07e:	2000      	movs	r0, #0
 801c080:	4770      	bx	lr
	...

0801c084 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801c084:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801c086:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c088:	428b      	cmp	r3, r1
 801c08a:	d905      	bls.n	801c098 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801c08c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801c08e:	68c3      	ldr	r3, [r0, #12]
 801c090:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801c092:	2800      	cmp	r0, #0
 801c094:	dc07      	bgt.n	801c0a6 <lfs_bd_erase+0x22>
}
 801c096:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801c098:	4b06      	ldr	r3, [pc, #24]	@ (801c0b4 <lfs_bd_erase+0x30>)
 801c09a:	4a07      	ldr	r2, [pc, #28]	@ (801c0b8 <lfs_bd_erase+0x34>)
 801c09c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801c0a0:	4806      	ldr	r0, [pc, #24]	@ (801c0bc <lfs_bd_erase+0x38>)
 801c0a2:	f00e fee3 	bl	802ae6c <__assert_func>
    LFS_ASSERT(err <= 0);
 801c0a6:	4b06      	ldr	r3, [pc, #24]	@ (801c0c0 <lfs_bd_erase+0x3c>)
 801c0a8:	4a03      	ldr	r2, [pc, #12]	@ (801c0b8 <lfs_bd_erase+0x34>)
 801c0aa:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801c0ae:	4803      	ldr	r0, [pc, #12]	@ (801c0bc <lfs_bd_erase+0x38>)
 801c0b0:	f00e fedc 	bl	802ae6c <__assert_func>
 801c0b4:	0803a820 	.word	0x0803a820
 801c0b8:	0803b480 	.word	0x0803b480
 801c0bc:	0803a734 	.word	0x0803a734
 801c0c0:	0803a764 	.word	0x0803a764

0801c0c4 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801c0c4:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c0c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801c0c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c0cc:	b90a      	cbnz	r2, 801c0d2 <lfs_fs_preporphans+0xe>
 801c0ce:	2900      	cmp	r1, #0
 801c0d0:	db12      	blt.n	801c0f8 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801c0d2:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801c0d6:	d901      	bls.n	801c0dc <lfs_fs_preporphans+0x18>
 801c0d8:	2900      	cmp	r1, #0
 801c0da:	dc14      	bgt.n	801c106 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801c0dc:	4419      	add	r1, r3
 801c0de:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801c0e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801c0e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801c0e8:	3900      	subs	r1, #0
 801c0ea:	bf18      	it	ne
 801c0ec:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801c0ee:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801c0f2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801c0f4:	2000      	movs	r0, #0
 801c0f6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801c0f8:	4b06      	ldr	r3, [pc, #24]	@ (801c114 <lfs_fs_preporphans+0x50>)
 801c0fa:	4a07      	ldr	r2, [pc, #28]	@ (801c118 <lfs_fs_preporphans+0x54>)
 801c0fc:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801c100:	4806      	ldr	r0, [pc, #24]	@ (801c11c <lfs_fs_preporphans+0x58>)
 801c102:	f00e feb3 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801c106:	4b06      	ldr	r3, [pc, #24]	@ (801c120 <lfs_fs_preporphans+0x5c>)
 801c108:	4a03      	ldr	r2, [pc, #12]	@ (801c118 <lfs_fs_preporphans+0x54>)
 801c10a:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801c10e:	4803      	ldr	r0, [pc, #12]	@ (801c11c <lfs_fs_preporphans+0x58>)
 801c110:	f00e feac 	bl	802ae6c <__assert_func>
 801c114:	0803a770 	.word	0x0803a770
 801c118:	0803b450 	.word	0x0803b450
 801c11c:	0803a734 	.word	0x0803a734
 801c120:	0803a7a8 	.word	0x0803a7a8

0801c124 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801c124:	b510      	push	{r4, lr}
 801c126:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801c128:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c12c:	21ff      	movs	r1, #255	@ 0xff
 801c12e:	68e0      	ldr	r0, [r4, #12]
 801c130:	f011 fbee 	bl	802d910 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801c134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c138:	6023      	str	r3, [r4, #0]
}
 801c13a:	bd10      	pop	{r4, pc}

0801c13c <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801c13e:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801c140:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c142:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801c144:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801c146:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801c14a:	42bd      	cmp	r5, r7
 801c14c:	d312      	bcc.n	801c174 <lfs_ctz_index+0x38>
 801c14e:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801c150:	3801      	subs	r0, #1
 801c152:	f7f4 fe19 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801c156:	1c84      	adds	r4, r0, #2
 801c158:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801c15c:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801c160:	fb04 5517 	mls	r5, r4, r7, r5
 801c164:	4620      	mov	r0, r4
 801c166:	f7f4 fe0f 	bl	8010d88 <__popcountsi2>
 801c16a:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801c16e:	6035      	str	r5, [r6, #0]
    return i;
 801c170:	4620      	mov	r0, r4
}
 801c172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801c174:	2000      	movs	r0, #0
 801c176:	e7fc      	b.n	801c172 <lfs_ctz_index+0x36>

0801c178 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c17c:	b087      	sub	sp, #28
 801c17e:	4615      	mov	r5, r2
 801c180:	469b      	mov	fp, r3
 801c182:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c184:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c186:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801c18a:	eb04 020a 	add.w	r2, r4, sl
 801c18e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c192:	429a      	cmp	r2, r3
 801c194:	f200 80d0 	bhi.w	801c338 <lfs_bd_read+0x1c0>
 801c198:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801c19a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	f000 80c7 	beq.w	801c330 <lfs_bd_read+0x1b8>
 801c1a2:	42bb      	cmp	r3, r7
 801c1a4:	f240 80cb 	bls.w	801c33e <lfs_bd_read+0x1c6>
 801c1a8:	9003      	str	r0, [sp, #12]
 801c1aa:	e084      	b.n	801c2b6 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801c1ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c1b0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c1b4:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801c1b6:	42a1      	cmp	r1, r4
 801c1b8:	d91e      	bls.n	801c1f8 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801c1ba:	42a3      	cmp	r3, r4
 801c1bc:	d905      	bls.n	801c1ca <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801c1be:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801c1c0:	4553      	cmp	r3, sl
 801c1c2:	bf28      	it	cs
 801c1c4:	4653      	movcs	r3, sl
 801c1c6:	4698      	mov	r8, r3
 801c1c8:	e081      	b.n	801c2ce <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801c1ca:	1b19      	subs	r1, r3, r4
 801c1cc:	eb02 0801 	add.w	r8, r2, r1
 801c1d0:	45d0      	cmp	r8, sl
 801c1d2:	bf28      	it	cs
 801c1d4:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801c1d6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801c1da:	1ae3      	subs	r3, r4, r3
 801c1dc:	4642      	mov	r2, r8
 801c1de:	4419      	add	r1, r3
 801c1e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c1e2:	f013 f8fb 	bl	802f3dc <memcpy>
                data += diff;
 801c1e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c1e8:	4443      	add	r3, r8
 801c1ea:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801c1ec:	4444      	add	r4, r8
                size -= diff;
 801c1ee:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801c1f2:	e060      	b.n	801c2b6 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801c1f4:	46d0      	mov	r8, sl
 801c1f6:	e06a      	b.n	801c2ce <lfs_bd_read+0x156>
 801c1f8:	46d0      	mov	r8, sl
 801c1fa:	e068      	b.n	801c2ce <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801c1fc:	686b      	ldr	r3, [r5, #4]
 801c1fe:	68aa      	ldr	r2, [r5, #8]
 801c200:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801c202:	42a1      	cmp	r1, r4
 801c204:	d966      	bls.n	801c2d4 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801c206:	42a3      	cmp	r3, r4
 801c208:	d904      	bls.n	801c214 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801c20a:	1b1b      	subs	r3, r3, r4
 801c20c:	4598      	cmp	r8, r3
 801c20e:	bf28      	it	cs
 801c210:	4698      	movcs	r8, r3
 801c212:	e05f      	b.n	801c2d4 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801c214:	1b19      	subs	r1, r3, r4
 801c216:	440a      	add	r2, r1
 801c218:	4590      	cmp	r8, r2
 801c21a:	bf28      	it	cs
 801c21c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801c21e:	68e9      	ldr	r1, [r5, #12]
 801c220:	1ae3      	subs	r3, r4, r3
 801c222:	4642      	mov	r2, r8
 801c224:	4419      	add	r1, r3
 801c226:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c228:	f013 f8d8 	bl	802f3dc <memcpy>
                data += diff;
 801c22c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c22e:	4443      	add	r3, r8
 801c230:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801c232:	4444      	add	r4, r8
                size -= diff;
 801c234:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801c238:	e03d      	b.n	801c2b6 <lfs_bd_read+0x13e>
            data += diff;
 801c23a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c23c:	9b04      	ldr	r3, [sp, #16]
 801c23e:	441a      	add	r2, r3
 801c240:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801c242:	441c      	add	r4, r3
            size -= diff;
 801c244:	9b05      	ldr	r3, [sp, #20]
 801c246:	eba3 0308 	sub.w	r3, r3, r8
 801c24a:	449a      	add	sl, r3
            continue;
 801c24c:	e033      	b.n	801c2b6 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801c24e:	9b03      	ldr	r3, [sp, #12]
 801c250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c252:	b10b      	cbz	r3, 801c258 <lfs_bd_read+0xe0>
 801c254:	42bb      	cmp	r3, r7
 801c256:	d95f      	bls.n	801c318 <lfs_bd_read+0x1a0>
        rcache->block = block;
 801c258:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801c25a:	9e03      	ldr	r6, [sp, #12]
 801c25c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c25e:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801c260:	fbb4 f3f2 	udiv	r3, r4, r2
 801c264:	fb02 4313 	mls	r3, r2, r3, r4
 801c268:	1ae2      	subs	r2, r4, r3
 801c26a:	606a      	str	r2, [r5, #4]
                lfs_min(
 801c26c:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801c270:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801c274:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801c278:	4401      	add	r1, r0
 801c27a:	3901      	subs	r1, #1
    return a - (a % alignment);
 801c27c:	fbb1 fef0 	udiv	lr, r1, r0
 801c280:	fb00 101e 	mls	r0, r0, lr, r1
 801c284:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801c286:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801c28a:	1b1b      	subs	r3, r3, r4
 801c28c:	4288      	cmp	r0, r1
 801c28e:	bf94      	ite	ls
 801c290:	181b      	addls	r3, r3, r0
 801c292:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801c294:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801c298:	428b      	cmp	r3, r1
 801c29a:	bf28      	it	cs
 801c29c:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801c29e:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801c2a0:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801c2a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801c2a6:	9300      	str	r3, [sp, #0]
 801c2a8:	68eb      	ldr	r3, [r5, #12]
 801c2aa:	4639      	mov	r1, r7
 801c2ac:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801c2ae:	1e03      	subs	r3, r0, #0
 801c2b0:	dc38      	bgt.n	801c324 <lfs_bd_read+0x1ac>
        if (err) {
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d146      	bne.n	801c344 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801c2b6:	f1ba 0f00 	cmp.w	sl, #0
 801c2ba:	d03b      	beq.n	801c334 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801c2bc:	f1b9 0f00 	cmp.w	r9, #0
 801c2c0:	d098      	beq.n	801c1f4 <lfs_bd_read+0x7c>
 801c2c2:	f8d9 3000 	ldr.w	r3, [r9]
 801c2c6:	42bb      	cmp	r3, r7
 801c2c8:	f43f af70 	beq.w	801c1ac <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801c2cc:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801c2ce:	682b      	ldr	r3, [r5, #0]
 801c2d0:	42bb      	cmp	r3, r7
 801c2d2:	d093      	beq.n	801c1fc <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801c2d4:	45da      	cmp	sl, fp
 801c2d6:	d3ba      	bcc.n	801c24e <lfs_bd_read+0xd6>
 801c2d8:	9b03      	ldr	r3, [sp, #12]
 801c2da:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801c2dc:	69c2      	ldr	r2, [r0, #28]
 801c2de:	fbb4 f3f2 	udiv	r3, r4, r2
 801c2e2:	fb02 4313 	mls	r3, r2, r3, r4
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d1b1      	bne.n	801c24e <lfs_bd_read+0xd6>
 801c2ea:	4552      	cmp	r2, sl
 801c2ec:	d8af      	bhi.n	801c24e <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801c2ee:	fbb8 f3f2 	udiv	r3, r8, r2
 801c2f2:	fb02 8313 	mls	r3, r2, r3, r8
 801c2f6:	9305      	str	r3, [sp, #20]
 801c2f8:	eba8 0203 	sub.w	r2, r8, r3
 801c2fc:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801c2fe:	6842      	ldr	r2, [r0, #4]
 801c300:	4616      	mov	r6, r2
 801c302:	9304      	str	r3, [sp, #16]
 801c304:	9300      	str	r3, [sp, #0]
 801c306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c308:	4622      	mov	r2, r4
 801c30a:	4639      	mov	r1, r7
 801c30c:	47b0      	blx	r6
            if (err) {
 801c30e:	2800      	cmp	r0, #0
 801c310:	d093      	beq.n	801c23a <lfs_bd_read+0xc2>
}
 801c312:	b007      	add	sp, #28
 801c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801c318:	4b0b      	ldr	r3, [pc, #44]	@ (801c348 <lfs_bd_read+0x1d0>)
 801c31a:	4a0c      	ldr	r2, [pc, #48]	@ (801c34c <lfs_bd_read+0x1d4>)
 801c31c:	216b      	movs	r1, #107	@ 0x6b
 801c31e:	480c      	ldr	r0, [pc, #48]	@ (801c350 <lfs_bd_read+0x1d8>)
 801c320:	f00e fda4 	bl	802ae6c <__assert_func>
        LFS_ASSERT(err <= 0);
 801c324:	4b0b      	ldr	r3, [pc, #44]	@ (801c354 <lfs_bd_read+0x1dc>)
 801c326:	4a09      	ldr	r2, [pc, #36]	@ (801c34c <lfs_bd_read+0x1d4>)
 801c328:	2176      	movs	r1, #118	@ 0x76
 801c32a:	4809      	ldr	r0, [pc, #36]	@ (801c350 <lfs_bd_read+0x1d8>)
 801c32c:	f00e fd9e 	bl	802ae6c <__assert_func>
 801c330:	9003      	str	r0, [sp, #12]
 801c332:	e7c0      	b.n	801c2b6 <lfs_bd_read+0x13e>
    return 0;
 801c334:	2000      	movs	r0, #0
 801c336:	e7ec      	b.n	801c312 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801c338:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c33c:	e7e9      	b.n	801c312 <lfs_bd_read+0x19a>
 801c33e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c342:	e7e6      	b.n	801c312 <lfs_bd_read+0x19a>
 801c344:	4618      	mov	r0, r3
 801c346:	e7e4      	b.n	801c312 <lfs_bd_read+0x19a>
 801c348:	0803a7e0 	.word	0x0803a7e0
 801c34c:	0803b4a8 	.word	0x0803b4a8
 801c350:	0803a734 	.word	0x0803a734
 801c354:	0803a764 	.word	0x0803a764

0801c358 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	b089      	sub	sp, #36	@ 0x24
 801c35e:	4607      	mov	r7, r0
 801c360:	468a      	mov	sl, r1
 801c362:	4690      	mov	r8, r2
 801c364:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801c366:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801c368:	690b      	ldr	r3, [r1, #16]
 801c36a:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801c36c:	303c      	adds	r0, #60	@ 0x3c
 801c36e:	f7ff fd73 	bl	801be58 <lfs_gstate_hasmovehere>
 801c372:	2800      	cmp	r0, #0
 801c374:	f000 808d 	beq.w	801c492 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801c378:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	f000 808a 	beq.w	801c496 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801c382:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c384:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801c388:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801c38c:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801c390:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801c394:	404b      	eors	r3, r1
 801c396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	f000 8085 	beq.w	801c4aa <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801c3a0:	4282      	cmp	r2, r0
 801c3a2:	d37a      	bcc.n	801c49a <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801c3a4:	2600      	movs	r6, #0
 801c3a6:	e006      	b.n	801c3b6 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801c3a8:	9605      	str	r6, [sp, #20]
 801c3aa:	ebab 0306 	sub.w	r3, fp, r6
 801c3ae:	4063      	eors	r3, r4
 801c3b0:	ea13 0f08 	tst.w	r3, r8
 801c3b4:	d048      	beq.n	801c448 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801c3b6:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c3b8:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c3bc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801c3c0:	bf14      	ite	ne
 801c3c2:	4623      	movne	r3, r4
 801c3c4:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801c3c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c3ca:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801c3cc:	3308      	adds	r3, #8
 801c3ce:	42ab      	cmp	r3, r5
 801c3d0:	d865      	bhi.n	801c49e <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801c3d2:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801c3d4:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801c3d8:	2304      	movs	r3, #4
 801c3da:	9303      	str	r3, [sp, #12]
 801c3dc:	a907      	add	r1, sp, #28
 801c3de:	9102      	str	r1, [sp, #8]
 801c3e0:	9501      	str	r5, [sp, #4]
 801c3e2:	9200      	str	r2, [sp, #0]
 801c3e4:	463a      	mov	r2, r7
 801c3e6:	2100      	movs	r1, #0
 801c3e8:	4638      	mov	r0, r7
 801c3ea:	f7ff fec5 	bl	801c178 <lfs_bd_read>
        if (err) {
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	d156      	bne.n	801c4a2 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801c3f4:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801c3f6:	ba1b      	rev	r3, r3
 801c3f8:	4063      	eors	r3, r4
 801c3fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c3fe:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801c400:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801c404:	2b00      	cmp	r3, #0
 801c406:	d0cf      	beq.n	801c3a8 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801c408:	0d23      	lsrs	r3, r4, #20
 801c40a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801c40e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801c412:	d1c9      	bne.n	801c3a8 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801c414:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801c418:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801c41c:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801c420:	4584      	cmp	ip, r0
 801c422:	d3c1      	bcc.n	801c3a8 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801c424:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c428:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c42c:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c430:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801c434:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801c438:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c43c:	42a2      	cmp	r2, r4
 801c43e:	d037      	beq.n	801c4b0 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801c440:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c442:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801c446:	e7af      	b.n	801c3a8 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801c448:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801c44c:	d033      	beq.n	801c4b6 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801c44e:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801c452:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c454:	429e      	cmp	r6, r3
 801c456:	bf28      	it	cs
 801c458:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801c45a:	f8da 2000 	ldr.w	r2, [sl]
 801c45e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c460:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801c462:	9603      	str	r6, [sp, #12]
 801c464:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c466:	9102      	str	r1, [sp, #8]
 801c468:	3304      	adds	r3, #4
 801c46a:	9301      	str	r3, [sp, #4]
 801c46c:	9200      	str	r2, [sp, #0]
 801c46e:	4633      	mov	r3, r6
 801c470:	463a      	mov	r2, r7
 801c472:	2100      	movs	r1, #0
 801c474:	4638      	mov	r0, r7
 801c476:	f7ff fe7f 	bl	801c178 <lfs_bd_read>
            if (err) {
 801c47a:	4603      	mov	r3, r0
 801c47c:	b988      	cbnz	r0, 801c4a2 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801c47e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c480:	1b9a      	subs	r2, r3, r6
 801c482:	2100      	movs	r1, #0
 801c484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c486:	1998      	adds	r0, r3, r6
 801c488:	f011 fa42 	bl	802d910 <memset>
            return tag + gdiff;
 801c48c:	9b05      	ldr	r3, [sp, #20]
 801c48e:	4423      	add	r3, r4
 801c490:	e007      	b.n	801c4a2 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801c492:	2600      	movs	r6, #0
 801c494:	e78f      	b.n	801c3b6 <lfs_dir_getslice+0x5e>
 801c496:	2600      	movs	r6, #0
 801c498:	e78d      	b.n	801c3b6 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801c49a:	4e08      	ldr	r6, [pc, #32]	@ (801c4bc <lfs_dir_getslice+0x164>)
 801c49c:	e78b      	b.n	801c3b6 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801c49e:	f06f 0301 	mvn.w	r3, #1
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	b009      	add	sp, #36	@ 0x24
 801c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801c4aa:	f06f 0301 	mvn.w	r3, #1
 801c4ae:	e7f8      	b.n	801c4a2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801c4b0:	f06f 0301 	mvn.w	r3, #1
 801c4b4:	e7f5      	b.n	801c4a2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801c4b6:	f06f 0301 	mvn.w	r3, #1
 801c4ba:	e7f2      	b.n	801c4a2 <lfs_dir_getslice+0x14a>
 801c4bc:	fffffc00 	.word	0xfffffc00

0801c4c0 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801c4c0:	b510      	push	{r4, lr}
 801c4c2:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801c4c4:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801c4c8:	9402      	str	r4, [sp, #8]
 801c4ca:	9c06      	ldr	r4, [sp, #24]
 801c4cc:	9401      	str	r4, [sp, #4]
 801c4ce:	2400      	movs	r4, #0
 801c4d0:	9400      	str	r4, [sp, #0]
 801c4d2:	f7ff ff41 	bl	801c358 <lfs_dir_getslice>
}
 801c4d6:	b004      	add	sp, #16
 801c4d8:	bd10      	pop	{r4, pc}
	...

0801c4dc <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801c4dc:	b510      	push	{r4, lr}
 801c4de:	b086      	sub	sp, #24
 801c4e0:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801c4e2:	ab03      	add	r3, sp, #12
 801c4e4:	9300      	str	r3, [sp, #0]
 801c4e6:	4b09      	ldr	r3, [pc, #36]	@ (801c50c <lfs_dir_getgstate+0x30>)
 801c4e8:	4a09      	ldr	r2, [pc, #36]	@ (801c510 <lfs_dir_getgstate+0x34>)
 801c4ea:	f7ff ffe9 	bl	801c4c0 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801c4ee:	2800      	cmp	r0, #0
 801c4f0:	da04      	bge.n	801c4fc <lfs_dir_getgstate+0x20>
 801c4f2:	f110 0f02 	cmn.w	r0, #2
 801c4f6:	d106      	bne.n	801c506 <lfs_dir_getgstate+0x2a>
    return 0;
 801c4f8:	2000      	movs	r0, #0
 801c4fa:	e004      	b.n	801c506 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801c4fc:	a903      	add	r1, sp, #12
 801c4fe:	4620      	mov	r0, r4
 801c500:	f7ff fc98 	bl	801be34 <lfs_gstate_xor>
    return 0;
 801c504:	2000      	movs	r0, #0
}
 801c506:	b006      	add	sp, #24
 801c508:	bd10      	pop	{r4, pc}
 801c50a:	bf00      	nop
 801c50c:	7ff0000c 	.word	0x7ff0000c
 801c510:	7ff00000 	.word	0x7ff00000

0801c514 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c518:	b089      	sub	sp, #36	@ 0x24
 801c51a:	461c      	mov	r4, r3
 801c51c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c51e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c520:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801c522:	b923      	cbnz	r3, 801c52e <lfs_ctz_traverse+0x1a>
        return 0;
 801c524:	2300      	movs	r3, #0
}
 801c526:	4618      	mov	r0, r3
 801c528:	b009      	add	sp, #36	@ 0x24
 801c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c52e:	4680      	mov	r8, r0
 801c530:	4689      	mov	r9, r1
 801c532:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801c534:	3b01      	subs	r3, #1
 801c536:	9307      	str	r3, [sp, #28]
 801c538:	a907      	add	r1, sp, #28
 801c53a:	f7ff fdff 	bl	801c13c <lfs_ctz_index>
 801c53e:	4605      	mov	r5, r0
        int err = cb(data, head);
 801c540:	4621      	mov	r1, r4
 801c542:	4638      	mov	r0, r7
 801c544:	47b0      	blx	r6
        if (err) {
 801c546:	4603      	mov	r3, r0
 801c548:	2800      	cmp	r0, #0
 801c54a:	d1ec      	bne.n	801c526 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801c54c:	2d00      	cmp	r5, #0
 801c54e:	d0ea      	beq.n	801c526 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801c550:	f005 0b01 	and.w	fp, r5, #1
 801c554:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801c558:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801c55a:	9303      	str	r3, [sp, #12]
 801c55c:	aa05      	add	r2, sp, #20
 801c55e:	9202      	str	r2, [sp, #8]
 801c560:	2200      	movs	r2, #0
 801c562:	9201      	str	r2, [sp, #4]
 801c564:	9400      	str	r4, [sp, #0]
 801c566:	4652      	mov	r2, sl
 801c568:	4649      	mov	r1, r9
 801c56a:	4640      	mov	r0, r8
 801c56c:	f7ff fe04 	bl	801c178 <lfs_bd_read>
        if (err) {
 801c570:	4604      	mov	r4, r0
 801c572:	b9c8      	cbnz	r0, 801c5a8 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801c574:	43eb      	mvns	r3, r5
 801c576:	f003 0301 	and.w	r3, r3, #1
 801c57a:	42a3      	cmp	r3, r4
 801c57c:	dd0b      	ble.n	801c596 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801c57e:	ab08      	add	r3, sp, #32
 801c580:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c584:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801c588:	4638      	mov	r0, r7
 801c58a:	47b0      	blx	r6
            if (err) {
 801c58c:	4603      	mov	r3, r0
 801c58e:	2800      	cmp	r0, #0
 801c590:	d1c9      	bne.n	801c526 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801c592:	3401      	adds	r4, #1
 801c594:	e7ee      	b.n	801c574 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801c596:	aa08      	add	r2, sp, #32
 801c598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c59c:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801c5a0:	f1ab 0b02 	sub.w	fp, fp, #2
 801c5a4:	445d      	add	r5, fp
    while (true) {
 801c5a6:	e7cb      	b.n	801c540 <lfs_ctz_traverse+0x2c>
            return err;
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	e7bc      	b.n	801c526 <lfs_ctz_traverse+0x12>

0801c5ac <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801c5ac:	b530      	push	{r4, r5, lr}
 801c5ae:	b087      	sub	sp, #28
 801c5b0:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801c5b2:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801c5b4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801c5b8:	6811      	ldr	r1, [r2, #0]
 801c5ba:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801c5bc:	2508      	movs	r5, #8
 801c5be:	9503      	str	r5, [sp, #12]
 801c5c0:	ad04      	add	r5, sp, #16
 801c5c2:	9502      	str	r5, [sp, #8]
 801c5c4:	9201      	str	r2, [sp, #4]
 801c5c6:	9100      	str	r1, [sp, #0]
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	f100 0110 	add.w	r1, r0, #16
 801c5ce:	f7ff fdd3 	bl	801c178 <lfs_bd_read>
    if (err) {
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	b978      	cbnz	r0, 801c5f6 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c5d6:	9a04      	ldr	r2, [sp, #16]
 801c5d8:	6861      	ldr	r1, [r4, #4]
 801c5da:	4291      	cmp	r1, r2
 801c5dc:	d008      	beq.n	801c5f0 <lfs_fs_parent_match+0x44>
 801c5de:	9d05      	ldr	r5, [sp, #20]
 801c5e0:	68a0      	ldr	r0, [r4, #8]
 801c5e2:	4285      	cmp	r5, r0
 801c5e4:	d004      	beq.n	801c5f0 <lfs_fs_parent_match+0x44>
 801c5e6:	4282      	cmp	r2, r0
 801c5e8:	d002      	beq.n	801c5f0 <lfs_fs_parent_match+0x44>
 801c5ea:	42a9      	cmp	r1, r5
 801c5ec:	d000      	beq.n	801c5f0 <lfs_fs_parent_match+0x44>
 801c5ee:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801c5f0:	3b00      	subs	r3, #0
 801c5f2:	bf18      	it	ne
 801c5f4:	2301      	movne	r3, #1
}
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	b007      	add	sp, #28
 801c5fa:	bd30      	pop	{r4, r5, pc}

0801c5fc <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c600:	b0af      	sub	sp, #188	@ 0xbc
 801c602:	9007      	str	r0, [sp, #28]
 801c604:	460e      	mov	r6, r1
 801c606:	4617      	mov	r7, r2
 801c608:	461c      	mov	r4, r3
 801c60a:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801c60e:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801c612:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801c616:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801c61a:	9304      	str	r3, [sp, #16]
 801c61c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801c620:	9305      	str	r3, [sp, #20]
 801c622:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801c626:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801c628:	2500      	movs	r5, #0
 801c62a:	950d      	str	r5, [sp, #52]	@ 0x34
 801c62c:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c62e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c636:	bf14      	ite	ne
 801c638:	46a1      	movne	r9, r4
 801c63a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801c63e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c642:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801c646:	44b9      	add	r9, r7
 801c648:	68f3      	ldr	r3, [r6, #12]
 801c64a:	4599      	cmp	r9, r3
 801c64c:	d35e      	bcc.n	801c70c <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801c64e:	f1bb 0f00 	cmp.w	fp, #0
 801c652:	f340 80fa 	ble.w	801c84a <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801c656:	f8d8 3000 	ldr.w	r3, [r8]
 801c65a:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801c65c:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801c660:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801c664:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801c668:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c66a:	4ba9      	ldr	r3, [pc, #676]	@ (801c910 <lfs_dir_traverse+0x314>)
 801c66c:	ea0a 0303 	and.w	r3, sl, r3
 801c670:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801c672:	404a      	eors	r2, r1
 801c674:	401a      	ands	r2, r3
 801c676:	d1da      	bne.n	801c62e <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801c678:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	f000 8116 	beq.w	801c8ae <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801c682:	2d02      	cmp	r5, #2
 801c684:	d862      	bhi.n	801c74c <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801c686:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801c68a:	a82e      	add	r0, sp, #184	@ 0xb8
 801c68c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c690:	f843 6c78 	str.w	r6, [r3, #-120]
 801c694:	f843 7c74 	str.w	r7, [r3, #-116]
 801c698:	f843 4c70 	str.w	r4, [r3, #-112]
 801c69c:	f843 8c6c 	str.w	r8, [r3, #-108]
 801c6a0:	f843 bc68 	str.w	fp, [r3, #-104]
 801c6a4:	f843 ac64 	str.w	sl, [r3, #-100]
 801c6a8:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801c6aa:	f843 0c60 	str.w	r0, [r3, #-96]
 801c6ae:	9804      	ldr	r0, [sp, #16]
 801c6b0:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801c6b4:	9805      	ldr	r0, [sp, #20]
 801c6b6:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801c6ba:	9806      	ldr	r0, [sp, #24]
 801c6bc:	f823 0c58 	strh.w	r0, [r3, #-88]
 801c6c0:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801c6c2:	f843 0c54 	str.w	r0, [r3, #-84]
 801c6c6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801c6c8:	f843 0c50 	str.w	r0, [r3, #-80]
 801c6cc:	f843 1c4c 	str.w	r1, [r3, #-76]
 801c6d0:	f843 9c48 	str.w	r9, [r3, #-72]
 801c6d4:	3b44      	subs	r3, #68	@ 0x44
 801c6d6:	a90d      	add	r1, sp, #52	@ 0x34
 801c6d8:	c903      	ldmia	r1, {r0, r1}
 801c6da:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801c6de:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801c6e2:	009b      	lsls	r3, r3, #2
 801c6e4:	3328      	adds	r3, #40	@ 0x28
 801c6e6:	a910      	add	r1, sp, #64	@ 0x40
 801c6e8:	440b      	add	r3, r1
 801c6ea:	3304      	adds	r3, #4
 801c6ec:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801c6ee:	3501      	adds	r5, #1
                ttag = 0;
 801c6f0:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801c6f2:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801c6f4:	4b87      	ldr	r3, [pc, #540]	@ (801c914 <lfs_dir_traverse+0x318>)
 801c6f6:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	9306      	str	r3, [sp, #24]
                end = 0;
 801c6fc:	9305      	str	r3, [sp, #20]
                begin = 0;
 801c6fe:	9304      	str	r3, [sp, #16]
 801c700:	e795      	b.n	801c62e <lfs_dir_traverse+0x32>
 801c702:	9d08      	ldr	r5, [sp, #32]
 801c704:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801c706:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801c708:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c70a:	e790      	b.n	801c62e <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801c70c:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801c70e:	2304      	movs	r3, #4
 801c710:	9303      	str	r3, [sp, #12]
 801c712:	a90f      	add	r1, sp, #60	@ 0x3c
 801c714:	9102      	str	r1, [sp, #8]
 801c716:	f8cd 9004 	str.w	r9, [sp, #4]
 801c71a:	9200      	str	r2, [sp, #0]
 801c71c:	9a07      	ldr	r2, [sp, #28]
 801c71e:	2100      	movs	r1, #0
 801c720:	4610      	mov	r0, r2
 801c722:	f7ff fd29 	bl	801c178 <lfs_bd_read>
                if (err) {
 801c726:	4603      	mov	r3, r0
 801c728:	2800      	cmp	r0, #0
 801c72a:	f040 80ec 	bne.w	801c906 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801c72e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801c730:	ba1b      	rev	r3, r3
 801c732:	4063      	eors	r3, r4
 801c734:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801c738:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801c73a:	6833      	ldr	r3, [r6, #0]
 801c73c:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801c73e:	f109 0304 	add.w	r3, r9, #4
 801c742:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801c744:	464f      	mov	r7, r9
                buffer = &disk;
 801c746:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801c74a:	e78d      	b.n	801c668 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801c74c:	4b72      	ldr	r3, [pc, #456]	@ (801c918 <lfs_dir_traverse+0x31c>)
 801c74e:	4a73      	ldr	r2, [pc, #460]	@ (801c91c <lfs_dir_traverse+0x320>)
 801c750:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801c754:	4872      	ldr	r0, [pc, #456]	@ (801c920 <lfs_dir_traverse+0x324>)
 801c756:	f00e fb89 	bl	802ae6c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801c75a:	4b6e      	ldr	r3, [pc, #440]	@ (801c914 <lfs_dir_traverse+0x318>)
 801c75c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801c75e:	429a      	cmp	r2, r3
 801c760:	f43f af65 	beq.w	801c62e <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801c764:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801c768:	aa2e      	add	r2, sp, #184	@ 0xb8
 801c76a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c76e:	223c      	movs	r2, #60	@ 0x3c
 801c770:	2100      	movs	r1, #0
 801c772:	9309      	str	r3, [sp, #36]	@ 0x24
 801c774:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801c778:	f011 f8ca 	bl	802d910 <memset>
 801c77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c77e:	f843 6c78 	str.w	r6, [r3, #-120]
 801c782:	f843 7c74 	str.w	r7, [r3, #-116]
 801c786:	f843 4c70 	str.w	r4, [r3, #-112]
 801c78a:	f843 8c6c 	str.w	r8, [r3, #-108]
 801c78e:	f843 bc68 	str.w	fp, [r3, #-104]
 801c792:	f843 ac64 	str.w	sl, [r3, #-100]
 801c796:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801c798:	f843 2c60 	str.w	r2, [r3, #-96]
 801c79c:	9a04      	ldr	r2, [sp, #16]
 801c79e:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801c7a2:	9a05      	ldr	r2, [sp, #20]
 801c7a4:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801c7a8:	9906      	ldr	r1, [sp, #24]
 801c7aa:	f823 1c58 	strh.w	r1, [r3, #-88]
 801c7ae:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801c7b0:	f843 2c54 	str.w	r2, [r3, #-84]
 801c7b4:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801c7b6:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801c7ba:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801c7bc:	9b08      	ldr	r3, [sp, #32]
 801c7be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801c7c2:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801c7c4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801c7c8:	1c50      	adds	r0, r2, #1
 801c7ca:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801c7cc:	1a9b      	subs	r3, r3, r2
 801c7ce:	fa11 f383 	uxtah	r3, r1, r3
 801c7d2:	b21b      	sxth	r3, r3
 801c7d4:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801c7d6:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801c7d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801c7dc:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801c7de:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801c924 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801c7e2:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801c7e6:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801c7e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801c7ec:	465f      	mov	r7, fp
 801c7ee:	e71e      	b.n	801c62e <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	9508      	str	r5, [sp, #32]
 801c7f4:	9609      	str	r6, [sp, #36]	@ 0x24
 801c7f6:	970a      	str	r7, [sp, #40]	@ 0x28
 801c7f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c7fa:	461c      	mov	r4, r3
 801c7fc:	9d06      	ldr	r5, [sp, #24]
 801c7fe:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801c800:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801c802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801c804:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801c808:	4294      	cmp	r4, r2
 801c80a:	d219      	bcs.n	801c840 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801c80c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801c810:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801c814:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801c818:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801c81c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801c820:	442b      	add	r3, r5
 801c822:	029b      	lsls	r3, r3, #10
 801c824:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801c828:	6891      	ldr	r1, [r2, #8]
 801c82a:	6852      	ldr	r2, [r2, #4]
 801c82c:	4319      	orrs	r1, r3
 801c82e:	4638      	mov	r0, r7
 801c830:	47b0      	blx	r6
                if (res < 0) {
 801c832:	2800      	cmp	r0, #0
 801c834:	db66      	blt.n	801c904 <lfs_dir_traverse+0x308>
                if (res) {
 801c836:	2800      	cmp	r0, #0
 801c838:	f47f af63 	bne.w	801c702 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801c83c:	3401      	adds	r4, #1
 801c83e:	e7e0      	b.n	801c802 <lfs_dir_traverse+0x206>
 801c840:	9d08      	ldr	r5, [sp, #32]
 801c842:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801c844:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801c846:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c848:	e6f1      	b.n	801c62e <lfs_dir_traverse+0x32>
                res = 0;
 801c84a:	2300      	movs	r3, #0
    if (sp > 0) {
 801c84c:	2d00      	cmp	r5, #0
 801c84e:	d05a      	beq.n	801c906 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801c850:	3d01      	subs	r5, #1
 801c852:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801c856:	aa2e      	add	r2, sp, #184	@ 0xb8
 801c858:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c85c:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801c860:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801c864:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801c868:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801c86c:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801c870:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801c874:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801c878:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801c87a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801c87e:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801c880:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801c884:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801c886:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801c88a:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801c88c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801c890:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801c892:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801c896:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801c898:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801c89c:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801c89e:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801c8a2:	aa0d      	add	r2, sp, #52	@ 0x34
 801c8a4:	3b44      	subs	r3, #68	@ 0x44
 801c8a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c8aa:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801c8ae:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c8b2:	b153      	cbz	r3, 801c8ca <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801c8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8b6:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c8ba:	9a04      	ldr	r2, [sp, #16]
 801c8bc:	429a      	cmp	r2, r3
 801c8be:	f63f aeb6 	bhi.w	801c62e <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801c8c2:	9a05      	ldr	r2, [sp, #20]
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	f67f aeb2 	bls.w	801c62e <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c8ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8cc:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801c8ce:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	f43f aeab 	beq.w	801c62e <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801c8d8:	f240 1201 	movw	r2, #257	@ 0x101
 801c8dc:	4293      	cmp	r3, r2
 801c8de:	f43f af3c 	beq.w	801c75a <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801c8e2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801c8e6:	d083      	beq.n	801c7f0 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801c8e8:	464a      	mov	r2, r9
 801c8ea:	9b08      	ldr	r3, [sp, #32]
 801c8ec:	9906      	ldr	r1, [sp, #24]
 801c8ee:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801c8f2:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801c8f4:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801c8f6:	4798      	blx	r3
            if (res < 0) {
 801c8f8:	1e03      	subs	r3, r0, #0
 801c8fa:	db04      	blt.n	801c906 <lfs_dir_traverse+0x30a>
            if (res) {
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	f43f ae96 	beq.w	801c62e <lfs_dir_traverse+0x32>
 801c902:	e7a3      	b.n	801c84c <lfs_dir_traverse+0x250>
 801c904:	4603      	mov	r3, r0
}
 801c906:	4618      	mov	r0, r3
 801c908:	b02f      	add	sp, #188	@ 0xbc
 801c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c90e:	bf00      	nop
 801c910:	7ff00000 	.word	0x7ff00000
 801c914:	0801bf31 	.word	0x0801bf31
 801c918:	0803a810 	.word	0x0803a810
 801c91c:	0803b420 	.word	0x0803b420
 801c920:	0803a734 	.word	0x0803a734
 801c924:	600ffc00 	.word	0x600ffc00

0801c928 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c92c:	b087      	sub	sp, #28
 801c92e:	4606      	mov	r6, r0
 801c930:	468a      	mov	sl, r1
 801c932:	4617      	mov	r7, r2
 801c934:	461c      	mov	r4, r3
 801c936:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801c93a:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801c93e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c940:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801c944:	eb05 0208 	add.w	r2, r5, r8
 801c948:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c94c:	429a      	cmp	r2, r3
 801c94e:	d94d      	bls.n	801c9ec <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801c950:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c954:	e076      	b.n	801ca44 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	68ba      	ldr	r2, [r7, #8]
 801c95a:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c95c:	42a9      	cmp	r1, r5
 801c95e:	d91c      	bls.n	801c99a <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801c960:	42ab      	cmp	r3, r5
 801c962:	d904      	bls.n	801c96e <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801c964:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801c966:	4543      	cmp	r3, r8
 801c968:	bf28      	it	cs
 801c96a:	4643      	movcs	r3, r8
 801c96c:	e048      	b.n	801ca00 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801c96e:	1b59      	subs	r1, r3, r5
 801c970:	440a      	add	r2, r1
 801c972:	4542      	cmp	r2, r8
 801c974:	bf28      	it	cs
 801c976:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801c978:	68f9      	ldr	r1, [r7, #12]
 801c97a:	1aeb      	subs	r3, r5, r3
 801c97c:	9205      	str	r2, [sp, #20]
 801c97e:	4419      	add	r1, r3
 801c980:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c982:	f012 fd2b 	bl	802f3dc <memcpy>
                data += diff;
 801c986:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c988:	9b05      	ldr	r3, [sp, #20]
 801c98a:	4419      	add	r1, r3
 801c98c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801c98e:	441d      	add	r5, r3
                size -= diff;
 801c990:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801c994:	e02a      	b.n	801c9ec <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801c996:	4643      	mov	r3, r8
 801c998:	e032      	b.n	801ca00 <lfs_dir_getread+0xd8>
 801c99a:	4643      	mov	r3, r8
 801c99c:	e030      	b.n	801ca00 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801c99e:	f06f 0301 	mvn.w	r3, #1
 801c9a2:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801c9a4:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c9a6:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801c9a8:	fbb5 f2f3 	udiv	r2, r5, r3
 801c9ac:	fb03 5212 	mls	r2, r3, r2, r5
 801c9b0:	1aaa      	subs	r2, r5, r2
 801c9b2:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c9b4:	eb05 030b 	add.w	r3, r5, fp
 801c9b8:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801c9ba:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801c9bc:	4403      	add	r3, r0
 801c9be:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c9c0:	fbb3 fcf0 	udiv	ip, r3, r0
 801c9c4:	fb00 301c 	mls	r0, r0, ip, r3
 801c9c8:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801c9ca:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801c9cc:	428b      	cmp	r3, r1
 801c9ce:	bf28      	it	cs
 801c9d0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c9d2:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801c9d4:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801c9d6:	9302      	str	r3, [sp, #8]
 801c9d8:	9101      	str	r1, [sp, #4]
 801c9da:	9200      	str	r2, [sp, #0]
 801c9dc:	464b      	mov	r3, r9
 801c9de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c9e0:	4651      	mov	r1, sl
 801c9e2:	4630      	mov	r0, r6
 801c9e4:	f7ff fcb8 	bl	801c358 <lfs_dir_getslice>
        if (err < 0) {
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	db2b      	blt.n	801ca44 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801c9ec:	f1b8 0f00 	cmp.w	r8, #0
 801c9f0:	d027      	beq.n	801ca42 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c9f2:	2f00      	cmp	r7, #0
 801c9f4:	d0cf      	beq.n	801c996 <lfs_dir_getread+0x6e>
 801c9f6:	683b      	ldr	r3, [r7, #0]
 801c9f8:	f113 0f02 	cmn.w	r3, #2
 801c9fc:	d0ab      	beq.n	801c956 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801c9fe:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801ca00:	6822      	ldr	r2, [r4, #0]
 801ca02:	f112 0f02 	cmn.w	r2, #2
 801ca06:	d1ca      	bne.n	801c99e <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801ca08:	6862      	ldr	r2, [r4, #4]
 801ca0a:	68a1      	ldr	r1, [r4, #8]
 801ca0c:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801ca0e:	42a8      	cmp	r0, r5
 801ca10:	d9c5      	bls.n	801c99e <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801ca12:	42aa      	cmp	r2, r5
 801ca14:	d8c3      	bhi.n	801c99e <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801ca16:	1b50      	subs	r0, r2, r5
 801ca18:	4401      	add	r1, r0
 801ca1a:	4608      	mov	r0, r1
 801ca1c:	4299      	cmp	r1, r3
 801ca1e:	bf28      	it	cs
 801ca20:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801ca22:	68e3      	ldr	r3, [r4, #12]
 801ca24:	1aa9      	subs	r1, r5, r2
 801ca26:	9005      	str	r0, [sp, #20]
 801ca28:	4602      	mov	r2, r0
 801ca2a:	4419      	add	r1, r3
 801ca2c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ca2e:	f012 fcd5 	bl	802f3dc <memcpy>
                data += diff;
 801ca32:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801ca34:	9b05      	ldr	r3, [sp, #20]
 801ca36:	4419      	add	r1, r3
 801ca38:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801ca3a:	441d      	add	r5, r3
                size -= diff;
 801ca3c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801ca40:	e7d4      	b.n	801c9ec <lfs_dir_getread+0xc4>
    return 0;
 801ca42:	2000      	movs	r0, #0
}
 801ca44:	b007      	add	sp, #28
 801ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca4a <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801ca4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca4e:	b089      	sub	sp, #36	@ 0x24
 801ca50:	4682      	mov	sl, r0
 801ca52:	4689      	mov	r9, r1
 801ca54:	9205      	str	r2, [sp, #20]
 801ca56:	461f      	mov	r7, r3
 801ca58:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801ca5c:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801ca60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801ca62:	2400      	movs	r4, #0
 801ca64:	e002      	b.n	801ca6c <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801ca66:	2301      	movs	r3, #1
 801ca68:	e023      	b.n	801cab2 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801ca6a:	442c      	add	r4, r5
 801ca6c:	42b4      	cmp	r4, r6
 801ca6e:	d21f      	bcs.n	801cab0 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801ca70:	1b35      	subs	r5, r6, r4
 801ca72:	2d08      	cmp	r5, #8
 801ca74:	bf28      	it	cs
 801ca76:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801ca78:	9503      	str	r5, [sp, #12]
 801ca7a:	ab06      	add	r3, sp, #24
 801ca7c:	9302      	str	r3, [sp, #8]
 801ca7e:	eb04 0308 	add.w	r3, r4, r8
 801ca82:	9301      	str	r3, [sp, #4]
 801ca84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ca86:	9300      	str	r3, [sp, #0]
 801ca88:	1b3b      	subs	r3, r7, r4
 801ca8a:	9a05      	ldr	r2, [sp, #20]
 801ca8c:	4649      	mov	r1, r9
 801ca8e:	4650      	mov	r0, sl
 801ca90:	f7ff fb72 	bl	801c178 <lfs_bd_read>
        if (err) {
 801ca94:	4603      	mov	r3, r0
 801ca96:	b960      	cbnz	r0, 801cab2 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801ca98:	462a      	mov	r2, r5
 801ca9a:	eb0b 0104 	add.w	r1, fp, r4
 801ca9e:	a806      	add	r0, sp, #24
 801caa0:	f010 fea2 	bl	802d7e8 <memcmp>
        if (res) {
 801caa4:	2800      	cmp	r0, #0
 801caa6:	d0e0      	beq.n	801ca6a <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801caa8:	2800      	cmp	r0, #0
 801caaa:	dbdc      	blt.n	801ca66 <lfs_bd_cmp+0x1c>
 801caac:	2302      	movs	r3, #2
 801caae:	e000      	b.n	801cab2 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801cab0:	2300      	movs	r3, #0
}
 801cab2:	4618      	mov	r0, r3
 801cab4:	b009      	add	sp, #36	@ 0x24
 801cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cabc <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801cabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cac0:	b085      	sub	sp, #20
 801cac2:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801cac4:	6809      	ldr	r1, [r1, #0]
 801cac6:	f111 0f03 	cmn.w	r1, #3
 801caca:	d83f      	bhi.n	801cb4c <lfs_bd_flush+0x90>
 801cacc:	4607      	mov	r7, r0
 801cace:	4691      	mov	r9, r2
 801cad0:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801cad2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801cad4:	4299      	cmp	r1, r3
 801cad6:	d22d      	bcs.n	801cb34 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801cad8:	68a5      	ldr	r5, [r4, #8]
 801cada:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801cadc:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801cade:	4415      	add	r5, r2
 801cae0:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801cae2:	fbb5 f3f2 	udiv	r3, r5, r2
 801cae6:	fb02 5313 	mls	r3, r2, r3, r5
 801caea:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801caec:	6885      	ldr	r5, [r0, #8]
 801caee:	9600      	str	r6, [sp, #0]
 801caf0:	68e3      	ldr	r3, [r4, #12]
 801caf2:	6862      	ldr	r2, [r4, #4]
 801caf4:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801caf6:	1e05      	subs	r5, r0, #0
 801caf8:	dc22      	bgt.n	801cb40 <lfs_bd_flush+0x84>
        if (err) {
 801cafa:	bb45      	cbnz	r5, 801cb4e <lfs_bd_flush+0x92>
        if (validate) {
 801cafc:	f1b8 0f00 	cmp.w	r8, #0
 801cb00:	d013      	beq.n	801cb2a <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801cb02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb06:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801cb0a:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801cb0c:	9603      	str	r6, [sp, #12]
 801cb0e:	9302      	str	r3, [sp, #8]
 801cb10:	6863      	ldr	r3, [r4, #4]
 801cb12:	9301      	str	r3, [sp, #4]
 801cb14:	6823      	ldr	r3, [r4, #0]
 801cb16:	9300      	str	r3, [sp, #0]
 801cb18:	4633      	mov	r3, r6
 801cb1a:	464a      	mov	r2, r9
 801cb1c:	2100      	movs	r1, #0
 801cb1e:	4638      	mov	r0, r7
 801cb20:	f7ff ff93 	bl	801ca4a <lfs_bd_cmp>
            if (res < 0) {
 801cb24:	2800      	cmp	r0, #0
 801cb26:	db16      	blt.n	801cb56 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801cb28:	b9b8      	cbnz	r0, 801cb5a <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801cb2a:	4621      	mov	r1, r4
 801cb2c:	4638      	mov	r0, r7
 801cb2e:	f7ff faf9 	bl	801c124 <lfs_cache_zero>
 801cb32:	e00c      	b.n	801cb4e <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801cb34:	4b0a      	ldr	r3, [pc, #40]	@ (801cb60 <lfs_bd_flush+0xa4>)
 801cb36:	4a0b      	ldr	r2, [pc, #44]	@ (801cb64 <lfs_bd_flush+0xa8>)
 801cb38:	21b3      	movs	r1, #179	@ 0xb3
 801cb3a:	480b      	ldr	r0, [pc, #44]	@ (801cb68 <lfs_bd_flush+0xac>)
 801cb3c:	f00e f996 	bl	802ae6c <__assert_func>
        LFS_ASSERT(err <= 0);
 801cb40:	4b0a      	ldr	r3, [pc, #40]	@ (801cb6c <lfs_bd_flush+0xb0>)
 801cb42:	4a08      	ldr	r2, [pc, #32]	@ (801cb64 <lfs_bd_flush+0xa8>)
 801cb44:	21b7      	movs	r1, #183	@ 0xb7
 801cb46:	4808      	ldr	r0, [pc, #32]	@ (801cb68 <lfs_bd_flush+0xac>)
 801cb48:	f00e f990 	bl	802ae6c <__assert_func>
    return 0;
 801cb4c:	2500      	movs	r5, #0
}
 801cb4e:	4628      	mov	r0, r5
 801cb50:	b005      	add	sp, #20
 801cb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801cb56:	4605      	mov	r5, r0
 801cb58:	e7f9      	b.n	801cb4e <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801cb5a:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801cb5e:	e7f6      	b.n	801cb4e <lfs_bd_flush+0x92>
 801cb60:	0803a818 	.word	0x0803a818
 801cb64:	0803b464 	.word	0x0803b464
 801cb68:	0803a734 	.word	0x0803a734
 801cb6c:	0803a764 	.word	0x0803a764

0801cb70 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb74:	b083      	sub	sp, #12
 801cb76:	4607      	mov	r7, r0
 801cb78:	460c      	mov	r4, r1
 801cb7a:	9201      	str	r2, [sp, #4]
 801cb7c:	469b      	mov	fp, r3
 801cb7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cb80:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801cb82:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801cb86:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801cb8a:	f116 0f02 	cmn.w	r6, #2
 801cb8e:	d002      	beq.n	801cb96 <lfs_bd_prog+0x26>
 801cb90:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801cb92:	42b3      	cmp	r3, r6
 801cb94:	d90b      	bls.n	801cbae <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801cb96:	eb05 0308 	add.w	r3, r5, r8
 801cb9a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cb9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801cb9e:	4293      	cmp	r3, r2
 801cba0:	d919      	bls.n	801cbd6 <lfs_bd_prog+0x66>
 801cba2:	4b2b      	ldr	r3, [pc, #172]	@ (801cc50 <lfs_bd_prog+0xe0>)
 801cba4:	4a2b      	ldr	r2, [pc, #172]	@ (801cc54 <lfs_bd_prog+0xe4>)
 801cba6:	21e9      	movs	r1, #233	@ 0xe9
 801cba8:	482b      	ldr	r0, [pc, #172]	@ (801cc58 <lfs_bd_prog+0xe8>)
 801cbaa:	f00e f95f 	bl	802ae6c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801cbae:	4b2b      	ldr	r3, [pc, #172]	@ (801cc5c <lfs_bd_prog+0xec>)
 801cbb0:	4a28      	ldr	r2, [pc, #160]	@ (801cc54 <lfs_bd_prog+0xe4>)
 801cbb2:	21e8      	movs	r1, #232	@ 0xe8
 801cbb4:	4828      	ldr	r0, [pc, #160]	@ (801cc58 <lfs_bd_prog+0xe8>)
 801cbb6:	f00e f959 	bl	802ae6c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801cbba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cbbe:	d13c      	bne.n	801cc3a <lfs_bd_prog+0xca>
        pcache->block = block;
 801cbc0:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801cbc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbc4:	6a1a      	ldr	r2, [r3, #32]
 801cbc6:	fbb5 f3f2 	udiv	r3, r5, r2
 801cbca:	fb02 5313 	mls	r3, r2, r3, r5
 801cbce:	1aeb      	subs	r3, r5, r3
 801cbd0:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801cbd6:	f1b8 0f00 	cmp.w	r8, #0
 801cbda:	d035      	beq.n	801cc48 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801cbdc:	6823      	ldr	r3, [r4, #0]
 801cbde:	42b3      	cmp	r3, r6
 801cbe0:	d1eb      	bne.n	801cbba <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801cbe2:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801cbe4:	42aa      	cmp	r2, r5
 801cbe6:	d8e8      	bhi.n	801cbba <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801cbe8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801cbea:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801cbec:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801cbee:	42a8      	cmp	r0, r5
 801cbf0:	d9e3      	bls.n	801cbba <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801cbf2:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801cbf4:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801cbf8:	45c1      	cmp	r9, r8
 801cbfa:	bf28      	it	cs
 801cbfc:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801cbfe:	68e3      	ldr	r3, [r4, #12]
 801cc00:	1aa8      	subs	r0, r5, r2
 801cc02:	464a      	mov	r2, r9
 801cc04:	4651      	mov	r1, sl
 801cc06:	4418      	add	r0, r3
 801cc08:	f012 fbe8 	bl	802f3dc <memcpy>
            data += diff;
 801cc0c:	44ca      	add	sl, r9
            off += diff;
 801cc0e:	444d      	add	r5, r9
            size -= diff;
 801cc10:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801cc14:	68a2      	ldr	r2, [r4, #8]
 801cc16:	6863      	ldr	r3, [r4, #4]
 801cc18:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801cc1a:	4293      	cmp	r3, r2
 801cc1c:	bf38      	it	cc
 801cc1e:	4613      	movcc	r3, r2
 801cc20:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801cc22:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cc24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d1d5      	bne.n	801cbd6 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801cc2a:	465b      	mov	r3, fp
 801cc2c:	9a01      	ldr	r2, [sp, #4]
 801cc2e:	4621      	mov	r1, r4
 801cc30:	4638      	mov	r0, r7
 801cc32:	f7ff ff43 	bl	801cabc <lfs_bd_flush>
                if (err) {
 801cc36:	b940      	cbnz	r0, 801cc4a <lfs_bd_prog+0xda>
 801cc38:	e7cd      	b.n	801cbd6 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801cc3a:	4b09      	ldr	r3, [pc, #36]	@ (801cc60 <lfs_bd_prog+0xf0>)
 801cc3c:	4a05      	ldr	r2, [pc, #20]	@ (801cc54 <lfs_bd_prog+0xe4>)
 801cc3e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801cc42:	4805      	ldr	r0, [pc, #20]	@ (801cc58 <lfs_bd_prog+0xe8>)
 801cc44:	f00e f912 	bl	802ae6c <__assert_func>
    return 0;
 801cc48:	2000      	movs	r0, #0
}
 801cc4a:	b003      	add	sp, #12
 801cc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc50:	0803a874 	.word	0x0803a874
 801cc54:	0803b474 	.word	0x0803b474
 801cc58:	0803a734 	.word	0x0803a734
 801cc5c:	0803a83c 	.word	0x0803a83c
 801cc60:	0803a898 	.word	0x0803a898

0801cc64 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801cc64:	b538      	push	{r3, r4, r5, lr}
 801cc66:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801cc68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801cc6c:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801cc6e:	f7ff ff25 	bl	801cabc <lfs_bd_flush>
    if (err) {
 801cc72:	4603      	mov	r3, r0
 801cc74:	b920      	cbnz	r0, 801cc80 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801cc76:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801cc78:	6903      	ldr	r3, [r0, #16]
 801cc7a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801cc7c:	1e03      	subs	r3, r0, #0
 801cc7e:	dc01      	bgt.n	801cc84 <lfs_bd_sync+0x20>
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801cc84:	4b02      	ldr	r3, [pc, #8]	@ (801cc90 <lfs_bd_sync+0x2c>)
 801cc86:	4a03      	ldr	r2, [pc, #12]	@ (801cc94 <lfs_bd_sync+0x30>)
 801cc88:	21dd      	movs	r1, #221	@ 0xdd
 801cc8a:	4803      	ldr	r0, [pc, #12]	@ (801cc98 <lfs_bd_sync+0x34>)
 801cc8c:	f00e f8ee 	bl	802ae6c <__assert_func>
 801cc90:	0803a764 	.word	0x0803a764
 801cc94:	0803b414 	.word	0x0803b414
 801cc98:	0803a734 	.word	0x0803a734

0801cc9c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801cc9c:	b570      	push	{r4, r5, r6, lr}
 801cc9e:	b084      	sub	sp, #16
 801cca0:	4604      	mov	r4, r0
 801cca2:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801cca4:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801cca6:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801cca8:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801ccac:	42ab      	cmp	r3, r5
 801ccae:	bf28      	it	cs
 801ccb0:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801ccb2:	6812      	ldr	r2, [r2, #0]
 801ccb4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801ccb8:	9303      	str	r3, [sp, #12]
 801ccba:	6866      	ldr	r6, [r4, #4]
 801ccbc:	9602      	str	r6, [sp, #8]
 801ccbe:	9101      	str	r1, [sp, #4]
 801ccc0:	9200      	str	r2, [sp, #0]
 801ccc2:	4602      	mov	r2, r0
 801ccc4:	2100      	movs	r1, #0
 801ccc6:	f7ff fec0 	bl	801ca4a <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801ccca:	b920      	cbnz	r0, 801ccd6 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801cccc:	68a3      	ldr	r3, [r4, #8]
 801ccce:	42ab      	cmp	r3, r5
 801ccd0:	d001      	beq.n	801ccd6 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801ccd2:	d202      	bcs.n	801ccda <lfs_dir_find_match+0x3e>
 801ccd4:	2001      	movs	r0, #1
}
 801ccd6:	b004      	add	sp, #16
 801ccd8:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801ccda:	2002      	movs	r0, #2
 801ccdc:	e7fb      	b.n	801ccd6 <lfs_dir_find_match+0x3a>

0801ccde <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801ccde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cce2:	b089      	sub	sp, #36	@ 0x24
 801cce4:	9305      	str	r3, [sp, #20]
 801cce6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801cce8:	b953      	cbnz	r3, 801cd00 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801ccea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ccee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ccf0:	6013      	str	r3, [r2, #0]
        *off = 0;
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ccf6:	6013      	str	r3, [r2, #0]
}
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	b009      	add	sp, #36	@ 0x24
 801ccfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd00:	4607      	mov	r7, r0
 801cd02:	4688      	mov	r8, r1
 801cd04:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801cd06:	3b01      	subs	r3, #1
 801cd08:	9307      	str	r3, [sp, #28]
 801cd0a:	a907      	add	r1, sp, #28
 801cd0c:	f7ff fa16 	bl	801c13c <lfs_ctz_index>
 801cd10:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801cd12:	a911      	add	r1, sp, #68	@ 0x44
 801cd14:	4638      	mov	r0, r7
 801cd16:	f7ff fa11 	bl	801c13c <lfs_ctz_index>
 801cd1a:	4606      	mov	r6, r0
    while (current > target) {
 801cd1c:	42b5      	cmp	r5, r6
 801cd1e:	d91f      	bls.n	801cd60 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801cd20:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801cd22:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801cd26:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801cd2a:	fa95 f3a5 	rbit	r3, r5
 801cd2e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801cd32:	429c      	cmp	r4, r3
 801cd34:	bf28      	it	cs
 801cd36:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801cd38:	2304      	movs	r3, #4
 801cd3a:	9303      	str	r3, [sp, #12]
 801cd3c:	aa05      	add	r2, sp, #20
 801cd3e:	9202      	str	r2, [sp, #8]
 801cd40:	00a2      	lsls	r2, r4, #2
 801cd42:	9201      	str	r2, [sp, #4]
 801cd44:	9a05      	ldr	r2, [sp, #20]
 801cd46:	9200      	str	r2, [sp, #0]
 801cd48:	464a      	mov	r2, r9
 801cd4a:	4641      	mov	r1, r8
 801cd4c:	4638      	mov	r0, r7
 801cd4e:	f7ff fa13 	bl	801c178 <lfs_bd_read>
        if (err) {
 801cd52:	4603      	mov	r3, r0
 801cd54:	2800      	cmp	r0, #0
 801cd56:	d1cf      	bne.n	801ccf8 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801cd58:	2301      	movs	r3, #1
 801cd5a:	40a3      	lsls	r3, r4
 801cd5c:	1aed      	subs	r5, r5, r3
 801cd5e:	e7dd      	b.n	801cd1c <lfs_ctz_find+0x3e>
    *block = head;
 801cd60:	9b05      	ldr	r3, [sp, #20]
 801cd62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cd64:	6013      	str	r3, [r2, #0]
    *off = pos;
 801cd66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd6a:	6013      	str	r3, [r2, #0]
    return 0;
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	e7c3      	b.n	801ccf8 <lfs_ctz_find+0x1a>

0801cd70 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801cd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd74:	b087      	sub	sp, #28
 801cd76:	460c      	mov	r4, r1
 801cd78:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801cd7a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801cd7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cd7e:	4291      	cmp	r1, r2
 801cd80:	d272      	bcs.n	801ce68 <lfs_file_flushedread+0xf8>
 801cd82:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801cd84:	eba2 0901 	sub.w	r9, r2, r1
 801cd88:	4599      	cmp	r9, r3
 801cd8a:	bf28      	it	cs
 801cd8c:	4699      	movcs	r9, r3
    nsize = size;
 801cd8e:	464e      	mov	r6, r9
    while (nsize > 0) {
 801cd90:	e037      	b.n	801ce02 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801cd92:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd96:	d041      	beq.n	801ce1c <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801cd98:	f06f 0301 	mvn.w	r3, #1
 801cd9c:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801cd9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cda0:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801cda2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cda4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cda8:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801cdaa:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801cdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cdb0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801cdb2:	1a9d      	subs	r5, r3, r2
 801cdb4:	42b5      	cmp	r5, r6
 801cdb6:	bf28      	it	cs
 801cdb8:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801cdba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cdbc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801cdc0:	d041      	beq.n	801ce46 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801cdc2:	88a1      	ldrh	r1, [r4, #4]
 801cdc4:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801cdc6:	9505      	str	r5, [sp, #20]
 801cdc8:	9704      	str	r7, [sp, #16]
 801cdca:	9203      	str	r2, [sp, #12]
 801cdcc:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801cdd0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801cdd4:	9102      	str	r1, [sp, #8]
 801cdd6:	4a27      	ldr	r2, [pc, #156]	@ (801ce74 <lfs_file_flushedread+0x104>)
 801cdd8:	9201      	str	r2, [sp, #4]
 801cdda:	9300      	str	r3, [sp, #0]
 801cddc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801cde0:	2200      	movs	r2, #0
 801cde2:	f104 0108 	add.w	r1, r4, #8
 801cde6:	4640      	mov	r0, r8
 801cde8:	f7ff fd9e 	bl	801c928 <lfs_dir_getread>
            if (err) {
 801cdec:	4603      	mov	r3, r0
 801cdee:	2800      	cmp	r0, #0
 801cdf0:	d13b      	bne.n	801ce6a <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801cdf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cdf4:	442b      	add	r3, r5
 801cdf6:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801cdf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cdfa:	442b      	add	r3, r5
 801cdfc:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801cdfe:	442f      	add	r7, r5
        nsize -= diff;
 801ce00:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801ce02:	2e00      	cmp	r6, #0
 801ce04:	d02e      	beq.n	801ce64 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801ce06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce08:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801ce0c:	d0c1      	beq.n	801cd92 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801ce0e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801ce10:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801ce14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801ce16:	4291      	cmp	r1, r2
 801ce18:	d1c7      	bne.n	801cdaa <lfs_file_flushedread+0x3a>
 801ce1a:	e7ba      	b.n	801cd92 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801ce1c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801ce20:	9303      	str	r3, [sp, #12]
 801ce22:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801ce26:	9302      	str	r3, [sp, #8]
 801ce28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ce2a:	9301      	str	r3, [sp, #4]
 801ce2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801ce2e:	9300      	str	r3, [sp, #0]
 801ce30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ce32:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801ce36:	2100      	movs	r1, #0
 801ce38:	4640      	mov	r0, r8
 801ce3a:	f7ff ff50 	bl	801ccde <lfs_ctz_find>
                if (err) {
 801ce3e:	4603      	mov	r3, r0
 801ce40:	2800      	cmp	r0, #0
 801ce42:	d0ae      	beq.n	801cda2 <lfs_file_flushedread+0x32>
 801ce44:	e011      	b.n	801ce6a <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801ce46:	9503      	str	r5, [sp, #12]
 801ce48:	9702      	str	r7, [sp, #8]
 801ce4a:	9201      	str	r2, [sp, #4]
 801ce4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801ce4e:	9200      	str	r2, [sp, #0]
 801ce50:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801ce54:	2100      	movs	r1, #0
 801ce56:	4640      	mov	r0, r8
 801ce58:	f7ff f98e 	bl	801c178 <lfs_bd_read>
            if (err) {
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	2800      	cmp	r0, #0
 801ce60:	d0c7      	beq.n	801cdf2 <lfs_file_flushedread+0x82>
 801ce62:	e002      	b.n	801ce6a <lfs_file_flushedread+0xfa>
    return size;
 801ce64:	464b      	mov	r3, r9
 801ce66:	e000      	b.n	801ce6a <lfs_file_flushedread+0xfa>
        return 0;
 801ce68:	2300      	movs	r3, #0
}
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	b007      	add	sp, #28
 801ce6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce72:	bf00      	nop
 801ce74:	fff7fc00 	.word	0xfff7fc00

0801ce78 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce7c:	b089      	sub	sp, #36	@ 0x24
 801ce7e:	4683      	mov	fp, r0
 801ce80:	468a      	mov	sl, r1
 801ce82:	9205      	str	r2, [sp, #20]
 801ce84:	4698      	mov	r8, r3
 801ce86:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801ce8a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ce8c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801ce8e:	2400      	movs	r4, #0
 801ce90:	e006      	b.n	801cea0 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801ce92:	462a      	mov	r2, r5
 801ce94:	a906      	add	r1, sp, #24
 801ce96:	6838      	ldr	r0, [r7, #0]
 801ce98:	f003 fd82 	bl	80209a0 <lfs_crc>
 801ce9c:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801ce9e:	442c      	add	r4, r5
 801cea0:	42b4      	cmp	r4, r6
 801cea2:	d216      	bcs.n	801ced2 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801cea4:	1b35      	subs	r5, r6, r4
 801cea6:	2d08      	cmp	r5, #8
 801cea8:	bf28      	it	cs
 801ceaa:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801ceac:	9503      	str	r5, [sp, #12]
 801ceae:	ab06      	add	r3, sp, #24
 801ceb0:	9302      	str	r3, [sp, #8]
 801ceb2:	eb04 0309 	add.w	r3, r4, r9
 801ceb6:	9301      	str	r3, [sp, #4]
 801ceb8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ceba:	9300      	str	r3, [sp, #0]
 801cebc:	eba8 0304 	sub.w	r3, r8, r4
 801cec0:	9a05      	ldr	r2, [sp, #20]
 801cec2:	4651      	mov	r1, sl
 801cec4:	4658      	mov	r0, fp
 801cec6:	f7ff f957 	bl	801c178 <lfs_bd_read>
        if (err) {
 801ceca:	4603      	mov	r3, r0
 801cecc:	2800      	cmp	r0, #0
 801cece:	d0e0      	beq.n	801ce92 <lfs_bd_crc+0x1a>
 801ced0:	e000      	b.n	801ced4 <lfs_bd_crc+0x5c>
    return 0;
 801ced2:	2300      	movs	r3, #0
}
 801ced4:	4618      	mov	r0, r3
 801ced6:	b009      	add	sp, #36	@ 0x24
 801ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cedc <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee0:	b097      	sub	sp, #92	@ 0x5c
 801cee2:	4605      	mov	r5, r0
 801cee4:	460e      	mov	r6, r1
 801cee6:	4617      	mov	r7, r2
 801cee8:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801ceea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ceec:	b13b      	cbz	r3, 801cefe <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801ceee:	6812      	ldr	r2, [r2, #0]
 801cef0:	4293      	cmp	r3, r2
 801cef2:	f240 825a 	bls.w	801d3aa <lfs_dir_fetchmatch+0x4ce>
 801cef6:	687a      	ldr	r2, [r7, #4]
 801cef8:	4293      	cmp	r3, r2
 801cefa:	f240 8259 	bls.w	801d3b0 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801cefe:	2400      	movs	r4, #0
 801cf00:	9412      	str	r4, [sp, #72]	@ 0x48
 801cf02:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801cf04:	46a0      	mov	r8, r4
 801cf06:	e010      	b.n	801cf2a <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801cf08:	f118 0301 	adds.w	r3, r8, #1
 801cf0c:	f003 0301 	and.w	r3, r3, #1
 801cf10:	bf48      	it	mi
 801cf12:	425b      	negmi	r3, r3
 801cf14:	a916      	add	r1, sp, #88	@ 0x58
 801cf16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cf1a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801cf1e:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801cf20:	2a00      	cmp	r2, #0
 801cf22:	dd00      	ble.n	801cf26 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801cf24:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801cf26:	f108 0801 	add.w	r8, r8, #1
 801cf2a:	f1b8 0f01 	cmp.w	r8, #1
 801cf2e:	dc1d      	bgt.n	801cf6c <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801cf30:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801cf34:	ab12      	add	r3, sp, #72	@ 0x48
 801cf36:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801cf3a:	2304      	movs	r3, #4
 801cf3c:	9303      	str	r3, [sp, #12]
 801cf3e:	9202      	str	r2, [sp, #8]
 801cf40:	2100      	movs	r1, #0
 801cf42:	9101      	str	r1, [sp, #4]
 801cf44:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801cf48:	9200      	str	r2, [sp, #0]
 801cf4a:	462a      	mov	r2, r5
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	f7ff f913 	bl	801c178 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801cf52:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801cf56:	eb0d 0903 	add.w	r9, sp, r3
 801cf5a:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801cf5e:	4683      	mov	fp, r0
 801cf60:	2800      	cmp	r0, #0
 801cf62:	d0d1      	beq.n	801cf08 <lfs_dir_fetchmatch+0x2c>
 801cf64:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf68:	d0dd      	beq.n	801cf26 <lfs_dir_fetchmatch+0x4a>
 801cf6a:	e21a      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801cf6c:	2c00      	cmp	r4, #0
 801cf6e:	f004 0301 	and.w	r3, r4, #1
 801cf72:	bfb8      	it	lt
 801cf74:	425b      	neglt	r3, r3
 801cf76:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801cf7a:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801cf7c:	f114 0c01 	adds.w	ip, r4, #1
 801cf80:	f00c 0c01 	and.w	ip, ip, #1
 801cf84:	bf48      	it	mi
 801cf86:	f1cc 0c00 	rsbmi	ip, ip, #0
 801cf8a:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801cf8e:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801cf90:	aa16      	add	r2, sp, #88	@ 0x58
 801cf92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cf96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801cf9a:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801cf9c:	2400      	movs	r4, #0
 801cf9e:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801cfa0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801cfa4:	f8cd c01c 	str.w	ip, [sp, #28]
 801cfa8:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801cfaa:	f1b9 0f01 	cmp.w	r9, #1
 801cfae:	f300 81eb 	bgt.w	801d388 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cfb2:	4a90      	ldr	r2, [pc, #576]	@ (801d1f4 <lfs_dir_fetchmatch+0x318>)
 801cfb4:	ab0e      	add	r3, sp, #56	@ 0x38
 801cfb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cfba:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801cfbe:	2204      	movs	r2, #4
 801cfc0:	f106 0108 	add.w	r1, r6, #8
 801cfc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cfc8:	f003 fcea 	bl	80209a0 <lfs_crc>
 801cfcc:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801cfce:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	461c      	mov	r4, r3
 801cfd6:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801cfd8:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801cfda:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801cfde:	461f      	mov	r7, r3
 801cfe0:	e110      	b.n	801d204 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801cfe2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cfe6:	d101      	bne.n	801cfec <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801cfe8:	2300      	movs	r3, #0
 801cfea:	e01e      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
                return err;
 801cfec:	4683      	mov	fp, r0
 801cfee:	e1d8      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801cff0:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801cff4:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801cff8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801cffc:	bf14      	ite	ne
 801cffe:	2300      	movne	r3, #0
 801d000:	2301      	moveq	r3, #1
                break;
 801d002:	e012      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801d004:	2204      	movs	r2, #4
 801d006:	9203      	str	r2, [sp, #12]
 801d008:	aa0d      	add	r2, sp, #52	@ 0x34
 801d00a:	9202      	str	r2, [sp, #8]
 801d00c:	1d22      	adds	r2, r4, #4
 801d00e:	9201      	str	r2, [sp, #4]
 801d010:	6832      	ldr	r2, [r6, #0]
 801d012:	9200      	str	r2, [sp, #0]
 801d014:	462a      	mov	r2, r5
 801d016:	2100      	movs	r1, #0
 801d018:	4628      	mov	r0, r5
 801d01a:	f7ff f8ad 	bl	801c178 <lfs_bd_read>
                if (err) {
 801d01e:	bb80      	cbnz	r0, 801d082 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801d020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d022:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d024:	429a      	cmp	r2, r3
 801d026:	d031      	beq.n	801d08c <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801d028:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801d02a:	68f2      	ldr	r2, [r6, #12]
 801d02c:	2a00      	cmp	r2, #0
 801d02e:	f000 8165 	beq.w	801d2fc <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801d032:	2100      	movs	r1, #0
 801d034:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801d036:	b153      	cbz	r3, 801d04e <lfs_dir_fetchmatch+0x172>
 801d038:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801d03a:	6a01      	ldr	r1, [r0, #32]
 801d03c:	fbb2 f3f1 	udiv	r3, r2, r1
 801d040:	fb01 2313 	mls	r3, r1, r3, r2
 801d044:	b91b      	cbnz	r3, 801d04e <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801d046:	9b08      	ldr	r3, [sp, #32]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	f040 8165 	bne.w	801d318 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801d04e:	4631      	mov	r1, r6
 801d050:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801d054:	f7fe ff00 	bl	801be58 <lfs_gstate_hasmovehere>
 801d058:	2800      	cmp	r0, #0
 801d05a:	f000 817d 	beq.w	801d358 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801d05e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801d060:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801d064:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801d068:	429a      	cmp	r2, r3
 801d06a:	f000 8173 	beq.w	801d354 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801d06e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801d072:	f000 8171 	beq.w	801d358 <lfs_dir_fetchmatch+0x47c>
 801d076:	429a      	cmp	r2, r3
 801d078:	f240 816e 	bls.w	801d358 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801d07c:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801d080:	e16a      	b.n	801d358 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801d082:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d086:	d0cf      	beq.n	801d028 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801d088:	4683      	mov	fp, r0
 801d08a:	e18a      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801d08c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d08e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801d092:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801d096:	2204      	movs	r2, #4
 801d098:	a90b      	add	r1, sp, #44	@ 0x2c
 801d09a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801d09c:	f003 fc80 	bl	80209a0 <lfs_crc>
 801d0a0:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801d0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d0a4:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0a8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d0ac:	bf08      	it	eq
 801d0ae:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801d0b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0b4:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801d0b6:	4423      	add	r3, r4
 801d0b8:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801d0ba:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801d0be:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801d0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0c2:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801d0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0c6:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801d0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0ca:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801d0cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801d0d2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d0d6:	e095      	b.n	801d204 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801d0d8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d0dc:	d101      	bne.n	801d0e2 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	e7a3      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
                return err;
 801d0e2:	4683      	mov	fp, r0
 801d0e4:	e15d      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801d0e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d0ea:	d021      	beq.n	801d130 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801d0ec:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d0f0:	d046      	beq.n	801d180 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801d0f2:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801d0f6:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801d0fa:	429a      	cmp	r2, r3
 801d0fc:	f040 80e3 	bne.w	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801d100:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801d104:	2208      	movs	r2, #8
 801d106:	9203      	str	r2, [sp, #12]
 801d108:	aa10      	add	r2, sp, #64	@ 0x40
 801d10a:	9202      	str	r2, [sp, #8]
 801d10c:	f8cd 8004 	str.w	r8, [sp, #4]
 801d110:	6832      	ldr	r2, [r6, #0]
 801d112:	9200      	str	r2, [sp, #0]
 801d114:	462a      	mov	r2, r5
 801d116:	2100      	movs	r1, #0
 801d118:	4628      	mov	r0, r5
 801d11a:	f7ff f82d 	bl	801c178 <lfs_bd_read>
                if (err) {
 801d11e:	2800      	cmp	r0, #0
 801d120:	d04a      	beq.n	801d1b8 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801d122:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d126:	f000 80e7 	beq.w	801d2f8 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801d12a:	2301      	movs	r3, #1
 801d12c:	9308      	str	r3, [sp, #32]
 801d12e:	e0ca      	b.n	801d2c6 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801d130:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801d132:	fa17 f280 	uxtah	r2, r7, r0
 801d136:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801d138:	9a06      	ldr	r2, [sp, #24]
 801d13a:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801d13c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801d140:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801d144:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801d148:	f022 0203 	bic.w	r2, r2, #3
 801d14c:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801d150:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801d154:	4293      	cmp	r3, r2
 801d156:	d00f      	beq.n	801d178 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801d158:	9a06      	ldr	r2, [sp, #24]
 801d15a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d15e:	f000 80b2 	beq.w	801d2c6 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801d162:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801d166:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801d16a:	429a      	cmp	r2, r3
 801d16c:	f0c0 80ab 	bcc.w	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801d170:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801d174:	9306      	str	r3, [sp, #24]
 801d176:	e0a6      	b.n	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801d178:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801d17c:	9306      	str	r3, [sp, #24]
 801d17e:	e0a2      	b.n	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801d180:	f000 0301 	and.w	r3, r0, #1
 801d184:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801d186:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801d18a:	2208      	movs	r2, #8
 801d18c:	9203      	str	r2, [sp, #12]
 801d18e:	aa0e      	add	r2, sp, #56	@ 0x38
 801d190:	9202      	str	r2, [sp, #8]
 801d192:	f8cd 8004 	str.w	r8, [sp, #4]
 801d196:	6832      	ldr	r2, [r6, #0]
 801d198:	9200      	str	r2, [sp, #0]
 801d19a:	462a      	mov	r2, r5
 801d19c:	2100      	movs	r1, #0
 801d19e:	4628      	mov	r0, r5
 801d1a0:	f7fe ffea 	bl	801c178 <lfs_bd_read>
                if (err) {
 801d1a4:	2800      	cmp	r0, #0
 801d1a6:	f000 808e 	beq.w	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801d1aa:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1ae:	d101      	bne.n	801d1b4 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	e73a      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
                    return err;
 801d1b4:	4683      	mov	fp, r0
 801d1b6:	e0f4      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	9308      	str	r3, [sp, #32]
 801d1bc:	e083      	b.n	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801d1be:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1c2:	d101      	bne.n	801d1c8 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	e730      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
                    return res;
 801d1c8:	4683      	mov	fp, r0
 801d1ca:	e0ea      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801d1cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d1ce:	9b06      	ldr	r3, [sp, #24]
 801d1d0:	469c      	mov	ip, r3
 801d1d2:	ea82 0103 	eor.w	r1, r2, r3
 801d1d6:	4b08      	ldr	r3, [pc, #32]	@ (801d1f8 <lfs_dir_fetchmatch+0x31c>)
 801d1d8:	400b      	ands	r3, r1
 801d1da:	b17b      	cbz	r3, 801d1fc <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801d1dc:	2802      	cmp	r0, #2
 801d1de:	d110      	bne.n	801d202 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801d1e0:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801d1e4:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801d1e8:	459c      	cmp	ip, r3
 801d1ea:	d30a      	bcc.n	801d202 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801d1ec:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801d1f0:	9306      	str	r3, [sp, #24]
 801d1f2:	e006      	b.n	801d202 <lfs_dir_fetchmatch+0x326>
 801d1f4:	08037164 	.word	0x08037164
 801d1f8:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801d1fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d200:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801d202:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d204:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d208:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d20c:	bf14      	ite	ne
 801d20e:	4643      	movne	r3, r8
 801d210:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801d214:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d218:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801d21a:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801d21c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801d220:	2204      	movs	r2, #4
 801d222:	9203      	str	r2, [sp, #12]
 801d224:	aa0c      	add	r2, sp, #48	@ 0x30
 801d226:	9202      	str	r2, [sp, #8]
 801d228:	9401      	str	r4, [sp, #4]
 801d22a:	6832      	ldr	r2, [r6, #0]
 801d22c:	9200      	str	r2, [sp, #0]
 801d22e:	462a      	mov	r2, r5
 801d230:	2100      	movs	r1, #0
 801d232:	4628      	mov	r0, r5
 801d234:	f7fe ffa0 	bl	801c178 <lfs_bd_read>
            if (err) {
 801d238:	2800      	cmp	r0, #0
 801d23a:	f47f aed2 	bne.w	801cfe2 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801d23e:	2204      	movs	r2, #4
 801d240:	a90c      	add	r1, sp, #48	@ 0x30
 801d242:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d244:	f003 fbac 	bl	80209a0 <lfs_crc>
 801d248:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801d24a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801d24c:	ba1b      	rev	r3, r3
 801d24e:	ea88 0a03 	eor.w	sl, r8, r3
 801d252:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801d256:	f1ba 0f00 	cmp.w	sl, #0
 801d25a:	f6ff aec9 	blt.w	801cff0 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d25e:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d266:	bf14      	ite	ne
 801d268:	4652      	movne	r2, sl
 801d26a:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801d26e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d272:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801d274:	4421      	add	r1, r4
 801d276:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d27a:	4299      	cmp	r1, r3
 801d27c:	d83a      	bhi.n	801d2f4 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801d27e:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801d282:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801d286:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801d28a:	f43f aebb 	beq.w	801d004 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801d28e:	f104 0804 	add.w	r8, r4, #4
 801d292:	a90b      	add	r1, sp, #44	@ 0x2c
 801d294:	9103      	str	r1, [sp, #12]
 801d296:	9202      	str	r2, [sp, #8]
 801d298:	f8cd 8004 	str.w	r8, [sp, #4]
 801d29c:	6832      	ldr	r2, [r6, #0]
 801d29e:	9200      	str	r2, [sp, #0]
 801d2a0:	462a      	mov	r2, r5
 801d2a2:	2100      	movs	r1, #0
 801d2a4:	4628      	mov	r0, r5
 801d2a6:	f7ff fde7 	bl	801ce78 <lfs_bd_crc>
            if (err) {
 801d2aa:	2800      	cmp	r0, #0
 801d2ac:	f47f af14 	bne.w	801d0d8 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801d2b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801d2b2:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801d2b4:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801d2b8:	f47f af15 	bne.w	801d0e6 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801d2bc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801d2c0:	429f      	cmp	r7, r3
 801d2c2:	d800      	bhi.n	801d2c6 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801d2c4:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801d2c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d2c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d2ca:	404b      	eors	r3, r1
 801d2cc:	9a05      	ldr	r2, [sp, #20]
 801d2ce:	4213      	tst	r3, r2
 801d2d0:	d197      	bne.n	801d202 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801d2d2:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801d2d4:	9314      	str	r3, [sp, #80]	@ 0x50
 801d2d6:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801d2da:	aa14      	add	r2, sp, #80	@ 0x50
 801d2dc:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801d2de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d2e0:	4798      	blx	r3
                if (res < 0) {
 801d2e2:	2800      	cmp	r0, #0
 801d2e4:	f6ff af6b 	blt.w	801d1be <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	f47f af6f 	bne.w	801d1cc <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801d2ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2f0:	9306      	str	r3, [sp, #24]
 801d2f2:	e786      	b.n	801d202 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	e698      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	e696      	b.n	801d02a <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801d2fc:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801d2fe:	6872      	ldr	r2, [r6, #4]
 801d300:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801d302:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801d304:	aa16      	add	r2, sp, #88	@ 0x58
 801d306:	9b07      	ldr	r3, [sp, #28]
 801d308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d30c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801d310:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801d312:	f109 0901 	add.w	r9, r9, #1
 801d316:	e648      	b.n	801cfaa <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801d318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d31c:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801d31e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801d320:	a90d      	add	r1, sp, #52	@ 0x34
 801d322:	9103      	str	r1, [sp, #12]
 801d324:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d326:	9102      	str	r1, [sp, #8]
 801d328:	9201      	str	r2, [sp, #4]
 801d32a:	6832      	ldr	r2, [r6, #0]
 801d32c:	9200      	str	r2, [sp, #0]
 801d32e:	462a      	mov	r2, r5
 801d330:	2100      	movs	r1, #0
 801d332:	4628      	mov	r0, r5
 801d334:	f7ff fda0 	bl	801ce78 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d338:	b120      	cbz	r0, 801d344 <lfs_dir_fetchmatch+0x468>
 801d33a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d33e:	d001      	beq.n	801d344 <lfs_dir_fetchmatch+0x468>
                    return err;
 801d340:	4683      	mov	fp, r0
 801d342:	e02e      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801d344:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d348:	4293      	cmp	r3, r2
 801d34a:	bf14      	ite	ne
 801d34c:	2300      	movne	r3, #0
 801d34e:	2301      	moveq	r3, #1
 801d350:	75b3      	strb	r3, [r6, #22]
 801d352:	e67c      	b.n	801d04e <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801d354:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801d358:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d35a:	b13b      	cbz	r3, 801d36c <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801d35c:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801d360:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801d362:	4293      	cmp	r3, r2
 801d364:	bf28      	it	cs
 801d366:	4613      	movcs	r3, r2
 801d368:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d36a:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801d36c:	f1bb 0f00 	cmp.w	fp, #0
 801d370:	da17      	bge.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801d372:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801d376:	8ab2      	ldrh	r2, [r6, #20]
 801d378:	429a      	cmp	r2, r3
 801d37a:	d902      	bls.n	801d382 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801d37c:	f06f 0b01 	mvn.w	fp, #1
 801d380:	e00f      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801d382:	f04f 0b00 	mov.w	fp, #0
 801d386:	e00c      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801d388:	4b0b      	ldr	r3, [pc, #44]	@ (801d3b8 <lfs_dir_fetchmatch+0x4dc>)
 801d38a:	9301      	str	r3, [sp, #4]
 801d38c:	6873      	ldr	r3, [r6, #4]
 801d38e:	9300      	str	r3, [sp, #0]
 801d390:	6833      	ldr	r3, [r6, #0]
 801d392:	f240 5259 	movw	r2, #1369	@ 0x559
 801d396:	4909      	ldr	r1, [pc, #36]	@ (801d3bc <lfs_dir_fetchmatch+0x4e0>)
 801d398:	4809      	ldr	r0, [pc, #36]	@ (801d3c0 <lfs_dir_fetchmatch+0x4e4>)
 801d39a:	f00d fd9b 	bl	802aed4 <printf>
    return LFS_ERR_CORRUPT;
 801d39e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801d3a2:	4658      	mov	r0, fp
 801d3a4:	b017      	add	sp, #92	@ 0x5c
 801d3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d3aa:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801d3ae:	e7f8      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
 801d3b0:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801d3b4:	e7f5      	b.n	801d3a2 <lfs_dir_fetchmatch+0x4c6>
 801d3b6:	bf00      	nop
 801d3b8:	080381c0 	.word	0x080381c0
 801d3bc:	0803a734 	.word	0x0803a734
 801d3c0:	0803a8bc 	.word	0x0803a8bc

0801d3c4 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801d3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3c8:	b08a      	sub	sp, #40	@ 0x28
 801d3ca:	4681      	mov	r9, r0
 801d3cc:	4688      	mov	r8, r1
 801d3ce:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801d3d4:	2501      	movs	r5, #1
 801d3d6:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d3d8:	4a29      	ldr	r2, [pc, #164]	@ (801d480 <lfs_fs_parent+0xbc>)
 801d3da:	ab05      	add	r3, sp, #20
 801d3dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d3e0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d3e4:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801d3e6:	e03a      	b.n	801d45e <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801d3e8:	4b26      	ldr	r3, [pc, #152]	@ (801d484 <lfs_fs_parent+0xc0>)
 801d3ea:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801d3ee:	4926      	ldr	r1, [pc, #152]	@ (801d488 <lfs_fs_parent+0xc4>)
 801d3f0:	4826      	ldr	r0, [pc, #152]	@ (801d48c <lfs_fs_parent+0xc8>)
 801d3f2:	f00d fd6f 	bl	802aed4 <printf>
            return LFS_ERR_CORRUPT;
 801d3f6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d3fa:	e03c      	b.n	801d476 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801d3fc:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801d3fe:	69e3      	ldr	r3, [r4, #28]
 801d400:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801d402:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801d406:	2500      	movs	r5, #0
 801d408:	e00d      	b.n	801d426 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d40a:	2301      	movs	r3, #1
 801d40c:	e000      	b.n	801d410 <lfs_fs_parent+0x4c>
 801d40e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801d410:	bb7b      	cbnz	r3, 801d472 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801d412:	f104 0618 	add.w	r6, r4, #24
 801d416:	a905      	add	r1, sp, #20
 801d418:	4630      	mov	r0, r6
 801d41a:	f7fe fce7 	bl	801bdec <lfs_pair_issync>
 801d41e:	2800      	cmp	r0, #0
 801d420:	d1e2      	bne.n	801d3e8 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801d422:	4555      	cmp	r5, sl
 801d424:	d0ea      	beq.n	801d3fc <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801d426:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801d428:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801d42c:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801d430:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801d432:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801d436:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801d438:	ab07      	add	r3, sp, #28
 801d43a:	9303      	str	r3, [sp, #12]
 801d43c:	4b14      	ldr	r3, [pc, #80]	@ (801d490 <lfs_fs_parent+0xcc>)
 801d43e:	9302      	str	r3, [sp, #8]
 801d440:	2300      	movs	r3, #0
 801d442:	9301      	str	r3, [sp, #4]
 801d444:	4b13      	ldr	r3, [pc, #76]	@ (801d494 <lfs_fs_parent+0xd0>)
 801d446:	9300      	str	r3, [sp, #0]
 801d448:	4b13      	ldr	r3, [pc, #76]	@ (801d498 <lfs_fs_parent+0xd4>)
 801d44a:	4632      	mov	r2, r6
 801d44c:	4621      	mov	r1, r4
 801d44e:	4648      	mov	r0, r9
 801d450:	f7ff fd44 	bl	801cedc <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801d454:	4603      	mov	r3, r0
 801d456:	b110      	cbz	r0, 801d45e <lfs_fs_parent+0x9a>
 801d458:	f110 0f02 	cmn.w	r0, #2
 801d45c:	d10b      	bne.n	801d476 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d45e:	69a7      	ldr	r7, [r4, #24]
 801d460:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d464:	d0d3      	beq.n	801d40e <lfs_fs_parent+0x4a>
 801d466:	69e3      	ldr	r3, [r4, #28]
 801d468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d46c:	d0cd      	beq.n	801d40a <lfs_fs_parent+0x46>
 801d46e:	2300      	movs	r3, #0
 801d470:	e7ce      	b.n	801d410 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801d472:	f06f 0301 	mvn.w	r3, #1
}
 801d476:	4618      	mov	r0, r3
 801d478:	b00a      	add	sp, #40	@ 0x28
 801d47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d47e:	bf00      	nop
 801d480:	08037164 	.word	0x08037164
 801d484:	080381c0 	.word	0x080381c0
 801d488:	0803a734 	.word	0x0803a734
 801d48c:	0803a8f4 	.word	0x0803a8f4
 801d490:	0801c5ad 	.word	0x0801c5ad
 801d494:	20000008 	.word	0x20000008
 801d498:	7ff003ff 	.word	0x7ff003ff

0801d49c <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801d49c:	b500      	push	{lr}
 801d49e:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	9303      	str	r3, [sp, #12]
 801d4a4:	9302      	str	r3, [sp, #8]
 801d4a6:	9301      	str	r3, [sp, #4]
 801d4a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d4ac:	9300      	str	r3, [sp, #0]
 801d4ae:	f7ff fd15 	bl	801cedc <lfs_dir_fetchmatch>
}
 801d4b2:	b005      	add	sp, #20
 801d4b4:	f85d fb04 	ldr.w	pc, [sp], #4

0801d4b8 <lfs_fs_traverse_>:
        bool includeorphans) {
 801d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4bc:	b093      	sub	sp, #76	@ 0x4c
 801d4be:	4606      	mov	r6, r0
 801d4c0:	460f      	mov	r7, r1
 801d4c2:	4690      	mov	r8, r2
 801d4c4:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801d4c6:	2220      	movs	r2, #32
 801d4c8:	2100      	movs	r1, #0
 801d4ca:	a80a      	add	r0, sp, #40	@ 0x28
 801d4cc:	f010 fa20 	bl	802d910 <memset>
 801d4d0:	2501      	movs	r5, #1
 801d4d2:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d4d4:	4a62      	ldr	r2, [pc, #392]	@ (801d660 <lfs_fs_traverse_+0x1a8>)
 801d4d6:	ab08      	add	r3, sp, #32
 801d4d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d4dc:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d4e0:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d4e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d4e4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801d4e8:	f000 8081 	beq.w	801d5ee <lfs_fs_traverse_+0x136>
 801d4ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d4f2:	d07a      	beq.n	801d5ea <lfs_fs_traverse_+0x132>
 801d4f4:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d17b      	bne.n	801d5f2 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801d4fa:	a908      	add	r1, sp, #32
 801d4fc:	a810      	add	r0, sp, #64	@ 0x40
 801d4fe:	f7fe fc75 	bl	801bdec <lfs_pair_issync>
 801d502:	b988      	cbnz	r0, 801d528 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801d504:	4555      	cmp	r5, sl
 801d506:	d019      	beq.n	801d53c <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801d508:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801d50a:	2400      	movs	r4, #0
 801d50c:	2c01      	cmp	r4, #1
 801d50e:	dc1c      	bgt.n	801d54a <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801d510:	1da3      	adds	r3, r4, #6
 801d512:	aa12      	add	r2, sp, #72	@ 0x48
 801d514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d518:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801d51c:	4640      	mov	r0, r8
 801d51e:	47b8      	blx	r7
            if (err) {
 801d520:	4603      	mov	r3, r0
 801d522:	b9f8      	cbnz	r0, 801d564 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801d524:	3401      	adds	r4, #1
 801d526:	e7f1      	b.n	801d50c <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801d528:	4b4e      	ldr	r3, [pc, #312]	@ (801d664 <lfs_fs_traverse_+0x1ac>)
 801d52a:	f241 2222 	movw	r2, #4642	@ 0x1222
 801d52e:	494e      	ldr	r1, [pc, #312]	@ (801d668 <lfs_fs_traverse_+0x1b0>)
 801d530:	484e      	ldr	r0, [pc, #312]	@ (801d66c <lfs_fs_traverse_+0x1b4>)
 801d532:	f00d fccf 	bl	802aed4 <printf>
            return LFS_ERR_CORRUPT;
 801d536:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d53a:	e013      	b.n	801d564 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801d53c:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801d53e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d540:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801d542:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801d546:	2500      	movs	r5, #0
 801d548:	e7de      	b.n	801d508 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801d54a:	aa10      	add	r2, sp, #64	@ 0x40
 801d54c:	a90a      	add	r1, sp, #40	@ 0x28
 801d54e:	4630      	mov	r0, r6
 801d550:	f7ff ffa4 	bl	801d49c <lfs_dir_fetch>
        if (err) {
 801d554:	9005      	str	r0, [sp, #20]
 801d556:	2800      	cmp	r0, #0
 801d558:	d17f      	bne.n	801d65a <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801d55a:	2400      	movs	r4, #0
 801d55c:	e016      	b.n	801d58c <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801d55e:	f113 0f02 	cmn.w	r3, #2
 801d562:	d011      	beq.n	801d588 <lfs_fs_traverse_+0xd0>
}
 801d564:	4618      	mov	r0, r3
 801d566:	b013      	add	sp, #76	@ 0x4c
 801d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801d56c:	f8cd 8008 	str.w	r8, [sp, #8]
 801d570:	9701      	str	r7, [sp, #4]
 801d572:	9b07      	ldr	r3, [sp, #28]
 801d574:	9300      	str	r3, [sp, #0]
 801d576:	9b06      	ldr	r3, [sp, #24]
 801d578:	4632      	mov	r2, r6
 801d57a:	2100      	movs	r1, #0
 801d57c:	4630      	mov	r0, r6
 801d57e:	f7fe ffc9 	bl	801c514 <lfs_ctz_traverse>
                if (err) {
 801d582:	4603      	mov	r3, r0
 801d584:	2800      	cmp	r0, #0
 801d586:	d1ed      	bne.n	801d564 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801d588:	3401      	adds	r4, #1
 801d58a:	b2a4      	uxth	r4, r4
 801d58c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801d590:	42a3      	cmp	r3, r4
 801d592:	d9a6      	bls.n	801d4e2 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801d594:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801d596:	aa06      	add	r2, sp, #24
 801d598:	9200      	str	r2, [sp, #0]
 801d59a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d59e:	f043 0308 	orr.w	r3, r3, #8
 801d5a2:	4a33      	ldr	r2, [pc, #204]	@ (801d670 <lfs_fs_traverse_+0x1b8>)
 801d5a4:	a90a      	add	r1, sp, #40	@ 0x28
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f7fe ff8a 	bl	801c4c0 <lfs_dir_get>
            if (tag < 0) {
 801d5ac:	1e03      	subs	r3, r0, #0
 801d5ae:	dbd6      	blt.n	801d55e <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801d5b0:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801d5b4:	f240 2202 	movw	r2, #514	@ 0x202
 801d5b8:	4293      	cmp	r3, r2
 801d5ba:	d0d7      	beq.n	801d56c <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801d5bc:	f1b9 0f00 	cmp.w	r9, #0
 801d5c0:	d0e2      	beq.n	801d588 <lfs_fs_traverse_+0xd0>
 801d5c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d5c6:	d1df      	bne.n	801d588 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801d5c8:	f8dd b014 	ldr.w	fp, [sp, #20]
 801d5cc:	e001      	b.n	801d5d2 <lfs_fs_traverse_+0x11a>
 801d5ce:	f10b 0b01 	add.w	fp, fp, #1
 801d5d2:	f1bb 0f01 	cmp.w	fp, #1
 801d5d6:	dcd7      	bgt.n	801d588 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801d5d8:	ab06      	add	r3, sp, #24
 801d5da:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801d5de:	4640      	mov	r0, r8
 801d5e0:	47b8      	blx	r7
                    if (err) {
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	d0f2      	beq.n	801d5ce <lfs_fs_traverse_+0x116>
 801d5e8:	e7bc      	b.n	801d564 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d5ea:	2301      	movs	r3, #1
 801d5ec:	e783      	b.n	801d4f6 <lfs_fs_traverse_+0x3e>
 801d5ee:	2301      	movs	r3, #1
 801d5f0:	e781      	b.n	801d4f6 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d5f2:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801d5f4:	e00f      	b.n	801d616 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801d5f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d5f8:	f8cd 8008 	str.w	r8, [sp, #8]
 801d5fc:	9701      	str	r7, [sp, #4]
 801d5fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d600:	9200      	str	r2, [sp, #0]
 801d602:	4632      	mov	r2, r6
 801d604:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d608:	4630      	mov	r0, r6
 801d60a:	f7fe ff83 	bl	801c514 <lfs_ctz_traverse>
            if (err) {
 801d60e:	4603      	mov	r3, r0
 801d610:	b158      	cbz	r0, 801d62a <lfs_fs_traverse_+0x172>
 801d612:	e7a7      	b.n	801d564 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d614:	6824      	ldr	r4, [r4, #0]
 801d616:	b1f4      	cbz	r4, 801d656 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801d618:	79a3      	ldrb	r3, [r4, #6]
 801d61a:	2b01      	cmp	r3, #1
 801d61c:	d1fa      	bne.n	801d614 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801d61e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d620:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801d624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d628:	d0e5      	beq.n	801d5f6 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801d62a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d62c:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801d630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d634:	d1ee      	bne.n	801d614 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801d636:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d638:	f8cd 8008 	str.w	r8, [sp, #8]
 801d63c:	9701      	str	r7, [sp, #4]
 801d63e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801d640:	9200      	str	r2, [sp, #0]
 801d642:	4632      	mov	r2, r6
 801d644:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d648:	4630      	mov	r0, r6
 801d64a:	f7fe ff63 	bl	801c514 <lfs_ctz_traverse>
            if (err) {
 801d64e:	4603      	mov	r3, r0
 801d650:	2800      	cmp	r0, #0
 801d652:	d0df      	beq.n	801d614 <lfs_fs_traverse_+0x15c>
 801d654:	e786      	b.n	801d564 <lfs_fs_traverse_+0xac>
    return 0;
 801d656:	2300      	movs	r3, #0
 801d658:	e784      	b.n	801d564 <lfs_fs_traverse_+0xac>
            return err;
 801d65a:	9b05      	ldr	r3, [sp, #20]
 801d65c:	e782      	b.n	801d564 <lfs_fs_traverse_+0xac>
 801d65e:	bf00      	nop
 801d660:	08037164 	.word	0x08037164
 801d664:	080381c0 	.word	0x080381c0
 801d668:	0803a734 	.word	0x0803a734
 801d66c:	0803a8f4 	.word	0x0803a8f4
 801d670:	700ffc00 	.word	0x700ffc00

0801d674 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801d674:	b538      	push	{r3, r4, r5, lr}
 801d676:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801d678:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d67a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801d67c:	4413      	add	r3, r2
            % lfs->block_count;
 801d67e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801d680:	fbb3 f1f2 	udiv	r1, r3, r2
 801d684:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801d688:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801d68a:	2100      	movs	r1, #0
 801d68c:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801d68e:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d690:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801d692:	00db      	lsls	r3, r3, #3
 801d694:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801d696:	4283      	cmp	r3, r0
 801d698:	bf28      	it	cs
 801d69a:	4603      	movcs	r3, r0
 801d69c:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801d69e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801d6a0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801d6a2:	f010 f935 	bl	802d910 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801d6a6:	2301      	movs	r3, #1
 801d6a8:	4622      	mov	r2, r4
 801d6aa:	4906      	ldr	r1, [pc, #24]	@ (801d6c4 <lfs_alloc_scan+0x50>)
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	f7ff ff03 	bl	801d4b8 <lfs_fs_traverse_>
    if (err) {
 801d6b2:	4605      	mov	r5, r0
 801d6b4:	b908      	cbnz	r0, 801d6ba <lfs_alloc_scan+0x46>
}
 801d6b6:	4628      	mov	r0, r5
 801d6b8:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801d6ba:	4620      	mov	r0, r4
 801d6bc:	f7fe fc15 	bl	801beea <lfs_alloc_drop>
        return err;
 801d6c0:	e7f9      	b.n	801d6b6 <lfs_alloc_scan+0x42>
 801d6c2:	bf00      	nop
 801d6c4:	0801bef9 	.word	0x0801bef9

0801d6c8 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801d6c8:	b530      	push	{r4, r5, lr}
 801d6ca:	b083      	sub	sp, #12
 801d6cc:	4604      	mov	r4, r0
 801d6ce:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801d6d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801d6d2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	d22b      	bcs.n	801d730 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801d6d8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801d6da:	08da      	lsrs	r2, r3, #3
 801d6dc:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801d6de:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801d6e2:	40ca      	lsrs	r2, r1
 801d6e4:	f012 0f01 	tst.w	r2, #1
 801d6e8:	d005      	beq.n	801d6f6 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801d6ea:	3301      	adds	r3, #1
 801d6ec:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801d6ee:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801d6f0:	3b01      	subs	r3, #1
 801d6f2:	6623      	str	r3, [r4, #96]	@ 0x60
 801d6f4:	e7ec      	b.n	801d6d0 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801d6f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d6f8:	4413      	add	r3, r2
                        % lfs->block_count;
 801d6fa:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801d6fc:	fbb3 f1f2 	udiv	r1, r3, r2
 801d700:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801d704:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801d706:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801d708:	3301      	adds	r3, #1
 801d70a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801d70c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801d70e:	3a01      	subs	r2, #1
 801d710:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801d712:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801d714:	4293      	cmp	r3, r2
 801d716:	d225      	bcs.n	801d764 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801d718:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801d71a:	08da      	lsrs	r2, r3, #3
 801d71c:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801d71e:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801d722:	fa22 f303 	lsr.w	r3, r2, r3
 801d726:	f013 0f01 	tst.w	r3, #1
 801d72a:	d1ec      	bne.n	801d706 <lfs_alloc+0x3e>
                        return 0;
 801d72c:	2000      	movs	r0, #0
 801d72e:	e01a      	b.n	801d766 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801d730:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801d732:	b12a      	cbz	r2, 801d740 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801d734:	4620      	mov	r0, r4
 801d736:	f7ff ff9d 	bl	801d674 <lfs_alloc_scan>
        if(err) {
 801d73a:	2800      	cmp	r0, #0
 801d73c:	d0c8      	beq.n	801d6d0 <lfs_alloc+0x8>
 801d73e:	e012      	b.n	801d766 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801d740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d742:	4413      	add	r3, r2
 801d744:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801d746:	fbb3 f1f2 	udiv	r1, r3, r2
 801d74a:	4808      	ldr	r0, [pc, #32]	@ (801d76c <lfs_alloc+0xa4>)
 801d74c:	9000      	str	r0, [sp, #0]
 801d74e:	fb02 3311 	mls	r3, r2, r1, r3
 801d752:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801d756:	4906      	ldr	r1, [pc, #24]	@ (801d770 <lfs_alloc+0xa8>)
 801d758:	4806      	ldr	r0, [pc, #24]	@ (801d774 <lfs_alloc+0xac>)
 801d75a:	f00d fbbb 	bl	802aed4 <printf>
            return LFS_ERR_NOSPC;
 801d75e:	f06f 001b 	mvn.w	r0, #27
 801d762:	e000      	b.n	801d766 <lfs_alloc+0x9e>
                        return 0;
 801d764:	2000      	movs	r0, #0
}
 801d766:	b003      	add	sp, #12
 801d768:	bd30      	pop	{r4, r5, pc}
 801d76a:	bf00      	nop
 801d76c:	080381c0 	.word	0x080381c0
 801d770:	0803a734 	.word	0x0803a734
 801d774:	0803a920 	.word	0x0803a920

0801d778 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801d778:	b570      	push	{r4, r5, r6, lr}
 801d77a:	b084      	sub	sp, #16
 801d77c:	4606      	mov	r6, r0
 801d77e:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801d780:	2500      	movs	r5, #0
 801d782:	2d01      	cmp	r5, #1
 801d784:	dc0d      	bgt.n	801d7a2 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801d786:	3501      	adds	r5, #1
 801d788:	f005 0101 	and.w	r1, r5, #1
 801d78c:	bf48      	it	mi
 801d78e:	4249      	negmi	r1, r1
 801d790:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d794:	4630      	mov	r0, r6
 801d796:	f7ff ff97 	bl	801d6c8 <lfs_alloc>
        if (err) {
 801d79a:	4603      	mov	r3, r0
 801d79c:	2800      	cmp	r0, #0
 801d79e:	d0f0      	beq.n	801d782 <lfs_dir_alloc+0xa>
 801d7a0:	e02d      	b.n	801d7fe <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801d7a2:	2100      	movs	r1, #0
 801d7a4:	4622      	mov	r2, r4
 801d7a6:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801d7aa:	2304      	movs	r3, #4
 801d7ac:	9303      	str	r3, [sp, #12]
 801d7ae:	9202      	str	r2, [sp, #8]
 801d7b0:	9101      	str	r1, [sp, #4]
 801d7b2:	6822      	ldr	r2, [r4, #0]
 801d7b4:	9200      	str	r2, [sp, #0]
 801d7b6:	4632      	mov	r2, r6
 801d7b8:	4630      	mov	r0, r6
 801d7ba:	f7fe fcdd 	bl	801c178 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801d7be:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	b110      	cbz	r0, 801d7ca <lfs_dir_alloc+0x52>
 801d7c4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d7c8:	d119      	bne.n	801d7fe <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801d7ca:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801d7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	dd0a      	ble.n	801d7e8 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801d7d2:	3301      	adds	r3, #1
 801d7d4:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801d7d8:	1853      	adds	r3, r2, r1
 801d7da:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d7dc:	fbb3 f2f1 	udiv	r2, r3, r1
 801d7e0:	fb01 3212 	mls	r2, r1, r2, r3
 801d7e4:	1a9b      	subs	r3, r3, r2
 801d7e6:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801d7e8:	2304      	movs	r3, #4
 801d7ea:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801d7ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d7f0:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801d7f6:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801d7f8:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801d7fa:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801d7fc:	75e3      	strb	r3, [r4, #23]
}
 801d7fe:	4618      	mov	r0, r3
 801d800:	b004      	add	sp, #16
 801d802:	bd70      	pop	{r4, r5, r6, pc}

0801d804 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801d804:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d806:	b089      	sub	sp, #36	@ 0x24
 801d808:	4605      	mov	r5, r0
 801d80a:	460e      	mov	r6, r1
 801d80c:	e053      	b.n	801d8b6 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801d80e:	2201      	movs	r2, #1
 801d810:	9203      	str	r2, [sp, #12]
 801d812:	f10d 021b 	add.w	r2, sp, #27
 801d816:	9202      	str	r2, [sp, #8]
 801d818:	9401      	str	r4, [sp, #4]
 801d81a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801d81c:	9200      	str	r2, [sp, #0]
 801d81e:	1b1b      	subs	r3, r3, r4
 801d820:	462a      	mov	r2, r5
 801d822:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801d826:	4628      	mov	r0, r5
 801d828:	f7fe fca6 	bl	801c178 <lfs_bd_read>
                if (err) {
 801d82c:	2800      	cmp	r0, #0
 801d82e:	d152      	bne.n	801d8d6 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801d830:	2301      	movs	r3, #1
 801d832:	9303      	str	r3, [sp, #12]
 801d834:	f10d 021b 	add.w	r2, sp, #27
 801d838:	9202      	str	r2, [sp, #8]
 801d83a:	9401      	str	r4, [sp, #4]
 801d83c:	9a07      	ldr	r2, [sp, #28]
 801d83e:	9200      	str	r2, [sp, #0]
 801d840:	462a      	mov	r2, r5
 801d842:	f105 0110 	add.w	r1, r5, #16
 801d846:	4628      	mov	r0, r5
 801d848:	f7ff f992 	bl	801cb70 <lfs_bd_prog>
            if (err) {
 801d84c:	bb20      	cbnz	r0, 801d898 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801d84e:	3401      	adds	r4, #1
 801d850:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801d852:	42a3      	cmp	r3, r4
 801d854:	d945      	bls.n	801d8e2 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801d856:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801d858:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801d85c:	d0d7      	beq.n	801d80e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801d85e:	88b2      	ldrh	r2, [r6, #4]
 801d860:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801d862:	2101      	movs	r1, #1
 801d864:	9105      	str	r1, [sp, #20]
 801d866:	f10d 011b 	add.w	r1, sp, #27
 801d86a:	9104      	str	r1, [sp, #16]
 801d86c:	9403      	str	r4, [sp, #12]
 801d86e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801d872:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801d876:	9202      	str	r2, [sp, #8]
 801d878:	4a27      	ldr	r2, [pc, #156]	@ (801d918 <lfs_file_relocate+0x114>)
 801d87a:	9201      	str	r2, [sp, #4]
 801d87c:	1b1b      	subs	r3, r3, r4
 801d87e:	9300      	str	r3, [sp, #0]
 801d880:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801d884:	2200      	movs	r2, #0
 801d886:	f106 0108 	add.w	r1, r6, #8
 801d88a:	4628      	mov	r0, r5
 801d88c:	f7ff f84c 	bl	801c928 <lfs_dir_getread>
                if (err) {
 801d890:	2800      	cmp	r0, #0
 801d892:	d0cd      	beq.n	801d830 <lfs_file_relocate+0x2c>
                    return err;
 801d894:	4607      	mov	r7, r0
 801d896:	e03b      	b.n	801d910 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801d898:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d89c:	d11d      	bne.n	801d8da <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801d89e:	4b1f      	ldr	r3, [pc, #124]	@ (801d91c <lfs_file_relocate+0x118>)
 801d8a0:	9300      	str	r3, [sp, #0]
 801d8a2:	9b07      	ldr	r3, [sp, #28]
 801d8a4:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801d8a8:	491d      	ldr	r1, [pc, #116]	@ (801d920 <lfs_file_relocate+0x11c>)
 801d8aa:	481e      	ldr	r0, [pc, #120]	@ (801d924 <lfs_file_relocate+0x120>)
 801d8ac:	f00d fb12 	bl	802aed4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d8b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d8b4:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801d8b6:	a907      	add	r1, sp, #28
 801d8b8:	4628      	mov	r0, r5
 801d8ba:	f7ff ff05 	bl	801d6c8 <lfs_alloc>
        if (err) {
 801d8be:	4607      	mov	r7, r0
 801d8c0:	bb30      	cbnz	r0, 801d910 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801d8c2:	9907      	ldr	r1, [sp, #28]
 801d8c4:	4628      	mov	r0, r5
 801d8c6:	f7fe fbdd 	bl	801c084 <lfs_bd_erase>
        if (err) {
 801d8ca:	4607      	mov	r7, r0
 801d8cc:	b138      	cbz	r0, 801d8de <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801d8ce:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d8d2:	d0e4      	beq.n	801d89e <lfs_file_relocate+0x9a>
 801d8d4:	e01c      	b.n	801d910 <lfs_file_relocate+0x10c>
                    return err;
 801d8d6:	4607      	mov	r7, r0
 801d8d8:	e01a      	b.n	801d910 <lfs_file_relocate+0x10c>
                return err;
 801d8da:	4607      	mov	r7, r0
 801d8dc:	e018      	b.n	801d910 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801d8de:	2400      	movs	r4, #0
 801d8e0:	e7b6      	b.n	801d850 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801d8e2:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d8e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d8e6:	69e9      	ldr	r1, [r5, #28]
 801d8e8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801d8ea:	f011 fd77 	bl	802f3dc <memcpy>
        file->cache.block = lfs->pcache.block;
 801d8ee:	692b      	ldr	r3, [r5, #16]
 801d8f0:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801d8f2:	696b      	ldr	r3, [r5, #20]
 801d8f4:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801d8f6:	69ab      	ldr	r3, [r5, #24]
 801d8f8:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801d8fa:	f105 0110 	add.w	r1, r5, #16
 801d8fe:	4628      	mov	r0, r5
 801d900:	f7fe fc10 	bl	801c124 <lfs_cache_zero>
        file->block = nblock;
 801d904:	9b07      	ldr	r3, [sp, #28]
 801d906:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801d908:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801d90a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d90e:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801d910:	4638      	mov	r0, r7
 801d912:	b009      	add	sp, #36	@ 0x24
 801d914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d916:	bf00      	nop
 801d918:	fff7fc00 	.word	0xfff7fc00
 801d91c:	080381c0 	.word	0x080381c0
 801d920:	0803a734 	.word	0x0803a734
 801d924:	0803a94c 	.word	0x0803a94c

0801d928 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801d928:	b538      	push	{r3, r4, r5, lr}
 801d92a:	4605      	mov	r5, r0
 801d92c:	460c      	mov	r4, r1
    file->off = file->pos;
 801d92e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d930:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801d932:	f7fe fad7 	bl	801bee4 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801d936:	4621      	mov	r1, r4
 801d938:	4628      	mov	r0, r5
 801d93a:	f7ff ff63 	bl	801d804 <lfs_file_relocate>
    if (err) {
 801d93e:	b918      	cbnz	r0, 801d948 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801d940:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d942:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d946:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d948:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d94c <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d950:	b08b      	sub	sp, #44	@ 0x2c
 801d952:	4605      	mov	r5, r0
 801d954:	460f      	mov	r7, r1
 801d956:	4616      	mov	r6, r2
 801d958:	9305      	str	r3, [sp, #20]
 801d95a:	e04d      	b.n	801d9f8 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801d95c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d032      	beq.n	801d9c8 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801d962:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d964:	3b01      	subs	r3, #1
 801d966:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801d968:	a908      	add	r1, sp, #32
 801d96a:	4628      	mov	r0, r5
 801d96c:	f7fe fbe6 	bl	801c13c <lfs_ctz_index>
            noff = noff + 1;
 801d970:	9b08      	ldr	r3, [sp, #32]
 801d972:	3301      	adds	r3, #1
 801d974:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801d976:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d978:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d97a:	4293      	cmp	r3, r2
 801d97c:	d05b      	beq.n	801da36 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d97e:	2400      	movs	r4, #0
 801d980:	46b9      	mov	r9, r7
 801d982:	9f05      	ldr	r7, [sp, #20]
 801d984:	9b08      	ldr	r3, [sp, #32]
 801d986:	42a3      	cmp	r3, r4
 801d988:	d94a      	bls.n	801da20 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801d98a:	2201      	movs	r2, #1
 801d98c:	9203      	str	r2, [sp, #12]
 801d98e:	aa09      	add	r2, sp, #36	@ 0x24
 801d990:	9202      	str	r2, [sp, #8]
 801d992:	9401      	str	r4, [sp, #4]
 801d994:	9700      	str	r7, [sp, #0]
 801d996:	1b1b      	subs	r3, r3, r4
 801d998:	4632      	mov	r2, r6
 801d99a:	2100      	movs	r1, #0
 801d99c:	4628      	mov	r0, r5
 801d99e:	f7fe fbeb 	bl	801c178 <lfs_bd_read>
                    if (err) {
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	2800      	cmp	r0, #0
 801d9a6:	d139      	bne.n	801da1c <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801d9a8:	2301      	movs	r3, #1
 801d9aa:	9303      	str	r3, [sp, #12]
 801d9ac:	aa09      	add	r2, sp, #36	@ 0x24
 801d9ae:	9202      	str	r2, [sp, #8]
 801d9b0:	9401      	str	r4, [sp, #4]
 801d9b2:	9a07      	ldr	r2, [sp, #28]
 801d9b4:	9200      	str	r2, [sp, #0]
 801d9b6:	4632      	mov	r2, r6
 801d9b8:	4649      	mov	r1, r9
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	f7ff f8d8 	bl	801cb70 <lfs_bd_prog>
                    if (err) {
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	b948      	cbnz	r0, 801d9d8 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d9c4:	3401      	adds	r4, #1
 801d9c6:	e7dd      	b.n	801d984 <lfs_ctz_extend+0x38>
                *block = nblock;
 801d9c8:	4682      	mov	sl, r0
 801d9ca:	9b07      	ldr	r3, [sp, #28]
 801d9cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d9ce:	6013      	str	r3, [r2, #0]
                *off = 0;
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d9d4:	6013      	str	r3, [r2, #0]
                return 0;
 801d9d6:	e02a      	b.n	801da2e <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801d9d8:	464f      	mov	r7, r9
 801d9da:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d9de:	d11d      	bne.n	801da1c <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801d9e0:	4b36      	ldr	r3, [pc, #216]	@ (801dabc <lfs_ctz_extend+0x170>)
 801d9e2:	9300      	str	r3, [sp, #0]
 801d9e4:	9b07      	ldr	r3, [sp, #28]
 801d9e6:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801d9ea:	4935      	ldr	r1, [pc, #212]	@ (801dac0 <lfs_ctz_extend+0x174>)
 801d9ec:	4835      	ldr	r0, [pc, #212]	@ (801dac4 <lfs_ctz_extend+0x178>)
 801d9ee:	f00d fa71 	bl	802aed4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d9f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d9f6:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801d9f8:	a907      	add	r1, sp, #28
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	f7ff fe64 	bl	801d6c8 <lfs_alloc>
        if (err) {
 801da00:	2800      	cmp	r0, #0
 801da02:	d159      	bne.n	801dab8 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801da04:	9907      	ldr	r1, [sp, #28]
 801da06:	4628      	mov	r0, r5
 801da08:	f7fe fb3c 	bl	801c084 <lfs_bd_erase>
            if (err) {
 801da0c:	4680      	mov	r8, r0
 801da0e:	2800      	cmp	r0, #0
 801da10:	d0a4      	beq.n	801d95c <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801da12:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da16:	d0e3      	beq.n	801d9e0 <lfs_ctz_extend+0x94>
 801da18:	4682      	mov	sl, r0
 801da1a:	e008      	b.n	801da2e <lfs_ctz_extend+0xe2>
                        return err;
 801da1c:	469a      	mov	sl, r3
 801da1e:	e006      	b.n	801da2e <lfs_ctz_extend+0xe2>
                *block = nblock;
 801da20:	46c2      	mov	sl, r8
 801da22:	9b07      	ldr	r3, [sp, #28]
 801da24:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801da26:	6013      	str	r3, [r2, #0]
                *off = noff;
 801da28:	9b08      	ldr	r3, [sp, #32]
 801da2a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801da2c:	6013      	str	r3, [r2, #0]
}
 801da2e:	4650      	mov	r0, sl
 801da30:	b00b      	add	sp, #44	@ 0x2c
 801da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801da36:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801da38:	fa90 f9a0 	rbit	r9, r0
 801da3c:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801da40:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801da44:	9b05      	ldr	r3, [sp, #20]
 801da46:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801da48:	2400      	movs	r4, #0
 801da4a:	46ab      	mov	fp, r5
 801da4c:	e006      	b.n	801da5c <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801da4e:	465d      	mov	r5, fp
 801da50:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da54:	d0c4      	beq.n	801d9e0 <lfs_ctz_extend+0x94>
                    return err;
 801da56:	4682      	mov	sl, r0
 801da58:	e7e9      	b.n	801da2e <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801da5a:	3401      	adds	r4, #1
 801da5c:	4554      	cmp	r4, sl
 801da5e:	d221      	bcs.n	801daa4 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801da60:	00a5      	lsls	r5, r4, #2
 801da62:	2304      	movs	r3, #4
 801da64:	9303      	str	r3, [sp, #12]
 801da66:	ab09      	add	r3, sp, #36	@ 0x24
 801da68:	9302      	str	r3, [sp, #8]
 801da6a:	9501      	str	r5, [sp, #4]
 801da6c:	9b07      	ldr	r3, [sp, #28]
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	2301      	movs	r3, #1
 801da72:	4632      	mov	r2, r6
 801da74:	4639      	mov	r1, r7
 801da76:	4658      	mov	r0, fp
 801da78:	f7ff f87a 	bl	801cb70 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801da7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801da7e:	2800      	cmp	r0, #0
 801da80:	d1e5      	bne.n	801da4e <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801da82:	454c      	cmp	r4, r9
 801da84:	d0e9      	beq.n	801da5a <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801da86:	2304      	movs	r3, #4
 801da88:	9303      	str	r3, [sp, #12]
 801da8a:	a909      	add	r1, sp, #36	@ 0x24
 801da8c:	9102      	str	r1, [sp, #8]
 801da8e:	9501      	str	r5, [sp, #4]
 801da90:	9200      	str	r2, [sp, #0]
 801da92:	4632      	mov	r2, r6
 801da94:	2100      	movs	r1, #0
 801da96:	4658      	mov	r0, fp
 801da98:	f7fe fb6e 	bl	801c178 <lfs_bd_read>
                    if (err) {
 801da9c:	2800      	cmp	r0, #0
 801da9e:	d0dc      	beq.n	801da5a <lfs_ctz_extend+0x10e>
                        return err;
 801daa0:	4682      	mov	sl, r0
 801daa2:	e7c4      	b.n	801da2e <lfs_ctz_extend+0xe2>
            *block = nblock;
 801daa4:	46d1      	mov	r9, sl
 801daa6:	46c2      	mov	sl, r8
 801daa8:	9b07      	ldr	r3, [sp, #28]
 801daaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801daac:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801daae:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801dab2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dab4:	6019      	str	r1, [r3, #0]
            return 0;
 801dab6:	e7ba      	b.n	801da2e <lfs_ctz_extend+0xe2>
 801dab8:	4682      	mov	sl, r0
 801daba:	e7b8      	b.n	801da2e <lfs_ctz_extend+0xe2>
 801dabc:	080381c0 	.word	0x080381c0
 801dac0:	0803a734 	.word	0x0803a734
 801dac4:	0803a94c 	.word	0x0803a94c

0801dac8 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801dac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dacc:	b087      	sub	sp, #28
 801dace:	4605      	mov	r5, r0
 801dad0:	460c      	mov	r4, r1
 801dad2:	4617      	mov	r7, r2
 801dad4:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801dad6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801dad8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801dadc:	d008      	beq.n	801daf0 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801dade:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801dae0:	444b      	add	r3, r9
 801dae2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801dae4:	4293      	cmp	r3, r2
 801dae6:	bf38      	it	cc
 801dae8:	4613      	movcc	r3, r2
 801daea:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801daec:	429a      	cmp	r2, r3
 801daee:	d32d      	bcc.n	801db4c <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801daf0:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801daf2:	f1b8 0f00 	cmp.w	r8, #0
 801daf6:	f000 8094 	beq.w	801dc22 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801dafa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dafc:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801db00:	d004      	beq.n	801db0c <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801db02:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801db04:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801db06:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801db08:	4288      	cmp	r0, r1
 801db0a:	d150      	bne.n	801dbae <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801db0c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801db10:	d144      	bne.n	801db9c <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801db12:	b90a      	cbnz	r2, 801db18 <lfs_file_flushedwrite+0x50>
 801db14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801db16:	bb1b      	cbnz	r3, 801db60 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801db18:	4628      	mov	r0, r5
 801db1a:	f7fe f9e3 	bl	801bee4 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801db1e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801db22:	9302      	str	r3, [sp, #8]
 801db24:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801db28:	9301      	str	r3, [sp, #4]
 801db2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801db30:	462a      	mov	r2, r5
 801db32:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801db36:	4628      	mov	r0, r5
 801db38:	f7ff ff08 	bl	801d94c <lfs_ctz_extend>
                if (err) {
 801db3c:	4601      	mov	r1, r0
 801db3e:	2800      	cmp	r0, #0
 801db40:	d031      	beq.n	801dba6 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801db42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801db48:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801db4a:	e059      	b.n	801dc00 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801db4c:	f7ff feec 	bl	801d928 <lfs_file_outline>
        if (err) {
 801db50:	4601      	mov	r1, r0
 801db52:	2800      	cmp	r0, #0
 801db54:	d0cc      	beq.n	801daf0 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801db56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801db5c:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801db5e:	e04f      	b.n	801dc00 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801db60:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801db64:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801db66:	2100      	movs	r1, #0
 801db68:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801db6a:	a805      	add	r0, sp, #20
 801db6c:	9003      	str	r0, [sp, #12]
 801db6e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801db72:	9002      	str	r0, [sp, #8]
 801db74:	3b01      	subs	r3, #1
 801db76:	9301      	str	r3, [sp, #4]
 801db78:	9200      	str	r2, [sp, #0]
 801db7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801db7c:	4632      	mov	r2, r6
 801db7e:	4628      	mov	r0, r5
 801db80:	f7ff f8ad 	bl	801ccde <lfs_ctz_find>
                    if (err) {
 801db84:	4601      	mov	r1, r0
 801db86:	b920      	cbnz	r0, 801db92 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801db88:	4631      	mov	r1, r6
 801db8a:	4628      	mov	r0, r5
 801db8c:	f7fe faca 	bl	801c124 <lfs_cache_zero>
 801db90:	e7c2      	b.n	801db18 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801db92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801db98:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801db9a:	e031      	b.n	801dc00 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801db9c:	f06f 0301 	mvn.w	r3, #1
 801dba0:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801dba2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dba4:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801dba6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dbac:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801dbae:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801dbb0:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801dbb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801dbb4:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801dbb6:	4546      	cmp	r6, r8
 801dbb8:	bf28      	it	cs
 801dbba:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801dbbc:	9603      	str	r6, [sp, #12]
 801dbbe:	9702      	str	r7, [sp, #8]
 801dbc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801dbc2:	9301      	str	r3, [sp, #4]
 801dbc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801dbc6:	9300      	str	r3, [sp, #0]
 801dbc8:	2301      	movs	r3, #1
 801dbca:	462a      	mov	r2, r5
 801dbcc:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801dbd0:	4628      	mov	r0, r5
 801dbd2:	f7fe ffcd 	bl	801cb70 <lfs_bd_prog>
            if (err) {
 801dbd6:	4601      	mov	r1, r0
 801dbd8:	b1b0      	cbz	r0, 801dc08 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801dbda:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dbde:	d10b      	bne.n	801dbf8 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801dbe0:	4621      	mov	r1, r4
 801dbe2:	4628      	mov	r0, r5
 801dbe4:	f7ff fe0e 	bl	801d804 <lfs_file_relocate>
            if (err) {
 801dbe8:	4601      	mov	r1, r0
 801dbea:	2800      	cmp	r0, #0
 801dbec:	d0e6      	beq.n	801dbbc <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801dbee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dbf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801dbf4:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801dbf6:	e003      	b.n	801dc00 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801dbf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dbfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801dbfe:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801dc00:	4608      	mov	r0, r1
 801dc02:	b007      	add	sp, #28
 801dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801dc08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dc0a:	4433      	add	r3, r6
 801dc0c:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801dc0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801dc10:	4433      	add	r3, r6
 801dc12:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801dc14:	4437      	add	r7, r6
        nsize -= diff;
 801dc16:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801dc1a:	4628      	mov	r0, r5
 801dc1c:	f7fe f962 	bl	801bee4 <lfs_alloc_ckpoint>
 801dc20:	e767      	b.n	801daf2 <lfs_file_flushedwrite+0x2a>
    return size;
 801dc22:	4649      	mov	r1, r9
 801dc24:	e7ec      	b.n	801dc00 <lfs_file_flushedwrite+0x138>
	...

0801dc28 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801dc28:	b570      	push	{r4, r5, r6, lr}
 801dc2a:	b098      	sub	sp, #96	@ 0x60
 801dc2c:	4605      	mov	r5, r0
 801dc2e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801dc30:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801dc32:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801dc36:	d008      	beq.n	801dc4a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801dc38:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801dc3c:	d102      	bne.n	801dc44 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801dc3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dc42:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801dc44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801dc48:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801dc4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dc4c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801dc50:	d068      	beq.n	801dd24 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801dc52:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801dc54:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801dc58:	d151      	bne.n	801dcfe <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801dc5a:	2254      	movs	r2, #84	@ 0x54
 801dc5c:	2100      	movs	r1, #0
 801dc5e:	a803      	add	r0, sp, #12
 801dc60:	f00f fe56 	bl	802d910 <memset>
                .ctz.head = file->ctz.head,
 801dc64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801dc66:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801dc68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801dc6a:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801dc70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801dc72:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc74:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801dc78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801dc7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801dc80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc84:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801dc86:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801dc88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801dc8a:	429a      	cmp	r2, r3
 801dc8c:	d21a      	bcs.n	801dcc4 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801dc8e:	2301      	movs	r3, #1
 801dc90:	f10d 020b 	add.w	r2, sp, #11
 801dc94:	a903      	add	r1, sp, #12
 801dc96:	4628      	mov	r0, r5
 801dc98:	f7ff f86a 	bl	801cd70 <lfs_file_flushedread>
                if (res < 0) {
 801dc9c:	1e03      	subs	r3, r0, #0
 801dc9e:	db42      	blt.n	801dd26 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801dca0:	2301      	movs	r3, #1
 801dca2:	f10d 020b 	add.w	r2, sp, #11
 801dca6:	4621      	mov	r1, r4
 801dca8:	4628      	mov	r0, r5
 801dcaa:	f7ff ff0d 	bl	801dac8 <lfs_file_flushedwrite>
                if (res < 0) {
 801dcae:	1e03      	subs	r3, r0, #0
 801dcb0:	db39      	blt.n	801dd26 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801dcb2:	682b      	ldr	r3, [r5, #0]
 801dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dcb8:	d0e5      	beq.n	801dc86 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801dcba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dcbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dcc0:	602b      	str	r3, [r5, #0]
}
 801dcc2:	e7e0      	b.n	801dc86 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801dcc4:	2301      	movs	r3, #1
 801dcc6:	462a      	mov	r2, r5
 801dcc8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801dccc:	4628      	mov	r0, r5
 801dcce:	f7fe fef5 	bl	801cabc <lfs_bd_flush>
                if (err) {
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	b1c0      	cbz	r0, 801dd08 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801dcd6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dcda:	d124      	bne.n	801dd26 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801dcdc:	4b13      	ldr	r3, [pc, #76]	@ (801dd2c <lfs_file_flush+0x104>)
 801dcde:	9300      	str	r3, [sp, #0]
 801dce0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801dce2:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801dce6:	4912      	ldr	r1, [pc, #72]	@ (801dd30 <lfs_file_flush+0x108>)
 801dce8:	4812      	ldr	r0, [pc, #72]	@ (801dd34 <lfs_file_flush+0x10c>)
 801dcea:	f00d f8f3 	bl	802aed4 <printf>
                err = lfs_file_relocate(lfs, file);
 801dcee:	4621      	mov	r1, r4
 801dcf0:	4628      	mov	r0, r5
 801dcf2:	f7ff fd87 	bl	801d804 <lfs_file_relocate>
                if (err) {
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	2800      	cmp	r0, #0
 801dcfa:	d0e3      	beq.n	801dcc4 <lfs_file_flush+0x9c>
 801dcfc:	e013      	b.n	801dd26 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801dcfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801dd00:	42b3      	cmp	r3, r6
 801dd02:	bf38      	it	cc
 801dd04:	4633      	movcc	r3, r6
 801dd06:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801dd08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801dd0a:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801dd0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801dd10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dd12:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801dd16:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801dd18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801dd1c:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801dd1e:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801dd20:	2300      	movs	r3, #0
 801dd22:	e000      	b.n	801dd26 <lfs_file_flush+0xfe>
 801dd24:	2300      	movs	r3, #0
}
 801dd26:	4618      	mov	r0, r3
 801dd28:	b018      	add	sp, #96	@ 0x60
 801dd2a:	bd70      	pop	{r4, r5, r6, pc}
 801dd2c:	080381c0 	.word	0x080381c0
 801dd30:	0803a734 	.word	0x0803a734
 801dd34:	0803a94c 	.word	0x0803a94c

0801dd38 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd3a:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801dd3c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801dd3e:	f013 0f01 	tst.w	r3, #1
 801dd42:	d00f      	beq.n	801dd64 <lfs_file_read_+0x2c>
 801dd44:	4605      	mov	r5, r0
 801dd46:	460c      	mov	r4, r1
 801dd48:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801dd4a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801dd4e:	d002      	beq.n	801dd56 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801dd50:	f7ff ff6a 	bl	801dc28 <lfs_file_flush>
        if (err) {
 801dd54:	b928      	cbnz	r0, 801dd62 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801dd56:	463b      	mov	r3, r7
 801dd58:	4632      	mov	r2, r6
 801dd5a:	4621      	mov	r1, r4
 801dd5c:	4628      	mov	r0, r5
 801dd5e:	f7ff f807 	bl	801cd70 <lfs_file_flushedread>
}
 801dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801dd64:	4b03      	ldr	r3, [pc, #12]	@ (801dd74 <lfs_file_read_+0x3c>)
 801dd66:	4a04      	ldr	r2, [pc, #16]	@ (801dd78 <lfs_file_read_+0x40>)
 801dd68:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801dd6c:	4803      	ldr	r0, [pc, #12]	@ (801dd7c <lfs_file_read_+0x44>)
 801dd6e:	f00d f87d 	bl	802ae6c <__assert_func>
 801dd72:	bf00      	nop
 801dd74:	0803a970 	.word	0x0803a970
 801dd78:	0803b3a8 	.word	0x0803b3a8
 801dd7c:	0803a734 	.word	0x0803a734

0801dd80 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd82:	b083      	sub	sp, #12
 801dd84:	4606      	mov	r6, r0
 801dd86:	460d      	mov	r5, r1
 801dd88:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801dd8a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801dd8c:	b123      	cbz	r3, 801dd98 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801dd8e:	2b01      	cmp	r3, #1
 801dd90:	d021      	beq.n	801ddd6 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801dd92:	2b02      	cmp	r3, #2
 801dd94:	d023      	beq.n	801ddde <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801dd96:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801dd98:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801dd9a:	42a3      	cmp	r3, r4
 801dd9c:	d339      	bcc.n	801de12 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801dd9e:	42bc      	cmp	r4, r7
 801dda0:	d023      	beq.n	801ddea <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801dda2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801dda4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801dda8:	d10c      	bne.n	801ddc4 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801ddaa:	9701      	str	r7, [sp, #4]
 801ddac:	a901      	add	r1, sp, #4
 801ddae:	4630      	mov	r0, r6
 801ddb0:	f7fe f9c4 	bl	801c13c <lfs_ctz_index>
 801ddb4:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801ddb6:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801ddb8:	4669      	mov	r1, sp
 801ddba:	4630      	mov	r0, r6
 801ddbc:	f7fe f9be 	bl	801c13c <lfs_ctz_index>
        if (oindex == nindex
 801ddc0:	4287      	cmp	r7, r0
 801ddc2:	d014      	beq.n	801ddee <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801ddc4:	4629      	mov	r1, r5
 801ddc6:	4630      	mov	r0, r6
 801ddc8:	f7ff ff2e 	bl	801dc28 <lfs_file_flush>
    if (err) {
 801ddcc:	b908      	cbnz	r0, 801ddd2 <lfs_file_seek_+0x52>
    file->pos = npos;
 801ddce:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801ddd0:	4620      	mov	r0, r4
}
 801ddd2:	b003      	add	sp, #12
 801ddd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801ddd6:	42e7      	cmn	r7, r4
 801ddd8:	d415      	bmi.n	801de06 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801ddda:	443c      	add	r4, r7
 801dddc:	e7dc      	b.n	801dd98 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801ddde:	f7fe f90e 	bl	801bffe <lfs_file_size_>
        if (res < 0) {
 801dde2:	1900      	adds	r0, r0, r4
 801dde4:	d412      	bmi.n	801de0c <lfs_file_seek_+0x8c>
            npos = res;
 801dde6:	4604      	mov	r4, r0
 801dde8:	e7d6      	b.n	801dd98 <lfs_file_seek_+0x18>
        return npos;
 801ddea:	4620      	mov	r0, r4
 801ddec:	e7f1      	b.n	801ddd2 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801ddee:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801ddf0:	9a00      	ldr	r2, [sp, #0]
 801ddf2:	4293      	cmp	r3, r2
 801ddf4:	d8e6      	bhi.n	801ddc4 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801ddf6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801ddf8:	440b      	add	r3, r1
 801ddfa:	429a      	cmp	r2, r3
 801ddfc:	d2e2      	bcs.n	801ddc4 <lfs_file_seek_+0x44>
            file->pos = npos;
 801ddfe:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801de00:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801de02:	4620      	mov	r0, r4
 801de04:	e7e5      	b.n	801ddd2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801de06:	f06f 0015 	mvn.w	r0, #21
 801de0a:	e7e2      	b.n	801ddd2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801de0c:	f06f 0015 	mvn.w	r0, #21
 801de10:	e7df      	b.n	801ddd2 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801de12:	f06f 0015 	mvn.w	r0, #21
 801de16:	e7dc      	b.n	801ddd2 <lfs_file_seek_+0x52>

0801de18 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801de18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de1c:	b082      	sub	sp, #8
 801de1e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801de20:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801de22:	f013 0f02 	tst.w	r3, #2
 801de26:	d02a      	beq.n	801de7e <lfs_file_write_+0x66>
 801de28:	4605      	mov	r5, r0
 801de2a:	460c      	mov	r4, r1
 801de2c:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801de2e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801de32:	d12b      	bne.n	801de8c <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801de34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de36:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801de3a:	d004      	beq.n	801de46 <lfs_file_write_+0x2e>
 801de3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de3e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801de40:	4291      	cmp	r1, r2
 801de42:	d200      	bcs.n	801de46 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801de44:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801de46:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801de48:	19f1      	adds	r1, r6, r7
 801de4a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801de4c:	4291      	cmp	r1, r2
 801de4e:	d831      	bhi.n	801deb4 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801de50:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801de54:	d11f      	bne.n	801de96 <lfs_file_write_+0x7e>
 801de56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801de58:	429e      	cmp	r6, r3
 801de5a:	d91c      	bls.n	801de96 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801de5c:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801de5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de60:	428e      	cmp	r6, r1
 801de62:	d918      	bls.n	801de96 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801de64:	2300      	movs	r3, #0
 801de66:	f88d 3007 	strb.w	r3, [sp, #7]
 801de6a:	2301      	movs	r3, #1
 801de6c:	f10d 0207 	add.w	r2, sp, #7
 801de70:	4621      	mov	r1, r4
 801de72:	4628      	mov	r0, r5
 801de74:	f7ff fe28 	bl	801dac8 <lfs_file_flushedwrite>
            if (res < 0) {
 801de78:	2800      	cmp	r0, #0
 801de7a:	daf0      	bge.n	801de5e <lfs_file_write_+0x46>
 801de7c:	e017      	b.n	801deae <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801de7e:	4b0f      	ldr	r3, [pc, #60]	@ (801debc <lfs_file_write_+0xa4>)
 801de80:	4a0f      	ldr	r2, [pc, #60]	@ (801dec0 <lfs_file_write_+0xa8>)
 801de82:	f640 6126 	movw	r1, #3622	@ 0xe26
 801de86:	480f      	ldr	r0, [pc, #60]	@ (801dec4 <lfs_file_write_+0xac>)
 801de88:	f00c fff0 	bl	802ae6c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801de8c:	f7ff fecc 	bl	801dc28 <lfs_file_flush>
        if (err) {
 801de90:	2800      	cmp	r0, #0
 801de92:	d0cf      	beq.n	801de34 <lfs_file_write_+0x1c>
 801de94:	e00b      	b.n	801deae <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801de96:	463b      	mov	r3, r7
 801de98:	4642      	mov	r2, r8
 801de9a:	4621      	mov	r1, r4
 801de9c:	4628      	mov	r0, r5
 801de9e:	f7ff fe13 	bl	801dac8 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801dea2:	2800      	cmp	r0, #0
 801dea4:	db03      	blt.n	801deae <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801dea6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dea8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801deac:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801deae:	b002      	add	sp, #8
 801deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801deb4:	f06f 001a 	mvn.w	r0, #26
 801deb8:	e7f9      	b.n	801deae <lfs_file_write_+0x96>
 801deba:	bf00      	nop
 801debc:	0803a9a0 	.word	0x0803a9a0
 801dec0:	0803b388 	.word	0x0803b388
 801dec4:	0803a734 	.word	0x0803a734

0801dec8 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801dec8:	b500      	push	{lr}
 801deca:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801decc:	2300      	movs	r3, #0
 801dece:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801ded0:	aa01      	add	r2, sp, #4
 801ded2:	4904      	ldr	r1, [pc, #16]	@ (801dee4 <lfs_fs_size_+0x1c>)
 801ded4:	f7ff faf0 	bl	801d4b8 <lfs_fs_traverse_>
    if (err) {
 801ded8:	b900      	cbnz	r0, 801dedc <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801deda:	9801      	ldr	r0, [sp, #4]
}
 801dedc:	b003      	add	sp, #12
 801dede:	f85d fb04 	ldr.w	pc, [sp], #4
 801dee2:	bf00      	nop
 801dee4:	0801c079 	.word	0x0801c079

0801dee8 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801deec:	b082      	sub	sp, #8
 801deee:	4680      	mov	r8, r0
 801def0:	460e      	mov	r6, r1
 801def2:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801def4:	2300      	movs	r3, #0
 801def6:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801def8:	2501      	movs	r5, #1
 801defa:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801defc:	4b27      	ldr	r3, [pc, #156]	@ (801df9c <lfs_fs_pred+0xb4>)
 801defe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801df02:	ab02      	add	r3, sp, #8
 801df04:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801df08:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801df0a:	69a7      	ldr	r7, [r4, #24]
 801df0c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801df10:	d035      	beq.n	801df7e <lfs_fs_pred+0x96>
 801df12:	69e3      	ldr	r3, [r4, #28]
 801df14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801df18:	d02f      	beq.n	801df7a <lfs_fs_pred+0x92>
 801df1a:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801df1c:	bb8b      	cbnz	r3, 801df82 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801df1e:	f104 0a18 	add.w	sl, r4, #24
 801df22:	4669      	mov	r1, sp
 801df24:	4650      	mov	r0, sl
 801df26:	f7fd ff61 	bl	801bdec <lfs_pair_issync>
 801df2a:	b9a8      	cbnz	r0, 801df58 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801df2c:	454d      	cmp	r5, r9
 801df2e:	d01d      	beq.n	801df6c <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801df30:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801df32:	6833      	ldr	r3, [r6, #0]
 801df34:	42bb      	cmp	r3, r7
 801df36:	d027      	beq.n	801df88 <lfs_fs_pred+0xa0>
 801df38:	69e1      	ldr	r1, [r4, #28]
 801df3a:	6872      	ldr	r2, [r6, #4]
 801df3c:	4291      	cmp	r1, r2
 801df3e:	d027      	beq.n	801df90 <lfs_fs_pred+0xa8>
 801df40:	42ba      	cmp	r2, r7
 801df42:	d027      	beq.n	801df94 <lfs_fs_pred+0xac>
 801df44:	4299      	cmp	r1, r3
 801df46:	d027      	beq.n	801df98 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801df48:	4652      	mov	r2, sl
 801df4a:	4621      	mov	r1, r4
 801df4c:	4640      	mov	r0, r8
 801df4e:	f7ff faa5 	bl	801d49c <lfs_dir_fetch>
        if (err) {
 801df52:	2800      	cmp	r0, #0
 801df54:	d0d9      	beq.n	801df0a <lfs_fs_pred+0x22>
 801df56:	e018      	b.n	801df8a <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801df58:	4b11      	ldr	r3, [pc, #68]	@ (801dfa0 <lfs_fs_pred+0xb8>)
 801df5a:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801df5e:	4911      	ldr	r1, [pc, #68]	@ (801dfa4 <lfs_fs_pred+0xbc>)
 801df60:	4811      	ldr	r0, [pc, #68]	@ (801dfa8 <lfs_fs_pred+0xc0>)
 801df62:	f00c ffb7 	bl	802aed4 <printf>
            return LFS_ERR_CORRUPT;
 801df66:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801df6a:	e00e      	b.n	801df8a <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801df6c:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801df6e:	69e3      	ldr	r3, [r4, #28]
 801df70:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801df72:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801df76:	2500      	movs	r5, #0
 801df78:	e7da      	b.n	801df30 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801df7a:	2301      	movs	r3, #1
 801df7c:	e7ce      	b.n	801df1c <lfs_fs_pred+0x34>
 801df7e:	2301      	movs	r3, #1
 801df80:	e7cc      	b.n	801df1c <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801df82:	f06f 0001 	mvn.w	r0, #1
 801df86:	e000      	b.n	801df8a <lfs_fs_pred+0xa2>
            return 0;
 801df88:	2000      	movs	r0, #0
}
 801df8a:	b002      	add	sp, #8
 801df8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801df90:	2000      	movs	r0, #0
 801df92:	e7fa      	b.n	801df8a <lfs_fs_pred+0xa2>
 801df94:	2000      	movs	r0, #0
 801df96:	e7f8      	b.n	801df8a <lfs_fs_pred+0xa2>
 801df98:	2000      	movs	r0, #0
 801df9a:	e7f6      	b.n	801df8a <lfs_fs_pred+0xa2>
 801df9c:	08037164 	.word	0x08037164
 801dfa0:	080381c0 	.word	0x080381c0
 801dfa4:	0803a734 	.word	0x0803a734
 801dfa8:	0803a8f4 	.word	0x0803a8f4

0801dfac <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801dfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfae:	b085      	sub	sp, #20
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	4616      	mov	r6, r2
 801dfb4:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801dfb6:	9303      	str	r3, [sp, #12]
 801dfb8:	9202      	str	r2, [sp, #8]
 801dfba:	684b      	ldr	r3, [r1, #4]
 801dfbc:	9301      	str	r3, [sp, #4]
 801dfbe:	680b      	ldr	r3, [r1, #0]
 801dfc0:	9300      	str	r3, [sp, #0]
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	4602      	mov	r2, r0
 801dfc6:	f100 0110 	add.w	r1, r0, #16
 801dfca:	f7fe fdd1 	bl	801cb70 <lfs_bd_prog>
    if (err) {
 801dfce:	4607      	mov	r7, r0
 801dfd0:	b110      	cbz	r0, 801dfd8 <lfs_dir_commitprog+0x2c>
}
 801dfd2:	4638      	mov	r0, r7
 801dfd4:	b005      	add	sp, #20
 801dfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801dfd8:	462a      	mov	r2, r5
 801dfda:	4631      	mov	r1, r6
 801dfdc:	68e0      	ldr	r0, [r4, #12]
 801dfde:	f002 fcdf 	bl	80209a0 <lfs_crc>
 801dfe2:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801dfe4:	6863      	ldr	r3, [r4, #4]
 801dfe6:	442b      	add	r3, r5
 801dfe8:	6063      	str	r3, [r4, #4]
    return 0;
 801dfea:	e7f2      	b.n	801dfd2 <lfs_dir_commitprog+0x26>

0801dfec <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dff0:	b087      	sub	sp, #28
 801dff2:	4614      	mov	r4, r2
 801dff4:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801dff6:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801dffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dffe:	bf14      	ite	ne
 801e000:	4690      	movne	r8, r2
 801e002:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801e006:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801e00a:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801e00e:	684b      	ldr	r3, [r1, #4]
 801e010:	444b      	add	r3, r9
 801e012:	694a      	ldr	r2, [r1, #20]
 801e014:	4293      	cmp	r3, r2
 801e016:	d841      	bhi.n	801e09c <lfs_dir_commitattr+0xb0>
 801e018:	4605      	mov	r5, r0
 801e01a:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801e01c:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801e020:	688b      	ldr	r3, [r1, #8]
 801e022:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801e026:	ba1b      	rev	r3, r3
 801e028:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801e02a:	2304      	movs	r3, #4
 801e02c:	aa05      	add	r2, sp, #20
 801e02e:	f7ff ffbd 	bl	801dfac <lfs_dir_commitprog>
    if (err) {
 801e032:	4682      	mov	sl, r0
 801e034:	bb60      	cbnz	r0, 801e090 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801e036:	2c00      	cmp	r4, #0
 801e038:	da21      	bge.n	801e07e <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801e03a:	2400      	movs	r4, #0
 801e03c:	4544      	cmp	r4, r8
 801e03e:	d225      	bcs.n	801e08c <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801e040:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801e044:	6839      	ldr	r1, [r7, #0]
 801e046:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801e048:	2001      	movs	r0, #1
 801e04a:	9003      	str	r0, [sp, #12]
 801e04c:	f10d 0013 	add.w	r0, sp, #19
 801e050:	9002      	str	r0, [sp, #8]
 801e052:	4422      	add	r2, r4
 801e054:	9201      	str	r2, [sp, #4]
 801e056:	9100      	str	r1, [sp, #0]
 801e058:	3b04      	subs	r3, #4
 801e05a:	462a      	mov	r2, r5
 801e05c:	2100      	movs	r1, #0
 801e05e:	4628      	mov	r0, r5
 801e060:	f7fe f88a 	bl	801c178 <lfs_bd_read>
            if (err) {
 801e064:	4603      	mov	r3, r0
 801e066:	b9b8      	cbnz	r0, 801e098 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801e068:	2301      	movs	r3, #1
 801e06a:	f10d 0213 	add.w	r2, sp, #19
 801e06e:	4631      	mov	r1, r6
 801e070:	4628      	mov	r0, r5
 801e072:	f7ff ff9b 	bl	801dfac <lfs_dir_commitprog>
            if (err) {
 801e076:	4603      	mov	r3, r0
 801e078:	b970      	cbnz	r0, 801e098 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801e07a:	3401      	adds	r4, #1
 801e07c:	e7de      	b.n	801e03c <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801e07e:	4643      	mov	r3, r8
 801e080:	463a      	mov	r2, r7
 801e082:	4631      	mov	r1, r6
 801e084:	4628      	mov	r0, r5
 801e086:	f7ff ff91 	bl	801dfac <lfs_dir_commitprog>
        if (err) {
 801e08a:	b950      	cbnz	r0, 801e0a2 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801e08c:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801e090:	4650      	mov	r0, sl
 801e092:	b007      	add	sp, #28
 801e094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801e098:	469a      	mov	sl, r3
 801e09a:	e7f9      	b.n	801e090 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801e09c:	f06f 0a1b 	mvn.w	sl, #27
 801e0a0:	e7f6      	b.n	801e090 <lfs_dir_commitattr+0xa4>
            return err;
 801e0a2:	4682      	mov	sl, r0
 801e0a4:	e7f4      	b.n	801e090 <lfs_dir_commitattr+0xa4>

0801e0a6 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801e0a6:	b508      	push	{r3, lr}
 801e0a8:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801e0aa:	460a      	mov	r2, r1
 801e0ac:	6841      	ldr	r1, [r0, #4]
 801e0ae:	6800      	ldr	r0, [r0, #0]
 801e0b0:	f7ff ff9c 	bl	801dfec <lfs_dir_commitattr>
}
 801e0b4:	bd08      	pop	{r3, pc}
	...

0801e0b8 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0bc:	b08b      	sub	sp, #44	@ 0x2c
 801e0be:	4607      	mov	r7, r0
 801e0c0:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801e0c2:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801e0c4:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801e0c6:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801e0c8:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801e0ca:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801e0cc:	428b      	cmp	r3, r1
 801e0ce:	bf94      	ite	ls
 801e0d0:	eb02 0803 	addls.w	r8, r2, r3
 801e0d4:	eb02 0801 	addhi.w	r8, r2, r1
 801e0d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801e0dc:	fbb8 f3f2 	udiv	r3, r8, r2
 801e0e0:	fb02 8313 	mls	r3, r2, r3, r8
 801e0e4:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801e0ec:	469b      	mov	fp, r3
    while (commit->off < end) {
 801e0ee:	e03c      	b.n	801e16a <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801e0f0:	2201      	movs	r2, #1
 801e0f2:	9203      	str	r2, [sp, #12]
 801e0f4:	f10d 021b 	add.w	r2, sp, #27
 801e0f8:	9202      	str	r2, [sp, #8]
 801e0fa:	9401      	str	r4, [sp, #4]
 801e0fc:	6832      	ldr	r2, [r6, #0]
 801e0fe:	9200      	str	r2, [sp, #0]
 801e100:	463a      	mov	r2, r7
 801e102:	2100      	movs	r1, #0
 801e104:	4638      	mov	r0, r7
 801e106:	f7fe f837 	bl	801c178 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801e10a:	4603      	mov	r3, r0
 801e10c:	b118      	cbz	r0, 801e116 <lfs_dir_commitcrc+0x5e>
 801e10e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e112:	f040 80c0 	bne.w	801e296 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801e116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e118:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801e11a:	9307      	str	r3, [sp, #28]
 801e11c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e120:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801e122:	aa08      	add	r2, sp, #32
 801e124:	9203      	str	r2, [sp, #12]
 801e126:	9302      	str	r3, [sp, #8]
 801e128:	9401      	str	r4, [sp, #4]
 801e12a:	6832      	ldr	r2, [r6, #0]
 801e12c:	9200      	str	r2, [sp, #0]
 801e12e:	463a      	mov	r2, r7
 801e130:	2100      	movs	r1, #0
 801e132:	4638      	mov	r0, r7
 801e134:	f7fe fea0 	bl	801ce78 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801e138:	4603      	mov	r3, r0
 801e13a:	b118      	cbz	r0, 801e144 <lfs_dir_commitcrc+0x8c>
 801e13c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e140:	f040 80a9 	bne.w	801e296 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801e144:	ab07      	add	r3, sp, #28
 801e146:	4a59      	ldr	r2, [pc, #356]	@ (801e2ac <lfs_dir_commitcrc+0x1f4>)
 801e148:	4631      	mov	r1, r6
 801e14a:	4638      	mov	r0, r7
 801e14c:	f7ff ff4e 	bl	801dfec <lfs_dir_commitattr>
                if (err) {
 801e150:	4603      	mov	r3, r0
 801e152:	b348      	cbz	r0, 801e1a8 <lfs_dir_commitcrc+0xf0>
 801e154:	e09f      	b.n	801e296 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e156:	2300      	movs	r3, #0
 801e158:	463a      	mov	r2, r7
 801e15a:	4651      	mov	r1, sl
 801e15c:	4638      	mov	r0, r7
 801e15e:	f7fe fd81 	bl	801cc64 <lfs_bd_sync>
            if (err) {
 801e162:	4603      	mov	r3, r0
 801e164:	2800      	cmp	r0, #0
 801e166:	f040 8096 	bne.w	801e296 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801e16a:	6874      	ldr	r4, [r6, #4]
 801e16c:	4544      	cmp	r4, r8
 801e16e:	d268      	bcs.n	801e242 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801e170:	eba8 0304 	sub.w	r3, r8, r4
 801e174:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801e176:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801e17a:	4293      	cmp	r3, r2
 801e17c:	bf94      	ite	ls
 801e17e:	18e4      	addls	r4, r4, r3
 801e180:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801e182:	3404      	adds	r4, #4
        if (noff < end) {
 801e184:	4544      	cmp	r4, r8
 801e186:	d204      	bcs.n	801e192 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801e188:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801e18c:	429c      	cmp	r4, r3
 801e18e:	bf28      	it	cs
 801e190:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801e192:	23ff      	movs	r3, #255	@ 0xff
 801e194:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801e198:	4544      	cmp	r4, r8
 801e19a:	d305      	bcc.n	801e1a8 <lfs_dir_commitcrc+0xf0>
 801e19c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e19e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e1a0:	6a1b      	ldr	r3, [r3, #32]
 801e1a2:	1ad2      	subs	r2, r2, r3
 801e1a4:	42a2      	cmp	r2, r4
 801e1a6:	d2a3      	bcs.n	801e0f0 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801e1a8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801e1ac:	43d2      	mvns	r2, r2
 801e1ae:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801e1b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801e1b6:	6873      	ldr	r3, [r6, #4]
 801e1b8:	1ae5      	subs	r5, r4, r3
 801e1ba:	3d04      	subs	r5, #4
 801e1bc:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801e1c0:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801e1c4:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801e1c8:	68b3      	ldr	r3, [r6, #8]
 801e1ca:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801e1cc:	ba1b      	rev	r3, r3
 801e1ce:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801e1d0:	f10d 091c 	add.w	r9, sp, #28
 801e1d4:	2204      	movs	r2, #4
 801e1d6:	4649      	mov	r1, r9
 801e1d8:	68f0      	ldr	r0, [r6, #12]
 801e1da:	f002 fbe1 	bl	80209a0 <lfs_crc>
 801e1de:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801e1e0:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801e1e2:	f107 0a10 	add.w	sl, r7, #16
 801e1e6:	2308      	movs	r3, #8
 801e1e8:	9303      	str	r3, [sp, #12]
 801e1ea:	f8cd 9008 	str.w	r9, [sp, #8]
 801e1ee:	6873      	ldr	r3, [r6, #4]
 801e1f0:	9301      	str	r3, [sp, #4]
 801e1f2:	6833      	ldr	r3, [r6, #0]
 801e1f4:	9300      	str	r3, [sp, #0]
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	463a      	mov	r2, r7
 801e1fa:	4651      	mov	r1, sl
 801e1fc:	4638      	mov	r0, r7
 801e1fe:	f7fe fcb7 	bl	801cb70 <lfs_bd_prog>
        if (err) {
 801e202:	4603      	mov	r3, r0
 801e204:	2800      	cmp	r0, #0
 801e206:	d146      	bne.n	801e296 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801e208:	f1bb 0f00 	cmp.w	fp, #0
 801e20c:	d104      	bne.n	801e218 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801e20e:	6873      	ldr	r3, [r6, #4]
 801e210:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801e214:	68f3      	ldr	r3, [r6, #12]
 801e216:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801e218:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801e21a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e21e:	43db      	mvns	r3, r3
 801e220:	061b      	lsls	r3, r3, #24
 801e222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801e226:	406b      	eors	r3, r5
 801e228:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801e22a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e22e:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801e230:	4544      	cmp	r4, r8
 801e232:	d290      	bcs.n	801e156 <lfs_dir_commitcrc+0x9e>
 801e234:	697b      	ldr	r3, [r7, #20]
 801e236:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e238:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801e23a:	4413      	add	r3, r2
 801e23c:	42a3      	cmp	r3, r4
 801e23e:	d894      	bhi.n	801e16a <lfs_dir_commitcrc+0xb2>
 801e240:	e789      	b.n	801e156 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801e242:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801e244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e248:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801e24a:	aa09      	add	r2, sp, #36	@ 0x24
 801e24c:	9203      	str	r2, [sp, #12]
 801e24e:	ebab 0203 	sub.w	r2, fp, r3
 801e252:	9202      	str	r2, [sp, #8]
 801e254:	9301      	str	r3, [sp, #4]
 801e256:	6833      	ldr	r3, [r6, #0]
 801e258:	9300      	str	r3, [sp, #0]
 801e25a:	f10b 0304 	add.w	r3, fp, #4
 801e25e:	463a      	mov	r2, r7
 801e260:	2100      	movs	r1, #0
 801e262:	4638      	mov	r0, r7
 801e264:	f7fe fe08 	bl	801ce78 <lfs_bd_crc>
    if (err) {
 801e268:	4603      	mov	r3, r0
 801e26a:	b9a0      	cbnz	r0, 801e296 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801e26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e26e:	9a05      	ldr	r2, [sp, #20]
 801e270:	4293      	cmp	r3, r2
 801e272:	d114      	bne.n	801e29e <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801e274:	ab09      	add	r3, sp, #36	@ 0x24
 801e276:	9303      	str	r3, [sp, #12]
 801e278:	2304      	movs	r3, #4
 801e27a:	9302      	str	r3, [sp, #8]
 801e27c:	f8cd b004 	str.w	fp, [sp, #4]
 801e280:	6832      	ldr	r2, [r6, #0]
 801e282:	9200      	str	r2, [sp, #0]
 801e284:	463a      	mov	r2, r7
 801e286:	2100      	movs	r1, #0
 801e288:	4638      	mov	r0, r7
 801e28a:	f7fe fdf5 	bl	801ce78 <lfs_bd_crc>
    if (err) {
 801e28e:	4603      	mov	r3, r0
 801e290:	b908      	cbnz	r0, 801e296 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801e292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e294:	b932      	cbnz	r2, 801e2a4 <lfs_dir_commitcrc+0x1ec>
}
 801e296:	4618      	mov	r0, r3
 801e298:	b00b      	add	sp, #44	@ 0x2c
 801e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801e29e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e2a2:	e7f8      	b.n	801e296 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801e2a4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e2a8:	e7f5      	b.n	801e296 <lfs_dir_commitcrc+0x1de>
 801e2aa:	bf00      	nop
 801e2ac:	5ffffc08 	.word	0x5ffffc08

0801e2b0 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b4:	b09b      	sub	sp, #108	@ 0x6c
 801e2b6:	4605      	mov	r5, r0
 801e2b8:	460c      	mov	r4, r1
 801e2ba:	4616      	mov	r6, r2
 801e2bc:	461f      	mov	r7, r3
 801e2be:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801e2c2:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801e2c6:	f7fd fe7f 	bl	801bfc8 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801e2ca:	68a3      	ldr	r3, [r4, #8]
 801e2cc:	3301      	adds	r3, #1
 801e2ce:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801e2d0:	4681      	mov	r9, r0
 801e2d2:	2800      	cmp	r0, #0
 801e2d4:	d034      	beq.n	801e340 <lfs_dir_compact+0x90>
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	9314      	str	r3, [sp, #80]	@ 0x50
 801e2da:	2301      	movs	r3, #1
 801e2dc:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e2de:	6823      	ldr	r3, [r4, #0]
 801e2e0:	b373      	cbz	r3, 801e340 <lfs_dir_compact+0x90>
 801e2e2:	6862      	ldr	r2, [r4, #4]
 801e2e4:	2a01      	cmp	r2, #1
 801e2e6:	d02b      	beq.n	801e340 <lfs_dir_compact+0x90>
 801e2e8:	2b01      	cmp	r3, #1
 801e2ea:	d029      	beq.n	801e340 <lfs_dir_compact+0x90>
 801e2ec:	b342      	cbz	r2, 801e340 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801e2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2f2:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801e2f4:	f1b9 0f00 	cmp.w	r9, #0
 801e2f8:	f000 810d 	beq.w	801e516 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	9318      	str	r3, [sp, #96]	@ 0x60
 801e300:	2301      	movs	r3, #1
 801e302:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e304:	6823      	ldr	r3, [r4, #0]
 801e306:	2b00      	cmp	r3, #0
 801e308:	f000 810f 	beq.w	801e52a <lfs_dir_compact+0x27a>
 801e30c:	6862      	ldr	r2, [r4, #4]
 801e30e:	2a01      	cmp	r2, #1
 801e310:	f000 810b 	beq.w	801e52a <lfs_dir_compact+0x27a>
 801e314:	2b01      	cmp	r3, #1
 801e316:	f000 8108 	beq.w	801e52a <lfs_dir_compact+0x27a>
 801e31a:	2a00      	cmp	r2, #0
 801e31c:	f000 8105 	beq.w	801e52a <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801e320:	1d21      	adds	r1, r4, #4
 801e322:	4628      	mov	r0, r5
 801e324:	f7ff f9d0 	bl	801d6c8 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801e328:	4603      	mov	r3, r0
 801e32a:	b330      	cbz	r0, 801e37a <lfs_dir_compact+0xca>
 801e32c:	f110 0f1c 	cmn.w	r0, #28
 801e330:	d11f      	bne.n	801e372 <lfs_dir_compact+0xc2>
 801e332:	f1b9 0f00 	cmp.w	r9, #0
 801e336:	d01c      	beq.n	801e372 <lfs_dir_compact+0xc2>
        relocated = true;
 801e338:	46cb      	mov	fp, r9
        tired = false;
 801e33a:	f04f 0900 	mov.w	r9, #0
 801e33e:	e001      	b.n	801e344 <lfs_dir_compact+0x94>
    bool relocated = false;
 801e340:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801e344:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801e346:	930e      	str	r3, [sp, #56]	@ 0x38
 801e348:	2300      	movs	r3, #0
 801e34a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e34c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e350:	9210      	str	r2, [sp, #64]	@ 0x40
 801e352:	9211      	str	r2, [sp, #68]	@ 0x44
 801e354:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801e356:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801e358:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e35a:	b19b      	cbz	r3, 801e384 <lfs_dir_compact+0xd4>
 801e35c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801e35e:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801e360:	6861      	ldr	r1, [r4, #4]
 801e362:	4628      	mov	r0, r5
 801e364:	f7fd fe8e 	bl	801c084 <lfs_bd_erase>
            if (err) {
 801e368:	4603      	mov	r3, r0
 801e36a:	b170      	cbz	r0, 801e38a <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801e36c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e370:	d0bd      	beq.n	801e2ee <lfs_dir_compact+0x3e>
}
 801e372:	4618      	mov	r0, r3
 801e374:	b01b      	add	sp, #108	@ 0x6c
 801e376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801e37a:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801e37e:	f04f 0b01 	mov.w	fp, #1
 801e382:	e7df      	b.n	801e344 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e384:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801e386:	3b08      	subs	r3, #8
 801e388:	e7e9      	b.n	801e35e <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801e38a:	2304      	movs	r3, #4
 801e38c:	f104 0208 	add.w	r2, r4, #8
 801e390:	a90e      	add	r1, sp, #56	@ 0x38
 801e392:	4628      	mov	r0, r5
 801e394:	f7ff fe0a 	bl	801dfac <lfs_dir_commitprog>
            if (err) {
 801e398:	4603      	mov	r3, r0
 801e39a:	b118      	cbz	r0, 801e3a4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801e39c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e3a0:	d1e7      	bne.n	801e372 <lfs_dir_compact+0xc2>
 801e3a2:	e7a4      	b.n	801e2ee <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801e3a4:	9516      	str	r5, [sp, #88]	@ 0x58
 801e3a6:	ab0e      	add	r3, sp, #56	@ 0x38
 801e3a8:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801e3aa:	ab16      	add	r3, sp, #88	@ 0x58
 801e3ac:	9308      	str	r3, [sp, #32]
 801e3ae:	4b65      	ldr	r3, [pc, #404]	@ (801e544 <lfs_dir_compact+0x294>)
 801e3b0:	9307      	str	r3, [sp, #28]
 801e3b2:	f1c8 0300 	rsb	r3, r8, #0
 801e3b6:	b21b      	sxth	r3, r3
 801e3b8:	9306      	str	r3, [sp, #24]
 801e3ba:	f8cd a014 	str.w	sl, [sp, #20]
 801e3be:	f8cd 8010 	str.w	r8, [sp, #16]
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	9203      	str	r2, [sp, #12]
 801e3c6:	4b60      	ldr	r3, [pc, #384]	@ (801e548 <lfs_dir_compact+0x298>)
 801e3c8:	9302      	str	r3, [sp, #8]
 801e3ca:	9701      	str	r7, [sp, #4]
 801e3cc:	9600      	str	r6, [sp, #0]
 801e3ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3d2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	f7fe f911 	bl	801c5fc <lfs_dir_traverse>
            if (err) {
 801e3da:	4603      	mov	r3, r0
 801e3dc:	b118      	cbz	r0, 801e3e6 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801e3de:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e3e2:	d1c6      	bne.n	801e372 <lfs_dir_compact+0xc2>
 801e3e4:	e783      	b.n	801e2ee <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e3e6:	69a2      	ldr	r2, [r4, #24]
 801e3e8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3ec:	d02c      	beq.n	801e448 <lfs_dir_compact+0x198>
 801e3ee:	69e2      	ldr	r2, [r4, #28]
 801e3f0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3f4:	d026      	beq.n	801e444 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801e3f6:	f013 0f01 	tst.w	r3, #1
 801e3fa:	d027      	beq.n	801e44c <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e400:	930c      	str	r3, [sp, #48]	@ 0x30
 801e402:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801e404:	f1bb 0f00 	cmp.w	fp, #0
 801e408:	d033      	beq.n	801e472 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801e40a:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801e40e:	a80b      	add	r0, sp, #44	@ 0x2c
 801e410:	f7fd fd10 	bl	801be34 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801e414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801e41a:	f023 0303 	bic.w	r3, r3, #3
 801e41e:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801e420:	aa0b      	add	r2, sp, #44	@ 0x2c
 801e422:	4621      	mov	r1, r4
 801e424:	4628      	mov	r0, r5
 801e426:	f7fe f859 	bl	801c4dc <lfs_dir_getgstate>
            if (err) {
 801e42a:	4603      	mov	r3, r0
 801e42c:	2800      	cmp	r0, #0
 801e42e:	d1a0      	bne.n	801e372 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801e430:	2b02      	cmp	r3, #2
 801e432:	dc29      	bgt.n	801e488 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801e434:	aa1a      	add	r2, sp, #104	@ 0x68
 801e436:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e43a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801e43e:	bb92      	cbnz	r2, 801e4a6 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801e440:	3301      	adds	r3, #1
 801e442:	e7f5      	b.n	801e430 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e444:	2301      	movs	r3, #1
 801e446:	e7d6      	b.n	801e3f6 <lfs_dir_compact+0x146>
 801e448:	2301      	movs	r3, #1
 801e44a:	e7d4      	b.n	801e3f6 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801e44c:	7de2      	ldrb	r2, [r4, #23]
 801e44e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801e452:	f104 0318 	add.w	r3, r4, #24
 801e456:	493d      	ldr	r1, [pc, #244]	@ (801e54c <lfs_dir_compact+0x29c>)
 801e458:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801e45c:	a90e      	add	r1, sp, #56	@ 0x38
 801e45e:	4628      	mov	r0, r5
 801e460:	f7ff fdc4 	bl	801dfec <lfs_dir_commitattr>
                if (err) {
 801e464:	4603      	mov	r3, r0
 801e466:	2800      	cmp	r0, #0
 801e468:	d0c8      	beq.n	801e3fc <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801e46a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e46e:	d180      	bne.n	801e372 <lfs_dir_compact+0xc2>
 801e470:	e73d      	b.n	801e2ee <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801e472:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801e476:	a80b      	add	r0, sp, #44	@ 0x2c
 801e478:	f7fd fcdc 	bl	801be34 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801e47c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801e480:	a80b      	add	r0, sp, #44	@ 0x2c
 801e482:	f7fd fcd7 	bl	801be34 <lfs_gstate_xor>
 801e486:	e7c0      	b.n	801e40a <lfs_dir_compact+0x15a>
    return true;
 801e488:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801e48a:	b973      	cbnz	r3, 801e4aa <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801e48c:	ab0b      	add	r3, sp, #44	@ 0x2c
 801e48e:	4a30      	ldr	r2, [pc, #192]	@ (801e550 <lfs_dir_compact+0x2a0>)
 801e490:	a90e      	add	r1, sp, #56	@ 0x38
 801e492:	4628      	mov	r0, r5
 801e494:	f7ff fdaa 	bl	801dfec <lfs_dir_commitattr>
                if (err) {
 801e498:	4603      	mov	r3, r0
 801e49a:	b130      	cbz	r0, 801e4aa <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801e49c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e4a0:	f47f af67 	bne.w	801e372 <lfs_dir_compact+0xc2>
 801e4a4:	e723      	b.n	801e2ee <lfs_dir_compact+0x3e>
            return false;
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	e7ef      	b.n	801e48a <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801e4aa:	a90e      	add	r1, sp, #56	@ 0x38
 801e4ac:	4628      	mov	r0, r5
 801e4ae:	f7ff fe03 	bl	801e0b8 <lfs_dir_commitcrc>
            if (err) {
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	b120      	cbz	r0, 801e4c0 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801e4b6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e4ba:	f47f af5a 	bne.w	801e372 <lfs_dir_compact+0xc2>
 801e4be:	e716      	b.n	801e2ee <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4c2:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801e4c4:	6a12      	ldr	r2, [r2, #32]
 801e4c6:	fbb3 f1f2 	udiv	r1, r3, r2
 801e4ca:	fb02 3311 	mls	r3, r2, r1, r3
 801e4ce:	b9db      	cbnz	r3, 801e508 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801e4d0:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801e4d2:	6862      	ldr	r2, [r4, #4]
 801e4d4:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801e4d6:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801e4d8:	ebaa 0808 	sub.w	r8, sl, r8
 801e4dc:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801e4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4e2:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801e4e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e4e6:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	64aa      	str	r2, [r5, #72]	@ 0x48
 801e4ec:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801e4ee:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801e4f0:	f1bb 0f00 	cmp.w	fp, #0
 801e4f4:	d106      	bne.n	801e504 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801e4f6:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801e4fa:	3530      	adds	r5, #48	@ 0x30
 801e4fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801e504:	465b      	mov	r3, fp
 801e506:	e734      	b.n	801e372 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e508:	4b12      	ldr	r3, [pc, #72]	@ (801e554 <lfs_dir_compact+0x2a4>)
 801e50a:	4a13      	ldr	r2, [pc, #76]	@ (801e558 <lfs_dir_compact+0x2a8>)
 801e50c:	f640 0106 	movw	r1, #2054	@ 0x806
 801e510:	4812      	ldr	r0, [pc, #72]	@ (801e55c <lfs_dir_compact+0x2ac>)
 801e512:	f00c fcab 	bl	802ae6c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801e516:	4b12      	ldr	r3, [pc, #72]	@ (801e560 <lfs_dir_compact+0x2b0>)
 801e518:	9300      	str	r3, [sp, #0]
 801e51a:	6863      	ldr	r3, [r4, #4]
 801e51c:	f640 0218 	movw	r2, #2072	@ 0x818
 801e520:	490e      	ldr	r1, [pc, #56]	@ (801e55c <lfs_dir_compact+0x2ac>)
 801e522:	4810      	ldr	r0, [pc, #64]	@ (801e564 <lfs_dir_compact+0x2b4>)
 801e524:	f00c fcd6 	bl	802aed4 <printf>
 801e528:	e6e8      	b.n	801e2fc <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801e52a:	4b0d      	ldr	r3, [pc, #52]	@ (801e560 <lfs_dir_compact+0x2b0>)
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	6863      	ldr	r3, [r4, #4]
 801e530:	f640 021d 	movw	r2, #2077	@ 0x81d
 801e534:	4909      	ldr	r1, [pc, #36]	@ (801e55c <lfs_dir_compact+0x2ac>)
 801e536:	480c      	ldr	r0, [pc, #48]	@ (801e568 <lfs_dir_compact+0x2b8>)
 801e538:	f00c fccc 	bl	802aed4 <printf>
            return LFS_ERR_NOSPC;
 801e53c:	f06f 031b 	mvn.w	r3, #27
 801e540:	e717      	b.n	801e372 <lfs_dir_compact+0xc2>
 801e542:	bf00      	nop
 801e544:	0801e0a7 	.word	0x0801e0a7
 801e548:	400ffc00 	.word	0x400ffc00
 801e54c:	000ffc08 	.word	0x000ffc08
 801e550:	7ffffc0c 	.word	0x7ffffc0c
 801e554:	0803a9d0 	.word	0x0803a9d0
 801e558:	0803b404 	.word	0x0803b404
 801e55c:	0803a734 	.word	0x0803a734
 801e560:	080381c0 	.word	0x080381c0
 801e564:	0803a94c 	.word	0x0803a94c
 801e568:	0803a9f8 	.word	0x0803a9f8

0801e56c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801e56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e570:	b08d      	sub	sp, #52	@ 0x34
 801e572:	4605      	mov	r5, r0
 801e574:	460c      	mov	r4, r1
 801e576:	4691      	mov	r9, r2
 801e578:	461e      	mov	r6, r3
 801e57a:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801e57e:	a904      	add	r1, sp, #16
 801e580:	f7ff f8fa 	bl	801d778 <lfs_dir_alloc>
    if (err) {
 801e584:	4607      	mov	r7, r0
 801e586:	b118      	cbz	r0, 801e590 <lfs_dir_split+0x24>
}
 801e588:	4638      	mov	r0, r7
 801e58a:	b00d      	add	sp, #52	@ 0x34
 801e58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801e590:	7de3      	ldrb	r3, [r4, #23]
 801e592:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801e596:	69a3      	ldr	r3, [r4, #24]
 801e598:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801e59a:	69e3      	ldr	r3, [r4, #28]
 801e59c:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801e59e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801e5a2:	9302      	str	r3, [sp, #8]
 801e5a4:	f8cd 8004 	str.w	r8, [sp, #4]
 801e5a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e5aa:	9300      	str	r3, [sp, #0]
 801e5ac:	4633      	mov	r3, r6
 801e5ae:	464a      	mov	r2, r9
 801e5b0:	a904      	add	r1, sp, #16
 801e5b2:	4628      	mov	r0, r5
 801e5b4:	f7ff fe7c 	bl	801e2b0 <lfs_dir_compact>
    if (res < 0) {
 801e5b8:	2800      	cmp	r0, #0
 801e5ba:	db17      	blt.n	801e5ec <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801e5bc:	9904      	ldr	r1, [sp, #16]
 801e5be:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801e5c0:	9a05      	ldr	r2, [sp, #20]
 801e5c2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801e5c4:	2301      	movs	r3, #1
 801e5c6:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e5c8:	6823      	ldr	r3, [r4, #0]
 801e5ca:	6a28      	ldr	r0, [r5, #32]
 801e5cc:	4283      	cmp	r3, r0
 801e5ce:	d007      	beq.n	801e5e0 <lfs_dir_split+0x74>
 801e5d0:	6866      	ldr	r6, [r4, #4]
 801e5d2:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801e5d4:	42a6      	cmp	r6, r4
 801e5d6:	d003      	beq.n	801e5e0 <lfs_dir_split+0x74>
 801e5d8:	42a3      	cmp	r3, r4
 801e5da:	d001      	beq.n	801e5e0 <lfs_dir_split+0x74>
 801e5dc:	42b0      	cmp	r0, r6
 801e5de:	d1d3      	bne.n	801e588 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801e5e0:	f1b8 0f00 	cmp.w	r8, #0
 801e5e4:	d1d0      	bne.n	801e588 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801e5e6:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801e5e8:	626a      	str	r2, [r5, #36]	@ 0x24
 801e5ea:	e7cd      	b.n	801e588 <lfs_dir_split+0x1c>
        return res;
 801e5ec:	4607      	mov	r7, r0
 801e5ee:	e7cb      	b.n	801e588 <lfs_dir_split+0x1c>

0801e5f0 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f4:	b091      	sub	sp, #68	@ 0x44
 801e5f6:	4607      	mov	r7, r0
 801e5f8:	4615      	mov	r5, r2
 801e5fa:	4699      	mov	r9, r3
 801e5fc:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801e600:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801e604:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801e608:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e60a:	e04c      	b.n	801e6a6 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801e60c:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801e60e:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801e610:	4403      	add	r3, r0
 801e612:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801e614:	fbb3 f1f0 	udiv	r1, r3, r0
 801e618:	fb00 3111 	mls	r1, r0, r1, r3
 801e61c:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801e61e:	4293      	cmp	r3, r2
 801e620:	bf28      	it	cs
 801e622:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801e624:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e626:	429a      	cmp	r2, r3
 801e628:	d92d      	bls.n	801e686 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801e62a:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801e62e:	eba6 0804 	sub.w	r8, r6, r4
 801e632:	f1b8 0f01 	cmp.w	r8, #1
 801e636:	d926      	bls.n	801e686 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801e638:	2200      	movs	r2, #0
 801e63a:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801e63c:	b2a1      	uxth	r1, r4
 801e63e:	ab0d      	add	r3, sp, #52	@ 0x34
 801e640:	9308      	str	r3, [sp, #32]
 801e642:	4b4d      	ldr	r3, [pc, #308]	@ (801e778 <lfs_dir_splittingcompact+0x188>)
 801e644:	9307      	str	r3, [sp, #28]
 801e646:	424b      	negs	r3, r1
 801e648:	b21b      	sxth	r3, r3
 801e64a:	9306      	str	r3, [sp, #24]
 801e64c:	9605      	str	r6, [sp, #20]
 801e64e:	9104      	str	r1, [sp, #16]
 801e650:	9203      	str	r2, [sp, #12]
 801e652:	4b4a      	ldr	r3, [pc, #296]	@ (801e77c <lfs_dir_splittingcompact+0x18c>)
 801e654:	9302      	str	r3, [sp, #8]
 801e656:	f8cd 9004 	str.w	r9, [sp, #4]
 801e65a:	9500      	str	r5, [sp, #0]
 801e65c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e660:	4651      	mov	r1, sl
 801e662:	4638      	mov	r0, r7
 801e664:	f7fd ffca 	bl	801c5fc <lfs_dir_traverse>
            if (err) {
 801e668:	4603      	mov	r3, r0
 801e66a:	2800      	cmp	r0, #0
 801e66c:	d15b      	bne.n	801e726 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801e66e:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801e672:	d8da      	bhi.n	801e62a <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801e674:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801e676:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801e678:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801e67c:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801e67e:	2800      	cmp	r0, #0
 801e680:	d0c4      	beq.n	801e60c <lfs_dir_splittingcompact+0x1c>
 801e682:	0843      	lsrs	r3, r0, #1
 801e684:	e7c3      	b.n	801e60e <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801e686:	455c      	cmp	r4, fp
 801e688:	d022      	beq.n	801e6d0 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801e68a:	b2a4      	uxth	r4, r4
 801e68c:	9602      	str	r6, [sp, #8]
 801e68e:	9401      	str	r4, [sp, #4]
 801e690:	f8cd a000 	str.w	sl, [sp]
 801e694:	464b      	mov	r3, r9
 801e696:	462a      	mov	r2, r5
 801e698:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e69a:	4638      	mov	r0, r7
 801e69c:	f7ff ff66 	bl	801e56c <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801e6a0:	4603      	mov	r3, r0
 801e6a2:	b910      	cbnz	r0, 801e6aa <lfs_dir_splittingcompact+0xba>
            end = split;
 801e6a4:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801e6a6:	465c      	mov	r4, fp
        while (end - split > 1) {
 801e6a8:	e7c1      	b.n	801e62e <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801e6aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801e6ae:	f110 0f1c 	cmn.w	r0, #28
 801e6b2:	d138      	bne.n	801e726 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801e6b4:	4b32      	ldr	r3, [pc, #200]	@ (801e780 <lfs_dir_splittingcompact+0x190>)
 801e6b6:	9301      	str	r3, [sp, #4]
 801e6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e6bc:	9300      	str	r3, [sp, #0]
 801e6be:	f8d8 3000 	ldr.w	r3, [r8]
 801e6c2:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801e6c6:	492f      	ldr	r1, [pc, #188]	@ (801e784 <lfs_dir_splittingcompact+0x194>)
 801e6c8:	482f      	ldr	r0, [pc, #188]	@ (801e788 <lfs_dir_splittingcompact+0x198>)
 801e6ca:	f00c fc03 	bl	802aed4 <printf>
            break;
 801e6ce:	e001      	b.n	801e6d4 <lfs_dir_splittingcompact+0xe4>
 801e6d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801e6d4:	4641      	mov	r1, r8
 801e6d6:	4638      	mov	r0, r7
 801e6d8:	f7fd fc76 	bl	801bfc8 <lfs_dir_needsrelocation>
 801e6dc:	b1b8      	cbz	r0, 801e70e <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801e6de:	2300      	movs	r3, #0
 801e6e0:	930e      	str	r3, [sp, #56]	@ 0x38
 801e6e2:	2301      	movs	r3, #1
 801e6e4:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e6e6:	f8d8 2000 	ldr.w	r2, [r8]
 801e6ea:	b132      	cbz	r2, 801e6fa <lfs_dir_splittingcompact+0x10a>
 801e6ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e6f0:	2b01      	cmp	r3, #1
 801e6f2:	d002      	beq.n	801e6fa <lfs_dir_splittingcompact+0x10a>
 801e6f4:	2a01      	cmp	r2, #1
 801e6f6:	d000      	beq.n	801e6fa <lfs_dir_splittingcompact+0x10a>
 801e6f8:	b94b      	cbnz	r3, 801e70e <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801e6fa:	4638      	mov	r0, r7
 801e6fc:	f7ff fbe4 	bl	801dec8 <lfs_fs_size_>
        if (size < 0) {
 801e700:	1e03      	subs	r3, r0, #0
 801e702:	db10      	blt.n	801e726 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801e704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e706:	1ad3      	subs	r3, r2, r3
 801e708:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801e70c:	d80f      	bhi.n	801e72e <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801e70e:	9602      	str	r6, [sp, #8]
 801e710:	f8cd b004 	str.w	fp, [sp, #4]
 801e714:	f8cd a000 	str.w	sl, [sp]
 801e718:	464b      	mov	r3, r9
 801e71a:	462a      	mov	r2, r5
 801e71c:	4641      	mov	r1, r8
 801e71e:	4638      	mov	r0, r7
 801e720:	f7ff fdc6 	bl	801e2b0 <lfs_dir_compact>
 801e724:	4603      	mov	r3, r0
}
 801e726:	4618      	mov	r0, r3
 801e728:	b011      	add	sp, #68	@ 0x44
 801e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801e72e:	4b14      	ldr	r3, [pc, #80]	@ (801e780 <lfs_dir_splittingcompact+0x190>)
 801e730:	9300      	str	r3, [sp, #0]
 801e732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e736:	f640 0286 	movw	r2, #2182	@ 0x886
 801e73a:	4912      	ldr	r1, [pc, #72]	@ (801e784 <lfs_dir_splittingcompact+0x194>)
 801e73c:	4813      	ldr	r0, [pc, #76]	@ (801e78c <lfs_dir_splittingcompact+0x19c>)
 801e73e:	f00c fbc9 	bl	802aed4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801e742:	9602      	str	r6, [sp, #8]
 801e744:	f8cd b004 	str.w	fp, [sp, #4]
 801e748:	f8cd a000 	str.w	sl, [sp]
 801e74c:	464b      	mov	r3, r9
 801e74e:	462a      	mov	r2, r5
 801e750:	4641      	mov	r1, r8
 801e752:	4638      	mov	r0, r7
 801e754:	f7ff ff0a 	bl	801e56c <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801e758:	4603      	mov	r3, r0
 801e75a:	b150      	cbz	r0, 801e772 <lfs_dir_splittingcompact+0x182>
 801e75c:	f110 0f1c 	cmn.w	r0, #28
 801e760:	d1e1      	bne.n	801e726 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801e762:	4b07      	ldr	r3, [pc, #28]	@ (801e780 <lfs_dir_splittingcompact+0x190>)
 801e764:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801e768:	4906      	ldr	r1, [pc, #24]	@ (801e784 <lfs_dir_splittingcompact+0x194>)
 801e76a:	4809      	ldr	r0, [pc, #36]	@ (801e790 <lfs_dir_splittingcompact+0x1a0>)
 801e76c:	f00c fbb2 	bl	802aed4 <printf>
 801e770:	e7cd      	b.n	801e70e <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801e772:	2601      	movs	r6, #1
 801e774:	e7cb      	b.n	801e70e <lfs_dir_splittingcompact+0x11e>
 801e776:	bf00      	nop
 801e778:	0801bfad 	.word	0x0801bfad
 801e77c:	400ffc00 	.word	0x400ffc00
 801e780:	080381c0 	.word	0x080381c0
 801e784:	0803a734 	.word	0x0803a734
 801e788:	0803aa30 	.word	0x0803aa30
 801e78c:	0803aa60 	.word	0x0803aa60
 801e790:	0803aa90 	.word	0x0803aa90

0801e794 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e798:	b09b      	sub	sp, #108	@ 0x6c
 801e79a:	4607      	mov	r7, r0
 801e79c:	460e      	mov	r6, r1
 801e79e:	4691      	mov	r9, r2
 801e7a0:	461d      	mov	r5, r3
 801e7a2:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801e7a6:	2300      	movs	r3, #0
    bool hasdelete = false;
 801e7a8:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801e7aa:	e003      	b.n	801e7b4 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801e7ac:	8ab2      	ldrh	r2, [r6, #20]
 801e7ae:	3201      	adds	r2, #1
 801e7b0:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801e7b2:	3301      	adds	r3, #1
 801e7b4:	4543      	cmp	r3, r8
 801e7b6:	da2d      	bge.n	801e814 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801e7b8:	00d8      	lsls	r0, r3, #3
 801e7ba:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801e7be:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801e7c2:	0d11      	lsrs	r1, r2, #20
 801e7c4:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801e7c8:	f240 4e01 	movw	lr, #1025	@ 0x401
 801e7cc:	4572      	cmp	r2, lr
 801e7ce:	d0ed      	beq.n	801e7ac <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801e7d0:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801e7d4:	4572      	cmp	r2, lr
 801e7d6:	d00f      	beq.n	801e7f8 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801e7d8:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801e7dc:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801e7e0:	d1e7      	bne.n	801e7b2 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801e7e2:	6862      	ldr	r2, [r4, #4]
 801e7e4:	6812      	ldr	r2, [r2, #0]
 801e7e6:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801e7e8:	6862      	ldr	r2, [r4, #4]
 801e7ea:	6852      	ldr	r2, [r2, #4]
 801e7ec:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801e7ee:	582a      	ldr	r2, [r5, r0]
 801e7f0:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801e7f4:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801e7f6:	e7dc      	b.n	801e7b2 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801e7f8:	8ab2      	ldrh	r2, [r6, #20]
 801e7fa:	b122      	cbz	r2, 801e806 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801e7fc:	3a01      	subs	r2, #1
 801e7fe:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801e800:	f04f 0c01 	mov.w	ip, #1
 801e804:	e7d5      	b.n	801e7b2 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801e806:	4ba0      	ldr	r3, [pc, #640]	@ (801ea88 <lfs_dir_relocatingcommit+0x2f4>)
 801e808:	4aa0      	ldr	r2, [pc, #640]	@ (801ea8c <lfs_dir_relocatingcommit+0x2f8>)
 801e80a:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801e80e:	48a0      	ldr	r0, [pc, #640]	@ (801ea90 <lfs_dir_relocatingcommit+0x2fc>)
 801e810:	f00c fb2c 	bl	802ae6c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801e814:	f1bc 0f00 	cmp.w	ip, #0
 801e818:	d01b      	beq.n	801e852 <lfs_dir_relocatingcommit+0xbe>
 801e81a:	8ab3      	ldrh	r3, [r6, #20]
 801e81c:	b9cb      	cbnz	r3, 801e852 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801e81e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e820:	b15b      	cbz	r3, 801e83a <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801e822:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e824:	4631      	mov	r1, r6
 801e826:	4638      	mov	r0, r7
 801e828:	f7ff fb5e 	bl	801dee8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801e82c:	4682      	mov	sl, r0
 801e82e:	b158      	cbz	r0, 801e848 <lfs_dir_relocatingcommit+0xb4>
 801e830:	f110 0f02 	cmn.w	r0, #2
 801e834:	f040 8159 	bne.w	801eaea <lfs_dir_relocatingcommit+0x356>
 801e838:	e00b      	b.n	801e852 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801e83a:	4b96      	ldr	r3, [pc, #600]	@ (801ea94 <lfs_dir_relocatingcommit+0x300>)
 801e83c:	4a93      	ldr	r2, [pc, #588]	@ (801ea8c <lfs_dir_relocatingcommit+0x2f8>)
 801e83e:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801e842:	4893      	ldr	r0, [pc, #588]	@ (801ea90 <lfs_dir_relocatingcommit+0x2fc>)
 801e844:	f00c fb12 	bl	802ae6c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801e848:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e84a:	7ddb      	ldrb	r3, [r3, #23]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	f040 80bf 	bne.w	801e9d0 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801e852:	7db4      	ldrb	r4, [r6, #22]
 801e854:	2c00      	cmp	r4, #0
 801e856:	d02e      	beq.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801e858:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801e85a:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801e85c:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801e85e:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801e860:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801e862:	9212      	str	r2, [sp, #72]	@ 0x48
 801e864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e868:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e86a:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801e86c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e86e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e870:	2b00      	cmp	r3, #0
 801e872:	d03c      	beq.n	801e8ee <lfs_dir_relocatingcommit+0x15a>
 801e874:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801e876:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801e878:	9718      	str	r7, [sp, #96]	@ 0x60
 801e87a:	ab10      	add	r3, sp, #64	@ 0x40
 801e87c:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801e87e:	ab18      	add	r3, sp, #96	@ 0x60
 801e880:	9308      	str	r3, [sp, #32]
 801e882:	4b85      	ldr	r3, [pc, #532]	@ (801ea98 <lfs_dir_relocatingcommit+0x304>)
 801e884:	9307      	str	r3, [sp, #28]
 801e886:	2300      	movs	r3, #0
 801e888:	9306      	str	r3, [sp, #24]
 801e88a:	9305      	str	r3, [sp, #20]
 801e88c:	9304      	str	r3, [sp, #16]
 801e88e:	9303      	str	r3, [sp, #12]
 801e890:	9302      	str	r3, [sp, #8]
 801e892:	f8cd 8004 	str.w	r8, [sp, #4]
 801e896:	9500      	str	r5, [sp, #0]
 801e898:	6933      	ldr	r3, [r6, #16]
 801e89a:	68f2      	ldr	r2, [r6, #12]
 801e89c:	4631      	mov	r1, r6
 801e89e:	4638      	mov	r0, r7
 801e8a0:	f7fd feac 	bl	801c5fc <lfs_dir_traverse>
        if (err) {
 801e8a4:	4682      	mov	sl, r0
 801e8a6:	b328      	cbz	r0, 801e8f4 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e8a8:	f110 0f1c 	cmn.w	r0, #28
 801e8ac:	d003      	beq.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
 801e8ae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e8b2:	f040 811a 	bne.w	801eaea <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801e8b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e8ba:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801e8bc:	8ab3      	ldrh	r3, [r6, #20]
 801e8be:	9302      	str	r3, [sp, #8]
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	9301      	str	r3, [sp, #4]
 801e8c4:	9600      	str	r6, [sp, #0]
 801e8c6:	4643      	mov	r3, r8
 801e8c8:	462a      	mov	r2, r5
 801e8ca:	4631      	mov	r1, r6
 801e8cc:	4638      	mov	r0, r7
 801e8ce:	f7ff fe8f 	bl	801e5f0 <lfs_dir_splittingcompact>
    if (state < 0) {
 801e8d2:	1e01      	subs	r1, r0, #0
 801e8d4:	f2c0 8106 	blt.w	801eae4 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801e8d8:	f8d9 b000 	ldr.w	fp, [r9]
 801e8dc:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801e8e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801e8e4:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e8e6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801e8e8:	4692      	mov	sl, r2
 801e8ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e8ec:	e0db      	b.n	801eaa6 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e8ee:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801e8f0:	3b08      	subs	r3, #8
 801e8f2:	e7c0      	b.n	801e876 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8f8:	930e      	str	r3, [sp, #56]	@ 0x38
 801e8fa:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801e8fc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e900:	a80d      	add	r0, sp, #52	@ 0x34
 801e902:	f7fd fa97 	bl	801be34 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801e906:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801e90a:	a80d      	add	r0, sp, #52	@ 0x34
 801e90c:	f7fd fa92 	bl	801be34 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801e910:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801e914:	a80d      	add	r0, sp, #52	@ 0x34
 801e916:	f7fd fa8d 	bl	801be34 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801e91a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e91c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801e920:	f023 0303 	bic.w	r3, r3, #3
 801e924:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801e926:	e001      	b.n	801e92c <lfs_dir_relocatingcommit+0x198>
 801e928:	f10a 0a01 	add.w	sl, sl, #1
 801e92c:	f1ba 0f02 	cmp.w	sl, #2
 801e930:	dc07      	bgt.n	801e942 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801e932:	ab1a      	add	r3, sp, #104	@ 0x68
 801e934:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e938:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d0f3      	beq.n	801e928 <lfs_dir_relocatingcommit+0x194>
            return false;
 801e940:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801e942:	b9c4      	cbnz	r4, 801e976 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801e944:	aa0d      	add	r2, sp, #52	@ 0x34
 801e946:	4631      	mov	r1, r6
 801e948:	4638      	mov	r0, r7
 801e94a:	f7fd fdc7 	bl	801c4dc <lfs_dir_getgstate>
            if (err) {
 801e94e:	4682      	mov	sl, r0
 801e950:	2800      	cmp	r0, #0
 801e952:	f040 80ca 	bne.w	801eaea <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801e956:	ab0d      	add	r3, sp, #52	@ 0x34
 801e958:	4a50      	ldr	r2, [pc, #320]	@ (801ea9c <lfs_dir_relocatingcommit+0x308>)
 801e95a:	a910      	add	r1, sp, #64	@ 0x40
 801e95c:	4638      	mov	r0, r7
 801e95e:	f7ff fb45 	bl	801dfec <lfs_dir_commitattr>
            if (err) {
 801e962:	4682      	mov	sl, r0
 801e964:	b138      	cbz	r0, 801e976 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e966:	f110 0f1c 	cmn.w	r0, #28
 801e96a:	d0a4      	beq.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
 801e96c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e970:	f040 80bb 	bne.w	801eaea <lfs_dir_relocatingcommit+0x356>
 801e974:	e79f      	b.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801e976:	a910      	add	r1, sp, #64	@ 0x40
 801e978:	4638      	mov	r0, r7
 801e97a:	f7ff fb9d 	bl	801e0b8 <lfs_dir_commitcrc>
        if (err) {
 801e97e:	4682      	mov	sl, r0
 801e980:	b138      	cbz	r0, 801e992 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e982:	f110 0f1c 	cmn.w	r0, #28
 801e986:	d096      	beq.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
 801e988:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e98c:	f040 80ad 	bne.w	801eaea <lfs_dir_relocatingcommit+0x356>
 801e990:	e791      	b.n	801e8b6 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e994:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e996:	6a11      	ldr	r1, [r2, #32]
 801e998:	fbb3 f2f1 	udiv	r2, r3, r1
 801e99c:	fb01 3212 	mls	r2, r1, r2, r3
 801e9a0:	b97a      	cbnz	r2, 801e9c2 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801e9a2:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801e9a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e9a6:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801e9a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801e9ac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e9b0:	ca07      	ldmia	r2, {r0, r1, r2}
 801e9b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 801e9ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801e9bc:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801e9be:	4651      	mov	r1, sl
 801e9c0:	e78a      	b.n	801e8d8 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e9c2:	4b37      	ldr	r3, [pc, #220]	@ (801eaa0 <lfs_dir_relocatingcommit+0x30c>)
 801e9c4:	4a31      	ldr	r2, [pc, #196]	@ (801ea8c <lfs_dir_relocatingcommit+0x2f8>)
 801e9c6:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801e9ca:	4831      	ldr	r0, [pc, #196]	@ (801ea90 <lfs_dir_relocatingcommit+0x2fc>)
 801e9cc:	f00c fa4e 	bl	802ae6c <__assert_func>
            state = LFS_OK_DROPPED;
 801e9d0:	2102      	movs	r1, #2
 801e9d2:	e781      	b.n	801e8d8 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801e9d4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e9d8:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e9dc:	4584      	cmp	ip, r0
 801e9de:	d10e      	bne.n	801e9fe <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801e9e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e9e4:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801e9e6:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801e9e8:	3301      	adds	r3, #1
 801e9ea:	4543      	cmp	r3, r8
 801e9ec:	da34      	bge.n	801ea58 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e9ee:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801e9f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e9f6:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801e9fa:	4282      	cmp	r2, r0
 801e9fc:	d0ea      	beq.n	801e9d4 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e9fe:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801ea02:	4282      	cmp	r2, r0
 801ea04:	d011      	beq.n	801ea2a <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801ea06:	f240 4001 	movw	r0, #1025	@ 0x401
 801ea0a:	4282      	cmp	r2, r0
 801ea0c:	d1ec      	bne.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801ea0e:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801ea10:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801ea14:	428a      	cmp	r2, r1
 801ea16:	d3e7      	bcc.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801ea18:	3201      	adds	r2, #1
 801ea1a:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801ea1c:	79a2      	ldrb	r2, [r4, #6]
 801ea1e:	2a02      	cmp	r2, #2
 801ea20:	d1e2      	bne.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801ea22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801ea24:	3201      	adds	r2, #1
 801ea26:	62a2      	str	r2, [r4, #40]	@ 0x28
 801ea28:	e7de      	b.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801ea2a:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801ea2c:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801ea30:	4560      	cmp	r0, ip
 801ea32:	d9e8      	bls.n	801ea06 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801ea34:	3801      	subs	r0, #1
 801ea36:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801ea38:	79a2      	ldrb	r2, [r4, #6]
 801ea3a:	2a02      	cmp	r2, #2
 801ea3c:	d1d4      	bne.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801ea3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801ea40:	3a01      	subs	r2, #1
 801ea42:	62a2      	str	r2, [r4, #40]	@ 0x28
 801ea44:	e7d0      	b.n	801e9e8 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801ea46:	f104 0220 	add.w	r2, r4, #32
 801ea4a:	f104 0108 	add.w	r1, r4, #8
 801ea4e:	4638      	mov	r0, r7
 801ea50:	f7fe fd24 	bl	801d49c <lfs_dir_fetch>
                if (err) {
 801ea54:	2800      	cmp	r0, #0
 801ea56:	d147      	bne.n	801eae8 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801ea58:	88a3      	ldrh	r3, [r4, #4]
 801ea5a:	8ba1      	ldrh	r1, [r4, #28]
 801ea5c:	428b      	cmp	r3, r1
 801ea5e:	d321      	bcc.n	801eaa4 <lfs_dir_relocatingcommit+0x310>
 801ea60:	7fe2      	ldrb	r2, [r4, #31]
 801ea62:	b1fa      	cbz	r2, 801eaa4 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ea64:	6a22      	ldr	r2, [r4, #32]
 801ea66:	6a38      	ldr	r0, [r7, #32]
 801ea68:	4282      	cmp	r2, r0
 801ea6a:	d0ec      	beq.n	801ea46 <lfs_dir_relocatingcommit+0x2b2>
 801ea6c:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801ea70:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801ea74:	45e6      	cmp	lr, ip
 801ea76:	d0e6      	beq.n	801ea46 <lfs_dir_relocatingcommit+0x2b2>
 801ea78:	4562      	cmp	r2, ip
 801ea7a:	d0e4      	beq.n	801ea46 <lfs_dir_relocatingcommit+0x2b2>
 801ea7c:	4570      	cmp	r0, lr
 801ea7e:	d0e2      	beq.n	801ea46 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801ea80:	1a5b      	subs	r3, r3, r1
 801ea82:	80a3      	strh	r3, [r4, #4]
 801ea84:	e7df      	b.n	801ea46 <lfs_dir_relocatingcommit+0x2b2>
 801ea86:	bf00      	nop
 801ea88:	0803aabc 	.word	0x0803aabc
 801ea8c:	0803b434 	.word	0x0803b434
 801ea90:	0803a734 	.word	0x0803a734
 801ea94:	0803aacc 	.word	0x0803aacc
 801ea98:	0801e0a7 	.word	0x0801e0a7
 801ea9c:	7ffffc0c 	.word	0x7ffffc0c
 801eaa0:	0803a9d0 	.word	0x0803a9d0
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801eaa4:	6824      	ldr	r4, [r4, #0]
 801eaa6:	b1d4      	cbz	r4, 801eade <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801eaa8:	68a3      	ldr	r3, [r4, #8]
 801eaaa:	459b      	cmp	fp, r3
 801eaac:	d006      	beq.n	801eabc <lfs_dir_relocatingcommit+0x328>
 801eaae:	68e2      	ldr	r2, [r4, #12]
 801eab0:	4592      	cmp	sl, r2
 801eab2:	d003      	beq.n	801eabc <lfs_dir_relocatingcommit+0x328>
 801eab4:	459a      	cmp	sl, r3
 801eab6:	d001      	beq.n	801eabc <lfs_dir_relocatingcommit+0x328>
 801eab8:	4593      	cmp	fp, r2
 801eaba:	d1f3      	bne.n	801eaa4 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801eabc:	f104 0c08 	add.w	ip, r4, #8
 801eac0:	46b6      	mov	lr, r6
 801eac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801eac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801eaca:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801eace:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801ead2:	f104 0308 	add.w	r3, r4, #8
 801ead6:	454b      	cmp	r3, r9
 801ead8:	d0be      	beq.n	801ea58 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801eada:	2300      	movs	r3, #0
 801eadc:	e785      	b.n	801e9ea <lfs_dir_relocatingcommit+0x256>
    return state;
 801eade:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801eae0:	468a      	mov	sl, r1
 801eae2:	e002      	b.n	801eaea <lfs_dir_relocatingcommit+0x356>
        return state;
 801eae4:	468a      	mov	sl, r1
 801eae6:	e000      	b.n	801eaea <lfs_dir_relocatingcommit+0x356>
 801eae8:	4682      	mov	sl, r0
}
 801eaea:	4650      	mov	r0, sl
 801eaec:	b01b      	add	sp, #108	@ 0x6c
 801eaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaf2:	bf00      	nop

0801eaf4 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801eaf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eaf8:	b0a3      	sub	sp, #140	@ 0x8c
 801eafa:	4605      	mov	r5, r0
 801eafc:	460e      	mov	r6, r1
 801eafe:	4690      	mov	r8, r2
 801eb00:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801eb02:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801eb04:	e003      	b.n	801eb0e <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801eb06:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801eb08:	2b01      	cmp	r3, #1
 801eb0a:	d012      	beq.n	801eb32 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801eb0c:	6824      	ldr	r4, [r4, #0]
 801eb0e:	b34c      	cbz	r4, 801eb64 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801eb10:	f104 0108 	add.w	r1, r4, #8
 801eb14:	42b1      	cmp	r1, r6
 801eb16:	d0f9      	beq.n	801eb0c <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801eb18:	68a1      	ldr	r1, [r4, #8]
 801eb1a:	6833      	ldr	r3, [r6, #0]
 801eb1c:	428b      	cmp	r3, r1
 801eb1e:	d0f2      	beq.n	801eb06 <lfs_dir_orphaningcommit+0x12>
 801eb20:	68e0      	ldr	r0, [r4, #12]
 801eb22:	6872      	ldr	r2, [r6, #4]
 801eb24:	4282      	cmp	r2, r0
 801eb26:	d0ee      	beq.n	801eb06 <lfs_dir_orphaningcommit+0x12>
 801eb28:	428a      	cmp	r2, r1
 801eb2a:	d0ec      	beq.n	801eb06 <lfs_dir_orphaningcommit+0x12>
 801eb2c:	4298      	cmp	r0, r3
 801eb2e:	d1ed      	bne.n	801eb0c <lfs_dir_orphaningcommit+0x18>
 801eb30:	e7e9      	b.n	801eb06 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801eb32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb34:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801eb38:	d0e8      	beq.n	801eb0c <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801eb3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801eb3c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801eb3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801eb40:	429a      	cmp	r2, r3
 801eb42:	d9e3      	bls.n	801eb0c <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801eb44:	4621      	mov	r1, r4
 801eb46:	4628      	mov	r0, r5
 801eb48:	f7fe feee 	bl	801d928 <lfs_file_outline>
            if (err) {
 801eb4c:	4607      	mov	r7, r0
 801eb4e:	2800      	cmp	r0, #0
 801eb50:	f040 81bc 	bne.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801eb54:	4621      	mov	r1, r4
 801eb56:	4628      	mov	r0, r5
 801eb58:	f7ff f866 	bl	801dc28 <lfs_file_flush>
            if (err) {
 801eb5c:	4607      	mov	r7, r0
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	d0d4      	beq.n	801eb0c <lfs_dir_orphaningcommit+0x18>
 801eb62:	e1b3      	b.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801eb64:	6833      	ldr	r3, [r6, #0]
 801eb66:	9316      	str	r3, [sp, #88]	@ 0x58
 801eb68:	6873      	ldr	r3, [r6, #4]
 801eb6a:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801eb6c:	ac0e      	add	r4, sp, #56	@ 0x38
 801eb6e:	4637      	mov	r7, r6
 801eb70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801eb72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eb74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801eb78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801eb7c:	ab06      	add	r3, sp, #24
 801eb7e:	9301      	str	r3, [sp, #4]
 801eb80:	f8cd 9000 	str.w	r9, [sp]
 801eb84:	4643      	mov	r3, r8
 801eb86:	4632      	mov	r2, r6
 801eb88:	a90e      	add	r1, sp, #56	@ 0x38
 801eb8a:	4628      	mov	r0, r5
 801eb8c:	f7ff fe02 	bl	801e794 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801eb90:	1e07      	subs	r7, r0, #0
 801eb92:	f2c0 819b 	blt.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801eb96:	6833      	ldr	r3, [r6, #0]
 801eb98:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eb9a:	429a      	cmp	r2, r3
 801eb9c:	d007      	beq.n	801ebae <lfs_dir_orphaningcommit+0xba>
 801eb9e:	6870      	ldr	r0, [r6, #4]
 801eba0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801eba2:	4281      	cmp	r1, r0
 801eba4:	d003      	beq.n	801ebae <lfs_dir_orphaningcommit+0xba>
 801eba6:	4299      	cmp	r1, r3
 801eba8:	d001      	beq.n	801ebae <lfs_dir_orphaningcommit+0xba>
 801ebaa:	4290      	cmp	r0, r2
 801ebac:	d109      	bne.n	801ebc2 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801ebae:	4634      	mov	r4, r6
 801ebb0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801ebb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ebb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ebba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801ebbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801ebc2:	2f02      	cmp	r7, #2
 801ebc4:	d001      	beq.n	801ebca <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801ebc6:	2600      	movs	r6, #0
 801ebc8:	e0b8      	b.n	801ed3c <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801ebca:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801ebce:	4631      	mov	r1, r6
 801ebd0:	4628      	mov	r0, r5
 801ebd2:	f7fd fc83 	bl	801c4dc <lfs_dir_getgstate>
        if (err) {
 801ebd6:	4607      	mov	r7, r0
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	f040 8177 	bne.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801ebde:	9b06      	ldr	r3, [sp, #24]
 801ebe0:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801ebe2:	9b07      	ldr	r3, [sp, #28]
 801ebe4:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801ebe6:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801ebea:	7df2      	ldrb	r2, [r6, #23]
 801ebec:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ebf0:	4ba2      	ldr	r3, [pc, #648]	@ (801ee7c <lfs_dir_orphaningcommit+0x388>)
 801ebf2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ebf6:	9318      	str	r3, [sp, #96]	@ 0x60
 801ebf8:	9119      	str	r1, [sp, #100]	@ 0x64
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	9301      	str	r3, [sp, #4]
 801ebfe:	2301      	movs	r3, #1
 801ec00:	9300      	str	r3, [sp, #0]
 801ec02:	ab18      	add	r3, sp, #96	@ 0x60
 801ec04:	aa16      	add	r2, sp, #88	@ 0x58
 801ec06:	a906      	add	r1, sp, #24
 801ec08:	4628      	mov	r0, r5
 801ec0a:	f7ff fdc3 	bl	801e794 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801ec0e:	1e07      	subs	r7, r0, #0
 801ec10:	f2c0 815c 	blt.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801ec14:	ac0e      	add	r4, sp, #56	@ 0x38
 801ec16:	ae06      	add	r6, sp, #24
 801ec18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ec1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ec1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801ec20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ec24:	e7cf      	b.n	801ebc6 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801ec26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec28:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801ec2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ec2c:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801ec2e:	799a      	ldrb	r2, [r3, #6]
 801ec30:	2a02      	cmp	r2, #2
 801ec32:	d00d      	beq.n	801ec50 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	b1db      	cbz	r3, 801ec70 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ec38:	689a      	ldr	r2, [r3, #8]
 801ec3a:	4291      	cmp	r1, r2
 801ec3c:	d0f3      	beq.n	801ec26 <lfs_dir_orphaningcommit+0x132>
 801ec3e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ec40:	68dc      	ldr	r4, [r3, #12]
 801ec42:	4284      	cmp	r4, r0
 801ec44:	d0ef      	beq.n	801ec26 <lfs_dir_orphaningcommit+0x132>
 801ec46:	428c      	cmp	r4, r1
 801ec48:	d0ed      	beq.n	801ec26 <lfs_dir_orphaningcommit+0x132>
 801ec4a:	4290      	cmp	r0, r2
 801ec4c:	d1ef      	bne.n	801ec2e <lfs_dir_orphaningcommit+0x13a>
 801ec4e:	e7ea      	b.n	801ec26 <lfs_dir_orphaningcommit+0x132>
 801ec50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ec52:	428a      	cmp	r2, r1
 801ec54:	d007      	beq.n	801ec66 <lfs_dir_orphaningcommit+0x172>
 801ec56:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ec58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801ec5a:	42a0      	cmp	r0, r4
 801ec5c:	d003      	beq.n	801ec66 <lfs_dir_orphaningcommit+0x172>
 801ec5e:	4288      	cmp	r0, r1
 801ec60:	d001      	beq.n	801ec66 <lfs_dir_orphaningcommit+0x172>
 801ec62:	4294      	cmp	r4, r2
 801ec64:	d1e6      	bne.n	801ec34 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801ec66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec68:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801ec6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ec6c:	631a      	str	r2, [r3, #48]	@ 0x30
 801ec6e:	e7e1      	b.n	801ec34 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801ec70:	aa06      	add	r2, sp, #24
 801ec72:	a916      	add	r1, sp, #88	@ 0x58
 801ec74:	4628      	mov	r0, r5
 801ec76:	f7fe fba5 	bl	801d3c4 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801ec7a:	1e04      	subs	r4, r0, #0
 801ec7c:	f280 8082 	bge.w	801ed84 <lfs_dir_orphaningcommit+0x290>
 801ec80:	f114 0f02 	cmn.w	r4, #2
 801ec84:	f040 8128 	bne.w	801eed8 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801ec88:	f114 0802 	adds.w	r8, r4, #2
 801ec8c:	bf18      	it	ne
 801ec8e:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801ec92:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801ec94:	aa06      	add	r2, sp, #24
 801ec96:	a916      	add	r1, sp, #88	@ 0x58
 801ec98:	4628      	mov	r0, r5
 801ec9a:	f7ff f925 	bl	801dee8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801ec9e:	4603      	mov	r3, r0
 801eca0:	b118      	cbz	r0, 801ecaa <lfs_dir_orphaningcommit+0x1b6>
 801eca2:	f110 0f02 	cmn.w	r0, #2
 801eca6:	f040 8119 	bne.w	801eedc <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801ecaa:	f114 0f02 	cmn.w	r4, #2
 801ecae:	f000 80d6 	beq.w	801ee5e <lfs_dir_orphaningcommit+0x36a>
 801ecb2:	f113 0f02 	cmn.w	r3, #2
 801ecb6:	f000 80cb 	beq.w	801ee50 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801ecba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801ecbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	f040 80d1 	bne.w	801ee68 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801ecc6:	a906      	add	r1, sp, #24
 801ecc8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801eccc:	f7fd f8c4 	bl	801be58 <lfs_gstate_hasmovehere>
 801ecd0:	2800      	cmp	r0, #0
 801ecd2:	f040 80e1 	bne.w	801ee98 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801ecd6:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801ecda:	9b06      	ldr	r3, [sp, #24]
 801ecdc:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801ecde:	9b07      	ldr	r3, [sp, #28]
 801ece0:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801ece2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ece6:	429c      	cmp	r4, r3
 801ece8:	f000 80ec 	beq.w	801eec4 <lfs_dir_orphaningcommit+0x3d0>
 801ecec:	02a3      	lsls	r3, r4, #10
 801ecee:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801ecf2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ecf6:	931e      	str	r3, [sp, #120]	@ 0x78
 801ecf8:	2100      	movs	r1, #0
 801ecfa:	911f      	str	r1, [sp, #124]	@ 0x7c
 801ecfc:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801ed00:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ed04:	4b5d      	ldr	r3, [pc, #372]	@ (801ee7c <lfs_dir_orphaningcommit+0x388>)
 801ed06:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ed0a:	9320      	str	r3, [sp, #128]	@ 0x80
 801ed0c:	ab0e      	add	r3, sp, #56	@ 0x38
 801ed0e:	9321      	str	r3, [sp, #132]	@ 0x84
 801ed10:	9101      	str	r1, [sp, #4]
 801ed12:	2302      	movs	r3, #2
 801ed14:	9300      	str	r3, [sp, #0]
 801ed16:	ab1e      	add	r3, sp, #120	@ 0x78
 801ed18:	aa16      	add	r2, sp, #88	@ 0x58
 801ed1a:	a906      	add	r1, sp, #24
 801ed1c:	4628      	mov	r0, r5
 801ed1e:	f7ff fd39 	bl	801e794 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801ed22:	1e07      	subs	r7, r0, #0
 801ed24:	f2c0 80d2 	blt.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801ed28:	ac0e      	add	r4, sp, #56	@ 0x38
 801ed2a:	f10d 0c18 	add.w	ip, sp, #24
 801ed2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ed32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ed34:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801ed38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801ed3c:	2f01      	cmp	r7, #1
 801ed3e:	f040 80c3 	bne.w	801eec8 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801ed42:	4b4f      	ldr	r3, [pc, #316]	@ (801ee80 <lfs_dir_orphaningcommit+0x38c>)
 801ed44:	9303      	str	r3, [sp, #12]
 801ed46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed48:	9302      	str	r3, [sp, #8]
 801ed4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed4c:	9301      	str	r3, [sp, #4]
 801ed4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed50:	9300      	str	r3, [sp, #0]
 801ed52:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ed54:	f640 128c 	movw	r2, #2444	@ 0x98c
 801ed58:	494a      	ldr	r1, [pc, #296]	@ (801ee84 <lfs_dir_orphaningcommit+0x390>)
 801ed5a:	484b      	ldr	r0, [pc, #300]	@ (801ee88 <lfs_dir_orphaningcommit+0x394>)
 801ed5c:	f00c f8ba 	bl	802aed4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ed60:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ed62:	6a2b      	ldr	r3, [r5, #32]
 801ed64:	428b      	cmp	r3, r1
 801ed66:	d007      	beq.n	801ed78 <lfs_dir_orphaningcommit+0x284>
 801ed68:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ed6a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801ed6c:	4282      	cmp	r2, r0
 801ed6e:	d003      	beq.n	801ed78 <lfs_dir_orphaningcommit+0x284>
 801ed70:	428a      	cmp	r2, r1
 801ed72:	d001      	beq.n	801ed78 <lfs_dir_orphaningcommit+0x284>
 801ed74:	4298      	cmp	r0, r3
 801ed76:	d103      	bne.n	801ed80 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801ed78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed7a:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801ed7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed7e:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801ed80:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801ed82:	e758      	b.n	801ec36 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801ed84:	f114 0802 	adds.w	r8, r4, #2
 801ed88:	bf18      	it	ne
 801ed8a:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801ed8e:	2101      	movs	r1, #1
 801ed90:	4628      	mov	r0, r5
 801ed92:	f7fd f997 	bl	801c0c4 <lfs_fs_preporphans>
            if (err) {
 801ed96:	4607      	mov	r7, r0
 801ed98:	2800      	cmp	r0, #0
 801ed9a:	f040 8097 	bne.w	801eecc <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801ed9e:	a906      	add	r1, sp, #24
 801eda0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801eda4:	f7fd f858 	bl	801be58 <lfs_gstate_hasmovehere>
 801eda8:	2800      	cmp	r0, #0
 801edaa:	d131      	bne.n	801ee10 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801edac:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801edae:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801edb2:	9b06      	ldr	r3, [sp, #24]
 801edb4:	9304      	str	r3, [sp, #16]
 801edb6:	9b07      	ldr	r3, [sp, #28]
 801edb8:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801edba:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801edbe:	429f      	cmp	r7, r3
 801edc0:	d044      	beq.n	801ee4c <lfs_dir_orphaningcommit+0x358>
 801edc2:	02bb      	lsls	r3, r7, #10
 801edc4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801edc8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801edcc:	931a      	str	r3, [sp, #104]	@ 0x68
 801edce:	2300      	movs	r3, #0
 801edd0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801edd2:	921c      	str	r2, [sp, #112]	@ 0x70
 801edd4:	aa0e      	add	r2, sp, #56	@ 0x38
 801edd6:	921d      	str	r2, [sp, #116]	@ 0x74
 801edd8:	9301      	str	r3, [sp, #4]
 801edda:	2302      	movs	r3, #2
 801eddc:	9300      	str	r3, [sp, #0]
 801edde:	ab1a      	add	r3, sp, #104	@ 0x68
 801ede0:	aa04      	add	r2, sp, #16
 801ede2:	a906      	add	r1, sp, #24
 801ede4:	4628      	mov	r0, r5
 801ede6:	f7ff fcd5 	bl	801e794 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801edea:	1e07      	subs	r7, r0, #0
 801edec:	db6e      	blt.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801edee:	2f01      	cmp	r7, #1
 801edf0:	f47f af50 	bne.w	801ec94 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801edf4:	9b04      	ldr	r3, [sp, #16]
 801edf6:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801edf8:	9b05      	ldr	r3, [sp, #20]
 801edfa:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801edfc:	ac0e      	add	r4, sp, #56	@ 0x38
 801edfe:	ae06      	add	r6, sp, #24
 801ee00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ee02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801ee08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801ee0c:	2601      	movs	r6, #1
 801ee0e:	e795      	b.n	801ed3c <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801ee10:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801ee12:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801ee16:	4b1a      	ldr	r3, [pc, #104]	@ (801ee80 <lfs_dir_orphaningcommit+0x38c>)
 801ee18:	9302      	str	r3, [sp, #8]
 801ee1a:	9701      	str	r7, [sp, #4]
 801ee1c:	9b07      	ldr	r3, [sp, #28]
 801ee1e:	9300      	str	r3, [sp, #0]
 801ee20:	9b06      	ldr	r3, [sp, #24]
 801ee22:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801ee26:	4917      	ldr	r1, [pc, #92]	@ (801ee84 <lfs_dir_orphaningcommit+0x390>)
 801ee28:	4818      	ldr	r0, [pc, #96]	@ (801ee8c <lfs_dir_orphaningcommit+0x398>)
 801ee2a:	f00c f853 	bl	802aed4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801ee2e:	2200      	movs	r2, #0
 801ee30:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801ee34:	4628      	mov	r0, r5
 801ee36:	f7fd f8f5 	bl	801c024 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801ee3a:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801ee3e:	42bb      	cmp	r3, r7
 801ee40:	d902      	bls.n	801ee48 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801ee42:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801ee46:	e7b4      	b.n	801edb2 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801ee48:	4622      	mov	r2, r4
 801ee4a:	e7b2      	b.n	801edb2 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801ee4c:	2300      	movs	r3, #0
 801ee4e:	e7bd      	b.n	801edcc <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801ee50:	4b0f      	ldr	r3, [pc, #60]	@ (801ee90 <lfs_dir_orphaningcommit+0x39c>)
 801ee52:	4a10      	ldr	r2, [pc, #64]	@ (801ee94 <lfs_dir_orphaningcommit+0x3a0>)
 801ee54:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801ee58:	480a      	ldr	r0, [pc, #40]	@ (801ee84 <lfs_dir_orphaningcommit+0x390>)
 801ee5a:	f00c f807 	bl	802ae6c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801ee5e:	f113 0f02 	cmn.w	r3, #2
 801ee62:	f47f af2a 	bne.w	801ecba <lfs_dir_orphaningcommit+0x1c6>
 801ee66:	e769      	b.n	801ed3c <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801ee68:	f1c8 0100 	rsb	r1, r8, #0
 801ee6c:	4628      	mov	r0, r5
 801ee6e:	f7fd f929 	bl	801c0c4 <lfs_fs_preporphans>
                if (err) {
 801ee72:	4607      	mov	r7, r0
 801ee74:	2800      	cmp	r0, #0
 801ee76:	f43f af26 	beq.w	801ecc6 <lfs_dir_orphaningcommit+0x1d2>
 801ee7a:	e027      	b.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
 801ee7c:	000ffc08 	.word	0x000ffc08
 801ee80:	080381c0 	.word	0x080381c0
 801ee84:	0803a734 	.word	0x0803a734
 801ee88:	0803aad4 	.word	0x0803aad4
 801ee8c:	0803ab10 	.word	0x0803ab10
 801ee90:	0803ab54 	.word	0x0803ab54
 801ee94:	0803b490 	.word	0x0803b490
                moveid = lfs_tag_id(lfs->gstate.tag);
 801ee98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801ee9a:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801ee9e:	4b10      	ldr	r3, [pc, #64]	@ (801eee0 <lfs_dir_orphaningcommit+0x3ec>)
 801eea0:	9302      	str	r3, [sp, #8]
 801eea2:	9401      	str	r4, [sp, #4]
 801eea4:	9b07      	ldr	r3, [sp, #28]
 801eea6:	9300      	str	r3, [sp, #0]
 801eea8:	9b06      	ldr	r3, [sp, #24]
 801eeaa:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801eeae:	490d      	ldr	r1, [pc, #52]	@ (801eee4 <lfs_dir_orphaningcommit+0x3f0>)
 801eeb0:	480d      	ldr	r0, [pc, #52]	@ (801eee8 <lfs_dir_orphaningcommit+0x3f4>)
 801eeb2:	f00c f80f 	bl	802aed4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801eeb6:	2200      	movs	r2, #0
 801eeb8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801eebc:	4628      	mov	r0, r5
 801eebe:	f7fd f8b1 	bl	801c024 <lfs_fs_prepmove>
 801eec2:	e70a      	b.n	801ecda <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801eec4:	2300      	movs	r3, #0
 801eec6:	e716      	b.n	801ecf6 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801eec8:	b926      	cbnz	r6, 801eed4 <lfs_dir_orphaningcommit+0x3e0>
 801eeca:	2700      	movs	r7, #0
}
 801eecc:	4638      	mov	r0, r7
 801eece:	b023      	add	sp, #140	@ 0x8c
 801eed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801eed4:	2703      	movs	r7, #3
 801eed6:	e7f9      	b.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801eed8:	4627      	mov	r7, r4
 801eeda:	e7f7      	b.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801eedc:	4607      	mov	r7, r0
 801eede:	e7f5      	b.n	801eecc <lfs_dir_orphaningcommit+0x3d8>
 801eee0:	080381c0 	.word	0x080381c0
 801eee4:	0803a734 	.word	0x0803a734
 801eee8:	0803ab10 	.word	0x0803ab10

0801eeec <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801eeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eef0:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801eef2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801eef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	f000 80ea 	beq.w	801f0d2 <lfs_fs_deorphan+0x1e6>
 801eefe:	4605      	mov	r5, r0
 801ef00:	460f      	mov	r7, r1
    int pass = 0;
 801ef02:	2600      	movs	r6, #0
    while (pass < 2) {
 801ef04:	2e01      	cmp	r6, #1
 801ef06:	f300 80db 	bgt.w	801f0c0 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801ef0a:	2220      	movs	r2, #32
 801ef0c:	2100      	movs	r1, #0
 801ef0e:	a806      	add	r0, sp, #24
 801ef10:	f00e fcfe 	bl	802d910 <memset>
 801ef14:	2301      	movs	r3, #1
 801ef16:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801ef1a:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801ef1c:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801ef20:	e0bd      	b.n	801f09e <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801ef22:	aa16      	add	r2, sp, #88	@ 0x58
 801ef24:	a90c      	add	r1, sp, #48	@ 0x30
 801ef26:	4628      	mov	r0, r5
 801ef28:	f7fe fa4c 	bl	801d3c4 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801ef2c:	1e04      	subs	r4, r0, #0
 801ef2e:	db39      	blt.n	801efa4 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801ef30:	b916      	cbnz	r6, 801ef38 <lfs_fs_deorphan+0x4c>
 801ef32:	f114 0f02 	cmn.w	r4, #2
 801ef36:	d139      	bne.n	801efac <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801ef38:	2e01      	cmp	r6, #1
 801ef3a:	f040 80a4 	bne.w	801f086 <lfs_fs_deorphan+0x19a>
 801ef3e:	f114 0f02 	cmn.w	r4, #2
 801ef42:	f040 80a0 	bne.w	801f086 <lfs_fs_deorphan+0x19a>
 801ef46:	2f00      	cmp	r7, #0
 801ef48:	f000 809d 	beq.w	801f086 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801ef4c:	4b63      	ldr	r3, [pc, #396]	@ (801f0dc <lfs_fs_deorphan+0x1f0>)
 801ef4e:	9301      	str	r3, [sp, #4]
 801ef50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef52:	9300      	str	r3, [sp, #0]
 801ef54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef56:	f241 329c 	movw	r2, #5020	@ 0x139c
 801ef5a:	4961      	ldr	r1, [pc, #388]	@ (801f0e0 <lfs_fs_deorphan+0x1f4>)
 801ef5c:	4861      	ldr	r0, [pc, #388]	@ (801f0e4 <lfs_fs_deorphan+0x1f8>)
 801ef5e:	f00b ffb9 	bl	802aed4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801ef62:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801ef66:	a90e      	add	r1, sp, #56	@ 0x38
 801ef68:	4628      	mov	r0, r5
 801ef6a:	f7fd fab7 	bl	801c4dc <lfs_dir_getgstate>
                    if (err) {
 801ef6e:	4604      	mov	r4, r0
 801ef70:	2800      	cmp	r0, #0
 801ef72:	f040 80af 	bne.w	801f0d4 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801ef76:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801ef7a:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ef7e:	4b5a      	ldr	r3, [pc, #360]	@ (801f0e8 <lfs_fs_deorphan+0x1fc>)
 801ef80:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ef84:	9322      	str	r3, [sp, #136]	@ 0x88
 801ef86:	ab14      	add	r3, sp, #80	@ 0x50
 801ef88:	9323      	str	r3, [sp, #140]	@ 0x8c
 801ef8a:	2301      	movs	r3, #1
 801ef8c:	aa22      	add	r2, sp, #136	@ 0x88
 801ef8e:	a906      	add	r1, sp, #24
 801ef90:	4628      	mov	r0, r5
 801ef92:	f7ff fdaf 	bl	801eaf4 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801ef96:	1e04      	subs	r4, r0, #0
 801ef98:	f2c0 809c 	blt.w	801f0d4 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801ef9c:	2c03      	cmp	r4, #3
 801ef9e:	d17e      	bne.n	801f09e <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801efa0:	46b8      	mov	r8, r7
                    continue;
 801efa2:	e07c      	b.n	801f09e <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801efa4:	f114 0f02 	cmn.w	r4, #2
 801efa8:	d0c2      	beq.n	801ef30 <lfs_fs_deorphan+0x44>
 801efaa:	e093      	b.n	801f0d4 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801efac:	ab04      	add	r3, sp, #16
 801efae:	9300      	str	r3, [sp, #0]
 801efb0:	4623      	mov	r3, r4
 801efb2:	4a4e      	ldr	r2, [pc, #312]	@ (801f0ec <lfs_fs_deorphan+0x200>)
 801efb4:	a916      	add	r1, sp, #88	@ 0x58
 801efb6:	4628      	mov	r0, r5
 801efb8:	f7fd fa82 	bl	801c4c0 <lfs_dir_get>
                    if (state < 0) {
 801efbc:	2800      	cmp	r0, #0
 801efbe:	db50      	blt.n	801f062 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801efc0:	a90c      	add	r1, sp, #48	@ 0x30
 801efc2:	a804      	add	r0, sp, #16
 801efc4:	f7fc ff12 	bl	801bdec <lfs_pair_issync>
 801efc8:	2800      	cmp	r0, #0
 801efca:	d1b5      	bne.n	801ef38 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801efcc:	4b43      	ldr	r3, [pc, #268]	@ (801f0dc <lfs_fs_deorphan+0x1f0>)
 801efce:	9303      	str	r3, [sp, #12]
 801efd0:	9b05      	ldr	r3, [sp, #20]
 801efd2:	9302      	str	r3, [sp, #8]
 801efd4:	9b04      	ldr	r3, [sp, #16]
 801efd6:	9301      	str	r3, [sp, #4]
 801efd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801efda:	9300      	str	r3, [sp, #0]
 801efdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efde:	f241 3271 	movw	r2, #4977	@ 0x1371
 801efe2:	493f      	ldr	r1, [pc, #252]	@ (801f0e0 <lfs_fs_deorphan+0x1f4>)
 801efe4:	4842      	ldr	r0, [pc, #264]	@ (801f0f0 <lfs_fs_deorphan+0x204>)
 801efe6:	f00b ff75 	bl	802aed4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801efea:	a906      	add	r1, sp, #24
 801efec:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801eff0:	f7fc ff32 	bl	801be58 <lfs_gstate_hasmovehere>
 801eff4:	b9a0      	cbnz	r0, 801f020 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801eff6:	2300      	movs	r3, #0
 801eff8:	931e      	str	r3, [sp, #120]	@ 0x78
 801effa:	2300      	movs	r3, #0
 801effc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801effe:	4b3d      	ldr	r3, [pc, #244]	@ (801f0f4 <lfs_fs_deorphan+0x208>)
 801f000:	9320      	str	r3, [sp, #128]	@ 0x80
 801f002:	ab04      	add	r3, sp, #16
 801f004:	9321      	str	r3, [sp, #132]	@ 0x84
 801f006:	2302      	movs	r3, #2
 801f008:	aa1e      	add	r2, sp, #120	@ 0x78
 801f00a:	a906      	add	r1, sp, #24
 801f00c:	4628      	mov	r0, r5
 801f00e:	f7ff fd71 	bl	801eaf4 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801f012:	1e04      	subs	r4, r0, #0
 801f014:	db5e      	blt.n	801f0d4 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801f016:	2c03      	cmp	r4, #3
 801f018:	d141      	bne.n	801f09e <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801f01a:	f04f 0801 	mov.w	r8, #1
                        continue;
 801f01e:	e03e      	b.n	801f09e <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801f020:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801f022:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801f026:	4b2d      	ldr	r3, [pc, #180]	@ (801f0dc <lfs_fs_deorphan+0x1f0>)
 801f028:	9302      	str	r3, [sp, #8]
 801f02a:	9401      	str	r4, [sp, #4]
 801f02c:	9b07      	ldr	r3, [sp, #28]
 801f02e:	9300      	str	r3, [sp, #0]
 801f030:	9b06      	ldr	r3, [sp, #24]
 801f032:	f241 327c 	movw	r2, #4988	@ 0x137c
 801f036:	492a      	ldr	r1, [pc, #168]	@ (801f0e0 <lfs_fs_deorphan+0x1f4>)
 801f038:	482f      	ldr	r0, [pc, #188]	@ (801f0f8 <lfs_fs_deorphan+0x20c>)
 801f03a:	f00b ff4b 	bl	802aed4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f03e:	2200      	movs	r2, #0
 801f040:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f044:	4628      	mov	r0, r5
 801f046:	f7fc ffed 	bl	801c024 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801f04a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f04e:	429c      	cmp	r4, r3
 801f050:	d005      	beq.n	801f05e <lfs_fs_deorphan+0x172>
 801f052:	02a3      	lsls	r3, r4, #10
 801f054:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f058:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f05c:	e7cc      	b.n	801eff8 <lfs_fs_deorphan+0x10c>
 801f05e:	2300      	movs	r3, #0
 801f060:	e7ca      	b.n	801eff8 <lfs_fs_deorphan+0x10c>
                        return state;
 801f062:	4604      	mov	r4, r0
 801f064:	e036      	b.n	801f0d4 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f066:	2301      	movs	r3, #1
 801f068:	e000      	b.n	801f06c <lfs_fs_deorphan+0x180>
 801f06a:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801f06c:	bb0b      	cbnz	r3, 801f0b2 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801f06e:	aa0c      	add	r2, sp, #48	@ 0x30
 801f070:	a90e      	add	r1, sp, #56	@ 0x38
 801f072:	4628      	mov	r0, r5
 801f074:	f7fe fa12 	bl	801d49c <lfs_dir_fetch>
            if (err) {
 801f078:	4604      	mov	r4, r0
 801f07a:	bb58      	cbnz	r0, 801f0d4 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801f07c:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801f080:	2b00      	cmp	r3, #0
 801f082:	f43f af4e 	beq.w	801ef22 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801f086:	f10d 0c18 	add.w	ip, sp, #24
 801f08a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801f08e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f092:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f096:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f09a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f09e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f0a4:	d0e1      	beq.n	801f06a <lfs_fs_deorphan+0x17e>
 801f0a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f0ac:	d0db      	beq.n	801f066 <lfs_fs_deorphan+0x17a>
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	e7dc      	b.n	801f06c <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801f0b2:	f1b8 0f00 	cmp.w	r8, #0
 801f0b6:	d101      	bne.n	801f0bc <lfs_fs_deorphan+0x1d0>
 801f0b8:	3601      	adds	r6, #1
 801f0ba:	e723      	b.n	801ef04 <lfs_fs_deorphan+0x18>
 801f0bc:	2600      	movs	r6, #0
 801f0be:	e721      	b.n	801ef04 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801f0c0:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801f0c4:	4249      	negs	r1, r1
 801f0c6:	b249      	sxtb	r1, r1
 801f0c8:	4628      	mov	r0, r5
 801f0ca:	f7fc fffb 	bl	801c0c4 <lfs_fs_preporphans>
 801f0ce:	4604      	mov	r4, r0
 801f0d0:	e000      	b.n	801f0d4 <lfs_fs_deorphan+0x1e8>
        return 0;
 801f0d2:	2400      	movs	r4, #0
}
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	b024      	add	sp, #144	@ 0x90
 801f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0dc:	080381c0 	.word	0x080381c0
 801f0e0:	0803a734 	.word	0x0803a734
 801f0e4:	0803ac08 	.word	0x0803ac08
 801f0e8:	000ffc08 	.word	0x000ffc08
 801f0ec:	7ffffc00 	.word	0x7ffffc00
 801f0f0:	0803ab7c 	.word	0x0803ab7c
 801f0f4:	600ffc08 	.word	0x600ffc08
 801f0f8:	0803abc0 	.word	0x0803abc0

0801f0fc <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801f0fc:	b510      	push	{r4, lr}
 801f0fe:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801f100:	f7ff fcf8 	bl	801eaf4 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801f104:	2800      	cmp	r0, #0
 801f106:	db00      	blt.n	801f10a <lfs_dir_commit+0xe>
    if (orphans) {
 801f108:	b900      	cbnz	r0, 801f10c <lfs_dir_commit+0x10>
}
 801f10a:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801f10c:	2100      	movs	r1, #0
 801f10e:	4620      	mov	r0, r4
 801f110:	f7ff feec 	bl	801eeec <lfs_fs_deorphan>
        if (err) {
 801f114:	e7f9      	b.n	801f10a <lfs_dir_commit+0xe>
	...

0801f118 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801f118:	b530      	push	{r4, r5, lr}
 801f11a:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801f11c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801f11e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801f122:	d103      	bne.n	801f12c <lfs_fs_desuperblock+0x14>
        return 0;
 801f124:	2500      	movs	r5, #0
}
 801f126:	4628      	mov	r0, r5
 801f128:	b013      	add	sp, #76	@ 0x4c
 801f12a:	bd30      	pop	{r4, r5, pc}
 801f12c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801f12e:	4b1a      	ldr	r3, [pc, #104]	@ (801f198 <lfs_fs_desuperblock+0x80>)
 801f130:	9301      	str	r3, [sp, #4]
 801f132:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f134:	9300      	str	r3, [sp, #0]
 801f136:	6a03      	ldr	r3, [r0, #32]
 801f138:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801f13c:	4917      	ldr	r1, [pc, #92]	@ (801f19c <lfs_fs_desuperblock+0x84>)
 801f13e:	4818      	ldr	r0, [pc, #96]	@ (801f1a0 <lfs_fs_desuperblock+0x88>)
 801f140:	f00b fec8 	bl	802aed4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801f144:	f104 0220 	add.w	r2, r4, #32
 801f148:	a908      	add	r1, sp, #32
 801f14a:	4620      	mov	r0, r4
 801f14c:	f7fe f9a6 	bl	801d49c <lfs_dir_fetch>
    if (err) {
 801f150:	4605      	mov	r5, r0
 801f152:	2800      	cmp	r0, #0
 801f154:	d1e7      	bne.n	801f126 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801f156:	4620      	mov	r0, r4
 801f158:	f7fc feb6 	bl	801bec8 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801f15c:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801f15e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801f162:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801f164:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801f166:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801f168:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801f16a:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801f16c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801f16e:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801f170:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801f172:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801f174:	4b0b      	ldr	r3, [pc, #44]	@ (801f1a4 <lfs_fs_desuperblock+0x8c>)
 801f176:	9310      	str	r3, [sp, #64]	@ 0x40
 801f178:	ab02      	add	r3, sp, #8
 801f17a:	9311      	str	r3, [sp, #68]	@ 0x44
 801f17c:	2301      	movs	r3, #1
 801f17e:	aa10      	add	r2, sp, #64	@ 0x40
 801f180:	a908      	add	r1, sp, #32
 801f182:	4620      	mov	r0, r4
 801f184:	f7ff ffba 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 801f188:	4605      	mov	r5, r0
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d1cb      	bne.n	801f126 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801f18e:	2100      	movs	r1, #0
 801f190:	4620      	mov	r0, r4
 801f192:	f7fc ff40 	bl	801c016 <lfs_fs_prepsuperblock>
    return 0;
 801f196:	e7c6      	b.n	801f126 <lfs_fs_desuperblock+0xe>
 801f198:	080381c0 	.word	0x080381c0
 801f19c:	0803a734 	.word	0x0803a734
 801f1a0:	0803ac38 	.word	0x0803ac38
 801f1a4:	20100018 	.word	0x20100018

0801f1a8 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801f1a8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801f1aa:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801f1ac:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801f1b0:	d101      	bne.n	801f1b6 <lfs_fs_demove+0xe>
        return 0;
 801f1b2:	2000      	movs	r0, #0
}
 801f1b4:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801f1b6:	b530      	push	{r4, r5, lr}
 801f1b8:	b08f      	sub	sp, #60	@ 0x3c
 801f1ba:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801f1bc:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801f1c0:	4a1d      	ldr	r2, [pc, #116]	@ (801f238 <lfs_fs_demove+0x90>)
 801f1c2:	9202      	str	r2, [sp, #8]
 801f1c4:	9301      	str	r3, [sp, #4]
 801f1c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f1c8:	9300      	str	r3, [sp, #0]
 801f1ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801f1cc:	f241 3224 	movw	r2, #4900	@ 0x1324
 801f1d0:	491a      	ldr	r1, [pc, #104]	@ (801f23c <lfs_fs_demove+0x94>)
 801f1d2:	481b      	ldr	r0, [pc, #108]	@ (801f240 <lfs_fs_demove+0x98>)
 801f1d4:	f00b fe7e 	bl	802aed4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f1d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801f1da:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f1de:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801f1e2:	4293      	cmp	r3, r2
 801f1e4:	d108      	bne.n	801f1f8 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801f1e6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801f1ea:	a904      	add	r1, sp, #16
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	f7fe f955 	bl	801d49c <lfs_dir_fetch>
    if (err) {
 801f1f2:	b140      	cbz	r0, 801f206 <lfs_fs_demove+0x5e>
}
 801f1f4:	b00f      	add	sp, #60	@ 0x3c
 801f1f6:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801f1f8:	4b12      	ldr	r3, [pc, #72]	@ (801f244 <lfs_fs_demove+0x9c>)
 801f1fa:	4a13      	ldr	r2, [pc, #76]	@ (801f248 <lfs_fs_demove+0xa0>)
 801f1fc:	f241 312b 	movw	r1, #4907	@ 0x132b
 801f200:	480e      	ldr	r0, [pc, #56]	@ (801f23c <lfs_fs_demove+0x94>)
 801f202:	f00b fe33 	bl	802ae6c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801f206:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801f208:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f20c:	2200      	movs	r2, #0
 801f20e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f212:	4620      	mov	r0, r4
 801f214:	f7fc ff06 	bl	801c024 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801f218:	02ab      	lsls	r3, r5, #10
 801f21a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f21e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f222:	930c      	str	r3, [sp, #48]	@ 0x30
 801f224:	2300      	movs	r3, #0
 801f226:	930d      	str	r3, [sp, #52]	@ 0x34
 801f228:	2301      	movs	r3, #1
 801f22a:	aa0c      	add	r2, sp, #48	@ 0x30
 801f22c:	a904      	add	r1, sp, #16
 801f22e:	4620      	mov	r0, r4
 801f230:	f7ff ff64 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 801f234:	e7de      	b.n	801f1f4 <lfs_fs_demove+0x4c>
 801f236:	bf00      	nop
 801f238:	080381c0 	.word	0x080381c0
 801f23c:	0803a734 	.word	0x0803a734
 801f240:	0803ac6c 	.word	0x0803ac6c
 801f244:	0803aca0 	.word	0x0803aca0
 801f248:	0803b3f4 	.word	0x0803b3f4

0801f24c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801f24c:	b510      	push	{r4, lr}
 801f24e:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801f250:	f7ff ff62 	bl	801f118 <lfs_fs_desuperblock>
    if (err) {
 801f254:	4603      	mov	r3, r0
 801f256:	b108      	cbz	r0, 801f25c <lfs_fs_forceconsistency+0x10>
}
 801f258:	4618      	mov	r0, r3
 801f25a:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801f25c:	4620      	mov	r0, r4
 801f25e:	f7ff ffa3 	bl	801f1a8 <lfs_fs_demove>
    if (err) {
 801f262:	4603      	mov	r3, r0
 801f264:	2800      	cmp	r0, #0
 801f266:	d1f7      	bne.n	801f258 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801f268:	2101      	movs	r1, #1
 801f26a:	4620      	mov	r0, r4
 801f26c:	f7ff fe3e 	bl	801eeec <lfs_fs_deorphan>
 801f270:	4603      	mov	r3, r0
    if (err) {
 801f272:	e7f1      	b.n	801f258 <lfs_fs_forceconsistency+0xc>

0801f274 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801f274:	b570      	push	{r4, r5, r6, lr}
 801f276:	b082      	sub	sp, #8
 801f278:	4605      	mov	r5, r0
 801f27a:	460e      	mov	r6, r1
 801f27c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801f27e:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801f282:	4621      	mov	r1, r4
 801f284:	f7fd f92a 	bl	801c4dc <lfs_dir_getgstate>
    if (err) {
 801f288:	b108      	cbz	r0, 801f28e <lfs_dir_drop+0x1a>
}
 801f28a:	b002      	add	sp, #8
 801f28c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801f28e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801f292:	7de2      	ldrb	r2, [r4, #23]
 801f294:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801f298:	4b05      	ldr	r3, [pc, #20]	@ (801f2b0 <lfs_dir_drop+0x3c>)
 801f29a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f29e:	9300      	str	r3, [sp, #0]
 801f2a0:	9101      	str	r1, [sp, #4]
 801f2a2:	2301      	movs	r3, #1
 801f2a4:	466a      	mov	r2, sp
 801f2a6:	4631      	mov	r1, r6
 801f2a8:	4628      	mov	r0, r5
 801f2aa:	f7ff ff27 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 801f2ae:	e7ec      	b.n	801f28a <lfs_dir_drop+0x16>
 801f2b0:	000ffc08 	.word	0x000ffc08

0801f2b4 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801f2b4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801f2b6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801f2ba:	d001      	beq.n	801f2c0 <lfs_file_sync_+0xc>
        return 0;
 801f2bc:	2000      	movs	r0, #0
}
 801f2be:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801f2c0:	b530      	push	{r4, r5, lr}
 801f2c2:	b087      	sub	sp, #28
 801f2c4:	4605      	mov	r5, r0
 801f2c6:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801f2c8:	f7fe fcae 	bl	801dc28 <lfs_file_flush>
    if (err) {
 801f2cc:	2800      	cmp	r0, #0
 801f2ce:	d136      	bne.n	801f33e <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801f2d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f2d2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801f2d6:	d036      	beq.n	801f346 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f2d8:	68a2      	ldr	r2, [r4, #8]
 801f2da:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801f2de:	d036      	beq.n	801f34e <lfs_file_sync_+0x9a>
 801f2e0:	68e2      	ldr	r2, [r4, #12]
 801f2e2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801f2e6:	d030      	beq.n	801f34a <lfs_file_sync_+0x96>
 801f2e8:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801f2ea:	f012 0f01 	tst.w	r2, #1
 801f2ee:	d12a      	bne.n	801f346 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801f2f0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801f2f4:	d02d      	beq.n	801f352 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801f2f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f2f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801f2fc:	d033      	beq.n	801f366 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801f2fe:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801f300:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801f302:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f306:	88a3      	ldrh	r3, [r4, #4]
 801f308:	029b      	lsls	r3, r3, #10
 801f30a:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801f30e:	4302      	orrs	r2, r0
 801f310:	9202      	str	r2, [sp, #8]
 801f312:	9103      	str	r1, [sp, #12]
 801f314:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f316:	6891      	ldr	r1, [r2, #8]
 801f318:	430b      	orrs	r3, r1
 801f31a:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801f31e:	9304      	str	r3, [sp, #16]
 801f320:	6853      	ldr	r3, [r2, #4]
 801f322:	9305      	str	r3, [sp, #20]
 801f324:	2302      	movs	r3, #2
 801f326:	aa02      	add	r2, sp, #8
 801f328:	f104 0108 	add.w	r1, r4, #8
 801f32c:	4628      	mov	r0, r5
 801f32e:	f7ff fee5 	bl	801f0fc <lfs_dir_commit>
        if (err) {
 801f332:	bb20      	cbnz	r0, 801f37e <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801f334:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f33a:	6323      	str	r3, [r4, #48]	@ 0x30
 801f33c:	e003      	b.n	801f346 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801f33e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f344:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801f346:	b007      	add	sp, #28
 801f348:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f34a:	2201      	movs	r2, #1
 801f34c:	e7cd      	b.n	801f2ea <lfs_file_sync_+0x36>
 801f34e:	2201      	movs	r2, #1
 801f350:	e7cb      	b.n	801f2ea <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801f352:	2300      	movs	r3, #0
 801f354:	462a      	mov	r2, r5
 801f356:	f105 0110 	add.w	r1, r5, #16
 801f35a:	4628      	mov	r0, r5
 801f35c:	f7fd fc82 	bl	801cc64 <lfs_bd_sync>
            if (err) {
 801f360:	2800      	cmp	r0, #0
 801f362:	d0c8      	beq.n	801f2f6 <lfs_file_sync_+0x42>
 801f364:	e7ef      	b.n	801f346 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801f366:	466b      	mov	r3, sp
 801f368:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801f36c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f370:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801f374:	2008      	movs	r0, #8
            buffer = &ctz;
 801f376:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801f378:	f240 2202 	movw	r2, #514	@ 0x202
 801f37c:	e7c3      	b.n	801f306 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801f37e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f380:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f384:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801f386:	e7de      	b.n	801f346 <lfs_file_sync_+0x92>

0801f388 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801f388:	b510      	push	{r4, lr}
 801f38a:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801f38c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801f38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f390:	b13b      	cbz	r3, 801f3a2 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801f392:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f396:	b143      	cbz	r3, 801f3aa <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801f398:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f39a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f39c:	b14b      	cbz	r3, 801f3b2 <lfs_deinit+0x2a>
}
 801f39e:	2000      	movs	r0, #0
 801f3a0:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801f3a2:	68c0      	ldr	r0, [r0, #12]
 801f3a4:	f7fc faea 	bl	801b97c <vPortFree>
#else
    (void)p;
#endif
}
 801f3a8:	e7f3      	b.n	801f392 <lfs_deinit+0xa>
    free(p);
 801f3aa:	69e0      	ldr	r0, [r4, #28]
 801f3ac:	f7fc fae6 	bl	801b97c <vPortFree>
}
 801f3b0:	e7f2      	b.n	801f398 <lfs_deinit+0x10>
    free(p);
 801f3b2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801f3b4:	f7fc fae2 	bl	801b97c <vPortFree>
}
 801f3b8:	e7f1      	b.n	801f39e <lfs_deinit+0x16>
	...

0801f3bc <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801f3bc:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801f3be:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801f3c0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801f3c2:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801f3c4:	69cb      	ldr	r3, [r1, #28]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	f000 80b1 	beq.w	801f52e <lfs_init+0x172>
 801f3cc:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801f3ce:	6a0a      	ldr	r2, [r1, #32]
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	f000 80b3 	beq.w	801f53c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801f3d6:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801f3d8:	2800      	cmp	r0, #0
 801f3da:	f000 80b6 	beq.w	801f54a <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801f3de:	fbb0 fcf3 	udiv	ip, r0, r3
 801f3e2:	fb03 031c 	mls	r3, r3, ip, r0
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	f040 80b6 	bne.w	801f558 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801f3ec:	fbb0 f3f2 	udiv	r3, r0, r2
 801f3f0:	fb02 0313 	mls	r3, r2, r3, r0
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	f040 80b6 	bne.w	801f566 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801f3fa:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801f3fc:	fbb2 f3f0 	udiv	r3, r2, r0
 801f400:	fb00 2313 	mls	r3, r0, r3, r2
 801f404:	2b00      	cmp	r3, #0
 801f406:	f040 80b5 	bne.w	801f574 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801f40a:	2a7f      	cmp	r2, #127	@ 0x7f
 801f40c:	f240 80b9 	bls.w	801f582 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801f410:	f1a2 0c08 	sub.w	ip, r2, #8
 801f414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f418:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801f41c:	3b01      	subs	r3, #1
 801f41e:	fab3 f383 	clz	r3, r3
 801f422:	f1c3 0320 	rsb	r3, r3, #32
 801f426:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801f42a:	f0c0 80b1 	bcc.w	801f590 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801f42e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801f430:	2b00      	cmp	r3, #0
 801f432:	f000 80b4 	beq.w	801f59e <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801f436:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801f438:	b11b      	cbz	r3, 801f442 <lfs_init+0x86>
 801f43a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801f43e:	f0c0 80b5 	bcc.w	801f5ac <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801f442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f446:	d002      	beq.n	801f44e <lfs_init+0x92>
 801f448:	429a      	cmp	r2, r3
 801f44a:	f0c0 80b6 	bcc.w	801f5ba <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801f44e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801f450:	2b00      	cmp	r3, #0
 801f452:	f000 80b9 	beq.w	801f5c8 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801f456:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801f458:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801f45a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	f000 80bf 	beq.w	801f5e0 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801f462:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801f464:	4621      	mov	r1, r4
 801f466:	4620      	mov	r0, r4
 801f468:	f7fc fe5c 	bl	801c124 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801f46c:	f104 0110 	add.w	r1, r4, #16
 801f470:	4620      	mov	r0, r4
 801f472:	f7fc fe57 	bl	801c124 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801f476:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f478:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801f47a:	2800      	cmp	r0, #0
 801f47c:	f000 80b8 	beq.w	801f5f0 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801f480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f482:	2b00      	cmp	r3, #0
 801f484:	f000 80bb 	beq.w	801f5fe <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801f488:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801f48a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801f48c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801f48e:	2bff      	cmp	r3, #255	@ 0xff
 801f490:	f200 80bc 	bhi.w	801f60c <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801f494:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801f496:	b90b      	cbnz	r3, 801f49c <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801f498:	23ff      	movs	r3, #255	@ 0xff
 801f49a:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801f49c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	f2c0 80bb 	blt.w	801f61a <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801f4a4:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801f4a6:	b913      	cbnz	r3, 801f4ae <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801f4a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801f4ac:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801f4ae:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801f4b0:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801f4b4:	428b      	cmp	r3, r1
 801f4b6:	f200 80b7 	bhi.w	801f628 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801f4ba:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801f4bc:	b913      	cbnz	r3, 801f4c4 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801f4be:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801f4c2:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801f4c4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801f4c6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801f4c8:	4288      	cmp	r0, r1
 801f4ca:	f200 80b4 	bhi.w	801f636 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f4ce:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801f4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f4d4:	d003      	beq.n	801f4de <lfs_init+0x122>
 801f4d6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801f4d8:	42ab      	cmp	r3, r5
 801f4da:	f200 80b3 	bhi.w	801f644 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f4de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f4e2:	d003      	beq.n	801f4ec <lfs_init+0x130>
 801f4e4:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801f4e6:	42ab      	cmp	r3, r5
 801f4e8:	f200 80b3 	bhi.w	801f652 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f4f0:	d006      	beq.n	801f500 <lfs_init+0x144>
 801f4f2:	2800      	cmp	r0, #0
 801f4f4:	f000 80b4 	beq.w	801f660 <lfs_init+0x2a4>
 801f4f8:	08c1      	lsrs	r1, r0, #3
 801f4fa:	428b      	cmp	r3, r1
 801f4fc:	f200 80b2 	bhi.w	801f664 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801f500:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801f502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f506:	f000 80b4 	beq.w	801f672 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	f040 80b3 	bne.w	801f676 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801f510:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801f512:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801f514:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801f516:	2b00      	cmp	r3, #0
 801f518:	f000 80be 	beq.w	801f698 <lfs_init+0x2dc>
 801f51c:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801f51e:	4283      	cmp	r3, r0
 801f520:	bf28      	it	cs
 801f522:	4603      	movcs	r3, r0
 801f524:	428b      	cmp	r3, r1
 801f526:	bf28      	it	cs
 801f528:	460b      	movcs	r3, r1
 801f52a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801f52c:	e0a3      	b.n	801f676 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801f52e:	4b5c      	ldr	r3, [pc, #368]	@ (801f6a0 <lfs_init+0x2e4>)
 801f530:	4a5c      	ldr	r2, [pc, #368]	@ (801f6a4 <lfs_init+0x2e8>)
 801f532:	f241 0152 	movw	r1, #4178	@ 0x1052
 801f536:	485c      	ldr	r0, [pc, #368]	@ (801f6a8 <lfs_init+0x2ec>)
 801f538:	f00b fc98 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801f53c:	4b5b      	ldr	r3, [pc, #364]	@ (801f6ac <lfs_init+0x2f0>)
 801f53e:	4a59      	ldr	r2, [pc, #356]	@ (801f6a4 <lfs_init+0x2e8>)
 801f540:	f241 0153 	movw	r1, #4179	@ 0x1053
 801f544:	4858      	ldr	r0, [pc, #352]	@ (801f6a8 <lfs_init+0x2ec>)
 801f546:	f00b fc91 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801f54a:	4b59      	ldr	r3, [pc, #356]	@ (801f6b0 <lfs_init+0x2f4>)
 801f54c:	4a55      	ldr	r2, [pc, #340]	@ (801f6a4 <lfs_init+0x2e8>)
 801f54e:	f241 0154 	movw	r1, #4180	@ 0x1054
 801f552:	4855      	ldr	r0, [pc, #340]	@ (801f6a8 <lfs_init+0x2ec>)
 801f554:	f00b fc8a 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801f558:	4b56      	ldr	r3, [pc, #344]	@ (801f6b4 <lfs_init+0x2f8>)
 801f55a:	4a52      	ldr	r2, [pc, #328]	@ (801f6a4 <lfs_init+0x2e8>)
 801f55c:	f241 0158 	movw	r1, #4184	@ 0x1058
 801f560:	4851      	ldr	r0, [pc, #324]	@ (801f6a8 <lfs_init+0x2ec>)
 801f562:	f00b fc83 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801f566:	4b54      	ldr	r3, [pc, #336]	@ (801f6b8 <lfs_init+0x2fc>)
 801f568:	4a4e      	ldr	r2, [pc, #312]	@ (801f6a4 <lfs_init+0x2e8>)
 801f56a:	f241 0159 	movw	r1, #4185	@ 0x1059
 801f56e:	484e      	ldr	r0, [pc, #312]	@ (801f6a8 <lfs_init+0x2ec>)
 801f570:	f00b fc7c 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801f574:	4b51      	ldr	r3, [pc, #324]	@ (801f6bc <lfs_init+0x300>)
 801f576:	4a4b      	ldr	r2, [pc, #300]	@ (801f6a4 <lfs_init+0x2e8>)
 801f578:	f241 015a 	movw	r1, #4186	@ 0x105a
 801f57c:	484a      	ldr	r0, [pc, #296]	@ (801f6a8 <lfs_init+0x2ec>)
 801f57e:	f00b fc75 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801f582:	4b4f      	ldr	r3, [pc, #316]	@ (801f6c0 <lfs_init+0x304>)
 801f584:	4a47      	ldr	r2, [pc, #284]	@ (801f6a4 <lfs_init+0x2e8>)
 801f586:	f241 015d 	movw	r1, #4189	@ 0x105d
 801f58a:	4847      	ldr	r0, [pc, #284]	@ (801f6a8 <lfs_init+0x2ec>)
 801f58c:	f00b fc6e 	bl	802ae6c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801f590:	4b4c      	ldr	r3, [pc, #304]	@ (801f6c4 <lfs_init+0x308>)
 801f592:	4a44      	ldr	r2, [pc, #272]	@ (801f6a4 <lfs_init+0x2e8>)
 801f594:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801f598:	4843      	ldr	r0, [pc, #268]	@ (801f6a8 <lfs_init+0x2ec>)
 801f59a:	f00b fc67 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801f59e:	4b4a      	ldr	r3, [pc, #296]	@ (801f6c8 <lfs_init+0x30c>)
 801f5a0:	4a40      	ldr	r2, [pc, #256]	@ (801f6a4 <lfs_init+0x2e8>)
 801f5a2:	f241 0169 	movw	r1, #4201	@ 0x1069
 801f5a6:	4840      	ldr	r0, [pc, #256]	@ (801f6a8 <lfs_init+0x2ec>)
 801f5a8:	f00b fc60 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801f5ac:	4b47      	ldr	r3, [pc, #284]	@ (801f6cc <lfs_init+0x310>)
 801f5ae:	4a3d      	ldr	r2, [pc, #244]	@ (801f6a4 <lfs_init+0x2e8>)
 801f5b0:	f241 016f 	movw	r1, #4207	@ 0x106f
 801f5b4:	483c      	ldr	r0, [pc, #240]	@ (801f6a8 <lfs_init+0x2ec>)
 801f5b6:	f00b fc59 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801f5ba:	4b45      	ldr	r3, [pc, #276]	@ (801f6d0 <lfs_init+0x314>)
 801f5bc:	4a39      	ldr	r2, [pc, #228]	@ (801f6a4 <lfs_init+0x2e8>)
 801f5be:	f241 0171 	movw	r1, #4209	@ 0x1071
 801f5c2:	4839      	ldr	r0, [pc, #228]	@ (801f6a8 <lfs_init+0x2ec>)
 801f5c4:	f00b fc52 	bl	802ae6c <__assert_func>
    return malloc(size);
 801f5c8:	f7fc f956 	bl	801b878 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f5cc:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801f5ce:	2800      	cmp	r0, #0
 801f5d0:	f47f af42 	bne.w	801f458 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	f7ff fed7 	bl	801f388 <lfs_deinit>
    return err;
 801f5da:	f06f 000b 	mvn.w	r0, #11
 801f5de:	e05a      	b.n	801f696 <lfs_init+0x2da>
 801f5e0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801f5e2:	f7fc f949 	bl	801b878 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f5e6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801f5e8:	2800      	cmp	r0, #0
 801f5ea:	f47f af3b 	bne.w	801f464 <lfs_init+0xa8>
 801f5ee:	e7f1      	b.n	801f5d4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801f5f0:	4b38      	ldr	r3, [pc, #224]	@ (801f6d4 <lfs_init+0x318>)
 801f5f2:	4a2c      	ldr	r2, [pc, #176]	@ (801f6a4 <lfs_init+0x2e8>)
 801f5f4:	f241 0190 	movw	r1, #4240	@ 0x1090
 801f5f8:	482b      	ldr	r0, [pc, #172]	@ (801f6a8 <lfs_init+0x2ec>)
 801f5fa:	f00b fc37 	bl	802ae6c <__assert_func>
 801f5fe:	f7fc f93b 	bl	801b878 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801f602:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801f604:	2800      	cmp	r0, #0
 801f606:	f47f af40 	bne.w	801f48a <lfs_init+0xce>
 801f60a:	e7e3      	b.n	801f5d4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801f60c:	4b32      	ldr	r3, [pc, #200]	@ (801f6d8 <lfs_init+0x31c>)
 801f60e:	4a25      	ldr	r2, [pc, #148]	@ (801f6a4 <lfs_init+0x2e8>)
 801f610:	f241 019c 	movw	r1, #4252	@ 0x109c
 801f614:	4824      	ldr	r0, [pc, #144]	@ (801f6a8 <lfs_init+0x2ec>)
 801f616:	f00b fc29 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801f61a:	4b30      	ldr	r3, [pc, #192]	@ (801f6dc <lfs_init+0x320>)
 801f61c:	4a21      	ldr	r2, [pc, #132]	@ (801f6a4 <lfs_init+0x2e8>)
 801f61e:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801f622:	4821      	ldr	r0, [pc, #132]	@ (801f6a8 <lfs_init+0x2ec>)
 801f624:	f00b fc22 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801f628:	4b2d      	ldr	r3, [pc, #180]	@ (801f6e0 <lfs_init+0x324>)
 801f62a:	4a1e      	ldr	r2, [pc, #120]	@ (801f6a4 <lfs_init+0x2e8>)
 801f62c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801f630:	481d      	ldr	r0, [pc, #116]	@ (801f6a8 <lfs_init+0x2ec>)
 801f632:	f00b fc1b 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801f636:	4b2b      	ldr	r3, [pc, #172]	@ (801f6e4 <lfs_init+0x328>)
 801f638:	4a1a      	ldr	r2, [pc, #104]	@ (801f6a4 <lfs_init+0x2e8>)
 801f63a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801f63e:	481a      	ldr	r0, [pc, #104]	@ (801f6a8 <lfs_init+0x2ec>)
 801f640:	f00b fc14 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f644:	4b28      	ldr	r3, [pc, #160]	@ (801f6e8 <lfs_init+0x32c>)
 801f646:	4a17      	ldr	r2, [pc, #92]	@ (801f6a4 <lfs_init+0x2e8>)
 801f648:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801f64c:	4816      	ldr	r0, [pc, #88]	@ (801f6a8 <lfs_init+0x2ec>)
 801f64e:	f00b fc0d 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f652:	4b26      	ldr	r3, [pc, #152]	@ (801f6ec <lfs_init+0x330>)
 801f654:	4a13      	ldr	r2, [pc, #76]	@ (801f6a4 <lfs_init+0x2e8>)
 801f656:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801f65a:	4813      	ldr	r0, [pc, #76]	@ (801f6a8 <lfs_init+0x2ec>)
 801f65c:	f00b fc06 	bl	802ae6c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801f660:	08c9      	lsrs	r1, r1, #3
 801f662:	e74a      	b.n	801f4fa <lfs_init+0x13e>
 801f664:	4b22      	ldr	r3, [pc, #136]	@ (801f6f0 <lfs_init+0x334>)
 801f666:	4a0f      	ldr	r2, [pc, #60]	@ (801f6a4 <lfs_init+0x2e8>)
 801f668:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801f66c:	480e      	ldr	r0, [pc, #56]	@ (801f6a8 <lfs_init+0x2ec>)
 801f66e:	f00b fbfd 	bl	802ae6c <__assert_func>
        lfs->inline_max = 0;
 801f672:	2300      	movs	r3, #0
 801f674:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801f676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f67a:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801f67c:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801f67e:	2000      	movs	r0, #0
 801f680:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801f682:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801f684:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801f686:	6420      	str	r0, [r4, #64]	@ 0x40
 801f688:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801f68a:	6320      	str	r0, [r4, #48]	@ 0x30
 801f68c:	6360      	str	r0, [r4, #52]	@ 0x34
 801f68e:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801f690:	64a0      	str	r0, [r4, #72]	@ 0x48
 801f692:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801f694:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801f696:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801f698:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801f69a:	08db      	lsrs	r3, r3, #3
 801f69c:	e73f      	b.n	801f51e <lfs_init+0x162>
 801f69e:	bf00      	nop
 801f6a0:	0803acd4 	.word	0x0803acd4
 801f6a4:	0803b4b4 	.word	0x0803b4b4
 801f6a8:	0803a734 	.word	0x0803a734
 801f6ac:	0803acf0 	.word	0x0803acf0
 801f6b0:	0803ad0c 	.word	0x0803ad0c
 801f6b4:	0803ad28 	.word	0x0803ad28
 801f6b8:	0803ad58 	.word	0x0803ad58
 801f6bc:	0803ad88 	.word	0x0803ad88
 801f6c0:	0803adbc 	.word	0x0803adbc
 801f6c4:	0803add8 	.word	0x0803add8
 801f6c8:	0803ae24 	.word	0x0803ae24
 801f6cc:	0803ae40 	.word	0x0803ae40
 801f6d0:	0803ae94 	.word	0x0803ae94
 801f6d4:	0803aef4 	.word	0x0803aef4
 801f6d8:	0803af14 	.word	0x0803af14
 801f6dc:	0803af30 	.word	0x0803af30
 801f6e0:	0803af54 	.word	0x0803af54
 801f6e4:	0803af70 	.word	0x0803af70
 801f6e8:	0803afa0 	.word	0x0803afa0
 801f6ec:	0803aff8 	.word	0x0803aff8
 801f6f0:	0803b048 	.word	0x0803b048

0801f6f4 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801f6f4:	b570      	push	{r4, r5, r6, lr}
 801f6f6:	b096      	sub	sp, #88	@ 0x58
 801f6f8:	4604      	mov	r4, r0
 801f6fa:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801f6fc:	f7ff fe5e 	bl	801f3bc <lfs_init>
        if (err) {
 801f700:	4606      	mov	r6, r0
 801f702:	b9f0      	cbnz	r0, 801f742 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801f704:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801f706:	b1fb      	cbz	r3, 801f748 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801f708:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f70a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f70c:	2100      	movs	r1, #0
 801f70e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801f710:	f00e f8fe 	bl	802d910 <memset>
        lfs->lookahead.start = 0;
 801f714:	2200      	movs	r2, #0
 801f716:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801f718:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f71c:	00db      	lsls	r3, r3, #3
 801f71e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801f720:	428b      	cmp	r3, r1
 801f722:	bf28      	it	cs
 801f724:	460b      	movcs	r3, r1
 801f726:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801f728:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801f72a:	4620      	mov	r0, r4
 801f72c:	f7fc fbda 	bl	801bee4 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801f730:	a906      	add	r1, sp, #24
 801f732:	4620      	mov	r0, r4
 801f734:	f7fe f820 	bl	801d778 <lfs_dir_alloc>
        if (err) {
 801f738:	4606      	mov	r6, r0
 801f73a:	b160      	cbz	r0, 801f756 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801f73c:	4620      	mov	r0, r4
 801f73e:	f7ff fe23 	bl	801f388 <lfs_deinit>
}
 801f742:	4630      	mov	r0, r6
 801f744:	b016      	add	sp, #88	@ 0x58
 801f746:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801f748:	4b20      	ldr	r3, [pc, #128]	@ (801f7cc <lfs_format_+0xd8>)
 801f74a:	4a21      	ldr	r2, [pc, #132]	@ (801f7d0 <lfs_format_+0xdc>)
 801f74c:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801f750:	4820      	ldr	r0, [pc, #128]	@ (801f7d4 <lfs_format_+0xe0>)
 801f752:	f00b fb8b 	bl	802ae6c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801f756:	4620      	mov	r0, r4
 801f758:	f7fc fbb6 	bl	801bec8 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801f75c:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801f75e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801f760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801f762:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801f764:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801f766:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801f768:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801f76a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801f76c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801f76e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801f770:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801f772:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801f774:	4b18      	ldr	r3, [pc, #96]	@ (801f7d8 <lfs_format_+0xe4>)
 801f776:	930e      	str	r3, [sp, #56]	@ 0x38
 801f778:	2300      	movs	r3, #0
 801f77a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f77c:	4b17      	ldr	r3, [pc, #92]	@ (801f7dc <lfs_format_+0xe8>)
 801f77e:	9310      	str	r3, [sp, #64]	@ 0x40
 801f780:	4b17      	ldr	r3, [pc, #92]	@ (801f7e0 <lfs_format_+0xec>)
 801f782:	9311      	str	r3, [sp, #68]	@ 0x44
 801f784:	4b17      	ldr	r3, [pc, #92]	@ (801f7e4 <lfs_format_+0xf0>)
 801f786:	9312      	str	r3, [sp, #72]	@ 0x48
 801f788:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801f78c:	2303      	movs	r3, #3
 801f78e:	aa0e      	add	r2, sp, #56	@ 0x38
 801f790:	a906      	add	r1, sp, #24
 801f792:	4620      	mov	r0, r4
 801f794:	f7ff fcb2 	bl	801f0fc <lfs_dir_commit>
        if (err) {
 801f798:	4606      	mov	r6, r0
 801f79a:	2800      	cmp	r0, #0
 801f79c:	d1ce      	bne.n	801f73c <lfs_format_+0x48>
        root.erased = false;
 801f79e:	2200      	movs	r2, #0
 801f7a0:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801f7a4:	4613      	mov	r3, r2
 801f7a6:	a906      	add	r1, sp, #24
 801f7a8:	4620      	mov	r0, r4
 801f7aa:	f7ff fca7 	bl	801f0fc <lfs_dir_commit>
        if (err) {
 801f7ae:	4606      	mov	r6, r0
 801f7b0:	2800      	cmp	r0, #0
 801f7b2:	d1c3      	bne.n	801f73c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	9314      	str	r3, [sp, #80]	@ 0x50
 801f7b8:	2301      	movs	r3, #1
 801f7ba:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7bc:	aa14      	add	r2, sp, #80	@ 0x50
 801f7be:	a906      	add	r1, sp, #24
 801f7c0:	4620      	mov	r0, r4
 801f7c2:	f7fd fe6b 	bl	801d49c <lfs_dir_fetch>
 801f7c6:	4606      	mov	r6, r0
        if (err) {
 801f7c8:	e7b8      	b.n	801f73c <lfs_format_+0x48>
 801f7ca:	bf00      	nop
 801f7cc:	0803b0d8 	.word	0x0803b0d8
 801f7d0:	0803b4c0 	.word	0x0803b4c0
 801f7d4:	0803a734 	.word	0x0803a734
 801f7d8:	40100000 	.word	0x40100000
 801f7dc:	0ff00008 	.word	0x0ff00008
 801f7e0:	0803b0f0 	.word	0x0803b0f0
 801f7e4:	20100018 	.word	0x20100018

0801f7e8 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801f7e8:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801f7ea:	f7ff fdcd 	bl	801f388 <lfs_deinit>
}
 801f7ee:	bd08      	pop	{r3, pc}

0801f7f0 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f4:	b09b      	sub	sp, #108	@ 0x6c
 801f7f6:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801f7f8:	f7ff fde0 	bl	801f3bc <lfs_init>
    if (err) {
 801f7fc:	9005      	str	r0, [sp, #20]
 801f7fe:	b9d8      	cbnz	r0, 801f838 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801f800:	2220      	movs	r2, #32
 801f802:	2100      	movs	r1, #0
 801f804:	a80f      	add	r0, sp, #60	@ 0x3c
 801f806:	f00e f883 	bl	802d910 <memset>
 801f80a:	2501      	movs	r5, #1
 801f80c:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801f80e:	4aa1      	ldr	r2, [pc, #644]	@ (801fa94 <lfs_mount_+0x2a4>)
 801f810:	ab0d      	add	r3, sp, #52	@ 0x34
 801f812:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f816:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801f81a:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801f81c:	e073      	b.n	801f906 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801f81e:	4b9e      	ldr	r3, [pc, #632]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f820:	f241 123d 	movw	r2, #4413	@ 0x113d
 801f824:	499d      	ldr	r1, [pc, #628]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f826:	489e      	ldr	r0, [pc, #632]	@ (801faa0 <lfs_mount_+0x2b0>)
 801f828:	f00b fb54 	bl	802aed4 <printf>
            err = LFS_ERR_CORRUPT;
 801f82c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801f830:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801f832:	4620      	mov	r0, r4
 801f834:	f7ff ffd8 	bl	801f7e8 <lfs_unmount_>
}
 801f838:	9805      	ldr	r0, [sp, #20]
 801f83a:	b01b      	add	sp, #108	@ 0x6c
 801f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801f840:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801f842:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f844:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801f846:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801f848:	2500      	movs	r5, #0
 801f84a:	e075      	b.n	801f938 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801f84c:	4620      	mov	r0, r4
 801f84e:	f7fc fb44 	bl	801beda <lfs_fs_disk_version_minor>
 801f852:	4b91      	ldr	r3, [pc, #580]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f854:	9303      	str	r3, [sp, #12]
 801f856:	9002      	str	r0, [sp, #8]
 801f858:	f8cd 9004 	str.w	r9, [sp, #4]
 801f85c:	b2bf      	uxth	r7, r7
 801f85e:	9700      	str	r7, [sp, #0]
 801f860:	4643      	mov	r3, r8
 801f862:	f241 126b 	movw	r2, #4459	@ 0x116b
 801f866:	498d      	ldr	r1, [pc, #564]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f868:	488e      	ldr	r0, [pc, #568]	@ (801faa4 <lfs_mount_+0x2b4>)
 801f86a:	f00b fb33 	bl	802aed4 <printf>
                err = LFS_ERR_INVAL;
 801f86e:	f06f 0315 	mvn.w	r3, #21
 801f872:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f874:	e7dd      	b.n	801f832 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801f876:	4b88      	ldr	r3, [pc, #544]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f878:	9303      	str	r3, [sp, #12]
 801f87a:	9002      	str	r0, [sp, #8]
 801f87c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f880:	b2bf      	uxth	r7, r7
 801f882:	9700      	str	r7, [sp, #0]
 801f884:	4643      	mov	r3, r8
 801f886:	f241 127a 	movw	r2, #4474	@ 0x117a
 801f88a:	4984      	ldr	r1, [pc, #528]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f88c:	4886      	ldr	r0, [pc, #536]	@ (801faa8 <lfs_mount_+0x2b8>)
 801f88e:	f00b fb21 	bl	802aed4 <printf>
                needssuperblock = true;
 801f892:	2301      	movs	r3, #1
 801f894:	9304      	str	r3, [sp, #16]
 801f896:	e08f      	b.n	801f9b8 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801f898:	497f      	ldr	r1, [pc, #508]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f89a:	9101      	str	r1, [sp, #4]
 801f89c:	9200      	str	r2, [sp, #0]
 801f89e:	f241 1289 	movw	r2, #4489	@ 0x1189
 801f8a2:	497e      	ldr	r1, [pc, #504]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f8a4:	4881      	ldr	r0, [pc, #516]	@ (801faac <lfs_mount_+0x2bc>)
 801f8a6:	f00b fb15 	bl	802aed4 <printf>
                    err = LFS_ERR_INVAL;
 801f8aa:	f06f 0315 	mvn.w	r3, #21
 801f8ae:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f8b0:	e7bf      	b.n	801f832 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801f8b2:	4979      	ldr	r1, [pc, #484]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f8b4:	9101      	str	r1, [sp, #4]
 801f8b6:	9200      	str	r2, [sp, #0]
 801f8b8:	f241 1294 	movw	r2, #4500	@ 0x1194
 801f8bc:	4977      	ldr	r1, [pc, #476]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f8be:	487c      	ldr	r0, [pc, #496]	@ (801fab0 <lfs_mount_+0x2c0>)
 801f8c0:	f00b fb08 	bl	802aed4 <printf>
                    err = LFS_ERR_INVAL;
 801f8c4:	f06f 0315 	mvn.w	r3, #21
 801f8c8:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f8ca:	e7b2      	b.n	801f832 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801f8cc:	4972      	ldr	r1, [pc, #456]	@ (801fa98 <lfs_mount_+0x2a8>)
 801f8ce:	9101      	str	r1, [sp, #4]
 801f8d0:	9200      	str	r2, [sp, #0]
 801f8d2:	f241 129f 	movw	r2, #4511	@ 0x119f
 801f8d6:	4971      	ldr	r1, [pc, #452]	@ (801fa9c <lfs_mount_+0x2ac>)
 801f8d8:	4876      	ldr	r0, [pc, #472]	@ (801fab4 <lfs_mount_+0x2c4>)
 801f8da:	f00b fafb 	bl	802aed4 <printf>
                    err = LFS_ERR_INVAL;
 801f8de:	f06f 0315 	mvn.w	r3, #21
 801f8e2:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f8e4:	e7a5      	b.n	801f832 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801f8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8e8:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801f8ea:	9b08      	ldr	r3, [sp, #32]
 801f8ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f8ee:	4293      	cmp	r3, r2
 801f8f0:	f040 8096 	bne.w	801fa20 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801f8f4:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801f8f8:	a90f      	add	r1, sp, #60	@ 0x3c
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	f7fc fdee 	bl	801c4dc <lfs_dir_getgstate>
        if (err) {
 801f900:	2800      	cmp	r0, #0
 801f902:	f040 809e 	bne.w	801fa42 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f906:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f908:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801f90c:	f000 809d 	beq.w	801fa4a <lfs_mount_+0x25a>
 801f910:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f916:	f000 8096 	beq.w	801fa46 <lfs_mount_+0x256>
 801f91a:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801f91c:	f013 0301 	ands.w	r3, r3, #1
 801f920:	f040 8095 	bne.w	801fa4e <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801f924:	a90d      	add	r1, sp, #52	@ 0x34
 801f926:	a815      	add	r0, sp, #84	@ 0x54
 801f928:	f7fc fa60 	bl	801bdec <lfs_pair_issync>
 801f92c:	9004      	str	r0, [sp, #16]
 801f92e:	2800      	cmp	r0, #0
 801f930:	f47f af75 	bne.w	801f81e <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801f934:	42b5      	cmp	r5, r6
 801f936:	d083      	beq.n	801f840 <lfs_mount_+0x50>
        tortoise_i += 1;
 801f938:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f93a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f93c:	4b5e      	ldr	r3, [pc, #376]	@ (801fab8 <lfs_mount_+0x2c8>)
 801f93e:	9318      	str	r3, [sp, #96]	@ 0x60
 801f940:	2308      	movs	r3, #8
 801f942:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801f944:	ab17      	add	r3, sp, #92	@ 0x5c
 801f946:	9303      	str	r3, [sp, #12]
 801f948:	4b5c      	ldr	r3, [pc, #368]	@ (801fabc <lfs_mount_+0x2cc>)
 801f94a:	9302      	str	r3, [sp, #8]
 801f94c:	2300      	movs	r3, #0
 801f94e:	9301      	str	r3, [sp, #4]
 801f950:	4b5b      	ldr	r3, [pc, #364]	@ (801fac0 <lfs_mount_+0x2d0>)
 801f952:	9300      	str	r3, [sp, #0]
 801f954:	4b5b      	ldr	r3, [pc, #364]	@ (801fac4 <lfs_mount_+0x2d4>)
 801f956:	aa15      	add	r2, sp, #84	@ 0x54
 801f958:	a90f      	add	r1, sp, #60	@ 0x3c
 801f95a:	4620      	mov	r0, r4
 801f95c:	f7fd fabe 	bl	801cedc <lfs_dir_fetchmatch>
        if (tag < 0) {
 801f960:	2800      	cmp	r0, #0
 801f962:	db6c      	blt.n	801fa3e <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801f964:	2800      	cmp	r0, #0
 801f966:	d0c5      	beq.n	801f8f4 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801f968:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801f96c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801f970:	d0c0      	beq.n	801f8f4 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801f972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f974:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801f976:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f978:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801f97a:	ab07      	add	r3, sp, #28
 801f97c:	9300      	str	r3, [sp, #0]
 801f97e:	4b52      	ldr	r3, [pc, #328]	@ (801fac8 <lfs_mount_+0x2d8>)
 801f980:	4a50      	ldr	r2, [pc, #320]	@ (801fac4 <lfs_mount_+0x2d4>)
 801f982:	a90f      	add	r1, sp, #60	@ 0x3c
 801f984:	4620      	mov	r0, r4
 801f986:	f7fc fd9b 	bl	801c4c0 <lfs_dir_get>
            if (tag < 0) {
 801f98a:	2800      	cmp	r0, #0
 801f98c:	db55      	blt.n	801fa3a <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801f98e:	9f07      	ldr	r7, [sp, #28]
 801f990:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801f994:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801f998:	4620      	mov	r0, r4
 801f99a:	f7fc fa99 	bl	801bed0 <lfs_fs_disk_version_major>
 801f99e:	4681      	mov	r9, r0
 801f9a0:	4540      	cmp	r0, r8
 801f9a2:	f47f af53 	bne.w	801f84c <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801f9a6:	4620      	mov	r0, r4
 801f9a8:	f7fc fa97 	bl	801beda <lfs_fs_disk_version_minor>
 801f9ac:	4550      	cmp	r0, sl
 801f9ae:	f4ff af4d 	bcc.w	801f84c <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801f9b2:	4550      	cmp	r0, sl
 801f9b4:	f63f af5f 	bhi.w	801f876 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801f9b8:	9904      	ldr	r1, [sp, #16]
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	f7fc fb2b 	bl	801c016 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801f9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9c2:	b123      	cbz	r3, 801f9ce <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801f9c4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801f9c6:	4293      	cmp	r3, r2
 801f9c8:	f63f af66 	bhi.w	801f898 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801f9cc:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801f9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9d0:	b123      	cbz	r3, 801f9dc <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801f9d2:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801f9d4:	4293      	cmp	r3, r2
 801f9d6:	f63f af6c 	bhi.w	801f8b2 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801f9da:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801f9dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9de:	b14b      	cbz	r3, 801f9f4 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801f9e0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f9e2:	4293      	cmp	r3, r2
 801f9e4:	f63f af72 	bhi.w	801f8cc <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801f9e8:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801f9ea:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801f9ec:	4293      	cmp	r3, r2
 801f9ee:	bf28      	it	cs
 801f9f0:	4613      	movcs	r3, r2
 801f9f2:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801f9f4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801f9f6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f9f8:	2900      	cmp	r1, #0
 801f9fa:	f43f af74 	beq.w	801f8e6 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801f9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa00:	4299      	cmp	r1, r3
 801fa02:	f43f af70 	beq.w	801f8e6 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801fa06:	4a24      	ldr	r2, [pc, #144]	@ (801fa98 <lfs_mount_+0x2a8>)
 801fa08:	9201      	str	r2, [sp, #4]
 801fa0a:	9100      	str	r1, [sp, #0]
 801fa0c:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801fa10:	4922      	ldr	r1, [pc, #136]	@ (801fa9c <lfs_mount_+0x2ac>)
 801fa12:	482e      	ldr	r0, [pc, #184]	@ (801facc <lfs_mount_+0x2dc>)
 801fa14:	f00b fa5e 	bl	802aed4 <printf>
                err = LFS_ERR_INVAL;
 801fa18:	f06f 0315 	mvn.w	r3, #21
 801fa1c:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801fa1e:	e708      	b.n	801f832 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801fa20:	491d      	ldr	r1, [pc, #116]	@ (801fa98 <lfs_mount_+0x2a8>)
 801fa22:	9101      	str	r1, [sp, #4]
 801fa24:	9200      	str	r2, [sp, #0]
 801fa26:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801fa2a:	491c      	ldr	r1, [pc, #112]	@ (801fa9c <lfs_mount_+0x2ac>)
 801fa2c:	4828      	ldr	r0, [pc, #160]	@ (801fad0 <lfs_mount_+0x2e0>)
 801fa2e:	f00b fa51 	bl	802aed4 <printf>
                err = LFS_ERR_INVAL;
 801fa32:	f06f 0315 	mvn.w	r3, #21
 801fa36:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801fa38:	e6fb      	b.n	801f832 <lfs_mount_+0x42>
                err = tag;
 801fa3a:	9005      	str	r0, [sp, #20]
 801fa3c:	e6f9      	b.n	801f832 <lfs_mount_+0x42>
            err = tag;
 801fa3e:	9005      	str	r0, [sp, #20]
 801fa40:	e6f7      	b.n	801f832 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801fa42:	9005      	str	r0, [sp, #20]
 801fa44:	e6f5      	b.n	801f832 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801fa46:	2301      	movs	r3, #1
 801fa48:	e768      	b.n	801f91c <lfs_mount_+0x12c>
 801fa4a:	2301      	movs	r3, #1
 801fa4c:	e766      	b.n	801f91c <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801fa4e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801fa52:	9a05      	ldr	r2, [sp, #20]
 801fa54:	2a02      	cmp	r2, #2
 801fa56:	dc05      	bgt.n	801fa64 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801fa58:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801fa5c:	b909      	cbnz	r1, 801fa62 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801fa5e:	3201      	adds	r2, #1
 801fa60:	e7f8      	b.n	801fa54 <lfs_mount_+0x264>
            return false;
 801fa62:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801fa64:	b3b3      	cbz	r3, 801fad4 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801fa66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa68:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801fa6c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801fa6e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801fa72:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801fa76:	ca07      	ldmia	r2, {r0, r1, r2}
 801fa78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801fa7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801fa7e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801fa80:	fbb3 f1f2 	udiv	r1, r3, r2
 801fa84:	fb02 3311 	mls	r3, r2, r1, r3
 801fa88:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	f7fc fa2d 	bl	801beea <lfs_alloc_drop>
    return 0;
 801fa90:	e6d2      	b.n	801f838 <lfs_mount_+0x48>
 801fa92:	bf00      	nop
 801fa94:	08037164 	.word	0x08037164
 801fa98:	080381c0 	.word	0x080381c0
 801fa9c:	0803a734 	.word	0x0803a734
 801faa0:	0803a8f4 	.word	0x0803a8f4
 801faa4:	0803b0fc 	.word	0x0803b0fc
 801faa8:	0803b134 	.word	0x0803b134
 801faac:	0803b174 	.word	0x0803b174
 801fab0:	0803b1a8 	.word	0x0803b1a8
 801fab4:	0803b1dc 	.word	0x0803b1dc
 801fab8:	0803b0f0 	.word	0x0803b0f0
 801fabc:	0801cc9d 	.word	0x0801cc9d
 801fac0:	0ff00008 	.word	0x0ff00008
 801fac4:	7ffffc00 	.word	0x7ffffc00
 801fac8:	20100018 	.word	0x20100018
 801facc:	0803b210 	.word	0x0803b210
 801fad0:	0803b244 	.word	0x0803b244
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801fad4:	4b06      	ldr	r3, [pc, #24]	@ (801faf0 <lfs_mount_+0x300>)
 801fad6:	9302      	str	r3, [sp, #8]
 801fad8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801fada:	9301      	str	r3, [sp, #4]
 801fadc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fade:	9300      	str	r3, [sp, #0]
 801fae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fae2:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801fae6:	4903      	ldr	r1, [pc, #12]	@ (801faf4 <lfs_mount_+0x304>)
 801fae8:	4803      	ldr	r0, [pc, #12]	@ (801faf8 <lfs_mount_+0x308>)
 801faea:	f00b f9f3 	bl	802aed4 <printf>
 801faee:	e7ba      	b.n	801fa66 <lfs_mount_+0x276>
 801faf0:	080381c0 	.word	0x080381c0
 801faf4:	0803a734 	.word	0x0803a734
 801faf8:	0803b274 	.word	0x0803b274

0801fafc <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801fafc:	b570      	push	{r4, r5, r6, lr}
 801fafe:	4606      	mov	r6, r0
 801fb00:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801fb02:	f7ff fbd7 	bl	801f2b4 <lfs_file_sync_>
 801fb06:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801fb08:	4621      	mov	r1, r4
 801fb0a:	4630      	mov	r0, r6
 801fb0c:	f7fc f9cd 	bl	801beaa <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801fb10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	b10b      	cbz	r3, 801fb1a <lfs_file_close_+0x1e>
}
 801fb16:	4628      	mov	r0, r5
 801fb18:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801fb1a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801fb1c:	f7fb ff2e 	bl	801b97c <vPortFree>
    return err;
 801fb20:	e7f9      	b.n	801fb16 <lfs_file_close_+0x1a>
	...

0801fb24 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801fb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb28:	b08d      	sub	sp, #52	@ 0x34
 801fb2a:	4682      	mov	sl, r0
 801fb2c:	4688      	mov	r8, r1
 801fb2e:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801fb30:	6812      	ldr	r2, [r2, #0]
 801fb32:	9205      	str	r2, [sp, #20]
    if (id) {
 801fb34:	9306      	str	r3, [sp, #24]
 801fb36:	b11b      	cbz	r3, 801fb40 <lfs_dir_find+0x1c>
 801fb38:	461a      	mov	r2, r3
        *id = 0x3ff;
 801fb3a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fb3e:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801fb40:	f8da 3020 	ldr.w	r3, [sl, #32]
 801fb44:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801fb48:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801fb4c:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801fb50:	4e4d      	ldr	r6, [pc, #308]	@ (801fc88 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801fb52:	4d4e      	ldr	r5, [pc, #312]	@ (801fc8c <lfs_dir_find+0x168>)
 801fb54:	4629      	mov	r1, r5
 801fb56:	9f05      	ldr	r7, [sp, #20]
 801fb58:	4638      	mov	r0, r7
 801fb5a:	f00d ff49 	bl	802d9f0 <strspn>
 801fb5e:	4604      	mov	r4, r0
 801fb60:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801fb64:	4629      	mov	r1, r5
 801fb66:	4648      	mov	r0, r9
 801fb68:	f00d fef6 	bl	802d958 <strcspn>
 801fb6c:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801fb6e:	2801      	cmp	r0, #1
 801fb70:	d00a      	beq.n	801fb88 <lfs_dir_find+0x64>
 801fb72:	2d02      	cmp	r5, #2
 801fb74:	d00c      	beq.n	801fb90 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801fb76:	eb09 0305 	add.w	r3, r9, r5
 801fb7a:	9305      	str	r3, [sp, #20]
 801fb7c:	469b      	mov	fp, r3
        int depth = 1;
 801fb7e:	2701      	movs	r7, #1
 801fb80:	e013      	b.n	801fbaa <lfs_dir_find+0x86>
 801fb82:	46b2      	mov	sl, r6
 801fb84:	4606      	mov	r6, r0
 801fb86:	e7e4      	b.n	801fb52 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801fb88:	5d3b      	ldrb	r3, [r7, r4]
 801fb8a:	2b2e      	cmp	r3, #46	@ 0x2e
 801fb8c:	d1f1      	bne.n	801fb72 <lfs_dir_find+0x4e>
 801fb8e:	e006      	b.n	801fb9e <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801fb90:	2202      	movs	r2, #2
 801fb92:	493f      	ldr	r1, [pc, #252]	@ (801fc90 <lfs_dir_find+0x16c>)
 801fb94:	4648      	mov	r0, r9
 801fb96:	f00d fe27 	bl	802d7e8 <memcmp>
 801fb9a:	2800      	cmp	r0, #0
 801fb9c:	d1eb      	bne.n	801fb76 <lfs_dir_find+0x52>
            name += namelen;
 801fb9e:	eb09 0305 	add.w	r3, r9, r5
 801fba2:	9305      	str	r3, [sp, #20]
            goto nextname;
 801fba4:	e7d5      	b.n	801fb52 <lfs_dir_find+0x2e>
                depth += 1;
 801fba6:	3701      	adds	r7, #1
            suffix += sufflen;
 801fba8:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801fbaa:	4c38      	ldr	r4, [pc, #224]	@ (801fc8c <lfs_dir_find+0x168>)
 801fbac:	4621      	mov	r1, r4
 801fbae:	4658      	mov	r0, fp
 801fbb0:	f00d ff1e 	bl	802d9f0 <strspn>
 801fbb4:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801fbb6:	4621      	mov	r1, r4
 801fbb8:	4658      	mov	r0, fp
 801fbba:	f00d fecd 	bl	802d958 <strcspn>
            if (sufflen == 0) {
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	b170      	cbz	r0, 801fbe0 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801fbc2:	2802      	cmp	r0, #2
 801fbc4:	d1ef      	bne.n	801fba6 <lfs_dir_find+0x82>
 801fbc6:	2202      	movs	r2, #2
 801fbc8:	4931      	ldr	r1, [pc, #196]	@ (801fc90 <lfs_dir_find+0x16c>)
 801fbca:	4658      	mov	r0, fp
 801fbcc:	f00d fe0c 	bl	802d7e8 <memcmp>
 801fbd0:	2800      	cmp	r0, #0
 801fbd2:	d1e8      	bne.n	801fba6 <lfs_dir_find+0x82>
                if (depth == 0) {
 801fbd4:	3f01      	subs	r7, #1
 801fbd6:	d1e7      	bne.n	801fba8 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801fbd8:	eb0b 0304 	add.w	r3, fp, r4
 801fbdc:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801fbde:	e7b8      	b.n	801fb52 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801fbe0:	f899 3000 	ldrb.w	r3, [r9]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d04a      	beq.n	801fc7e <lfs_dir_find+0x15a>
        *path = name;
 801fbe8:	9b07      	ldr	r3, [sp, #28]
 801fbea:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801fbee:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801fbf2:	2b02      	cmp	r3, #2
 801fbf4:	d13f      	bne.n	801fc76 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801fbf6:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801fbfa:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fbfe:	429e      	cmp	r6, r3
 801fc00:	d102      	bne.n	801fc08 <lfs_dir_find+0xe4>
 801fc02:	464c      	mov	r4, r9
 801fc04:	4656      	mov	r6, sl
 801fc06:	e029      	b.n	801fc5c <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801fc08:	02b6      	lsls	r6, r6, #10
 801fc0a:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801fc0e:	9300      	str	r3, [sp, #0]
 801fc10:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801fc14:	f043 0308 	orr.w	r3, r3, #8
 801fc18:	4a1e      	ldr	r2, [pc, #120]	@ (801fc94 <lfs_dir_find+0x170>)
 801fc1a:	4641      	mov	r1, r8
 801fc1c:	4650      	mov	r0, sl
 801fc1e:	f7fc fc4f 	bl	801c4c0 <lfs_dir_get>
            if (res < 0) {
 801fc22:	1e06      	subs	r6, r0, #0
 801fc24:	db2b      	blt.n	801fc7e <lfs_dir_find+0x15a>
 801fc26:	464c      	mov	r4, r9
 801fc28:	4656      	mov	r6, sl
 801fc2a:	e017      	b.n	801fc5c <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc2c:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801fc2e:	9609      	str	r6, [sp, #36]	@ 0x24
 801fc30:	940a      	str	r4, [sp, #40]	@ 0x28
 801fc32:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc34:	aa09      	add	r2, sp, #36	@ 0x24
 801fc36:	9203      	str	r2, [sp, #12]
 801fc38:	4a17      	ldr	r2, [pc, #92]	@ (801fc98 <lfs_dir_find+0x174>)
 801fc3a:	9202      	str	r2, [sp, #8]
 801fc3c:	9301      	str	r3, [sp, #4]
 801fc3e:	9500      	str	r5, [sp, #0]
 801fc40:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801fc44:	463a      	mov	r2, r7
 801fc46:	4641      	mov	r1, r8
 801fc48:	4630      	mov	r0, r6
 801fc4a:	f7fd f947 	bl	801cedc <lfs_dir_fetchmatch>
            if (tag < 0) {
 801fc4e:	2800      	cmp	r0, #0
 801fc50:	db14      	blt.n	801fc7c <lfs_dir_find+0x158>
            if (tag) {
 801fc52:	2800      	cmp	r0, #0
 801fc54:	d195      	bne.n	801fb82 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801fc56:	f898 3017 	ldrb.w	r3, [r8, #23]
 801fc5a:	b14b      	cbz	r3, 801fc70 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc5c:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801fc60:	212f      	movs	r1, #47	@ 0x2f
 801fc62:	4620      	mov	r0, r4
 801fc64:	f00d fe6b 	bl	802d93e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc68:	2800      	cmp	r0, #0
 801fc6a:	d0df      	beq.n	801fc2c <lfs_dir_find+0x108>
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	e7de      	b.n	801fc2e <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801fc70:	f06f 0601 	mvn.w	r6, #1
 801fc74:	e003      	b.n	801fc7e <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801fc76:	f06f 0613 	mvn.w	r6, #19
 801fc7a:	e000      	b.n	801fc7e <lfs_dir_find+0x15a>
 801fc7c:	4606      	mov	r6, r0
}
 801fc7e:	4630      	mov	r0, r6
 801fc80:	b00d      	add	sp, #52	@ 0x34
 801fc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc86:	bf00      	nop
 801fc88:	002ffc00 	.word	0x002ffc00
 801fc8c:	0803baec 	.word	0x0803baec
 801fc90:	0803b2ac 	.word	0x0803b2ac
 801fc94:	700ffc00 	.word	0x700ffc00
 801fc98:	0801cc9d 	.word	0x0801cc9d

0801fc9c <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801fc9c:	b570      	push	{r4, r5, r6, lr}
 801fc9e:	b09a      	sub	sp, #104	@ 0x68
 801fca0:	4604      	mov	r4, r0
 801fca2:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801fca4:	f7ff fad2 	bl	801f24c <lfs_fs_forceconsistency>
    if (err) {
 801fca8:	4603      	mov	r3, r0
 801fcaa:	b110      	cbz	r0, 801fcb2 <lfs_remove_+0x16>
}
 801fcac:	4618      	mov	r0, r3
 801fcae:	b01a      	add	sp, #104	@ 0x68
 801fcb0:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	aa03      	add	r2, sp, #12
 801fcb6:	a910      	add	r1, sp, #64	@ 0x40
 801fcb8:	4620      	mov	r0, r4
 801fcba:	f7ff ff33 	bl	801fb24 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801fcbe:	1e03      	subs	r3, r0, #0
 801fcc0:	dbf4      	blt.n	801fcac <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801fcc2:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801fcc6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801fcca:	4295      	cmp	r5, r2
 801fccc:	d031      	beq.n	801fd32 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801fcce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801fcd0:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801fcd2:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801fcd6:	2e02      	cmp	r6, #2
 801fcd8:	d02e      	beq.n	801fd38 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801fcda:	02ad      	lsls	r5, r5, #10
 801fcdc:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801fce0:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801fce4:	9518      	str	r5, [sp, #96]	@ 0x60
 801fce6:	2300      	movs	r3, #0
 801fce8:	9319      	str	r3, [sp, #100]	@ 0x64
 801fcea:	2301      	movs	r3, #1
 801fcec:	aa18      	add	r2, sp, #96	@ 0x60
 801fcee:	a910      	add	r1, sp, #64	@ 0x40
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f7ff fa03 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	d142      	bne.n	801fd82 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801fcfc:	9a06      	ldr	r2, [sp, #24]
 801fcfe:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801fd00:	2e02      	cmp	r6, #2
 801fd02:	d1d3      	bne.n	801fcac <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801fd04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f7fc f9db 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 801fd0e:	4603      	mov	r3, r0
 801fd10:	2800      	cmp	r0, #0
 801fd12:	d1cb      	bne.n	801fcac <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801fd14:	aa10      	add	r2, sp, #64	@ 0x40
 801fd16:	a908      	add	r1, sp, #32
 801fd18:	4620      	mov	r0, r4
 801fd1a:	f7fe f8e5 	bl	801dee8 <lfs_fs_pred>
        if (err) {
 801fd1e:	4603      	mov	r3, r0
 801fd20:	2800      	cmp	r0, #0
 801fd22:	d1c3      	bne.n	801fcac <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801fd24:	aa08      	add	r2, sp, #32
 801fd26:	a910      	add	r1, sp, #64	@ 0x40
 801fd28:	4620      	mov	r0, r4
 801fd2a:	f7ff faa3 	bl	801f274 <lfs_dir_drop>
 801fd2e:	4603      	mov	r3, r0
        if (err) {
 801fd30:	e7bc      	b.n	801fcac <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801fd32:	f06f 0315 	mvn.w	r3, #21
 801fd36:	e7b9      	b.n	801fcac <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801fd38:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801fd3a:	aa04      	add	r2, sp, #16
 801fd3c:	9200      	str	r2, [sp, #0]
 801fd3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fd42:	f043 0308 	orr.w	r3, r3, #8
 801fd46:	4a10      	ldr	r2, [pc, #64]	@ (801fd88 <lfs_remove_+0xec>)
 801fd48:	a910      	add	r1, sp, #64	@ 0x40
 801fd4a:	4620      	mov	r0, r4
 801fd4c:	f7fc fbb8 	bl	801c4c0 <lfs_dir_get>
        if (res < 0) {
 801fd50:	1e03      	subs	r3, r0, #0
 801fd52:	dbab      	blt.n	801fcac <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801fd54:	aa04      	add	r2, sp, #16
 801fd56:	a908      	add	r1, sp, #32
 801fd58:	4620      	mov	r0, r4
 801fd5a:	f7fd fb9f 	bl	801d49c <lfs_dir_fetch>
        if (err) {
 801fd5e:	4603      	mov	r3, r0
 801fd60:	2800      	cmp	r0, #0
 801fd62:	d1a3      	bne.n	801fcac <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801fd64:	2101      	movs	r1, #1
 801fd66:	4620      	mov	r0, r4
 801fd68:	f7fc f9ac 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	2800      	cmp	r0, #0
 801fd70:	d19c      	bne.n	801fcac <lfs_remove_+0x10>
        dir.type = 0;
 801fd72:	2300      	movs	r3, #0
 801fd74:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801fd78:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801fd7c:	ab06      	add	r3, sp, #24
 801fd7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fd80:	e7ab      	b.n	801fcda <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801fd82:	9a06      	ldr	r2, [sp, #24]
 801fd84:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801fd86:	e791      	b.n	801fcac <lfs_remove_+0x10>
 801fd88:	700ffc00 	.word	0x700ffc00

0801fd8c <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801fd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd8e:	b087      	sub	sp, #28
 801fd90:	4607      	mov	r7, r0
 801fd92:	460d      	mov	r5, r1
 801fd94:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801fd96:	f101 0608 	add.w	r6, r1, #8
 801fd9a:	2300      	movs	r3, #0
 801fd9c:	aa03      	add	r2, sp, #12
 801fd9e:	4631      	mov	r1, r6
 801fda0:	f7ff fec0 	bl	801fb24 <lfs_dir_find>
    if (tag < 0) {
 801fda4:	1e04      	subs	r4, r0, #0
 801fda6:	db14      	blt.n	801fdd2 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801fda8:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801fdac:	2b02      	cmp	r3, #2
 801fdae:	d130      	bne.n	801fe12 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801fdb0:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801fdb4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fdb8:	429c      	cmp	r4, r3
 801fdba:	d10d      	bne.n	801fdd8 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801fdbc:	6a3b      	ldr	r3, [r7, #32]
 801fdbe:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801fdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdc2:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801fdc4:	aa04      	add	r2, sp, #16
 801fdc6:	4631      	mov	r1, r6
 801fdc8:	4638      	mov	r0, r7
 801fdca:	f7fd fb67 	bl	801d49c <lfs_dir_fetch>
    if (err) {
 801fdce:	4604      	mov	r4, r0
 801fdd0:	b188      	cbz	r0, 801fdf6 <lfs_dir_open_+0x6a>
}
 801fdd2:	4620      	mov	r0, r4
 801fdd4:	b007      	add	sp, #28
 801fdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801fdd8:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801fdda:	ab04      	add	r3, sp, #16
 801fddc:	9300      	str	r3, [sp, #0]
 801fdde:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801fde2:	f043 0308 	orr.w	r3, r3, #8
 801fde6:	4a0c      	ldr	r2, [pc, #48]	@ (801fe18 <lfs_dir_open_+0x8c>)
 801fde8:	4631      	mov	r1, r6
 801fdea:	4638      	mov	r0, r7
 801fdec:	f7fc fb68 	bl	801c4c0 <lfs_dir_get>
        if (res < 0) {
 801fdf0:	1e04      	subs	r4, r0, #0
 801fdf2:	dae7      	bge.n	801fdc4 <lfs_dir_open_+0x38>
 801fdf4:	e7ed      	b.n	801fdd2 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801fdf6:	68ab      	ldr	r3, [r5, #8]
 801fdf8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801fdfa:	68eb      	ldr	r3, [r5, #12]
 801fdfc:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801fdfe:	2300      	movs	r3, #0
 801fe00:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801fe02:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801fe04:	2302      	movs	r3, #2
 801fe06:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801fe08:	4629      	mov	r1, r5
 801fe0a:	4638      	mov	r0, r7
 801fe0c:	f7fc f858 	bl	801bec0 <lfs_mlist_append>
    return 0;
 801fe10:	e7df      	b.n	801fdd2 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801fe12:	f06f 0413 	mvn.w	r4, #19
 801fe16:	e7dc      	b.n	801fdd2 <lfs_dir_open_+0x46>
 801fe18:	700ffc00 	.word	0x700ffc00

0801fe1c <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801fe1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe20:	b0ad      	sub	sp, #180	@ 0xb4
 801fe22:	4604      	mov	r4, r0
 801fe24:	9103      	str	r1, [sp, #12]
 801fe26:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801fe28:	f7ff fa10 	bl	801f24c <lfs_fs_forceconsistency>
    if (err) {
 801fe2c:	4606      	mov	r6, r0
 801fe2e:	b118      	cbz	r0, 801fe38 <lfs_rename_+0x1c>
}
 801fe30:	4630      	mov	r0, r6
 801fe32:	b02d      	add	sp, #180	@ 0xb4
 801fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801fe38:	2300      	movs	r3, #0
 801fe3a:	aa03      	add	r2, sp, #12
 801fe3c:	a922      	add	r1, sp, #136	@ 0x88
 801fe3e:	4620      	mov	r0, r4
 801fe40:	f7ff fe70 	bl	801fb24 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801fe44:	2800      	cmp	r0, #0
 801fe46:	f2c0 809e 	blt.w	801ff86 <lfs_rename_+0x16a>
 801fe4a:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801fe4c:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801fe50:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fe54:	429d      	cmp	r5, r3
 801fe56:	f000 8094 	beq.w	801ff82 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801fe5a:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801fe5e:	aa02      	add	r2, sp, #8
 801fe60:	a91a      	add	r1, sp, #104	@ 0x68
 801fe62:	4620      	mov	r0, r4
 801fe64:	f7ff fe5e 	bl	801fb24 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801fe68:	f1b0 0900 	subs.w	r9, r0, #0
 801fe6c:	f2c0 808d 	blt.w	801ff8a <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801fe70:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801fe74:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fe78:	429a      	cmp	r2, r3
 801fe7a:	f000 8086 	beq.w	801ff8a <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801fe7e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fe80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fe82:	429a      	cmp	r2, r3
 801fe84:	d008      	beq.n	801fe98 <lfs_rename_+0x7c>
 801fe86:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801fe88:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801fe8a:	4281      	cmp	r1, r0
 801fe8c:	d004      	beq.n	801fe98 <lfs_rename_+0x7c>
 801fe8e:	4299      	cmp	r1, r3
 801fe90:	d002      	beq.n	801fe98 <lfs_rename_+0x7c>
 801fe92:	4290      	cmp	r0, r2
 801fe94:	d000      	beq.n	801fe98 <lfs_rename_+0x7c>
 801fe96:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801fe98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fe9a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801fe9c:	f119 0f02 	cmn.w	r9, #2
 801fea0:	f000 8085 	beq.w	801ffae <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801fea4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801fea8:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801feac:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801feb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	f040 808a 	bne.w	801ffce <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801feba:	b91e      	cbnz	r6, 801fec4 <lfs_rename_+0xa8>
 801febc:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801fec0:	42ab      	cmp	r3, r5
 801fec2:	d0b5      	beq.n	801fe30 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801fec4:	2a02      	cmp	r2, #2
 801fec6:	f000 808a 	beq.w	801ffde <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801feca:	46aa      	mov	sl, r5
    if (!samepair) {
 801fecc:	b126      	cbz	r6, 801fed8 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801fece:	aa22      	add	r2, sp, #136	@ 0x88
 801fed0:	4651      	mov	r1, sl
 801fed2:	4620      	mov	r0, r4
 801fed4:	f7fc f8a6 	bl	801c024 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801fed8:	f119 0f02 	cmn.w	r9, #2
 801fedc:	f000 80b4 	beq.w	8020048 <lfs_rename_+0x22c>
 801fee0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801fee4:	029b      	lsls	r3, r3, #10
 801fee6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801feea:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801feee:	9305      	str	r3, [sp, #20]
 801fef0:	2200      	movs	r2, #0
 801fef2:	9206      	str	r2, [sp, #24]
 801fef4:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801fef8:	02bf      	lsls	r7, r7, #10
 801fefa:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801fefe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ff02:	9307      	str	r3, [sp, #28]
 801ff04:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801ff06:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801ff0a:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801ff0e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ff12:	4658      	mov	r0, fp
 801ff14:	f7f0 f9c4 	bl	80102a0 <strlen>
 801ff18:	ea48 0000 	orr.w	r0, r8, r0
 801ff1c:	9009      	str	r0, [sp, #36]	@ 0x24
 801ff1e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ff22:	432f      	orrs	r7, r5
 801ff24:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801ff28:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801ff2c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801ff2e:	ab22      	add	r3, sp, #136	@ 0x88
 801ff30:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff32:	2e00      	cmp	r6, #0
 801ff34:	f040 808a 	bne.w	802004c <lfs_rename_+0x230>
 801ff38:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801ff3c:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801ff40:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ff44:	930d      	str	r3, [sp, #52]	@ 0x34
 801ff46:	2300      	movs	r3, #0
 801ff48:	930e      	str	r3, [sp, #56]	@ 0x38
 801ff4a:	2305      	movs	r3, #5
 801ff4c:	aa05      	add	r2, sp, #20
 801ff4e:	a91a      	add	r1, sp, #104	@ 0x68
 801ff50:	4620      	mov	r0, r4
 801ff52:	f7ff f8d3 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 801ff56:	4607      	mov	r7, r0
 801ff58:	2800      	cmp	r0, #0
 801ff5a:	d179      	bne.n	8020050 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801ff5c:	b126      	cbz	r6, 801ff68 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801ff5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801ff60:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801ff62:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801ff66:	d177      	bne.n	8020058 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801ff68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff6a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801ff6c:	f119 0f02 	cmn.w	r9, #2
 801ff70:	f000 80a9 	beq.w	80200c6 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801ff74:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801ff78:	2802      	cmp	r0, #2
 801ff7a:	f000 8088 	beq.w	802008e <lfs_rename_+0x272>
    return 0;
 801ff7e:	463e      	mov	r6, r7
 801ff80:	e756      	b.n	801fe30 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801ff82:	f06f 0015 	mvn.w	r0, #21
 801ff86:	4606      	mov	r6, r0
 801ff88:	e752      	b.n	801fe30 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ff8a:	f119 0f02 	cmn.w	r9, #2
 801ff8e:	d106      	bne.n	801ff9e <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801ff90:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801ff94:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ff98:	429a      	cmp	r2, r3
 801ff9a:	f47f af70 	bne.w	801fe7e <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801ff9e:	f1b9 0f00 	cmp.w	r9, #0
 801ffa2:	db02      	blt.n	801ffaa <lfs_rename_+0x18e>
 801ffa4:	f06f 0615 	mvn.w	r6, #21
 801ffa8:	e742      	b.n	801fe30 <lfs_rename_+0x14>
 801ffaa:	464e      	mov	r6, r9
 801ffac:	e740      	b.n	801fe30 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801ffae:	9802      	ldr	r0, [sp, #8]
 801ffb0:	f7f0 f976 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801ffb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ffb6:	4283      	cmp	r3, r0
 801ffb8:	f0c0 8082 	bcc.w	80200c0 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801ffbc:	2e00      	cmp	r6, #0
 801ffbe:	d141      	bne.n	8020044 <lfs_rename_+0x228>
 801ffc0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ffc4:	42ab      	cmp	r3, r5
 801ffc6:	d83b      	bhi.n	8020040 <lfs_rename_+0x224>
            newoldid += 1;
 801ffc8:	f105 0a01 	add.w	sl, r5, #1
 801ffcc:	e77e      	b.n	801fecc <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801ffce:	2a02      	cmp	r2, #2
 801ffd0:	d002      	beq.n	801ffd8 <lfs_rename_+0x1bc>
 801ffd2:	f06f 0613 	mvn.w	r6, #19
 801ffd6:	e72b      	b.n	801fe30 <lfs_rename_+0x14>
 801ffd8:	f06f 0614 	mvn.w	r6, #20
 801ffdc:	e728      	b.n	801fe30 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801ffde:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ffe2:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801ffe4:	aa05      	add	r2, sp, #20
 801ffe6:	9200      	str	r2, [sp, #0]
 801ffe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ffec:	f043 0308 	orr.w	r3, r3, #8
 801fff0:	4a36      	ldr	r2, [pc, #216]	@ (80200cc <lfs_rename_+0x2b0>)
 801fff2:	a91a      	add	r1, sp, #104	@ 0x68
 801fff4:	4620      	mov	r0, r4
 801fff6:	f7fc fa63 	bl	801c4c0 <lfs_dir_get>
        if (res < 0) {
 801fffa:	2800      	cmp	r0, #0
 801fffc:	db1a      	blt.n	8020034 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801fffe:	aa05      	add	r2, sp, #20
 8020000:	a911      	add	r1, sp, #68	@ 0x44
 8020002:	4620      	mov	r0, r4
 8020004:	f7fd fa4a 	bl	801d49c <lfs_dir_fetch>
        if (err) {
 8020008:	b9b0      	cbnz	r0, 8020038 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 802000a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802000c:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 8020010:	d002      	beq.n	8020018 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 8020012:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 8020016:	e70b      	b.n	801fe30 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 8020018:	2101      	movs	r1, #1
 802001a:	4620      	mov	r0, r4
 802001c:	f7fc f852 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 8020020:	b960      	cbnz	r0, 802003c <lfs_rename_+0x220>
        prevdir.type = 0;
 8020022:	2300      	movs	r3, #0
 8020024:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 8020028:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 802002c:	ab0f      	add	r3, sp, #60	@ 0x3c
 802002e:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 8020030:	46aa      	mov	sl, r5
 8020032:	e74b      	b.n	801fecc <lfs_rename_+0xb0>
            return (int)res;
 8020034:	4606      	mov	r6, r0
 8020036:	e6fb      	b.n	801fe30 <lfs_rename_+0x14>
            return err;
 8020038:	4606      	mov	r6, r0
 802003a:	e6f9      	b.n	801fe30 <lfs_rename_+0x14>
            return err;
 802003c:	4606      	mov	r6, r0
 802003e:	e6f7      	b.n	801fe30 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 8020040:	46aa      	mov	sl, r5
 8020042:	e743      	b.n	801fecc <lfs_rename_+0xb0>
 8020044:	46aa      	mov	sl, r5
 8020046:	e742      	b.n	801fece <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8020048:	2300      	movs	r3, #0
 802004a:	e750      	b.n	801feee <lfs_rename_+0xd2>
 802004c:	2300      	movs	r3, #0
 802004e:	e779      	b.n	801ff44 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 8020050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020052:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 8020054:	4606      	mov	r6, r0
 8020056:	e6eb      	b.n	801fe30 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8020058:	2200      	movs	r2, #0
 802005a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802005e:	4620      	mov	r0, r4
 8020060:	f7fb ffe0 	bl	801c024 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8020064:	02ab      	lsls	r3, r5, #10
 8020066:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802006a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802006e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8020070:	2300      	movs	r3, #0
 8020072:	932b      	str	r3, [sp, #172]	@ 0xac
 8020074:	2301      	movs	r3, #1
 8020076:	aa2a      	add	r2, sp, #168	@ 0xa8
 8020078:	a922      	add	r1, sp, #136	@ 0x88
 802007a:	4620      	mov	r0, r4
 802007c:	f7ff f83e 	bl	801f0fc <lfs_dir_commit>
        if (err) {
 8020080:	4606      	mov	r6, r0
 8020082:	2800      	cmp	r0, #0
 8020084:	f43f af70 	beq.w	801ff68 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 8020088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802008a:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 802008c:	e6d0      	b.n	801fe30 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 802008e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020092:	4620      	mov	r0, r4
 8020094:	f7fc f816 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 8020098:	4606      	mov	r6, r0
 802009a:	2800      	cmp	r0, #0
 802009c:	f47f aec8 	bne.w	801fe30 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 80200a0:	aa1a      	add	r2, sp, #104	@ 0x68
 80200a2:	a911      	add	r1, sp, #68	@ 0x44
 80200a4:	4620      	mov	r0, r4
 80200a6:	f7fd ff1f 	bl	801dee8 <lfs_fs_pred>
        if (err) {
 80200aa:	4606      	mov	r6, r0
 80200ac:	2800      	cmp	r0, #0
 80200ae:	f47f aebf 	bne.w	801fe30 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 80200b2:	aa11      	add	r2, sp, #68	@ 0x44
 80200b4:	a91a      	add	r1, sp, #104	@ 0x68
 80200b6:	4620      	mov	r0, r4
 80200b8:	f7ff f8dc 	bl	801f274 <lfs_dir_drop>
 80200bc:	4606      	mov	r6, r0
        if (err) {
 80200be:	e6b7      	b.n	801fe30 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 80200c0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 80200c4:	e6b4      	b.n	801fe30 <lfs_rename_+0x14>
    return 0;
 80200c6:	463e      	mov	r6, r7
 80200c8:	e6b2      	b.n	801fe30 <lfs_rename_+0x14>
 80200ca:	bf00      	nop
 80200cc:	700ffc00 	.word	0x700ffc00

080200d0 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 80200d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80200d4:	b08b      	sub	sp, #44	@ 0x2c
 80200d6:	4607      	mov	r7, r0
 80200d8:	460c      	mov	r4, r1
 80200da:	9203      	str	r2, [sp, #12]
 80200dc:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80200de:	f013 0f02 	tst.w	r3, #2
 80200e2:	d005      	beq.n	80200f0 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 80200e4:	f7ff f8b2 	bl	801f24c <lfs_fs_forceconsistency>
        if (err) {
 80200e8:	4606      	mov	r6, r0
 80200ea:	2800      	cmp	r0, #0
 80200ec:	f040 8109 	bne.w	8020302 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 80200f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80200f2:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 80200f4:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 80200f6:	2300      	movs	r3, #0
 80200f8:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 80200fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 80200fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80200fe:	f104 0808 	add.w	r8, r4, #8
 8020102:	1d23      	adds	r3, r4, #4
 8020104:	aa03      	add	r2, sp, #12
 8020106:	4641      	mov	r1, r8
 8020108:	4638      	mov	r0, r7
 802010a:	f7ff fd0b 	bl	801fb24 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 802010e:	1e06      	subs	r6, r0, #0
 8020110:	da09      	bge.n	8020126 <lfs_file_opencfg_+0x56>
 8020112:	f116 0f02 	cmn.w	r6, #2
 8020116:	f040 80ec 	bne.w	80202f2 <lfs_file_opencfg_+0x222>
 802011a:	88a2      	ldrh	r2, [r4, #4]
 802011c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020120:	429a      	cmp	r2, r3
 8020122:	f000 80e6 	beq.w	80202f2 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 8020126:	2301      	movs	r3, #1
 8020128:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 802012a:	4621      	mov	r1, r4
 802012c:	4638      	mov	r0, r7
 802012e:	f7fb fec7 	bl	801bec0 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 8020132:	f116 0f02 	cmn.w	r6, #2
 8020136:	d019      	beq.n	802016c <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 8020138:	f415 7f00 	tst.w	r5, #512	@ 0x200
 802013c:	f040 80d7 	bne.w	80202ee <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 8020140:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8020144:	2e01      	cmp	r6, #1
 8020146:	f040 80e0 	bne.w	802030a <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 802014a:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 802014e:	d042      	beq.n	80201d6 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8020150:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8020154:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8020158:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 802015c:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 8020160:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020166:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8020168:	2500      	movs	r5, #0
 802016a:	e064      	b.n	8020236 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 802016c:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8020170:	f000 80bf 	beq.w	80202f2 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 8020174:	9d03      	ldr	r5, [sp, #12]
 8020176:	4628      	mov	r0, r5
 8020178:	f7f0 f892 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 802017c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802017e:	4283      	cmp	r3, r0
 8020180:	d202      	bcs.n	8020188 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 8020182:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 8020186:	e0b4      	b.n	80202f2 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8020188:	88a3      	ldrh	r3, [r4, #4]
 802018a:	029b      	lsls	r3, r3, #10
 802018c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8020190:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8020194:	9204      	str	r2, [sp, #16]
 8020196:	2200      	movs	r2, #0
 8020198:	9205      	str	r2, [sp, #20]
 802019a:	4318      	orrs	r0, r3
 802019c:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 80201a0:	9006      	str	r0, [sp, #24]
 80201a2:	9507      	str	r5, [sp, #28]
 80201a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80201a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80201ac:	9308      	str	r3, [sp, #32]
 80201ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80201b0:	2303      	movs	r3, #3
 80201b2:	aa04      	add	r2, sp, #16
 80201b4:	4641      	mov	r1, r8
 80201b6:	4638      	mov	r0, r7
 80201b8:	f7fe ffa0 	bl	801f0fc <lfs_dir_commit>
 80201bc:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80201be:	f110 0f1c 	cmn.w	r0, #28
 80201c2:	d005      	beq.n	80201d0 <lfs_file_opencfg_+0x100>
        if (err) {
 80201c4:	2800      	cmp	r0, #0
 80201c6:	f040 8094 	bne.w	80202f2 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80201ca:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8020320 <lfs_file_opencfg_+0x250>
 80201ce:	e7cb      	b.n	8020168 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80201d0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 80201d4:	e08d      	b.n	80202f2 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80201d6:	88a3      	ldrh	r3, [r4, #4]
 80201d8:	029b      	lsls	r3, r3, #10
 80201da:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80201de:	9200      	str	r2, [sp, #0]
 80201e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80201e4:	f043 0308 	orr.w	r3, r3, #8
 80201e8:	4a4b      	ldr	r2, [pc, #300]	@ (8020318 <lfs_file_opencfg_+0x248>)
 80201ea:	4641      	mov	r1, r8
 80201ec:	4638      	mov	r0, r7
 80201ee:	f7fc f967 	bl	801c4c0 <lfs_dir_get>
        if (tag < 0) {
 80201f2:	f1b0 0900 	subs.w	r9, r0, #0
 80201f6:	dab7      	bge.n	8020168 <lfs_file_opencfg_+0x98>
            err = tag;
 80201f8:	464e      	mov	r6, r9
 80201fa:	e07a      	b.n	80202f2 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80201fc:	685b      	ldr	r3, [r3, #4]
 80201fe:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8020202:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8020206:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 802020a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 802020e:	88a3      	ldrh	r3, [r4, #4]
 8020210:	029b      	lsls	r3, r3, #10
 8020212:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8020216:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8020218:	6849      	ldr	r1, [r1, #4]
 802021a:	9100      	str	r1, [sp, #0]
 802021c:	4313      	orrs	r3, r2
 802021e:	4a3f      	ldr	r2, [pc, #252]	@ (802031c <lfs_file_opencfg_+0x24c>)
 8020220:	4641      	mov	r1, r8
 8020222:	4638      	mov	r0, r7
 8020224:	f7fc f94c 	bl	801c4c0 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 8020228:	1e06      	subs	r6, r0, #0
 802022a:	da0c      	bge.n	8020246 <lfs_file_opencfg_+0x176>
 802022c:	f116 0f02 	cmn.w	r6, #2
 8020230:	d009      	beq.n	8020246 <lfs_file_opencfg_+0x176>
 8020232:	e05e      	b.n	80202f2 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8020234:	3501      	adds	r5, #1
 8020236:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020238:	689a      	ldr	r2, [r3, #8]
 802023a:	42aa      	cmp	r2, r5
 802023c:	d915      	bls.n	802026a <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 802023e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8020240:	f012 0f01 	tst.w	r2, #1
 8020244:	d1da      	bne.n	80201fc <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8020246:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020248:	f013 0f02 	tst.w	r3, #2
 802024c:	d0f2      	beq.n	8020234 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 802024e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8020250:	6852      	ldr	r2, [r2, #4]
 8020252:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8020256:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802025a:	6891      	ldr	r1, [r2, #8]
 802025c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802025e:	4291      	cmp	r1, r2
 8020260:	d856      	bhi.n	8020310 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 8020262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020266:	6323      	str	r3, [r4, #48]	@ 0x30
 8020268:	e7e4      	b.n	8020234 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	b16b      	cbz	r3, 802028a <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 802026e:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 8020270:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8020274:	4638      	mov	r0, r7
 8020276:	f7fb ff55 	bl	801c124 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 802027a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802027e:	f240 2301 	movw	r3, #513	@ 0x201
 8020282:	429a      	cmp	r2, r3
 8020284:	d00b      	beq.n	802029e <lfs_file_opencfg_+0x1ce>
    return 0;
 8020286:	2600      	movs	r6, #0
 8020288:	e03b      	b.n	8020302 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 802028a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 802028c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 802028e:	f7fb faf3 	bl	801b878 <pvPortMalloc>
 8020292:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8020294:	2800      	cmp	r0, #0
 8020296:	d1eb      	bne.n	8020270 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 8020298:	f06f 060b 	mvn.w	r6, #11
 802029c:	e029      	b.n	80202f2 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 802029e:	f06f 0101 	mvn.w	r1, #1
 80202a2:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 80202a4:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 80202a8:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80202aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80202ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80202b0:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80202b2:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 80202b4:	2300      	movs	r3, #0
 80202b6:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80202b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80202ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80202bc:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 80202be:	b90a      	cbnz	r2, 80202c4 <lfs_file_opencfg_+0x1f4>
    return 0;
 80202c0:	2600      	movs	r6, #0
 80202c2:	e01e      	b.n	8020302 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80202c4:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 80202c6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80202ca:	4293      	cmp	r3, r2
 80202cc:	bf28      	it	cs
 80202ce:	4613      	movcs	r3, r2
 80202d0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 80202d4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80202d6:	9200      	str	r2, [sp, #0]
 80202d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80202dc:	4a0e      	ldr	r2, [pc, #56]	@ (8020318 <lfs_file_opencfg_+0x248>)
 80202de:	4641      	mov	r1, r8
 80202e0:	4638      	mov	r0, r7
 80202e2:	f7fc f8ed 	bl	801c4c0 <lfs_dir_get>
            if (res < 0) {
 80202e6:	1e06      	subs	r6, r0, #0
 80202e8:	db03      	blt.n	80202f2 <lfs_file_opencfg_+0x222>
    return 0;
 80202ea:	2600      	movs	r6, #0
 80202ec:	e009      	b.n	8020302 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 80202ee:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 80202f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80202f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80202f8:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 80202fa:	4621      	mov	r1, r4
 80202fc:	4638      	mov	r0, r7
 80202fe:	f7ff fbfd 	bl	801fafc <lfs_file_close_>
}
 8020302:	4630      	mov	r0, r6
 8020304:	b00b      	add	sp, #44	@ 0x2c
 8020306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 802030a:	f06f 0614 	mvn.w	r6, #20
 802030e:	e7f0      	b.n	80202f2 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 8020310:	f06f 061b 	mvn.w	r6, #27
 8020314:	e7ed      	b.n	80202f2 <lfs_file_opencfg_+0x222>
 8020316:	bf00      	nop
 8020318:	700ffc00 	.word	0x700ffc00
 802031c:	7ffffc00 	.word	0x7ffffc00
 8020320:	20100000 	.word	0x20100000

08020324 <lfs_file_open_>:
        const char *path, int flags) {
 8020324:	b510      	push	{r4, lr}
 8020326:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8020328:	4c02      	ldr	r4, [pc, #8]	@ (8020334 <lfs_file_open_+0x10>)
 802032a:	9400      	str	r4, [sp, #0]
 802032c:	f7ff fed0 	bl	80200d0 <lfs_file_opencfg_>
}
 8020330:	b002      	add	sp, #8
 8020332:	bd10      	pop	{r4, pc}
 8020334:	0803b3d8 	.word	0x0803b3d8

08020338 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8020338:	b530      	push	{r4, r5, lr}
 802033a:	b0ab      	sub	sp, #172	@ 0xac
 802033c:	4604      	mov	r4, r0
 802033e:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 8020340:	f7fe ff84 	bl	801f24c <lfs_fs_forceconsistency>
    if (err) {
 8020344:	4603      	mov	r3, r0
 8020346:	b110      	cbz	r0, 802034e <lfs_mkdir_+0x16>
}
 8020348:	4618      	mov	r0, r3
 802034a:	b02b      	add	sp, #172	@ 0xac
 802034c:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 802034e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020350:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8020352:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 8020356:	aa01      	add	r2, sp, #4
 8020358:	a91e      	add	r1, sp, #120	@ 0x78
 802035a:	4620      	mov	r0, r4
 802035c:	f7ff fbe2 	bl	801fb24 <lfs_dir_find>
 8020360:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8020362:	f110 0f02 	cmn.w	r0, #2
 8020366:	d12f      	bne.n	80203c8 <lfs_mkdir_+0x90>
 8020368:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 802036c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8020370:	4291      	cmp	r1, r2
 8020372:	d029      	beq.n	80203c8 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 8020374:	9801      	ldr	r0, [sp, #4]
 8020376:	f7ef ff93 	bl	80102a0 <strlen>
 802037a:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 802037c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 802037e:	4283      	cmp	r3, r0
 8020380:	f0c0 8089 	bcc.w	8020496 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 8020384:	4620      	mov	r0, r4
 8020386:	f7fb fdad 	bl	801bee4 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 802038a:	a913      	add	r1, sp, #76	@ 0x4c
 802038c:	4620      	mov	r0, r4
 802038e:	f7fd f9f3 	bl	801d778 <lfs_dir_alloc>
    if (err) {
 8020392:	4603      	mov	r3, r0
 8020394:	2800      	cmp	r0, #0
 8020396:	d1d7      	bne.n	8020348 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 8020398:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 802039c:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 80203a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80203a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80203a8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80203ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 80203b0:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 80203b4:	b16b      	cbz	r3, 80203d2 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80203b6:	aa11      	add	r2, sp, #68	@ 0x44
 80203b8:	a90b      	add	r1, sp, #44	@ 0x2c
 80203ba:	4620      	mov	r0, r4
 80203bc:	f7fd f86e 	bl	801d49c <lfs_dir_fetch>
        if (err) {
 80203c0:	4603      	mov	r3, r0
 80203c2:	2800      	cmp	r0, #0
 80203c4:	d0f4      	beq.n	80203b0 <lfs_mkdir_+0x78>
 80203c6:	e7bf      	b.n	8020348 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	dbbd      	blt.n	8020348 <lfs_mkdir_+0x10>
 80203cc:	f06f 0310 	mvn.w	r3, #16
 80203d0:	e7ba      	b.n	8020348 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 80203d2:	4b32      	ldr	r3, [pc, #200]	@ (802049c <lfs_mkdir_+0x164>)
 80203d4:	9326      	str	r3, [sp, #152]	@ 0x98
 80203d6:	ab11      	add	r3, sp, #68	@ 0x44
 80203d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80203da:	2301      	movs	r3, #1
 80203dc:	aa26      	add	r2, sp, #152	@ 0x98
 80203de:	a913      	add	r1, sp, #76	@ 0x4c
 80203e0:	4620      	mov	r0, r4
 80203e2:	f7fe fe8b 	bl	801f0fc <lfs_dir_commit>
    if (err) {
 80203e6:	4603      	mov	r3, r0
 80203e8:	2800      	cmp	r0, #0
 80203ea:	d1ad      	bne.n	8020348 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 80203ec:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 80203f0:	bb33      	cbnz	r3, 8020440 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 80203f2:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 80203f6:	029b      	lsls	r3, r3, #10
 80203f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80203fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8020400:	9203      	str	r2, [sp, #12]
 8020402:	2200      	movs	r2, #0
 8020404:	9204      	str	r2, [sp, #16]
 8020406:	431d      	orrs	r5, r3
 8020408:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802040c:	9505      	str	r5, [sp, #20]
 802040e:	9a01      	ldr	r2, [sp, #4]
 8020410:	9206      	str	r2, [sp, #24]
 8020412:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8020416:	f043 0308 	orr.w	r3, r3, #8
 802041a:	9307      	str	r3, [sp, #28]
 802041c:	ab13      	add	r3, sp, #76	@ 0x4c
 802041e:	9308      	str	r3, [sp, #32]
 8020420:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 8020424:	2b00      	cmp	r3, #0
 8020426:	d134      	bne.n	8020492 <lfs_mkdir_+0x15a>
 8020428:	4b1c      	ldr	r3, [pc, #112]	@ (802049c <lfs_mkdir_+0x164>)
 802042a:	9309      	str	r3, [sp, #36]	@ 0x24
 802042c:	ab13      	add	r3, sp, #76	@ 0x4c
 802042e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020430:	2304      	movs	r3, #4
 8020432:	aa03      	add	r2, sp, #12
 8020434:	a91e      	add	r1, sp, #120	@ 0x78
 8020436:	4620      	mov	r0, r4
 8020438:	f7fe fe60 	bl	801f0fc <lfs_dir_commit>
 802043c:	4603      	mov	r3, r0
    if (err) {
 802043e:	e783      	b.n	8020348 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 8020440:	2101      	movs	r1, #1
 8020442:	4620      	mov	r0, r4
 8020444:	f7fb fe3e 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 8020448:	4603      	mov	r3, r0
 802044a:	2800      	cmp	r0, #0
 802044c:	f47f af7c 	bne.w	8020348 <lfs_mkdir_+0x10>
        cwd.type = 0;
 8020450:	2300      	movs	r3, #0
 8020452:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 8020456:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 802045a:	ab1c      	add	r3, sp, #112	@ 0x70
 802045c:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 802045e:	4b0f      	ldr	r3, [pc, #60]	@ (802049c <lfs_mkdir_+0x164>)
 8020460:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020462:	ab13      	add	r3, sp, #76	@ 0x4c
 8020464:	9329      	str	r3, [sp, #164]	@ 0xa4
 8020466:	2301      	movs	r3, #1
 8020468:	aa28      	add	r2, sp, #160	@ 0xa0
 802046a:	a90b      	add	r1, sp, #44	@ 0x2c
 802046c:	4620      	mov	r0, r4
 802046e:	f7fe fe45 	bl	801f0fc <lfs_dir_commit>
        if (err) {
 8020472:	4603      	mov	r3, r0
 8020474:	b110      	cbz	r0, 802047c <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 8020476:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020478:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 802047a:	e765      	b.n	8020348 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 802047c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802047e:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8020480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020484:	4620      	mov	r0, r4
 8020486:	f7fb fe1d 	bl	801c0c4 <lfs_fs_preporphans>
        if (err) {
 802048a:	4603      	mov	r3, r0
 802048c:	2800      	cmp	r0, #0
 802048e:	d0b0      	beq.n	80203f2 <lfs_mkdir_+0xba>
 8020490:	e75a      	b.n	8020348 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8020492:	2300      	movs	r3, #0
 8020494:	e7c9      	b.n	802042a <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 8020496:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 802049a:	e755      	b.n	8020348 <lfs_mkdir_+0x10>
 802049c:	600ffc08 	.word	0x600ffc08

080204a0 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 80204a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204a2:	b085      	sub	sp, #20
 80204a4:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 80204a6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80204aa:	429a      	cmp	r2, r3
 80204ac:	d02b      	beq.n	8020506 <lfs_dir_getinfo+0x66>
 80204ae:	4604      	mov	r4, r0
 80204b0:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 80204b2:	0297      	lsls	r7, r2, #10
 80204b4:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80204b6:	3301      	adds	r3, #1
 80204b8:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80204bc:	9100      	str	r1, [sp, #0]
 80204be:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80204c2:	4a19      	ldr	r2, [pc, #100]	@ (8020528 <lfs_dir_getinfo+0x88>)
 80204c4:	4631      	mov	r1, r6
 80204c6:	f7fb fffb 	bl	801c4c0 <lfs_dir_get>
    if (tag < 0) {
 80204ca:	2800      	cmp	r0, #0
 80204cc:	db21      	blt.n	8020512 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 80204ce:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 80204d2:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80204d4:	ab02      	add	r3, sp, #8
 80204d6:	9300      	str	r3, [sp, #0]
 80204d8:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 80204dc:	f043 0308 	orr.w	r3, r3, #8
 80204e0:	4a12      	ldr	r2, [pc, #72]	@ (802052c <lfs_dir_getinfo+0x8c>)
 80204e2:	4631      	mov	r1, r6
 80204e4:	4620      	mov	r0, r4
 80204e6:	f7fb ffeb 	bl	801c4c0 <lfs_dir_get>
    if (tag < 0) {
 80204ea:	2800      	cmp	r0, #0
 80204ec:	db11      	blt.n	8020512 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 80204ee:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80204f2:	f240 2202 	movw	r2, #514	@ 0x202
 80204f6:	4293      	cmp	r3, r2
 80204f8:	d00d      	beq.n	8020516 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80204fa:	f240 2201 	movw	r2, #513	@ 0x201
 80204fe:	4293      	cmp	r3, r2
 8020500:	d00d      	beq.n	802051e <lfs_dir_getinfo+0x7e>
    return 0;
 8020502:	2000      	movs	r0, #0
 8020504:	e005      	b.n	8020512 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 8020506:	4b0a      	ldr	r3, [pc, #40]	@ (8020530 <lfs_dir_getinfo+0x90>)
 8020508:	881b      	ldrh	r3, [r3, #0]
 802050a:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 802050c:	2302      	movs	r3, #2
 802050e:	702b      	strb	r3, [r5, #0]
        return 0;
 8020510:	2000      	movs	r0, #0
}
 8020512:	b005      	add	sp, #20
 8020514:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 8020516:	9b03      	ldr	r3, [sp, #12]
 8020518:	606b      	str	r3, [r5, #4]
    return 0;
 802051a:	2000      	movs	r0, #0
 802051c:	e7f9      	b.n	8020512 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 802051e:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 8020522:	6068      	str	r0, [r5, #4]
    return 0;
 8020524:	2000      	movs	r0, #0
 8020526:	e7f4      	b.n	8020512 <lfs_dir_getinfo+0x72>
 8020528:	780ffc00 	.word	0x780ffc00
 802052c:	700ffc00 	.word	0x700ffc00
 8020530:	0803baec 	.word	0x0803baec

08020534 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8020534:	b530      	push	{r4, r5, lr}
 8020536:	b08b      	sub	sp, #44	@ 0x2c
 8020538:	4604      	mov	r4, r0
 802053a:	9101      	str	r1, [sp, #4]
 802053c:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 802053e:	2300      	movs	r3, #0
 8020540:	aa01      	add	r2, sp, #4
 8020542:	a902      	add	r1, sp, #8
 8020544:	f7ff faee 	bl	801fb24 <lfs_dir_find>
    if (tag < 0) {
 8020548:	2800      	cmp	r0, #0
 802054a:	db06      	blt.n	802055a <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 802054c:	462b      	mov	r3, r5
 802054e:	f3c0 2289 	ubfx	r2, r0, #10, #10
 8020552:	a902      	add	r1, sp, #8
 8020554:	4620      	mov	r0, r4
 8020556:	f7ff ffa3 	bl	80204a0 <lfs_dir_getinfo>
}
 802055a:	b00b      	add	sp, #44	@ 0x2c
 802055c:	bd30      	pop	{r4, r5, pc}
	...

08020560 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8020560:	b570      	push	{r4, r5, r6, lr}
 8020562:	4605      	mov	r5, r0
 8020564:	460c      	mov	r4, r1
 8020566:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 8020568:	f44f 7284 	mov.w	r2, #264	@ 0x108
 802056c:	2100      	movs	r1, #0
 802056e:	4630      	mov	r0, r6
 8020570:	f00d f9ce 	bl	802d910 <memset>
    if (dir->pos == 0) {
 8020574:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020576:	b183      	cbz	r3, 802059a <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 8020578:	2b01      	cmp	r3, #1
 802057a:	d11f      	bne.n	80205bc <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 802057c:	4633      	mov	r3, r6
 802057e:	2202      	movs	r2, #2
 8020580:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 8020584:	4a22      	ldr	r2, [pc, #136]	@ (8020610 <lfs_dir_read_+0xb0>)
 8020586:	8811      	ldrh	r1, [r2, #0]
 8020588:	7892      	ldrb	r2, [r2, #2]
 802058a:	8131      	strh	r1, [r6, #8]
 802058c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 802058e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020590:	3301      	adds	r3, #1
 8020592:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 8020594:	f04f 0c01 	mov.w	ip, #1
 8020598:	e034      	b.n	8020604 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 802059a:	2302      	movs	r3, #2
 802059c:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 802059e:	4b1d      	ldr	r3, [pc, #116]	@ (8020614 <lfs_dir_read_+0xb4>)
 80205a0:	881b      	ldrh	r3, [r3, #0]
 80205a2:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 80205a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80205a6:	3301      	adds	r3, #1
 80205a8:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 80205aa:	f04f 0c01 	mov.w	ip, #1
 80205ae:	e029      	b.n	8020604 <lfs_dir_read_+0xa4>
        dir->id += 1;
 80205b0:	88a1      	ldrh	r1, [r4, #4]
 80205b2:	3101      	adds	r1, #1
 80205b4:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 80205b6:	f11c 0f02 	cmn.w	ip, #2
 80205ba:	d11e      	bne.n	80205fa <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 80205bc:	88a3      	ldrh	r3, [r4, #4]
 80205be:	8ba1      	ldrh	r1, [r4, #28]
 80205c0:	428b      	cmp	r3, r1
 80205c2:	d10c      	bne.n	80205de <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 80205c4:	7fe3      	ldrb	r3, [r4, #31]
 80205c6:	b1fb      	cbz	r3, 8020608 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 80205c8:	f104 0220 	add.w	r2, r4, #32
 80205cc:	f104 0108 	add.w	r1, r4, #8
 80205d0:	4628      	mov	r0, r5
 80205d2:	f7fc ff63 	bl	801d49c <lfs_dir_fetch>
            if (err) {
 80205d6:	4684      	mov	ip, r0
 80205d8:	b9a0      	cbnz	r0, 8020604 <lfs_dir_read_+0xa4>
            dir->id = 0;
 80205da:	2300      	movs	r3, #0
 80205dc:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 80205de:	4633      	mov	r3, r6
 80205e0:	88a2      	ldrh	r2, [r4, #4]
 80205e2:	f104 0108 	add.w	r1, r4, #8
 80205e6:	4628      	mov	r0, r5
 80205e8:	f7ff ff5a 	bl	80204a0 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 80205ec:	4684      	mov	ip, r0
 80205ee:	2800      	cmp	r0, #0
 80205f0:	d0de      	beq.n	80205b0 <lfs_dir_read_+0x50>
 80205f2:	f110 0f02 	cmn.w	r0, #2
 80205f6:	d0db      	beq.n	80205b0 <lfs_dir_read_+0x50>
 80205f8:	e004      	b.n	8020604 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 80205fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80205fc:	3301      	adds	r3, #1
 80205fe:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 8020600:	f04f 0c01 	mov.w	ip, #1
}
 8020604:	4660      	mov	r0, ip
 8020606:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 8020608:	f04f 0c00 	mov.w	ip, #0
 802060c:	e7fa      	b.n	8020604 <lfs_dir_read_+0xa4>
 802060e:	bf00      	nop
 8020610:	0803b2ac 	.word	0x0803b2ac
 8020614:	08037590 	.word	0x08037590

08020618 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8020618:	b570      	push	{r4, r5, r6, lr}
 802061a:	4605      	mov	r5, r0
 802061c:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 802061e:	694b      	ldr	r3, [r1, #20]
 8020620:	4608      	mov	r0, r1
 8020622:	4798      	blx	r3
    if (err) {
 8020624:	4606      	mov	r6, r0
 8020626:	b108      	cbz	r0, 802062c <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8020628:	4630      	mov	r0, r6
 802062a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 802062c:	4621      	mov	r1, r4
 802062e:	4628      	mov	r0, r5
 8020630:	f7ff f860 	bl	801f6f4 <lfs_format_>
 8020634:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 8020636:	69a3      	ldr	r3, [r4, #24]
 8020638:	4620      	mov	r0, r4
 802063a:	4798      	blx	r3
    return err;
 802063c:	e7f4      	b.n	8020628 <lfs_format+0x10>

0802063e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802063e:	b570      	push	{r4, r5, r6, lr}
 8020640:	4605      	mov	r5, r0
 8020642:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 8020644:	694b      	ldr	r3, [r1, #20]
 8020646:	4608      	mov	r0, r1
 8020648:	4798      	blx	r3
    if (err) {
 802064a:	4606      	mov	r6, r0
 802064c:	b108      	cbz	r0, 8020652 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 802064e:	4630      	mov	r0, r6
 8020650:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 8020652:	4621      	mov	r1, r4
 8020654:	4628      	mov	r0, r5
 8020656:	f7ff f8cb 	bl	801f7f0 <lfs_mount_>
 802065a:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 802065c:	69a3      	ldr	r3, [r4, #24]
 802065e:	4620      	mov	r0, r4
 8020660:	4798      	blx	r3
    return err;
 8020662:	e7f4      	b.n	802064e <lfs_mount+0x10>

08020664 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8020664:	b570      	push	{r4, r5, r6, lr}
 8020666:	4604      	mov	r4, r0
 8020668:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 802066a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 802066c:	6943      	ldr	r3, [r0, #20]
 802066e:	4798      	blx	r3
    if (err) {
 8020670:	4606      	mov	r6, r0
 8020672:	b108      	cbz	r0, 8020678 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020674:	4630      	mov	r0, r6
 8020676:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 8020678:	4629      	mov	r1, r5
 802067a:	4620      	mov	r0, r4
 802067c:	f7ff fb0e 	bl	801fc9c <lfs_remove_>
 8020680:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020682:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020684:	6983      	ldr	r3, [r0, #24]
 8020686:	4798      	blx	r3
    return err;
 8020688:	e7f4      	b.n	8020674 <lfs_remove+0x10>

0802068a <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802068a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802068c:	4604      	mov	r4, r0
 802068e:	460d      	mov	r5, r1
 8020690:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 8020692:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020694:	6943      	ldr	r3, [r0, #20]
 8020696:	4798      	blx	r3
    if (err) {
 8020698:	4607      	mov	r7, r0
 802069a:	b108      	cbz	r0, 80206a0 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 802069c:	4638      	mov	r0, r7
 802069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 80206a0:	4632      	mov	r2, r6
 80206a2:	4629      	mov	r1, r5
 80206a4:	4620      	mov	r0, r4
 80206a6:	f7ff fbb9 	bl	801fe1c <lfs_rename_>
 80206aa:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 80206ac:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80206ae:	6983      	ldr	r3, [r0, #24]
 80206b0:	4798      	blx	r3
    return err;
 80206b2:	e7f3      	b.n	802069c <lfs_rename+0x12>

080206b4 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80206b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206b6:	4604      	mov	r4, r0
 80206b8:	460d      	mov	r5, r1
 80206ba:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 80206bc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80206be:	6943      	ldr	r3, [r0, #20]
 80206c0:	4798      	blx	r3
    if (err) {
 80206c2:	4607      	mov	r7, r0
 80206c4:	b108      	cbz	r0, 80206ca <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80206c6:	4638      	mov	r0, r7
 80206c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 80206ca:	4632      	mov	r2, r6
 80206cc:	4629      	mov	r1, r5
 80206ce:	4620      	mov	r0, r4
 80206d0:	f7ff ff30 	bl	8020534 <lfs_stat_>
 80206d4:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 80206d6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80206d8:	6983      	ldr	r3, [r0, #24]
 80206da:	4798      	blx	r3
    return err;
 80206dc:	e7f3      	b.n	80206c6 <lfs_stat+0x12>
	...

080206e0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80206e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206e4:	4604      	mov	r4, r0
 80206e6:	460d      	mov	r5, r1
 80206e8:	4616      	mov	r6, r2
 80206ea:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 80206ec:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80206ee:	6942      	ldr	r2, [r0, #20]
 80206f0:	4790      	blx	r2
    if (err) {
 80206f2:	4607      	mov	r7, r0
 80206f4:	b110      	cbz	r0, 80206fc <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80206f6:	4638      	mov	r0, r7
 80206f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80206fc:	4629      	mov	r1, r5
 80206fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020700:	f7fb fbc7 	bl	801be92 <lfs_mlist_isopen>
 8020704:	b950      	cbnz	r0, 802071c <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 8020706:	4643      	mov	r3, r8
 8020708:	4632      	mov	r2, r6
 802070a:	4629      	mov	r1, r5
 802070c:	4620      	mov	r0, r4
 802070e:	f7ff fe09 	bl	8020324 <lfs_file_open_>
 8020712:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020714:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020716:	6983      	ldr	r3, [r0, #24]
 8020718:	4798      	blx	r3
    return err;
 802071a:	e7ec      	b.n	80206f6 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802071c:	4b03      	ldr	r3, [pc, #12]	@ (802072c <lfs_file_open+0x4c>)
 802071e:	4a04      	ldr	r2, [pc, #16]	@ (8020730 <lfs_file_open+0x50>)
 8020720:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 8020724:	4803      	ldr	r0, [pc, #12]	@ (8020734 <lfs_file_open+0x54>)
 8020726:	f00a fba1 	bl	802ae6c <__assert_func>
 802072a:	bf00      	nop
 802072c:	0803b2b0 	.word	0x0803b2b0
 8020730:	0803b3e4 	.word	0x0803b3e4
 8020734:	0803a734 	.word	0x0803a734

08020738 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8020738:	b570      	push	{r4, r5, r6, lr}
 802073a:	4604      	mov	r4, r0
 802073c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 802073e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020740:	6943      	ldr	r3, [r0, #20]
 8020742:	4798      	blx	r3
    if (err) {
 8020744:	4606      	mov	r6, r0
 8020746:	b108      	cbz	r0, 802074c <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020748:	4630      	mov	r0, r6
 802074a:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802074c:	4629      	mov	r1, r5
 802074e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020750:	f7fb fb9f 	bl	801be92 <lfs_mlist_isopen>
 8020754:	b140      	cbz	r0, 8020768 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 8020756:	4629      	mov	r1, r5
 8020758:	4620      	mov	r0, r4
 802075a:	f7ff f9cf 	bl	801fafc <lfs_file_close_>
 802075e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020760:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020762:	6983      	ldr	r3, [r0, #24]
 8020764:	4798      	blx	r3
    return err;
 8020766:	e7ef      	b.n	8020748 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020768:	4b03      	ldr	r3, [pc, #12]	@ (8020778 <lfs_file_close+0x40>)
 802076a:	4a04      	ldr	r2, [pc, #16]	@ (802077c <lfs_file_close+0x44>)
 802076c:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8020770:	4803      	ldr	r0, [pc, #12]	@ (8020780 <lfs_file_close+0x48>)
 8020772:	f00a fb7b 	bl	802ae6c <__assert_func>
 8020776:	bf00      	nop
 8020778:	0803b2e8 	.word	0x0803b2e8
 802077c:	0803b3c8 	.word	0x0803b3c8
 8020780:	0803a734 	.word	0x0803a734

08020784 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8020784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020788:	4604      	mov	r4, r0
 802078a:	460d      	mov	r5, r1
 802078c:	4616      	mov	r6, r2
 802078e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020790:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020792:	6942      	ldr	r2, [r0, #20]
 8020794:	4790      	blx	r2
    if (err) {
 8020796:	4607      	mov	r7, r0
 8020798:	b110      	cbz	r0, 80207a0 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 802079a:	4638      	mov	r0, r7
 802079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80207a0:	4629      	mov	r1, r5
 80207a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80207a4:	f7fb fb75 	bl	801be92 <lfs_mlist_isopen>
 80207a8:	b150      	cbz	r0, 80207c0 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 80207aa:	4643      	mov	r3, r8
 80207ac:	4632      	mov	r2, r6
 80207ae:	4629      	mov	r1, r5
 80207b0:	4620      	mov	r0, r4
 80207b2:	f7fd fac1 	bl	801dd38 <lfs_file_read_>
 80207b6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 80207b8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80207ba:	6983      	ldr	r3, [r0, #24]
 80207bc:	4798      	blx	r3
    return res;
 80207be:	e7ec      	b.n	802079a <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80207c0:	4b03      	ldr	r3, [pc, #12]	@ (80207d0 <lfs_file_read+0x4c>)
 80207c2:	4a04      	ldr	r2, [pc, #16]	@ (80207d4 <lfs_file_read+0x50>)
 80207c4:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 80207c8:	4803      	ldr	r0, [pc, #12]	@ (80207d8 <lfs_file_read+0x54>)
 80207ca:	f00a fb4f 	bl	802ae6c <__assert_func>
 80207ce:	bf00      	nop
 80207d0:	0803b2e8 	.word	0x0803b2e8
 80207d4:	0803b3b8 	.word	0x0803b3b8
 80207d8:	0803a734 	.word	0x0803a734

080207dc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80207dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207e0:	4604      	mov	r4, r0
 80207e2:	460d      	mov	r5, r1
 80207e4:	4616      	mov	r6, r2
 80207e6:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 80207e8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80207ea:	6942      	ldr	r2, [r0, #20]
 80207ec:	4790      	blx	r2
    if (err) {
 80207ee:	4607      	mov	r7, r0
 80207f0:	b110      	cbz	r0, 80207f8 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 80207f2:	4638      	mov	r0, r7
 80207f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80207f8:	4629      	mov	r1, r5
 80207fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80207fc:	f7fb fb49 	bl	801be92 <lfs_mlist_isopen>
 8020800:	b150      	cbz	r0, 8020818 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8020802:	4643      	mov	r3, r8
 8020804:	4632      	mov	r2, r6
 8020806:	4629      	mov	r1, r5
 8020808:	4620      	mov	r0, r4
 802080a:	f7fd fb05 	bl	801de18 <lfs_file_write_>
 802080e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020810:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020812:	6983      	ldr	r3, [r0, #24]
 8020814:	4798      	blx	r3
    return res;
 8020816:	e7ec      	b.n	80207f2 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020818:	4b03      	ldr	r3, [pc, #12]	@ (8020828 <lfs_file_write+0x4c>)
 802081a:	4a04      	ldr	r2, [pc, #16]	@ (802082c <lfs_file_write+0x50>)
 802081c:	f641 0105 	movw	r1, #6149	@ 0x1805
 8020820:	4803      	ldr	r0, [pc, #12]	@ (8020830 <lfs_file_write+0x54>)
 8020822:	f00a fb23 	bl	802ae6c <__assert_func>
 8020826:	bf00      	nop
 8020828:	0803b2e8 	.word	0x0803b2e8
 802082c:	0803b398 	.word	0x0803b398
 8020830:	0803a734 	.word	0x0803a734

08020834 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8020834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020838:	4604      	mov	r4, r0
 802083a:	460d      	mov	r5, r1
 802083c:	4616      	mov	r6, r2
 802083e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020840:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020842:	6942      	ldr	r2, [r0, #20]
 8020844:	4790      	blx	r2
    if (err) {
 8020846:	4607      	mov	r7, r0
 8020848:	b110      	cbz	r0, 8020850 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 802084a:	4638      	mov	r0, r7
 802084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020850:	4629      	mov	r1, r5
 8020852:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020854:	f7fb fb1d 	bl	801be92 <lfs_mlist_isopen>
 8020858:	b150      	cbz	r0, 8020870 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 802085a:	4643      	mov	r3, r8
 802085c:	4632      	mov	r2, r6
 802085e:	4629      	mov	r1, r5
 8020860:	4620      	mov	r0, r4
 8020862:	f7fd fa8d 	bl	801dd80 <lfs_file_seek_>
 8020866:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020868:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802086a:	6983      	ldr	r3, [r0, #24]
 802086c:	4798      	blx	r3
    return res;
 802086e:	e7ec      	b.n	802084a <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020870:	4b03      	ldr	r3, [pc, #12]	@ (8020880 <lfs_file_seek+0x4c>)
 8020872:	4a04      	ldr	r2, [pc, #16]	@ (8020884 <lfs_file_seek+0x50>)
 8020874:	f641 0117 	movw	r1, #6167	@ 0x1817
 8020878:	4803      	ldr	r0, [pc, #12]	@ (8020888 <lfs_file_seek+0x54>)
 802087a:	f00a faf7 	bl	802ae6c <__assert_func>
 802087e:	bf00      	nop
 8020880:	0803b2e8 	.word	0x0803b2e8
 8020884:	0803b378 	.word	0x0803b378
 8020888:	0803a734 	.word	0x0803a734

0802088c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 802088c:	b570      	push	{r4, r5, r6, lr}
 802088e:	4604      	mov	r4, r0
 8020890:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020892:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020894:	6943      	ldr	r3, [r0, #20]
 8020896:	4798      	blx	r3
    if (err) {
 8020898:	4606      	mov	r6, r0
 802089a:	b108      	cbz	r0, 80208a0 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 802089c:	4630      	mov	r0, r6
 802089e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80208a0:	4629      	mov	r1, r5
 80208a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80208a4:	f7fb faf5 	bl	801be92 <lfs_mlist_isopen>
 80208a8:	b140      	cbz	r0, 80208bc <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 80208aa:	4629      	mov	r1, r5
 80208ac:	4620      	mov	r0, r4
 80208ae:	f7fb fba4 	bl	801bffa <lfs_file_tell_>
 80208b2:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 80208b4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80208b6:	6983      	ldr	r3, [r0, #24]
 80208b8:	4798      	blx	r3
    return res;
 80208ba:	e7ef      	b.n	802089c <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80208bc:	4b03      	ldr	r3, [pc, #12]	@ (80208cc <lfs_file_tell+0x40>)
 80208be:	4a04      	ldr	r2, [pc, #16]	@ (80208d0 <lfs_file_tell+0x44>)
 80208c0:	f641 0138 	movw	r1, #6200	@ 0x1838
 80208c4:	4803      	ldr	r0, [pc, #12]	@ (80208d4 <lfs_file_tell+0x48>)
 80208c6:	f00a fad1 	bl	802ae6c <__assert_func>
 80208ca:	bf00      	nop
 80208cc:	0803b2e8 	.word	0x0803b2e8
 80208d0:	0803b368 	.word	0x0803b368
 80208d4:	0803a734 	.word	0x0803a734

080208d8 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80208d8:	b570      	push	{r4, r5, r6, lr}
 80208da:	4604      	mov	r4, r0
 80208dc:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 80208de:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80208e0:	6943      	ldr	r3, [r0, #20]
 80208e2:	4798      	blx	r3
    if (err) {
 80208e4:	4606      	mov	r6, r0
 80208e6:	b108      	cbz	r0, 80208ec <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80208e8:	4630      	mov	r0, r6
 80208ea:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 80208ec:	4629      	mov	r1, r5
 80208ee:	4620      	mov	r0, r4
 80208f0:	f7ff fd22 	bl	8020338 <lfs_mkdir_>
 80208f4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 80208f6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80208f8:	6983      	ldr	r3, [r0, #24]
 80208fa:	4798      	blx	r3
    return err;
 80208fc:	e7f4      	b.n	80208e8 <lfs_mkdir+0x10>
	...

08020900 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8020900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020902:	4604      	mov	r4, r0
 8020904:	460f      	mov	r7, r1
 8020906:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 8020908:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 802090a:	6943      	ldr	r3, [r0, #20]
 802090c:	4798      	blx	r3
    if (err) {
 802090e:	4606      	mov	r6, r0
 8020910:	b108      	cbz	r0, 8020916 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020912:	4630      	mov	r0, r6
 8020914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8020916:	4639      	mov	r1, r7
 8020918:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802091a:	f7fb faba 	bl	801be92 <lfs_mlist_isopen>
 802091e:	b948      	cbnz	r0, 8020934 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 8020920:	462a      	mov	r2, r5
 8020922:	4639      	mov	r1, r7
 8020924:	4620      	mov	r0, r4
 8020926:	f7ff fa31 	bl	801fd8c <lfs_dir_open_>
 802092a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802092c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802092e:	6983      	ldr	r3, [r0, #24]
 8020930:	4798      	blx	r3
    return err;
 8020932:	e7ee      	b.n	8020912 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8020934:	4b03      	ldr	r3, [pc, #12]	@ (8020944 <lfs_dir_open+0x44>)
 8020936:	4a04      	ldr	r2, [pc, #16]	@ (8020948 <lfs_dir_open+0x48>)
 8020938:	f641 0174 	movw	r1, #6260	@ 0x1874
 802093c:	4803      	ldr	r0, [pc, #12]	@ (802094c <lfs_dir_open+0x4c>)
 802093e:	f00a fa95 	bl	802ae6c <__assert_func>
 8020942:	bf00      	nop
 8020944:	0803b320 	.word	0x0803b320
 8020948:	0803b358 	.word	0x0803b358
 802094c:	0803a734 	.word	0x0803a734

08020950 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8020950:	b570      	push	{r4, r5, r6, lr}
 8020952:	4604      	mov	r4, r0
 8020954:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020956:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020958:	6943      	ldr	r3, [r0, #20]
 802095a:	4798      	blx	r3
    if (err) {
 802095c:	4606      	mov	r6, r0
 802095e:	b108      	cbz	r0, 8020964 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020960:	4630      	mov	r0, r6
 8020962:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 8020964:	4629      	mov	r1, r5
 8020966:	4620      	mov	r0, r4
 8020968:	f7fb fb42 	bl	801bff0 <lfs_dir_close_>
 802096c:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802096e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020970:	6983      	ldr	r3, [r0, #24]
 8020972:	4798      	blx	r3
    return err;
 8020974:	e7f4      	b.n	8020960 <lfs_dir_close+0x10>

08020976 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8020976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020978:	4604      	mov	r4, r0
 802097a:	460d      	mov	r5, r1
 802097c:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 802097e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020980:	6943      	ldr	r3, [r0, #20]
 8020982:	4798      	blx	r3
    if (err) {
 8020984:	4607      	mov	r7, r0
 8020986:	b108      	cbz	r0, 802098c <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020988:	4638      	mov	r0, r7
 802098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 802098c:	4632      	mov	r2, r6
 802098e:	4629      	mov	r1, r5
 8020990:	4620      	mov	r0, r4
 8020992:	f7ff fde5 	bl	8020560 <lfs_dir_read_>
 8020996:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020998:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802099a:	6983      	ldr	r3, [r0, #24]
 802099c:	4798      	blx	r3
    return err;
 802099e:	e7f3      	b.n	8020988 <lfs_dir_read+0x12>

080209a0 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 80209a0:	f04f 0c00 	mov.w	ip, #0
 80209a4:	4594      	cmp	ip, r2
 80209a6:	d218      	bcs.n	80209da <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80209a8:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80209aa:	f811 300c 	ldrb.w	r3, [r1, ip]
 80209ae:	ea83 0e00 	eor.w	lr, r3, r0
 80209b2:	f00e 0e0f 	and.w	lr, lr, #15
 80209b6:	4c09      	ldr	r4, [pc, #36]	@ (80209dc <lfs_crc+0x3c>)
 80209b8:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 80209bc:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80209c0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80209c4:	f003 030f 	and.w	r3, r3, #15
 80209c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80209cc:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 80209d0:	f10c 0c01 	add.w	ip, ip, #1
 80209d4:	4594      	cmp	ip, r2
 80209d6:	d3e8      	bcc.n	80209aa <lfs_crc+0xa>
    }

    return crc;
}
 80209d8:	bd30      	pop	{r4, r5, pc}
 80209da:	4770      	bx	lr
 80209dc:	0803b4cc 	.word	0x0803b4cc

080209e0 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 80209e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80209e4:	2b19      	cmp	r3, #25
 80209e6:	d913      	bls.n	8020a10 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 80209e8:	283d      	cmp	r0, #61	@ 0x3d
 80209ea:	dc18      	bgt.n	8020a1e <mg_base64_decode_single+0x3e>
 80209ec:	282b      	cmp	r0, #43	@ 0x2b
 80209ee:	db20      	blt.n	8020a32 <mg_base64_decode_single+0x52>
 80209f0:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 80209f4:	2b12      	cmp	r3, #18
 80209f6:	d80f      	bhi.n	8020a18 <mg_base64_decode_single+0x38>
 80209f8:	e8df f003 	tbb	[pc, r3]
 80209fc:	0e0e0e0c 	.word	0x0e0e0e0c
 8020a00:	1717171e 	.word	0x1717171e
 8020a04:	17171717 	.word	0x17171717
 8020a08:	0e171717 	.word	0x0e171717
 8020a0c:	0e0e      	.short	0x0e0e
 8020a0e:	19          	.byte	0x19
 8020a0f:	00          	.byte	0x00
    return c - 'A';
 8020a10:	4618      	mov	r0, r3
 8020a12:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 8020a14:	203e      	movs	r0, #62	@ 0x3e
 8020a16:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 8020a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020a1c:	4770      	bx	lr
 8020a1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020a22:	2b19      	cmp	r3, #25
 8020a24:	d80a      	bhi.n	8020a3c <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 8020a26:	3847      	subs	r0, #71	@ 0x47
 8020a28:	4770      	bx	lr
    return c + 52 - '0';
 8020a2a:	3004      	adds	r0, #4
 8020a2c:	4770      	bx	lr
    return 64;
 8020a2e:	2040      	movs	r0, #64	@ 0x40
 8020a30:	4770      	bx	lr
    return -1;
 8020a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020a36:	4770      	bx	lr
    return 63;
 8020a38:	203f      	movs	r0, #63	@ 0x3f
 8020a3a:	4770      	bx	lr
    return -1;
 8020a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 8020a40:	4770      	bx	lr

08020a42 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 8020a42:	3830      	subs	r0, #48	@ 0x30
}
 8020a44:	2809      	cmp	r0, #9
 8020a46:	bf8c      	ite	hi
 8020a48:	2000      	movhi	r0, #0
 8020a4a:	2001      	movls	r0, #1
 8020a4c:	4770      	bx	lr
	...

08020a50 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8020a50:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 8020a52:	2365      	movs	r3, #101	@ 0x65
 8020a54:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 8020a56:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 8020a58:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8020a5c:	dc2c      	bgt.n	8020ab8 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 8020a5e:	2909      	cmp	r1, #9
 8020a60:	dc03      	bgt.n	8020a6a <addexp+0x1a>
 8020a62:	2330      	movs	r3, #48	@ 0x30
 8020a64:	7083      	strb	r3, [r0, #2]
 8020a66:	2303      	movs	r3, #3
 8020a68:	e000      	b.n	8020a6c <addexp+0x1c>
  buf[n++] = (char) sign;
 8020a6a:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8020a6c:	2963      	cmp	r1, #99	@ 0x63
 8020a6e:	dd0d      	ble.n	8020a8c <addexp+0x3c>
 8020a70:	4812      	ldr	r0, [pc, #72]	@ (8020abc <addexp+0x6c>)
 8020a72:	fb80 2001 	smull	r2, r0, r0, r1
 8020a76:	17ca      	asrs	r2, r1, #31
 8020a78:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8020a7c:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8020a80:	f80c 0003 	strb.w	r0, [ip, r3]
 8020a84:	2064      	movs	r0, #100	@ 0x64
 8020a86:	fb00 1112 	mls	r1, r0, r2, r1
 8020a8a:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8020a8c:	2909      	cmp	r1, #9
 8020a8e:	dd0e      	ble.n	8020aae <addexp+0x5e>
 8020a90:	480b      	ldr	r0, [pc, #44]	@ (8020ac0 <addexp+0x70>)
 8020a92:	fb80 2001 	smull	r2, r0, r0, r1
 8020a96:	17ca      	asrs	r2, r1, #31
 8020a98:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 8020a9c:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8020aa0:	f80c 0003 	strb.w	r0, [ip, r3]
 8020aa4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020aa8:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 8020aac:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 8020aae:	1c58      	adds	r0, r3, #1
 8020ab0:	3130      	adds	r1, #48	@ 0x30
 8020ab2:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 8020ab6:	4770      	bx	lr
  if (e > 400) return 0;
 8020ab8:	2000      	movs	r0, #0
}
 8020aba:	4770      	bx	lr
 8020abc:	51eb851f 	.word	0x51eb851f
 8020ac0:	66666667 	.word	0x66666667

08020ac4 <xisinf>:

static int xisinf(double x) {
 8020ac4:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8020ac8:	4611      	mov	r1, r2
 8020aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020ace:	4a05      	ldr	r2, [pc, #20]	@ (8020ae4 <xisinf+0x20>)
 8020ad0:	4293      	cmp	r3, r2
 8020ad2:	d001      	beq.n	8020ad8 <xisinf+0x14>
 8020ad4:	2000      	movs	r0, #0
 8020ad6:	4770      	bx	lr
 8020ad8:	b109      	cbz	r1, 8020ade <xisinf+0x1a>
 8020ada:	2000      	movs	r0, #0
 8020adc:	4770      	bx	lr
 8020ade:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 8020ae0:	4770      	bx	lr
 8020ae2:	bf00      	nop
 8020ae4:	7ff00000 	.word	0x7ff00000

08020ae8 <xisnan>:

static int xisnan(double x) {
 8020ae8:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8020aec:	4602      	mov	r2, r0
 8020aee:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8020af2:	2a00      	cmp	r2, #0
 8020af4:	bf18      	it	ne
 8020af6:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 8020af8:	4b02      	ldr	r3, [pc, #8]	@ (8020b04 <xisnan+0x1c>)
 8020afa:	4298      	cmp	r0, r3
 8020afc:	bf94      	ite	ls
 8020afe:	2000      	movls	r0, #0
 8020b00:	2001      	movhi	r0, #1
 8020b02:	4770      	bx	lr
 8020b04:	7ff00000 	.word	0x7ff00000

08020b08 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8020b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b0c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8020b10:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 8020b14:	4694      	mov	ip, r2
 8020b16:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8020b18:	b15c      	cbz	r4, 8020b32 <mg_lld+0x2a>
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	db01      	blt.n	8020b22 <mg_lld+0x1a>
  size_t s = 0, n, i;
 8020b1e:	2500      	movs	r5, #0
 8020b20:	e008      	b.n	8020b34 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8020b22:	242d      	movs	r4, #45	@ 0x2d
 8020b24:	7004      	strb	r4, [r0, #0]
 8020b26:	f1d2 0c00 	rsbs	ip, r2, #0
 8020b2a:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 8020b2e:	2501      	movs	r5, #1
 8020b30:	e000      	b.n	8020b34 <mg_lld+0x2c>
  size_t s = 0, n, i;
 8020b32:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8020b34:	b909      	cbnz	r1, 8020b3a <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8020b36:	2400      	movs	r4, #0
 8020b38:	e02f      	b.n	8020b9a <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8020b3a:	2400      	movs	r4, #0
 8020b3c:	ea5c 010e 	orrs.w	r1, ip, lr
 8020b40:	d05a      	beq.n	8020bf8 <mg_lld+0xf0>
 8020b42:	f00c 060f 	and.w	r6, ip, #15
 8020b46:	1929      	adds	r1, r5, r4
 8020b48:	4f38      	ldr	r7, [pc, #224]	@ (8020c2c <mg_lld+0x124>)
 8020b4a:	5dbe      	ldrb	r6, [r7, r6]
 8020b4c:	5446      	strb	r6, [r0, r1]
 8020b4e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8020b52:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 8020b56:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8020b5a:	3401      	adds	r4, #1
 8020b5c:	e7ee      	b.n	8020b3c <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8020b5e:	2601      	movs	r6, #1
 8020b60:	e022      	b.n	8020ba8 <mg_lld+0xa0>
 8020b62:	4421      	add	r1, r4
 8020b64:	4f32      	ldr	r7, [pc, #200]	@ (8020c30 <mg_lld+0x128>)
 8020b66:	fba7 4801 	umull	r4, r8, r7, r1
 8020b6a:	f028 0403 	bic.w	r4, r8, #3
 8020b6e:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 8020b72:	1b09      	subs	r1, r1, r4
 8020b74:	ebbc 0101 	subs.w	r1, ip, r1
 8020b78:	f16e 0e00 	sbc.w	lr, lr, #0
 8020b7c:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 8020b80:	fb01 f404 	mul.w	r4, r1, r4
 8020b84:	fb07 440e 	mla	r4, r7, lr, r4
 8020b88:	fba1 1707 	umull	r1, r7, r1, r7
 8020b8c:	443c      	add	r4, r7
 8020b8e:	0849      	lsrs	r1, r1, #1
 8020b90:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 8020b94:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 8020b98:	4634      	mov	r4, r6
 8020b9a:	ea5c 010e 	orrs.w	r1, ip, lr
 8020b9e:	d02b      	beq.n	8020bf8 <mg_lld+0xf0>
 8020ba0:	2600      	movs	r6, #0
 8020ba2:	eb1c 010e 	adds.w	r1, ip, lr
 8020ba6:	d2da      	bcs.n	8020b5e <mg_lld+0x56>
 8020ba8:	4431      	add	r1, r6
 8020baa:	4f21      	ldr	r7, [pc, #132]	@ (8020c30 <mg_lld+0x128>)
 8020bac:	fba7 6801 	umull	r6, r8, r7, r1
 8020bb0:	f028 0603 	bic.w	r6, r8, #3
 8020bb4:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 8020bb8:	1b89      	subs	r1, r1, r6
 8020bba:	ebbc 0101 	subs.w	r1, ip, r1
 8020bbe:	f16e 0800 	sbc.w	r8, lr, #0
 8020bc2:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 8020bc6:	fb01 f606 	mul.w	r6, r1, r6
 8020bca:	fb07 6608 	mla	r6, r7, r8, r6
 8020bce:	fba1 1707 	umull	r1, r7, r1, r7
 8020bd2:	443e      	add	r6, r7
 8020bd4:	0849      	lsrs	r1, r1, #1
 8020bd6:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 8020bda:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8020bde:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 8020be2:	1c66      	adds	r6, r4, #1
 8020be4:	442c      	add	r4, r5
 8020be6:	4f11      	ldr	r7, [pc, #68]	@ (8020c2c <mg_lld+0x124>)
 8020be8:	5c79      	ldrb	r1, [r7, r1]
 8020bea:	5501      	strb	r1, [r0, r4]
 8020bec:	2400      	movs	r4, #0
 8020bee:	eb1c 010e 	adds.w	r1, ip, lr
 8020bf2:	d3b6      	bcc.n	8020b62 <mg_lld+0x5a>
 8020bf4:	2401      	movs	r4, #1
 8020bf6:	e7b4      	b.n	8020b62 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8020bf8:	2600      	movs	r6, #0
 8020bfa:	e00c      	b.n	8020c16 <mg_lld+0x10e>
    char t = buf[s + i];
 8020bfc:	19af      	adds	r7, r5, r6
 8020bfe:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8020c02:	1929      	adds	r1, r5, r4
 8020c04:	1b89      	subs	r1, r1, r6
 8020c06:	3901      	subs	r1, #1
 8020c08:	f810 e001 	ldrb.w	lr, [r0, r1]
 8020c0c:	f800 e007 	strb.w	lr, [r0, r7]
 8020c10:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 8020c14:	3601      	adds	r6, #1
 8020c16:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 8020c1a:	d3ef      	bcc.n	8020bfc <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8020c1c:	4313      	orrs	r3, r2
 8020c1e:	d102      	bne.n	8020c26 <mg_lld+0x11e>
 8020c20:	2330      	movs	r3, #48	@ 0x30
 8020c22:	5503      	strb	r3, [r0, r4]
 8020c24:	3401      	adds	r4, #1
  return n + s;
}
 8020c26:	1928      	adds	r0, r5, r4
 8020c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c2c:	0803b50c 	.word	0x0803b50c
 8020c30:	cccccccd 	.word	0xcccccccd

08020c34 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8020c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c38:	4680      	mov	r8, r0
 8020c3a:	460f      	mov	r7, r1
 8020c3c:	4616      	mov	r6, r2
 8020c3e:	461d      	mov	r5, r3
  size_t i = 0;
 8020c40:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8020c42:	e002      	b.n	8020c4a <scpy+0x16>
 8020c44:	3401      	adds	r4, #1
 8020c46:	4639      	mov	r1, r7
 8020c48:	47c0      	blx	r8
 8020c4a:	42ac      	cmp	r4, r5
 8020c4c:	d202      	bcs.n	8020c54 <scpy+0x20>
 8020c4e:	5d30      	ldrb	r0, [r6, r4]
 8020c50:	2800      	cmp	r0, #0
 8020c52:	d1f7      	bne.n	8020c44 <scpy+0x10>
  return i;
}
 8020c54:	4620      	mov	r0, r4
 8020c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020c5a <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 8020c5a:	2000      	movs	r0, #0
 8020c5c:	4770      	bx	lr

08020c5e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 8020c5e:	4770      	bx	lr

08020c60 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 8020c60:	2000      	movs	r0, #0
 8020c62:	4770      	bx	lr

08020c64 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 8020c64:	4770      	bx	lr

08020c66 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 8020c66:	2000      	movs	r0, #0
 8020c68:	4770      	bx	lr

08020c6a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 8020c6a:	2000      	movs	r0, #0
 8020c6c:	4770      	bx	lr

08020c6e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 8020c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020c72:	4770      	bx	lr

08020c74 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 8020c74:	2000      	movs	r0, #0
 8020c76:	4770      	bx	lr

08020c78 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 8020c78:	2000      	movs	r0, #0
 8020c7a:	4770      	bx	lr

08020c7c <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 8020c7c:	2000      	movs	r0, #0
 8020c7e:	4770      	bx	lr

08020c80 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8020c80:	b530      	push	{r4, r5, lr}
 8020c82:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 8020c84:	4614      	mov	r4, r2
 8020c86:	b94a      	cbnz	r2, 8020c9c <mg_ncasecmp+0x1c>
  int diff = 0;
 8020c88:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 8020c8a:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8020c8c:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8020c90:	1a18      	subs	r0, r3, r0
 8020c92:	d1fa      	bne.n	8020c8a <mg_ncasecmp+0xa>
 8020c94:	2a00      	cmp	r2, #0
 8020c96:	d0f8      	beq.n	8020c8a <mg_ncasecmp+0xa>
 8020c98:	3c01      	subs	r4, #1
 8020c9a:	d0f6      	beq.n	8020c8a <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 8020c9c:	f89e 2000 	ldrb.w	r2, [lr]
 8020ca0:	f10e 0e01 	add.w	lr, lr, #1
 8020ca4:	4613      	mov	r3, r2
 8020ca6:	f891 c000 	ldrb.w	ip, [r1]
 8020caa:	3101      	adds	r1, #1
 8020cac:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8020cae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8020cb2:	2d19      	cmp	r5, #25
 8020cb4:	d801      	bhi.n	8020cba <mg_ncasecmp+0x3a>
 8020cb6:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8020cba:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 8020cbe:	2d19      	cmp	r5, #25
 8020cc0:	d8e6      	bhi.n	8020c90 <mg_ncasecmp+0x10>
 8020cc2:	e7e3      	b.n	8020c8c <mg_ncasecmp+0xc>

08020cc4 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020cc4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020cc8:	2b09      	cmp	r3, #9
 8020cca:	d908      	bls.n	8020cde <isx+0x1a>
 8020ccc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020cd0:	2b05      	cmp	r3, #5
 8020cd2:	d906      	bls.n	8020ce2 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 8020cd4:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020cd6:	2805      	cmp	r0, #5
 8020cd8:	d805      	bhi.n	8020ce6 <isx+0x22>
 8020cda:	2001      	movs	r0, #1
 8020cdc:	4770      	bx	lr
 8020cde:	2001      	movs	r0, #1
 8020ce0:	4770      	bx	lr
 8020ce2:	2001      	movs	r0, #1
 8020ce4:	4770      	bx	lr
 8020ce6:	2000      	movs	r0, #0
}
 8020ce8:	4770      	bx	lr

08020cea <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8020cea:	280a      	cmp	r0, #10
 8020cec:	d007      	beq.n	8020cfe <isok+0x14>
 8020cee:	280d      	cmp	r0, #13
 8020cf0:	d007      	beq.n	8020d02 <isok+0x18>
 8020cf2:	2809      	cmp	r0, #9
 8020cf4:	d007      	beq.n	8020d06 <isok+0x1c>
 8020cf6:	281f      	cmp	r0, #31
 8020cf8:	d907      	bls.n	8020d0a <isok+0x20>
 8020cfa:	2001      	movs	r0, #1
 8020cfc:	4770      	bx	lr
 8020cfe:	2001      	movs	r0, #1
 8020d00:	4770      	bx	lr
 8020d02:	2001      	movs	r0, #1
 8020d04:	4770      	bx	lr
 8020d06:	2001      	movs	r0, #1
 8020d08:	4770      	bx	lr
 8020d0a:	2000      	movs	r0, #0
}
 8020d0c:	4770      	bx	lr

08020d0e <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 8020d0e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 8020d12:	2880      	cmp	r0, #128	@ 0x80
 8020d14:	bf14      	ite	ne
 8020d16:	2000      	movne	r0, #0
 8020d18:	2001      	moveq	r0, #1
 8020d1a:	4770      	bx	lr

08020d1c <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8020d1c:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 8020d1e:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 8020d20:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8020d22:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 8020d26:	b2db      	uxtb	r3, r3
 8020d28:	2b5c      	cmp	r3, #92	@ 0x5c
 8020d2a:	d936      	bls.n	8020d9a <clen+0x7e>
 8020d2c:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8020d2e:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 8020d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8020d34:	d009      	beq.n	8020d4a <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8020d36:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 8020d3a:	2be0      	cmp	r3, #224	@ 0xe0
 8020d3c:	d00e      	beq.n	8020d5c <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8020d3e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020d42:	2df0      	cmp	r5, #240	@ 0xf0
 8020d44:	d018      	beq.n	8020d78 <clen+0x5c>
    return 4;
  return 0;
 8020d46:	2000      	movs	r0, #0
}
 8020d48:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8020d4a:	2e01      	cmp	r6, #1
 8020d4c:	ddf3      	ble.n	8020d36 <clen+0x1a>
 8020d4e:	7840      	ldrb	r0, [r0, #1]
 8020d50:	f7ff ffdd 	bl	8020d0e <vcb>
 8020d54:	2800      	cmp	r0, #0
 8020d56:	d0ee      	beq.n	8020d36 <clen+0x1a>
 8020d58:	2002      	movs	r0, #2
 8020d5a:	e7f5      	b.n	8020d48 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8020d5c:	2e02      	cmp	r6, #2
 8020d5e:	ddee      	ble.n	8020d3e <clen+0x22>
 8020d60:	7860      	ldrb	r0, [r4, #1]
 8020d62:	f7ff ffd4 	bl	8020d0e <vcb>
 8020d66:	2800      	cmp	r0, #0
 8020d68:	d0e9      	beq.n	8020d3e <clen+0x22>
 8020d6a:	78a0      	ldrb	r0, [r4, #2]
 8020d6c:	f7ff ffcf 	bl	8020d0e <vcb>
 8020d70:	2800      	cmp	r0, #0
 8020d72:	d0e4      	beq.n	8020d3e <clen+0x22>
 8020d74:	2003      	movs	r0, #3
 8020d76:	e7e7      	b.n	8020d48 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8020d78:	2e03      	cmp	r6, #3
 8020d7a:	dd10      	ble.n	8020d9e <clen+0x82>
 8020d7c:	7860      	ldrb	r0, [r4, #1]
 8020d7e:	f7ff ffc6 	bl	8020d0e <vcb>
 8020d82:	b170      	cbz	r0, 8020da2 <clen+0x86>
 8020d84:	78a0      	ldrb	r0, [r4, #2]
 8020d86:	f7ff ffc2 	bl	8020d0e <vcb>
 8020d8a:	b160      	cbz	r0, 8020da6 <clen+0x8a>
 8020d8c:	78e0      	ldrb	r0, [r4, #3]
 8020d8e:	f7ff ffbe 	bl	8020d0e <vcb>
 8020d92:	2800      	cmp	r0, #0
 8020d94:	d0d8      	beq.n	8020d48 <clen+0x2c>
    return 4;
 8020d96:	2004      	movs	r0, #4
 8020d98:	e7d6      	b.n	8020d48 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8020d9a:	2001      	movs	r0, #1
 8020d9c:	e7d4      	b.n	8020d48 <clen+0x2c>
  return 0;
 8020d9e:	2000      	movs	r0, #0
 8020da0:	e7d2      	b.n	8020d48 <clen+0x2c>
 8020da2:	2000      	movs	r0, #0
 8020da4:	e7d0      	b.n	8020d48 <clen+0x2c>
 8020da6:	2000      	movs	r0, #0
 8020da8:	e7ce      	b.n	8020d48 <clen+0x2c>

08020daa <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 8020daa:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8020dac:	e003      	b.n	8020db6 <skiptorn+0xc>
 8020dae:	3001      	adds	r0, #1
 8020db0:	6853      	ldr	r3, [r2, #4]
 8020db2:	3301      	adds	r3, #1
 8020db4:	6053      	str	r3, [r2, #4]
 8020db6:	4288      	cmp	r0, r1
 8020db8:	d204      	bcs.n	8020dc4 <skiptorn+0x1a>
 8020dba:	7803      	ldrb	r3, [r0, #0]
 8020dbc:	2b0a      	cmp	r3, #10
 8020dbe:	d001      	beq.n	8020dc4 <skiptorn+0x1a>
 8020dc0:	2b0d      	cmp	r3, #13
 8020dc2:	d1f4      	bne.n	8020dae <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020dc4:	4288      	cmp	r0, r1
 8020dc6:	d212      	bcs.n	8020dee <skiptorn+0x44>
 8020dc8:	7803      	ldrb	r3, [r0, #0]
 8020dca:	2b0d      	cmp	r3, #13
 8020dcc:	d008      	beq.n	8020de0 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8020dce:	2b0d      	cmp	r3, #13
 8020dd0:	d00b      	beq.n	8020dea <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020dd2:	4288      	cmp	r0, r1
 8020dd4:	d20d      	bcs.n	8020df2 <skiptorn+0x48>
 8020dd6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020dda:	2b0a      	cmp	r3, #10
 8020ddc:	d10b      	bne.n	8020df6 <skiptorn+0x4c>
  return s;
}
 8020dde:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020de0:	7842      	ldrb	r2, [r0, #1]
 8020de2:	2a0a      	cmp	r2, #10
 8020de4:	d0f3      	beq.n	8020dce <skiptorn+0x24>
 8020de6:	2000      	movs	r0, #0
 8020de8:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8020dea:	3001      	adds	r0, #1
 8020dec:	e7f1      	b.n	8020dd2 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020dee:	2000      	movs	r0, #0
 8020df0:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020df2:	2000      	movs	r0, #0
 8020df4:	4770      	bx	lr
 8020df6:	2000      	movs	r0, #0
 8020df8:	e7f1      	b.n	8020dde <skiptorn+0x34>

08020dfa <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8020dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dfe:	b084      	sub	sp, #16
 8020e00:	4604      	mov	r4, r0
 8020e02:	460d      	mov	r5, r1
 8020e04:	4690      	mov	r8, r2
 8020e06:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8020e08:	2600      	movs	r6, #0
 8020e0a:	e04d      	b.n	8020ea8 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8020e0c:	7863      	ldrb	r3, [r4, #1]
 8020e0e:	2b0a      	cmp	r3, #10
 8020e10:	d158      	bne.n	8020ec4 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 8020e12:	2001      	movs	r0, #1
 8020e14:	e01e      	b.n	8020e54 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020e16:	4414      	add	r4, r2
 8020e18:	9b01      	ldr	r3, [sp, #4]
 8020e1a:	4413      	add	r3, r2
 8020e1c:	9301      	str	r3, [sp, #4]
 8020e1e:	42ac      	cmp	r4, r5
 8020e20:	d209      	bcs.n	8020e36 <mg_http_parse_headers+0x3c>
 8020e22:	7823      	ldrb	r3, [r4, #0]
 8020e24:	2b3a      	cmp	r3, #58	@ 0x3a
 8020e26:	d006      	beq.n	8020e36 <mg_http_parse_headers+0x3c>
 8020e28:	4629      	mov	r1, r5
 8020e2a:	4620      	mov	r0, r4
 8020e2c:	f7ff ff76 	bl	8020d1c <clen>
 8020e30:	4602      	mov	r2, r0
 8020e32:	2800      	cmp	r0, #0
 8020e34:	d1ef      	bne.n	8020e16 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 8020e36:	9b01      	ldr	r3, [sp, #4]
 8020e38:	b15b      	cbz	r3, 8020e52 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8020e3a:	42ac      	cmp	r4, r5
 8020e3c:	d209      	bcs.n	8020e52 <mg_http_parse_headers+0x58>
 8020e3e:	4629      	mov	r1, r5
 8020e40:	4620      	mov	r0, r4
 8020e42:	f7ff ff6b 	bl	8020d1c <clen>
 8020e46:	b120      	cbz	r0, 8020e52 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8020e48:	4620      	mov	r0, r4
 8020e4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020e4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8020e50:	d004      	beq.n	8020e5c <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 8020e52:	2000      	movs	r0, #0
}
 8020e54:	b004      	add	sp, #16
 8020e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8020e5a:	3001      	adds	r0, #1
 8020e5c:	42a8      	cmp	r0, r5
 8020e5e:	d204      	bcs.n	8020e6a <mg_http_parse_headers+0x70>
 8020e60:	7803      	ldrb	r3, [r0, #0]
 8020e62:	2b20      	cmp	r3, #32
 8020e64:	d0f9      	beq.n	8020e5a <mg_http_parse_headers+0x60>
 8020e66:	2b09      	cmp	r3, #9
 8020e68:	d0f7      	beq.n	8020e5a <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8020e6a:	aa02      	add	r2, sp, #8
 8020e6c:	4629      	mov	r1, r5
 8020e6e:	f7ff ff9c 	bl	8020daa <skiptorn>
 8020e72:	4604      	mov	r4, r0
 8020e74:	b908      	cbnz	r0, 8020e7a <mg_http_parse_headers+0x80>
 8020e76:	e7ec      	b.n	8020e52 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 8020e78:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8020e7a:	9803      	ldr	r0, [sp, #12]
 8020e7c:	b130      	cbz	r0, 8020e8c <mg_http_parse_headers+0x92>
 8020e7e:	3801      	subs	r0, #1
 8020e80:	9b02      	ldr	r3, [sp, #8]
 8020e82:	5c1b      	ldrb	r3, [r3, r0]
 8020e84:	2b20      	cmp	r3, #32
 8020e86:	d0f7      	beq.n	8020e78 <mg_http_parse_headers+0x7e>
 8020e88:	2b09      	cmp	r3, #9
 8020e8a:	d0f5      	beq.n	8020e78 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8020e8c:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 8020e90:	466a      	mov	r2, sp
 8020e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020e96:	e883 0003 	stmia.w	r3, {r0, r1}
 8020e9a:	3308      	adds	r3, #8
 8020e9c:	aa04      	add	r2, sp, #16
 8020e9e:	e912 0003 	ldmdb	r2, {r0, r1}
 8020ea2:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8020ea6:	3601      	adds	r6, #1
 8020ea8:	42be      	cmp	r6, r7
 8020eaa:	d20d      	bcs.n	8020ec8 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8020eac:	2300      	movs	r3, #0
 8020eae:	9300      	str	r3, [sp, #0]
 8020eb0:	9301      	str	r3, [sp, #4]
 8020eb2:	9302      	str	r3, [sp, #8]
 8020eb4:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 8020eb6:	42ac      	cmp	r4, r5
 8020eb8:	d2cb      	bcs.n	8020e52 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8020eba:	7823      	ldrb	r3, [r4, #0]
 8020ebc:	2b0a      	cmp	r3, #10
 8020ebe:	d0a8      	beq.n	8020e12 <mg_http_parse_headers+0x18>
 8020ec0:	2b0d      	cmp	r3, #13
 8020ec2:	d0a3      	beq.n	8020e0c <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 8020ec4:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020ec6:	e7aa      	b.n	8020e1e <mg_http_parse_headers+0x24>
  return true;
 8020ec8:	2001      	movs	r0, #1
 8020eca:	e7c3      	b.n	8020e54 <mg_http_parse_headers+0x5a>

08020ecc <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 8020ecc:	3864      	subs	r0, #100	@ 0x64
 8020ece:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8020ed2:	4298      	cmp	r0, r3
 8020ed4:	f200 8272 	bhi.w	80213bc <mg_http_status_code_str+0x4f0>
 8020ed8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8020edc:	027201f4 	.word	0x027201f4
 8020ee0:	027001f6 	.word	0x027001f6
 8020ee4:	02700270 	.word	0x02700270
 8020ee8:	02700270 	.word	0x02700270
 8020eec:	02700270 	.word	0x02700270
 8020ef0:	02700270 	.word	0x02700270
 8020ef4:	02700270 	.word	0x02700270
 8020ef8:	02700270 	.word	0x02700270
 8020efc:	02700270 	.word	0x02700270
 8020f00:	02700270 	.word	0x02700270
 8020f04:	02700270 	.word	0x02700270
 8020f08:	02700270 	.word	0x02700270
 8020f0c:	02700270 	.word	0x02700270
 8020f10:	02700270 	.word	0x02700270
 8020f14:	02700270 	.word	0x02700270
 8020f18:	02700270 	.word	0x02700270
 8020f1c:	02700270 	.word	0x02700270
 8020f20:	02700270 	.word	0x02700270
 8020f24:	02700270 	.word	0x02700270
 8020f28:	02700270 	.word	0x02700270
 8020f2c:	02700270 	.word	0x02700270
 8020f30:	02700270 	.word	0x02700270
 8020f34:	02700270 	.word	0x02700270
 8020f38:	02700270 	.word	0x02700270
 8020f3c:	02700270 	.word	0x02700270
 8020f40:	02700270 	.word	0x02700270
 8020f44:	02700270 	.word	0x02700270
 8020f48:	02700270 	.word	0x02700270
 8020f4c:	02700270 	.word	0x02700270
 8020f50:	02700270 	.word	0x02700270
 8020f54:	02700270 	.word	0x02700270
 8020f58:	02700270 	.word	0x02700270
 8020f5c:	02700270 	.word	0x02700270
 8020f60:	02700270 	.word	0x02700270
 8020f64:	02700270 	.word	0x02700270
 8020f68:	02700270 	.word	0x02700270
 8020f6c:	02700270 	.word	0x02700270
 8020f70:	02700270 	.word	0x02700270
 8020f74:	02700270 	.word	0x02700270
 8020f78:	02700270 	.word	0x02700270
 8020f7c:	02700270 	.word	0x02700270
 8020f80:	02700270 	.word	0x02700270
 8020f84:	02700270 	.word	0x02700270
 8020f88:	02700270 	.word	0x02700270
 8020f8c:	02700270 	.word	0x02700270
 8020f90:	02700270 	.word	0x02700270
 8020f94:	02700270 	.word	0x02700270
 8020f98:	02700270 	.word	0x02700270
 8020f9c:	02700270 	.word	0x02700270
 8020fa0:	02700270 	.word	0x02700270
 8020fa4:	01fa01f8 	.word	0x01fa01f8
 8020fa8:	01fe01fc 	.word	0x01fe01fc
 8020fac:	02020200 	.word	0x02020200
 8020fb0:	02060204 	.word	0x02060204
 8020fb4:	02700208 	.word	0x02700208
 8020fb8:	02700270 	.word	0x02700270
 8020fbc:	02700270 	.word	0x02700270
 8020fc0:	02700270 	.word	0x02700270
 8020fc4:	02700270 	.word	0x02700270
 8020fc8:	02700270 	.word	0x02700270
 8020fcc:	02700270 	.word	0x02700270
 8020fd0:	02700270 	.word	0x02700270
 8020fd4:	02700270 	.word	0x02700270
 8020fd8:	0270020a 	.word	0x0270020a
 8020fdc:	02700270 	.word	0x02700270
 8020fe0:	02700270 	.word	0x02700270
 8020fe4:	02700270 	.word	0x02700270
 8020fe8:	02700270 	.word	0x02700270
 8020fec:	02700270 	.word	0x02700270
 8020ff0:	02700270 	.word	0x02700270
 8020ff4:	02700270 	.word	0x02700270
 8020ff8:	02700270 	.word	0x02700270
 8020ffc:	02700270 	.word	0x02700270
 8021000:	02700270 	.word	0x02700270
 8021004:	02700270 	.word	0x02700270
 8021008:	02700270 	.word	0x02700270
 802100c:	02700270 	.word	0x02700270
 8021010:	02700270 	.word	0x02700270
 8021014:	02700270 	.word	0x02700270
 8021018:	02700270 	.word	0x02700270
 802101c:	02700270 	.word	0x02700270
 8021020:	02700270 	.word	0x02700270
 8021024:	02700270 	.word	0x02700270
 8021028:	02700270 	.word	0x02700270
 802102c:	02700270 	.word	0x02700270
 8021030:	02700270 	.word	0x02700270
 8021034:	02700270 	.word	0x02700270
 8021038:	02700270 	.word	0x02700270
 802103c:	02700270 	.word	0x02700270
 8021040:	02700270 	.word	0x02700270
 8021044:	02700270 	.word	0x02700270
 8021048:	02700270 	.word	0x02700270
 802104c:	02700270 	.word	0x02700270
 8021050:	02700270 	.word	0x02700270
 8021054:	02700270 	.word	0x02700270
 8021058:	02700270 	.word	0x02700270
 802105c:	02700270 	.word	0x02700270
 8021060:	02700270 	.word	0x02700270
 8021064:	02700270 	.word	0x02700270
 8021068:	02700270 	.word	0x02700270
 802106c:	020e020c 	.word	0x020e020c
 8021070:	02120210 	.word	0x02120210
 8021074:	02160214 	.word	0x02160214
 8021078:	02180270 	.word	0x02180270
 802107c:	0270021a 	.word	0x0270021a
 8021080:	02700270 	.word	0x02700270
 8021084:	02700270 	.word	0x02700270
 8021088:	02700270 	.word	0x02700270
 802108c:	02700270 	.word	0x02700270
 8021090:	02700270 	.word	0x02700270
 8021094:	02700270 	.word	0x02700270
 8021098:	02700270 	.word	0x02700270
 802109c:	02700270 	.word	0x02700270
 80210a0:	02700270 	.word	0x02700270
 80210a4:	02700270 	.word	0x02700270
 80210a8:	02700270 	.word	0x02700270
 80210ac:	02700270 	.word	0x02700270
 80210b0:	02700270 	.word	0x02700270
 80210b4:	02700270 	.word	0x02700270
 80210b8:	02700270 	.word	0x02700270
 80210bc:	02700270 	.word	0x02700270
 80210c0:	02700270 	.word	0x02700270
 80210c4:	02700270 	.word	0x02700270
 80210c8:	02700270 	.word	0x02700270
 80210cc:	02700270 	.word	0x02700270
 80210d0:	02700270 	.word	0x02700270
 80210d4:	02700270 	.word	0x02700270
 80210d8:	02700270 	.word	0x02700270
 80210dc:	02700270 	.word	0x02700270
 80210e0:	02700270 	.word	0x02700270
 80210e4:	02700270 	.word	0x02700270
 80210e8:	02700270 	.word	0x02700270
 80210ec:	02700270 	.word	0x02700270
 80210f0:	02700270 	.word	0x02700270
 80210f4:	02700270 	.word	0x02700270
 80210f8:	02700270 	.word	0x02700270
 80210fc:	02700270 	.word	0x02700270
 8021100:	02700270 	.word	0x02700270
 8021104:	02700270 	.word	0x02700270
 8021108:	02700270 	.word	0x02700270
 802110c:	02700270 	.word	0x02700270
 8021110:	02700270 	.word	0x02700270
 8021114:	02700270 	.word	0x02700270
 8021118:	02700270 	.word	0x02700270
 802111c:	02700270 	.word	0x02700270
 8021120:	02700270 	.word	0x02700270
 8021124:	02700270 	.word	0x02700270
 8021128:	02700270 	.word	0x02700270
 802112c:	02700270 	.word	0x02700270
 8021130:	02700270 	.word	0x02700270
 8021134:	021e021c 	.word	0x021e021c
 8021138:	02220220 	.word	0x02220220
 802113c:	02260224 	.word	0x02260224
 8021140:	022a0228 	.word	0x022a0228
 8021144:	022e022c 	.word	0x022e022c
 8021148:	02320230 	.word	0x02320230
 802114c:	02360234 	.word	0x02360234
 8021150:	023a0238 	.word	0x023a0238
 8021154:	023e023c 	.word	0x023e023c
 8021158:	02700240 	.word	0x02700240
 802115c:	02420270 	.word	0x02420270
 8021160:	02460244 	.word	0x02460244
 8021164:	02700248 	.word	0x02700248
 8021168:	0270024a 	.word	0x0270024a
 802116c:	024e024c 	.word	0x024e024c
 8021170:	02500270 	.word	0x02500270
 8021174:	02700270 	.word	0x02700270
 8021178:	02700270 	.word	0x02700270
 802117c:	02700270 	.word	0x02700270
 8021180:	02700270 	.word	0x02700270
 8021184:	02700270 	.word	0x02700270
 8021188:	02700270 	.word	0x02700270
 802118c:	02700252 	.word	0x02700252
 8021190:	02700270 	.word	0x02700270
 8021194:	02700270 	.word	0x02700270
 8021198:	02540270 	.word	0x02540270
 802119c:	02700270 	.word	0x02700270
 80211a0:	02700270 	.word	0x02700270
 80211a4:	02700270 	.word	0x02700270
 80211a8:	02700270 	.word	0x02700270
 80211ac:	02700270 	.word	0x02700270
 80211b0:	02700270 	.word	0x02700270
 80211b4:	02700270 	.word	0x02700270
 80211b8:	02700270 	.word	0x02700270
 80211bc:	02700270 	.word	0x02700270
 80211c0:	02700270 	.word	0x02700270
 80211c4:	02700270 	.word	0x02700270
 80211c8:	02700270 	.word	0x02700270
 80211cc:	02700270 	.word	0x02700270
 80211d0:	02700270 	.word	0x02700270
 80211d4:	02700270 	.word	0x02700270
 80211d8:	02700270 	.word	0x02700270
 80211dc:	02700270 	.word	0x02700270
 80211e0:	02700270 	.word	0x02700270
 80211e4:	02700270 	.word	0x02700270
 80211e8:	02700270 	.word	0x02700270
 80211ec:	02700270 	.word	0x02700270
 80211f0:	02700270 	.word	0x02700270
 80211f4:	02700270 	.word	0x02700270
 80211f8:	02560270 	.word	0x02560270
 80211fc:	025a0258 	.word	0x025a0258
 8021200:	025e025c 	.word	0x025e025c
 8021204:	02620260 	.word	0x02620260
 8021208:	02660264 	.word	0x02660264
 802120c:	02700268 	.word	0x02700268
 8021210:	026c026a 	.word	0x026c026a
 8021214:	02700270 	.word	0x02700270
 8021218:	02700270 	.word	0x02700270
 802121c:	02700270 	.word	0x02700270
 8021220:	02700270 	.word	0x02700270
 8021224:	02700270 	.word	0x02700270
 8021228:	02700270 	.word	0x02700270
 802122c:	02700270 	.word	0x02700270
 8021230:	02700270 	.word	0x02700270
 8021234:	02700270 	.word	0x02700270
 8021238:	02700270 	.word	0x02700270
 802123c:	02700270 	.word	0x02700270
 8021240:	02700270 	.word	0x02700270
 8021244:	02700270 	.word	0x02700270
 8021248:	02700270 	.word	0x02700270
 802124c:	02700270 	.word	0x02700270
 8021250:	02700270 	.word	0x02700270
 8021254:	02700270 	.word	0x02700270
 8021258:	02700270 	.word	0x02700270
 802125c:	02700270 	.word	0x02700270
 8021260:	02700270 	.word	0x02700270
 8021264:	02700270 	.word	0x02700270
 8021268:	02700270 	.word	0x02700270
 802126c:	02700270 	.word	0x02700270
 8021270:	02700270 	.word	0x02700270
 8021274:	02700270 	.word	0x02700270
 8021278:	02700270 	.word	0x02700270
 802127c:	02700270 	.word	0x02700270
 8021280:	02700270 	.word	0x02700270
 8021284:	02700270 	.word	0x02700270
 8021288:	02700270 	.word	0x02700270
 802128c:	02700270 	.word	0x02700270
 8021290:	02700270 	.word	0x02700270
 8021294:	02700270 	.word	0x02700270
 8021298:	02700270 	.word	0x02700270
 802129c:	02700270 	.word	0x02700270
 80212a0:	02700270 	.word	0x02700270
 80212a4:	02700270 	.word	0x02700270
 80212a8:	02700270 	.word	0x02700270
 80212ac:	02700270 	.word	0x02700270
 80212b0:	02700270 	.word	0x02700270
 80212b4:	02700270 	.word	0x02700270
 80212b8:	02700270 	.word	0x02700270
 80212bc:	02700270 	.word	0x02700270
 80212c0:	026e0270 	.word	0x026e0270
 80212c4:	483f      	ldr	r0, [pc, #252]	@ (80213c4 <mg_http_status_code_str+0x4f8>)
 80212c6:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 80212c8:	483f      	ldr	r0, [pc, #252]	@ (80213c8 <mg_http_status_code_str+0x4fc>)
 80212ca:	4770      	bx	lr
    case 200: return "OK";
 80212cc:	483f      	ldr	r0, [pc, #252]	@ (80213cc <mg_http_status_code_str+0x500>)
 80212ce:	4770      	bx	lr
    case 201: return "Created";
 80212d0:	483f      	ldr	r0, [pc, #252]	@ (80213d0 <mg_http_status_code_str+0x504>)
 80212d2:	4770      	bx	lr
    case 202: return "Accepted";
 80212d4:	483f      	ldr	r0, [pc, #252]	@ (80213d4 <mg_http_status_code_str+0x508>)
 80212d6:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 80212d8:	483f      	ldr	r0, [pc, #252]	@ (80213d8 <mg_http_status_code_str+0x50c>)
 80212da:	4770      	bx	lr
    case 204: return "No Content";
 80212dc:	483f      	ldr	r0, [pc, #252]	@ (80213dc <mg_http_status_code_str+0x510>)
 80212de:	4770      	bx	lr
    case 205: return "Reset Content";
 80212e0:	483f      	ldr	r0, [pc, #252]	@ (80213e0 <mg_http_status_code_str+0x514>)
 80212e2:	4770      	bx	lr
    case 206: return "Partial Content";
 80212e4:	483f      	ldr	r0, [pc, #252]	@ (80213e4 <mg_http_status_code_str+0x518>)
 80212e6:	4770      	bx	lr
    case 207: return "Multi-Status";
 80212e8:	483f      	ldr	r0, [pc, #252]	@ (80213e8 <mg_http_status_code_str+0x51c>)
 80212ea:	4770      	bx	lr
    case 208: return "Already Reported";
 80212ec:	483f      	ldr	r0, [pc, #252]	@ (80213ec <mg_http_status_code_str+0x520>)
 80212ee:	4770      	bx	lr
    case 226: return "IM Used";
 80212f0:	483f      	ldr	r0, [pc, #252]	@ (80213f0 <mg_http_status_code_str+0x524>)
 80212f2:	4770      	bx	lr
    case 300: return "Multiple Choices";
 80212f4:	483f      	ldr	r0, [pc, #252]	@ (80213f4 <mg_http_status_code_str+0x528>)
 80212f6:	4770      	bx	lr
    case 301: return "Moved Permanently";
 80212f8:	483f      	ldr	r0, [pc, #252]	@ (80213f8 <mg_http_status_code_str+0x52c>)
 80212fa:	4770      	bx	lr
    case 302: return "Found";
 80212fc:	483f      	ldr	r0, [pc, #252]	@ (80213fc <mg_http_status_code_str+0x530>)
 80212fe:	4770      	bx	lr
    case 303: return "See Other";
 8021300:	483f      	ldr	r0, [pc, #252]	@ (8021400 <mg_http_status_code_str+0x534>)
 8021302:	4770      	bx	lr
    case 304: return "Not Modified";
 8021304:	483f      	ldr	r0, [pc, #252]	@ (8021404 <mg_http_status_code_str+0x538>)
 8021306:	4770      	bx	lr
    case 305: return "Use Proxy";
 8021308:	483f      	ldr	r0, [pc, #252]	@ (8021408 <mg_http_status_code_str+0x53c>)
 802130a:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 802130c:	483f      	ldr	r0, [pc, #252]	@ (802140c <mg_http_status_code_str+0x540>)
 802130e:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8021310:	483f      	ldr	r0, [pc, #252]	@ (8021410 <mg_http_status_code_str+0x544>)
 8021312:	4770      	bx	lr
    case 400: return "Bad Request";
 8021314:	483f      	ldr	r0, [pc, #252]	@ (8021414 <mg_http_status_code_str+0x548>)
 8021316:	4770      	bx	lr
    case 401: return "Unauthorized";
 8021318:	483f      	ldr	r0, [pc, #252]	@ (8021418 <mg_http_status_code_str+0x54c>)
 802131a:	4770      	bx	lr
    case 402: return "Payment Required";
 802131c:	483f      	ldr	r0, [pc, #252]	@ (802141c <mg_http_status_code_str+0x550>)
 802131e:	4770      	bx	lr
    case 403: return "Forbidden";
 8021320:	483f      	ldr	r0, [pc, #252]	@ (8021420 <mg_http_status_code_str+0x554>)
 8021322:	4770      	bx	lr
    case 404: return "Not Found";
 8021324:	483f      	ldr	r0, [pc, #252]	@ (8021424 <mg_http_status_code_str+0x558>)
 8021326:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 8021328:	483f      	ldr	r0, [pc, #252]	@ (8021428 <mg_http_status_code_str+0x55c>)
 802132a:	4770      	bx	lr
    case 406: return "Not Acceptable";
 802132c:	483f      	ldr	r0, [pc, #252]	@ (802142c <mg_http_status_code_str+0x560>)
 802132e:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8021330:	483f      	ldr	r0, [pc, #252]	@ (8021430 <mg_http_status_code_str+0x564>)
 8021332:	4770      	bx	lr
    case 408: return "Request Timeout";
 8021334:	483f      	ldr	r0, [pc, #252]	@ (8021434 <mg_http_status_code_str+0x568>)
 8021336:	4770      	bx	lr
    case 409: return "Conflict";
 8021338:	483f      	ldr	r0, [pc, #252]	@ (8021438 <mg_http_status_code_str+0x56c>)
 802133a:	4770      	bx	lr
    case 410: return "Gone";
 802133c:	483f      	ldr	r0, [pc, #252]	@ (802143c <mg_http_status_code_str+0x570>)
 802133e:	4770      	bx	lr
    case 411: return "Length Required";
 8021340:	483f      	ldr	r0, [pc, #252]	@ (8021440 <mg_http_status_code_str+0x574>)
 8021342:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8021344:	483f      	ldr	r0, [pc, #252]	@ (8021444 <mg_http_status_code_str+0x578>)
 8021346:	4770      	bx	lr
    case 413: return "Payload Too Large";
 8021348:	483f      	ldr	r0, [pc, #252]	@ (8021448 <mg_http_status_code_str+0x57c>)
 802134a:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 802134c:	483f      	ldr	r0, [pc, #252]	@ (802144c <mg_http_status_code_str+0x580>)
 802134e:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8021350:	483f      	ldr	r0, [pc, #252]	@ (8021450 <mg_http_status_code_str+0x584>)
 8021352:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8021354:	483f      	ldr	r0, [pc, #252]	@ (8021454 <mg_http_status_code_str+0x588>)
 8021356:	4770      	bx	lr
    case 417: return "Expectation Failed";
 8021358:	483f      	ldr	r0, [pc, #252]	@ (8021458 <mg_http_status_code_str+0x58c>)
 802135a:	4770      	bx	lr
    case 418: return "I'm a teapot";
 802135c:	483f      	ldr	r0, [pc, #252]	@ (802145c <mg_http_status_code_str+0x590>)
 802135e:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8021360:	483f      	ldr	r0, [pc, #252]	@ (8021460 <mg_http_status_code_str+0x594>)
 8021362:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8021364:	483f      	ldr	r0, [pc, #252]	@ (8021464 <mg_http_status_code_str+0x598>)
 8021366:	4770      	bx	lr
    case 423: return "Locked";
 8021368:	483f      	ldr	r0, [pc, #252]	@ (8021468 <mg_http_status_code_str+0x59c>)
 802136a:	4770      	bx	lr
    case 424: return "Failed Dependency";
 802136c:	483f      	ldr	r0, [pc, #252]	@ (802146c <mg_http_status_code_str+0x5a0>)
 802136e:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8021370:	483f      	ldr	r0, [pc, #252]	@ (8021470 <mg_http_status_code_str+0x5a4>)
 8021372:	4770      	bx	lr
    case 428: return "Precondition Required";
 8021374:	483f      	ldr	r0, [pc, #252]	@ (8021474 <mg_http_status_code_str+0x5a8>)
 8021376:	4770      	bx	lr
    case 429: return "Too Many Requests";
 8021378:	483f      	ldr	r0, [pc, #252]	@ (8021478 <mg_http_status_code_str+0x5ac>)
 802137a:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 802137c:	483f      	ldr	r0, [pc, #252]	@ (802147c <mg_http_status_code_str+0x5b0>)
 802137e:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8021380:	483f      	ldr	r0, [pc, #252]	@ (8021480 <mg_http_status_code_str+0x5b4>)
 8021382:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8021384:	483f      	ldr	r0, [pc, #252]	@ (8021484 <mg_http_status_code_str+0x5b8>)
 8021386:	4770      	bx	lr
    case 499: return "Client Closed Request";
 8021388:	483f      	ldr	r0, [pc, #252]	@ (8021488 <mg_http_status_code_str+0x5bc>)
 802138a:	4770      	bx	lr
    case 500: return "Internal Server Error";
 802138c:	483f      	ldr	r0, [pc, #252]	@ (802148c <mg_http_status_code_str+0x5c0>)
 802138e:	4770      	bx	lr
    case 501: return "Not Implemented";
 8021390:	483f      	ldr	r0, [pc, #252]	@ (8021490 <mg_http_status_code_str+0x5c4>)
 8021392:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8021394:	483f      	ldr	r0, [pc, #252]	@ (8021494 <mg_http_status_code_str+0x5c8>)
 8021396:	4770      	bx	lr
    case 503: return "Service Unavailable";
 8021398:	483f      	ldr	r0, [pc, #252]	@ (8021498 <mg_http_status_code_str+0x5cc>)
 802139a:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 802139c:	483f      	ldr	r0, [pc, #252]	@ (802149c <mg_http_status_code_str+0x5d0>)
 802139e:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 80213a0:	483f      	ldr	r0, [pc, #252]	@ (80214a0 <mg_http_status_code_str+0x5d4>)
 80213a2:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 80213a4:	483f      	ldr	r0, [pc, #252]	@ (80214a4 <mg_http_status_code_str+0x5d8>)
 80213a6:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 80213a8:	483f      	ldr	r0, [pc, #252]	@ (80214a8 <mg_http_status_code_str+0x5dc>)
 80213aa:	4770      	bx	lr
    case 508: return "Loop Detected";
 80213ac:	483f      	ldr	r0, [pc, #252]	@ (80214ac <mg_http_status_code_str+0x5e0>)
 80213ae:	4770      	bx	lr
    case 510: return "Not Extended";
 80213b0:	483f      	ldr	r0, [pc, #252]	@ (80214b0 <mg_http_status_code_str+0x5e4>)
 80213b2:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 80213b4:	483f      	ldr	r0, [pc, #252]	@ (80214b4 <mg_http_status_code_str+0x5e8>)
 80213b6:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 80213b8:	483f      	ldr	r0, [pc, #252]	@ (80214b8 <mg_http_status_code_str+0x5ec>)
 80213ba:	4770      	bx	lr
    default: return "";
 80213bc:	483f      	ldr	r0, [pc, #252]	@ (80214bc <mg_http_status_code_str+0x5f0>)
 80213be:	4770      	bx	lr
    case 101: return "Switching Protocols";
 80213c0:	483f      	ldr	r0, [pc, #252]	@ (80214c0 <mg_http_status_code_str+0x5f4>)
  }
}
 80213c2:	4770      	bx	lr
 80213c4:	0803b520 	.word	0x0803b520
 80213c8:	0803b540 	.word	0x0803b540
 80213cc:	0803b54c 	.word	0x0803b54c
 80213d0:	0803b550 	.word	0x0803b550
 80213d4:	0803b558 	.word	0x0803b558
 80213d8:	0803b564 	.word	0x0803b564
 80213dc:	0803b584 	.word	0x0803b584
 80213e0:	0803b590 	.word	0x0803b590
 80213e4:	0803b5a0 	.word	0x0803b5a0
 80213e8:	0803b5b0 	.word	0x0803b5b0
 80213ec:	0803b5c0 	.word	0x0803b5c0
 80213f0:	0803b5d4 	.word	0x0803b5d4
 80213f4:	0803b5dc 	.word	0x0803b5dc
 80213f8:	0803b5f0 	.word	0x0803b5f0
 80213fc:	0803b694 	.word	0x0803b694
 8021400:	0803b604 	.word	0x0803b604
 8021404:	0803b610 	.word	0x0803b610
 8021408:	0803b620 	.word	0x0803b620
 802140c:	0803b62c 	.word	0x0803b62c
 8021410:	0803b640 	.word	0x0803b640
 8021414:	0803b654 	.word	0x0803b654
 8021418:	0803b660 	.word	0x0803b660
 802141c:	0803b670 	.word	0x0803b670
 8021420:	0803b684 	.word	0x0803b684
 8021424:	0803b690 	.word	0x0803b690
 8021428:	0803b69c 	.word	0x0803b69c
 802142c:	0803b6b0 	.word	0x0803b6b0
 8021430:	0803b6c0 	.word	0x0803b6c0
 8021434:	0803b6e0 	.word	0x0803b6e0
 8021438:	0803b6f0 	.word	0x0803b6f0
 802143c:	0803b6fc 	.word	0x0803b6fc
 8021440:	0803b704 	.word	0x0803b704
 8021444:	0803b714 	.word	0x0803b714
 8021448:	0803b728 	.word	0x0803b728
 802144c:	0803b73c 	.word	0x0803b73c
 8021450:	0803b754 	.word	0x0803b754
 8021454:	0803b76c 	.word	0x0803b76c
 8021458:	0803b78c 	.word	0x0803b78c
 802145c:	0803b7a0 	.word	0x0803b7a0
 8021460:	0803b7b0 	.word	0x0803b7b0
 8021464:	0803b7c4 	.word	0x0803b7c4
 8021468:	0803b7dc 	.word	0x0803b7dc
 802146c:	0803b7e4 	.word	0x0803b7e4
 8021470:	0803b7f8 	.word	0x0803b7f8
 8021474:	0803b80c 	.word	0x0803b80c
 8021478:	0803b824 	.word	0x0803b824
 802147c:	0803b838 	.word	0x0803b838
 8021480:	0803b858 	.word	0x0803b858
 8021484:	0803b87c 	.word	0x0803b87c
 8021488:	0803b89c 	.word	0x0803b89c
 802148c:	0803b8b4 	.word	0x0803b8b4
 8021490:	0803b8cc 	.word	0x0803b8cc
 8021494:	0803b8dc 	.word	0x0803b8dc
 8021498:	0803b8e8 	.word	0x0803b8e8
 802149c:	0803b8fc 	.word	0x0803b8fc
 80214a0:	0803b90c 	.word	0x0803b90c
 80214a4:	0803b928 	.word	0x0803b928
 80214a8:	0803b940 	.word	0x0803b940
 80214ac:	0803b958 	.word	0x0803b958
 80214b0:	0803b968 	.word	0x0803b968
 80214b4:	0803b978 	.word	0x0803b978
 80214b8:	0803b998 	.word	0x0803b998
 80214bc:	080381c0 	.word	0x080381c0
 80214c0:	0803b52c 	.word	0x0803b52c

080214c4 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 80214c4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 80214c8:	2b09      	cmp	r3, #9
 80214ca:	d91c      	bls.n	8021506 <mg_is_url_safe+0x42>
 80214cc:	285f      	cmp	r0, #95	@ 0x5f
 80214ce:	d01c      	beq.n	802150a <mg_is_url_safe+0x46>
 80214d0:	dc0d      	bgt.n	80214ee <mg_is_url_safe+0x2a>
 80214d2:	282e      	cmp	r0, #46	@ 0x2e
 80214d4:	d01b      	beq.n	802150e <mg_is_url_safe+0x4a>
 80214d6:	dd04      	ble.n	80214e2 <mg_is_url_safe+0x1e>
 80214d8:	3841      	subs	r0, #65	@ 0x41
 80214da:	2819      	cmp	r0, #25
 80214dc:	d805      	bhi.n	80214ea <mg_is_url_safe+0x26>
 80214de:	2001      	movs	r0, #1
 80214e0:	4770      	bx	lr
 80214e2:	282d      	cmp	r0, #45	@ 0x2d
 80214e4:	d115      	bne.n	8021512 <mg_is_url_safe+0x4e>
 80214e6:	2001      	movs	r0, #1
 80214e8:	4770      	bx	lr
 80214ea:	2000      	movs	r0, #0
 80214ec:	4770      	bx	lr
 80214ee:	287a      	cmp	r0, #122	@ 0x7a
 80214f0:	dd03      	ble.n	80214fa <mg_is_url_safe+0x36>
 80214f2:	287e      	cmp	r0, #126	@ 0x7e
 80214f4:	d10f      	bne.n	8021516 <mg_is_url_safe+0x52>
 80214f6:	2001      	movs	r0, #1
 80214f8:	4770      	bx	lr
 80214fa:	2861      	cmp	r0, #97	@ 0x61
 80214fc:	da01      	bge.n	8021502 <mg_is_url_safe+0x3e>
 80214fe:	2000      	movs	r0, #0
 8021500:	4770      	bx	lr
 8021502:	2001      	movs	r0, #1
 8021504:	4770      	bx	lr
 8021506:	2001      	movs	r0, #1
 8021508:	4770      	bx	lr
 802150a:	2001      	movs	r0, #1
 802150c:	4770      	bx	lr
 802150e:	2001      	movs	r0, #1
 8021510:	4770      	bx	lr
 8021512:	2000      	movs	r0, #0
 8021514:	4770      	bx	lr
 8021516:	2000      	movs	r0, #0
}
 8021518:	4770      	bx	lr

0802151a <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802151a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802151e:	2b09      	cmp	r3, #9
 8021520:	d908      	bls.n	8021534 <is_hex_digit+0x1a>
 8021522:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021526:	2b05      	cmp	r3, #5
 8021528:	d906      	bls.n	8021538 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 802152a:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802152c:	2805      	cmp	r0, #5
 802152e:	d805      	bhi.n	802153c <is_hex_digit+0x22>
 8021530:	2001      	movs	r0, #1
 8021532:	4770      	bx	lr
 8021534:	2001      	movs	r0, #1
 8021536:	4770      	bx	lr
 8021538:	2001      	movs	r0, #1
 802153a:	4770      	bx	lr
 802153c:	2000      	movs	r0, #0
}
 802153e:	4770      	bx	lr

08021540 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8021540:	b129      	cbz	r1, 802154e <roundup+0xe>
 8021542:	4408      	add	r0, r1
 8021544:	3801      	subs	r0, #1
 8021546:	fbb0 f0f1 	udiv	r0, r0, r1
 802154a:	fb01 f000 	mul.w	r0, r1, r0
}
 802154e:	4770      	bx	lr

08021550 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8021550:	b108      	cbz	r0, 8021556 <escapeseq+0x6>
 8021552:	4802      	ldr	r0, [pc, #8]	@ (802155c <escapeseq+0xc>)
 8021554:	4770      	bx	lr
 8021556:	4802      	ldr	r0, [pc, #8]	@ (8021560 <escapeseq+0x10>)
}
 8021558:	4770      	bx	lr
 802155a:	bf00      	nop
 802155c:	0803b9b8 	.word	0x0803b9b8
 8021560:	0803b9c0 	.word	0x0803b9c0

08021564 <json_esc>:

static char json_esc(int c, int esc) {
 8021564:	b570      	push	{r4, r5, r6, lr}
 8021566:	4604      	mov	r4, r0
 8021568:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802156a:	4608      	mov	r0, r1
 802156c:	f7ff fff0 	bl	8021550 <escapeseq>
 8021570:	4606      	mov	r6, r0
 8021572:	fab5 f085 	clz	r0, r5
 8021576:	0940      	lsrs	r0, r0, #5
 8021578:	f7ff ffea 	bl	8021550 <escapeseq>
 802157c:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 802157e:	4633      	mov	r3, r6
 8021580:	e000      	b.n	8021584 <json_esc+0x20>
 8021582:	3301      	adds	r3, #1
 8021584:	7818      	ldrb	r0, [r3, #0]
 8021586:	b118      	cbz	r0, 8021590 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 8021588:	42a0      	cmp	r0, r4
 802158a:	d1fa      	bne.n	8021582 <json_esc+0x1e>
 802158c:	1b9b      	subs	r3, r3, r6
 802158e:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021590:	bd70      	pop	{r4, r5, r6, pc}

08021592 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8021592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021596:	4607      	mov	r7, r0
 8021598:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 802159a:	2400      	movs	r4, #0
 802159c:	e003      	b.n	80215a6 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 802159e:	b1d5      	cbz	r5, 80215d6 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 80215a0:	2d22      	cmp	r5, #34	@ 0x22
 80215a2:	d015      	beq.n	80215d0 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 80215a4:	3401      	adds	r4, #1
 80215a6:	42b4      	cmp	r4, r6
 80215a8:	da10      	bge.n	80215cc <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 80215aa:	4623      	mov	r3, r4
 80215ac:	5d3d      	ldrb	r5, [r7, r4]
 80215ae:	2d5c      	cmp	r5, #92	@ 0x5c
 80215b0:	d1f5      	bne.n	802159e <mg_pass_string+0xc>
 80215b2:	f104 0801 	add.w	r8, r4, #1
 80215b6:	45b0      	cmp	r8, r6
 80215b8:	daf1      	bge.n	802159e <mg_pass_string+0xc>
 80215ba:	443b      	add	r3, r7
 80215bc:	2101      	movs	r1, #1
 80215be:	7858      	ldrb	r0, [r3, #1]
 80215c0:	f7ff ffd0 	bl	8021564 <json_esc>
 80215c4:	2800      	cmp	r0, #0
 80215c6:	d0ea      	beq.n	802159e <mg_pass_string+0xc>
      i++;
 80215c8:	4644      	mov	r4, r8
 80215ca:	e7eb      	b.n	80215a4 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 80215cc:	f06f 0401 	mvn.w	r4, #1
}
 80215d0:	4620      	mov	r0, r4
 80215d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 80215d6:	f06f 0401 	mvn.w	r4, #1
 80215da:	e7f9      	b.n	80215d0 <mg_pass_string+0x3e>
 80215dc:	0000      	movs	r0, r0
	...

080215e0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80215e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e4:	ed2d 8b02 	vpush	{d8}
 80215e8:	b085      	sub	sp, #20
 80215ea:	4681      	mov	r9, r0
 80215ec:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 80215ee:	f1b1 0800 	subs.w	r8, r1, #0
 80215f2:	dd49      	ble.n	8021688 <mg_atod+0xa8>
 80215f4:	7803      	ldrb	r3, [r0, #0]
 80215f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80215f8:	d04c      	beq.n	8021694 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 80215fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80215fc:	d04e      	beq.n	802169c <mg_atod+0xbc>
  int i = 0, sign = 1;
 80215fe:	f04f 0a01 	mov.w	sl, #1
 8021602:	2400      	movs	r4, #0
 8021604:	e043      	b.n	802168e <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8021606:	2200      	movs	r2, #0
 8021608:	4b71      	ldr	r3, [pc, #452]	@ (80217d0 <mg_atod+0x1f0>)
 802160a:	4630      	mov	r0, r6
 802160c:	4639      	mov	r1, r7
 802160e:	f7ef f80b 	bl	8010628 <__aeabi_dmul>
 8021612:	4606      	mov	r6, r0
 8021614:	460f      	mov	r7, r1
    d += p[i] - '0';
 8021616:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 802161a:	f7ee ff9b 	bl	8010554 <__aeabi_i2d>
 802161e:	4632      	mov	r2, r6
 8021620:	463b      	mov	r3, r7
 8021622:	f7ee fe4b 	bl	80102bc <__adddf3>
 8021626:	4606      	mov	r6, r0
 8021628:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802162a:	3401      	adds	r4, #1
 802162c:	4544      	cmp	r4, r8
 802162e:	da05      	bge.n	802163c <mg_atod+0x5c>
 8021630:	f819 5004 	ldrb.w	r5, [r9, r4]
 8021634:	2d2f      	cmp	r5, #47	@ 0x2f
 8021636:	d901      	bls.n	802163c <mg_atod+0x5c>
 8021638:	2d39      	cmp	r5, #57	@ 0x39
 802163a:	d9e4      	bls.n	8021606 <mg_atod+0x26>
  }
  d *= sign;
 802163c:	4650      	mov	r0, sl
 802163e:	f7ee ff89 	bl	8010554 <__aeabi_i2d>
 8021642:	4602      	mov	r2, r0
 8021644:	460b      	mov	r3, r1
 8021646:	ec43 2b18 	vmov	d8, r2, r3
 802164a:	4632      	mov	r2, r6
 802164c:	463b      	mov	r3, r7
 802164e:	f7ee ffeb 	bl	8010628 <__aeabi_dmul>
 8021652:	4606      	mov	r6, r0
 8021654:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8021656:	4544      	cmp	r4, r8
 8021658:	da03      	bge.n	8021662 <mg_atod+0x82>
 802165a:	f819 3004 	ldrb.w	r3, [r9, r4]
 802165e:	2b2e      	cmp	r3, #46	@ 0x2e
 8021660:	d020      	beq.n	80216a4 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8021662:	4544      	cmp	r4, r8
 8021664:	f280 80a1 	bge.w	80217aa <mg_atod+0x1ca>
 8021668:	f819 3004 	ldrb.w	r3, [r9, r4]
 802166c:	2b65      	cmp	r3, #101	@ 0x65
 802166e:	d002      	beq.n	8021676 <mg_atod+0x96>
 8021670:	2b45      	cmp	r3, #69	@ 0x45
 8021672:	f040 809a 	bne.w	80217aa <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8021676:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8021678:	4598      	cmp	r8, r3
 802167a:	dd58      	ble.n	802172e <mg_atod+0x14e>
 802167c:	f819 2003 	ldrb.w	r2, [r9, r3]
 8021680:	2a2d      	cmp	r2, #45	@ 0x2d
 8021682:	d051      	beq.n	8021728 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8021684:	2200      	movs	r2, #0
 8021686:	e053      	b.n	8021730 <mg_atod+0x150>
  int i = 0, sign = 1;
 8021688:	f04f 0a01 	mov.w	sl, #1
 802168c:	2400      	movs	r4, #0
    i++;
 802168e:	2600      	movs	r6, #0
 8021690:	2700      	movs	r7, #0
 8021692:	e7cb      	b.n	802162c <mg_atod+0x4c>
    sign = -1, i++;
 8021694:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8021698:	2401      	movs	r4, #1
 802169a:	e7f8      	b.n	802168e <mg_atod+0xae>
  int i = 0, sign = 1;
 802169c:	f04f 0a01 	mov.w	sl, #1
    i++;
 80216a0:	4654      	mov	r4, sl
 80216a2:	e7f4      	b.n	802168e <mg_atod+0xae>
    i++;
 80216a4:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 80216a6:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 80216aa:	e9db ab00 	ldrd	sl, fp, [fp]
 80216ae:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 80217c8 <mg_atod+0x1e8>
 80216b2:	ec53 2b17 	vmov	r2, r3, d7
 80216b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80216ba:	464f      	mov	r7, r9
 80216bc:	4645      	mov	r5, r8
 80216be:	4690      	mov	r8, r2
 80216c0:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80216c2:	e017      	b.n	80216f4 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 80216c4:	3830      	subs	r0, #48	@ 0x30
 80216c6:	f7ee ff45 	bl	8010554 <__aeabi_i2d>
 80216ca:	4652      	mov	r2, sl
 80216cc:	465b      	mov	r3, fp
 80216ce:	f7ee ffab 	bl	8010628 <__aeabi_dmul>
 80216d2:	4602      	mov	r2, r0
 80216d4:	460b      	mov	r3, r1
 80216d6:	4640      	mov	r0, r8
 80216d8:	4649      	mov	r1, r9
 80216da:	f7ee fdef 	bl	80102bc <__adddf3>
 80216de:	4680      	mov	r8, r0
 80216e0:	4689      	mov	r9, r1
      base /= 10.0;
 80216e2:	2200      	movs	r2, #0
 80216e4:	4b3a      	ldr	r3, [pc, #232]	@ (80217d0 <mg_atod+0x1f0>)
 80216e6:	4650      	mov	r0, sl
 80216e8:	4659      	mov	r1, fp
 80216ea:	f7ef f8c7 	bl	801087c <__aeabi_ddiv>
 80216ee:	4682      	mov	sl, r0
 80216f0:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80216f2:	3401      	adds	r4, #1
 80216f4:	42ac      	cmp	r4, r5
 80216f6:	da04      	bge.n	8021702 <mg_atod+0x122>
 80216f8:	5d38      	ldrb	r0, [r7, r4]
 80216fa:	282f      	cmp	r0, #47	@ 0x2f
 80216fc:	d901      	bls.n	8021702 <mg_atod+0x122>
 80216fe:	2839      	cmp	r0, #57	@ 0x39
 8021700:	d9e0      	bls.n	80216c4 <mg_atod+0xe4>
    d += frac * sign;
 8021702:	4642      	mov	r2, r8
 8021704:	464b      	mov	r3, r9
 8021706:	46b9      	mov	r9, r7
 8021708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802170c:	46a8      	mov	r8, r5
 802170e:	ec51 0b18 	vmov	r0, r1, d8
 8021712:	f7ee ff89 	bl	8010628 <__aeabi_dmul>
 8021716:	4602      	mov	r2, r0
 8021718:	460b      	mov	r3, r1
 802171a:	4630      	mov	r0, r6
 802171c:	4639      	mov	r1, r7
 802171e:	f7ee fdcd 	bl	80102bc <__adddf3>
 8021722:	4606      	mov	r6, r0
 8021724:	460f      	mov	r7, r1
 8021726:	e79c      	b.n	8021662 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8021728:	1ca3      	adds	r3, r4, #2
 802172a:	2201      	movs	r2, #1
 802172c:	e000      	b.n	8021730 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 802172e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8021730:	4543      	cmp	r3, r8
 8021732:	da03      	bge.n	802173c <mg_atod+0x15c>
 8021734:	f819 1003 	ldrb.w	r1, [r9, r3]
 8021738:	292b      	cmp	r1, #43	@ 0x2b
 802173a:	d013      	beq.n	8021764 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 802173c:	461c      	mov	r4, r3
 802173e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8021740:	4544      	cmp	r4, r8
 8021742:	da11      	bge.n	8021768 <mg_atod+0x188>
 8021744:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021748:	2b2f      	cmp	r3, #47	@ 0x2f
 802174a:	d90d      	bls.n	8021768 <mg_atod+0x188>
 802174c:	2b39      	cmp	r3, #57	@ 0x39
 802174e:	d80b      	bhi.n	8021768 <mg_atod+0x188>
 8021750:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8021754:	da08      	bge.n	8021768 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8021756:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802175a:	3401      	adds	r4, #1
 802175c:	3b30      	subs	r3, #48	@ 0x30
 802175e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8021762:	e7ed      	b.n	8021740 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8021764:	3301      	adds	r3, #1
 8021766:	e7e9      	b.n	802173c <mg_atod+0x15c>
    if (minus) exp = -exp;
 8021768:	b102      	cbz	r2, 802176c <mg_atod+0x18c>
 802176a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 802176c:	f04f 0800 	mov.w	r8, #0
 8021770:	e009      	b.n	8021786 <mg_atod+0x1a6>
 8021772:	2200      	movs	r2, #0
 8021774:	4b16      	ldr	r3, [pc, #88]	@ (80217d0 <mg_atod+0x1f0>)
 8021776:	4630      	mov	r0, r6
 8021778:	4639      	mov	r1, r7
 802177a:	f7ee ff55 	bl	8010628 <__aeabi_dmul>
 802177e:	4606      	mov	r6, r0
 8021780:	460f      	mov	r7, r1
 8021782:	f108 0801 	add.w	r8, r8, #1
 8021786:	45a8      	cmp	r8, r5
 8021788:	dbf3      	blt.n	8021772 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802178a:	f04f 0800 	mov.w	r8, #0
 802178e:	e009      	b.n	80217a4 <mg_atod+0x1c4>
 8021790:	2200      	movs	r2, #0
 8021792:	4b0f      	ldr	r3, [pc, #60]	@ (80217d0 <mg_atod+0x1f0>)
 8021794:	4630      	mov	r0, r6
 8021796:	4639      	mov	r1, r7
 8021798:	f7ef f870 	bl	801087c <__aeabi_ddiv>
 802179c:	4606      	mov	r6, r0
 802179e:	460f      	mov	r7, r1
 80217a0:	f108 0801 	add.w	r8, r8, #1
 80217a4:	426b      	negs	r3, r5
 80217a6:	4543      	cmp	r3, r8
 80217a8:	dcf2      	bgt.n	8021790 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 80217aa:	9b01      	ldr	r3, [sp, #4]
 80217ac:	b103      	cbz	r3, 80217b0 <mg_atod+0x1d0>
 80217ae:	601c      	str	r4, [r3, #0]
  return d;
}
 80217b0:	ec47 6b10 	vmov	d0, r6, r7
 80217b4:	b005      	add	sp, #20
 80217b6:	ecbd 8b02 	vpop	{d8}
 80217ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217be:	bf00      	nop
 80217c0:	9999999a 	.word	0x9999999a
 80217c4:	3fb99999 	.word	0x3fb99999
	...
 80217d0:	40240000 	.word	0x40240000

080217d4 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 80217d4:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 80217d6:	4b03      	ldr	r3, [pc, #12]	@ (80217e4 <logc+0x10>)
 80217d8:	681b      	ldr	r3, [r3, #0]
 80217da:	4a03      	ldr	r2, [pc, #12]	@ (80217e8 <logc+0x14>)
 80217dc:	6811      	ldr	r1, [r2, #0]
 80217de:	4798      	blx	r3
}
 80217e0:	bd08      	pop	{r3, pc}
 80217e2:	bf00      	nop
 80217e4:	20000128 	.word	0x20000128
 80217e8:	20019fa0 	.word	0x20019fa0

080217ec <logs>:

static void logs(const char *buf, size_t len) {
 80217ec:	b570      	push	{r4, r5, r6, lr}
 80217ee:	4606      	mov	r6, r0
 80217f0:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80217f2:	2400      	movs	r4, #0
 80217f4:	e003      	b.n	80217fe <logs+0x12>
 80217f6:	5d30      	ldrb	r0, [r6, r4]
 80217f8:	f7ff ffec 	bl	80217d4 <logc>
 80217fc:	3401      	adds	r4, #1
 80217fe:	42ac      	cmp	r4, r5
 8021800:	d3f9      	bcc.n	80217f6 <logs+0xa>
}
 8021802:	bd70      	pop	{r4, r5, r6, pc}

08021804 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8021804:	2809      	cmp	r0, #9
 8021806:	d803      	bhi.n	8021810 <nibble+0xc>
 8021808:	b2c0      	uxtb	r0, r0
 802180a:	3030      	adds	r0, #48	@ 0x30
 802180c:	b2c0      	uxtb	r0, r0
 802180e:	4770      	bx	lr
 8021810:	b2c0      	uxtb	r0, r0
 8021812:	3057      	adds	r0, #87	@ 0x57
 8021814:	b2c0      	uxtb	r0, r0
}
 8021816:	4770      	bx	lr

08021818 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8021818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802181c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 802181e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8021820:	6883      	ldr	r3, [r0, #8]
 8021822:	68c2      	ldr	r2, [r0, #12]
 8021824:	4053      	eors	r3, r2
 8021826:	4033      	ands	r3, r6
 8021828:	4053      	eors	r3, r2
 802182a:	f8d1 a000 	ldr.w	sl, [r1]
 802182e:	4453      	add	r3, sl
 8021830:	6802      	ldr	r2, [r0, #0]
 8021832:	4413      	add	r3, r2
 8021834:	4ae0      	ldr	r2, [pc, #896]	@ (8021bb8 <mg_md5_transform+0x3a0>)
 8021836:	441a      	add	r2, r3
 8021838:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802183c:	6883      	ldr	r3, [r0, #8]
 802183e:	ea86 0503 	eor.w	r5, r6, r3
 8021842:	4015      	ands	r5, r2
 8021844:	405d      	eors	r5, r3
 8021846:	684b      	ldr	r3, [r1, #4]
 8021848:	9301      	str	r3, [sp, #4]
 802184a:	441d      	add	r5, r3
 802184c:	68c4      	ldr	r4, [r0, #12]
 802184e:	4425      	add	r5, r4
 8021850:	4bda      	ldr	r3, [pc, #872]	@ (8021bbc <mg_md5_transform+0x3a4>)
 8021852:	442b      	add	r3, r5
 8021854:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8021858:	ea86 0502 	eor.w	r5, r6, r2
 802185c:	401d      	ands	r5, r3
 802185e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021860:	4075      	eors	r5, r6
 8021862:	688c      	ldr	r4, [r1, #8]
 8021864:	4425      	add	r5, r4
 8021866:	6886      	ldr	r6, [r0, #8]
 8021868:	4435      	add	r5, r6
 802186a:	4ed5      	ldr	r6, [pc, #852]	@ (8021bc0 <mg_md5_transform+0x3a8>)
 802186c:	442e      	add	r6, r5
 802186e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8021872:	ea82 0703 	eor.w	r7, r2, r3
 8021876:	ea07 070c 	and.w	r7, r7, ip
 802187a:	4057      	eors	r7, r2
 802187c:	68cd      	ldr	r5, [r1, #12]
 802187e:	950a      	str	r5, [sp, #40]	@ 0x28
 8021880:	442f      	add	r7, r5
 8021882:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021884:	4437      	add	r7, r6
 8021886:	4dcf      	ldr	r5, [pc, #828]	@ (8021bc4 <mg_md5_transform+0x3ac>)
 8021888:	443d      	add	r5, r7
 802188a:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802188e:	ea83 070c 	eor.w	r7, r3, ip
 8021892:	402f      	ands	r7, r5
 8021894:	405f      	eors	r7, r3
 8021896:	690e      	ldr	r6, [r1, #16]
 8021898:	9602      	str	r6, [sp, #8]
 802189a:	4437      	add	r7, r6
 802189c:	4417      	add	r7, r2
 802189e:	4aca      	ldr	r2, [pc, #808]	@ (8021bc8 <mg_md5_transform+0x3b0>)
 80218a0:	443a      	add	r2, r7
 80218a2:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 80218a6:	ea8c 0705 	eor.w	r7, ip, r5
 80218aa:	4017      	ands	r7, r2
 80218ac:	ea87 070c 	eor.w	r7, r7, ip
 80218b0:	694e      	ldr	r6, [r1, #20]
 80218b2:	9603      	str	r6, [sp, #12]
 80218b4:	4437      	add	r7, r6
 80218b6:	441f      	add	r7, r3
 80218b8:	4bc4      	ldr	r3, [pc, #784]	@ (8021bcc <mg_md5_transform+0x3b4>)
 80218ba:	443b      	add	r3, r7
 80218bc:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 80218c0:	ea85 0702 	eor.w	r7, r5, r2
 80218c4:	401f      	ands	r7, r3
 80218c6:	406f      	eors	r7, r5
 80218c8:	698e      	ldr	r6, [r1, #24]
 80218ca:	9604      	str	r6, [sp, #16]
 80218cc:	4437      	add	r7, r6
 80218ce:	eb0c 0607 	add.w	r6, ip, r7
 80218d2:	4fbf      	ldr	r7, [pc, #764]	@ (8021bd0 <mg_md5_transform+0x3b8>)
 80218d4:	4437      	add	r7, r6
 80218d6:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 80218da:	ea82 0603 	eor.w	r6, r2, r3
 80218de:	ea06 060c 	and.w	r6, r6, ip
 80218e2:	4056      	eors	r6, r2
 80218e4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80218e8:	444e      	add	r6, r9
 80218ea:	4435      	add	r5, r6
 80218ec:	4fb9      	ldr	r7, [pc, #740]	@ (8021bd4 <mg_md5_transform+0x3bc>)
 80218ee:	442f      	add	r7, r5
 80218f0:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 80218f4:	ea83 050c 	eor.w	r5, r3, ip
 80218f8:	403d      	ands	r5, r7
 80218fa:	405d      	eors	r5, r3
 80218fc:	6a0e      	ldr	r6, [r1, #32]
 80218fe:	9605      	str	r6, [sp, #20]
 8021900:	4435      	add	r5, r6
 8021902:	442a      	add	r2, r5
 8021904:	4eb4      	ldr	r6, [pc, #720]	@ (8021bd8 <mg_md5_transform+0x3c0>)
 8021906:	4416      	add	r6, r2
 8021908:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802190c:	ea8c 0207 	eor.w	r2, ip, r7
 8021910:	4032      	ands	r2, r6
 8021912:	ea82 020c 	eor.w	r2, r2, ip
 8021916:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8021918:	9506      	str	r5, [sp, #24]
 802191a:	442a      	add	r2, r5
 802191c:	4413      	add	r3, r2
 802191e:	4daf      	ldr	r5, [pc, #700]	@ (8021bdc <mg_md5_transform+0x3c4>)
 8021920:	441d      	add	r5, r3
 8021922:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8021926:	ea87 0306 	eor.w	r3, r7, r6
 802192a:	402b      	ands	r3, r5
 802192c:	407b      	eors	r3, r7
 802192e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8021930:	9207      	str	r2, [sp, #28]
 8021932:	4413      	add	r3, r2
 8021934:	4463      	add	r3, ip
 8021936:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802193a:	3b4f      	subs	r3, #79	@ 0x4f
 802193c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8021940:	ea86 0c05 	eor.w	ip, r6, r5
 8021944:	ea0c 0c03 	and.w	ip, ip, r3
 8021948:	ea8c 0c06 	eor.w	ip, ip, r6
 802194c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802194e:	9208      	str	r2, [sp, #32]
 8021950:	4494      	add	ip, r2
 8021952:	4467      	add	r7, ip
 8021954:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8021c00 <mg_md5_transform+0x3e8>
 8021958:	44be      	add	lr, r7
 802195a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802195e:	ea85 0c03 	eor.w	ip, r5, r3
 8021962:	ea0c 0c0e 	and.w	ip, ip, lr
 8021966:	ea8c 0c05 	eor.w	ip, ip, r5
 802196a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 802196c:	44bc      	add	ip, r7
 802196e:	4466      	add	r6, ip
 8021970:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8021c04 <mg_md5_transform+0x3ec>
 8021974:	44b4      	add	ip, r6
 8021976:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 802197a:	ea83 080e 	eor.w	r8, r3, lr
 802197e:	ea08 080c 	and.w	r8, r8, ip
 8021982:	ea88 0803 	eor.w	r8, r8, r3
 8021986:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8021988:	44b0      	add	r8, r6
 802198a:	44a8      	add	r8, r5
 802198c:	4d94      	ldr	r5, [pc, #592]	@ (8021be0 <mg_md5_transform+0x3c8>)
 802198e:	4445      	add	r5, r8
 8021990:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8021994:	ea8e 0b0c 	eor.w	fp, lr, ip
 8021998:	ea0b 0b05 	and.w	fp, fp, r5
 802199c:	ea8b 0b0e 	eor.w	fp, fp, lr
 80219a0:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 80219a4:	44c3      	add	fp, r8
 80219a6:	449b      	add	fp, r3
 80219a8:	4b8e      	ldr	r3, [pc, #568]	@ (8021be4 <mg_md5_transform+0x3cc>)
 80219aa:	445b      	add	r3, fp
 80219ac:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 80219b0:	ea8c 0b05 	eor.w	fp, ip, r5
 80219b4:	ea0b 0b03 	and.w	fp, fp, r3
 80219b8:	ea8b 0b0c 	eor.w	fp, fp, ip
 80219bc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80219be:	9109      	str	r1, [sp, #36]	@ 0x24
 80219c0:	448b      	add	fp, r1
 80219c2:	44f3      	add	fp, lr
 80219c4:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8021c08 <mg_md5_transform+0x3f0>
 80219c8:	44de      	add	lr, fp
 80219ca:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 80219ce:	ea83 0b0e 	eor.w	fp, r3, lr
 80219d2:	ea0b 0b05 	and.w	fp, fp, r5
 80219d6:	ea8b 0b03 	eor.w	fp, fp, r3
 80219da:	9a01      	ldr	r2, [sp, #4]
 80219dc:	4493      	add	fp, r2
 80219de:	44e3      	add	fp, ip
 80219e0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8021c0c <mg_md5_transform+0x3f4>
 80219e4:	44dc      	add	ip, fp
 80219e6:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 80219ea:	ea8e 0b0c 	eor.w	fp, lr, ip
 80219ee:	ea0b 0b03 	and.w	fp, fp, r3
 80219f2:	ea8b 0b0e 	eor.w	fp, fp, lr
 80219f6:	9a04      	ldr	r2, [sp, #16]
 80219f8:	4493      	add	fp, r2
 80219fa:	44ab      	add	fp, r5
 80219fc:	4d7a      	ldr	r5, [pc, #488]	@ (8021be8 <mg_md5_transform+0x3d0>)
 80219fe:	445d      	add	r5, fp
 8021a00:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8021a04:	ea8c 0b05 	eor.w	fp, ip, r5
 8021a08:	ea0b 0b0e 	and.w	fp, fp, lr
 8021a0c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021a10:	9908      	ldr	r1, [sp, #32]
 8021a12:	448b      	add	fp, r1
 8021a14:	445b      	add	r3, fp
 8021a16:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8021c10 <mg_md5_transform+0x3f8>
 8021a1a:	449b      	add	fp, r3
 8021a1c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8021a20:	ea85 030b 	eor.w	r3, r5, fp
 8021a24:	ea03 030c 	and.w	r3, r3, ip
 8021a28:	406b      	eors	r3, r5
 8021a2a:	4453      	add	r3, sl
 8021a2c:	4473      	add	r3, lr
 8021a2e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8021c14 <mg_md5_transform+0x3fc>
 8021a32:	449e      	add	lr, r3
 8021a34:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8021a38:	ea8b 030e 	eor.w	r3, fp, lr
 8021a3c:	402b      	ands	r3, r5
 8021a3e:	ea83 030b 	eor.w	r3, r3, fp
 8021a42:	9a03      	ldr	r2, [sp, #12]
 8021a44:	4413      	add	r3, r2
 8021a46:	449c      	add	ip, r3
 8021a48:	4b68      	ldr	r3, [pc, #416]	@ (8021bec <mg_md5_transform+0x3d4>)
 8021a4a:	4463      	add	r3, ip
 8021a4c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8021a50:	ea8e 0c03 	eor.w	ip, lr, r3
 8021a54:	ea0c 0c0b 	and.w	ip, ip, fp
 8021a58:	ea8c 0c0e 	eor.w	ip, ip, lr
 8021a5c:	9a07      	ldr	r2, [sp, #28]
 8021a5e:	4494      	add	ip, r2
 8021a60:	4465      	add	r5, ip
 8021a62:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021c18 <mg_md5_transform+0x400>
 8021a66:	44ac      	add	ip, r5
 8021a68:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 8021a6c:	ea83 050c 	eor.w	r5, r3, ip
 8021a70:	ea05 050e 	and.w	r5, r5, lr
 8021a74:	405d      	eors	r5, r3
 8021a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021a78:	440d      	add	r5, r1
 8021a7a:	445d      	add	r5, fp
 8021a7c:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8021c1c <mg_md5_transform+0x404>
 8021a80:	44ab      	add	fp, r5
 8021a82:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8021a86:	ea8c 050b 	eor.w	r5, ip, fp
 8021a8a:	401d      	ands	r5, r3
 8021a8c:	ea85 050c 	eor.w	r5, r5, ip
 8021a90:	9a02      	ldr	r2, [sp, #8]
 8021a92:	4415      	add	r5, r2
 8021a94:	44ae      	add	lr, r5
 8021a96:	4d56      	ldr	r5, [pc, #344]	@ (8021bf0 <mg_md5_transform+0x3d8>)
 8021a98:	4475      	add	r5, lr
 8021a9a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8021a9e:	ea8b 0e05 	eor.w	lr, fp, r5
 8021aa2:	ea0e 0e0c 	and.w	lr, lr, ip
 8021aa6:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021aaa:	9906      	ldr	r1, [sp, #24]
 8021aac:	448e      	add	lr, r1
 8021aae:	4473      	add	r3, lr
 8021ab0:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8021c20 <mg_md5_transform+0x408>
 8021ab4:	449e      	add	lr, r3
 8021ab6:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8021aba:	ea85 030e 	eor.w	r3, r5, lr
 8021abe:	ea03 030b 	and.w	r3, r3, fp
 8021ac2:	406b      	eors	r3, r5
 8021ac4:	4443      	add	r3, r8
 8021ac6:	4463      	add	r3, ip
 8021ac8:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8021c24 <mg_md5_transform+0x40c>
 8021acc:	449c      	add	ip, r3
 8021ace:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8021ad2:	ea8e 030c 	eor.w	r3, lr, ip
 8021ad6:	402b      	ands	r3, r5
 8021ad8:	ea83 030e 	eor.w	r3, r3, lr
 8021adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ade:	4413      	add	r3, r2
 8021ae0:	449b      	add	fp, r3
 8021ae2:	4b44      	ldr	r3, [pc, #272]	@ (8021bf4 <mg_md5_transform+0x3dc>)
 8021ae4:	445b      	add	r3, fp
 8021ae6:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8021aea:	ea8c 0b03 	eor.w	fp, ip, r3
 8021aee:	ea0b 0b0e 	and.w	fp, fp, lr
 8021af2:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021af6:	9905      	ldr	r1, [sp, #20]
 8021af8:	448b      	add	fp, r1
 8021afa:	445d      	add	r5, fp
 8021afc:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8021c28 <mg_md5_transform+0x410>
 8021b00:	44ab      	add	fp, r5
 8021b02:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8021b06:	ea83 050b 	eor.w	r5, r3, fp
 8021b0a:	ea05 050c 	and.w	r5, r5, ip
 8021b0e:	405d      	eors	r5, r3
 8021b10:	4435      	add	r5, r6
 8021b12:	4475      	add	r5, lr
 8021b14:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8021c2c <mg_md5_transform+0x414>
 8021b18:	44ae      	add	lr, r5
 8021b1a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8021b1e:	ea8b 050e 	eor.w	r5, fp, lr
 8021b22:	401d      	ands	r5, r3
 8021b24:	ea85 050b 	eor.w	r5, r5, fp
 8021b28:	4425      	add	r5, r4
 8021b2a:	44ac      	add	ip, r5
 8021b2c:	4d32      	ldr	r5, [pc, #200]	@ (8021bf8 <mg_md5_transform+0x3e0>)
 8021b2e:	4465      	add	r5, ip
 8021b30:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8021b34:	ea8e 0c05 	eor.w	ip, lr, r5
 8021b38:	ea0c 0c0b 	and.w	ip, ip, fp
 8021b3c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8021b40:	44cc      	add	ip, r9
 8021b42:	4463      	add	r3, ip
 8021b44:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8021c30 <mg_md5_transform+0x418>
 8021b48:	449c      	add	ip, r3
 8021b4a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8021b4e:	ea85 030c 	eor.w	r3, r5, ip
 8021b52:	ea03 030e 	and.w	r3, r3, lr
 8021b56:	406b      	eors	r3, r5
 8021b58:	443b      	add	r3, r7
 8021b5a:	445b      	add	r3, fp
 8021b5c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8021c34 <mg_md5_transform+0x41c>
 8021b60:	449b      	add	fp, r3
 8021b62:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8021b66:	ea8c 030b 	eor.w	r3, ip, fp
 8021b6a:	406b      	eors	r3, r5
 8021b6c:	9a03      	ldr	r2, [sp, #12]
 8021b6e:	4413      	add	r3, r2
 8021b70:	4473      	add	r3, lr
 8021b72:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8021b76:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 8021b7a:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 8021b7e:	ea8b 0e03 	eor.w	lr, fp, r3
 8021b82:	ea8e 0e0c 	eor.w	lr, lr, ip
 8021b86:	448e      	add	lr, r1
 8021b88:	44ae      	add	lr, r5
 8021b8a:	4d1c      	ldr	r5, [pc, #112]	@ (8021bfc <mg_md5_transform+0x3e4>)
 8021b8c:	4475      	add	r5, lr
 8021b8e:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8021b92:	ea83 0e05 	eor.w	lr, r3, r5
 8021b96:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021b9a:	9908      	ldr	r1, [sp, #32]
 8021b9c:	448e      	add	lr, r1
 8021b9e:	44f4      	add	ip, lr
 8021ba0:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8021c38 <mg_md5_transform+0x420>
 8021ba4:	44e6      	add	lr, ip
 8021ba6:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 8021baa:	ea85 0c0e 	eor.w	ip, r5, lr
 8021bae:	ea8c 0c03 	eor.w	ip, ip, r3
 8021bb2:	44c4      	add	ip, r8
 8021bb4:	44e3      	add	fp, ip
 8021bb6:	e041      	b.n	8021c3c <mg_md5_transform+0x424>
 8021bb8:	d76aa478 	.word	0xd76aa478
 8021bbc:	e8c7b756 	.word	0xe8c7b756
 8021bc0:	242070db 	.word	0x242070db
 8021bc4:	c1bdceee 	.word	0xc1bdceee
 8021bc8:	f57c0faf 	.word	0xf57c0faf
 8021bcc:	4787c62a 	.word	0x4787c62a
 8021bd0:	a8304613 	.word	0xa8304613
 8021bd4:	fd469501 	.word	0xfd469501
 8021bd8:	698098d8 	.word	0x698098d8
 8021bdc:	8b44f7af 	.word	0x8b44f7af
 8021be0:	fd987193 	.word	0xfd987193
 8021be4:	a679438e 	.word	0xa679438e
 8021be8:	c040b340 	.word	0xc040b340
 8021bec:	d62f105d 	.word	0xd62f105d
 8021bf0:	e7d3fbc8 	.word	0xe7d3fbc8
 8021bf4:	f4d50d87 	.word	0xf4d50d87
 8021bf8:	fcefa3f8 	.word	0xfcefa3f8
 8021bfc:	8771f681 	.word	0x8771f681
 8021c00:	895cd7be 	.word	0x895cd7be
 8021c04:	6b901122 	.word	0x6b901122
 8021c08:	49b40821 	.word	0x49b40821
 8021c0c:	f61e2562 	.word	0xf61e2562
 8021c10:	265e5a51 	.word	0x265e5a51
 8021c14:	e9b6c7aa 	.word	0xe9b6c7aa
 8021c18:	02441453 	.word	0x02441453
 8021c1c:	d8a1e681 	.word	0xd8a1e681
 8021c20:	21e1cde6 	.word	0x21e1cde6
 8021c24:	c33707d6 	.word	0xc33707d6
 8021c28:	455a14ed 	.word	0x455a14ed
 8021c2c:	a9e3e905 	.word	0xa9e3e905
 8021c30:	676f02d9 	.word	0x676f02d9
 8021c34:	8d2a4c8a 	.word	0x8d2a4c8a
 8021c38:	6d9d6122 	.word	0x6d9d6122
 8021c3c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8021f04 <mg_md5_transform+0x6ec>
 8021c40:	44dc      	add	ip, fp
 8021c42:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8021c46:	ea8e 0b0c 	eor.w	fp, lr, ip
 8021c4a:	ea8b 0b05 	eor.w	fp, fp, r5
 8021c4e:	9a01      	ldr	r2, [sp, #4]
 8021c50:	4493      	add	fp, r2
 8021c52:	449b      	add	fp, r3
 8021c54:	4b99      	ldr	r3, [pc, #612]	@ (8021ebc <mg_md5_transform+0x6a4>)
 8021c56:	445b      	add	r3, fp
 8021c58:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 8021c5c:	ea8c 0b03 	eor.w	fp, ip, r3
 8021c60:	ea8b 0b0e 	eor.w	fp, fp, lr
 8021c64:	9a02      	ldr	r2, [sp, #8]
 8021c66:	4493      	add	fp, r2
 8021c68:	445d      	add	r5, fp
 8021c6a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8021f08 <mg_md5_transform+0x6f0>
 8021c6e:	44ab      	add	fp, r5
 8021c70:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8021c74:	ea83 050b 	eor.w	r5, r3, fp
 8021c78:	ea85 050c 	eor.w	r5, r5, ip
 8021c7c:	444d      	add	r5, r9
 8021c7e:	44ae      	add	lr, r5
 8021c80:	4d8f      	ldr	r5, [pc, #572]	@ (8021ec0 <mg_md5_transform+0x6a8>)
 8021c82:	4475      	add	r5, lr
 8021c84:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8021c88:	ea8b 0e05 	eor.w	lr, fp, r5
 8021c8c:	ea8e 0e03 	eor.w	lr, lr, r3
 8021c90:	9a07      	ldr	r2, [sp, #28]
 8021c92:	4496      	add	lr, r2
 8021c94:	44e6      	add	lr, ip
 8021c96:	f8df c274 	ldr.w	ip, [pc, #628]	@ 8021f0c <mg_md5_transform+0x6f4>
 8021c9a:	44f4      	add	ip, lr
 8021c9c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8021ca0:	ea85 0e0c 	eor.w	lr, r5, ip
 8021ca4:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021ca8:	44b6      	add	lr, r6
 8021caa:	4473      	add	r3, lr
 8021cac:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8021f10 <mg_md5_transform+0x6f8>
 8021cb0:	449e      	add	lr, r3
 8021cb2:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8021cb6:	ea8c 030e 	eor.w	r3, ip, lr
 8021cba:	406b      	eors	r3, r5
 8021cbc:	4453      	add	r3, sl
 8021cbe:	449b      	add	fp, r3
 8021cc0:	4b80      	ldr	r3, [pc, #512]	@ (8021ec4 <mg_md5_transform+0x6ac>)
 8021cc2:	445b      	add	r3, fp
 8021cc4:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8021cc8:	ea8e 0b03 	eor.w	fp, lr, r3
 8021ccc:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021cd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cd2:	4493      	add	fp, r2
 8021cd4:	445d      	add	r5, fp
 8021cd6:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8021f14 <mg_md5_transform+0x6fc>
 8021cda:	44ab      	add	fp, r5
 8021cdc:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8021ce0:	ea83 050b 	eor.w	r5, r3, fp
 8021ce4:	ea85 050e 	eor.w	r5, r5, lr
 8021ce8:	9904      	ldr	r1, [sp, #16]
 8021cea:	440d      	add	r5, r1
 8021cec:	4465      	add	r5, ip
 8021cee:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8021f18 <mg_md5_transform+0x700>
 8021cf2:	44ac      	add	ip, r5
 8021cf4:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8021cf8:	ea8b 050c 	eor.w	r5, fp, ip
 8021cfc:	405d      	eors	r5, r3
 8021cfe:	9906      	ldr	r1, [sp, #24]
 8021d00:	440d      	add	r5, r1
 8021d02:	44ae      	add	lr, r5
 8021d04:	4d70      	ldr	r5, [pc, #448]	@ (8021ec8 <mg_md5_transform+0x6b0>)
 8021d06:	4475      	add	r5, lr
 8021d08:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8021d0c:	ea8c 0e05 	eor.w	lr, ip, r5
 8021d10:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021d14:	44be      	add	lr, r7
 8021d16:	4473      	add	r3, lr
 8021d18:	f8df e200 	ldr.w	lr, [pc, #512]	@ 8021f1c <mg_md5_transform+0x704>
 8021d1c:	449e      	add	lr, r3
 8021d1e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8021d22:	ea85 030e 	eor.w	r3, r5, lr
 8021d26:	ea83 030c 	eor.w	r3, r3, ip
 8021d2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021d2c:	440b      	add	r3, r1
 8021d2e:	445b      	add	r3, fp
 8021d30:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8021f20 <mg_md5_transform+0x708>
 8021d34:	449b      	add	fp, r3
 8021d36:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 8021d3a:	ea8e 030b 	eor.w	r3, lr, fp
 8021d3e:	406b      	eors	r3, r5
 8021d40:	940a      	str	r4, [sp, #40]	@ 0x28
 8021d42:	4423      	add	r3, r4
 8021d44:	449c      	add	ip, r3
 8021d46:	4b61      	ldr	r3, [pc, #388]	@ (8021ecc <mg_md5_transform+0x6b4>)
 8021d48:	4463      	add	r3, ip
 8021d4a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 8021d4e:	ea63 0c0e 	orn	ip, r3, lr
 8021d52:	ea8c 0c0b 	eor.w	ip, ip, fp
 8021d56:	44e2      	add	sl, ip
 8021d58:	44aa      	add	sl, r5
 8021d5a:	4d5d      	ldr	r5, [pc, #372]	@ (8021ed0 <mg_md5_transform+0x6b8>)
 8021d5c:	4455      	add	r5, sl
 8021d5e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8021d62:	ea65 0c0b 	orn	ip, r5, fp
 8021d66:	ea8c 0c03 	eor.w	ip, ip, r3
 8021d6a:	44e1      	add	r9, ip
 8021d6c:	44f1      	add	r9, lr
 8021d6e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021f24 <mg_md5_transform+0x70c>
 8021d72:	44cc      	add	ip, r9
 8021d74:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8021d78:	ea6c 0e03 	orn	lr, ip, r3
 8021d7c:	ea8e 0e05 	eor.w	lr, lr, r5
 8021d80:	44f0      	add	r8, lr
 8021d82:	44d8      	add	r8, fp
 8021d84:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8021f28 <mg_md5_transform+0x710>
 8021d88:	44c6      	add	lr, r8
 8021d8a:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 8021d8e:	ea6e 0805 	orn	r8, lr, r5
 8021d92:	ea88 080c 	eor.w	r8, r8, ip
 8021d96:	9c03      	ldr	r4, [sp, #12]
 8021d98:	44a0      	add	r8, r4
 8021d9a:	4498      	add	r8, r3
 8021d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8021ed4 <mg_md5_transform+0x6bc>)
 8021d9e:	4443      	add	r3, r8
 8021da0:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8021da4:	ea63 080c 	orn	r8, r3, ip
 8021da8:	ea88 080e 	eor.w	r8, r8, lr
 8021dac:	4447      	add	r7, r8
 8021dae:	442f      	add	r7, r5
 8021db0:	4d49      	ldr	r5, [pc, #292]	@ (8021ed8 <mg_md5_transform+0x6c0>)
 8021db2:	443d      	add	r5, r7
 8021db4:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8021db8:	ea65 070e 	orn	r7, r5, lr
 8021dbc:	405f      	eors	r7, r3
 8021dbe:	4417      	add	r7, r2
 8021dc0:	44bc      	add	ip, r7
 8021dc2:	4f46      	ldr	r7, [pc, #280]	@ (8021edc <mg_md5_transform+0x6c4>)
 8021dc4:	4467      	add	r7, ip
 8021dc6:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8021dca:	ea67 0c03 	orn	ip, r7, r3
 8021dce:	ea8c 0c05 	eor.w	ip, ip, r5
 8021dd2:	9a07      	ldr	r2, [sp, #28]
 8021dd4:	4462      	add	r2, ip
 8021dd6:	4472      	add	r2, lr
 8021dd8:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8021ddc:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8021de0:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8021de4:	ea62 0c05 	orn	ip, r2, r5
 8021de8:	ea8c 0c07 	eor.w	ip, ip, r7
 8021dec:	9c01      	ldr	r4, [sp, #4]
 8021dee:	44a4      	add	ip, r4
 8021df0:	449c      	add	ip, r3
 8021df2:	4b3b      	ldr	r3, [pc, #236]	@ (8021ee0 <mg_md5_transform+0x6c8>)
 8021df4:	4463      	add	r3, ip
 8021df6:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8021dfa:	ea63 0c07 	orn	ip, r3, r7
 8021dfe:	ea8c 0c02 	eor.w	ip, ip, r2
 8021e02:	9905      	ldr	r1, [sp, #20]
 8021e04:	448c      	add	ip, r1
 8021e06:	44ac      	add	ip, r5
 8021e08:	4d36      	ldr	r5, [pc, #216]	@ (8021ee4 <mg_md5_transform+0x6cc>)
 8021e0a:	4465      	add	r5, ip
 8021e0c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8021e10:	ea65 0c02 	orn	ip, r5, r2
 8021e14:	ea8c 0c03 	eor.w	ip, ip, r3
 8021e18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021e1a:	4461      	add	r1, ip
 8021e1c:	440f      	add	r7, r1
 8021e1e:	4932      	ldr	r1, [pc, #200]	@ (8021ee8 <mg_md5_transform+0x6d0>)
 8021e20:	4439      	add	r1, r7
 8021e22:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8021e26:	ea61 0703 	orn	r7, r1, r3
 8021e2a:	406f      	eors	r7, r5
 8021e2c:	9c04      	ldr	r4, [sp, #16]
 8021e2e:	4427      	add	r7, r4
 8021e30:	4417      	add	r7, r2
 8021e32:	4a2e      	ldr	r2, [pc, #184]	@ (8021eec <mg_md5_transform+0x6d4>)
 8021e34:	443a      	add	r2, r7
 8021e36:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8021e3a:	ea62 0705 	orn	r7, r2, r5
 8021e3e:	404f      	eors	r7, r1
 8021e40:	443e      	add	r6, r7
 8021e42:	4433      	add	r3, r6
 8021e44:	4e2a      	ldr	r6, [pc, #168]	@ (8021ef0 <mg_md5_transform+0x6d8>)
 8021e46:	441e      	add	r6, r3
 8021e48:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8021e4c:	ea66 0301 	orn	r3, r6, r1
 8021e50:	4053      	eors	r3, r2
 8021e52:	9f02      	ldr	r7, [sp, #8]
 8021e54:	443b      	add	r3, r7
 8021e56:	441d      	add	r5, r3
 8021e58:	4b26      	ldr	r3, [pc, #152]	@ (8021ef4 <mg_md5_transform+0x6dc>)
 8021e5a:	442b      	add	r3, r5
 8021e5c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8021e60:	ea63 0502 	orn	r5, r3, r2
 8021e64:	4075      	eors	r5, r6
 8021e66:	9f08      	ldr	r7, [sp, #32]
 8021e68:	443d      	add	r5, r7
 8021e6a:	440d      	add	r5, r1
 8021e6c:	4922      	ldr	r1, [pc, #136]	@ (8021ef8 <mg_md5_transform+0x6e0>)
 8021e6e:	4429      	add	r1, r5
 8021e70:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8021e74:	ea61 0506 	orn	r5, r1, r6
 8021e78:	405d      	eors	r5, r3
 8021e7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021e7c:	4425      	add	r5, r4
 8021e7e:	442a      	add	r2, r5
 8021e80:	4d1e      	ldr	r5, [pc, #120]	@ (8021efc <mg_md5_transform+0x6e4>)
 8021e82:	4415      	add	r5, r2
 8021e84:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8021e88:	ea65 0203 	orn	r2, r5, r3
 8021e8c:	404a      	eors	r2, r1
 8021e8e:	9c06      	ldr	r4, [sp, #24]
 8021e90:	4422      	add	r2, r4
 8021e92:	4432      	add	r2, r6
 8021e94:	4e1a      	ldr	r6, [pc, #104]	@ (8021f00 <mg_md5_transform+0x6e8>)
 8021e96:	4416      	add	r6, r2
 8021e98:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 8021e9c:	6802      	ldr	r2, [r0, #0]
 8021e9e:	4413      	add	r3, r2
 8021ea0:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8021ea2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021ea4:	4434      	add	r4, r6
 8021ea6:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8021ea8:	6883      	ldr	r3, [r0, #8]
 8021eaa:	441d      	add	r5, r3
 8021eac:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 8021eae:	68c3      	ldr	r3, [r0, #12]
 8021eb0:	4419      	add	r1, r3
 8021eb2:	60c1      	str	r1, [r0, #12]
}
 8021eb4:	b00d      	add	sp, #52	@ 0x34
 8021eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eba:	bf00      	nop
 8021ebc:	a4beea44 	.word	0xa4beea44
 8021ec0:	f6bb4b60 	.word	0xf6bb4b60
 8021ec4:	eaa127fa 	.word	0xeaa127fa
 8021ec8:	d9d4d039 	.word	0xd9d4d039
 8021ecc:	c4ac5665 	.word	0xc4ac5665
 8021ed0:	f4292244 	.word	0xf4292244
 8021ed4:	fc93a039 	.word	0xfc93a039
 8021ed8:	655b59c3 	.word	0x655b59c3
 8021edc:	8f0ccc92 	.word	0x8f0ccc92
 8021ee0:	85845dd1 	.word	0x85845dd1
 8021ee4:	6fa87e4f 	.word	0x6fa87e4f
 8021ee8:	fe2ce6e0 	.word	0xfe2ce6e0
 8021eec:	a3014314 	.word	0xa3014314
 8021ef0:	4e0811a1 	.word	0x4e0811a1
 8021ef4:	f7537e82 	.word	0xf7537e82
 8021ef8:	bd3af235 	.word	0xbd3af235
 8021efc:	2ad7d2bb 	.word	0x2ad7d2bb
 8021f00:	eb86d391 	.word	0xeb86d391
 8021f04:	fde5380c 	.word	0xfde5380c
 8021f08:	4bdecfa9 	.word	0x4bdecfa9
 8021f0c:	bebfbc70 	.word	0xbebfbc70
 8021f10:	289b7ec6 	.word	0x289b7ec6
 8021f14:	d4ef3085 	.word	0xd4ef3085
 8021f18:	04881d05 	.word	0x04881d05
 8021f1c:	e6db99e5 	.word	0xe6db99e5
 8021f20:	1fa27cf8 	.word	0x1fa27cf8
 8021f24:	432aff97 	.word	0x432aff97
 8021f28:	ab9423a7 	.word	0xab9423a7

08021f2c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 8021f2c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 8021f2e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8021f30:	3001      	adds	r0, #1
 8021f32:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8021f34:	2a7f      	cmp	r2, #127	@ 0x7f
 8021f36:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 8021f3a:	d8f9      	bhi.n	8021f30 <varint_size+0x4>
  return bytes_needed;
}
 8021f3c:	4770      	bx	lr

08021f3e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8021f3e:	b500      	push	{lr}
 8021f40:	4686      	mov	lr, r0
  size_t len = 0;
 8021f42:	2300      	movs	r3, #0
 8021f44:	e007      	b.n	8021f56 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8021f46:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 8021f4a:	1c58      	adds	r0, r3, #1
 8021f4c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8021f50:	2a7f      	cmp	r2, #127	@ 0x7f
 8021f52:	d907      	bls.n	8021f64 <encode_varint+0x26>
    buf[len++] = b;
 8021f54:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8021f56:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 8021f5a:	460a      	mov	r2, r1
 8021f5c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 8021f5e:	2a7f      	cmp	r2, #127	@ 0x7f
 8021f60:	d9f3      	bls.n	8021f4a <encode_varint+0xc>
 8021f62:	e7f0      	b.n	8021f46 <encode_varint+0x8>

  return len;
}
 8021f64:	f85d fb04 	ldr.w	pc, [sp], #4

08021f68 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8021f68:	2300      	movs	r3, #0
 8021f6a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 8021f6c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021f70:	2b03      	cmp	r3, #3
 8021f72:	d81d      	bhi.n	8021fb0 <decode_varint+0x48>
 8021f74:	428b      	cmp	r3, r1
 8021f76:	d219      	bcs.n	8021fac <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8021f78:	b530      	push	{r4, r5, lr}
 8021f7a:	e003      	b.n	8021f84 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8021f7c:	1c58      	adds	r0, r3, #1
 8021f7e:	e012      	b.n	8021fa6 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021f80:	428b      	cmp	r3, r1
 8021f82:	d211      	bcs.n	8021fa8 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8021f84:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8021f88:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 8021f8c:	6815      	ldr	r5, [r2, #0]
 8021f8e:	fb0c 5404 	mla	r4, ip, r4, r5
 8021f92:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8021f94:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8021f98:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 8021f9c:	d0ee      	beq.n	8021f7c <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021f9e:	3301      	adds	r3, #1
 8021fa0:	2b03      	cmp	r3, #3
 8021fa2:	d9ed      	bls.n	8021f80 <decode_varint+0x18>
  }

  return 0;
 8021fa4:	2000      	movs	r0, #0
}
 8021fa6:	bd30      	pop	{r4, r5, pc}
  return 0;
 8021fa8:	2000      	movs	r0, #0
 8021faa:	e7fc      	b.n	8021fa6 <decode_varint+0x3e>
 8021fac:	2000      	movs	r0, #0
 8021fae:	4770      	bx	lr
 8021fb0:	2000      	movs	r0, #0
}
 8021fb2:	4770      	bx	lr

08021fb4 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	2b1a      	cmp	r3, #26
 8021fb8:	d80b      	bhi.n	8021fd2 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021fba:	4a07      	ldr	r2, [pc, #28]	@ (8021fd8 <mqtt_prop_type_by_id+0x24>)
 8021fbc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8021fc0:	4282      	cmp	r2, r0
 8021fc2:	d001      	beq.n	8021fc8 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8021fc4:	3301      	adds	r3, #1
 8021fc6:	e7f6      	b.n	8021fb6 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021fc8:	4a03      	ldr	r2, [pc, #12]	@ (8021fd8 <mqtt_prop_type_by_id+0x24>)
 8021fca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021fce:	7858      	ldrb	r0, [r3, #1]
 8021fd0:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8021fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8021fd6:	4770      	bx	lr
 8021fd8:	0803cd80 	.word	0x0803cd80

08021fdc <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 8021fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021fe0:	4606      	mov	r6, r0
 8021fe2:	4688      	mov	r8, r1
  size_t i, size = 0;
 8021fe4:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8021fe6:	462c      	mov	r4, r5
 8021fe8:	e005      	b.n	8021ff6 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8021fea:	697d      	ldr	r5, [r7, #20]
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	441d      	add	r5, r3
 8021ff0:	444d      	add	r5, r9
 8021ff2:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8021ff4:	3401      	adds	r4, #1
 8021ff6:	4544      	cmp	r4, r8
 8021ff8:	d231      	bcs.n	802205e <get_properties_length+0x82>
    size++;  // identifier
 8021ffa:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8021ffe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8022002:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8022006:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 802200a:	f7ff ffd3 	bl	8021fb4 <mqtt_prop_type_by_id>
 802200e:	2806      	cmp	r0, #6
 8022010:	d824      	bhi.n	802205c <get_properties_length+0x80>
 8022012:	a301      	add	r3, pc, #4	@ (adr r3, 8022018 <get_properties_length+0x3c>)
 8022014:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022018:	08022059 	.word	0x08022059
 802201c:	08022035 	.word	0x08022035
 8022020:	08021feb 	.word	0x08021feb
 8022024:	0802203d 	.word	0x0802203d
 8022028:	08022045 	.word	0x08022045
 802202c:	08022051 	.word	0x08022051
 8022030:	08022055 	.word	0x08022055
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8022034:	697d      	ldr	r5, [r7, #20]
 8022036:	444d      	add	r5, r9
 8022038:	3502      	adds	r5, #2
        break;
 802203a:	e7db      	b.n	8021ff4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802203c:	697d      	ldr	r5, [r7, #20]
 802203e:	444d      	add	r5, r9
 8022040:	3502      	adds	r5, #2
        break;
 8022042:	e7d7      	b.n	8021ff4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8022044:	6878      	ldr	r0, [r7, #4]
 8022046:	f7ff ff71 	bl	8021f2c <varint_size>
 802204a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802204e:	e7d1      	b.n	8021ff4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8022050:	3505      	adds	r5, #5
        break;
 8022052:	e7cf      	b.n	8021ff4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8022054:	3503      	adds	r5, #3
        break;
 8022056:	e7cd      	b.n	8021ff4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8022058:	3502      	adds	r5, #2
        break;
 802205a:	e7cb      	b.n	8021ff4 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802205c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802205e:	4628      	mov	r0, r5
 8022060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08022064 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8022064:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8022066:	f7ff ffb9 	bl	8021fdc <get_properties_length>
 802206a:	4604      	mov	r4, r0
  size += varint_size(size);
 802206c:	f7ff ff5e 	bl	8021f2c <varint_size>
  return size;
}
 8022070:	4420      	add	r0, r4
 8022072:	bd10      	pop	{r4, pc}

08022074 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8022074:	b410      	push	{r4}
 8022076:	b085      	sub	sp, #20
 8022078:	466b      	mov	r3, sp
 802207a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 802207e:	2300      	movs	r3, #0
 8022080:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8022082:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8022084:	9901      	ldr	r1, [sp, #4]
 8022086:	4299      	cmp	r1, r3
 8022088:	d92c      	bls.n	80220e4 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802208a:	9c00      	ldr	r4, [sp, #0]
 802208c:	5ce1      	ldrb	r1, [r4, r3]
 802208e:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8022092:	b2c0      	uxtb	r0, r0
 8022094:	2809      	cmp	r0, #9
 8022096:	d812      	bhi.n	80220be <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8022098:	f10c 0010 	add.w	r0, ip, #16
 802209c:	4468      	add	r0, sp
 802209e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 80220a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80220a6:	3930      	subs	r1, #48	@ 0x30
 80220a8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 80220ac:	29ff      	cmp	r1, #255	@ 0xff
 80220ae:	dc28      	bgt.n	8022102 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 80220b0:	f10c 0010 	add.w	r0, ip, #16
 80220b4:	4468      	add	r0, sp
 80220b6:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 80220ba:	3301      	adds	r3, #1
 80220bc:	e7e2      	b.n	8022084 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 80220be:	292e      	cmp	r1, #46	@ 0x2e
 80220c0:	d121      	bne.n	8022106 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80220c2:	f1bc 0f02 	cmp.w	ip, #2
 80220c6:	d820      	bhi.n	802210a <mg_aton4+0x96>
 80220c8:	b923      	cbnz	r3, 80220d4 <mg_aton4+0x60>
 80220ca:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 80220cc:	b005      	add	sp, #20
 80220ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220d2:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80220d4:	441c      	add	r4, r3
 80220d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80220da:	292e      	cmp	r1, #46	@ 0x2e
 80220dc:	d017      	beq.n	802210e <mg_aton4+0x9a>
      num_dots++;
 80220de:	f10c 0c01 	add.w	ip, ip, #1
 80220e2:	e7ea      	b.n	80220ba <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80220e4:	f1bc 0f03 	cmp.w	ip, #3
 80220e8:	d113      	bne.n	8022112 <mg_aton4+0x9e>
 80220ea:	9900      	ldr	r1, [sp, #0]
 80220ec:	4419      	add	r1, r3
 80220ee:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80220f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80220f4:	d00f      	beq.n	8022116 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 80220f6:	9b03      	ldr	r3, [sp, #12]
 80220f8:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 80220fa:	2300      	movs	r3, #0
 80220fc:	74d3      	strb	r3, [r2, #19]
  return true;
 80220fe:	2001      	movs	r0, #1
 8022100:	e7e4      	b.n	80220cc <mg_aton4+0x58>
      if (octet > 255) return false;
 8022102:	2000      	movs	r0, #0
 8022104:	e7e2      	b.n	80220cc <mg_aton4+0x58>
      return false;
 8022106:	2000      	movs	r0, #0
 8022108:	e7e0      	b.n	80220cc <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802210a:	2000      	movs	r0, #0
 802210c:	e7de      	b.n	80220cc <mg_aton4+0x58>
 802210e:	2000      	movs	r0, #0
 8022110:	e7dc      	b.n	80220cc <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8022112:	2000      	movs	r0, #0
 8022114:	e7da      	b.n	80220cc <mg_aton4+0x58>
 8022116:	2000      	movs	r0, #0
 8022118:	e7d8      	b.n	80220cc <mg_aton4+0x58>

0802211a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802211a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802211c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802211e:	b103      	cbz	r3, 8022122 <mg_tcpip_call+0x8>
 8022120:	4798      	blx	r3
}
 8022122:	bd08      	pop	{r3, pc}

08022124 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8022124:	2300      	movs	r3, #0
 8022126:	e005      	b.n	8022134 <csumup+0x10>
 8022128:	f811 c003 	ldrb.w	ip, [r1, r3]
 802212c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8022130:	4460      	add	r0, ip
 8022132:	3301      	adds	r3, #1
 8022134:	4293      	cmp	r3, r2
 8022136:	d205      	bcs.n	8022144 <csumup+0x20>
 8022138:	f013 0f01 	tst.w	r3, #1
 802213c:	d0f4      	beq.n	8022128 <csumup+0x4>
 802213e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8022142:	e7f5      	b.n	8022130 <csumup+0xc>
  return sum;
}
 8022144:	4770      	bx	lr

08022146 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8022146:	b538      	push	{r3, r4, r5, lr}
 8022148:	4604      	mov	r4, r0
 802214a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802214c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802214e:	685b      	ldr	r3, [r3, #4]
 8022150:	4602      	mov	r2, r0
 8022152:	6940      	ldr	r0, [r0, #20]
 8022154:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8022156:	4285      	cmp	r5, r0
 8022158:	d000      	beq.n	802215c <ether_output+0x16>
  return n;
}
 802215a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802215c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802215e:	3301      	adds	r3, #1
 8022160:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8022162:	e7fa      	b.n	802215a <ether_output+0x14>

08022164 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8022164:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8022168:	f013 0f28 	tst.w	r3, #40	@ 0x28
 802216c:	d106      	bne.n	802217c <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 802216e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8022170:	b132      	cbz	r2, 8022180 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8022172:	f013 0f90 	tst.w	r3, #144	@ 0x90
 8022176:	d005      	beq.n	8022184 <can_write+0x20>
 8022178:	2000      	movs	r0, #0
 802217a:	4770      	bx	lr
 802217c:	2000      	movs	r0, #0
 802217e:	4770      	bx	lr
 8022180:	2000      	movs	r0, #0
 8022182:	4770      	bx	lr
 8022184:	2001      	movs	r0, #1
}
 8022186:	4770      	bx	lr

08022188 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 8022188:	b410      	push	{r4}
 802218a:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 802218c:	460c      	mov	r4, r1
 802218e:	b109      	cbz	r1, 8022194 <mg_esc+0xc>
 8022190:	4b0b      	ldr	r3, [pc, #44]	@ (80221c0 <mg_esc+0x38>)
 8022192:	e007      	b.n	80221a4 <mg_esc+0x1c>
 8022194:	4b0b      	ldr	r3, [pc, #44]	@ (80221c4 <mg_esc+0x3c>)
 8022196:	e005      	b.n	80221a4 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8022198:	4a0a      	ldr	r2, [pc, #40]	@ (80221c4 <mg_esc+0x3c>)
 802219a:	1a9b      	subs	r3, r3, r2
 802219c:	4a08      	ldr	r2, [pc, #32]	@ (80221c0 <mg_esc+0x38>)
 802219e:	5cd0      	ldrb	r0, [r2, r3]
 80221a0:	e00a      	b.n	80221b8 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80221a2:	3301      	adds	r3, #1
 80221a4:	7818      	ldrb	r0, [r3, #0]
 80221a6:	b138      	cbz	r0, 80221b8 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80221a8:	4290      	cmp	r0, r2
 80221aa:	d1fa      	bne.n	80221a2 <mg_esc+0x1a>
 80221ac:	2c00      	cmp	r4, #0
 80221ae:	d0f3      	beq.n	8022198 <mg_esc+0x10>
 80221b0:	4a03      	ldr	r2, [pc, #12]	@ (80221c0 <mg_esc+0x38>)
 80221b2:	1a9b      	subs	r3, r3, r2
 80221b4:	4a03      	ldr	r2, [pc, #12]	@ (80221c4 <mg_esc+0x3c>)
 80221b6:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 80221b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80221bc:	4770      	bx	lr
 80221be:	bf00      	nop
 80221c0:	0803b9b8 	.word	0x0803b9b8
 80221c4:	0803b9c0 	.word	0x0803b9c0

080221c8 <mg_escape>:

static char mg_escape(int c) {
 80221c8:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 80221ca:	2101      	movs	r1, #1
 80221cc:	f7ff ffdc 	bl	8022188 <mg_esc>
}
 80221d0:	bd08      	pop	{r3, pc}

080221d2 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 80221d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221d6:	4607      	mov	r7, r0
 80221d8:	460e      	mov	r6, r1
 80221da:	4692      	mov	sl, r2
 80221dc:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 80221de:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80221e2:	465c      	mov	r4, fp
 80221e4:	e003      	b.n	80221ee <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 80221e6:	4631      	mov	r1, r6
 80221e8:	4628      	mov	r0, r5
 80221ea:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80221ec:	3401      	adds	r4, #1
 80221ee:	454c      	cmp	r4, r9
 80221f0:	d211      	bcs.n	8022216 <qcpy+0x44>
 80221f2:	f81a 5004 	ldrb.w	r5, [sl, r4]
 80221f6:	b175      	cbz	r5, 8022216 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 80221f8:	4628      	mov	r0, r5
 80221fa:	f7ff ffe5 	bl	80221c8 <mg_escape>
    if (c) {
 80221fe:	4680      	mov	r8, r0
 8022200:	2800      	cmp	r0, #0
 8022202:	d0f0      	beq.n	80221e6 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8022204:	4631      	mov	r1, r6
 8022206:	205c      	movs	r0, #92	@ 0x5c
 8022208:	47b8      	blx	r7
 802220a:	4631      	mov	r1, r6
 802220c:	4640      	mov	r0, r8
 802220e:	47b8      	blx	r7
 8022210:	f10b 0b01 	add.w	fp, fp, #1
 8022214:	e7ea      	b.n	80221ec <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8022216:	eb04 000b 	add.w	r0, r4, fp
 802221a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022220 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8022220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022224:	4607      	mov	r7, r0
 8022226:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8022228:	6811      	ldr	r1, [r2, #0]
 802222a:	1d0b      	adds	r3, r1, #4
 802222c:	6013      	str	r3, [r2, #0]
 802222e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8022232:	f101 0308 	add.w	r3, r1, #8
 8022236:	6013      	str	r3, [r2, #0]
 8022238:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 802223c:	2400      	movs	r4, #0
 802223e:	e00e      	b.n	802225e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8022240:	f818 3004 	ldrb.w	r3, [r8, r4]
 8022244:	091b      	lsrs	r3, r3, #4
 8022246:	4d09      	ldr	r5, [pc, #36]	@ (802226c <mg_print_hex+0x4c>)
 8022248:	4631      	mov	r1, r6
 802224a:	5ce8      	ldrb	r0, [r5, r3]
 802224c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 802224e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8022252:	f003 030f 	and.w	r3, r3, #15
 8022256:	4631      	mov	r1, r6
 8022258:	5ce8      	ldrb	r0, [r5, r3]
 802225a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 802225c:	3401      	adds	r4, #1
 802225e:	454c      	cmp	r4, r9
 8022260:	d3ee      	bcc.n	8022240 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8022262:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8022266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802226a:	bf00      	nop
 802226c:	0803b50c 	.word	0x0803b50c

08022270 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8022270:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8022272:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8022276:	ea4f 2332 	mov.w	r3, r2, ror #8
 802227a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 802227e:	ea4f 6232 	mov.w	r2, r2, ror #24
 8022282:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8022286:	ea43 0002 	orr.w	r0, r3, r2
 802228a:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 802228e:	4770      	bx	lr

08022290 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8022290:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8022294:	b2db      	uxtb	r3, r3
 8022296:	2b19      	cmp	r3, #25
 8022298:	d800      	bhi.n	802229c <mg_tolc+0xc>
 802229a:	3020      	adds	r0, #32
}
 802229c:	4770      	bx	lr

0802229e <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 802229e:	28ff      	cmp	r0, #255	@ 0xff
 80222a0:	bf8c      	ite	hi
 80222a2:	2000      	movhi	r0, #0
 80222a4:	2001      	movls	r0, #1
 80222a6:	4770      	bx	lr

080222a8 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80222a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222ac:	b082      	sub	sp, #8
 80222ae:	4605      	mov	r5, r0
 80222b0:	9e08      	ldr	r6, [sp, #32]
 80222b2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80222b4:	0a10      	lsrs	r0, r2, #8
 80222b6:	f88d 0004 	strb.w	r0, [sp, #4]
 80222ba:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80222be:	00c9      	lsls	r1, r1, #3
 80222c0:	b249      	sxtb	r1, r1
 80222c2:	4698      	mov	r8, r3
 80222c4:	b143      	cbz	r3, 80222d8 <w5500_txn+0x30>
 80222c6:	2304      	movs	r3, #4
 80222c8:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80222ca:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 80222ce:	686b      	ldr	r3, [r5, #4]
 80222d0:	6828      	ldr	r0, [r5, #0]
 80222d2:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 80222d4:	2400      	movs	r4, #0
 80222d6:	e00a      	b.n	80222ee <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80222d8:	2300      	movs	r3, #0
 80222da:	e7f5      	b.n	80222c8 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 80222dc:	68eb      	ldr	r3, [r5, #12]
 80222de:	f104 0208 	add.w	r2, r4, #8
 80222e2:	446a      	add	r2, sp
 80222e4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80222e8:	6828      	ldr	r0, [r5, #0]
 80222ea:	4798      	blx	r3
 80222ec:	3401      	adds	r4, #1
 80222ee:	2c02      	cmp	r4, #2
 80222f0:	d9f4      	bls.n	80222dc <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 80222f2:	2400      	movs	r4, #0
 80222f4:	e000      	b.n	80222f8 <w5500_txn+0x50>
 80222f6:	3401      	adds	r4, #1
 80222f8:	42bc      	cmp	r4, r7
 80222fa:	d208      	bcs.n	802230e <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 80222fc:	68eb      	ldr	r3, [r5, #12]
 80222fe:	5d31      	ldrb	r1, [r6, r4]
 8022300:	6828      	ldr	r0, [r5, #0]
 8022302:	4798      	blx	r3
    if (!wr) p[i] = r;
 8022304:	f1b8 0f00 	cmp.w	r8, #0
 8022308:	d1f5      	bne.n	80222f6 <w5500_txn+0x4e>
 802230a:	5530      	strb	r0, [r6, r4]
 802230c:	e7f3      	b.n	80222f6 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 802230e:	68ab      	ldr	r3, [r5, #8]
 8022310:	6828      	ldr	r0, [r5, #0]
 8022312:	4798      	blx	r3
}
 8022314:	b002      	add	sp, #8
 8022316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802231a <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 802231a:	b510      	push	{r4, lr}
 802231c:	b082      	sub	sp, #8
 802231e:	9c04      	ldr	r4, [sp, #16]
 8022320:	9401      	str	r4, [sp, #4]
 8022322:	9300      	str	r3, [sp, #0]
 8022324:	2301      	movs	r3, #1
 8022326:	f7ff ffbf 	bl	80222a8 <w5500_txn>
 802232a:	b002      	add	sp, #8
 802232c:	bd10      	pop	{r4, pc}

0802232e <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 802232e:	b500      	push	{lr}
 8022330:	b085      	sub	sp, #20
 8022332:	f88d 300f 	strb.w	r3, [sp, #15]
 8022336:	2301      	movs	r3, #1
 8022338:	9300      	str	r3, [sp, #0]
 802233a:	f10d 030f 	add.w	r3, sp, #15
 802233e:	f7ff ffec 	bl	802231a <w5500_wn>
 8022342:	b005      	add	sp, #20
 8022344:	f85d fb04 	ldr.w	pc, [sp], #4

08022348 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8022348:	b500      	push	{lr}
 802234a:	b085      	sub	sp, #20
 802234c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8022350:	f88d c00c 	strb.w	ip, [sp, #12]
 8022354:	f88d 300d 	strb.w	r3, [sp, #13]
 8022358:	2302      	movs	r3, #2
 802235a:	9300      	str	r3, [sp, #0]
 802235c:	ab03      	add	r3, sp, #12
 802235e:	f7ff ffdc 	bl	802231a <w5500_wn>
 8022362:	b005      	add	sp, #20
 8022364:	f85d fb04 	ldr.w	pc, [sp], #4

08022368 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8022368:	b510      	push	{r4, lr}
 802236a:	b082      	sub	sp, #8
 802236c:	9c04      	ldr	r4, [sp, #16]
 802236e:	9401      	str	r4, [sp, #4]
 8022370:	9300      	str	r3, [sp, #0]
 8022372:	2300      	movs	r3, #0
 8022374:	f7ff ff98 	bl	80222a8 <w5500_txn>
 8022378:	b002      	add	sp, #8
 802237a:	bd10      	pop	{r4, pc}

0802237c <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 802237c:	b500      	push	{lr}
 802237e:	b085      	sub	sp, #20
 8022380:	2300      	movs	r3, #0
 8022382:	f88d 300f 	strb.w	r3, [sp, #15]
 8022386:	2301      	movs	r3, #1
 8022388:	9300      	str	r3, [sp, #0]
 802238a:	f10d 030f 	add.w	r3, sp, #15
 802238e:	f7ff ffeb 	bl	8022368 <w5500_rn>
 8022392:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8022396:	b005      	add	sp, #20
 8022398:	f85d fb04 	ldr.w	pc, [sp], #4

0802239c <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 802239c:	b500      	push	{lr}
 802239e:	b085      	sub	sp, #20
 80223a0:	2300      	movs	r3, #0
 80223a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80223a6:	2302      	movs	r3, #2
 80223a8:	9300      	str	r3, [sp, #0]
 80223aa:	ab03      	add	r3, sp, #12
 80223ac:	f7ff ffdc 	bl	8022368 <w5500_rn>
 80223b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80223b4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80223b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80223bc:	b005      	add	sp, #20
 80223be:	f85d fb04 	ldr.w	pc, [sp], #4

080223c2 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 80223c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80223c6:	b083      	sub	sp, #12
 80223c8:	4606      	mov	r6, r0
 80223ca:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80223cc:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 80223ce:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 80223d0:	4604      	mov	r4, r0
 80223d2:	2226      	movs	r2, #38	@ 0x26
 80223d4:	2101      	movs	r1, #1
 80223d6:	4628      	mov	r0, r5
 80223d8:	f7ff ffe0 	bl	802239c <w5500_r2>
 80223dc:	4284      	cmp	r4, r0
 80223de:	d3f7      	bcc.n	80223d0 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 80223e0:	b91c      	cbnz	r4, 80223ea <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 80223e2:	4620      	mov	r0, r4
 80223e4:	b003      	add	sp, #12
 80223e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 80223ea:	2228      	movs	r2, #40	@ 0x28
 80223ec:	2101      	movs	r1, #1
 80223ee:	4628      	mov	r0, r5
 80223f0:	f7ff ffd4 	bl	802239c <w5500_r2>
 80223f4:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 80223f6:	4602      	mov	r2, r0
 80223f8:	2103      	movs	r1, #3
 80223fa:	4628      	mov	r0, r5
 80223fc:	f7ff ffce 	bl	802239c <w5500_r2>
 8022400:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8022402:	fa1f f188 	uxth.w	r1, r8
 8022406:	3102      	adds	r1, #2
 8022408:	4288      	cmp	r0, r1
 802240a:	dc0e      	bgt.n	802242a <w5500_rx+0x68>
 802240c:	2801      	cmp	r0, #1
 802240e:	d801      	bhi.n	8022414 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022410:	2400      	movs	r4, #0
 8022412:	e00b      	b.n	802242c <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8022414:	1e84      	subs	r4, r0, #2
 8022416:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022418:	1cba      	adds	r2, r7, #2
 802241a:	9400      	str	r4, [sp, #0]
 802241c:	4633      	mov	r3, r6
 802241e:	b292      	uxth	r2, r2
 8022420:	2103      	movs	r1, #3
 8022422:	4628      	mov	r0, r5
 8022424:	f7ff ffa0 	bl	8022368 <w5500_rn>
 8022428:	e000      	b.n	802242c <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802242a:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 802242c:	eb07 0309 	add.w	r3, r7, r9
 8022430:	b29b      	uxth	r3, r3
 8022432:	2228      	movs	r2, #40	@ 0x28
 8022434:	2101      	movs	r1, #1
 8022436:	4628      	mov	r0, r5
 8022438:	f7ff ff86 	bl	8022348 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 802243c:	2340      	movs	r3, #64	@ 0x40
 802243e:	2201      	movs	r2, #1
 8022440:	4611      	mov	r1, r2
 8022442:	4628      	mov	r0, r5
 8022444:	f7ff ff73 	bl	802232e <w5500_w1>
 8022448:	e7cb      	b.n	80223e2 <w5500_rx+0x20>

0802244a <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 802244a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802244e:	b082      	sub	sp, #8
 8022450:	4680      	mov	r8, r0
 8022452:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022454:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8022456:	b28f      	uxth	r7, r1
 8022458:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 802245a:	e004      	b.n	8022466 <w5500_tx+0x1c>
 802245c:	2220      	movs	r2, #32
 802245e:	2101      	movs	r1, #1
 8022460:	4630      	mov	r0, r6
 8022462:	f7ff ff9b 	bl	802239c <w5500_r2>
 8022466:	42b8      	cmp	r0, r7
 8022468:	d3f8      	bcc.n	802245c <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 802246a:	2224      	movs	r2, #36	@ 0x24
 802246c:	2101      	movs	r1, #1
 802246e:	4630      	mov	r0, r6
 8022470:	f7ff ff94 	bl	802239c <w5500_r2>
 8022474:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8022476:	b2ad      	uxth	r5, r5
 8022478:	9500      	str	r5, [sp, #0]
 802247a:	4643      	mov	r3, r8
 802247c:	4602      	mov	r2, r0
 802247e:	2102      	movs	r1, #2
 8022480:	4630      	mov	r0, r6
 8022482:	f7ff ff4a 	bl	802231a <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8022486:	193b      	adds	r3, r7, r4
 8022488:	b29b      	uxth	r3, r3
 802248a:	2224      	movs	r2, #36	@ 0x24
 802248c:	2101      	movs	r1, #1
 802248e:	4630      	mov	r0, r6
 8022490:	f7ff ff5a 	bl	8022348 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022494:	2320      	movs	r3, #32
 8022496:	2201      	movs	r2, #1
 8022498:	4611      	mov	r1, r2
 802249a:	4630      	mov	r0, r6
 802249c:	f7ff ff47 	bl	802232e <w5500_w1>
  for (i = 0; i < 40; i++) {
 80224a0:	2400      	movs	r4, #0
 80224a2:	e004      	b.n	80224ae <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 80224a4:	f015 0f18 	tst.w	r5, #24
 80224a8:	d116      	bne.n	80224d8 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 80224aa:	3401      	adds	r4, #1
 80224ac:	b2a4      	uxth	r4, r4
 80224ae:	2c27      	cmp	r4, #39	@ 0x27
 80224b0:	d812      	bhi.n	80224d8 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 80224b2:	2202      	movs	r2, #2
 80224b4:	2101      	movs	r1, #1
 80224b6:	4630      	mov	r0, r6
 80224b8:	f7ff ff60 	bl	802237c <w5500_r1>
    if (ir == 0) continue;
 80224bc:	4605      	mov	r5, r0
 80224be:	2800      	cmp	r0, #0
 80224c0:	d0f3      	beq.n	80224aa <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 80224c2:	4603      	mov	r3, r0
 80224c4:	2202      	movs	r2, #2
 80224c6:	2101      	movs	r1, #1
 80224c8:	4630      	mov	r0, r6
 80224ca:	f7ff ff30 	bl	802232e <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 80224ce:	f015 0f08 	tst.w	r5, #8
 80224d2:	d0e7      	beq.n	80224a4 <w5500_tx+0x5a>
 80224d4:	2700      	movs	r7, #0
 80224d6:	e7e5      	b.n	80224a4 <w5500_tx+0x5a>
  }
  return len;
}
 80224d8:	4638      	mov	r0, r7
 80224da:	b002      	add	sp, #8
 80224dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080224e0 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 80224e0:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80224e2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 80224e4:	68a3      	ldr	r3, [r4, #8]
 80224e6:	6820      	ldr	r0, [r4, #0]
 80224e8:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 80224ea:	2380      	movs	r3, #128	@ 0x80
 80224ec:	2200      	movs	r2, #0
 80224ee:	4611      	mov	r1, r2
 80224f0:	4620      	mov	r0, r4
 80224f2:	f7ff ff1c 	bl	802232e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 80224f6:	2300      	movs	r3, #0
 80224f8:	222e      	movs	r2, #46	@ 0x2e
 80224fa:	4619      	mov	r1, r3
 80224fc:	4620      	mov	r0, r4
 80224fe:	f7ff ff16 	bl	802232e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8022502:	23f8      	movs	r3, #248	@ 0xf8
 8022504:	222e      	movs	r2, #46	@ 0x2e
 8022506:	2100      	movs	r1, #0
 8022508:	4620      	mov	r0, r4
 802250a:	f7ff ff10 	bl	802232e <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 802250e:	2310      	movs	r3, #16
 8022510:	221e      	movs	r2, #30
 8022512:	2101      	movs	r1, #1
 8022514:	4620      	mov	r0, r4
 8022516:	f7ff ff0a 	bl	802232e <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 802251a:	2310      	movs	r3, #16
 802251c:	221f      	movs	r2, #31
 802251e:	2101      	movs	r1, #1
 8022520:	4620      	mov	r0, r4
 8022522:	f7ff ff04 	bl	802232e <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8022526:	2304      	movs	r3, #4
 8022528:	2200      	movs	r2, #0
 802252a:	2101      	movs	r1, #1
 802252c:	4620      	mov	r0, r4
 802252e:	f7ff fefe 	bl	802232e <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8022532:	2301      	movs	r3, #1
 8022534:	461a      	mov	r2, r3
 8022536:	4619      	mov	r1, r3
 8022538:	4620      	mov	r0, r4
 802253a:	f7ff fef8 	bl	802232e <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 802253e:	2203      	movs	r2, #3
 8022540:	2101      	movs	r1, #1
 8022542:	4620      	mov	r0, r4
 8022544:	f7ff ff1a 	bl	802237c <w5500_r1>
}
 8022548:	2842      	cmp	r0, #66	@ 0x42
 802254a:	bf14      	ite	ne
 802254c:	2000      	movne	r0, #0
 802254e:	2001      	moveq	r0, #1
 8022550:	bd10      	pop	{r4, pc}

08022552 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8022552:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022554:	222e      	movs	r2, #46	@ 0x2e
 8022556:	2100      	movs	r1, #0
 8022558:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 802255a:	f7ff ff0f 	bl	802237c <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 802255e:	f000 0001 	and.w	r0, r0, #1
 8022562:	bd08      	pop	{r3, pc}

08022564 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8022564:	b508      	push	{r3, lr}
 8022566:	4602      	mov	r2, r0
 8022568:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 802256a:	e000      	b.n	802256e <mg_dns_free+0xa>
 802256c:	461a      	mov	r2, r3
 802256e:	6813      	ldr	r3, [r2, #0]
 8022570:	4283      	cmp	r3, r0
 8022572:	d1fb      	bne.n	802256c <mg_dns_free+0x8>
 8022574:	6803      	ldr	r3, [r0, #0]
 8022576:	6013      	str	r3, [r2, #0]
  free(d);
 8022578:	f7f9 fa00 	bl	801b97c <vPortFree>
}
 802257c:	bd08      	pop	{r3, pc}

0802257e <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 802257e:	b082      	sub	sp, #8
 8022580:	ab02      	add	r3, sp, #8
 8022582:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8022586:	b111      	cbz	r1, 802258e <mg_atone+0x10>
 8022588:	2000      	movs	r0, #0
}
 802258a:	b002      	add	sp, #8
 802258c:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 802258e:	6011      	str	r1, [r2, #0]
 8022590:	6051      	str	r1, [r2, #4]
 8022592:	6091      	str	r1, [r2, #8]
 8022594:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8022596:	74d1      	strb	r1, [r2, #19]
  return true;
 8022598:	2001      	movs	r0, #1
 802259a:	e7f6      	b.n	802258a <mg_atone+0xc>

0802259c <urlparse>:
static struct url urlparse(const char *url) {
 802259c:	b510      	push	{r4, lr}
 802259e:	b088      	sub	sp, #32
 80225a0:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 80225a2:	2200      	movs	r2, #0
 80225a4:	9201      	str	r2, [sp, #4]
 80225a6:	9202      	str	r2, [sp, #8]
 80225a8:	9203      	str	r2, [sp, #12]
 80225aa:	9204      	str	r2, [sp, #16]
 80225ac:	9205      	str	r2, [sp, #20]
 80225ae:	9206      	str	r2, [sp, #24]
 80225b0:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80225b2:	e00f      	b.n	80225d4 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80225b4:	b19a      	cbz	r2, 80225de <urlparse+0x42>
 80225b6:	9804      	ldr	r0, [sp, #16]
 80225b8:	b988      	cbnz	r0, 80225de <urlparse+0x42>
 80225ba:	1888      	adds	r0, r1, r2
 80225bc:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 80225c0:	282f      	cmp	r0, #47	@ 0x2f
 80225c2:	d10c      	bne.n	80225de <urlparse+0x42>
      u.host = i + 1;
 80225c4:	1c53      	adds	r3, r2, #1
 80225c6:	9304      	str	r3, [sp, #16]
      u.port = 0;
 80225c8:	2300      	movs	r3, #0
 80225ca:	9305      	str	r3, [sp, #20]
 80225cc:	e001      	b.n	80225d2 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 80225ce:	2300      	movs	r3, #0
 80225d0:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 80225d2:	3201      	adds	r2, #1
 80225d4:	5c8b      	ldrb	r3, [r1, r2]
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d02c      	beq.n	8022634 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80225da:	2b2f      	cmp	r3, #47	@ 0x2f
 80225dc:	d0ea      	beq.n	80225b4 <urlparse+0x18>
    } else if (url[i] == ']') {
 80225de:	2b5d      	cmp	r3, #93	@ 0x5d
 80225e0:	d0f5      	beq.n	80225ce <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80225e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80225e4:	d00b      	beq.n	80225fe <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80225e6:	2b40      	cmp	r3, #64	@ 0x40
 80225e8:	d012      	beq.n	8022610 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80225ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80225ec:	d1f1      	bne.n	80225d2 <urlparse+0x36>
 80225ee:	9b04      	ldr	r3, [sp, #16]
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d0ee      	beq.n	80225d2 <urlparse+0x36>
 80225f4:	9b06      	ldr	r3, [sp, #24]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d1eb      	bne.n	80225d2 <urlparse+0x36>
      u.uri = i;
 80225fa:	9206      	str	r2, [sp, #24]
 80225fc:	e7e9      	b.n	80225d2 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80225fe:	9805      	ldr	r0, [sp, #20]
 8022600:	2800      	cmp	r0, #0
 8022602:	d1f0      	bne.n	80225e6 <urlparse+0x4a>
 8022604:	9806      	ldr	r0, [sp, #24]
 8022606:	2800      	cmp	r0, #0
 8022608:	d1ed      	bne.n	80225e6 <urlparse+0x4a>
      u.port = i + 1;
 802260a:	1c53      	adds	r3, r2, #1
 802260c:	9305      	str	r3, [sp, #20]
 802260e:	e7e0      	b.n	80225d2 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8022610:	9802      	ldr	r0, [sp, #8]
 8022612:	2800      	cmp	r0, #0
 8022614:	d1e9      	bne.n	80225ea <urlparse+0x4e>
 8022616:	9803      	ldr	r0, [sp, #12]
 8022618:	2800      	cmp	r0, #0
 802261a:	d1e6      	bne.n	80225ea <urlparse+0x4e>
 802261c:	9806      	ldr	r0, [sp, #24]
 802261e:	2800      	cmp	r0, #0
 8022620:	d1e3      	bne.n	80225ea <urlparse+0x4e>
      u.user = u.host;
 8022622:	9b04      	ldr	r3, [sp, #16]
 8022624:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8022626:	9b05      	ldr	r3, [sp, #20]
 8022628:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 802262a:	1c53      	adds	r3, r2, #1
 802262c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 802262e:	2300      	movs	r3, #0
 8022630:	9305      	str	r3, [sp, #20]
 8022632:	e7ce      	b.n	80225d2 <urlparse+0x36>
  u.end = i;
 8022634:	9207      	str	r2, [sp, #28]
  return u;
 8022636:	46a4      	mov	ip, r4
 8022638:	f10d 0e04 	add.w	lr, sp, #4
 802263c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8022640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8022644:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8022648:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 802264c:	4620      	mov	r0, r4
 802264e:	b008      	add	sp, #32
 8022650:	bd10      	pop	{r4, pc}

08022652 <mg_dns_parse_name_depth>:
                                      int depth) {
 8022652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022656:	b085      	sub	sp, #20
 8022658:	4681      	mov	r9, r0
 802265a:	4688      	mov	r8, r1
 802265c:	4693      	mov	fp, r2
 802265e:	469a      	mov	sl, r3
 8022660:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022662:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8022664:	b11f      	cbz	r7, 802266e <mg_dns_parse_name_depth+0x1c>
 8022666:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022668:	b90b      	cbnz	r3, 802266e <mg_dns_parse_name_depth+0x1c>
 802266a:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 802266e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022670:	2b05      	cmp	r3, #5
 8022672:	dc4f      	bgt.n	8022714 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8022674:	2600      	movs	r6, #0
 8022676:	e02f      	b.n	80226d8 <mg_dns_parse_name_depth+0x86>
      i++;
 8022678:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 802267a:	2f00      	cmp	r7, #0
 802267c:	d04b      	beq.n	8022716 <mg_dns_parse_name_depth+0xc4>
 802267e:	3f01      	subs	r7, #1
 8022680:	2300      	movs	r3, #0
 8022682:	f80a 3007 	strb.w	r3, [sl, r7]
 8022686:	e046      	b.n	8022716 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8022688:	0222      	lsls	r2, r4, #8
 802268a:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 802268e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8022692:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8022694:	1c53      	adds	r3, r2, #1
 8022696:	4543      	cmp	r3, r8
 8022698:	d203      	bcs.n	80226a2 <mg_dns_parse_name_depth+0x50>
 802269a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802269e:	2b3f      	cmp	r3, #63	@ 0x3f
 80226a0:	d901      	bls.n	80226a6 <mg_dns_parse_name_depth+0x54>
      i += 2;
 80226a2:	3602      	adds	r6, #2
      break;
 80226a4:	e7e9      	b.n	802267a <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80226a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80226a8:	3301      	adds	r3, #1
 80226aa:	9302      	str	r3, [sp, #8]
 80226ac:	9501      	str	r5, [sp, #4]
 80226ae:	9700      	str	r7, [sp, #0]
 80226b0:	4653      	mov	r3, sl
 80226b2:	4641      	mov	r1, r8
 80226b4:	4648      	mov	r0, r9
 80226b6:	f7ff ffcc 	bl	8022652 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80226ba:	2800      	cmp	r0, #0
 80226bc:	d1f1      	bne.n	80226a2 <mg_dns_parse_name_depth+0x50>
        return 0;
 80226be:	4606      	mov	r6, r0
 80226c0:	e029      	b.n	8022716 <mg_dns_parse_name_depth+0xc4>
 80226c2:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80226c4:	1905      	adds	r5, r0, r4
 80226c6:	42bd      	cmp	r5, r7
 80226c8:	d31e      	bcc.n	8022708 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 80226ca:	4426      	add	r6, r4
 80226cc:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 80226ce:	42bd      	cmp	r5, r7
 80226d0:	d202      	bcs.n	80226d8 <mg_dns_parse_name_depth+0x86>
 80226d2:	2300      	movs	r3, #0
 80226d4:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 80226d8:	eb06 030b 	add.w	r3, r6, fp
 80226dc:	1c59      	adds	r1, r3, #1
 80226de:	4541      	cmp	r1, r8
 80226e0:	d2cb      	bcs.n	802267a <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 80226e2:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 80226e6:	2c00      	cmp	r4, #0
 80226e8:	d0c6      	beq.n	8022678 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 80226ea:	2c3f      	cmp	r4, #63	@ 0x3f
 80226ec:	d8cc      	bhi.n	8022688 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 80226ee:	4423      	add	r3, r4
 80226f0:	3301      	adds	r3, #1
 80226f2:	4543      	cmp	r3, r8
 80226f4:	d213      	bcs.n	802271e <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 80226f6:	2d00      	cmp	r5, #0
 80226f8:	d0e3      	beq.n	80226c2 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 80226fa:	42bd      	cmp	r5, r7
 80226fc:	d202      	bcs.n	8022704 <mg_dns_parse_name_depth+0xb2>
 80226fe:	232e      	movs	r3, #46	@ 0x2e
 8022700:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8022704:	1c68      	adds	r0, r5, #1
 8022706:	e7dd      	b.n	80226c4 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8022708:	4622      	mov	r2, r4
 802270a:	4449      	add	r1, r9
 802270c:	4450      	add	r0, sl
 802270e:	f00c fe65 	bl	802f3dc <memcpy>
 8022712:	e7da      	b.n	80226ca <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8022714:	2600      	movs	r6, #0
}
 8022716:	4630      	mov	r0, r6
 8022718:	b005      	add	sp, #20
 802271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 802271e:	2600      	movs	r6, #0
 8022720:	e7f9      	b.n	8022716 <mg_dns_parse_name_depth+0xc4>

08022722 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8022722:	b510      	push	{r4, lr}
 8022724:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8022726:	2400      	movs	r4, #0
 8022728:	9402      	str	r4, [sp, #8]
 802272a:	9401      	str	r4, [sp, #4]
 802272c:	9c06      	ldr	r4, [sp, #24]
 802272e:	9400      	str	r4, [sp, #0]
 8022730:	f7ff ff8f 	bl	8022652 <mg_dns_parse_name_depth>
}
 8022734:	b004      	add	sp, #16
 8022736:	bd10      	pop	{r4, pc}

08022738 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8022738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802273c:	b09f      	sub	sp, #124	@ 0x7c
 802273e:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8022740:	460c      	mov	r4, r1
 8022742:	af0e      	add	r7, sp, #56	@ 0x38
 8022744:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8022748:	463e      	mov	r6, r7
 802274a:	6820      	ldr	r0, [r4, #0]
 802274c:	6861      	ldr	r1, [r4, #4]
 802274e:	68a2      	ldr	r2, [r4, #8]
 8022750:	68e3      	ldr	r3, [r4, #12]
 8022752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8022754:	3410      	adds	r4, #16
 8022756:	4637      	mov	r7, r6
 8022758:	42ac      	cmp	r4, r5
 802275a:	d1f5      	bne.n	8022748 <mg_sha1_transform+0x10>
  a = state[0];
 802275c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802275e:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8022760:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8022762:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8022764:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8022768:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 802276c:	ea84 0608 	eor.w	r6, r4, r8
 8022770:	403e      	ands	r6, r7
 8022772:	ea86 0608 	eor.w	r6, r6, r8
 8022776:	2100      	movs	r1, #0
 8022778:	a80e      	add	r0, sp, #56	@ 0x38
 802277a:	f7ff fd79 	bl	8022270 <blk0>
 802277e:	1833      	adds	r3, r6, r0
 8022780:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8022784:	4ee4      	ldr	r6, [pc, #912]	@ (8022b18 <mg_sha1_transform+0x3e0>)
 8022786:	4433      	add	r3, r6
 8022788:	4499      	add	r9, r3
 802278a:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 802278e:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8022792:	402f      	ands	r7, r5
 8022794:	4067      	eors	r7, r4
 8022796:	2101      	movs	r1, #1
 8022798:	a80e      	add	r0, sp, #56	@ 0x38
 802279a:	f7ff fd69 	bl	8022270 <blk0>
 802279e:	4407      	add	r7, r0
 80227a0:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 80227a4:	4437      	add	r7, r6
 80227a6:	4447      	add	r7, r8
 80227a8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 80227ac:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80227b0:	ea05 0509 	and.w	r5, r5, r9
 80227b4:	ea85 050a 	eor.w	r5, r5, sl
 80227b8:	2102      	movs	r1, #2
 80227ba:	a80e      	add	r0, sp, #56	@ 0x38
 80227bc:	f7ff fd58 	bl	8022270 <blk0>
 80227c0:	4405      	add	r5, r0
 80227c2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80227c6:	4435      	add	r5, r6
 80227c8:	442c      	add	r4, r5
 80227ca:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 80227ce:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80227d2:	ea09 0907 	and.w	r9, r9, r7
 80227d6:	ea89 0908 	eor.w	r9, r9, r8
 80227da:	2103      	movs	r1, #3
 80227dc:	a80e      	add	r0, sp, #56	@ 0x38
 80227de:	f7ff fd47 	bl	8022270 <blk0>
 80227e2:	4481      	add	r9, r0
 80227e4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80227e8:	44b1      	add	r9, r6
 80227ea:	44ca      	add	sl, r9
 80227ec:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 80227f0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80227f4:	4027      	ands	r7, r4
 80227f6:	406f      	eors	r7, r5
 80227f8:	2104      	movs	r1, #4
 80227fa:	a80e      	add	r0, sp, #56	@ 0x38
 80227fc:	f7ff fd38 	bl	8022270 <blk0>
 8022800:	4407      	add	r7, r0
 8022802:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8022806:	4437      	add	r7, r6
 8022808:	44b8      	add	r8, r7
 802280a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 802280e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8022812:	ea04 040a 	and.w	r4, r4, sl
 8022816:	ea84 0409 	eor.w	r4, r4, r9
 802281a:	2105      	movs	r1, #5
 802281c:	a80e      	add	r0, sp, #56	@ 0x38
 802281e:	f7ff fd27 	bl	8022270 <blk0>
 8022822:	4404      	add	r4, r0
 8022824:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8022828:	4434      	add	r4, r6
 802282a:	4425      	add	r5, r4
 802282c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8022830:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8022834:	ea0a 0a08 	and.w	sl, sl, r8
 8022838:	ea8a 0a07 	eor.w	sl, sl, r7
 802283c:	2106      	movs	r1, #6
 802283e:	a80e      	add	r0, sp, #56	@ 0x38
 8022840:	f7ff fd16 	bl	8022270 <blk0>
 8022844:	4482      	add	sl, r0
 8022846:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802284a:	44b2      	add	sl, r6
 802284c:	44d1      	add	r9, sl
 802284e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8022852:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8022856:	ea08 0805 	and.w	r8, r8, r5
 802285a:	ea88 0804 	eor.w	r8, r8, r4
 802285e:	2107      	movs	r1, #7
 8022860:	a80e      	add	r0, sp, #56	@ 0x38
 8022862:	f7ff fd05 	bl	8022270 <blk0>
 8022866:	4480      	add	r8, r0
 8022868:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802286c:	44b0      	add	r8, r6
 802286e:	4447      	add	r7, r8
 8022870:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8022874:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022878:	ea05 0509 	and.w	r5, r5, r9
 802287c:	ea85 050a 	eor.w	r5, r5, sl
 8022880:	2108      	movs	r1, #8
 8022882:	a80e      	add	r0, sp, #56	@ 0x38
 8022884:	f7ff fcf4 	bl	8022270 <blk0>
 8022888:	4405      	add	r5, r0
 802288a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802288e:	4435      	add	r5, r6
 8022890:	442c      	add	r4, r5
 8022892:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8022896:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802289a:	ea09 0907 	and.w	r9, r9, r7
 802289e:	ea89 0908 	eor.w	r9, r9, r8
 80228a2:	2109      	movs	r1, #9
 80228a4:	a80e      	add	r0, sp, #56	@ 0x38
 80228a6:	f7ff fce3 	bl	8022270 <blk0>
 80228aa:	4481      	add	r9, r0
 80228ac:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80228b0:	44b1      	add	r9, r6
 80228b2:	44ca      	add	sl, r9
 80228b4:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 80228b8:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80228bc:	4027      	ands	r7, r4
 80228be:	406f      	eors	r7, r5
 80228c0:	210a      	movs	r1, #10
 80228c2:	a80e      	add	r0, sp, #56	@ 0x38
 80228c4:	f7ff fcd4 	bl	8022270 <blk0>
 80228c8:	4407      	add	r7, r0
 80228ca:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80228ce:	4437      	add	r7, r6
 80228d0:	44b8      	add	r8, r7
 80228d2:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 80228d6:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80228da:	ea04 040a 	and.w	r4, r4, sl
 80228de:	ea84 0409 	eor.w	r4, r4, r9
 80228e2:	210b      	movs	r1, #11
 80228e4:	a80e      	add	r0, sp, #56	@ 0x38
 80228e6:	f7ff fcc3 	bl	8022270 <blk0>
 80228ea:	4404      	add	r4, r0
 80228ec:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80228f0:	4434      	add	r4, r6
 80228f2:	4425      	add	r5, r4
 80228f4:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 80228f8:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80228fc:	ea0a 0a08 	and.w	sl, sl, r8
 8022900:	ea8a 0a07 	eor.w	sl, sl, r7
 8022904:	210c      	movs	r1, #12
 8022906:	a80e      	add	r0, sp, #56	@ 0x38
 8022908:	f7ff fcb2 	bl	8022270 <blk0>
 802290c:	4482      	add	sl, r0
 802290e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8022912:	44b2      	add	sl, r6
 8022914:	44d1      	add	r9, sl
 8022916:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 802291a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 802291e:	ea08 0805 	and.w	r8, r8, r5
 8022922:	ea88 0804 	eor.w	r8, r8, r4
 8022926:	210d      	movs	r1, #13
 8022928:	a80e      	add	r0, sp, #56	@ 0x38
 802292a:	f7ff fca1 	bl	8022270 <blk0>
 802292e:	4480      	add	r8, r0
 8022930:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8022934:	44b0      	add	r8, r6
 8022936:	4447      	add	r7, r8
 8022938:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 802293c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022940:	ea05 0509 	and.w	r5, r5, r9
 8022944:	ea85 050a 	eor.w	r5, r5, sl
 8022948:	210e      	movs	r1, #14
 802294a:	a80e      	add	r0, sp, #56	@ 0x38
 802294c:	f7ff fc90 	bl	8022270 <blk0>
 8022950:	4405      	add	r5, r0
 8022952:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8022956:	4435      	add	r5, r6
 8022958:	442c      	add	r4, r5
 802295a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 802295e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8022962:	ea09 0907 	and.w	r9, r9, r7
 8022966:	ea89 0908 	eor.w	r9, r9, r8
 802296a:	210f      	movs	r1, #15
 802296c:	a80e      	add	r0, sp, #56	@ 0x38
 802296e:	f7ff fc7f 	bl	8022270 <blk0>
 8022972:	4481      	add	r9, r0
 8022974:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022978:	44b1      	add	r9, r6
 802297a:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 802297e:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8022982:	4023      	ands	r3, r4
 8022984:	ea83 0205 	eor.w	r2, r3, r5
 8022988:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802298a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802298c:	4043      	eors	r3, r0
 802298e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022990:	ea83 0c00 	eor.w	ip, r3, r0
 8022994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022996:	ea8c 0303 	eor.w	r3, ip, r3
 802299a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802299e:	930e      	str	r3, [sp, #56]	@ 0x38
 80229a0:	9300      	str	r3, [sp, #0]
 80229a2:	18d3      	adds	r3, r2, r3
 80229a4:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80229a8:	4433      	add	r3, r6
 80229aa:	eb08 0203 	add.w	r2, r8, r3
 80229ae:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 80229b2:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 80229b6:	ea0c 0c01 	and.w	ip, ip, r1
 80229ba:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80229be:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80229c0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80229c2:	ea83 0e04 	eor.w	lr, r3, r4
 80229c6:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80229ca:	ea8e 0e09 	eor.w	lr, lr, r9
 80229ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80229d0:	ea8e 0e03 	eor.w	lr, lr, r3
 80229d4:	ea4f 74fe 	mov.w	r4, lr, ror #31
 80229d8:	940f      	str	r4, [sp, #60]	@ 0x3c
 80229da:	9401      	str	r4, [sp, #4]
 80229dc:	44a4      	add	ip, r4
 80229de:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 80229e2:	44b4      	add	ip, r6
 80229e4:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 80229e6:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 80229ea:	4015      	ands	r5, r2
 80229ec:	ea85 0508 	eor.w	r5, r5, r8
 80229f0:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80229f2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80229f4:	ea84 0e03 	eor.w	lr, r4, r3
 80229f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80229fa:	ea8e 0e03 	eor.w	lr, lr, r3
 80229fe:	ea80 000e 	eor.w	r0, r0, lr
 8022a02:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022a06:	9010      	str	r0, [sp, #64]	@ 0x40
 8022a08:	9002      	str	r0, [sp, #8]
 8022a0a:	4405      	add	r5, r0
 8022a0c:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8022a10:	4435      	add	r5, r6
 8022a12:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8022a16:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8022a1a:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8022a1e:	ea00 000c 	and.w	r0, r0, ip
 8022a22:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8022a26:	9f00      	ldr	r7, [sp, #0]
 8022a28:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8022a2a:	4067      	eors	r7, r4
 8022a2c:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8022a30:	ea87 070e 	eor.w	r7, r7, lr
 8022a34:	ea89 0907 	eor.w	r9, r9, r7
 8022a38:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8022a3c:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8022a40:	4448      	add	r0, r9
 8022a42:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8022a46:	4430      	add	r0, r6
 8022a48:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8022a4c:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8022a50:	4050      	eors	r0, r2
 8022a52:	9e01      	ldr	r6, [sp, #4]
 8022a54:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022a56:	ea86 0807 	eor.w	r8, r6, r7
 8022a5a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8022a5e:	ea88 080a 	eor.w	r8, r8, sl
 8022a62:	ea83 0808 	eor.w	r8, r3, r8
 8022a66:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8022a6a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8022a6e:	4440      	add	r0, r8
 8022a70:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022a74:	4b29      	ldr	r3, [pc, #164]	@ (8022b1c <mg_sha1_transform+0x3e4>)
 8022a76:	4418      	add	r0, r3
 8022a78:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8022a7c:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022a80:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022a84:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8022a86:	9f02      	ldr	r7, [sp, #8]
 8022a88:	4077      	eors	r7, r6
 8022a8a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8022a8c:	4077      	eors	r7, r6
 8022a8e:	ea8e 0707 	eor.w	r7, lr, r7
 8022a92:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022a96:	9713      	str	r7, [sp, #76]	@ 0x4c
 8022a98:	9703      	str	r7, [sp, #12]
 8022a9a:	4439      	add	r1, r7
 8022a9c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022aa0:	4419      	add	r1, r3
 8022aa2:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8022aa4:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8022aa8:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8022aac:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8022aae:	ea87 0e09 	eor.w	lr, r7, r9
 8022ab2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8022ab4:	ea87 0e0e 	eor.w	lr, r7, lr
 8022ab8:	ea8a 0e0e 	eor.w	lr, sl, lr
 8022abc:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8022ac0:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8022ac4:	4471      	add	r1, lr
 8022ac6:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8022aca:	4419      	add	r1, r3
 8022acc:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8022ad0:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8022ad4:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8022ad8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8022ada:	ea87 0c08 	eor.w	ip, r7, r8
 8022ade:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022ae0:	ea87 0c0c 	eor.w	ip, r7, ip
 8022ae4:	ea86 0c0c 	eor.w	ip, r6, ip
 8022ae8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8022aec:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8022af0:	44e3      	add	fp, ip
 8022af2:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8022af6:	449b      	add	fp, r3
 8022af8:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8022afc:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8022b00:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8022b04:	9d00      	ldr	r5, [sp, #0]
 8022b06:	9e03      	ldr	r6, [sp, #12]
 8022b08:	406e      	eors	r6, r5
 8022b0a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8022b0c:	406e      	eors	r6, r5
 8022b0e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8022b10:	406e      	eors	r6, r5
 8022b12:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8022b16:	e003      	b.n	8022b20 <mg_sha1_transform+0x3e8>
 8022b18:	5a827999 	.word	0x5a827999
 8022b1c:	6ed9eba1 	.word	0x6ed9eba1
 8022b20:	9716      	str	r7, [sp, #88]	@ 0x58
 8022b22:	9704      	str	r7, [sp, #16]
 8022b24:	44ba      	add	sl, r7
 8022b26:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8022b2a:	449a      	add	sl, r3
 8022b2c:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8022b30:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8022b34:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8022b38:	9e01      	ldr	r6, [sp, #4]
 8022b3a:	ea86 040e 	eor.w	r4, r6, lr
 8022b3e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022b40:	407c      	eors	r4, r7
 8022b42:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022b44:	407c      	eors	r4, r7
 8022b46:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022b4a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8022b4c:	9405      	str	r4, [sp, #20]
 8022b4e:	4425      	add	r5, r4
 8022b50:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8022b54:	441d      	add	r5, r3
 8022b56:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8022b5a:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8022b5e:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022b62:	9e02      	ldr	r6, [sp, #8]
 8022b64:	ea86 000c 	eor.w	r0, r6, ip
 8022b68:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022b6a:	4078      	eors	r0, r7
 8022b6c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8022b6e:	4078      	eors	r0, r7
 8022b70:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022b74:	4606      	mov	r6, r0
 8022b76:	9018      	str	r0, [sp, #96]	@ 0x60
 8022b78:	4404      	add	r4, r0
 8022b7a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022b7e:	441c      	add	r4, r3
 8022b80:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8022b84:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8022b88:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8022b8c:	9f04      	ldr	r7, [sp, #16]
 8022b8e:	ea89 0207 	eor.w	r2, r9, r7
 8022b92:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8022b94:	407a      	eors	r2, r7
 8022b96:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022b98:	407a      	eors	r2, r7
 8022b9a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022b9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8022ba0:	9206      	str	r2, [sp, #24]
 8022ba2:	4410      	add	r0, r2
 8022ba4:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022ba8:	4418      	add	r0, r3
 8022baa:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8022bae:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022bb2:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8022bb6:	9a05      	ldr	r2, [sp, #20]
 8022bb8:	ea88 0202 	eor.w	r2, r8, r2
 8022bbc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8022bbe:	407a      	eors	r2, r7
 8022bc0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022bc2:	407a      	eors	r2, r7
 8022bc4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022bc8:	921a      	str	r2, [sp, #104]	@ 0x68
 8022bca:	9207      	str	r2, [sp, #28]
 8022bcc:	4411      	add	r1, r2
 8022bce:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022bd2:	4419      	add	r1, r3
 8022bd4:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8022bd8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8022bdc:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8022be0:	960b      	str	r6, [sp, #44]	@ 0x2c
 8022be2:	9f03      	ldr	r7, [sp, #12]
 8022be4:	ea87 0b06 	eor.w	fp, r7, r6
 8022be8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8022bea:	ea87 0b0b 	eor.w	fp, r7, fp
 8022bee:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8022bf0:	ea87 0b0b 	eor.w	fp, r7, fp
 8022bf4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022bf8:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8022bfc:	f8cd b020 	str.w	fp, [sp, #32]
 8022c00:	445a      	add	r2, fp
 8022c02:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022c06:	441a      	add	r2, r3
 8022c08:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8022c0c:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8022c10:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8022c14:	9e06      	ldr	r6, [sp, #24]
 8022c16:	ea8e 0b06 	eor.w	fp, lr, r6
 8022c1a:	9e00      	ldr	r6, [sp, #0]
 8022c1c:	ea86 0b0b 	eor.w	fp, r6, fp
 8022c20:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8022c22:	ea87 0b0b 	eor.w	fp, r7, fp
 8022c26:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022c2a:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8022c2e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8022c32:	44da      	add	sl, fp
 8022c34:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8022c38:	449a      	add	sl, r3
 8022c3a:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8022c3e:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8022c42:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8022c46:	9e07      	ldr	r6, [sp, #28]
 8022c48:	ea8c 0b06 	eor.w	fp, ip, r6
 8022c4c:	9e01      	ldr	r6, [sp, #4]
 8022c4e:	ea86 0b0b 	eor.w	fp, r6, fp
 8022c52:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8022c54:	ea87 0b0b 	eor.w	fp, r7, fp
 8022c58:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022c5c:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8022c60:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8022c64:	445d      	add	r5, fp
 8022c66:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8022c6a:	441d      	add	r5, r3
 8022c6c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8022c70:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8022c74:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022c78:	9e08      	ldr	r6, [sp, #32]
 8022c7a:	9f04      	ldr	r7, [sp, #16]
 8022c7c:	ea87 0b06 	eor.w	fp, r7, r6
 8022c80:	9e02      	ldr	r6, [sp, #8]
 8022c82:	ea86 0b0b 	eor.w	fp, r6, fp
 8022c86:	9e00      	ldr	r6, [sp, #0]
 8022c88:	ea86 0b0b 	eor.w	fp, r6, fp
 8022c8c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022c90:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8022c94:	f8cd b000 	str.w	fp, [sp]
 8022c98:	445c      	add	r4, fp
 8022c9a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022c9e:	441c      	add	r4, r3
 8022ca0:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8022ca4:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8022ca8:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8022cac:	9e05      	ldr	r6, [sp, #20]
 8022cae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022cb0:	ea86 0b07 	eor.w	fp, r6, r7
 8022cb4:	ea89 0b0b 	eor.w	fp, r9, fp
 8022cb8:	9e01      	ldr	r6, [sp, #4]
 8022cba:	ea86 0b0b 	eor.w	fp, r6, fp
 8022cbe:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022cc2:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8022cc6:	f8cd b004 	str.w	fp, [sp, #4]
 8022cca:	4458      	add	r0, fp
 8022ccc:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022cd0:	4418      	add	r0, r3
 8022cd2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8022cd6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022cda:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8022cde:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022ce0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022ce2:	ea86 0b07 	eor.w	fp, r6, r7
 8022ce6:	ea88 0b0b 	eor.w	fp, r8, fp
 8022cea:	9e02      	ldr	r6, [sp, #8]
 8022cec:	ea86 0b0b 	eor.w	fp, r6, fp
 8022cf0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022cf4:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8022cf8:	f8cd b008 	str.w	fp, [sp, #8]
 8022cfc:	4459      	add	r1, fp
 8022cfe:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022d02:	4419      	add	r1, r3
 8022d04:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8022d08:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8022d0c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8022d10:	9e06      	ldr	r6, [sp, #24]
 8022d12:	9f00      	ldr	r7, [sp, #0]
 8022d14:	ea86 0b07 	eor.w	fp, r6, r7
 8022d18:	9e03      	ldr	r6, [sp, #12]
 8022d1a:	ea86 0b0b 	eor.w	fp, r6, fp
 8022d1e:	ea89 090b 	eor.w	r9, r9, fp
 8022d22:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8022d26:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8022d2a:	445a      	add	r2, fp
 8022d2c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022d30:	441a      	add	r2, r3
 8022d32:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8022d36:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8022d3a:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8022d3e:	9e07      	ldr	r6, [sp, #28]
 8022d40:	9f01      	ldr	r7, [sp, #4]
 8022d42:	ea86 0a07 	eor.w	sl, r6, r7
 8022d46:	ea8e 0a0a 	eor.w	sl, lr, sl
 8022d4a:	ea88 080a 	eor.w	r8, r8, sl
 8022d4e:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8022d52:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8022d56:	44d1      	add	r9, sl
 8022d58:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8022d5c:	4499      	add	r9, r3
 8022d5e:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8022d62:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8022d66:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8022d6a:	9e08      	ldr	r6, [sp, #32]
 8022d6c:	9f02      	ldr	r7, [sp, #8]
 8022d6e:	ea86 0907 	eor.w	r9, r6, r7
 8022d72:	ea8c 0909 	eor.w	r9, ip, r9
 8022d76:	9e03      	ldr	r6, [sp, #12]
 8022d78:	ea86 0709 	eor.w	r7, r6, r9
 8022d7c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8022d80:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8022d84:	444d      	add	r5, r9
 8022d86:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8022d8a:	441d      	add	r5, r3
 8022d8c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8022d90:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8022d94:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022d98:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022d9a:	ea87 070b 	eor.w	r7, r7, fp
 8022d9e:	9e04      	ldr	r6, [sp, #16]
 8022da0:	4077      	eors	r7, r6
 8022da2:	ea8e 0e07 	eor.w	lr, lr, r7
 8022da6:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8022daa:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8022dae:	4474      	add	r4, lr
 8022db0:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022db4:	441c      	add	r4, r3
 8022db6:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8022dba:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8022dbe:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8022dc2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022dc4:	ea87 070a 	eor.w	r7, r7, sl
 8022dc8:	9e05      	ldr	r6, [sp, #20]
 8022dca:	4077      	eors	r7, r6
 8022dcc:	ea8c 0c07 	eor.w	ip, ip, r7
 8022dd0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8022dd4:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8022dd8:	f8cd c00c 	str.w	ip, [sp, #12]
 8022ddc:	4460      	add	r0, ip
 8022dde:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022de2:	4418      	add	r0, r3
 8022de4:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8022de8:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8022dec:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8022df0:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8022df4:	4319      	orrs	r1, r3
 8022df6:	9b00      	ldr	r3, [sp, #0]
 8022df8:	ea83 0309 	eor.w	r3, r3, r9
 8022dfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022dfe:	4073      	eors	r3, r6
 8022e00:	9e04      	ldr	r6, [sp, #16]
 8022e02:	405e      	eors	r6, r3
 8022e04:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022e08:	9316      	str	r3, [sp, #88]	@ 0x58
 8022e0a:	9304      	str	r3, [sp, #16]
 8022e0c:	4419      	add	r1, r3
 8022e0e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022e12:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022e16:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8022e1a:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8022e1e:	311c      	adds	r1, #28
 8022e20:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8022e24:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8022e28:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8022e2c:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8022e30:	4332      	orrs	r2, r6
 8022e32:	9b01      	ldr	r3, [sp, #4]
 8022e34:	ea83 060e 	eor.w	r6, r3, lr
 8022e38:	9b06      	ldr	r3, [sp, #24]
 8022e3a:	405e      	eors	r6, r3
 8022e3c:	9f05      	ldr	r7, [sp, #20]
 8022e3e:	407e      	eors	r6, r7
 8022e40:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8022e44:	9717      	str	r7, [sp, #92]	@ 0x5c
 8022e46:	9705      	str	r7, [sp, #20]
 8022e48:	443a      	add	r2, r7
 8022e4a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022e4e:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022e52:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022e56:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022e5a:	321c      	adds	r2, #28
 8022e5c:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8022e60:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 8022e64:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8022e68:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8022e6c:	433e      	orrs	r6, r7
 8022e6e:	9f02      	ldr	r7, [sp, #8]
 8022e70:	4663      	mov	r3, ip
 8022e72:	405f      	eors	r7, r3
 8022e74:	9b07      	ldr	r3, [sp, #28]
 8022e76:	405f      	eors	r7, r3
 8022e78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e7a:	405f      	eors	r7, r3
 8022e7c:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022e80:	9718      	str	r7, [sp, #96]	@ 0x60
 8022e82:	970b      	str	r7, [sp, #44]	@ 0x2c
 8022e84:	443e      	add	r6, r7
 8022e86:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8022e8a:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022e8e:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022e92:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8022e96:	361c      	adds	r6, #28
 8022e98:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 8022e9c:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8022ea0:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8022ea4:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8022ea8:	432f      	orrs	r7, r5
 8022eaa:	9d04      	ldr	r5, [sp, #16]
 8022eac:	ea8b 0505 	eor.w	r5, fp, r5
 8022eb0:	9b08      	ldr	r3, [sp, #32]
 8022eb2:	405d      	eors	r5, r3
 8022eb4:	9b06      	ldr	r3, [sp, #24]
 8022eb6:	405d      	eors	r5, r3
 8022eb8:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022ebc:	9519      	str	r5, [sp, #100]	@ 0x64
 8022ebe:	9506      	str	r5, [sp, #24]
 8022ec0:	442f      	add	r7, r5
 8022ec2:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8022ec6:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8022eca:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8022ece:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022ed2:	371c      	adds	r7, #28
 8022ed4:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8022ed8:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8022edc:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8022ee0:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8022ee4:	ea4c 0c04 	orr.w	ip, ip, r4
 8022ee8:	9c05      	ldr	r4, [sp, #20]
 8022eea:	ea8a 0404 	eor.w	r4, sl, r4
 8022eee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022ef0:	406c      	eors	r4, r5
 8022ef2:	9b07      	ldr	r3, [sp, #28]
 8022ef4:	405c      	eors	r4, r3
 8022ef6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022efa:	941a      	str	r4, [sp, #104]	@ 0x68
 8022efc:	9407      	str	r4, [sp, #28]
 8022efe:	44a4      	add	ip, r4
 8022f00:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8022f04:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8022f08:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8022f0c:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8022f10:	f10c 0c1c 	add.w	ip, ip, #28
 8022f14:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8022f18:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8022f1c:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8022f20:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8022f24:	4320      	orrs	r0, r4
 8022f26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022f28:	ea89 0404 	eor.w	r4, r9, r4
 8022f2c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022f2e:	406c      	eors	r4, r5
 8022f30:	9b08      	ldr	r3, [sp, #32]
 8022f32:	405c      	eors	r4, r3
 8022f34:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022f38:	941b      	str	r4, [sp, #108]	@ 0x6c
 8022f3a:	9408      	str	r4, [sp, #32]
 8022f3c:	4420      	add	r0, r4
 8022f3e:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8022f42:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022f46:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022f4a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022f4e:	301c      	adds	r0, #28
 8022f50:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8022f54:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8022f58:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 8022f5c:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8022f60:	430d      	orrs	r5, r1
 8022f62:	9906      	ldr	r1, [sp, #24]
 8022f64:	ea8e 0101 	eor.w	r1, lr, r1
 8022f68:	9c00      	ldr	r4, [sp, #0]
 8022f6a:	4061      	eors	r1, r4
 8022f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f6e:	4059      	eors	r1, r3
 8022f70:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022f74:	911c      	str	r1, [sp, #112]	@ 0x70
 8022f76:	9109      	str	r1, [sp, #36]	@ 0x24
 8022f78:	440d      	add	r5, r1
 8022f7a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8022f7e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8022f82:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8022f86:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8022f8a:	351c      	adds	r5, #28
 8022f8c:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8022f90:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8022f94:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8022f98:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 8022f9c:	4314      	orrs	r4, r2
 8022f9e:	9903      	ldr	r1, [sp, #12]
 8022fa0:	9a07      	ldr	r2, [sp, #28]
 8022fa2:	404a      	eors	r2, r1
 8022fa4:	9901      	ldr	r1, [sp, #4]
 8022fa6:	404a      	eors	r2, r1
 8022fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022faa:	405a      	eors	r2, r3
 8022fac:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022fb0:	921d      	str	r2, [sp, #116]	@ 0x74
 8022fb2:	920a      	str	r2, [sp, #40]	@ 0x28
 8022fb4:	4414      	add	r4, r2
 8022fb6:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022fba:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022fbe:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022fc2:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022fc6:	341c      	adds	r4, #28
 8022fc8:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 8022fcc:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022fd0:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8022fd4:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8022fd8:	4311      	orrs	r1, r2
 8022fda:	9a04      	ldr	r2, [sp, #16]
 8022fdc:	9e08      	ldr	r6, [sp, #32]
 8022fde:	4072      	eors	r2, r6
 8022fe0:	9e02      	ldr	r6, [sp, #8]
 8022fe2:	4072      	eors	r2, r6
 8022fe4:	9b00      	ldr	r3, [sp, #0]
 8022fe6:	405a      	eors	r2, r3
 8022fe8:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8022fec:	960e      	str	r6, [sp, #56]	@ 0x38
 8022fee:	9600      	str	r6, [sp, #0]
 8022ff0:	4431      	add	r1, r6
 8022ff2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8022ff6:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022ffa:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8022ffe:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8023002:	311c      	adds	r1, #28
 8023004:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8023008:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 802300c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8023010:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 8023014:	4332      	orrs	r2, r6
 8023016:	9f05      	ldr	r7, [sp, #20]
 8023018:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802301a:	407e      	eors	r6, r7
 802301c:	ea8b 0606 	eor.w	r6, fp, r6
 8023020:	9b01      	ldr	r3, [sp, #4]
 8023022:	405e      	eors	r6, r3
 8023024:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8023028:	930f      	str	r3, [sp, #60]	@ 0x3c
 802302a:	9301      	str	r3, [sp, #4]
 802302c:	441a      	add	r2, r3
 802302e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8023032:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8023036:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802303a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802303e:	321c      	adds	r2, #28
 8023040:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8023044:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8023048:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 802304c:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8023050:	433e      	orrs	r6, r7
 8023052:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023056:	405f      	eors	r7, r3
 8023058:	ea8a 0707 	eor.w	r7, sl, r7
 802305c:	9b02      	ldr	r3, [sp, #8]
 802305e:	405f      	eors	r7, r3
 8023060:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8023064:	9710      	str	r7, [sp, #64]	@ 0x40
 8023066:	9702      	str	r7, [sp, #8]
 8023068:	443e      	add	r6, r7
 802306a:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 802306e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8023072:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8023076:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802307a:	361c      	adds	r6, #28
 802307c:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8023080:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8023084:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8023088:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 802308c:	4338      	orrs	r0, r7
 802308e:	9b06      	ldr	r3, [sp, #24]
 8023090:	9f00      	ldr	r7, [sp, #0]
 8023092:	405f      	eors	r7, r3
 8023094:	ea89 0707 	eor.w	r7, r9, r7
 8023098:	ea8b 0b07 	eor.w	fp, fp, r7
 802309c:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 80230a0:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80230a4:	4460      	add	r0, ip
 80230a6:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 80230aa:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80230ae:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80230b2:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80230b6:	301c      	adds	r0, #28
 80230b8:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 80230bc:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 80230c0:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 80230c4:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 80230c8:	433d      	orrs	r5, r7
 80230ca:	9f07      	ldr	r7, [sp, #28]
 80230cc:	9b01      	ldr	r3, [sp, #4]
 80230ce:	405f      	eors	r7, r3
 80230d0:	ea8e 0707 	eor.w	r7, lr, r7
 80230d4:	ea8a 0a07 	eor.w	sl, sl, r7
 80230d8:	ea4f 78fa 	mov.w	r8, sl, ror #31
 80230dc:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80230e0:	4445      	add	r5, r8
 80230e2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80230e6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80230ea:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80230ee:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80230f2:	351c      	adds	r5, #28
 80230f4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 80230f8:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 80230fc:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8023100:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 8023104:	433c      	orrs	r4, r7
 8023106:	9b08      	ldr	r3, [sp, #32]
 8023108:	9f02      	ldr	r7, [sp, #8]
 802310a:	405f      	eors	r7, r3
 802310c:	9b03      	ldr	r3, [sp, #12]
 802310e:	405f      	eors	r7, r3
 8023110:	ea89 0707 	eor.w	r7, r9, r7
 8023114:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8023118:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 802311c:	444c      	add	r4, r9
 802311e:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8023122:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8023126:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802312a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802312e:	341c      	adds	r4, #28
 8023130:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8023134:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8023138:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 802313c:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8023140:	4339      	orrs	r1, r7
 8023142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023144:	ea83 070c 	eor.w	r7, r3, ip
 8023148:	9b04      	ldr	r3, [sp, #16]
 802314a:	405f      	eors	r7, r3
 802314c:	ea8e 0707 	eor.w	r7, lr, r7
 8023150:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8023154:	9714      	str	r7, [sp, #80]	@ 0x50
 8023156:	970c      	str	r7, [sp, #48]	@ 0x30
 8023158:	4439      	add	r1, r7
 802315a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802315e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8023162:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8023166:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802316a:	311c      	adds	r1, #28
 802316c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8023170:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8023174:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8023178:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 802317c:	433a      	orrs	r2, r7
 802317e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023180:	ea87 0708 	eor.w	r7, r7, r8
 8023184:	9b05      	ldr	r3, [sp, #20]
 8023186:	405f      	eors	r7, r3
 8023188:	9b03      	ldr	r3, [sp, #12]
 802318a:	405f      	eors	r7, r3
 802318c:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8023190:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8023194:	445a      	add	r2, fp
 8023196:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802319a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802319e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80231a2:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80231a6:	321c      	adds	r2, #28
 80231a8:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 80231ac:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 80231b0:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 80231b4:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 80231b8:	4337      	orrs	r7, r6
 80231ba:	9e00      	ldr	r6, [sp, #0]
 80231bc:	ea86 0609 	eor.w	r6, r6, r9
 80231c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231c2:	405e      	eors	r6, r3
 80231c4:	9b04      	ldr	r3, [sp, #16]
 80231c6:	405e      	eors	r6, r3
 80231c8:	ea4f 7af6 	mov.w	sl, r6, ror #31
 80231cc:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 80231d0:	4457      	add	r7, sl
 80231d2:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 80231d6:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 80231da:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 80231de:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80231e2:	371c      	adds	r7, #28
 80231e4:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 80231e8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80231ec:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80231f0:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 80231f4:	4330      	orrs	r0, r6
 80231f6:	9e01      	ldr	r6, [sp, #4]
 80231f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231fa:	405e      	eors	r6, r3
 80231fc:	9b06      	ldr	r3, [sp, #24]
 80231fe:	405e      	eors	r6, r3
 8023200:	9b05      	ldr	r3, [sp, #20]
 8023202:	405e      	eors	r6, r3
 8023204:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8023208:	9617      	str	r6, [sp, #92]	@ 0x5c
 802320a:	9603      	str	r6, [sp, #12]
 802320c:	4430      	add	r0, r6
 802320e:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8023212:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8023216:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802321a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802321e:	301c      	adds	r0, #28
 8023220:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8023224:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8023228:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 802322c:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8023230:	432e      	orrs	r6, r5
 8023232:	9d02      	ldr	r5, [sp, #8]
 8023234:	ea85 050b 	eor.w	r5, r5, fp
 8023238:	9b07      	ldr	r3, [sp, #28]
 802323a:	405d      	eors	r5, r3
 802323c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802323e:	405d      	eors	r5, r3
 8023240:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8023244:	9518      	str	r5, [sp, #96]	@ 0x60
 8023246:	9504      	str	r5, [sp, #16]
 8023248:	442e      	add	r6, r5
 802324a:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 802324e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8023252:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8023256:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802325a:	361c      	adds	r6, #28
 802325c:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8023260:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8023264:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8023268:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 802326c:	432c      	orrs	r4, r5
 802326e:	ea8c 050a 	eor.w	r5, ip, sl
 8023272:	9b08      	ldr	r3, [sp, #32]
 8023274:	405d      	eors	r5, r3
 8023276:	9b06      	ldr	r3, [sp, #24]
 8023278:	405d      	eors	r5, r3
 802327a:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802327e:	9519      	str	r5, [sp, #100]	@ 0x64
 8023280:	9505      	str	r5, [sp, #20]
 8023282:	442c      	add	r4, r5
 8023284:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8023288:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802328c:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8023290:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8023294:	341c      	adds	r4, #28
 8023296:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 802329a:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 802329e:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 80232a2:	9d03      	ldr	r5, [sp, #12]
 80232a4:	ea88 0305 	eor.w	r3, r8, r5
 80232a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80232aa:	406b      	eors	r3, r5
 80232ac:	9d07      	ldr	r5, [sp, #28]
 80232ae:	406b      	eors	r3, r5
 80232b0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80232b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80232b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80232b8:	4419      	add	r1, r3
 80232ba:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80232be:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 80236bc <mg_sha1_transform+0xf84>
 80232c2:	4471      	add	r1, lr
 80232c4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 80232c8:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 80232cc:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80232d0:	9b04      	ldr	r3, [sp, #16]
 80232d2:	ea89 0303 	eor.w	r3, r9, r3
 80232d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80232d8:	406b      	eors	r3, r5
 80232da:	9d08      	ldr	r5, [sp, #32]
 80232dc:	406b      	eors	r3, r5
 80232de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80232e2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80232e4:	9306      	str	r3, [sp, #24]
 80232e6:	441a      	add	r2, r3
 80232e8:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80232ec:	4472      	add	r2, lr
 80232ee:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 80232f2:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 80232f6:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 80232fa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80232fc:	9d05      	ldr	r5, [sp, #20]
 80232fe:	406f      	eors	r7, r5
 8023300:	9d00      	ldr	r5, [sp, #0]
 8023302:	406f      	eors	r7, r5
 8023304:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023306:	406f      	eors	r7, r5
 8023308:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802330c:	971c      	str	r7, [sp, #112]	@ 0x70
 802330e:	9707      	str	r7, [sp, #28]
 8023310:	443b      	add	r3, r7
 8023312:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8023316:	4473      	add	r3, lr
 8023318:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 802331c:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8023320:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8023324:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023326:	ea8b 0707 	eor.w	r7, fp, r7
 802332a:	9d01      	ldr	r5, [sp, #4]
 802332c:	406f      	eors	r7, r5
 802332e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023330:	406f      	eors	r7, r5
 8023332:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8023336:	971d      	str	r7, [sp, #116]	@ 0x74
 8023338:	9708      	str	r7, [sp, #32]
 802333a:	4438      	add	r0, r7
 802333c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8023340:	4470      	add	r0, lr
 8023342:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8023346:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 802334a:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 802334e:	9e06      	ldr	r6, [sp, #24]
 8023350:	ea8a 0606 	eor.w	r6, sl, r6
 8023354:	9d02      	ldr	r5, [sp, #8]
 8023356:	406e      	eors	r6, r5
 8023358:	9d00      	ldr	r5, [sp, #0]
 802335a:	406e      	eors	r6, r5
 802335c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8023360:	960e      	str	r6, [sp, #56]	@ 0x38
 8023362:	9600      	str	r6, [sp, #0]
 8023364:	4437      	add	r7, r6
 8023366:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 802336a:	4477      	add	r7, lr
 802336c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8023370:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8023374:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8023378:	9c03      	ldr	r4, [sp, #12]
 802337a:	9d07      	ldr	r5, [sp, #28]
 802337c:	406c      	eors	r4, r5
 802337e:	ea8c 0404 	eor.w	r4, ip, r4
 8023382:	9d01      	ldr	r5, [sp, #4]
 8023384:	406c      	eors	r4, r5
 8023386:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802338a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802338c:	9401      	str	r4, [sp, #4]
 802338e:	4426      	add	r6, r4
 8023390:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8023394:	4476      	add	r6, lr
 8023396:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 802339a:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 802339e:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 80233a2:	9904      	ldr	r1, [sp, #16]
 80233a4:	9c08      	ldr	r4, [sp, #32]
 80233a6:	4061      	eors	r1, r4
 80233a8:	ea88 0101 	eor.w	r1, r8, r1
 80233ac:	9c02      	ldr	r4, [sp, #8]
 80233ae:	4061      	eors	r1, r4
 80233b0:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80233b4:	9110      	str	r1, [sp, #64]	@ 0x40
 80233b6:	440d      	add	r5, r1
 80233b8:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80233bc:	4475      	add	r5, lr
 80233be:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 80233c2:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 80233c6:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 80233ca:	9a05      	ldr	r2, [sp, #20]
 80233cc:	9c00      	ldr	r4, [sp, #0]
 80233ce:	4062      	eors	r2, r4
 80233d0:	ea89 0202 	eor.w	r2, r9, r2
 80233d4:	ea8c 0202 	eor.w	r2, ip, r2
 80233d8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80233dc:	9211      	str	r2, [sp, #68]	@ 0x44
 80233de:	4496      	add	lr, r2
 80233e0:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 80233e4:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 80233e8:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 80233ec:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 80233f0:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 80233f4:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 80233f8:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 80233fc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8023400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023402:	9c01      	ldr	r4, [sp, #4]
 8023404:	4063      	eors	r3, r4
 8023406:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023408:	4063      	eors	r3, r4
 802340a:	ea88 0303 	eor.w	r3, r8, r3
 802340e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8023412:	9312      	str	r3, [sp, #72]	@ 0x48
 8023414:	449c      	add	ip, r3
 8023416:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 802341a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 802341e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8023422:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8023426:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 802342a:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 802342e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8023432:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8023436:	9806      	ldr	r0, [sp, #24]
 8023438:	4048      	eors	r0, r1
 802343a:	ea8b 0000 	eor.w	r0, fp, r0
 802343e:	ea89 0000 	eor.w	r0, r9, r0
 8023442:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8023446:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023448:	4480      	add	r8, r0
 802344a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 802344e:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8023452:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8023456:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 802345a:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 802345e:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8023462:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8023466:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 802346a:	9702      	str	r7, [sp, #8]
 802346c:	9f07      	ldr	r7, [sp, #28]
 802346e:	ea87 0902 	eor.w	r9, r7, r2
 8023472:	ea8a 0909 	eor.w	r9, sl, r9
 8023476:	ea84 0909 	eor.w	r9, r4, r9
 802347a:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802347e:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8023482:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8023486:	9c02      	ldr	r4, [sp, #8]
 8023488:	444c      	add	r4, r9
 802348a:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 802348e:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8023492:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8023496:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802349a:	3756      	adds	r7, #86	@ 0x56
 802349c:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 80234a0:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80234a4:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80234a8:	9c08      	ldr	r4, [sp, #32]
 80234aa:	ea84 0903 	eor.w	r9, r4, r3
 80234ae:	9c03      	ldr	r4, [sp, #12]
 80234b0:	ea84 0909 	eor.w	r9, r4, r9
 80234b4:	ea8b 0909 	eor.w	r9, fp, r9
 80234b8:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80234bc:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 80234c0:	444e      	add	r6, r9
 80234c2:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80234c6:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 80234ca:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 80234ce:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 80234d2:	3656      	adds	r6, #86	@ 0x56
 80234d4:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 80234d8:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 80234dc:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 80234e0:	9c00      	ldr	r4, [sp, #0]
 80234e2:	ea84 0b00 	eor.w	fp, r4, r0
 80234e6:	9c04      	ldr	r4, [sp, #16]
 80234e8:	ea84 0b0b 	eor.w	fp, r4, fp
 80234ec:	ea8a 0b0b 	eor.w	fp, sl, fp
 80234f0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80234f4:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 80234f8:	445d      	add	r5, fp
 80234fa:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80234fe:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8023502:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8023506:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 802350a:	3556      	adds	r5, #86	@ 0x56
 802350c:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8023510:	9602      	str	r6, [sp, #8]
 8023512:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8023516:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 802351a:	9c01      	ldr	r4, [sp, #4]
 802351c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802351e:	ea84 0a06 	eor.w	sl, r4, r6
 8023522:	9c05      	ldr	r4, [sp, #20]
 8023524:	ea84 0a0a 	eor.w	sl, r4, sl
 8023528:	9c03      	ldr	r4, [sp, #12]
 802352a:	ea84 0a0a 	eor.w	sl, r4, sl
 802352e:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8023532:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8023536:	44d6      	add	lr, sl
 8023538:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 802353c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8023540:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8023544:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8023548:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 802354c:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8023550:	9e02      	ldr	r6, [sp, #8]
 8023552:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8023556:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802355a:	ea81 0109 	eor.w	r1, r1, r9
 802355e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023560:	4071      	eors	r1, r6
 8023562:	9c04      	ldr	r4, [sp, #16]
 8023564:	4061      	eors	r1, r4
 8023566:	ea4f 71f1 	mov.w	r1, r1, ror #31
 802356a:	9118      	str	r1, [sp, #96]	@ 0x60
 802356c:	448c      	add	ip, r1
 802356e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8023572:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8023576:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 802357a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 802357e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8023582:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8023586:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 802358a:	9c02      	ldr	r4, [sp, #8]
 802358c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8023590:	ea82 020b 	eor.w	r2, r2, fp
 8023594:	9c06      	ldr	r4, [sp, #24]
 8023596:	4062      	eors	r2, r4
 8023598:	9c05      	ldr	r4, [sp, #20]
 802359a:	4062      	eors	r2, r4
 802359c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80235a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80235a2:	4490      	add	r8, r2
 80235a4:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 80235a8:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 80235ac:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 80235b0:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 80235b4:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 80235b8:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 80235bc:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 80235c0:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 80235c4:	ea83 030a 	eor.w	r3, r3, sl
 80235c8:	9c07      	ldr	r4, [sp, #28]
 80235ca:	4063      	eors	r3, r4
 80235cc:	4073      	eors	r3, r6
 80235ce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80235d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80235d4:	441f      	add	r7, r3
 80235d6:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 80235da:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 80235de:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 80235e2:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 80235e6:	3756      	adds	r7, #86	@ 0x56
 80235e8:	9e02      	ldr	r6, [sp, #8]
 80235ea:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 80235ee:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80235f2:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80235f6:	4048      	eors	r0, r1
 80235f8:	9908      	ldr	r1, [sp, #32]
 80235fa:	4048      	eors	r0, r1
 80235fc:	9c06      	ldr	r4, [sp, #24]
 80235fe:	4060      	eors	r0, r4
 8023600:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8023604:	901b      	str	r0, [sp, #108]	@ 0x6c
 8023606:	4406      	add	r6, r0
 8023608:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 802360c:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8023610:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8023614:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8023618:	3656      	adds	r6, #86	@ 0x56
 802361a:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 802361e:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8023622:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8023626:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8023628:	406a      	eors	r2, r5
 802362a:	9d00      	ldr	r5, [sp, #0]
 802362c:	406a      	eors	r2, r5
 802362e:	9c07      	ldr	r4, [sp, #28]
 8023630:	4062      	eors	r2, r4
 8023632:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8023636:	921c      	str	r2, [sp, #112]	@ 0x70
 8023638:	4411      	add	r1, r2
 802363a:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 802363e:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8023642:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8023646:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 802364a:	3156      	adds	r1, #86	@ 0x56
 802364c:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8023650:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8023654:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8023658:	ea89 0903 	eor.w	r9, r9, r3
 802365c:	9b01      	ldr	r3, [sp, #4]
 802365e:	ea83 0909 	eor.w	r9, r3, r9
 8023662:	9c08      	ldr	r4, [sp, #32]
 8023664:	ea84 0309 	eor.w	r3, r4, r9
 8023668:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802366c:	931d      	str	r3, [sp, #116]	@ 0x74
 802366e:	4413      	add	r3, r2
 8023670:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8023674:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8023678:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 802367c:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8023680:	3356      	adds	r3, #86	@ 0x56
 8023682:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8023686:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023688:	6802      	ldr	r2, [r0, #0]
 802368a:	441a      	add	r2, r3
 802368c:	6002      	str	r2, [r0, #0]
  state[1] += b;
 802368e:	6843      	ldr	r3, [r0, #4]
 8023690:	440b      	add	r3, r1
 8023692:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8023694:	6883      	ldr	r3, [r0, #8]
 8023696:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 802369a:	6083      	str	r3, [r0, #8]
  state[3] += d;
 802369c:	68c3      	ldr	r3, [r0, #12]
 802369e:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 80236a2:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 80236a4:	6903      	ldr	r3, [r0, #16]
 80236a6:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 80236aa:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 80236ac:	2240      	movs	r2, #64	@ 0x40
 80236ae:	2100      	movs	r1, #0
 80236b0:	a80e      	add	r0, sp, #56	@ 0x38
 80236b2:	f00a f92d 	bl	802d910 <memset>
}
 80236b6:	b01f      	add	sp, #124	@ 0x7c
 80236b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236bc:	ca62c1d6 	.word	0xca62c1d6

080236c0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80236c0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80236c2:	fb01 f400 	mul.w	r4, r1, r0
 80236c6:	4620      	mov	r0, r4
 80236c8:	f7f8 f8d6 	bl	801b878 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80236cc:	4605      	mov	r5, r0
 80236ce:	b118      	cbz	r0, 80236d8 <mg_calloc+0x18>
 80236d0:	4622      	mov	r2, r4
 80236d2:	2100      	movs	r1, #0
 80236d4:	f00a f91c 	bl	802d910 <memset>
}
 80236d8:	4628      	mov	r0, r5
 80236da:	bd38      	pop	{r3, r4, r5, pc}

080236dc <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80236dc:	b570      	push	{r4, r5, r6, lr}
 80236de:	4605      	mov	r5, r0
 80236e0:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 80236e2:	6811      	ldr	r1, [r2, #0]
 80236e4:	1d0c      	adds	r4, r1, #4
 80236e6:	6014      	str	r4, [r2, #0]
 80236e8:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 80236ea:	f101 0408 	add.w	r4, r1, #8
 80236ee:	6014      	str	r4, [r2, #0]
 80236f0:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80236f2:	b923      	cbnz	r3, 80236fe <mg_print_esc+0x22>
 80236f4:	b11c      	cbz	r4, 80236fe <mg_print_esc+0x22>
 80236f6:	4620      	mov	r0, r4
 80236f8:	f7ec fdd2 	bl	80102a0 <strlen>
 80236fc:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 80236fe:	4622      	mov	r2, r4
 8023700:	4631      	mov	r1, r6
 8023702:	4628      	mov	r0, r5
 8023704:	f7fe fd65 	bl	80221d2 <qcpy>
}
 8023708:	bd70      	pop	{r4, r5, r6, pc}

0802370a <getpeer>:
                                     bool lsn) {
 802370a:	b570      	push	{r4, r5, r6, lr}
 802370c:	460d      	mov	r5, r1
 802370e:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8023710:	6804      	ldr	r4, [r0, #0]
 8023712:	e000      	b.n	8023716 <getpeer+0xc>
 8023714:	6824      	ldr	r4, [r4, #0]
 8023716:	b364      	cbz	r4, 8023772 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8023718:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802371c:	f013 0f10 	tst.w	r3, #16
 8023720:	d008      	beq.n	8023734 <getpeer+0x2a>
 8023722:	69a8      	ldr	r0, [r5, #24]
 8023724:	b130      	cbz	r0, 8023734 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8023726:	2204      	movs	r2, #4
 8023728:	f104 011c 	add.w	r1, r4, #28
 802372c:	300e      	adds	r0, #14
 802372e:	f00a f85b 	bl	802d7e8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8023732:	b1f0      	cbz	r0, 8023772 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8023734:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023738:	f013 0301 	ands.w	r3, r3, #1
 802373c:	d005      	beq.n	802374a <getpeer+0x40>
 802373e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8023740:	b11a      	cbz	r2, 802374a <getpeer+0x40>
 8023742:	8b21      	ldrh	r1, [r4, #24]
 8023744:	8852      	ldrh	r2, [r2, #2]
 8023746:	4291      	cmp	r1, r2
 8023748:	d013      	beq.n	8023772 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802374a:	2b00      	cmp	r3, #0
 802374c:	d1e2      	bne.n	8023714 <getpeer+0xa>
 802374e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8023750:	2b00      	cmp	r3, #0
 8023752:	d0df      	beq.n	8023714 <getpeer+0xa>
 8023754:	8b21      	ldrh	r1, [r4, #24]
 8023756:	885a      	ldrh	r2, [r3, #2]
 8023758:	4291      	cmp	r1, r2
 802375a:	d1db      	bne.n	8023714 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802375c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8023760:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8023764:	42b2      	cmp	r2, r6
 8023766:	d1d5      	bne.n	8023714 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8023768:	b91e      	cbnz	r6, 8023772 <getpeer+0x68>
 802376a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 802376c:	881b      	ldrh	r3, [r3, #0]
 802376e:	429a      	cmp	r2, r3
 8023770:	d1d0      	bne.n	8023714 <getpeer+0xa>
}
 8023772:	4620      	mov	r0, r4
 8023774:	bd70      	pop	{r4, r5, r6, pc}

08023776 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8023776:	b508      	push	{r3, lr}
  putchar(c);
 8023778:	f009 fb24 	bl	802cdc4 <putchar>
}
 802377c:	bd08      	pop	{r3, pc}

0802377e <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 802377e:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8023782:	6802      	ldr	r2, [r0, #0]
 8023784:	6883      	ldr	r3, [r0, #8]
}
 8023786:	58d0      	ldr	r0, [r2, r3]
 8023788:	4770      	bx	lr
	...

0802378c <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 802378c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023790:	b08b      	sub	sp, #44	@ 0x2c
 8023792:	4604      	mov	r4, r0
 8023794:	460e      	mov	r6, r1
 8023796:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8023798:	2320      	movs	r3, #32
 802379a:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802379c:	ab09      	add	r3, sp, #36	@ 0x24
 802379e:	9303      	str	r3, [sp, #12]
 80237a0:	ab04      	add	r3, sp, #16
 80237a2:	9302      	str	r3, [sp, #8]
 80237a4:	ab05      	add	r3, sp, #20
 80237a6:	9301      	str	r3, [sp, #4]
 80237a8:	ab06      	add	r3, sp, #24
 80237aa:	9300      	str	r3, [sp, #0]
 80237ac:	ab07      	add	r3, sp, #28
 80237ae:	aa08      	add	r2, sp, #32
 80237b0:	4928      	ldr	r1, [pc, #160]	@ (8023854 <parse_net+0xc8>)
 80237b2:	f009 fd0b 	bl	802d1cc <sscanf>
 80237b6:	2805      	cmp	r0, #5
 80237b8:	d133      	bne.n	8023822 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 80237ba:	9c08      	ldr	r4, [sp, #32]
 80237bc:	4620      	mov	r0, r4
 80237be:	f7fe fd6e 	bl	802229e <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 80237c2:	4603      	mov	r3, r0
 80237c4:	2800      	cmp	r0, #0
 80237c6:	d03b      	beq.n	8023840 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 80237c8:	9f07      	ldr	r7, [sp, #28]
 80237ca:	4638      	mov	r0, r7
 80237cc:	f7fe fd67 	bl	802229e <isbyte>
 80237d0:	4603      	mov	r3, r0
 80237d2:	2800      	cmp	r0, #0
 80237d4:	d034      	beq.n	8023840 <parse_net+0xb4>
 80237d6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80237da:	4648      	mov	r0, r9
 80237dc:	f7fe fd5f 	bl	802229e <isbyte>
 80237e0:	4603      	mov	r3, r0
 80237e2:	b368      	cbz	r0, 8023840 <parse_net+0xb4>
 80237e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80237e8:	4640      	mov	r0, r8
 80237ea:	f7fe fd58 	bl	802229e <isbyte>
 80237ee:	4603      	mov	r3, r0
 80237f0:	b330      	cbz	r0, 8023840 <parse_net+0xb4>
 80237f2:	9b04      	ldr	r3, [sp, #16]
 80237f4:	2b00      	cmp	r3, #0
 80237f6:	db29      	blt.n	802384c <parse_net+0xc0>
 80237f8:	2b20      	cmp	r3, #32
 80237fa:	dc29      	bgt.n	8023850 <parse_net+0xc4>
    len = n;
 80237fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 80237fe:	043a      	lsls	r2, r7, #16
 8023800:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8023804:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8023808:	ea42 0208 	orr.w	r2, r2, r8
 802380c:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 802380e:	9a04      	ldr	r2, [sp, #16]
 8023810:	b1d2      	cbz	r2, 8023848 <parse_net+0xbc>
 8023812:	f1c2 0220 	rsb	r2, r2, #32
 8023816:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802381a:	fa01 f202 	lsl.w	r2, r1, r2
 802381e:	602a      	str	r2, [r5, #0]
 8023820:	e00e      	b.n	8023840 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8023822:	ab09      	add	r3, sp, #36	@ 0x24
 8023824:	9302      	str	r3, [sp, #8]
 8023826:	ab05      	add	r3, sp, #20
 8023828:	9301      	str	r3, [sp, #4]
 802382a:	ab06      	add	r3, sp, #24
 802382c:	9300      	str	r3, [sp, #0]
 802382e:	ab07      	add	r3, sp, #28
 8023830:	aa08      	add	r2, sp, #32
 8023832:	4909      	ldr	r1, [pc, #36]	@ (8023858 <parse_net+0xcc>)
 8023834:	4620      	mov	r0, r4
 8023836:	f009 fcc9 	bl	802d1cc <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802383a:	2804      	cmp	r0, #4
 802383c:	d0bd      	beq.n	80237ba <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 802383e:	2300      	movs	r3, #0
}
 8023840:	4618      	mov	r0, r3
 8023842:	b00b      	add	sp, #44	@ 0x2c
 8023844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8023848:	2200      	movs	r2, #0
 802384a:	e7e8      	b.n	802381e <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 802384c:	2300      	movs	r3, #0
 802384e:	e7f7      	b.n	8023840 <parse_net+0xb4>
 8023850:	2300      	movs	r3, #0
  return len;
 8023852:	e7f5      	b.n	8023840 <parse_net+0xb4>
 8023854:	0803b9c8 	.word	0x0803b9c8
 8023858:	0803b9dc 	.word	0x0803b9dc

0802385c <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 802385c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023860:	4691      	mov	r9, r2
 8023862:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8023864:	4604      	mov	r4, r0
 8023866:	b150      	cbz	r0, 802387e <mg_base64_decode+0x22>
 8023868:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 802386c:	0889      	lsrs	r1, r1, #2
 802386e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023872:	3101      	adds	r1, #1
 8023874:	4559      	cmp	r1, fp
 8023876:	d847      	bhi.n	8023908 <mg_base64_decode+0xac>
  size_t len = 0;
 8023878:	f04f 0800 	mov.w	r8, #0
 802387c:	e003      	b.n	8023886 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 802387e:	4682      	mov	sl, r0
 8023880:	e7f4      	b.n	802386c <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8023882:	4690      	mov	r8, r2
    src += 4;
 8023884:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8023886:	2c00      	cmp	r4, #0
 8023888:	d03a      	beq.n	8023900 <mg_base64_decode+0xa4>
 802388a:	1ce3      	adds	r3, r4, #3
 802388c:	4553      	cmp	r3, sl
 802388e:	d237      	bcs.n	8023900 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8023890:	7820      	ldrb	r0, [r4, #0]
 8023892:	f7fd f8a5 	bl	80209e0 <mg_base64_decode_single>
 8023896:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8023898:	7860      	ldrb	r0, [r4, #1]
 802389a:	f7fd f8a1 	bl	80209e0 <mg_base64_decode_single>
 802389e:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 80238a0:	78a0      	ldrb	r0, [r4, #2]
 80238a2:	f7fd f89d 	bl	80209e0 <mg_base64_decode_single>
 80238a6:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 80238a8:	78e0      	ldrb	r0, [r4, #3]
 80238aa:	f7fd f899 	bl	80209e0 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 80238ae:	2e40      	cmp	r6, #64	@ 0x40
 80238b0:	d02a      	beq.n	8023908 <mg_base64_decode+0xac>
 80238b2:	2e00      	cmp	r6, #0
 80238b4:	db28      	blt.n	8023908 <mg_base64_decode+0xac>
 80238b6:	2d40      	cmp	r5, #64	@ 0x40
 80238b8:	d026      	beq.n	8023908 <mg_base64_decode+0xac>
 80238ba:	2d00      	cmp	r5, #0
 80238bc:	db24      	blt.n	8023908 <mg_base64_decode+0xac>
 80238be:	2f00      	cmp	r7, #0
 80238c0:	db22      	blt.n	8023908 <mg_base64_decode+0xac>
 80238c2:	2800      	cmp	r0, #0
 80238c4:	db20      	blt.n	8023908 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80238c6:	112b      	asrs	r3, r5, #4
 80238c8:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 80238cc:	f108 0201 	add.w	r2, r8, #1
 80238d0:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 80238d4:	78a3      	ldrb	r3, [r4, #2]
 80238d6:	2b3d      	cmp	r3, #61	@ 0x3d
 80238d8:	d0d3      	beq.n	8023882 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80238da:	10bb      	asrs	r3, r7, #2
 80238dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80238e0:	f108 0102 	add.w	r1, r8, #2
 80238e4:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80238e8:	78e3      	ldrb	r3, [r4, #3]
 80238ea:	2b3d      	cmp	r3, #61	@ 0x3d
 80238ec:	d006      	beq.n	80238fc <mg_base64_decode+0xa0>
 80238ee:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 80238f2:	f108 0803 	add.w	r8, r8, #3
 80238f6:	f809 0001 	strb.w	r0, [r9, r1]
 80238fa:	e7c3      	b.n	8023884 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80238fc:	4688      	mov	r8, r1
 80238fe:	e7c1      	b.n	8023884 <mg_base64_decode+0x28>
  dst[len] = '\0';
 8023900:	2300      	movs	r3, #0
 8023902:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 8023906:	e006      	b.n	8023916 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8023908:	f1bb 0f00 	cmp.w	fp, #0
 802390c:	d006      	beq.n	802391c <mg_base64_decode+0xc0>
 802390e:	f04f 0800 	mov.w	r8, #0
 8023912:	f889 8000 	strb.w	r8, [r9]
}
 8023916:	4640      	mov	r0, r8
 8023918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 802391c:	46d8      	mov	r8, fp
 802391e:	e7fa      	b.n	8023916 <mg_base64_decode+0xba>

08023920 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8023920:	b570      	push	{r4, r5, r6, lr}
 8023922:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8023924:	6843      	ldr	r3, [r0, #4]
 8023926:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 802392a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802392c:	e000      	b.n	8023930 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 802392e:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8023930:	b139      	cbz	r1, 8023942 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8023932:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8023934:	684b      	ldr	r3, [r1, #4]
 8023936:	42ab      	cmp	r3, r5
 8023938:	d1f9      	bne.n	802392e <mg_resolve_cancel+0xe>
 802393a:	4630      	mov	r0, r6
 802393c:	f7fe fe12 	bl	8022564 <mg_dns_free>
 8023940:	e7f5      	b.n	802392e <mg_resolve_cancel+0xe>
}
 8023942:	bd70      	pop	{r4, r5, r6, pc}

08023944 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8023944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023946:	b083      	sub	sp, #12
 8023948:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 802394a:	1886      	adds	r6, r0, r2
 802394c:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 802394e:	f04f 0c00 	mov.w	ip, #0
 8023952:	f8c4 c000 	str.w	ip, [r4]
 8023956:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 802395a:	290b      	cmp	r1, #11
 802395c:	d934      	bls.n	80239c8 <mg_dns_parse_rr+0x84>
 802395e:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8023960:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023964:	d833      	bhi.n	80239ce <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8023966:	42be      	cmp	r6, r7
 8023968:	d301      	bcc.n	802396e <mg_dns_parse_rr+0x2a>
 802396a:	2000      	movs	r0, #0
 802396c:	e02d      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 802396e:	4663      	mov	r3, ip
 8023970:	f8cd c000 	str.w	ip, [sp]
 8023974:	f7fe fed5 	bl	8022722 <mg_dns_parse_name>
 8023978:	b283      	uxth	r3, r0
 802397a:	8023      	strh	r3, [r4, #0]
 802397c:	b34b      	cbz	r3, 80239d2 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 802397e:	3304      	adds	r3, #4
 8023980:	441e      	add	r6, r3
  if (s > e) return 0;
 8023982:	42b7      	cmp	r7, r6
 8023984:	d327      	bcc.n	80239d6 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8023986:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 802398a:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 802398e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023992:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8023994:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8023998:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802399c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80239a0:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80239a2:	b975      	cbnz	r5, 80239c2 <mg_dns_parse_rr+0x7e>
  s += 6;
 80239a4:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 80239a6:	429f      	cmp	r7, r3
 80239a8:	d317      	bcc.n	80239da <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80239aa:	7931      	ldrb	r1, [r6, #4]
 80239ac:	7972      	ldrb	r2, [r6, #5]
 80239ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80239b2:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 80239b4:	4413      	add	r3, r2
 80239b6:	42bb      	cmp	r3, r7
 80239b8:	d811      	bhi.n	80239de <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 80239ba:	fa12 f080 	uxtah	r0, r2, r0
 80239be:	300a      	adds	r0, #10
 80239c0:	e003      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 80239c2:	b280      	uxth	r0, r0
 80239c4:	3004      	adds	r0, #4
 80239c6:	e000      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80239c8:	2000      	movs	r0, #0
}
 80239ca:	b003      	add	sp, #12
 80239cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 80239ce:	2000      	movs	r0, #0
 80239d0:	e7fb      	b.n	80239ca <mg_dns_parse_rr+0x86>
    return 0;
 80239d2:	2000      	movs	r0, #0
 80239d4:	e7f9      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80239d6:	2000      	movs	r0, #0
 80239d8:	e7f7      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80239da:	2000      	movs	r0, #0
 80239dc:	e7f5      	b.n	80239ca <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 80239de:	2000      	movs	r0, #0
 80239e0:	e7f3      	b.n	80239ca <mg_dns_parse_rr+0x86>

080239e2 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80239e2:	b570      	push	{r4, r5, r6, lr}
 80239e4:	4604      	mov	r4, r0
 80239e6:	460d      	mov	r5, r1
 80239e8:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80239ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80239ee:	b103      	cbz	r3, 80239f2 <mg_call+0x10>
 80239f0:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80239f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80239f4:	b11b      	cbz	r3, 80239fe <mg_call+0x1c>
 80239f6:	4632      	mov	r2, r6
 80239f8:	4629      	mov	r1, r5
 80239fa:	4620      	mov	r0, r4
 80239fc:	4798      	blx	r3
}
 80239fe:	bd70      	pop	{r4, r5, r6, pc}

08023a00 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8023a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a02:	4604      	mov	r4, r0
 8023a04:	460d      	mov	r5, r1
 8023a06:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8023a08:	2108      	movs	r1, #8
 8023a0a:	2001      	movs	r0, #1
 8023a0c:	f7ff fe58 	bl	80236c0 <mg_calloc>
  if (fd != NULL) {
 8023a10:	4607      	mov	r7, r0
 8023a12:	b138      	cbz	r0, 8023a24 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8023a14:	68a3      	ldr	r3, [r4, #8]
 8023a16:	4631      	mov	r1, r6
 8023a18:	4628      	mov	r0, r5
 8023a1a:	4798      	blx	r3
 8023a1c:	4605      	mov	r5, r0
 8023a1e:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8023a20:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8023a22:	b108      	cbz	r0, 8023a28 <mg_fs_open+0x28>
}
 8023a24:	4638      	mov	r0, r7
 8023a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8023a28:	4638      	mov	r0, r7
 8023a2a:	f7f7 ffa7 	bl	801b97c <vPortFree>
      fd = NULL;
 8023a2e:	462f      	mov	r7, r5
  return fd;
 8023a30:	e7f8      	b.n	8023a24 <mg_fs_open+0x24>

08023a32 <mg_fs_close>:
  if (fd != NULL) {
 8023a32:	b148      	cbz	r0, 8023a48 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8023a34:	b510      	push	{r4, lr}
 8023a36:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8023a38:	6843      	ldr	r3, [r0, #4]
 8023a3a:	68db      	ldr	r3, [r3, #12]
 8023a3c:	6800      	ldr	r0, [r0, #0]
 8023a3e:	4798      	blx	r3
    free(fd);
 8023a40:	4620      	mov	r0, r4
 8023a42:	f7f7 ff9b 	bl	801b97c <vPortFree>
}
 8023a46:	bd10      	pop	{r4, pc}
 8023a48:	4770      	bx	lr
	...

08023a4c <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8023a4c:	b510      	push	{r4, lr}
 8023a4e:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8023a50:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8023a54:	f7ff ffed 	bl	8023a32 <mg_fs_close>
  c->pfn_data = NULL;
 8023a58:	2200      	movs	r2, #0
 8023a5a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8023a5e:	4b05      	ldr	r3, [pc, #20]	@ (8023a74 <restore_http_cb+0x28>)
 8023a60:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8023a64:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023a68:	f362 13c7 	bfi	r3, r2, #7, #1
 8023a6c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8023a70:	bd10      	pop	{r4, pc}
 8023a72:	bf00      	nop
 8023a74:	0802739d 	.word	0x0802739d

08023a78 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8023a78:	b470      	push	{r4, r5, r6}
 8023a7a:	b083      	sub	sp, #12
 8023a7c:	ab02      	add	r3, sp, #8
 8023a7e:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8023a82:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8023a84:	e000      	b.n	8023a88 <mg_to_size_t+0x10>
 8023a86:	3301      	adds	r3, #1
 8023a88:	9c01      	ldr	r4, [sp, #4]
 8023a8a:	429c      	cmp	r4, r3
 8023a8c:	d905      	bls.n	8023a9a <mg_to_size_t+0x22>
 8023a8e:	9900      	ldr	r1, [sp, #0]
 8023a90:	5cc9      	ldrb	r1, [r1, r3]
 8023a92:	2920      	cmp	r1, #32
 8023a94:	d0f7      	beq.n	8023a86 <mg_to_size_t+0xe>
 8023a96:	2909      	cmp	r1, #9
 8023a98:	d0f5      	beq.n	8023a86 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8023a9a:	429c      	cmp	r4, r3
 8023a9c:	d906      	bls.n	8023aac <mg_to_size_t+0x34>
 8023a9e:	9900      	ldr	r1, [sp, #0]
 8023aa0:	5cc9      	ldrb	r1, [r1, r3]
 8023aa2:	292d      	cmp	r1, #45	@ 0x2d
 8023aa4:	d02c      	beq.n	8023b00 <mg_to_size_t+0x88>
 8023aa6:	2500      	movs	r5, #0
 8023aa8:	4628      	mov	r0, r5
 8023aaa:	e001      	b.n	8023ab0 <mg_to_size_t+0x38>
 8023aac:	2500      	movs	r5, #0
 8023aae:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8023ab0:	429c      	cmp	r4, r3
 8023ab2:	d917      	bls.n	8023ae4 <mg_to_size_t+0x6c>
 8023ab4:	9900      	ldr	r1, [sp, #0]
 8023ab6:	5cc9      	ldrb	r1, [r1, r3]
 8023ab8:	292f      	cmp	r1, #47	@ 0x2f
 8023aba:	d913      	bls.n	8023ae4 <mg_to_size_t+0x6c>
 8023abc:	2939      	cmp	r1, #57	@ 0x39
 8023abe:	d811      	bhi.n	8023ae4 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8023ac0:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8023ac2:	4e15      	ldr	r6, [pc, #84]	@ (8023b18 <mg_to_size_t+0xa0>)
 8023ac4:	42b0      	cmp	r0, r6
 8023ac6:	d81d      	bhi.n	8023b04 <mg_to_size_t+0x8c>
    result *= 10;
 8023ac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8023acc:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8023ad0:	43ce      	mvns	r6, r1
 8023ad2:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8023ad6:	d317      	bcc.n	8023b08 <mg_to_size_t+0x90>
    result += digit;
 8023ad8:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8023adc:	3301      	adds	r3, #1
 8023ade:	3501      	adds	r5, #1
 8023ae0:	e7e6      	b.n	8023ab0 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8023ae2:	3301      	adds	r3, #1
 8023ae4:	429c      	cmp	r4, r3
 8023ae6:	d905      	bls.n	8023af4 <mg_to_size_t+0x7c>
 8023ae8:	9900      	ldr	r1, [sp, #0]
 8023aea:	5cc9      	ldrb	r1, [r1, r3]
 8023aec:	2920      	cmp	r1, #32
 8023aee:	d0f8      	beq.n	8023ae2 <mg_to_size_t+0x6a>
 8023af0:	2909      	cmp	r1, #9
 8023af2:	d0f6      	beq.n	8023ae2 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8023af4:	b155      	cbz	r5, 8023b0c <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8023af6:	429c      	cmp	r4, r3
 8023af8:	d10c      	bne.n	8023b14 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8023afa:	6010      	str	r0, [r2, #0]
  return true;
 8023afc:	2001      	movs	r0, #1
 8023afe:	e006      	b.n	8023b0e <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8023b00:	2000      	movs	r0, #0
 8023b02:	e004      	b.n	8023b0e <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8023b04:	2000      	movs	r0, #0
 8023b06:	e002      	b.n	8023b0e <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8023b08:	2000      	movs	r0, #0
 8023b0a:	e000      	b.n	8023b0e <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8023b0c:	2000      	movs	r0, #0
}
 8023b0e:	b003      	add	sp, #12
 8023b10:	bc70      	pop	{r4, r5, r6}
 8023b12:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8023b14:	2000      	movs	r0, #0
 8023b16:	e7fa      	b.n	8023b0e <mg_to_size_t+0x96>
 8023b18:	19999999 	.word	0x19999999

08023b1c <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8023b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b1e:	4606      	mov	r6, r0
 8023b20:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8023b22:	2400      	movs	r4, #0
 8023b24:	e007      	b.n	8023b36 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023b26:	1933      	adds	r3, r6, r4
 8023b28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023b2c:	2b0a      	cmp	r3, #10
 8023b2e:	d10d      	bne.n	8023b4c <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8023b30:	1c60      	adds	r0, r4, #1
 8023b32:	e01b      	b.n	8023b6c <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8023b34:	3401      	adds	r4, #1
 8023b36:	42bc      	cmp	r4, r7
 8023b38:	d217      	bcs.n	8023b6a <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8023b3a:	5d35      	ldrb	r5, [r6, r4]
 8023b3c:	4628      	mov	r0, r5
 8023b3e:	f7fd f8d4 	bl	8020cea <isok>
 8023b42:	b1a0      	cbz	r0, 8023b6e <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023b44:	2c00      	cmp	r4, #0
 8023b46:	d0f5      	beq.n	8023b34 <mg_http_get_request_len+0x18>
 8023b48:	2d0a      	cmp	r5, #10
 8023b4a:	d0ec      	beq.n	8023b26 <mg_http_get_request_len+0xa>
 8023b4c:	2c03      	cmp	r4, #3
 8023b4e:	d9f1      	bls.n	8023b34 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8023b50:	2d0a      	cmp	r5, #10
 8023b52:	d1ef      	bne.n	8023b34 <mg_http_get_request_len+0x18>
 8023b54:	1933      	adds	r3, r6, r4
 8023b56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023b5a:	2b0d      	cmp	r3, #13
 8023b5c:	d1ea      	bne.n	8023b34 <mg_http_get_request_len+0x18>
 8023b5e:	1933      	adds	r3, r6, r4
 8023b60:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8023b64:	2b0a      	cmp	r3, #10
 8023b66:	d1e5      	bne.n	8023b34 <mg_http_get_request_len+0x18>
 8023b68:	e7e2      	b.n	8023b30 <mg_http_get_request_len+0x14>
  return 0;
 8023b6a:	2000      	movs	r0, #0
}
 8023b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8023b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023b72:	e7fb      	b.n	8023b6c <mg_http_get_request_len+0x50>

08023b74 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8023b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b78:	4605      	mov	r5, r0
 8023b7a:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8023b7c:	4608      	mov	r0, r1
 8023b7e:	f7ec fb8f 	bl	80102a0 <strlen>
 8023b82:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8023b84:	2400      	movs	r4, #0
 8023b86:	e000      	b.n	8023b8a <mg_http_get_header+0x16>
 8023b88:	3401      	adds	r4, #1
 8023b8a:	2c1d      	cmp	r4, #29
 8023b8c:	d819      	bhi.n	8023bc2 <mg_http_get_header+0x4e>
 8023b8e:	1ca3      	adds	r3, r4, #2
 8023b90:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8023b94:	685a      	ldr	r2, [r3, #4]
 8023b96:	b17a      	cbz	r2, 8023bb8 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8023b98:	0123      	lsls	r3, r4, #4
 8023b9a:	3328      	adds	r3, #40	@ 0x28
 8023b9c:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8023ba0:	42b2      	cmp	r2, r6
 8023ba2:	d1f1      	bne.n	8023b88 <mg_http_get_header+0x14>
 8023ba4:	1ca3      	adds	r3, r4, #2
 8023ba6:	011b      	lsls	r3, r3, #4
 8023ba8:	4632      	mov	r2, r6
 8023baa:	4639      	mov	r1, r7
 8023bac:	58e8      	ldr	r0, [r5, r3]
 8023bae:	f7fd f867 	bl	8020c80 <mg_ncasecmp>
 8023bb2:	2800      	cmp	r0, #0
 8023bb4:	d1e8      	bne.n	8023b88 <mg_http_get_header+0x14>
 8023bb6:	e001      	b.n	8023bbc <mg_http_get_header+0x48>
  return NULL;
 8023bb8:	f04f 0800 	mov.w	r8, #0
}
 8023bbc:	4640      	mov	r0, r8
 8023bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8023bc2:	f04f 0800 	mov.w	r8, #0
 8023bc6:	e7f9      	b.n	8023bbc <mg_http_get_header+0x48>

08023bc8 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8023bc8:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8023bca:	6880      	ldr	r0, [r0, #8]
 8023bcc:	f007 f96c 	bl	802aea8 <atoi>
}
 8023bd0:	bd08      	pop	{r3, pc}
	...

08023bd4 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8023bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bd8:	b095      	sub	sp, #84	@ 0x54
 8023bda:	ac08      	add	r4, sp, #32
 8023bdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8023be0:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8023be2:	4606      	mov	r6, r0
  int len = (int) json.len;
 8023be4:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8023be6:	469a      	mov	sl, r3
 8023be8:	b113      	cbz	r3, 8023bf0 <mg_json_get+0x1c>
 8023bea:	2300      	movs	r3, #0
 8023bec:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8023bf0:	9b02      	ldr	r3, [sp, #8]
 8023bf2:	781b      	ldrb	r3, [r3, #0]
 8023bf4:	2b24      	cmp	r3, #36	@ 0x24
 8023bf6:	f040 8232 	bne.w	802405e <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8023bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023bfe:	9303      	str	r3, [sp, #12]
 8023c00:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8023c02:	2301      	movs	r3, #1
 8023c04:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8023c06:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8023c0a:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8023c0c:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8023c10:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8023c12:	465b      	mov	r3, fp
 8023c14:	f8cd a018 	str.w	sl, [sp, #24]
 8023c18:	e190      	b.n	8023f3c <mg_json_get+0x368>
        if (depth == ed) j = i;
 8023c1a:	455f      	cmp	r7, fp
 8023c1c:	d029      	beq.n	8023c72 <mg_json_get+0x9e>
        if (c == '{') {
 8023c1e:	2d7b      	cmp	r5, #123	@ 0x7b
 8023c20:	d029      	beq.n	8023c76 <mg_json_get+0xa2>
        } else if (c == '[') {
 8023c22:	2d5b      	cmp	r5, #91	@ 0x5b
 8023c24:	d047      	beq.n	8023cb6 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023c26:	2d5d      	cmp	r5, #93	@ 0x5d
 8023c28:	d07a      	beq.n	8023d20 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8023c2a:	2d74      	cmp	r5, #116	@ 0x74
 8023c2c:	f000 80a4 	beq.w	8023d78 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8023c30:	2d6e      	cmp	r5, #110	@ 0x6e
 8023c32:	f000 80b0 	beq.w	8023d96 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023c36:	2d66      	cmp	r5, #102	@ 0x66
 8023c38:	f000 80bc 	beq.w	8023db4 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8023c3c:	2d2d      	cmp	r5, #45	@ 0x2d
 8023c3e:	d005      	beq.n	8023c4c <mg_json_get+0x78>
 8023c40:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8023c44:	b2db      	uxtb	r3, r3
 8023c46:	2b09      	cmp	r3, #9
 8023c48:	f200 80c3 	bhi.w	8023dd2 <mg_json_get+0x1fe>
          int numlen = 0;
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8023c50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8023c52:	eba8 0104 	sub.w	r1, r8, r4
 8023c56:	4648      	mov	r0, r9
 8023c58:	f7fd fcc2 	bl	80215e0 <mg_atod>
          i += numlen - 1;
 8023c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023c5e:	3b01      	subs	r3, #1
 8023c60:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8023c62:	455f      	cmp	r7, fp
 8023c64:	f000 80c6 	beq.w	8023df4 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8023c68:	455f      	cmp	r7, fp
 8023c6a:	f000 80da 	beq.w	8023e22 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8023c6e:	2303      	movs	r3, #3
 8023c70:	e163      	b.n	8023f3a <mg_json_get+0x366>
        if (depth == ed) j = i;
 8023c72:	9405      	str	r4, [sp, #20]
 8023c74:	e7d3      	b.n	8023c1e <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023c76:	2f1d      	cmp	r7, #29
 8023c78:	f300 81f4 	bgt.w	8024064 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8023c7c:	455f      	cmp	r7, fp
 8023c7e:	d007      	beq.n	8023c90 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8023c80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023c84:	446b      	add	r3, sp
 8023c86:	f803 5c20 	strb.w	r5, [r3, #-32]
 8023c8a:	3701      	adds	r7, #1
          expecting = S_KEY;
 8023c8c:	2301      	movs	r3, #1
          break;
 8023c8e:	e154      	b.n	8023f3a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8023c90:	9b02      	ldr	r3, [sp, #8]
 8023c92:	9a04      	ldr	r2, [sp, #16]
 8023c94:	5c9b      	ldrb	r3, [r3, r2]
 8023c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c98:	d1f2      	bne.n	8023c80 <mg_json_get+0xac>
 8023c9a:	9b01      	ldr	r3, [sp, #4]
 8023c9c:	9a03      	ldr	r2, [sp, #12]
 8023c9e:	4293      	cmp	r3, r2
 8023ca0:	d1ee      	bne.n	8023c80 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8023ca2:	f10b 0b01 	add.w	fp, fp, #1
 8023ca6:	9b04      	ldr	r3, [sp, #16]
 8023ca8:	3301      	adds	r3, #1
 8023caa:	9304      	str	r3, [sp, #16]
 8023cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023cb0:	9303      	str	r3, [sp, #12]
 8023cb2:	9301      	str	r3, [sp, #4]
 8023cb4:	e7e4      	b.n	8023c80 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023cb6:	2f1d      	cmp	r7, #29
 8023cb8:	f300 81d7 	bgt.w	802406a <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8023cbc:	455f      	cmp	r7, fp
 8023cbe:	d006      	beq.n	8023cce <mg_json_get+0xfa>
          nesting[depth++] = c;
 8023cc0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023cc4:	446a      	add	r2, sp
 8023cc6:	f802 5c20 	strb.w	r5, [r2, #-32]
 8023cca:	3701      	adds	r7, #1
          break;
 8023ccc:	e135      	b.n	8023f3a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8023cce:	9a02      	ldr	r2, [sp, #8]
 8023cd0:	9904      	ldr	r1, [sp, #16]
 8023cd2:	5c52      	ldrb	r2, [r2, r1]
 8023cd4:	2a5b      	cmp	r2, #91	@ 0x5b
 8023cd6:	d1f3      	bne.n	8023cc0 <mg_json_get+0xec>
 8023cd8:	9a01      	ldr	r2, [sp, #4]
 8023cda:	9903      	ldr	r1, [sp, #12]
 8023cdc:	428a      	cmp	r2, r1
 8023cde:	d1ef      	bne.n	8023cc0 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8023ce0:	f10b 0b01 	add.w	fp, fp, #1
 8023ce4:	9804      	ldr	r0, [sp, #16]
 8023ce6:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8023ce8:	2100      	movs	r1, #0
 8023cea:	f8dd c008 	ldr.w	ip, [sp, #8]
 8023cee:	e005      	b.n	8023cfc <mg_json_get+0x128>
              ei *= 10;
 8023cf0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8023cf4:	3a30      	subs	r2, #48	@ 0x30
 8023cf6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8023cfa:	3001      	adds	r0, #1
 8023cfc:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8023d00:	2a5d      	cmp	r2, #93	@ 0x5d
 8023d02:	d001      	beq.n	8023d08 <mg_json_get+0x134>
 8023d04:	2a00      	cmp	r2, #0
 8023d06:	d1f3      	bne.n	8023cf0 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8023d08:	9004      	str	r0, [sp, #16]
 8023d0a:	9103      	str	r1, [sp, #12]
 8023d0c:	b12a      	cbz	r2, 8023d1a <mg_json_get+0x146>
 8023d0e:	4602      	mov	r2, r0
 8023d10:	3201      	adds	r2, #1
 8023d12:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8023d14:	2200      	movs	r2, #0
 8023d16:	9201      	str	r2, [sp, #4]
 8023d18:	e7d2      	b.n	8023cc0 <mg_json_get+0xec>
 8023d1a:	2200      	movs	r2, #0
 8023d1c:	9201      	str	r2, [sp, #4]
 8023d1e:	e7cf      	b.n	8023cc0 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023d20:	2f00      	cmp	r7, #0
 8023d22:	dd82      	ble.n	8023c2a <mg_json_get+0x56>
          MG_EOO(']');
 8023d24:	455f      	cmp	r7, fp
 8023d26:	d020      	beq.n	8023d6a <mg_json_get+0x196>
 8023d28:	3f01      	subs	r7, #1
 8023d2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023d2e:	446b      	add	r3, sp
 8023d30:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023d34:	3302      	adds	r3, #2
 8023d36:	429d      	cmp	r5, r3
 8023d38:	f040 819a 	bne.w	8024070 <mg_json_get+0x49c>
 8023d3c:	455f      	cmp	r7, fp
 8023d3e:	d190      	bne.n	8023c62 <mg_json_get+0x8e>
 8023d40:	9b02      	ldr	r3, [sp, #8]
 8023d42:	9a04      	ldr	r2, [sp, #16]
 8023d44:	5c9b      	ldrb	r3, [r3, r2]
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d18b      	bne.n	8023c62 <mg_json_get+0x8e>
 8023d4a:	9b01      	ldr	r3, [sp, #4]
 8023d4c:	9a03      	ldr	r2, [sp, #12]
 8023d4e:	4293      	cmp	r3, r2
 8023d50:	d187      	bne.n	8023c62 <mg_json_get+0x8e>
 8023d52:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023d56:	f1ba 0f00 	cmp.w	sl, #0
 8023d5a:	d004      	beq.n	8023d66 <mg_json_get+0x192>
 8023d5c:	9b05      	ldr	r3, [sp, #20]
 8023d5e:	1ae3      	subs	r3, r4, r3
 8023d60:	3301      	adds	r3, #1
 8023d62:	f8ca 3000 	str.w	r3, [sl]
 8023d66:	9d05      	ldr	r5, [sp, #20]
 8023d68:	e175      	b.n	8024056 <mg_json_get+0x482>
 8023d6a:	9b01      	ldr	r3, [sp, #4]
 8023d6c:	9a03      	ldr	r2, [sp, #12]
 8023d6e:	4293      	cmp	r3, r2
 8023d70:	d0da      	beq.n	8023d28 <mg_json_get+0x154>
 8023d72:	f06f 0502 	mvn.w	r5, #2
 8023d76:	e16e      	b.n	8024056 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8023d78:	1ce3      	adds	r3, r4, #3
 8023d7a:	9307      	str	r3, [sp, #28]
 8023d7c:	4543      	cmp	r3, r8
 8023d7e:	f6bf af57 	bge.w	8023c30 <mg_json_get+0x5c>
 8023d82:	2204      	movs	r2, #4
 8023d84:	49a3      	ldr	r1, [pc, #652]	@ (8024014 <mg_json_get+0x440>)
 8023d86:	4648      	mov	r0, r9
 8023d88:	f009 fd2e 	bl	802d7e8 <memcmp>
 8023d8c:	2800      	cmp	r0, #0
 8023d8e:	f47f af4f 	bne.w	8023c30 <mg_json_get+0x5c>
          i += 3;
 8023d92:	9c07      	ldr	r4, [sp, #28]
 8023d94:	e765      	b.n	8023c62 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8023d96:	1ce3      	adds	r3, r4, #3
 8023d98:	9307      	str	r3, [sp, #28]
 8023d9a:	4543      	cmp	r3, r8
 8023d9c:	f6bf af4b 	bge.w	8023c36 <mg_json_get+0x62>
 8023da0:	2204      	movs	r2, #4
 8023da2:	499d      	ldr	r1, [pc, #628]	@ (8024018 <mg_json_get+0x444>)
 8023da4:	4648      	mov	r0, r9
 8023da6:	f009 fd1f 	bl	802d7e8 <memcmp>
 8023daa:	2800      	cmp	r0, #0
 8023dac:	f47f af43 	bne.w	8023c36 <mg_json_get+0x62>
          i += 3;
 8023db0:	9c07      	ldr	r4, [sp, #28]
 8023db2:	e756      	b.n	8023c62 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023db4:	1d23      	adds	r3, r4, #4
 8023db6:	9307      	str	r3, [sp, #28]
 8023db8:	4543      	cmp	r3, r8
 8023dba:	f6bf af3f 	bge.w	8023c3c <mg_json_get+0x68>
 8023dbe:	2205      	movs	r2, #5
 8023dc0:	4996      	ldr	r1, [pc, #600]	@ (802401c <mg_json_get+0x448>)
 8023dc2:	4648      	mov	r0, r9
 8023dc4:	f009 fd10 	bl	802d7e8 <memcmp>
 8023dc8:	2800      	cmp	r0, #0
 8023dca:	f47f af37 	bne.w	8023c3c <mg_json_get+0x68>
          i += 4;
 8023dce:	9c07      	ldr	r4, [sp, #28]
 8023dd0:	e747      	b.n	8023c62 <mg_json_get+0x8e>
        } else if (c == '"') {
 8023dd2:	2d22      	cmp	r5, #34	@ 0x22
 8023dd4:	f040 814f 	bne.w	8024076 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8023dd8:	f10a 0001 	add.w	r0, sl, #1
 8023ddc:	eba8 0104 	sub.w	r1, r8, r4
 8023de0:	3901      	subs	r1, #1
 8023de2:	4430      	add	r0, r6
 8023de4:	f7fd fbd5 	bl	8021592 <mg_pass_string>
          if (n < 0) return n;
 8023de8:	1e05      	subs	r5, r0, #0
 8023dea:	f2c0 8134 	blt.w	8024056 <mg_json_get+0x482>
          i += n + 1;
 8023dee:	3501      	adds	r5, #1
 8023df0:	442c      	add	r4, r5
 8023df2:	e736      	b.n	8023c62 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8023df4:	9b02      	ldr	r3, [sp, #8]
 8023df6:	9a04      	ldr	r2, [sp, #16]
 8023df8:	5c9b      	ldrb	r3, [r3, r2]
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	f47f af34 	bne.w	8023c68 <mg_json_get+0x94>
 8023e00:	9b01      	ldr	r3, [sp, #4]
 8023e02:	9a03      	ldr	r2, [sp, #12]
 8023e04:	4293      	cmp	r3, r2
 8023e06:	f47f af2f 	bne.w	8023c68 <mg_json_get+0x94>
 8023e0a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023e0e:	f1ba 0f00 	cmp.w	sl, #0
 8023e12:	d004      	beq.n	8023e1e <mg_json_get+0x24a>
 8023e14:	9b05      	ldr	r3, [sp, #20]
 8023e16:	1ae3      	subs	r3, r4, r3
 8023e18:	3301      	adds	r3, #1
 8023e1a:	f8ca 3000 	str.w	r3, [sl]
 8023e1e:	9d05      	ldr	r5, [sp, #20]
 8023e20:	e119      	b.n	8024056 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8023e22:	9b03      	ldr	r3, [sp, #12]
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	f2c0 8110 	blt.w	802404a <mg_json_get+0x476>
 8023e2a:	9b01      	ldr	r3, [sp, #4]
 8023e2c:	3301      	adds	r3, #1
 8023e2e:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8023e30:	2303      	movs	r3, #3
 8023e32:	e082      	b.n	8023f3a <mg_json_get+0x366>
        if (c == '"') {
 8023e34:	2d22      	cmp	r5, #34	@ 0x22
 8023e36:	d014      	beq.n	8023e62 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8023e38:	2d7d      	cmp	r5, #125	@ 0x7d
 8023e3a:	f040 8125 	bne.w	8024088 <mg_json_get+0x4b4>
          MG_EOO('}');
 8023e3e:	455f      	cmp	r7, fp
 8023e40:	d053      	beq.n	8023eea <mg_json_get+0x316>
 8023e42:	3f01      	subs	r7, #1
 8023e44:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023e48:	446b      	add	r3, sp
 8023e4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023e4e:	3302      	adds	r3, #2
 8023e50:	429d      	cmp	r5, r3
 8023e52:	f040 811c 	bne.w	802408e <mg_json_get+0x4ba>
 8023e56:	455f      	cmp	r7, fp
 8023e58:	d04e      	beq.n	8023ef8 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8023e5a:	455f      	cmp	r7, fp
 8023e5c:	d061      	beq.n	8023f22 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8023e5e:	2303      	movs	r3, #3
 8023e60:	e06b      	b.n	8023f3a <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8023e62:	f104 0901 	add.w	r9, r4, #1
 8023e66:	44b1      	add	r9, r6
 8023e68:	eba8 0104 	sub.w	r1, r8, r4
 8023e6c:	3901      	subs	r1, #1
 8023e6e:	4648      	mov	r0, r9
 8023e70:	f7fd fb8f 	bl	8021592 <mg_pass_string>
          if (n < 0) return n;
 8023e74:	1e05      	subs	r5, r0, #0
 8023e76:	f2c0 80ee 	blt.w	8024056 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8023e7a:	1c63      	adds	r3, r4, #1
 8023e7c:	442b      	add	r3, r5
 8023e7e:	4543      	cmp	r3, r8
 8023e80:	f280 80fc 	bge.w	802407c <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8023e84:	455f      	cmp	r7, fp
 8023e86:	f2c0 80fc 	blt.w	8024082 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8023e8a:	d005      	beq.n	8023e98 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8023e8c:	455f      	cmp	r7, fp
 8023e8e:	d00d      	beq.n	8023eac <mg_json_get+0x2d8>
          i += n + 1;
 8023e90:	3501      	adds	r5, #1
 8023e92:	442c      	add	r4, r5
          expecting = S_COLON;
 8023e94:	2302      	movs	r3, #2
 8023e96:	e050      	b.n	8023f3a <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8023e98:	9b02      	ldr	r3, [sp, #8]
 8023e9a:	9a04      	ldr	r2, [sp, #16]
 8023e9c:	4413      	add	r3, r2
 8023e9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8023ea4:	d0f2      	beq.n	8023e8c <mg_json_get+0x2b8>
 8023ea6:	f06f 0502 	mvn.w	r5, #2
 8023eaa:	e0d4      	b.n	8024056 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8023eac:	9b02      	ldr	r3, [sp, #8]
 8023eae:	9a04      	ldr	r2, [sp, #16]
 8023eb0:	4413      	add	r3, r2
 8023eb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8023eb8:	d1ea      	bne.n	8023e90 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8023eba:	462a      	mov	r2, r5
 8023ebc:	9b02      	ldr	r3, [sp, #8]
 8023ebe:	9904      	ldr	r1, [sp, #16]
 8023ec0:	1859      	adds	r1, r3, r1
 8023ec2:	4648      	mov	r0, r9
 8023ec4:	f009 fd59 	bl	802d97a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8023ec8:	2800      	cmp	r0, #0
 8023eca:	d1e1      	bne.n	8023e90 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8023ecc:	9904      	ldr	r1, [sp, #16]
 8023ece:	194b      	adds	r3, r1, r5
 8023ed0:	9a02      	ldr	r2, [sp, #8]
 8023ed2:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8023ed4:	b12a      	cbz	r2, 8023ee2 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8023ed6:	2a2e      	cmp	r2, #46	@ 0x2e
 8023ed8:	d005      	beq.n	8023ee6 <mg_json_get+0x312>
 8023eda:	2a5b      	cmp	r2, #91	@ 0x5b
 8023edc:	d1d8      	bne.n	8023e90 <mg_json_get+0x2bc>
            pos += n;
 8023ede:	9304      	str	r3, [sp, #16]
 8023ee0:	e7d6      	b.n	8023e90 <mg_json_get+0x2bc>
 8023ee2:	9304      	str	r3, [sp, #16]
 8023ee4:	e7d4      	b.n	8023e90 <mg_json_get+0x2bc>
 8023ee6:	9304      	str	r3, [sp, #16]
 8023ee8:	e7d2      	b.n	8023e90 <mg_json_get+0x2bc>
          MG_EOO('}');
 8023eea:	9b01      	ldr	r3, [sp, #4]
 8023eec:	9a03      	ldr	r2, [sp, #12]
 8023eee:	4293      	cmp	r3, r2
 8023ef0:	d0a7      	beq.n	8023e42 <mg_json_get+0x26e>
 8023ef2:	f06f 0502 	mvn.w	r5, #2
 8023ef6:	e0ae      	b.n	8024056 <mg_json_get+0x482>
 8023ef8:	9b02      	ldr	r3, [sp, #8]
 8023efa:	9a04      	ldr	r2, [sp, #16]
 8023efc:	5c9b      	ldrb	r3, [r3, r2]
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d1ab      	bne.n	8023e5a <mg_json_get+0x286>
 8023f02:	9b01      	ldr	r3, [sp, #4]
 8023f04:	9a03      	ldr	r2, [sp, #12]
 8023f06:	4293      	cmp	r3, r2
 8023f08:	d1a7      	bne.n	8023e5a <mg_json_get+0x286>
 8023f0a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023f0e:	f1ba 0f00 	cmp.w	sl, #0
 8023f12:	d004      	beq.n	8023f1e <mg_json_get+0x34a>
 8023f14:	9b05      	ldr	r3, [sp, #20]
 8023f16:	1ae3      	subs	r3, r4, r3
 8023f18:	3301      	adds	r3, #1
 8023f1a:	f8ca 3000 	str.w	r3, [sl]
 8023f1e:	9d05      	ldr	r5, [sp, #20]
 8023f20:	e099      	b.n	8024056 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8023f22:	9b03      	ldr	r3, [sp, #12]
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	f2c0 8092 	blt.w	802404e <mg_json_get+0x47a>
 8023f2a:	9b01      	ldr	r3, [sp, #4]
 8023f2c:	3301      	adds	r3, #1
 8023f2e:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8023f30:	2303      	movs	r3, #3
 8023f32:	e002      	b.n	8023f3a <mg_json_get+0x366>
        if (c == ':') {
 8023f34:	2d3a      	cmp	r5, #58	@ 0x3a
 8023f36:	d11d      	bne.n	8023f74 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8023f38:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 8023f3a:	3401      	adds	r4, #1
 8023f3c:	4544      	cmp	r4, r8
 8023f3e:	f280 8088 	bge.w	8024052 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8023f42:	46a2      	mov	sl, r4
 8023f44:	eb06 0904 	add.w	r9, r6, r4
 8023f48:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8023f4a:	2d20      	cmp	r5, #32
 8023f4c:	d0f5      	beq.n	8023f3a <mg_json_get+0x366>
 8023f4e:	2d09      	cmp	r5, #9
 8023f50:	d0f3      	beq.n	8023f3a <mg_json_get+0x366>
 8023f52:	2d0a      	cmp	r5, #10
 8023f54:	d0f1      	beq.n	8023f3a <mg_json_get+0x366>
 8023f56:	2d0d      	cmp	r5, #13
 8023f58:	d0ef      	beq.n	8023f3a <mg_json_get+0x366>
    switch (expecting) {
 8023f5a:	2b03      	cmp	r3, #3
 8023f5c:	d8ed      	bhi.n	8023f3a <mg_json_get+0x366>
 8023f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8023f64 <mg_json_get+0x390>)
 8023f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023f64:	08023c1b 	.word	0x08023c1b
 8023f68:	08023e35 	.word	0x08023e35
 8023f6c:	08023f35 	.word	0x08023f35
 8023f70:	08023f7b 	.word	0x08023f7b
          return MG_JSON_INVALID;
 8023f74:	f06f 0501 	mvn.w	r5, #1
 8023f78:	e06d      	b.n	8024056 <mg_json_get+0x482>
        if (depth <= 0) {
 8023f7a:	2f00      	cmp	r7, #0
 8023f7c:	f340 808a 	ble.w	8024094 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8023f80:	2d2c      	cmp	r5, #44	@ 0x2c
 8023f82:	d01e      	beq.n	8023fc2 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8023f84:	2d5d      	cmp	r5, #93	@ 0x5d
 8023f86:	d002      	beq.n	8023f8e <mg_json_get+0x3ba>
 8023f88:	2d7d      	cmp	r5, #125	@ 0x7d
 8023f8a:	f040 8086 	bne.w	802409a <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8023f8e:	455f      	cmp	r7, fp
 8023f90:	d021      	beq.n	8023fd6 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8023f92:	455f      	cmp	r7, fp
 8023f94:	d02b      	beq.n	8023fee <mg_json_get+0x41a>
          MG_EOO('O');
 8023f96:	455f      	cmp	r7, fp
 8023f98:	d035      	beq.n	8024006 <mg_json_get+0x432>
 8023f9a:	3f01      	subs	r7, #1
 8023f9c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023fa0:	446a      	add	r2, sp
 8023fa2:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8023fa6:	3202      	adds	r2, #2
 8023fa8:	4295      	cmp	r5, r2
 8023faa:	d179      	bne.n	80240a0 <mg_json_get+0x4cc>
 8023fac:	455f      	cmp	r7, fp
 8023fae:	d037      	beq.n	8024020 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023fb0:	455f      	cmp	r7, fp
 8023fb2:	d1c2      	bne.n	8023f3a <mg_json_get+0x366>
 8023fb4:	9a03      	ldr	r2, [sp, #12]
 8023fb6:	2a00      	cmp	r2, #0
 8023fb8:	dbbf      	blt.n	8023f3a <mg_json_get+0x366>
 8023fba:	9a01      	ldr	r2, [sp, #4]
 8023fbc:	3201      	adds	r2, #1
 8023fbe:	9201      	str	r2, [sp, #4]
 8023fc0:	e7bb      	b.n	8023f3a <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8023fc2:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8023fc6:	446b      	add	r3, sp
 8023fc8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023fcc:	2b7b      	cmp	r3, #123	@ 0x7b
 8023fce:	bf14      	ite	ne
 8023fd0:	2300      	movne	r3, #0
 8023fd2:	2301      	moveq	r3, #1
 8023fd4:	e7b1      	b.n	8023f3a <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8023fd6:	2d7d      	cmp	r5, #125	@ 0x7d
 8023fd8:	d1db      	bne.n	8023f92 <mg_json_get+0x3be>
 8023fda:	9a02      	ldr	r2, [sp, #8]
 8023fdc:	9904      	ldr	r1, [sp, #16]
 8023fde:	440a      	add	r2, r1
 8023fe0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023fe4:	2a2e      	cmp	r2, #46	@ 0x2e
 8023fe6:	d1d4      	bne.n	8023f92 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8023fe8:	f06f 0502 	mvn.w	r5, #2
 8023fec:	e033      	b.n	8024056 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8023fee:	2d5d      	cmp	r5, #93	@ 0x5d
 8023ff0:	d1d1      	bne.n	8023f96 <mg_json_get+0x3c2>
 8023ff2:	9a02      	ldr	r2, [sp, #8]
 8023ff4:	9904      	ldr	r1, [sp, #16]
 8023ff6:	440a      	add	r2, r1
 8023ff8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023ffc:	2a2c      	cmp	r2, #44	@ 0x2c
 8023ffe:	d1ca      	bne.n	8023f96 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8024000:	f06f 0502 	mvn.w	r5, #2
 8024004:	e027      	b.n	8024056 <mg_json_get+0x482>
          MG_EOO('O');
 8024006:	9a01      	ldr	r2, [sp, #4]
 8024008:	9903      	ldr	r1, [sp, #12]
 802400a:	428a      	cmp	r2, r1
 802400c:	d0c5      	beq.n	8023f9a <mg_json_get+0x3c6>
 802400e:	f06f 0502 	mvn.w	r5, #2
 8024012:	e020      	b.n	8024056 <mg_json_get+0x482>
 8024014:	08038310 	.word	0x08038310
 8024018:	0803b9ec 	.word	0x0803b9ec
 802401c:	08038318 	.word	0x08038318
 8024020:	9a02      	ldr	r2, [sp, #8]
 8024022:	9904      	ldr	r1, [sp, #16]
 8024024:	5c52      	ldrb	r2, [r2, r1]
 8024026:	2a00      	cmp	r2, #0
 8024028:	d1c2      	bne.n	8023fb0 <mg_json_get+0x3dc>
 802402a:	9a01      	ldr	r2, [sp, #4]
 802402c:	9903      	ldr	r1, [sp, #12]
 802402e:	428a      	cmp	r2, r1
 8024030:	d1be      	bne.n	8023fb0 <mg_json_get+0x3dc>
 8024032:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024036:	f1ba 0f00 	cmp.w	sl, #0
 802403a:	d004      	beq.n	8024046 <mg_json_get+0x472>
 802403c:	9b05      	ldr	r3, [sp, #20]
 802403e:	1ae3      	subs	r3, r4, r3
 8024040:	3301      	adds	r3, #1
 8024042:	f8ca 3000 	str.w	r3, [sl]
 8024046:	9d05      	ldr	r5, [sp, #20]
 8024048:	e005      	b.n	8024056 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802404a:	2303      	movs	r3, #3
 802404c:	e775      	b.n	8023f3a <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 802404e:	2303      	movs	r3, #3
 8024050:	e773      	b.n	8023f3a <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8024052:	f06f 0502 	mvn.w	r5, #2
}
 8024056:	4628      	mov	r0, r5
 8024058:	b015      	add	sp, #84	@ 0x54
 802405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 802405e:	f06f 0501 	mvn.w	r5, #1
 8024062:	e7f8      	b.n	8024056 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8024064:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8024068:	e7f5      	b.n	8024056 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802406a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802406e:	e7f2      	b.n	8024056 <mg_json_get+0x482>
          MG_EOO(']');
 8024070:	f06f 0501 	mvn.w	r5, #1
 8024074:	e7ef      	b.n	8024056 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8024076:	f06f 0501 	mvn.w	r5, #1
 802407a:	e7ec      	b.n	8024056 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802407c:	f06f 0502 	mvn.w	r5, #2
 8024080:	e7e9      	b.n	8024056 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8024082:	f06f 0502 	mvn.w	r5, #2
 8024086:	e7e6      	b.n	8024056 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8024088:	f06f 0501 	mvn.w	r5, #1
 802408c:	e7e3      	b.n	8024056 <mg_json_get+0x482>
          MG_EOO('}');
 802408e:	f06f 0501 	mvn.w	r5, #1
 8024092:	e7e0      	b.n	8024056 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8024094:	f06f 0501 	mvn.w	r5, #1
 8024098:	e7dd      	b.n	8024056 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802409a:	f06f 0501 	mvn.w	r5, #1
 802409e:	e7da      	b.n	8024056 <mg_json_get+0x482>
          MG_EOO('O');
 80240a0:	f06f 0501 	mvn.w	r5, #1
 80240a4:	e7d7      	b.n	8024056 <mg_json_get+0x482>
 80240a6:	bf00      	nop

080240a8 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80240a8:	b510      	push	{r4, lr}
 80240aa:	b084      	sub	sp, #16
 80240ac:	46ec      	mov	ip, sp
 80240ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80240b2:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80240b4:	ab03      	add	r3, sp, #12
 80240b6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80240ba:	f7ff fd8b 	bl	8023bd4 <mg_json_get>
 80240be:	1e02      	subs	r2, r0, #0
 80240c0:	db11      	blt.n	80240e6 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80240c2:	9b00      	ldr	r3, [sp, #0]
 80240c4:	1898      	adds	r0, r3, r2
 80240c6:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80240c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80240ca:	d003      	beq.n	80240d4 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80240cc:	3a30      	subs	r2, #48	@ 0x30
 80240ce:	b2d2      	uxtb	r2, r2
 80240d0:	2a09      	cmp	r2, #9
 80240d2:	d80b      	bhi.n	80240ec <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 80240d4:	b164      	cbz	r4, 80240f0 <mg_json_get_num+0x48>
 80240d6:	2200      	movs	r2, #0
 80240d8:	9903      	ldr	r1, [sp, #12]
 80240da:	f7fd fa81 	bl	80215e0 <mg_atod>
 80240de:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 80240e2:	2001      	movs	r0, #1
 80240e4:	e000      	b.n	80240e8 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 80240e6:	2000      	movs	r0, #0
}
 80240e8:	b004      	add	sp, #16
 80240ea:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 80240ec:	2000      	movs	r0, #0
 80240ee:	e7fb      	b.n	80240e8 <mg_json_get_num+0x40>
    found = 1;
 80240f0:	2001      	movs	r0, #1
 80240f2:	e7f9      	b.n	80240e8 <mg_json_get_num+0x40>

080240f4 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 80240f4:	b510      	push	{r4, lr}
 80240f6:	b082      	sub	sp, #8
 80240f8:	46ec      	mov	ip, sp
 80240fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80240fe:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8024100:	2300      	movs	r3, #0
 8024102:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8024106:	f7ff fd65 	bl	8023bd4 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802410a:	2800      	cmp	r0, #0
 802410c:	db0f      	blt.n	802412e <mg_json_get_bool+0x3a>
 802410e:	9b00      	ldr	r3, [sp, #0]
 8024110:	5c1b      	ldrb	r3, [r3, r0]
 8024112:	2b74      	cmp	r3, #116	@ 0x74
 8024114:	d003      	beq.n	802411e <mg_json_get_bool+0x2a>
 8024116:	2b66      	cmp	r3, #102	@ 0x66
 8024118:	d001      	beq.n	802411e <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802411a:	2000      	movs	r0, #0
 802411c:	e008      	b.n	8024130 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 802411e:	b14c      	cbz	r4, 8024134 <mg_json_get_bool+0x40>
 8024120:	2b74      	cmp	r3, #116	@ 0x74
 8024122:	bf14      	ite	ne
 8024124:	2300      	movne	r3, #0
 8024126:	2301      	moveq	r3, #1
 8024128:	7023      	strb	r3, [r4, #0]
    found = 1;
 802412a:	2001      	movs	r0, #1
 802412c:	e000      	b.n	8024130 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802412e:	2000      	movs	r0, #0
}
 8024130:	b002      	add	sp, #8
 8024132:	bd10      	pop	{r4, pc}
    found = 1;
 8024134:	2001      	movs	r0, #1
 8024136:	e7fb      	b.n	8024130 <mg_json_get_bool+0x3c>

08024138 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8024138:	b5f0      	push	{r4, r5, r6, r7, lr}
 802413a:	b085      	sub	sp, #20
 802413c:	4606      	mov	r6, r0
 802413e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8024140:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8024142:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8024144:	e038      	b.n	80241b8 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8024146:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802414a:	f7fd fb5b 	bl	8021804 <nibble>
 802414e:	f7fd fb41 	bl	80217d4 <logc>
 8024152:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8024156:	f7fd fb55 	bl	8021804 <nibble>
 802415a:	f7fd fb3b 	bl	80217d4 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802415e:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8024162:	f7fd fb4f 	bl	8021804 <nibble>
 8024166:	f7fd fb35 	bl	80217d4 <logc>
 802416a:	2030      	movs	r0, #48	@ 0x30
 802416c:	f7fd fb32 	bl	80217d4 <logc>
 8024170:	2103      	movs	r1, #3
 8024172:	4829      	ldr	r0, [pc, #164]	@ (8024218 <mg_hexdump+0xe0>)
 8024174:	f7fd fb3a 	bl	80217ec <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8024178:	5d70      	ldrb	r0, [r6, r5]
 802417a:	0900      	lsrs	r0, r0, #4
 802417c:	f7fd fb42 	bl	8021804 <nibble>
 8024180:	f7fd fb28 	bl	80217d4 <logc>
 8024184:	5d70      	ldrb	r0, [r6, r5]
 8024186:	f000 000f 	and.w	r0, r0, #15
 802418a:	f7fd fb3b 	bl	8021804 <nibble>
 802418e:	f7fd fb21 	bl	80217d4 <logc>
    logc(' ');                                         // Space after hex number
 8024192:	2020      	movs	r0, #32
 8024194:	f7fd fb1e 	bl	80217d4 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8024198:	5d72      	ldrb	r2, [r6, r5]
 802419a:	f1a2 0320 	sub.w	r3, r2, #32
 802419e:	b2db      	uxtb	r3, r3
 80241a0:	2b5e      	cmp	r3, #94	@ 0x5e
 80241a2:	d900      	bls.n	80241a6 <mg_hexdump+0x6e>
 80241a4:	222e      	movs	r2, #46	@ 0x2e
 80241a6:	1c63      	adds	r3, r4, #1
 80241a8:	f104 0110 	add.w	r1, r4, #16
 80241ac:	eb0d 0401 	add.w	r4, sp, r1
 80241b0:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 80241b4:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80241b6:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 80241b8:	42bd      	cmp	r5, r7
 80241ba:	d21e      	bcs.n	80241fa <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 80241bc:	f015 0f0f 	tst.w	r5, #15
 80241c0:	d1da      	bne.n	8024178 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80241c2:	2d00      	cmp	r5, #0
 80241c4:	d0bf      	beq.n	8024146 <mg_hexdump+0xe>
 80241c6:	2102      	movs	r1, #2
 80241c8:	4814      	ldr	r0, [pc, #80]	@ (802421c <mg_hexdump+0xe4>)
 80241ca:	f7fd fb0f 	bl	80217ec <logs>
 80241ce:	2110      	movs	r1, #16
 80241d0:	4668      	mov	r0, sp
 80241d2:	f7fd fb0b 	bl	80217ec <logs>
 80241d6:	200a      	movs	r0, #10
 80241d8:	f7fd fafc 	bl	80217d4 <logc>
 80241dc:	2400      	movs	r4, #0
 80241de:	e7b2      	b.n	8024146 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80241e0:	2103      	movs	r1, #3
 80241e2:	480d      	ldr	r0, [pc, #52]	@ (8024218 <mg_hexdump+0xe0>)
 80241e4:	f7fd fb02 	bl	80217ec <logs>
 80241e8:	1c63      	adds	r3, r4, #1
 80241ea:	f104 0210 	add.w	r2, r4, #16
 80241ee:	eb0d 0402 	add.w	r4, sp, r2
 80241f2:	2220      	movs	r2, #32
 80241f4:	f804 2c10 	strb.w	r2, [r4, #-16]
 80241f8:	b2dc      	uxtb	r4, r3
 80241fa:	2c0f      	cmp	r4, #15
 80241fc:	d9f0      	bls.n	80241e0 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80241fe:	2102      	movs	r1, #2
 8024200:	4806      	ldr	r0, [pc, #24]	@ (802421c <mg_hexdump+0xe4>)
 8024202:	f7fd faf3 	bl	80217ec <logs>
 8024206:	2110      	movs	r1, #16
 8024208:	4668      	mov	r0, sp
 802420a:	f7fd faef 	bl	80217ec <logs>
 802420e:	200a      	movs	r0, #10
 8024210:	f7fd fae0 	bl	80217d4 <logc>
}
 8024214:	b005      	add	sp, #20
 8024216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024218:	0803b9f8 	.word	0x0803b9f8
 802421c:	0803b9f4 	.word	0x0803b9f4

08024220 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8024220:	4b09      	ldr	r3, [pc, #36]	@ (8024248 <mg_md5_init+0x28>)
 8024222:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8024224:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024228:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802422a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802422e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8024232:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8024236:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8024238:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 802423c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 802423e:	2300      	movs	r3, #0
 8024240:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8024242:	6143      	str	r3, [r0, #20]
}
 8024244:	4770      	bx	lr
 8024246:	bf00      	nop
 8024248:	67452301 	.word	0x67452301

0802424c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024250:	4606      	mov	r6, r0
 8024252:	460c      	mov	r4, r1
 8024254:	4615      	mov	r5, r2
  t = ctx->bits[0];
 8024256:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8024258:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802425c:	6102      	str	r2, [r0, #16]
 802425e:	429a      	cmp	r2, r3
 8024260:	d202      	bcs.n	8024268 <mg_md5_update+0x1c>
 8024262:	6942      	ldr	r2, [r0, #20]
 8024264:	3201      	adds	r2, #1
 8024266:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8024268:	6972      	ldr	r2, [r6, #20]
 802426a:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 802426e:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8024270:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 8024274:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8024278:	d035      	beq.n	80242e6 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 802427a:	f106 0918 	add.w	r9, r6, #24
 802427e:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 8024282:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 8024286:	4545      	cmp	r5, r8
 8024288:	d30b      	bcc.n	80242a2 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 802428a:	4642      	mov	r2, r8
 802428c:	4621      	mov	r1, r4
 802428e:	f00b f8a5 	bl	802f3dc <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8024292:	4649      	mov	r1, r9
 8024294:	4630      	mov	r0, r6
 8024296:	f7fd fabf 	bl	8021818 <mg_md5_transform>
    buf += t;
 802429a:	4444      	add	r4, r8
    len -= t;
 802429c:	3f40      	subs	r7, #64	@ 0x40
 802429e:	443d      	add	r5, r7
 80242a0:	e021      	b.n	80242e6 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 80242a2:	462a      	mov	r2, r5
 80242a4:	4621      	mov	r1, r4
 80242a6:	f00b f899 	bl	802f3dc <memcpy>
      return;
 80242aa:	e024      	b.n	80242f6 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 80242ac:	f106 0118 	add.w	r1, r6, #24
 80242b0:	4623      	mov	r3, r4
 80242b2:	468c      	mov	ip, r1
 80242b4:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 80242b8:	681f      	ldr	r7, [r3, #0]
 80242ba:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80242be:	6898      	ldr	r0, [r3, #8]
 80242c0:	68da      	ldr	r2, [r3, #12]
 80242c2:	f8cc 7000 	str.w	r7, [ip]
 80242c6:	f8cc e004 	str.w	lr, [ip, #4]
 80242ca:	f8cc 0008 	str.w	r0, [ip, #8]
 80242ce:	f8cc 200c 	str.w	r2, [ip, #12]
 80242d2:	3310      	adds	r3, #16
 80242d4:	f10c 0c10 	add.w	ip, ip, #16
 80242d8:	4543      	cmp	r3, r8
 80242da:	d1ed      	bne.n	80242b8 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80242dc:	4630      	mov	r0, r6
 80242de:	f7fd fa9b 	bl	8021818 <mg_md5_transform>
    buf += 64;
 80242e2:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 80242e4:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 80242e6:	2d3f      	cmp	r5, #63	@ 0x3f
 80242e8:	d8e0      	bhi.n	80242ac <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 80242ea:	462a      	mov	r2, r5
 80242ec:	4621      	mov	r1, r4
 80242ee:	f106 0018 	add.w	r0, r6, #24
 80242f2:	f00b f873 	bl	802f3dc <memcpy>
}
 80242f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080242fa <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 80242fa:	b570      	push	{r4, r5, r6, lr}
 80242fc:	4604      	mov	r4, r0
 80242fe:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8024300:	6903      	ldr	r3, [r0, #16]
 8024302:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8024306:	f100 0618 	add.w	r6, r0, #24
 802430a:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 802430c:	3001      	adds	r0, #1
 802430e:	2280      	movs	r2, #128	@ 0x80
 8024310:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8024312:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8024316:	2a07      	cmp	r2, #7
 8024318:	d821      	bhi.n	802435e <mg_md5_final+0x64>
    memset(p, 0, count);
 802431a:	2100      	movs	r1, #0
 802431c:	f009 faf8 	bl	802d910 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8024320:	4631      	mov	r1, r6
 8024322:	4620      	mov	r0, r4
 8024324:	f7fd fa78 	bl	8021818 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8024328:	2238      	movs	r2, #56	@ 0x38
 802432a:	2100      	movs	r1, #0
 802432c:	4630      	mov	r0, r6
 802432e:	f009 faef 	bl	802d910 <memset>
  a[14] = ctx->bits[0];
 8024332:	6923      	ldr	r3, [r4, #16]
 8024334:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8024336:	6963      	ldr	r3, [r4, #20]
 8024338:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802433a:	4631      	mov	r1, r6
 802433c:	4620      	mov	r0, r4
 802433e:	f7fd fa6b 	bl	8021818 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8024342:	6820      	ldr	r0, [r4, #0]
 8024344:	6861      	ldr	r1, [r4, #4]
 8024346:	68a2      	ldr	r2, [r4, #8]
 8024348:	68e3      	ldr	r3, [r4, #12]
 802434a:	6028      	str	r0, [r5, #0]
 802434c:	6069      	str	r1, [r5, #4]
 802434e:	60aa      	str	r2, [r5, #8]
 8024350:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8024352:	2258      	movs	r2, #88	@ 0x58
 8024354:	2100      	movs	r1, #0
 8024356:	4620      	mov	r0, r4
 8024358:	f009 fada 	bl	802d910 <memset>
}
 802435c:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 802435e:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8024362:	2100      	movs	r1, #0
 8024364:	f009 fad4 	bl	802d910 <memset>
 8024368:	e7e3      	b.n	8024332 <mg_md5_final+0x38>

0802436a <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 802436a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802436e:	4604      	mov	r4, r0
 8024370:	460d      	mov	r5, r1
 8024372:	4617      	mov	r7, r2
 8024374:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8024376:	2228      	movs	r2, #40	@ 0x28
 8024378:	2100      	movs	r1, #0
 802437a:	4618      	mov	r0, r3
 802437c:	f009 fac8 	bl	802d910 <memset>
  m->dgram.buf = (char *) buf;
 8024380:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8024382:	2d01      	cmp	r5, #1
 8024384:	f240 8088 	bls.w	8024498 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8024388:	7820      	ldrb	r0, [r4, #0]
 802438a:	0900      	lsrs	r0, r0, #4
 802438c:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 802438e:	46a4      	mov	ip, r4
 8024390:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8024394:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8024398:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 802439c:	2300      	movs	r3, #0
 802439e:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 80243a0:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 80243a2:	ebac 0e04 	sub.w	lr, ip, r4
 80243a6:	45ae      	cmp	lr, r5
 80243a8:	d211      	bcs.n	80243ce <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 80243aa:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 80243ae:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 80243b2:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 80243b6:	fa0e fe08 	lsl.w	lr, lr, r8
 80243ba:	4471      	add	r1, lr
    len_len++;
 80243bc:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 80243be:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80243c2:	d004      	beq.n	80243ce <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 80243c4:	2b03      	cmp	r3, #3
 80243c6:	d9ec      	bls.n	80243a2 <mg_mqtt_parse+0x38>
 80243c8:	2002      	movs	r0, #2
}
 80243ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 80243ce:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 80243d2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80243d6:	d161      	bne.n	802449c <mg_mqtt_parse+0x132>
 80243d8:	4425      	add	r5, r4
 80243da:	4545      	cmp	r5, r8
 80243dc:	d360      	bcc.n	80244a0 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 80243de:	eba8 0304 	sub.w	r3, r8, r4
 80243e2:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 80243e4:	2803      	cmp	r0, #3
 80243e6:	d01c      	beq.n	8024422 <mg_mqtt_parse+0xb8>
 80243e8:	d80a      	bhi.n	8024400 <mg_mqtt_parse+0x96>
 80243ea:	2802      	cmp	r0, #2
 80243ec:	d106      	bne.n	80243fc <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 80243ee:	2901      	cmp	r1, #1
 80243f0:	dd5a      	ble.n	80244a8 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 80243f2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80243f6:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 80243f8:	2000      	movs	r0, #0
      break;
 80243fa:	e7e6      	b.n	80243ca <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 80243fc:	2000      	movs	r0, #0
 80243fe:	e7e4      	b.n	80243ca <mg_mqtt_parse+0x60>
 8024400:	3804      	subs	r0, #4
 8024402:	b2c0      	uxtb	r0, r0
 8024404:	2807      	cmp	r0, #7
 8024406:	d84d      	bhi.n	80244a4 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024408:	f10c 0302 	add.w	r3, ip, #2
 802440c:	4543      	cmp	r3, r8
 802440e:	d84d      	bhi.n	80244ac <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8024410:	f89c 2000 	ldrb.w	r2, [ip]
 8024414:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802441c:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 802441e:	2000      	movs	r0, #0
      break;
 8024420:	e7d3      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8024422:	f10c 0202 	add.w	r2, ip, #2
 8024426:	4542      	cmp	r2, r8
 8024428:	d842      	bhi.n	80244b0 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802442a:	f89c 1000 	ldrb.w	r1, [ip]
 802442e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024432:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8024436:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8024438:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 802443a:	3302      	adds	r3, #2
 802443c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8024440:	45a8      	cmp	r8, r5
 8024442:	d337      	bcc.n	80244b4 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8024444:	f1b9 0f00 	cmp.w	r9, #0
 8024448:	d008      	beq.n	802445c <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 802444a:	1caa      	adds	r2, r5, #2
 802444c:	4542      	cmp	r2, r8
 802444e:	d833      	bhi.n	80244b8 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8024450:	7829      	ldrb	r1, [r5, #0]
 8024452:	786b      	ldrb	r3, [r5, #1]
 8024454:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8024458:	8333      	strh	r3, [r6, #24]
        p += 2;
 802445a:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 802445c:	4545      	cmp	r5, r8
 802445e:	d82d      	bhi.n	80244bc <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8024460:	2f05      	cmp	r7, #5
 8024462:	d007      	beq.n	8024474 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8024464:	4545      	cmp	r5, r8
 8024466:	d82d      	bhi.n	80244c4 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8024468:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 802446a:	eba8 0505 	sub.w	r5, r8, r5
 802446e:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8024470:	2000      	movs	r0, #0
      break;
 8024472:	e7aa      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8024474:	1cab      	adds	r3, r5, #2
 8024476:	4543      	cmp	r3, r8
 8024478:	d2f4      	bcs.n	8024464 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 802447a:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 802447e:	eba8 0105 	sub.w	r1, r8, r5
 8024482:	4628      	mov	r0, r5
 8024484:	f7fd fd70 	bl	8021f68 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8024488:	b1d0      	cbz	r0, 80244c0 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 802448a:	182b      	adds	r3, r5, r0
 802448c:	1b1b      	subs	r3, r3, r4
 802448e:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8024490:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8024492:	4403      	add	r3, r0
 8024494:	441d      	add	r5, r3
 8024496:	e7e5      	b.n	8024464 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8024498:	2001      	movs	r0, #1
 802449a:	e796      	b.n	80243ca <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802449c:	2001      	movs	r0, #1
 802449e:	e794      	b.n	80243ca <mg_mqtt_parse+0x60>
 80244a0:	2001      	movs	r0, #1
 80244a2:	e792      	b.n	80243ca <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 80244a4:	2000      	movs	r0, #0
 80244a6:	e790      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 80244a8:	2002      	movs	r0, #2
 80244aa:	e78e      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80244ac:	2002      	movs	r0, #2
 80244ae:	e78c      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80244b0:	2002      	movs	r0, #2
 80244b2:	e78a      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80244b4:	2002      	movs	r0, #2
 80244b6:	e788      	b.n	80243ca <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 80244b8:	2002      	movs	r0, #2
 80244ba:	e786      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80244bc:	2002      	movs	r0, #2
 80244be:	e784      	b.n	80243ca <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 80244c0:	2002      	movs	r0, #2
 80244c2:	e782      	b.n	80243ca <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 80244c4:	2002      	movs	r0, #2
 80244c6:	e780      	b.n	80243ca <mg_mqtt_parse+0x60>

080244c8 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80244c8:	b510      	push	{r4, lr}
 80244ca:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 80244cc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80244ce:	31b0      	adds	r1, #176	@ 0xb0
 80244d0:	2001      	movs	r0, #1
 80244d2:	f7ff f8f5 	bl	80236c0 <mg_calloc>
  if (c != NULL) {
 80244d6:	4603      	mov	r3, r0
 80244d8:	b148      	cbz	r0, 80244ee <mg_alloc_conn+0x26>
    c->mgr = mgr;
 80244da:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 80244dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80244e0:	6742      	str	r2, [r0, #116]	@ 0x74
 80244e2:	6442      	str	r2, [r0, #68]	@ 0x44
 80244e4:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 80244e6:	69e2      	ldr	r2, [r4, #28]
 80244e8:	3201      	adds	r2, #1
 80244ea:	61e2      	str	r2, [r4, #28]
 80244ec:	6342      	str	r2, [r0, #52]	@ 0x34
}
 80244ee:	4618      	mov	r0, r3
 80244f0:	bd10      	pop	{r4, pc}
	...

080244f4 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 80244f4:	b510      	push	{r4, lr}
 80244f6:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 80244f8:	2248      	movs	r2, #72	@ 0x48
 80244fa:	2100      	movs	r1, #0
 80244fc:	f009 fa08 	bl	802d910 <memset>
  mgr->epoll_fd = -1;
 8024500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024504:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8024506:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8024508:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802450c:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 802450e:	4b02      	ldr	r3, [pc, #8]	@ (8024518 <mg_mgr_init+0x24>)
 8024510:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8024512:	4b02      	ldr	r3, [pc, #8]	@ (802451c <mg_mgr_init+0x28>)
 8024514:	60e3      	str	r3, [r4, #12]
}
 8024516:	bd10      	pop	{r4, pc}
 8024518:	0803b9fc 	.word	0x0803b9fc
 802451c:	0803ba10 	.word	0x0803ba10

08024520 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8024520:	b40c      	push	{r2, r3}
 8024522:	b500      	push	{lr}
 8024524:	b083      	sub	sp, #12
 8024526:	ab04      	add	r3, sp, #16
 8024528:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 802452c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 802452e:	ab01      	add	r3, sp, #4
 8024530:	f000 fcde 	bl	8024ef0 <mg_vsnprintf>
}
 8024534:	b003      	add	sp, #12
 8024536:	f85d eb04 	ldr.w	lr, [sp], #4
 802453a:	b002      	add	sp, #8
 802453c:	4770      	bx	lr
	...

08024540 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8024540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024544:	b093      	sub	sp, #76	@ 0x4c
 8024546:	9005      	str	r0, [sp, #20]
 8024548:	9106      	str	r1, [sp, #24]
 802454a:	ec51 0b10 	vmov	r0, r1, d0
 802454e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024552:	4690      	mov	r8, r2
 8024554:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8024556:	2200      	movs	r2, #0
 8024558:	2300      	movs	r3, #0
 802455a:	f7ec facd 	bl	8010af8 <__aeabi_dcmpeq>
 802455e:	b9c8      	cbnz	r0, 8024594 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8024560:	ed9d 0b02 	vldr	d0, [sp, #8]
 8024564:	f7fc faae 	bl	8020ac4 <xisinf>
 8024568:	b9d8      	cbnz	r0, 80245a2 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 802456a:	ed9d 0b02 	vldr	d0, [sp, #8]
 802456e:	f7fc fabb 	bl	8020ae8 <xisnan>
 8024572:	4606      	mov	r6, r0
 8024574:	bb28      	cbnz	r0, 80245c2 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8024576:	2200      	movs	r2, #0
 8024578:	2300      	movs	r3, #0
 802457a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802457e:	4620      	mov	r0, r4
 8024580:	4629      	mov	r1, r5
 8024582:	f7ec fac3 	bl	8010b0c <__aeabi_dcmplt>
 8024586:	bb18      	cbnz	r0, 80245d0 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8024588:	4637      	mov	r7, r6
  mul = 1.0;
 802458a:	2400      	movs	r4, #0
 802458c:	4dba      	ldr	r5, [pc, #744]	@ (8024878 <mg_dtoa+0x338>)
 802458e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8024592:	e02f      	b.n	80245f4 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8024594:	4bb9      	ldr	r3, [pc, #740]	@ (802487c <mg_dtoa+0x33c>)
 8024596:	4aba      	ldr	r2, [pc, #744]	@ (8024880 <mg_dtoa+0x340>)
 8024598:	9906      	ldr	r1, [sp, #24]
 802459a:	9805      	ldr	r0, [sp, #20]
 802459c:	f7ff ffc0 	bl	8024520 <mg_snprintf>
 80245a0:	e1d3      	b.n	802494a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80245a2:	2200      	movs	r2, #0
 80245a4:	2300      	movs	r3, #0
 80245a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80245aa:	f7ec facd 	bl	8010b48 <__aeabi_dcmpgt>
 80245ae:	b130      	cbz	r0, 80245be <mg_dtoa+0x7e>
 80245b0:	4bb4      	ldr	r3, [pc, #720]	@ (8024884 <mg_dtoa+0x344>)
 80245b2:	4ab3      	ldr	r2, [pc, #716]	@ (8024880 <mg_dtoa+0x340>)
 80245b4:	9906      	ldr	r1, [sp, #24]
 80245b6:	9805      	ldr	r0, [sp, #20]
 80245b8:	f7ff ffb2 	bl	8024520 <mg_snprintf>
 80245bc:	e1c5      	b.n	802494a <mg_dtoa+0x40a>
 80245be:	4bb2      	ldr	r3, [pc, #712]	@ (8024888 <mg_dtoa+0x348>)
 80245c0:	e7f7      	b.n	80245b2 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80245c2:	4bb2      	ldr	r3, [pc, #712]	@ (802488c <mg_dtoa+0x34c>)
 80245c4:	4aae      	ldr	r2, [pc, #696]	@ (8024880 <mg_dtoa+0x340>)
 80245c6:	9906      	ldr	r1, [sp, #24]
 80245c8:	9805      	ldr	r0, [sp, #20]
 80245ca:	f7ff ffa9 	bl	8024520 <mg_snprintf>
 80245ce:	e1bc      	b.n	802494a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80245d0:	4622      	mov	r2, r4
 80245d2:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80245d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80245da:	232d      	movs	r3, #45	@ 0x2d
 80245dc:	f88d 3020 	strb.w	r3, [sp, #32]
 80245e0:	2701      	movs	r7, #1
 80245e2:	e7d2      	b.n	802458a <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80245e4:	2200      	movs	r2, #0
 80245e6:	4baa      	ldr	r3, [pc, #680]	@ (8024890 <mg_dtoa+0x350>)
 80245e8:	4620      	mov	r0, r4
 80245ea:	4629      	mov	r1, r5
 80245ec:	f7ec f81c 	bl	8010628 <__aeabi_dmul>
 80245f0:	4604      	mov	r4, r0
 80245f2:	460d      	mov	r5, r1
 80245f4:	2200      	movs	r2, #0
 80245f6:	4ba6      	ldr	r3, [pc, #664]	@ (8024890 <mg_dtoa+0x350>)
 80245f8:	4650      	mov	r0, sl
 80245fa:	4659      	mov	r1, fp
 80245fc:	f7ec fa9a 	bl	8010b34 <__aeabi_dcmpge>
 8024600:	b1b0      	cbz	r0, 8024630 <mg_dtoa+0xf0>
 8024602:	4622      	mov	r2, r4
 8024604:	462b      	mov	r3, r5
 8024606:	4650      	mov	r0, sl
 8024608:	4659      	mov	r1, fp
 802460a:	f7ec f937 	bl	801087c <__aeabi_ddiv>
 802460e:	2200      	movs	r2, #0
 8024610:	4b9f      	ldr	r3, [pc, #636]	@ (8024890 <mg_dtoa+0x350>)
 8024612:	f7ec fa8f 	bl	8010b34 <__aeabi_dcmpge>
 8024616:	2800      	cmp	r0, #0
 8024618:	d1e4      	bne.n	80245e4 <mg_dtoa+0xa4>
 802461a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 802461e:	e007      	b.n	8024630 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8024620:	2200      	movs	r2, #0
 8024622:	4b9b      	ldr	r3, [pc, #620]	@ (8024890 <mg_dtoa+0x350>)
 8024624:	4620      	mov	r0, r4
 8024626:	4629      	mov	r1, r5
 8024628:	f7ec f928 	bl	801087c <__aeabi_ddiv>
 802462c:	4604      	mov	r4, r0
 802462e:	460d      	mov	r5, r1
 8024630:	2200      	movs	r2, #0
 8024632:	4b91      	ldr	r3, [pc, #580]	@ (8024878 <mg_dtoa+0x338>)
 8024634:	4650      	mov	r0, sl
 8024636:	4659      	mov	r1, fp
 8024638:	f7ec fa72 	bl	8010b20 <__aeabi_dcmple>
 802463c:	b158      	cbz	r0, 8024656 <mg_dtoa+0x116>
 802463e:	4622      	mov	r2, r4
 8024640:	462b      	mov	r3, r5
 8024642:	4650      	mov	r0, sl
 8024644:	4659      	mov	r1, fp
 8024646:	f7ec f919 	bl	801087c <__aeabi_ddiv>
 802464a:	2200      	movs	r2, #0
 802464c:	4b8a      	ldr	r3, [pc, #552]	@ (8024878 <mg_dtoa+0x338>)
 802464e:	f7ec fa67 	bl	8010b20 <__aeabi_dcmple>
 8024652:	2800      	cmp	r0, #0
 8024654:	d1e4      	bne.n	8024620 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8024656:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802465a:	2200      	movs	r2, #0
 802465c:	4b8d      	ldr	r3, [pc, #564]	@ (8024894 <mg_dtoa+0x354>)
 802465e:	4620      	mov	r0, r4
 8024660:	4629      	mov	r1, r5
 8024662:	f7eb ffe1 	bl	8010628 <__aeabi_dmul>
 8024666:	4634      	mov	r4, r6
 8024668:	e004      	b.n	8024674 <mg_dtoa+0x134>
 802466a:	2200      	movs	r2, #0
 802466c:	4b88      	ldr	r3, [pc, #544]	@ (8024890 <mg_dtoa+0x350>)
 802466e:	f7ec f905 	bl	801087c <__aeabi_ddiv>
 8024672:	3401      	adds	r4, #1
 8024674:	4544      	cmp	r4, r8
 8024676:	dbf8      	blt.n	802466a <mg_dtoa+0x12a>
  d += t;
 8024678:	4602      	mov	r2, r0
 802467a:	460b      	mov	r3, r1
 802467c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024680:	f7eb fe1c 	bl	80102bc <__adddf3>
 8024684:	4682      	mov	sl, r0
 8024686:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8024688:	46b1      	mov	r9, r6
  mul = 1.0;
 802468a:	2400      	movs	r4, #0
 802468c:	4d7a      	ldr	r5, [pc, #488]	@ (8024878 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 802468e:	e009      	b.n	80246a4 <mg_dtoa+0x164>
 8024690:	2200      	movs	r2, #0
 8024692:	4b7f      	ldr	r3, [pc, #508]	@ (8024890 <mg_dtoa+0x350>)
 8024694:	4620      	mov	r0, r4
 8024696:	4629      	mov	r1, r5
 8024698:	f7eb ffc6 	bl	8010628 <__aeabi_dmul>
 802469c:	4604      	mov	r4, r0
 802469e:	460d      	mov	r5, r1
 80246a0:	f109 0901 	add.w	r9, r9, #1
 80246a4:	2200      	movs	r2, #0
 80246a6:	4b7a      	ldr	r3, [pc, #488]	@ (8024890 <mg_dtoa+0x350>)
 80246a8:	4650      	mov	r0, sl
 80246aa:	4659      	mov	r1, fp
 80246ac:	f7ec fa42 	bl	8010b34 <__aeabi_dcmpge>
 80246b0:	b1b0      	cbz	r0, 80246e0 <mg_dtoa+0x1a0>
 80246b2:	4622      	mov	r2, r4
 80246b4:	462b      	mov	r3, r5
 80246b6:	4650      	mov	r0, sl
 80246b8:	4659      	mov	r1, fp
 80246ba:	f7ec f8df 	bl	801087c <__aeabi_ddiv>
 80246be:	2200      	movs	r2, #0
 80246c0:	4b73      	ldr	r3, [pc, #460]	@ (8024890 <mg_dtoa+0x350>)
 80246c2:	f7ec fa37 	bl	8010b34 <__aeabi_dcmpge>
 80246c6:	2800      	cmp	r0, #0
 80246c8:	d1e2      	bne.n	8024690 <mg_dtoa+0x150>
 80246ca:	e009      	b.n	80246e0 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80246cc:	2200      	movs	r2, #0
 80246ce:	4b70      	ldr	r3, [pc, #448]	@ (8024890 <mg_dtoa+0x350>)
 80246d0:	4620      	mov	r0, r4
 80246d2:	4629      	mov	r1, r5
 80246d4:	f7ec f8d2 	bl	801087c <__aeabi_ddiv>
 80246d8:	4604      	mov	r4, r0
 80246da:	460d      	mov	r5, r1
 80246dc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80246e0:	2200      	movs	r2, #0
 80246e2:	4b65      	ldr	r3, [pc, #404]	@ (8024878 <mg_dtoa+0x338>)
 80246e4:	4650      	mov	r0, sl
 80246e6:	4659      	mov	r1, fp
 80246e8:	f7ec fa10 	bl	8010b0c <__aeabi_dcmplt>
 80246ec:	b158      	cbz	r0, 8024706 <mg_dtoa+0x1c6>
 80246ee:	4622      	mov	r2, r4
 80246f0:	462b      	mov	r3, r5
 80246f2:	4650      	mov	r0, sl
 80246f4:	4659      	mov	r1, fp
 80246f6:	f7ec f8c1 	bl	801087c <__aeabi_ddiv>
 80246fa:	2200      	movs	r2, #0
 80246fc:	4b5e      	ldr	r3, [pc, #376]	@ (8024878 <mg_dtoa+0x338>)
 80246fe:	f7ec fa05 	bl	8010b0c <__aeabi_dcmplt>
 8024702:	2800      	cmp	r0, #0
 8024704:	d1e2      	bne.n	80246cc <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8024706:	45c1      	cmp	r9, r8
 8024708:	db02      	blt.n	8024710 <mg_dtoa+0x1d0>
 802470a:	f1b8 0f01 	cmp.w	r8, #1
 802470e:	dc25      	bgt.n	802475c <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8024710:	f1c8 0300 	rsb	r3, r8, #0
 8024714:	454b      	cmp	r3, r9
 8024716:	db5e      	blt.n	80247d6 <mg_dtoa+0x296>
 8024718:	f1b8 0f01 	cmp.w	r8, #1
 802471c:	dd5b      	ble.n	80247d6 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 802471e:	4622      	mov	r2, r4
 8024720:	462b      	mov	r3, r5
 8024722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024726:	f7ec f8a9 	bl	801087c <__aeabi_ddiv>
 802472a:	ad08      	add	r5, sp, #32
 802472c:	9b07      	ldr	r3, [sp, #28]
 802472e:	4642      	mov	r2, r8
 8024730:	ec41 0b10 	vmov	d0, r0, r1
 8024734:	2128      	movs	r1, #40	@ 0x28
 8024736:	4628      	mov	r0, r5
 8024738:	f7ff ff02 	bl	8024540 <mg_dtoa>
 802473c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 802473e:	1838      	adds	r0, r7, r0
 8024740:	222d      	movs	r2, #45	@ 0x2d
 8024742:	f1c9 0100 	rsb	r1, r9, #0
 8024746:	4428      	add	r0, r5
 8024748:	f7fc f982 	bl	8020a50 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 802474c:	9500      	str	r5, [sp, #0]
 802474e:	1823      	adds	r3, r4, r0
 8024750:	4a51      	ldr	r2, [pc, #324]	@ (8024898 <mg_dtoa+0x358>)
 8024752:	9906      	ldr	r1, [sp, #24]
 8024754:	9805      	ldr	r0, [sp, #20]
 8024756:	f7ff fee3 	bl	8024520 <mg_snprintf>
 802475a:	e0f6      	b.n	802494a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 802475c:	4622      	mov	r2, r4
 802475e:	462b      	mov	r3, r5
 8024760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024764:	f7ec f88a 	bl	801087c <__aeabi_ddiv>
 8024768:	ad08      	add	r5, sp, #32
 802476a:	9b07      	ldr	r3, [sp, #28]
 802476c:	4642      	mov	r2, r8
 802476e:	ec41 0b10 	vmov	d0, r0, r1
 8024772:	2128      	movs	r1, #40	@ 0x28
 8024774:	4628      	mov	r0, r5
 8024776:	f7ff fee3 	bl	8024540 <mg_dtoa>
 802477a:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 802477c:	1838      	adds	r0, r7, r0
 802477e:	222b      	movs	r2, #43	@ 0x2b
 8024780:	4649      	mov	r1, r9
 8024782:	4428      	add	r0, r5
 8024784:	f7fc f964 	bl	8020a50 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8024788:	9500      	str	r5, [sp, #0]
 802478a:	1823      	adds	r3, r4, r0
 802478c:	4a42      	ldr	r2, [pc, #264]	@ (8024898 <mg_dtoa+0x358>)
 802478e:	9906      	ldr	r1, [sp, #24]
 8024790:	9805      	ldr	r0, [sp, #20]
 8024792:	f7ff fec5 	bl	8024520 <mg_snprintf>
 8024796:	e0d8      	b.n	802494a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8024798:	3601      	adds	r6, #1
 802479a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802479e:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 80247a2:	eb0d 0902 	add.w	r9, sp, r2
 80247a6:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 80247aa:	f7eb fed3 	bl	8010554 <__aeabi_i2d>
 80247ae:	4622      	mov	r2, r4
 80247b0:	462b      	mov	r3, r5
 80247b2:	f7eb ff39 	bl	8010628 <__aeabi_dmul>
 80247b6:	4602      	mov	r2, r0
 80247b8:	460b      	mov	r3, r1
 80247ba:	4650      	mov	r0, sl
 80247bc:	4659      	mov	r1, fp
 80247be:	f7eb fd7b 	bl	80102b8 <__aeabi_dsub>
 80247c2:	4682      	mov	sl, r0
 80247c4:	468b      	mov	fp, r1
      t /= 10.0;
 80247c6:	2200      	movs	r2, #0
 80247c8:	4b31      	ldr	r3, [pc, #196]	@ (8024890 <mg_dtoa+0x350>)
 80247ca:	4620      	mov	r0, r4
 80247cc:	4629      	mov	r1, r5
 80247ce:	f7ec f855 	bl	801087c <__aeabi_ddiv>
 80247d2:	4604      	mov	r4, r0
 80247d4:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80247d6:	2200      	movs	r2, #0
 80247d8:	4b27      	ldr	r3, [pc, #156]	@ (8024878 <mg_dtoa+0x338>)
 80247da:	4620      	mov	r0, r4
 80247dc:	4629      	mov	r1, r5
 80247de:	f7ec f9a9 	bl	8010b34 <__aeabi_dcmpge>
 80247e2:	b188      	cbz	r0, 8024808 <mg_dtoa+0x2c8>
 80247e4:	eb07 0906 	add.w	r9, r7, r6
 80247e8:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80247ec:	dc0c      	bgt.n	8024808 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 80247ee:	4622      	mov	r2, r4
 80247f0:	462b      	mov	r3, r5
 80247f2:	4650      	mov	r0, sl
 80247f4:	4659      	mov	r1, fp
 80247f6:	f7ec f841 	bl	801087c <__aeabi_ddiv>
 80247fa:	f7ec f9c5 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80247fe:	2e00      	cmp	r6, #0
 8024800:	dcca      	bgt.n	8024798 <mg_dtoa+0x258>
 8024802:	2800      	cmp	r0, #0
 8024804:	dcc8      	bgt.n	8024798 <mg_dtoa+0x258>
 8024806:	e7d0      	b.n	80247aa <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8024808:	b9ce      	cbnz	r6, 802483e <mg_dtoa+0x2fe>
 802480a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802480e:	446b      	add	r3, sp
 8024810:	2230      	movs	r2, #48	@ 0x30
 8024812:	f803 2c28 	strb.w	r2, [r3, #-40]
 8024816:	3701      	adds	r7, #1
 8024818:	e011      	b.n	802483e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 802481a:	f106 0901 	add.w	r9, r6, #1
 802481e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8024822:	eb0d 0603 	add.w	r6, sp, r3
 8024826:	2330      	movs	r3, #48	@ 0x30
 8024828:	f806 3c28 	strb.w	r3, [r6, #-40]
 802482c:	2200      	movs	r2, #0
 802482e:	4b18      	ldr	r3, [pc, #96]	@ (8024890 <mg_dtoa+0x350>)
 8024830:	4620      	mov	r0, r4
 8024832:	4629      	mov	r1, r5
 8024834:	f7ec f822 	bl	801087c <__aeabi_ddiv>
 8024838:	4604      	mov	r4, r0
 802483a:	460d      	mov	r5, r1
 802483c:	464e      	mov	r6, r9
 802483e:	2200      	movs	r2, #0
 8024840:	4b0d      	ldr	r3, [pc, #52]	@ (8024878 <mg_dtoa+0x338>)
 8024842:	4620      	mov	r0, r4
 8024844:	4629      	mov	r1, r5
 8024846:	f7ec f975 	bl	8010b34 <__aeabi_dcmpge>
 802484a:	b110      	cbz	r0, 8024852 <mg_dtoa+0x312>
 802484c:	19f3      	adds	r3, r6, r7
 802484e:	2b27      	cmp	r3, #39	@ 0x27
 8024850:	dde3      	ble.n	802481a <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8024852:	19f3      	adds	r3, r6, r7
 8024854:	2b27      	cmp	r3, #39	@ 0x27
 8024856:	dc05      	bgt.n	8024864 <mg_dtoa+0x324>
 8024858:	3701      	adds	r7, #1
 802485a:	3348      	adds	r3, #72	@ 0x48
 802485c:	446b      	add	r3, sp
 802485e:	222e      	movs	r2, #46	@ 0x2e
 8024860:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8024864:	a502      	add	r5, pc, #8	@ (adr r5, 8024870 <mg_dtoa+0x330>)
 8024866:	e9d5 4500 	ldrd	r4, r5, [r5]
 802486a:	e03e      	b.n	80248ea <mg_dtoa+0x3aa>
 802486c:	f3af 8000 	nop.w
 8024870:	9999999a 	.word	0x9999999a
 8024874:	3fb99999 	.word	0x3fb99999
 8024878:	3ff00000 	.word	0x3ff00000
 802487c:	0803ad24 	.word	0x0803ad24
 8024880:	0803c608 	.word	0x0803c608
 8024884:	0803ba30 	.word	0x0803ba30
 8024888:	0803ba34 	.word	0x0803ba34
 802488c:	0803ba3c 	.word	0x0803ba3c
 8024890:	40240000 	.word	0x40240000
 8024894:	40140000 	.word	0x40140000
 8024898:	0803ba40 	.word	0x0803ba40
      int ch = (int) (d / t);
 802489c:	4622      	mov	r2, r4
 802489e:	462b      	mov	r3, r5
 80248a0:	4650      	mov	r0, sl
 80248a2:	4659      	mov	r1, fp
 80248a4:	f7eb ffea 	bl	801087c <__aeabi_ddiv>
 80248a8:	f7ec f96e 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 80248ac:	3601      	adds	r6, #1
 80248ae:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80248b2:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 80248b6:	eb0d 0902 	add.w	r9, sp, r2
 80248ba:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 80248be:	f7eb fe49 	bl	8010554 <__aeabi_i2d>
 80248c2:	4622      	mov	r2, r4
 80248c4:	462b      	mov	r3, r5
 80248c6:	f7eb feaf 	bl	8010628 <__aeabi_dmul>
 80248ca:	4602      	mov	r2, r0
 80248cc:	460b      	mov	r3, r1
 80248ce:	4650      	mov	r0, sl
 80248d0:	4659      	mov	r1, fp
 80248d2:	f7eb fcf1 	bl	80102b8 <__aeabi_dsub>
 80248d6:	4682      	mov	sl, r0
 80248d8:	468b      	mov	fp, r1
      t /= 10.0;
 80248da:	2200      	movs	r2, #0
 80248dc:	4b1d      	ldr	r3, [pc, #116]	@ (8024954 <mg_dtoa+0x414>)
 80248de:	4620      	mov	r0, r4
 80248e0:	4629      	mov	r1, r5
 80248e2:	f7eb ffcb 	bl	801087c <__aeabi_ddiv>
 80248e6:	4604      	mov	r4, r0
 80248e8:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80248ea:	eb07 0906 	add.w	r9, r7, r6
 80248ee:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80248f2:	dc03      	bgt.n	80248fc <mg_dtoa+0x3bc>
 80248f4:	4546      	cmp	r6, r8
 80248f6:	dbd1      	blt.n	802489c <mg_dtoa+0x35c>
 80248f8:	9a07      	ldr	r2, [sp, #28]
 80248fa:	e000      	b.n	80248fe <mg_dtoa+0x3be>
 80248fc:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80248fe:	b152      	cbz	r2, 8024916 <mg_dtoa+0x3d6>
 8024900:	2e00      	cmp	r6, #0
 8024902:	dd08      	ble.n	8024916 <mg_dtoa+0x3d6>
 8024904:	19bb      	adds	r3, r7, r6
 8024906:	3347      	adds	r3, #71	@ 0x47
 8024908:	446b      	add	r3, sp
 802490a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802490e:	2b30      	cmp	r3, #48	@ 0x30
 8024910:	d101      	bne.n	8024916 <mg_dtoa+0x3d6>
 8024912:	3e01      	subs	r6, #1
 8024914:	e7f3      	b.n	80248fe <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8024916:	2e00      	cmp	r6, #0
 8024918:	dd06      	ble.n	8024928 <mg_dtoa+0x3e8>
 802491a:	19bb      	adds	r3, r7, r6
 802491c:	3347      	adds	r3, #71	@ 0x47
 802491e:	446b      	add	r3, sp
 8024920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8024924:	2b2e      	cmp	r3, #46	@ 0x2e
 8024926:	d013      	beq.n	8024950 <mg_dtoa+0x410>
  n += s;
 8024928:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 802492a:	2f27      	cmp	r7, #39	@ 0x27
 802492c:	dd00      	ble.n	8024930 <mg_dtoa+0x3f0>
 802492e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8024930:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024934:	eb0d 0703 	add.w	r7, sp, r3
 8024938:	2300      	movs	r3, #0
 802493a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 802493e:	ab08      	add	r3, sp, #32
 8024940:	4a05      	ldr	r2, [pc, #20]	@ (8024958 <mg_dtoa+0x418>)
 8024942:	9906      	ldr	r1, [sp, #24]
 8024944:	9805      	ldr	r0, [sp, #20]
 8024946:	f7ff fdeb 	bl	8024520 <mg_snprintf>
}
 802494a:	b013      	add	sp, #76	@ 0x4c
 802494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8024950:	3e01      	subs	r6, #1
 8024952:	e7e9      	b.n	8024928 <mg_dtoa+0x3e8>
 8024954:	40240000 	.word	0x40240000
 8024958:	0803c608 	.word	0x0803c608

0802495c <mg_vxprintf>:
                   va_list *ap) {
 802495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024960:	b093      	sub	sp, #76	@ 0x4c
 8024962:	4681      	mov	r9, r0
 8024964:	468a      	mov	sl, r1
 8024966:	4693      	mov	fp, r2
 8024968:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 802496a:	2700      	movs	r7, #0
 802496c:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 802496e:	e1bc      	b.n	8024cea <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8024970:	2320      	movs	r3, #32
 8024972:	f88d 301f 	strb.w	r3, [sp, #31]
 8024976:	1c66      	adds	r6, r4, #1
 8024978:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 802497c:	2d23      	cmp	r5, #35	@ 0x23
 802497e:	d00c      	beq.n	802499a <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8024980:	2300      	movs	r3, #0
 8024982:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8024984:	2d2d      	cmp	r5, #45	@ 0x2d
 8024986:	d10e      	bne.n	80249a6 <mg_vxprintf+0x4a>
 8024988:	3601      	adds	r6, #1
 802498a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802498e:	2301      	movs	r3, #1
 8024990:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8024992:	2d30      	cmp	r5, #48	@ 0x30
 8024994:	d00a      	beq.n	80249ac <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8024996:	2400      	movs	r4, #0
 8024998:	e017      	b.n	80249ca <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 802499a:	1ca6      	adds	r6, r4, #2
 802499c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80249a0:	2301      	movs	r3, #1
 80249a2:	9302      	str	r3, [sp, #8]
 80249a4:	e7ee      	b.n	8024984 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 80249a6:	2300      	movs	r3, #0
 80249a8:	9304      	str	r3, [sp, #16]
 80249aa:	e7f2      	b.n	8024992 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 80249ac:	2330      	movs	r3, #48	@ 0x30
 80249ae:	f88d 301f 	strb.w	r3, [sp, #31]
 80249b2:	3601      	adds	r6, #1
 80249b4:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80249b8:	e7ed      	b.n	8024996 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80249ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80249be:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80249c2:	3c30      	subs	r4, #48	@ 0x30
 80249c4:	3601      	adds	r6, #1
 80249c6:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80249ca:	4628      	mov	r0, r5
 80249cc:	f7fc f839 	bl	8020a42 <is_digit>
 80249d0:	4601      	mov	r1, r0
 80249d2:	2800      	cmp	r0, #0
 80249d4:	d1f1      	bne.n	80249ba <mg_vxprintf+0x5e>
      if (c == '.') {
 80249d6:	2d2e      	cmp	r5, #46	@ 0x2e
 80249d8:	d002      	beq.n	80249e0 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80249da:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80249de:	e026      	b.n	8024a2e <mg_vxprintf+0xd2>
        c = fmt[++i];
 80249e0:	1c73      	adds	r3, r6, #1
 80249e2:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 80249e6:	2d2a      	cmp	r5, #42	@ 0x2a
 80249e8:	d119      	bne.n	8024a1e <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 80249ea:	9803      	ldr	r0, [sp, #12]
 80249ec:	6803      	ldr	r3, [r0, #0]
 80249ee:	1d1a      	adds	r2, r3, #4
 80249f0:	6002      	str	r2, [r0, #0]
 80249f2:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 80249f6:	3602      	adds	r6, #2
 80249f8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80249fc:	e017      	b.n	8024a2e <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80249fe:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8024a02:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8024a06:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8024a0a:	3601      	adds	r6, #1
 8024a0c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024a10:	4628      	mov	r0, r5
 8024a12:	f7fc f816 	bl	8020a42 <is_digit>
 8024a16:	2800      	cmp	r0, #0
 8024a18:	d1f1      	bne.n	80249fe <mg_vxprintf+0xa2>
 8024a1a:	9905      	ldr	r1, [sp, #20]
 8024a1c:	e007      	b.n	8024a2e <mg_vxprintf+0xd2>
          pr = 0;
 8024a1e:	f04f 0800 	mov.w	r8, #0
 8024a22:	461e      	mov	r6, r3
 8024a24:	9005      	str	r0, [sp, #20]
 8024a26:	e7f3      	b.n	8024a10 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8024a28:	3601      	adds	r6, #1
 8024a2a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024a2e:	2d68      	cmp	r5, #104	@ 0x68
 8024a30:	d0fa      	beq.n	8024a28 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8024a32:	2d6c      	cmp	r5, #108	@ 0x6c
 8024a34:	d05f      	beq.n	8024af6 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8024a36:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8024a38:	2d70      	cmp	r5, #112	@ 0x70
 8024a3a:	d069      	beq.n	8024b10 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8024a3c:	2d64      	cmp	r5, #100	@ 0x64
 8024a3e:	d06a      	beq.n	8024b16 <mg_vxprintf+0x1ba>
 8024a40:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8024a44:	2b53      	cmp	r3, #83	@ 0x53
 8024a46:	f200 81bc 	bhi.w	8024dc2 <mg_vxprintf+0x466>
 8024a4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8024a4e:	01b5      	.short	0x01b5
 8024a50:	01ba01ba 	.word	0x01ba01ba
 8024a54:	01ba01ba 	.word	0x01ba01ba
 8024a58:	01ba01ba 	.word	0x01ba01ba
 8024a5c:	01ba01ba 	.word	0x01ba01ba
 8024a60:	01ba01ba 	.word	0x01ba01ba
 8024a64:	01ba01ba 	.word	0x01ba01ba
 8024a68:	01ba01ba 	.word	0x01ba01ba
 8024a6c:	01ba01ba 	.word	0x01ba01ba
 8024a70:	01ba01ba 	.word	0x01ba01ba
 8024a74:	01ba01ba 	.word	0x01ba01ba
 8024a78:	01ba01ba 	.word	0x01ba01ba
 8024a7c:	01ba01ba 	.word	0x01ba01ba
 8024a80:	01ba01ba 	.word	0x01ba01ba
 8024a84:	01ba01ba 	.word	0x01ba01ba
 8024a88:	01ba01ba 	.word	0x01ba01ba
 8024a8c:	01ba01ba 	.word	0x01ba01ba
 8024a90:	01ba01ba 	.word	0x01ba01ba
 8024a94:	01ba01ba 	.word	0x01ba01ba
 8024a98:	01ba01ba 	.word	0x01ba01ba
 8024a9c:	014101ba 	.word	0x014101ba
 8024aa0:	01ba01ba 	.word	0x01ba01ba
 8024aa4:	01ba01ba 	.word	0x01ba01ba
 8024aa8:	01ba01ba 	.word	0x01ba01ba
 8024aac:	01ba01ba 	.word	0x01ba01ba
 8024ab0:	01ba01ba 	.word	0x01ba01ba
 8024ab4:	01ba0065 	.word	0x01ba0065
 8024ab8:	01ba01ba 	.word	0x01ba01ba
 8024abc:	01ba01ba 	.word	0x01ba01ba
 8024ac0:	01ba01ba 	.word	0x01ba01ba
 8024ac4:	01ba01ba 	.word	0x01ba01ba
 8024ac8:	016801ba 	.word	0x016801ba
 8024acc:	01ba01ba 	.word	0x01ba01ba
 8024ad0:	00650065 	.word	0x00650065
 8024ad4:	01ba01ba 	.word	0x01ba01ba
 8024ad8:	01ba01ba 	.word	0x01ba01ba
 8024adc:	015a01ba 	.word	0x015a01ba
 8024ae0:	01ba01ba 	.word	0x01ba01ba
 8024ae4:	01ba0065 	.word	0x01ba0065
 8024ae8:	017101ba 	.word	0x017101ba
 8024aec:	006501ba 	.word	0x006501ba
 8024af0:	01ba01ba 	.word	0x01ba01ba
 8024af4:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8024af6:	1c73      	adds	r3, r6, #1
 8024af8:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8024afc:	2d6c      	cmp	r5, #108	@ 0x6c
 8024afe:	d002      	beq.n	8024b06 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8024b00:	461e      	mov	r6, r3
 8024b02:	2201      	movs	r2, #1
 8024b04:	e798      	b.n	8024a38 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8024b06:	3602      	adds	r6, #2
 8024b08:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024b0c:	2202      	movs	r2, #2
 8024b0e:	e793      	b.n	8024a38 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8024b10:	2201      	movs	r2, #1
 8024b12:	9202      	str	r2, [sp, #8]
 8024b14:	e792      	b.n	8024a3c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8024b16:	2101      	movs	r1, #1
 8024b18:	2d58      	cmp	r5, #88	@ 0x58
 8024b1a:	d027      	beq.n	8024b6c <mg_vxprintf+0x210>
 8024b1c:	2d70      	cmp	r5, #112	@ 0x70
 8024b1e:	d021      	beq.n	8024b64 <mg_vxprintf+0x208>
 8024b20:	2300      	movs	r3, #0
 8024b22:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8024b24:	9b02      	ldr	r3, [sp, #8]
 8024b26:	b10b      	cbz	r3, 8024b2c <mg_vxprintf+0x1d0>
 8024b28:	2302      	movs	r3, #2
 8024b2a:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8024b2c:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8024b30:	b2db      	uxtb	r3, r3
 8024b32:	2b01      	cmp	r3, #1
 8024b34:	d91c      	bls.n	8024b70 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8024b36:	2a02      	cmp	r2, #2
 8024b38:	d037      	beq.n	8024baa <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8024b3a:	2a01      	cmp	r2, #1
 8024b3c:	d046      	beq.n	8024bcc <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8024b3e:	9b03      	ldr	r3, [sp, #12]
 8024b40:	f8d3 c000 	ldr.w	ip, [r3]
 8024b44:	f10c 0204 	add.w	r2, ip, #4
 8024b48:	601a      	str	r2, [r3, #0]
 8024b4a:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8024b4e:	2d64      	cmp	r5, #100	@ 0x64
 8024b50:	d052      	beq.n	8024bf8 <mg_vxprintf+0x29c>
 8024b52:	461a      	mov	r2, r3
 8024b54:	2300      	movs	r3, #0
 8024b56:	9001      	str	r0, [sp, #4]
 8024b58:	9100      	str	r1, [sp, #0]
 8024b5a:	a808      	add	r0, sp, #32
 8024b5c:	f7fb ffd4 	bl	8020b08 <mg_lld>
 8024b60:	4605      	mov	r5, r0
 8024b62:	e01c      	b.n	8024b9e <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8024b64:	2301      	movs	r3, #1
 8024b66:	e7dc      	b.n	8024b22 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8024b68:	2301      	movs	r3, #1
 8024b6a:	e7da      	b.n	8024b22 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8024b6c:	2301      	movs	r3, #1
 8024b6e:	e7d8      	b.n	8024b22 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8024b70:	9903      	ldr	r1, [sp, #12]
 8024b72:	680b      	ldr	r3, [r1, #0]
 8024b74:	3307      	adds	r3, #7
 8024b76:	f023 0307 	bic.w	r3, r3, #7
 8024b7a:	f103 0208 	add.w	r2, r3, #8
 8024b7e:	600a      	str	r2, [r1, #0]
 8024b80:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8024b84:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024b88:	d00c      	beq.n	8024ba4 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8024b8a:	2d67      	cmp	r5, #103	@ 0x67
 8024b8c:	bf14      	ite	ne
 8024b8e:	2300      	movne	r3, #0
 8024b90:	2301      	moveq	r3, #1
 8024b92:	4642      	mov	r2, r8
 8024b94:	2128      	movs	r1, #40	@ 0x28
 8024b96:	a808      	add	r0, sp, #32
 8024b98:	f7ff fcd2 	bl	8024540 <mg_dtoa>
 8024b9c:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	9a02      	ldr	r2, [sp, #8]
 8024ba2:	e02e      	b.n	8024c02 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8024ba4:	f04f 0806 	mov.w	r8, #6
 8024ba8:	e7ef      	b.n	8024b8a <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8024baa:	9d03      	ldr	r5, [sp, #12]
 8024bac:	682b      	ldr	r3, [r5, #0]
 8024bae:	3307      	adds	r3, #7
 8024bb0:	f023 0307 	bic.w	r3, r3, #7
 8024bb4:	f103 0208 	add.w	r2, r3, #8
 8024bb8:	602a      	str	r2, [r5, #0]
 8024bba:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8024bbe:	9001      	str	r0, [sp, #4]
 8024bc0:	9100      	str	r1, [sp, #0]
 8024bc2:	a808      	add	r0, sp, #32
 8024bc4:	f7fb ffa0 	bl	8020b08 <mg_lld>
 8024bc8:	4605      	mov	r5, r0
 8024bca:	e7e8      	b.n	8024b9e <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8024bcc:	9b03      	ldr	r3, [sp, #12]
 8024bce:	f8d3 c000 	ldr.w	ip, [r3]
 8024bd2:	f10c 0204 	add.w	r2, ip, #4
 8024bd6:	601a      	str	r2, [r3, #0]
 8024bd8:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8024bdc:	2d64      	cmp	r5, #100	@ 0x64
 8024bde:	d008      	beq.n	8024bf2 <mg_vxprintf+0x296>
 8024be0:	461a      	mov	r2, r3
 8024be2:	2300      	movs	r3, #0
 8024be4:	9001      	str	r0, [sp, #4]
 8024be6:	9100      	str	r1, [sp, #0]
 8024be8:	a808      	add	r0, sp, #32
 8024bea:	f7fb ff8d 	bl	8020b08 <mg_lld>
 8024bee:	4605      	mov	r5, r0
 8024bf0:	e7d5      	b.n	8024b9e <mg_vxprintf+0x242>
 8024bf2:	461a      	mov	r2, r3
 8024bf4:	17db      	asrs	r3, r3, #31
 8024bf6:	e7f5      	b.n	8024be4 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8024bf8:	461a      	mov	r2, r3
 8024bfa:	17db      	asrs	r3, r3, #31
 8024bfc:	e7ab      	b.n	8024b56 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8024bfe:	3c01      	subs	r4, #1
 8024c00:	3301      	adds	r3, #1
 8024c02:	4293      	cmp	r3, r2
 8024c04:	d225      	bcs.n	8024c52 <mg_vxprintf+0x2f6>
 8024c06:	2c00      	cmp	r4, #0
 8024c08:	d1f9      	bne.n	8024bfe <mg_vxprintf+0x2a2>
 8024c0a:	46a0      	mov	r8, r4
 8024c0c:	9605      	str	r6, [sp, #20]
 8024c0e:	9e04      	ldr	r6, [sp, #16]
 8024c10:	e009      	b.n	8024c26 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8024c12:	2301      	movs	r3, #1
 8024c14:	f10d 021f 	add.w	r2, sp, #31
 8024c18:	4651      	mov	r1, sl
 8024c1a:	4648      	mov	r0, r9
 8024c1c:	f7fc f80a 	bl	8020c34 <scpy>
 8024c20:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8024c22:	f108 0801 	add.w	r8, r8, #1
 8024c26:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024c2a:	2b20      	cmp	r3, #32
 8024c2c:	d106      	bne.n	8024c3c <mg_vxprintf+0x2e0>
 8024c2e:	b92e      	cbnz	r6, 8024c3c <mg_vxprintf+0x2e0>
 8024c30:	42a5      	cmp	r5, r4
 8024c32:	d203      	bcs.n	8024c3c <mg_vxprintf+0x2e0>
 8024c34:	eb08 0305 	add.w	r3, r8, r5
 8024c38:	42a3      	cmp	r3, r4
 8024c3a:	d3ea      	bcc.n	8024c12 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8024c3c:	9e05      	ldr	r6, [sp, #20]
 8024c3e:	9b02      	ldr	r3, [sp, #8]
 8024c40:	4a6b      	ldr	r2, [pc, #428]	@ (8024df0 <mg_vxprintf+0x494>)
 8024c42:	4651      	mov	r1, sl
 8024c44:	4648      	mov	r0, r9
 8024c46:	f7fb fff5 	bl	8020c34 <scpy>
 8024c4a:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8024c4e:	2700      	movs	r7, #0
 8024c50:	e00d      	b.n	8024c6e <mg_vxprintf+0x312>
 8024c52:	f04f 0800 	mov.w	r8, #0
 8024c56:	9605      	str	r6, [sp, #20]
 8024c58:	9e04      	ldr	r6, [sp, #16]
 8024c5a:	e7e4      	b.n	8024c26 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8024c5c:	2301      	movs	r3, #1
 8024c5e:	f10d 021f 	add.w	r2, sp, #31
 8024c62:	4651      	mov	r1, sl
 8024c64:	4648      	mov	r0, r9
 8024c66:	f7fb ffe5 	bl	8020c34 <scpy>
 8024c6a:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8024c6c:	3701      	adds	r7, #1
 8024c6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024c72:	2b30      	cmp	r3, #48	@ 0x30
 8024c74:	d104      	bne.n	8024c80 <mg_vxprintf+0x324>
 8024c76:	42a5      	cmp	r5, r4
 8024c78:	d202      	bcs.n	8024c80 <mg_vxprintf+0x324>
 8024c7a:	197b      	adds	r3, r7, r5
 8024c7c:	42a3      	cmp	r3, r4
 8024c7e:	d3ed      	bcc.n	8024c5c <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8024c80:	462b      	mov	r3, r5
 8024c82:	aa08      	add	r2, sp, #32
 8024c84:	4651      	mov	r1, sl
 8024c86:	4648      	mov	r0, r9
 8024c88:	f7fb ffd4 	bl	8020c34 <scpy>
 8024c8c:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8024c90:	f04f 0800 	mov.w	r8, #0
 8024c94:	9602      	str	r6, [sp, #8]
 8024c96:	9e04      	ldr	r6, [sp, #16]
 8024c98:	e009      	b.n	8024cae <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8024c9a:	2301      	movs	r3, #1
 8024c9c:	f10d 021f 	add.w	r2, sp, #31
 8024ca0:	4651      	mov	r1, sl
 8024ca2:	4648      	mov	r0, r9
 8024ca4:	f7fb ffc6 	bl	8020c34 <scpy>
 8024ca8:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8024caa:	f108 0801 	add.w	r8, r8, #1
 8024cae:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024cb2:	2b20      	cmp	r3, #32
 8024cb4:	f040 808d 	bne.w	8024dd2 <mg_vxprintf+0x476>
 8024cb8:	2e00      	cmp	r6, #0
 8024cba:	f000 808c 	beq.w	8024dd6 <mg_vxprintf+0x47a>
 8024cbe:	42a5      	cmp	r5, r4
 8024cc0:	f080 808b 	bcs.w	8024dda <mg_vxprintf+0x47e>
 8024cc4:	eb08 0305 	add.w	r3, r8, r5
 8024cc8:	42a3      	cmp	r3, r4
 8024cca:	d3e6      	bcc.n	8024c9a <mg_vxprintf+0x33e>
 8024ccc:	9e02      	ldr	r6, [sp, #8]
 8024cce:	e00b      	b.n	8024ce8 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024cd0:	9903      	ldr	r1, [sp, #12]
 8024cd2:	680b      	ldr	r3, [r1, #0]
 8024cd4:	1d1a      	adds	r2, r3, #4
 8024cd6:	600a      	str	r2, [r1, #0]
 8024cd8:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8024cda:	9a03      	ldr	r2, [sp, #12]
 8024cdc:	4651      	mov	r1, sl
 8024cde:	4648      	mov	r0, r9
 8024ce0:	47a0      	blx	r4
 8024ce2:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8024ce4:	2d6d      	cmp	r5, #109	@ 0x6d
 8024ce6:	d015      	beq.n	8024d14 <mg_vxprintf+0x3b8>
      i++;
 8024ce8:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8024cea:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8024cee:	2800      	cmp	r0, #0
 8024cf0:	d079      	beq.n	8024de6 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8024cf2:	2825      	cmp	r0, #37	@ 0x25
 8024cf4:	f43f ae3c 	beq.w	8024970 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8024cf8:	4651      	mov	r1, sl
 8024cfa:	47c8      	blx	r9
 8024cfc:	3701      	adds	r7, #1
 8024cfe:	3401      	adds	r4, #1
 8024d00:	e7f3      	b.n	8024cea <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024d02:	9903      	ldr	r1, [sp, #12]
 8024d04:	680b      	ldr	r3, [r1, #0]
 8024d06:	1d1a      	adds	r2, r3, #4
 8024d08:	600a      	str	r2, [r1, #0]
 8024d0a:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8024d0c:	4651      	mov	r1, sl
 8024d0e:	2022      	movs	r0, #34	@ 0x22
 8024d10:	47c8      	blx	r9
 8024d12:	e7e2      	b.n	8024cda <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8024d14:	3702      	adds	r7, #2
 8024d16:	4651      	mov	r1, sl
 8024d18:	2022      	movs	r0, #34	@ 0x22
 8024d1a:	47c8      	blx	r9
 8024d1c:	e7e4      	b.n	8024ce8 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8024d1e:	9903      	ldr	r1, [sp, #12]
 8024d20:	680b      	ldr	r3, [r1, #0]
 8024d22:	1d1a      	adds	r2, r3, #4
 8024d24:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8024d26:	4651      	mov	r1, sl
 8024d28:	7818      	ldrb	r0, [r3, #0]
 8024d2a:	47c8      	blx	r9
        n++;
 8024d2c:	3701      	adds	r7, #1
 8024d2e:	e7db      	b.n	8024ce8 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8024d30:	9903      	ldr	r1, [sp, #12]
 8024d32:	680b      	ldr	r3, [r1, #0]
 8024d34:	1d1a      	adds	r2, r3, #4
 8024d36:	600a      	str	r2, [r1, #0]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8024d3c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024d40:	d003      	beq.n	8024d4a <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8024d42:	2500      	movs	r5, #0
 8024d44:	9605      	str	r6, [sp, #20]
 8024d46:	9e04      	ldr	r6, [sp, #16]
 8024d48:	e011      	b.n	8024d6e <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8024d4a:	4618      	mov	r0, r3
 8024d4c:	b11b      	cbz	r3, 8024d56 <mg_vxprintf+0x3fa>
 8024d4e:	f7eb faa7 	bl	80102a0 <strlen>
 8024d52:	4680      	mov	r8, r0
 8024d54:	e7f5      	b.n	8024d42 <mg_vxprintf+0x3e6>
 8024d56:	f04f 0800 	mov.w	r8, #0
 8024d5a:	e7f2      	b.n	8024d42 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8024d5c:	2301      	movs	r3, #1
 8024d5e:	f10d 021f 	add.w	r2, sp, #31
 8024d62:	4651      	mov	r1, sl
 8024d64:	4648      	mov	r0, r9
 8024d66:	f7fb ff65 	bl	8020c34 <scpy>
 8024d6a:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8024d6c:	3501      	adds	r5, #1
 8024d6e:	b92e      	cbnz	r6, 8024d7c <mg_vxprintf+0x420>
 8024d70:	4544      	cmp	r4, r8
 8024d72:	d903      	bls.n	8024d7c <mg_vxprintf+0x420>
 8024d74:	eb05 0308 	add.w	r3, r5, r8
 8024d78:	42a3      	cmp	r3, r4
 8024d7a:	d3ef      	bcc.n	8024d5c <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8024d7c:	9e05      	ldr	r6, [sp, #20]
 8024d7e:	4643      	mov	r3, r8
 8024d80:	9a02      	ldr	r2, [sp, #8]
 8024d82:	4651      	mov	r1, sl
 8024d84:	4648      	mov	r0, r9
 8024d86:	f7fb ff55 	bl	8020c34 <scpy>
 8024d8a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8024d8c:	2500      	movs	r5, #0
 8024d8e:	9602      	str	r6, [sp, #8]
 8024d90:	9e04      	ldr	r6, [sp, #16]
 8024d92:	e008      	b.n	8024da6 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8024d94:	2301      	movs	r3, #1
 8024d96:	f10d 021f 	add.w	r2, sp, #31
 8024d9a:	4651      	mov	r1, sl
 8024d9c:	4648      	mov	r0, r9
 8024d9e:	f7fb ff49 	bl	8020c34 <scpy>
 8024da2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8024da4:	3501      	adds	r5, #1
 8024da6:	b1d6      	cbz	r6, 8024dde <mg_vxprintf+0x482>
 8024da8:	4544      	cmp	r4, r8
 8024daa:	d91a      	bls.n	8024de2 <mg_vxprintf+0x486>
 8024dac:	eb05 0308 	add.w	r3, r5, r8
 8024db0:	42a3      	cmp	r3, r4
 8024db2:	d3ef      	bcc.n	8024d94 <mg_vxprintf+0x438>
 8024db4:	9e02      	ldr	r6, [sp, #8]
 8024db6:	e797      	b.n	8024ce8 <mg_vxprintf+0x38c>
        out('%', param);
 8024db8:	4651      	mov	r1, sl
 8024dba:	2025      	movs	r0, #37	@ 0x25
 8024dbc:	47c8      	blx	r9
        n++;
 8024dbe:	3701      	adds	r7, #1
 8024dc0:	e792      	b.n	8024ce8 <mg_vxprintf+0x38c>
        out('%', param);
 8024dc2:	4651      	mov	r1, sl
 8024dc4:	2025      	movs	r0, #37	@ 0x25
 8024dc6:	47c8      	blx	r9
        out(c, param);
 8024dc8:	4651      	mov	r1, sl
 8024dca:	4628      	mov	r0, r5
 8024dcc:	47c8      	blx	r9
        n += 2;
 8024dce:	3702      	adds	r7, #2
 8024dd0:	e78a      	b.n	8024ce8 <mg_vxprintf+0x38c>
 8024dd2:	9e02      	ldr	r6, [sp, #8]
 8024dd4:	e788      	b.n	8024ce8 <mg_vxprintf+0x38c>
 8024dd6:	9e02      	ldr	r6, [sp, #8]
 8024dd8:	e786      	b.n	8024ce8 <mg_vxprintf+0x38c>
 8024dda:	9e02      	ldr	r6, [sp, #8]
 8024ddc:	e784      	b.n	8024ce8 <mg_vxprintf+0x38c>
 8024dde:	9e02      	ldr	r6, [sp, #8]
 8024de0:	e782      	b.n	8024ce8 <mg_vxprintf+0x38c>
 8024de2:	9e02      	ldr	r6, [sp, #8]
 8024de4:	e780      	b.n	8024ce8 <mg_vxprintf+0x38c>
}
 8024de6:	4638      	mov	r0, r7
 8024de8:	b013      	add	sp, #76	@ 0x4c
 8024dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dee:	bf00      	nop
 8024df0:	0803ba48 	.word	0x0803ba48

08024df4 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8024df4:	b40c      	push	{r2, r3}
 8024df6:	b500      	push	{lr}
 8024df8:	b083      	sub	sp, #12
 8024dfa:	ab04      	add	r3, sp, #16
 8024dfc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024e00:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8024e02:	ab01      	add	r3, sp, #4
 8024e04:	f7ff fdaa 	bl	802495c <mg_vxprintf>
}
 8024e08:	b003      	add	sp, #12
 8024e0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e0e:	b002      	add	sp, #8
 8024e10:	4770      	bx	lr
	...

08024e14 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8024e14:	b530      	push	{r4, r5, lr}
 8024e16:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8024e18:	7853      	ldrb	r3, [r2, #1]
 8024e1a:	7894      	ldrb	r4, [r2, #2]
 8024e1c:	78d5      	ldrb	r5, [r2, #3]
 8024e1e:	9502      	str	r5, [sp, #8]
 8024e20:	9401      	str	r4, [sp, #4]
 8024e22:	9300      	str	r3, [sp, #0]
 8024e24:	7813      	ldrb	r3, [r2, #0]
 8024e26:	4a02      	ldr	r2, [pc, #8]	@ (8024e30 <print_ip4+0x1c>)
 8024e28:	f7ff ffe4 	bl	8024df4 <mg_xprintf>
}
 8024e2c:	b005      	add	sp, #20
 8024e2e:	bd30      	pop	{r4, r5, pc}
 8024e30:	0803ba4c 	.word	0x0803ba4c

08024e34 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8024e34:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024e36:	6813      	ldr	r3, [r2, #0]
 8024e38:	1d1c      	adds	r4, r3, #4
 8024e3a:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8024e3c:	681a      	ldr	r2, [r3, #0]
 8024e3e:	f7ff ffe9 	bl	8024e14 <print_ip4>
}
 8024e42:	bd10      	pop	{r4, pc}

08024e44 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8024e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e46:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024e48:	6813      	ldr	r3, [r2, #0]
 8024e4a:	1d1c      	adds	r4, r3, #4
 8024e4c:	6014      	str	r4, [r2, #0]
 8024e4e:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8024e50:	7813      	ldrb	r3, [r2, #0]
 8024e52:	7854      	ldrb	r4, [r2, #1]
 8024e54:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8024e56:	78d6      	ldrb	r6, [r2, #3]
 8024e58:	7917      	ldrb	r7, [r2, #4]
 8024e5a:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8024e5c:	9204      	str	r2, [sp, #16]
 8024e5e:	9703      	str	r7, [sp, #12]
 8024e60:	9602      	str	r6, [sp, #8]
 8024e62:	9501      	str	r5, [sp, #4]
 8024e64:	9400      	str	r4, [sp, #0]
 8024e66:	4a02      	ldr	r2, [pc, #8]	@ (8024e70 <mg_print_mac+0x2c>)
 8024e68:	f7ff ffc4 	bl	8024df4 <mg_xprintf>
}
 8024e6c:	b007      	add	sp, #28
 8024e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e70:	0803ba58 	.word	0x0803ba58

08024e74 <mg_log>:
void mg_log(const char *fmt, ...) {
 8024e74:	b40f      	push	{r0, r1, r2, r3}
 8024e76:	b500      	push	{lr}
 8024e78:	b083      	sub	sp, #12
 8024e7a:	ab04      	add	r3, sp, #16
 8024e7c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024e80:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8024e82:	ab01      	add	r3, sp, #4
 8024e84:	4907      	ldr	r1, [pc, #28]	@ (8024ea4 <mg_log+0x30>)
 8024e86:	6809      	ldr	r1, [r1, #0]
 8024e88:	4807      	ldr	r0, [pc, #28]	@ (8024ea8 <mg_log+0x34>)
 8024e8a:	6800      	ldr	r0, [r0, #0]
 8024e8c:	f7ff fd66 	bl	802495c <mg_vxprintf>
  logs("\r\n", 2);
 8024e90:	2102      	movs	r1, #2
 8024e92:	4806      	ldr	r0, [pc, #24]	@ (8024eac <mg_log+0x38>)
 8024e94:	f7fc fcaa 	bl	80217ec <logs>
}
 8024e98:	b003      	add	sp, #12
 8024e9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e9e:	b004      	add	sp, #16
 8024ea0:	4770      	bx	lr
 8024ea2:	bf00      	nop
 8024ea4:	20019fa0 	.word	0x20019fa0
 8024ea8:	20000128 	.word	0x20000128
 8024eac:	0803c46c 	.word	0x0803c46c

08024eb0 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8024eb0:	b538      	push	{r3, r4, r5, lr}
 8024eb2:	4604      	mov	r4, r0
 8024eb4:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8024eb6:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8024eb8:	460a      	mov	r2, r1
 8024eba:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8024ebe:	4803      	ldr	r0, [pc, #12]	@ (8024ecc <mg_vprintf+0x1c>)
 8024ec0:	f7ff fd4c 	bl	802495c <mg_vxprintf>
  return c->send.len - old;
 8024ec4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8024ec6:	1b40      	subs	r0, r0, r5
 8024ec8:	bd38      	pop	{r3, r4, r5, pc}
 8024eca:	bf00      	nop
 8024ecc:	08027fe7 	.word	0x08027fe7

08024ed0 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8024ed0:	b40e      	push	{r1, r2, r3}
 8024ed2:	b500      	push	{lr}
 8024ed4:	b082      	sub	sp, #8
 8024ed6:	ab03      	add	r3, sp, #12
 8024ed8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8024edc:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8024ede:	aa01      	add	r2, sp, #4
 8024ee0:	f7ff ffe6 	bl	8024eb0 <mg_vprintf>
}
 8024ee4:	b002      	add	sp, #8
 8024ee6:	f85d eb04 	ldr.w	lr, [sp], #4
 8024eea:	b003      	add	sp, #12
 8024eec:	4770      	bx	lr
	...

08024ef0 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8024ef0:	b530      	push	{r4, r5, lr}
 8024ef2:	b085      	sub	sp, #20
 8024ef4:	4605      	mov	r5, r0
 8024ef6:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8024ef8:	9000      	str	r0, [sp, #0]
 8024efa:	9101      	str	r1, [sp, #4]
 8024efc:	2100      	movs	r1, #0
 8024efe:	9102      	str	r1, [sp, #8]
 8024f00:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8024f02:	4669      	mov	r1, sp
 8024f04:	4804      	ldr	r0, [pc, #16]	@ (8024f18 <mg_vsnprintf+0x28>)
 8024f06:	f7ff fd29 	bl	802495c <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8024f0a:	4284      	cmp	r4, r0
 8024f0c:	d901      	bls.n	8024f12 <mg_vsnprintf+0x22>
 8024f0e:	2300      	movs	r3, #0
 8024f10:	542b      	strb	r3, [r5, r0]
}
 8024f12:	b005      	add	sp, #20
 8024f14:	bd30      	pop	{r4, r5, pc}
 8024f16:	bf00      	nop
 8024f18:	08027ff1 	.word	0x08027ff1

08024f1c <mg_http_reply>:
                   const char *fmt, ...) {
 8024f1c:	b408      	push	{r3}
 8024f1e:	b570      	push	{r4, r5, r6, lr}
 8024f20:	b085      	sub	sp, #20
 8024f22:	4604      	mov	r4, r0
 8024f24:	460e      	mov	r6, r1
 8024f26:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8024f28:	4608      	mov	r0, r1
 8024f2a:	f7fb ffcf 	bl	8020ecc <mg_http_status_code_str>
 8024f2e:	4603      	mov	r3, r0
 8024f30:	b1ed      	cbz	r5, 8024f6e <mg_http_reply+0x52>
 8024f32:	9500      	str	r5, [sp, #0]
 8024f34:	4632      	mov	r2, r6
 8024f36:	4916      	ldr	r1, [pc, #88]	@ (8024f90 <mg_http_reply+0x74>)
 8024f38:	4620      	mov	r0, r4
 8024f3a:	f7ff ffc9 	bl	8024ed0 <mg_printf>
  len = c->send.len;
 8024f3e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8024f40:	ab0a      	add	r3, sp, #40	@ 0x28
 8024f42:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8024f44:	ab03      	add	r3, sp, #12
 8024f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f48:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8024f4c:	4811      	ldr	r0, [pc, #68]	@ (8024f94 <mg_http_reply+0x78>)
 8024f4e:	f7ff fd05 	bl	802495c <mg_vxprintf>
  if (c->send.len > 16) {
 8024f52:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024f54:	2b10      	cmp	r3, #16
 8024f56:	d80c      	bhi.n	8024f72 <mg_http_reply+0x56>
  c->is_resp = 0;
 8024f58:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024f5c:	f36f 13c7 	bfc	r3, #7, #1
 8024f60:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8024f64:	b005      	add	sp, #20
 8024f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024f6a:	b001      	add	sp, #4
 8024f6c:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8024f6e:	4d0a      	ldr	r5, [pc, #40]	@ (8024f98 <mg_http_reply+0x7c>)
 8024f70:	e7df      	b.n	8024f32 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8024f72:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8024f74:	f1a5 000f 	sub.w	r0, r5, #15
 8024f78:	1b5b      	subs	r3, r3, r5
 8024f7a:	4a08      	ldr	r2, [pc, #32]	@ (8024f9c <mg_http_reply+0x80>)
 8024f7c:	210b      	movs	r1, #11
 8024f7e:	4430      	add	r0, r6
 8024f80:	f7ff face 	bl	8024520 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8024f84:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8024f86:	4405      	add	r5, r0
 8024f88:	3d0f      	subs	r5, #15
 8024f8a:	2220      	movs	r2, #32
 8024f8c:	555a      	strb	r2, [r3, r5]
 8024f8e:	e7e3      	b.n	8024f58 <mg_http_reply+0x3c>
 8024f90:	0803ba78 	.word	0x0803ba78
 8024f94:	08027fe7 	.word	0x08027fe7
 8024f98:	080381c0 	.word	0x080381c0
 8024f9c:	0803baac 	.word	0x0803baac

08024fa0 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8024fa0:	b510      	push	{r4, lr}
 8024fa2:	b084      	sub	sp, #16
 8024fa4:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8024fa6:	9202      	str	r2, [sp, #8]
 8024fa8:	2300      	movs	r3, #0
 8024faa:	9303      	str	r3, [sp, #12]
 8024fac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024fb0:	e9cd 2300 	strd	r2, r3, [sp]
 8024fb4:	4a02      	ldr	r2, [pc, #8]	@ (8024fc0 <mg_http_etag+0x20>)
 8024fb6:	f7ff fab3 	bl	8024520 <mg_snprintf>
}
 8024fba:	4620      	mov	r0, r4
 8024fbc:	b004      	add	sp, #16
 8024fbe:	bd10      	pop	{r4, pc}
 8024fc0:	0803bab4 	.word	0x0803bab4

08024fc4 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8024fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fc8:	b083      	sub	sp, #12
 8024fca:	4607      	mov	r7, r0
 8024fcc:	4689      	mov	r9, r1
 8024fce:	4692      	mov	sl, r2
 8024fd0:	4698      	mov	r8, r3
  size_t i, n = 0;
 8024fd2:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8024fd4:	462c      	mov	r4, r5
 8024fd6:	e00c      	b.n	8024ff2 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8024fd8:	f8cd b004 	str.w	fp, [sp, #4]
 8024fdc:	2301      	movs	r3, #1
 8024fde:	9300      	str	r3, [sp, #0]
 8024fe0:	4b16      	ldr	r3, [pc, #88]	@ (802503c <mg_url_encode+0x78>)
 8024fe2:	4a17      	ldr	r2, [pc, #92]	@ (8025040 <mg_url_encode+0x7c>)
 8024fe4:	2104      	movs	r1, #4
 8024fe6:	eb0a 0005 	add.w	r0, sl, r5
 8024fea:	f7ff fa99 	bl	8024520 <mg_snprintf>
      n += 3;
 8024fee:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8024ff0:	3401      	adds	r4, #1
 8024ff2:	454c      	cmp	r4, r9
 8024ff4:	d20e      	bcs.n	8025014 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 8024ff6:	eb07 0b04 	add.w	fp, r7, r4
 8024ffa:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8024ffc:	1d2b      	adds	r3, r5, #4
 8024ffe:	4543      	cmp	r3, r8
 8025000:	d216      	bcs.n	8025030 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 8025002:	4630      	mov	r0, r6
 8025004:	f7fc fa5e 	bl	80214c4 <mg_is_url_safe>
 8025008:	2800      	cmp	r0, #0
 802500a:	d0e5      	beq.n	8024fd8 <mg_url_encode+0x14>
      buf[n++] = s[i];
 802500c:	f80a 6005 	strb.w	r6, [sl, r5]
 8025010:	3501      	adds	r5, #1
 8025012:	e7ed      	b.n	8024ff0 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8025014:	f1b8 0f00 	cmp.w	r8, #0
 8025018:	d00b      	beq.n	8025032 <mg_url_encode+0x6e>
 802501a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802501e:	45a8      	cmp	r8, r5
 8025020:	d902      	bls.n	8025028 <mg_url_encode+0x64>
 8025022:	2300      	movs	r3, #0
 8025024:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8025028:	2300      	movs	r3, #0
 802502a:	f80a 3008 	strb.w	r3, [sl, r8]
 802502e:	e000      	b.n	8025032 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8025030:	2500      	movs	r5, #0
}
 8025032:	4628      	mov	r0, r5
 8025034:	b003      	add	sp, #12
 8025036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802503a:	bf00      	nop
 802503c:	08022221 	.word	0x08022221
 8025040:	0803bac0 	.word	0x0803bac0

08025044 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8025044:	b510      	push	{r4, lr}
 8025046:	b084      	sub	sp, #16
 8025048:	4602      	mov	r2, r0
 802504a:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 802504c:	2400      	movs	r4, #0
 802504e:	9400      	str	r4, [sp, #0]
 8025050:	9401      	str	r4, [sp, #4]
 8025052:	9402      	str	r4, [sp, #8]
 8025054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8025058:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 802505a:	4669      	mov	r1, sp
 802505c:	4802      	ldr	r0, [pc, #8]	@ (8025068 <mg_vmprintf+0x24>)
 802505e:	f7ff fc7d 	bl	802495c <mg_vxprintf>
}
 8025062:	9800      	ldr	r0, [sp, #0]
 8025064:	b004      	add	sp, #16
 8025066:	bd10      	pop	{r4, pc}
 8025068:	08027fe7 	.word	0x08027fe7

0802506c <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 802506c:	b40f      	push	{r0, r1, r2, r3}
 802506e:	b500      	push	{lr}
 8025070:	b083      	sub	sp, #12
 8025072:	ab04      	add	r3, sp, #16
 8025074:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8025078:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 802507a:	a901      	add	r1, sp, #4
 802507c:	f7ff ffe2 	bl	8025044 <mg_vmprintf>
}
 8025080:	b003      	add	sp, #12
 8025082:	f85d eb04 	ldr.w	lr, [sp], #4
 8025086:	b004      	add	sp, #16
 8025088:	4770      	bx	lr

0802508a <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 802508a:	b538      	push	{r3, r4, r5, lr}
 802508c:	4604      	mov	r4, r0
 802508e:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8025090:	6882      	ldr	r2, [r0, #8]
 8025092:	68c3      	ldr	r3, [r0, #12]
 8025094:	429a      	cmp	r2, r3
 8025096:	d107      	bne.n	80250a8 <mg_queue_next+0x1e>
  size_t len = 0;
 8025098:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 802509a:	b125      	cbz	r5, 80250a6 <mg_queue_next+0x1c>
 802509c:	6823      	ldr	r3, [r4, #0]
 802509e:	68a2      	ldr	r2, [r4, #8]
 80250a0:	3204      	adds	r2, #4
 80250a2:	4413      	add	r3, r2
 80250a4:	602b      	str	r3, [r5, #0]
}
 80250a6:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 80250a8:	f7fe fb69 	bl	802377e <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 80250ac:	2800      	cmp	r0, #0
 80250ae:	d1f4      	bne.n	802509a <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 80250b0:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 80250b2:	68e2      	ldr	r2, [r4, #12]
 80250b4:	68a3      	ldr	r3, [r4, #8]
 80250b6:	429a      	cmp	r2, r3
 80250b8:	d9ef      	bls.n	802509a <mg_queue_next+0x10>
 80250ba:	4620      	mov	r0, r4
 80250bc:	f7fe fb5f 	bl	802377e <mg_queue_read_len>
 80250c0:	e7eb      	b.n	802509a <mg_queue_next+0x10>

080250c2 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 80250c2:	6883      	ldr	r3, [r0, #8]
 80250c4:	440b      	add	r3, r1
 80250c6:	3304      	adds	r3, #4
 80250c8:	6083      	str	r3, [r0, #8]
}
 80250ca:	4770      	bx	lr

080250cc <mg_sha1_init>:
  context->state[0] = 0x67452301;
 80250cc:	4b0a      	ldr	r3, [pc, #40]	@ (80250f8 <mg_sha1_init+0x2c>)
 80250ce:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 80250d0:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80250d4:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 80250d6:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80250da:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80250de:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80250e2:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 80250e4:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80250e8:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 80250ea:	4b04      	ldr	r3, [pc, #16]	@ (80250fc <mg_sha1_init+0x30>)
 80250ec:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 80250ee:	2300      	movs	r3, #0
 80250f0:	6183      	str	r3, [r0, #24]
 80250f2:	6143      	str	r3, [r0, #20]
}
 80250f4:	4770      	bx	lr
 80250f6:	bf00      	nop
 80250f8:	67452301 	.word	0x67452301
 80250fc:	c3d2e1f0 	.word	0xc3d2e1f0

08025100 <mg_sha1_update>:
                    size_t len) {
 8025100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025102:	4604      	mov	r4, r0
 8025104:	460f      	mov	r7, r1
 8025106:	4616      	mov	r6, r2
  j = context->count[0];
 8025108:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 802510a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802510e:	6142      	str	r2, [r0, #20]
 8025110:	429a      	cmp	r2, r3
 8025112:	d202      	bcs.n	802511a <mg_sha1_update+0x1a>
 8025114:	6982      	ldr	r2, [r0, #24]
 8025116:	3201      	adds	r2, #1
 8025118:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 802511a:	69a2      	ldr	r2, [r4, #24]
 802511c:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8025120:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8025122:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8025126:	18f2      	adds	r2, r6, r3
 8025128:	2a3f      	cmp	r2, #63	@ 0x3f
 802512a:	d808      	bhi.n	802513e <mg_sha1_update+0x3e>
    i = 0;
 802512c:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 802512e:	3318      	adds	r3, #24
 8025130:	18e0      	adds	r0, r4, r3
 8025132:	1b72      	subs	r2, r6, r5
 8025134:	1979      	adds	r1, r7, r5
 8025136:	3004      	adds	r0, #4
 8025138:	f00a f950 	bl	802f3dc <memcpy>
}
 802513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 802513e:	f103 0018 	add.w	r0, r3, #24
 8025142:	4420      	add	r0, r4
 8025144:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8025148:	462a      	mov	r2, r5
 802514a:	4639      	mov	r1, r7
 802514c:	3004      	adds	r0, #4
 802514e:	f00a f945 	bl	802f3dc <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8025152:	f104 011c 	add.w	r1, r4, #28
 8025156:	4620      	mov	r0, r4
 8025158:	f7fd faee 	bl	8022738 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 802515c:	e004      	b.n	8025168 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 802515e:	1979      	adds	r1, r7, r5
 8025160:	4620      	mov	r0, r4
 8025162:	f7fd fae9 	bl	8022738 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8025166:	3540      	adds	r5, #64	@ 0x40
 8025168:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 802516c:	42b3      	cmp	r3, r6
 802516e:	d3f6      	bcc.n	802515e <mg_sha1_update+0x5e>
    j = 0;
 8025170:	2300      	movs	r3, #0
 8025172:	e7dc      	b.n	802512e <mg_sha1_update+0x2e>

08025174 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8025174:	b570      	push	{r4, r5, r6, lr}
 8025176:	b084      	sub	sp, #16
 8025178:	4606      	mov	r6, r0
 802517a:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 802517c:	2300      	movs	r3, #0
 802517e:	e013      	b.n	80251a8 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8025180:	2b03      	cmp	r3, #3
 8025182:	bf8c      	ite	hi
 8025184:	2200      	movhi	r2, #0
 8025186:	2201      	movls	r2, #1
 8025188:	3204      	adds	r2, #4
 802518a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802518e:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8025190:	43da      	mvns	r2, r3
 8025192:	f002 0203 	and.w	r2, r2, #3
 8025196:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8025198:	fa21 f202 	lsr.w	r2, r1, r2
 802519c:	f103 0110 	add.w	r1, r3, #16
 80251a0:	4469      	add	r1, sp
 80251a2:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 80251a6:	3301      	adds	r3, #1
 80251a8:	2b07      	cmp	r3, #7
 80251aa:	d9e9      	bls.n	8025180 <mg_sha1_final+0xc>
  c = 0200;
 80251ac:	2380      	movs	r3, #128	@ 0x80
 80251ae:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 80251b2:	2201      	movs	r2, #1
 80251b4:	f10d 0107 	add.w	r1, sp, #7
 80251b8:	4628      	mov	r0, r5
 80251ba:	f7ff ffa1 	bl	8025100 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80251be:	e008      	b.n	80251d2 <mg_sha1_final+0x5e>
    c = 0000;
 80251c0:	2300      	movs	r3, #0
 80251c2:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 80251c6:	2201      	movs	r2, #1
 80251c8:	f10d 0107 	add.w	r1, sp, #7
 80251cc:	4628      	mov	r0, r5
 80251ce:	f7ff ff97 	bl	8025100 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80251d2:	696b      	ldr	r3, [r5, #20]
 80251d4:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 80251d8:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80251dc:	d1f0      	bne.n	80251c0 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 80251de:	2208      	movs	r2, #8
 80251e0:	eb0d 0102 	add.w	r1, sp, r2
 80251e4:	4628      	mov	r0, r5
 80251e6:	f7ff ff8b 	bl	8025100 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80251ea:	2300      	movs	r3, #0
 80251ec:	e00a      	b.n	8025204 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80251ee:	089a      	lsrs	r2, r3, #2
 80251f0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 80251f4:	43da      	mvns	r2, r3
 80251f6:	f002 0203 	and.w	r2, r2, #3
 80251fa:	00d2      	lsls	r2, r2, #3
 80251fc:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8025200:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 8025202:	3301      	adds	r3, #1
 8025204:	2b13      	cmp	r3, #19
 8025206:	d9f2      	bls.n	80251ee <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8025208:	225c      	movs	r2, #92	@ 0x5c
 802520a:	2100      	movs	r1, #0
 802520c:	4628      	mov	r0, r5
 802520e:	f008 fb7f 	bl	802d910 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8025212:	2300      	movs	r3, #0
 8025214:	9302      	str	r3, [sp, #8]
 8025216:	9303      	str	r3, [sp, #12]
}
 8025218:	b004      	add	sp, #16
 802521a:	bd70      	pop	{r4, r5, r6, pc}

0802521c <mg_http_serve_ssi>:
                       const char *fullpath) {
 802521c:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 802521e:	4b03      	ldr	r3, [pc, #12]	@ (802522c <mg_http_serve_ssi+0x10>)
 8025220:	2200      	movs	r2, #0
 8025222:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8025226:	f7ff fe79 	bl	8024f1c <mg_http_reply>
}
 802522a:	bd08      	pop	{r3, pc}
 802522c:	0803bac8 	.word	0x0803bac8

08025230 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8025230:	b510      	push	{r4, lr}
 8025232:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8025234:	6001      	str	r1, [r0, #0]
 8025236:	b129      	cbz	r1, 8025244 <mg_str_s+0x14>
 8025238:	4608      	mov	r0, r1
 802523a:	f7eb f831 	bl	80102a0 <strlen>
 802523e:	6060      	str	r0, [r4, #4]
}
 8025240:	4620      	mov	r0, r4
 8025242:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8025244:	2000      	movs	r0, #0
 8025246:	e7fa      	b.n	802523e <mg_str_s+0xe>

08025248 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8025248:	6001      	str	r1, [r0, #0]
 802524a:	6042      	str	r2, [r0, #4]
}
 802524c:	4770      	bx	lr

0802524e <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 802524e:	b510      	push	{r4, lr}
 8025250:	b082      	sub	sp, #8
 8025252:	4604      	mov	r4, r0
 8025254:	ab02      	add	r3, sp, #8
 8025256:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 802525a:	2a01      	cmp	r2, #1
 802525c:	d902      	bls.n	8025264 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 802525e:	780b      	ldrb	r3, [r1, #0]
 8025260:	2b22      	cmp	r3, #34	@ 0x22
 8025262:	d007      	beq.n	8025274 <stripquotes+0x26>
             : s;
 8025264:	ab02      	add	r3, sp, #8
 8025266:	e913 0003 	ldmdb	r3, {r0, r1}
 802526a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802526e:	4620      	mov	r0, r4
 8025270:	b002      	add	sp, #8
 8025272:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8025274:	188b      	adds	r3, r1, r2
 8025276:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802527a:	2b22      	cmp	r3, #34	@ 0x22
 802527c:	d1f2      	bne.n	8025264 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 802527e:	3a02      	subs	r2, #2
 8025280:	3101      	adds	r1, #1
 8025282:	f7ff ffe1 	bl	8025248 <mg_str_n>
             : s;
 8025286:	e7f2      	b.n	802526e <stripquotes+0x20>

08025288 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8025288:	b082      	sub	sp, #8
 802528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802528e:	b084      	sub	sp, #16
 8025290:	4680      	mov	r8, r0
 8025292:	4668      	mov	r0, sp
 8025294:	e880 0006 	stmia.w	r0, {r1, r2}
 8025298:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802529a:	2400      	movs	r4, #0
 802529c:	e01f      	b.n	80252de <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 802529e:	2201      	movs	r2, #1
 80252a0:	e037      	b.n	8025312 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80252a2:	7818      	ldrb	r0, [r3, #0]
 80252a4:	283b      	cmp	r0, #59	@ 0x3b
 80252a6:	d00d      	beq.n	80252c4 <mg_http_get_header_var+0x3c>
 80252a8:	2820      	cmp	r0, #32
 80252aa:	d00b      	beq.n	80252c4 <mg_http_get_header_var+0x3c>
 80252ac:	282c      	cmp	r0, #44	@ 0x2c
 80252ae:	d009      	beq.n	80252c4 <mg_http_get_header_var+0x3c>
        p++;
 80252b0:	3301      	adds	r3, #1
      while (p < x &&
 80252b2:	42bb      	cmp	r3, r7
 80252b4:	d206      	bcs.n	80252c4 <mg_http_get_header_var+0x3c>
 80252b6:	2a00      	cmp	r2, #0
 80252b8:	d0f3      	beq.n	80252a2 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80252ba:	428b      	cmp	r3, r1
 80252bc:	d0f8      	beq.n	80252b0 <mg_http_get_header_var+0x28>
 80252be:	7818      	ldrb	r0, [r3, #0]
 80252c0:	2822      	cmp	r0, #34	@ 0x22
 80252c2:	d1f5      	bne.n	80252b0 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 80252c4:	1a5b      	subs	r3, r3, r1
 80252c6:	ac02      	add	r4, sp, #8
 80252c8:	441a      	add	r2, r3
 80252ca:	4620      	mov	r0, r4
 80252cc:	f7ff ffbc 	bl	8025248 <mg_str_n>
 80252d0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80252d4:	4640      	mov	r0, r8
 80252d6:	f7ff ffba 	bl	802524e <stripquotes>
 80252da:	e021      	b.n	8025320 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80252dc:	3401      	adds	r4, #1
 80252de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80252e0:	b1ca      	cbz	r2, 8025316 <mg_http_get_header_var+0x8e>
 80252e2:	1915      	adds	r5, r2, r4
 80252e4:	1cab      	adds	r3, r5, #2
 80252e6:	9f01      	ldr	r7, [sp, #4]
 80252e8:	42bb      	cmp	r3, r7
 80252ea:	d214      	bcs.n	8025316 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 80252ec:	9e00      	ldr	r6, [sp, #0]
 80252ee:	5d73      	ldrb	r3, [r6, r5]
 80252f0:	2b3d      	cmp	r3, #61	@ 0x3d
 80252f2:	d1f3      	bne.n	80252dc <mg_http_get_header_var+0x54>
 80252f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80252f6:	1930      	adds	r0, r6, r4
 80252f8:	f008 fa76 	bl	802d7e8 <memcmp>
 80252fc:	4602      	mov	r2, r0
 80252fe:	2800      	cmp	r0, #0
 8025300:	d1ec      	bne.n	80252dc <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8025302:	3501      	adds	r5, #1
 8025304:	1971      	adds	r1, r6, r5
 8025306:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8025308:	42b9      	cmp	r1, r7
 802530a:	d202      	bcs.n	8025312 <mg_http_get_header_var+0x8a>
 802530c:	5d73      	ldrb	r3, [r6, r5]
 802530e:	2b22      	cmp	r3, #34	@ 0x22
 8025310:	d0c5      	beq.n	802529e <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8025312:	460b      	mov	r3, r1
      while (p < x &&
 8025314:	e7cd      	b.n	80252b2 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8025316:	2200      	movs	r2, #0
 8025318:	4611      	mov	r1, r2
 802531a:	4640      	mov	r0, r8
 802531c:	f7ff ff94 	bl	8025248 <mg_str_n>
}
 8025320:	4640      	mov	r0, r8
 8025322:	b004      	add	sp, #16
 8025324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025328:	b002      	add	sp, #8
 802532a:	4770      	bx	lr

0802532c <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 802532c:	b530      	push	{r4, r5, lr}
 802532e:	b085      	sub	sp, #20
 8025330:	466b      	mov	r3, sp
 8025332:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8025336:	290d      	cmp	r1, #13
 8025338:	d930      	bls.n	802539c <mg_v4mapped+0x70>
 802533a:	4614      	mov	r4, r2
 802533c:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802533e:	4601      	mov	r1, r0
 8025340:	7802      	ldrb	r2, [r0, #0]
 8025342:	2a3a      	cmp	r2, #58	@ 0x3a
 8025344:	d12d      	bne.n	80253a2 <mg_v4mapped+0x76>
 8025346:	7842      	ldrb	r2, [r0, #1]
 8025348:	2a3a      	cmp	r2, #58	@ 0x3a
 802534a:	d12c      	bne.n	80253a6 <mg_v4mapped+0x7a>
 802534c:	7982      	ldrb	r2, [r0, #6]
 802534e:	2a3a      	cmp	r2, #58	@ 0x3a
 8025350:	d12b      	bne.n	80253aa <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8025352:	2202      	movs	r2, #2
 8025354:	e000      	b.n	8025358 <mg_v4mapped+0x2c>
 8025356:	3201      	adds	r2, #1
 8025358:	2a05      	cmp	r2, #5
 802535a:	dc06      	bgt.n	802536a <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 802535c:	5c88      	ldrb	r0, [r1, r2]
 802535e:	2866      	cmp	r0, #102	@ 0x66
 8025360:	d0f9      	beq.n	8025356 <mg_v4mapped+0x2a>
 8025362:	2846      	cmp	r0, #70	@ 0x46
 8025364:	d0f7      	beq.n	8025356 <mg_v4mapped+0x2a>
 8025366:	2000      	movs	r0, #0
 8025368:	e019      	b.n	802539e <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 802536a:	ad02      	add	r5, sp, #8
 802536c:	1fda      	subs	r2, r3, #7
 802536e:	3107      	adds	r1, #7
 8025370:	4628      	mov	r0, r5
 8025372:	f7ff ff69 	bl	8025248 <mg_str_n>
 8025376:	4622      	mov	r2, r4
 8025378:	e895 0003 	ldmia.w	r5, {r0, r1}
 802537c:	f7fc fe7a 	bl	8022074 <mg_aton4>
 8025380:	b168      	cbz	r0, 802539e <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8025382:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8025384:	2300      	movs	r3, #0
 8025386:	6023      	str	r3, [r4, #0]
 8025388:	6063      	str	r3, [r4, #4]
 802538a:	60a3      	str	r3, [r4, #8]
 802538c:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 802538e:	23ff      	movs	r3, #255	@ 0xff
 8025390:	72e3      	strb	r3, [r4, #11]
 8025392:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8025394:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8025396:	2301      	movs	r3, #1
 8025398:	74e3      	strb	r3, [r4, #19]
  return true;
 802539a:	e000      	b.n	802539e <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 802539c:	2000      	movs	r0, #0
}
 802539e:	b005      	add	sp, #20
 80253a0:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80253a2:	2000      	movs	r0, #0
 80253a4:	e7fb      	b.n	802539e <mg_v4mapped+0x72>
 80253a6:	2000      	movs	r0, #0
 80253a8:	e7f9      	b.n	802539e <mg_v4mapped+0x72>
 80253aa:	2000      	movs	r0, #0
 80253ac:	e7f7      	b.n	802539e <mg_v4mapped+0x72>

080253ae <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 80253ae:	b530      	push	{r4, r5, lr}
 80253b0:	b083      	sub	sp, #12
 80253b2:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 80253b4:	6803      	ldr	r3, [r0, #0]
 80253b6:	6842      	ldr	r2, [r0, #4]
 80253b8:	441a      	add	r2, r3
 80253ba:	466d      	mov	r5, sp
 80253bc:	1a52      	subs	r2, r2, r1
 80253be:	4628      	mov	r0, r5
 80253c0:	f7ff ff42 	bl	8025248 <mg_str_n>
 80253c4:	3408      	adds	r4, #8
 80253c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80253ca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80253ce:	b003      	add	sp, #12
 80253d0:	bd30      	pop	{r4, r5, pc}

080253d2 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80253d2:	b084      	sub	sp, #16
 80253d4:	f10d 0c10 	add.w	ip, sp, #16
 80253d8:	e90c 0003 	stmdb	ip, {r0, r1}
 80253dc:	4669      	mov	r1, sp
 80253de:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80253e2:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 80253e4:	9a03      	ldr	r2, [sp, #12]
 80253e6:	429a      	cmp	r2, r3
 80253e8:	d90b      	bls.n	8025402 <mg_strcmp+0x30>
 80253ea:	9901      	ldr	r1, [sp, #4]
 80253ec:	4299      	cmp	r1, r3
 80253ee:	d908      	bls.n	8025402 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 80253f0:	9a02      	ldr	r2, [sp, #8]
 80253f2:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 80253f4:	9a00      	ldr	r2, [sp, #0]
 80253f6:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 80253f8:	4291      	cmp	r1, r2
 80253fa:	db09      	blt.n	8025410 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 80253fc:	dc0c      	bgt.n	8025418 <mg_strcmp+0x46>
    i++;
 80253fe:	3301      	adds	r3, #1
 8025400:	e7f0      	b.n	80253e4 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8025402:	429a      	cmp	r2, r3
 8025404:	d80a      	bhi.n	802541c <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8025406:	9a01      	ldr	r2, [sp, #4]
 8025408:	429a      	cmp	r2, r3
 802540a:	d809      	bhi.n	8025420 <mg_strcmp+0x4e>
  return 0;
 802540c:	2000      	movs	r0, #0
 802540e:	e001      	b.n	8025414 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8025410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025414:	b004      	add	sp, #16
 8025416:	4770      	bx	lr
    if (c1 > c2) return 1;
 8025418:	2001      	movs	r0, #1
 802541a:	e7fb      	b.n	8025414 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 802541c:	2001      	movs	r0, #1
 802541e:	e7f9      	b.n	8025414 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8025420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025424:	e7f6      	b.n	8025414 <mg_strcmp+0x42>

08025426 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8025426:	b530      	push	{r4, r5, lr}
 8025428:	b085      	sub	sp, #20
 802542a:	ac04      	add	r4, sp, #16
 802542c:	e904 0003 	stmdb	r4, {r0, r1}
 8025430:	4669      	mov	r1, sp
 8025432:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8025436:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8025438:	9b03      	ldr	r3, [sp, #12]
 802543a:	42a3      	cmp	r3, r4
 802543c:	d910      	bls.n	8025460 <mg_strcasecmp+0x3a>
 802543e:	9a01      	ldr	r2, [sp, #4]
 8025440:	42a2      	cmp	r2, r4
 8025442:	d90d      	bls.n	8025460 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8025444:	9b02      	ldr	r3, [sp, #8]
 8025446:	5d18      	ldrb	r0, [r3, r4]
 8025448:	f7fc ff22 	bl	8022290 <mg_tolc>
 802544c:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 802544e:	9b00      	ldr	r3, [sp, #0]
 8025450:	5d18      	ldrb	r0, [r3, r4]
 8025452:	f7fc ff1d 	bl	8022290 <mg_tolc>
    if (c1 < c2) return -1;
 8025456:	4285      	cmp	r5, r0
 8025458:	db09      	blt.n	802546e <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 802545a:	dc0c      	bgt.n	8025476 <mg_strcasecmp+0x50>
    i++;
 802545c:	3401      	adds	r4, #1
 802545e:	e7eb      	b.n	8025438 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8025460:	42a3      	cmp	r3, r4
 8025462:	d80a      	bhi.n	802547a <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8025464:	9b01      	ldr	r3, [sp, #4]
 8025466:	42a3      	cmp	r3, r4
 8025468:	d809      	bhi.n	802547e <mg_strcasecmp+0x58>
  return 0;
 802546a:	2000      	movs	r0, #0
 802546c:	e001      	b.n	8025472 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 802546e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025472:	b005      	add	sp, #20
 8025474:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8025476:	2001      	movs	r0, #1
 8025478:	e7fb      	b.n	8025472 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 802547a:	2001      	movs	r0, #1
 802547c:	e7f9      	b.n	8025472 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 802547e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025482:	e7f6      	b.n	8025472 <mg_strcasecmp+0x4c>

08025484 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8025484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025488:	b086      	sub	sp, #24
 802548a:	4604      	mov	r4, r0
 802548c:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 802548e:	f7fe fb45 	bl	8023b1c <mg_http_get_request_len>
 8025492:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8025494:	b1d4      	cbz	r4, 80254cc <mg_http_parse+0x48>
 8025496:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8025498:	f44f 7206 	mov.w	r2, #536	@ 0x218
 802549c:	2100      	movs	r1, #0
 802549e:	4630      	mov	r0, r6
 80254a0:	f008 fa36 	bl	802d910 <memset>
  if (req_len <= 0) return req_len;
 80254a4:	2f00      	cmp	r7, #0
 80254a6:	f340 808d 	ble.w	80255c4 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 80254aa:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 80254ae:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 80254b2:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 80254b6:	46b8      	mov	r8, r7
 80254b8:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 80254bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80254c0:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 80254c4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 80254c8:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80254ca:	e005      	b.n	80254d8 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80254cc:	4625      	mov	r5, r4
 80254ce:	e7e3      	b.n	8025498 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80254d0:	4414      	add	r4, r2
 80254d2:	6873      	ldr	r3, [r6, #4]
 80254d4:	4413      	add	r3, r2
 80254d6:	6073      	str	r3, [r6, #4]
 80254d8:	42ac      	cmp	r4, r5
 80254da:	d208      	bcs.n	80254ee <mg_http_parse+0x6a>
 80254dc:	4629      	mov	r1, r5
 80254de:	4620      	mov	r0, r4
 80254e0:	f7fb fc1c 	bl	8020d1c <clen>
 80254e4:	4602      	mov	r2, r0
 80254e6:	2800      	cmp	r0, #0
 80254e8:	d1f2      	bne.n	80254d0 <mg_http_parse+0x4c>
 80254ea:	e000      	b.n	80254ee <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80254ec:	3401      	adds	r4, #1
 80254ee:	42ac      	cmp	r4, r5
 80254f0:	d202      	bcs.n	80254f8 <mg_http_parse+0x74>
 80254f2:	7823      	ldrb	r3, [r4, #0]
 80254f4:	2b20      	cmp	r3, #32
 80254f6:	d0f9      	beq.n	80254ec <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 80254f8:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80254fa:	e003      	b.n	8025504 <mg_http_parse+0x80>
 80254fc:	4414      	add	r4, r2
 80254fe:	68f3      	ldr	r3, [r6, #12]
 8025500:	4413      	add	r3, r2
 8025502:	60f3      	str	r3, [r6, #12]
 8025504:	42ac      	cmp	r4, r5
 8025506:	d208      	bcs.n	802551a <mg_http_parse+0x96>
 8025508:	4629      	mov	r1, r5
 802550a:	4620      	mov	r0, r4
 802550c:	f7fb fc06 	bl	8020d1c <clen>
 8025510:	4602      	mov	r2, r0
 8025512:	2800      	cmp	r0, #0
 8025514:	d1f2      	bne.n	80254fc <mg_http_parse+0x78>
 8025516:	e000      	b.n	802551a <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8025518:	3401      	adds	r4, #1
 802551a:	42ac      	cmp	r4, r5
 802551c:	d202      	bcs.n	8025524 <mg_http_parse+0xa0>
 802551e:	7823      	ldrb	r3, [r4, #0]
 8025520:	2b20      	cmp	r3, #32
 8025522:	d0f9      	beq.n	8025518 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8025524:	f106 0218 	add.w	r2, r6, #24
 8025528:	4629      	mov	r1, r5
 802552a:	4620      	mov	r0, r4
 802552c:	f7fb fc3d 	bl	8020daa <skiptorn>
 8025530:	4682      	mov	sl, r0
 8025532:	2800      	cmp	r0, #0
 8025534:	f000 8082 	beq.w	802563c <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8025538:	f8d6 9008 	ldr.w	r9, [r6, #8]
 802553c:	68f4      	ldr	r4, [r6, #12]
 802553e:	4622      	mov	r2, r4
 8025540:	213f      	movs	r1, #63	@ 0x3f
 8025542:	4648      	mov	r0, r9
 8025544:	f7ea fe5c 	bl	8010200 <memchr>
 8025548:	b138      	cbz	r0, 802555a <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 802554a:	1c42      	adds	r2, r0, #1
 802554c:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 802554e:	444c      	add	r4, r9
 8025550:	1aa4      	subs	r4, r4, r2
 8025552:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8025554:	eba0 0309 	sub.w	r3, r0, r9
 8025558:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 802555a:	6873      	ldr	r3, [r6, #4]
 802555c:	2b00      	cmp	r3, #0
 802555e:	d06f      	beq.n	8025640 <mg_http_parse+0x1bc>
 8025560:	68f3      	ldr	r3, [r6, #12]
 8025562:	2b00      	cmp	r3, #0
 8025564:	d06f      	beq.n	8025646 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8025566:	231e      	movs	r3, #30
 8025568:	f106 0220 	add.w	r2, r6, #32
 802556c:	4629      	mov	r1, r5
 802556e:	4650      	mov	r0, sl
 8025570:	f7fb fc43 	bl	8020dfa <mg_http_parse_headers>
 8025574:	2800      	cmp	r0, #0
 8025576:	d069      	beq.n	802564c <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8025578:	4939      	ldr	r1, [pc, #228]	@ (8025660 <mg_http_parse+0x1dc>)
 802557a:	4630      	mov	r0, r6
 802557c:	f7fe fafa 	bl	8023b74 <mg_http_get_header>
 8025580:	b160      	cbz	r0, 802559c <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8025582:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8025586:	e9d0 0100 	ldrd	r0, r1, [r0]
 802558a:	f7fe fa75 	bl	8023a78 <mg_to_size_t>
 802558e:	2800      	cmp	r0, #0
 8025590:	d05f      	beq.n	8025652 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8025592:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8025596:	4443      	add	r3, r8
 8025598:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 802559c:	2205      	movs	r2, #5
 802559e:	4931      	ldr	r1, [pc, #196]	@ (8025664 <mg_http_parse+0x1e0>)
 80255a0:	6830      	ldr	r0, [r6, #0]
 80255a2:	f7fb fb6d 	bl	8020c80 <mg_ncasecmp>
 80255a6:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80255a8:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80255ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80255b0:	d00c      	beq.n	80255cc <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80255b2:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80255b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80255ba:	d029      	beq.n	8025610 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80255bc:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 80255c0:	4598      	cmp	r8, r3
 80255c2:	d849      	bhi.n	8025658 <mg_http_parse+0x1d4>
}
 80255c4:	4638      	mov	r0, r7
 80255c6:	b006      	add	sp, #24
 80255c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80255cc:	2800      	cmp	r0, #0
 80255ce:	d0f0      	beq.n	80255b2 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80255d0:	466d      	mov	r5, sp
 80255d2:	4925      	ldr	r1, [pc, #148]	@ (8025668 <mg_http_parse+0x1e4>)
 80255d4:	4628      	mov	r0, r5
 80255d6:	f7ff fe2b 	bl	8025230 <mg_str_s>
 80255da:	e895 000c 	ldmia.w	r5, {r2, r3}
 80255de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80255e2:	f7ff ff20 	bl	8025426 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80255e6:	2800      	cmp	r0, #0
 80255e8:	d0e3      	beq.n	80255b2 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 80255ea:	ad02      	add	r5, sp, #8
 80255ec:	491f      	ldr	r1, [pc, #124]	@ (802566c <mg_http_parse+0x1e8>)
 80255ee:	4628      	mov	r0, r5
 80255f0:	f7ff fe1e 	bl	8025230 <mg_str_s>
 80255f4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80255f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80255fc:	f7ff ff13 	bl	8025426 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8025600:	2800      	cmp	r0, #0
 8025602:	d0d6      	beq.n	80255b2 <mg_http_parse+0x12e>
    hm->body.len = 0;
 8025604:	2300      	movs	r3, #0
 8025606:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802560a:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802560e:	e7d0      	b.n	80255b2 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8025610:	2c00      	cmp	r4, #0
 8025612:	d1d3      	bne.n	80255bc <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8025614:	ac04      	add	r4, sp, #16
 8025616:	4916      	ldr	r1, [pc, #88]	@ (8025670 <mg_http_parse+0x1ec>)
 8025618:	4620      	mov	r0, r4
 802561a:	f7ff fe09 	bl	8025230 <mg_str_s>
 802561e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025622:	f106 0108 	add.w	r1, r6, #8
 8025626:	c903      	ldmia	r1, {r0, r1}
 8025628:	f7ff fefd 	bl	8025426 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802562c:	2800      	cmp	r0, #0
 802562e:	d1c5      	bne.n	80255bc <mg_http_parse+0x138>
    hm->body.len = 0;
 8025630:	2300      	movs	r3, #0
 8025632:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8025636:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802563a:	e7bf      	b.n	80255bc <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 802563c:	2700      	movs	r7, #0
 802563e:	e7c1      	b.n	80255c4 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8025640:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025644:	e7be      	b.n	80255c4 <mg_http_parse+0x140>
 8025646:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802564a:	e7bb      	b.n	80255c4 <mg_http_parse+0x140>
    return -1;  // error when parsing
 802564c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025650:	e7b8      	b.n	80255c4 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8025652:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025656:	e7b5      	b.n	80255c4 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8025658:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802565c:	e7b2      	b.n	80255c4 <mg_http_parse+0x140>
 802565e:	bf00      	nop
 8025660:	0803bad8 	.word	0x0803bad8
 8025664:	0803bae8 	.word	0x0803bae8
 8025668:	080389e8 	.word	0x080389e8
 802566c:	08037c9c 	.word	0x08037c9c
 8025670:	0803baf0 	.word	0x0803baf0

08025674 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8025674:	b530      	push	{r4, r5, lr}
 8025676:	b085      	sub	sp, #20
 8025678:	ac04      	add	r4, sp, #16
 802567a:	e904 0003 	stmdb	r4, {r0, r1}
 802567e:	4669      	mov	r1, sp
 8025680:	e881 000c 	stmia.w	r1, {r2, r3}
 8025684:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8025686:	b110      	cbz	r0, 802568e <mg_match+0x1a>
 8025688:	2300      	movs	r3, #0
 802568a:	6003      	str	r3, [r0, #0]
 802568c:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 802568e:	2400      	movs	r4, #0
 8025690:	46a4      	mov	ip, r4
 8025692:	4621      	mov	r1, r4
 8025694:	4623      	mov	r3, r4
 8025696:	e028      	b.n	80256ea <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8025698:	9a02      	ldr	r2, [sp, #8]
 802569a:	440a      	add	r2, r1
 802569c:	6002      	str	r2, [r0, #0]
 802569e:	2201      	movs	r2, #1
 80256a0:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 80256a2:	2200      	movs	r2, #0
 80256a4:	6082      	str	r2, [r0, #8]
 80256a6:	60c2      	str	r2, [r0, #12]
 80256a8:	3008      	adds	r0, #8
      i++, j++;
 80256aa:	3301      	adds	r3, #1
 80256ac:	3101      	adds	r1, #1
 80256ae:	e01c      	b.n	80256ea <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 80256b0:	429a      	cmp	r2, r3
 80256b2:	d905      	bls.n	80256c0 <mg_match+0x4c>
 80256b4:	9a00      	ldr	r2, [sp, #0]
 80256b6:	5cd2      	ldrb	r2, [r2, r3]
 80256b8:	2a2a      	cmp	r2, #42	@ 0x2a
 80256ba:	d045      	beq.n	8025748 <mg_match+0xd4>
 80256bc:	2a23      	cmp	r2, #35	@ 0x23
 80256be:	d043      	beq.n	8025748 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80256c0:	2c00      	cmp	r4, #0
 80256c2:	d065      	beq.n	8025790 <mg_match+0x11c>
 80256c4:	9b03      	ldr	r3, [sp, #12]
 80256c6:	42a3      	cmp	r3, r4
 80256c8:	d365      	bcc.n	8025796 <mg_match+0x122>
 80256ca:	9b00      	ldr	r3, [sp, #0]
 80256cc:	f813 300c 	ldrb.w	r3, [r3, ip]
 80256d0:	2b23      	cmp	r3, #35	@ 0x23
 80256d2:	d003      	beq.n	80256dc <mg_match+0x68>
 80256d4:	9b02      	ldr	r3, [sp, #8]
 80256d6:	5c5b      	ldrb	r3, [r3, r1]
 80256d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80256da:	d05e      	beq.n	802579a <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80256dc:	2800      	cmp	r0, #0
 80256de:	d046      	beq.n	802576e <mg_match+0xfa>
 80256e0:	6803      	ldr	r3, [r0, #0]
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d03c      	beq.n	8025760 <mg_match+0xec>
      i = ni, j = nj;
 80256e6:	4621      	mov	r1, r4
 80256e8:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 80256ea:	9a01      	ldr	r2, [sp, #4]
 80256ec:	429a      	cmp	r2, r3
 80256ee:	d802      	bhi.n	80256f6 <mg_match+0x82>
 80256f0:	9d03      	ldr	r5, [sp, #12]
 80256f2:	428d      	cmp	r5, r1
 80256f4:	d941      	bls.n	802577a <mg_match+0x106>
    if (i < p.len && j < s.len &&
 80256f6:	429a      	cmp	r2, r3
 80256f8:	d9da      	bls.n	80256b0 <mg_match+0x3c>
 80256fa:	9d03      	ldr	r5, [sp, #12]
 80256fc:	428d      	cmp	r5, r1
 80256fe:	d9d7      	bls.n	80256b0 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8025700:	9d00      	ldr	r5, [sp, #0]
 8025702:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8025706:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 802570a:	d009      	beq.n	8025720 <mg_match+0xac>
        (p.buf[i] == '?' ||
 802570c:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8025710:	d0ce      	beq.n	80256b0 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8025712:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8025716:	d0cb      	beq.n	80256b0 <mg_match+0x3c>
 8025718:	9d02      	ldr	r5, [sp, #8]
 802571a:	5c6d      	ldrb	r5, [r5, r1]
 802571c:	45ae      	cmp	lr, r5
 802571e:	d1c7      	bne.n	80256b0 <mg_match+0x3c>
      if (caps == NULL) {
 8025720:	2800      	cmp	r0, #0
 8025722:	d0c2      	beq.n	80256aa <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8025724:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8025728:	d0b6      	beq.n	8025698 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 802572a:	6802      	ldr	r2, [r0, #0]
 802572c:	2a00      	cmp	r2, #0
 802572e:	d0bc      	beq.n	80256aa <mg_match+0x36>
 8025730:	6845      	ldr	r5, [r0, #4]
 8025732:	2d00      	cmp	r5, #0
 8025734:	d1b9      	bne.n	80256aa <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8025736:	9d02      	ldr	r5, [sp, #8]
 8025738:	440d      	add	r5, r1
 802573a:	1aad      	subs	r5, r5, r2
 802573c:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 802573e:	2200      	movs	r2, #0
 8025740:	60c2      	str	r2, [r0, #12]
 8025742:	6082      	str	r2, [r0, #8]
 8025744:	3008      	adds	r0, #8
 8025746:	e7b0      	b.n	80256aa <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8025748:	b108      	cbz	r0, 802574e <mg_match+0xda>
 802574a:	6802      	ldr	r2, [r0, #0]
 802574c:	b11a      	cbz	r2, 8025756 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 802574e:	1c4c      	adds	r4, r1, #1
 8025750:	469c      	mov	ip, r3
 8025752:	3301      	adds	r3, #1
 8025754:	e7c9      	b.n	80256ea <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8025756:	6042      	str	r2, [r0, #4]
 8025758:	9a02      	ldr	r2, [sp, #8]
 802575a:	440a      	add	r2, r1
 802575c:	6002      	str	r2, [r0, #0]
 802575e:	e7f6      	b.n	802574e <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8025760:	6843      	ldr	r3, [r0, #4]
 8025762:	b93b      	cbnz	r3, 8025774 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8025764:	3808      	subs	r0, #8
 8025766:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8025768:	4621      	mov	r1, r4
 802576a:	4663      	mov	r3, ip
 802576c:	e7bd      	b.n	80256ea <mg_match+0x76>
 802576e:	4621      	mov	r1, r4
 8025770:	4663      	mov	r3, ip
 8025772:	e7ba      	b.n	80256ea <mg_match+0x76>
 8025774:	4621      	mov	r1, r4
 8025776:	4663      	mov	r3, ip
 8025778:	e7b7      	b.n	80256ea <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 802577a:	b180      	cbz	r0, 802579e <mg_match+0x12a>
 802577c:	6803      	ldr	r3, [r0, #0]
 802577e:	b183      	cbz	r3, 80257a2 <mg_match+0x12e>
 8025780:	6842      	ldr	r2, [r0, #4]
 8025782:	b982      	cbnz	r2, 80257a6 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8025784:	9a02      	ldr	r2, [sp, #8]
 8025786:	440a      	add	r2, r1
 8025788:	1ad3      	subs	r3, r2, r3
 802578a:	6043      	str	r3, [r0, #4]
  return true;
 802578c:	2001      	movs	r0, #1
 802578e:	e000      	b.n	8025792 <mg_match+0x11e>
      return false;
 8025790:	2000      	movs	r0, #0
}
 8025792:	b005      	add	sp, #20
 8025794:	bd30      	pop	{r4, r5, pc}
      return false;
 8025796:	2000      	movs	r0, #0
 8025798:	e7fb      	b.n	8025792 <mg_match+0x11e>
 802579a:	2000      	movs	r0, #0
 802579c:	e7f9      	b.n	8025792 <mg_match+0x11e>
  return true;
 802579e:	2001      	movs	r0, #1
 80257a0:	e7f7      	b.n	8025792 <mg_match+0x11e>
 80257a2:	2001      	movs	r0, #1
 80257a4:	e7f5      	b.n	8025792 <mg_match+0x11e>
 80257a6:	2001      	movs	r0, #1
 80257a8:	e7f3      	b.n	8025792 <mg_match+0x11e>

080257aa <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 80257aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80257ae:	b085      	sub	sp, #20
 80257b0:	ac04      	add	r4, sp, #16
 80257b2:	e904 0003 	stmdb	r4, {r0, r1}
 80257b6:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 80257ba:	b379      	cbz	r1, 802581c <mg_span+0x72>
 80257bc:	4690      	mov	r8, r2
 80257be:	461f      	mov	r7, r3
 80257c0:	460d      	mov	r5, r1
 80257c2:	9e02      	ldr	r6, [sp, #8]
 80257c4:	b366      	cbz	r6, 8025820 <mg_span+0x76>
    size_t len = 0;
 80257c6:	2400      	movs	r4, #0
 80257c8:	e000      	b.n	80257cc <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 80257ca:	3401      	adds	r4, #1
 80257cc:	42a5      	cmp	r5, r4
 80257ce:	d902      	bls.n	80257d6 <mg_span+0x2c>
 80257d0:	5d31      	ldrb	r1, [r6, r4]
 80257d2:	4281      	cmp	r1, r0
 80257d4:	d1f9      	bne.n	80257ca <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 80257d6:	f1b8 0f00 	cmp.w	r8, #0
 80257da:	d009      	beq.n	80257f0 <mg_span+0x46>
 80257dc:	46e9      	mov	r9, sp
 80257de:	4622      	mov	r2, r4
 80257e0:	4631      	mov	r1, r6
 80257e2:	4648      	mov	r0, r9
 80257e4:	f7ff fd30 	bl	8025248 <mg_str_n>
 80257e8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80257ec:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80257f0:	b187      	cbz	r7, 8025814 <mg_span+0x6a>
 80257f2:	46e8      	mov	r8, sp
 80257f4:	1b2a      	subs	r2, r5, r4
 80257f6:	1931      	adds	r1, r6, r4
 80257f8:	4640      	mov	r0, r8
 80257fa:	f7ff fd25 	bl	8025248 <mg_str_n>
 80257fe:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025802:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8025806:	42a5      	cmp	r5, r4
 8025808:	d904      	bls.n	8025814 <mg_span+0x6a>
 802580a:	4603      	mov	r3, r0
 802580c:	3301      	adds	r3, #1
 802580e:	603b      	str	r3, [r7, #0]
 8025810:	1e4b      	subs	r3, r1, #1
 8025812:	607b      	str	r3, [r7, #4]
    return true;
 8025814:	2001      	movs	r0, #1
}
 8025816:	b005      	add	sp, #20
 8025818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 802581c:	2000      	movs	r0, #0
 802581e:	e7fa      	b.n	8025816 <mg_span+0x6c>
 8025820:	2000      	movs	r0, #0
 8025822:	e7f8      	b.n	8025816 <mg_span+0x6c>

08025824 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8025824:	b082      	sub	sp, #8
 8025826:	b510      	push	{r4, lr}
 8025828:	b08a      	sub	sp, #40	@ 0x28
 802582a:	4604      	mov	r4, r0
 802582c:	f10d 0c08 	add.w	ip, sp, #8
 8025830:	e88c 0006 	stmia.w	ip, {r1, r2}
 8025834:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8025836:	2200      	movs	r2, #0
 8025838:	4611      	mov	r1, r2
 802583a:	f7ff fd05 	bl	8025248 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 802583e:	ab02      	add	r3, sp, #8
 8025840:	2226      	movs	r2, #38	@ 0x26
 8025842:	9200      	str	r2, [sp, #0]
 8025844:	aa08      	add	r2, sp, #32
 8025846:	e893 0003 	ldmia.w	r3, {r0, r1}
 802584a:	f7ff ffae 	bl	80257aa <mg_span>
 802584e:	b1c8      	cbz	r0, 8025884 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025850:	233d      	movs	r3, #61	@ 0x3d
 8025852:	9300      	str	r3, [sp, #0]
 8025854:	ab04      	add	r3, sp, #16
 8025856:	aa06      	add	r2, sp, #24
 8025858:	a90a      	add	r1, sp, #40	@ 0x28
 802585a:	e911 0003 	ldmdb	r1, {r0, r1}
 802585e:	f7ff ffa4 	bl	80257aa <mg_span>
 8025862:	2800      	cmp	r0, #0
 8025864:	d0eb      	beq.n	802583e <mg_http_var+0x1a>
 8025866:	9a07      	ldr	r2, [sp, #28]
 8025868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802586a:	4293      	cmp	r3, r2
 802586c:	d1e7      	bne.n	802583e <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 802586e:	9906      	ldr	r1, [sp, #24]
 8025870:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025872:	f7fb fa05 	bl	8020c80 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025876:	2800      	cmp	r0, #0
 8025878:	d1e1      	bne.n	802583e <mg_http_var+0x1a>
      result = v;
 802587a:	ab04      	add	r3, sp, #16
 802587c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025880:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8025884:	4620      	mov	r0, r4
 8025886:	b00a      	add	sp, #40	@ 0x28
 8025888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802588c:	b002      	add	sp, #8
 802588e:	4770      	bx	lr

08025890 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8025890:	b530      	push	{r4, r5, lr}
 8025892:	b08d      	sub	sp, #52	@ 0x34
 8025894:	4604      	mov	r4, r0
 8025896:	a802      	add	r0, sp, #8
 8025898:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 802589c:	4619      	mov	r1, r3
 802589e:	a804      	add	r0, sp, #16
 80258a0:	f7ff fcc6 	bl	8025230 <mg_str_s>
  size_t i = 0;
 80258a4:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 80258a6:	e000      	b.n	80258aa <guess_content_type+0x1a>
 80258a8:	3301      	adds	r3, #1
 80258aa:	9803      	ldr	r0, [sp, #12]
 80258ac:	4298      	cmp	r0, r3
 80258ae:	d906      	bls.n	80258be <guess_content_type+0x2e>
 80258b0:	1ac1      	subs	r1, r0, r3
 80258b2:	9a02      	ldr	r2, [sp, #8]
 80258b4:	440a      	add	r2, r1
 80258b6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80258ba:	2a2e      	cmp	r2, #46	@ 0x2e
 80258bc:	d1f4      	bne.n	80258a8 <guess_content_type+0x18>
  path.buf += path.len - i;
 80258be:	1ac0      	subs	r0, r0, r3
 80258c0:	9a02      	ldr	r2, [sp, #8]
 80258c2:	4402      	add	r2, r0
 80258c4:	9202      	str	r2, [sp, #8]
  path.len = i;
 80258c6:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 80258c8:	ab04      	add	r3, sp, #16
 80258ca:	222c      	movs	r2, #44	@ 0x2c
 80258cc:	9200      	str	r2, [sp, #0]
 80258ce:	aa0a      	add	r2, sp, #40	@ 0x28
 80258d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80258d4:	f7ff ff69 	bl	80257aa <mg_span>
 80258d8:	b1c0      	cbz	r0, 802590c <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80258da:	233d      	movs	r3, #61	@ 0x3d
 80258dc:	9300      	str	r3, [sp, #0]
 80258de:	ab06      	add	r3, sp, #24
 80258e0:	aa08      	add	r2, sp, #32
 80258e2:	a90c      	add	r1, sp, #48	@ 0x30
 80258e4:	e911 0003 	ldmdb	r1, {r0, r1}
 80258e8:	f7ff ff5f 	bl	80257aa <mg_span>
 80258ec:	2800      	cmp	r0, #0
 80258ee:	d0eb      	beq.n	80258c8 <guess_content_type+0x38>
 80258f0:	ab08      	add	r3, sp, #32
 80258f2:	cb0c      	ldmia	r3, {r2, r3}
 80258f4:	a902      	add	r1, sp, #8
 80258f6:	c903      	ldmia	r1, {r0, r1}
 80258f8:	f7ff fd6b 	bl	80253d2 <mg_strcmp>
 80258fc:	2800      	cmp	r0, #0
 80258fe:	d1e3      	bne.n	80258c8 <guess_content_type+0x38>
 8025900:	ab06      	add	r3, sp, #24
 8025902:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025906:	e884 0003 	stmia.w	r4, {r0, r1}
 802590a:	e01c      	b.n	8025946 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 802590c:	2500      	movs	r5, #0
 802590e:	4b0f      	ldr	r3, [pc, #60]	@ (802594c <guess_content_type+0xbc>)
 8025910:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8025914:	b19b      	cbz	r3, 802593e <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8025916:	4b0d      	ldr	r3, [pc, #52]	@ (802594c <guess_content_type+0xbc>)
 8025918:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802591c:	cb0c      	ldmia	r3, {r2, r3}
 802591e:	a902      	add	r1, sp, #8
 8025920:	c903      	ldmia	r1, {r0, r1}
 8025922:	f7ff fd56 	bl	80253d2 <mg_strcmp>
 8025926:	b108      	cbz	r0, 802592c <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8025928:	3502      	adds	r5, #2
 802592a:	e7f0      	b.n	802590e <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802592c:	3501      	adds	r5, #1
 802592e:	4b07      	ldr	r3, [pc, #28]	@ (802594c <guess_content_type+0xbc>)
 8025930:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025938:	e884 0003 	stmia.w	r4, {r0, r1}
 802593c:	e003      	b.n	8025946 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 802593e:	4904      	ldr	r1, [pc, #16]	@ (8025950 <guess_content_type+0xc0>)
 8025940:	4620      	mov	r0, r4
 8025942:	f7ff fc75 	bl	8025230 <mg_str_s>
}
 8025946:	4620      	mov	r0, r4
 8025948:	b00d      	add	sp, #52	@ 0x34
 802594a:	bd30      	pop	{r4, r5, pc}
 802594c:	0803cfe0 	.word	0x0803cfe0
 8025950:	0803baf4 	.word	0x0803baf4

08025954 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8025954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025956:	b087      	sub	sp, #28
 8025958:	4604      	mov	r4, r0
 802595a:	460e      	mov	r6, r1
 802595c:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 802595e:	2500      	movs	r5, #0
 8025960:	1da8      	adds	r0, r5, #6
 8025962:	6863      	ldr	r3, [r4, #4]
 8025964:	4298      	cmp	r0, r3
 8025966:	d23c      	bcs.n	80259e2 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8025968:	6821      	ldr	r1, [r4, #0]
 802596a:	1b5b      	subs	r3, r3, r5
 802596c:	1f9a      	subs	r2, r3, #6
 802596e:	4401      	add	r1, r0
 8025970:	a804      	add	r0, sp, #16
 8025972:	f7ff fc69 	bl	8025248 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8025976:	6820      	ldr	r0, [r4, #0]
 8025978:	2206      	movs	r2, #6
 802597a:	491b      	ldr	r1, [pc, #108]	@ (80259e8 <getrange+0x94>)
 802597c:	4428      	add	r0, r5
 802597e:	f007 ff33 	bl	802d7e8 <memcmp>
 8025982:	b108      	cbz	r0, 8025988 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8025984:	3501      	adds	r5, #1
 8025986:	e7eb      	b.n	8025960 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8025988:	ab04      	add	r3, sp, #16
 802598a:	222d      	movs	r2, #45	@ 0x2d
 802598c:	9200      	str	r2, [sp, #0]
 802598e:	aa02      	add	r2, sp, #8
 8025990:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025994:	f7ff ff09 	bl	80257aa <mg_span>
 8025998:	b1c0      	cbz	r0, 80259cc <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 802599a:	4632      	mov	r2, r6
 802599c:	ab02      	add	r3, sp, #8
 802599e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80259a2:	f7fe f869 	bl	8023a78 <mg_to_size_t>
 80259a6:	b928      	cbnz	r0, 80259b4 <getrange+0x60>
  size_t i, numparsed = 0;
 80259a8:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80259aa:	9b05      	ldr	r3, [sp, #20]
 80259ac:	b923      	cbnz	r3, 80259b8 <getrange+0x64>
}
 80259ae:	4620      	mov	r0, r4
 80259b0:	b007      	add	sp, #28
 80259b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 80259b4:	2401      	movs	r4, #1
 80259b6:	e7f8      	b.n	80259aa <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80259b8:	463a      	mov	r2, r7
 80259ba:	ab06      	add	r3, sp, #24
 80259bc:	e913 0003 	ldmdb	r3, {r0, r1}
 80259c0:	f7fe f85a 	bl	8023a78 <mg_to_size_t>
 80259c4:	2800      	cmp	r0, #0
 80259c6:	d0f2      	beq.n	80259ae <getrange+0x5a>
 80259c8:	3401      	adds	r4, #1
 80259ca:	e7f0      	b.n	80259ae <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80259cc:	4632      	mov	r2, r6
 80259ce:	ab06      	add	r3, sp, #24
 80259d0:	e913 0003 	ldmdb	r3, {r0, r1}
 80259d4:	f7fe f850 	bl	8023a78 <mg_to_size_t>
 80259d8:	b908      	cbnz	r0, 80259de <getrange+0x8a>
  size_t i, numparsed = 0;
 80259da:	2400      	movs	r4, #0
 80259dc:	e7e7      	b.n	80259ae <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80259de:	2401      	movs	r4, #1
    break;
 80259e0:	e7e5      	b.n	80259ae <getrange+0x5a>
  size_t i, numparsed = 0;
 80259e2:	2400      	movs	r4, #0
 80259e4:	e7e3      	b.n	80259ae <getrange+0x5a>
 80259e6:	bf00      	nop
 80259e8:	0803bb10 	.word	0x0803bb10

080259ec <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 80259ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259f0:	b0e7      	sub	sp, #412	@ 0x19c
 80259f2:	4607      	mov	r7, r0
 80259f4:	4688      	mov	r8, r1
 80259f6:	4614      	mov	r4, r2
 80259f8:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80259fa:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80259fe:	f1b9 0f00 	cmp.w	r9, #0
 8025a02:	d036      	beq.n	8025a72 <mg_http_serve_file+0x86>
  size_t size = 0;
 8025a04:	2300      	movs	r3, #0
 8025a06:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8025a08:	2200      	movs	r2, #0
 8025a0a:	2300      	movs	r3, #0
 8025a0c:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8025a10:	ae5e      	add	r6, sp, #376	@ 0x178
 8025a12:	4621      	mov	r1, r4
 8025a14:	4630      	mov	r0, r6
 8025a16:	f7ff fc0b 	bl	8025230 <mg_str_s>
 8025a1a:	68eb      	ldr	r3, [r5, #12]
 8025a1c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8025a20:	a828      	add	r0, sp, #160	@ 0xa0
 8025a22:	f7ff ff35 	bl	8025890 <guess_content_type>
  if (path != NULL) {
 8025a26:	2c00      	cmp	r4, #0
 8025a28:	d053      	beq.n	8025ad2 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8025a2a:	4995      	ldr	r1, [pc, #596]	@ (8025c80 <mg_http_serve_file+0x294>)
 8025a2c:	4640      	mov	r0, r8
 8025a2e:	f7fe f8a1 	bl	8023b74 <mg_http_get_header>
    if (ae != NULL) {
 8025a32:	4606      	mov	r6, r0
 8025a34:	2800      	cmp	r0, #0
 8025a36:	d042      	beq.n	8025abe <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8025a38:	6802      	ldr	r2, [r0, #0]
 8025a3a:	6841      	ldr	r1, [r0, #4]
 8025a3c:	4891      	ldr	r0, [pc, #580]	@ (8025c84 <mg_http_serve_file+0x298>)
 8025a3e:	f7ff fb15 	bl	802506c <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8025a42:	4683      	mov	fp, r0
 8025a44:	b1d8      	cbz	r0, 8025a7e <mg_http_serve_file+0x92>
 8025a46:	4990      	ldr	r1, [pc, #576]	@ (8025c88 <mg_http_serve_file+0x29c>)
 8025a48:	f007 ffe2 	bl	802da10 <strstr>
 8025a4c:	4606      	mov	r6, r0
 8025a4e:	b1d0      	cbz	r0, 8025a86 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8025a50:	4623      	mov	r3, r4
 8025a52:	4a8e      	ldr	r2, [pc, #568]	@ (8025c8c <mg_http_serve_file+0x2a0>)
 8025a54:	2180      	movs	r1, #128	@ 0x80
 8025a56:	a82e      	add	r0, sp, #184	@ 0xb8
 8025a58:	f7fe fd62 	bl	8024520 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8025a5c:	2201      	movs	r2, #1
 8025a5e:	a92e      	add	r1, sp, #184	@ 0xb8
 8025a60:	4648      	mov	r0, r9
 8025a62:	f7fd ffcd 	bl	8023a00 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8025a66:	4606      	mov	r6, r0
 8025a68:	b130      	cbz	r0, 8025a78 <mg_http_serve_file+0x8c>
 8025a6a:	f04f 0a01 	mov.w	sl, #1
 8025a6e:	ac2e      	add	r4, sp, #184	@ 0xb8
 8025a70:	e00b      	b.n	8025a8a <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025a72:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8025cb4 <mg_http_serve_file+0x2c8>
 8025a76:	e7c5      	b.n	8025a04 <mg_http_serve_file+0x18>
  bool gzip = false;
 8025a78:	f04f 0a00 	mov.w	sl, #0
 8025a7c:	e005      	b.n	8025a8a <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8025a7e:	4606      	mov	r6, r0
  bool gzip = false;
 8025a80:	f04f 0a00 	mov.w	sl, #0
 8025a84:	e001      	b.n	8025a8a <mg_http_serve_file+0x9e>
 8025a86:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8025a8a:	4658      	mov	r0, fp
 8025a8c:	f7f5 ff76 	bl	801b97c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8025a90:	b1c6      	cbz	r6, 8025ac4 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8025a92:	b316      	cbz	r6, 8025ada <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8025a94:	f8d9 3000 	ldr.w	r3, [r9]
 8025a98:	aa2a      	add	r2, sp, #168	@ 0xa8
 8025a9a:	a92d      	add	r1, sp, #180	@ 0xb4
 8025a9c:	4620      	mov	r0, r4
 8025a9e:	4798      	blx	r3
 8025aa0:	2800      	cmp	r0, #0
 8025aa2:	d137      	bne.n	8025b14 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8025aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8025c90 <mg_http_serve_file+0x2a4>)
 8025aa6:	68aa      	ldr	r2, [r5, #8]
 8025aa8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8025aac:	4638      	mov	r0, r7
 8025aae:	f7ff fa35 	bl	8024f1c <mg_http_reply>
    mg_fs_close(fd);
 8025ab2:	4630      	mov	r0, r6
 8025ab4:	f7fd ffbd 	bl	8023a32 <mg_fs_close>
}
 8025ab8:	b067      	add	sp, #412	@ 0x19c
 8025aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8025abe:	f04f 0a00 	mov.w	sl, #0
 8025ac2:	e7e5      	b.n	8025a90 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8025ac4:	2201      	movs	r2, #1
 8025ac6:	4621      	mov	r1, r4
 8025ac8:	4648      	mov	r0, r9
 8025aca:	f7fd ff99 	bl	8023a00 <mg_fs_open>
 8025ace:	4606      	mov	r6, r0
 8025ad0:	e7df      	b.n	8025a92 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8025ad2:	4626      	mov	r6, r4
  bool gzip = false;
 8025ad4:	f04f 0a00 	mov.w	sl, #0
 8025ad8:	e7db      	b.n	8025a92 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8025ada:	6929      	ldr	r1, [r5, #16]
 8025adc:	b1b9      	cbz	r1, 8025b0e <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8025ade:	2201      	movs	r2, #1
 8025ae0:	4648      	mov	r0, r9
 8025ae2:	f7fd ff8d 	bl	8023a00 <mg_fs_open>
 8025ae6:	4606      	mov	r6, r0
    path = opts->page404;
 8025ae8:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8025aea:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8025aee:	4621      	mov	r1, r4
 8025af0:	4658      	mov	r0, fp
 8025af2:	f7ff fb9d 	bl	8025230 <mg_str_s>
 8025af6:	68eb      	ldr	r3, [r5, #12]
 8025af8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8025afc:	a80a      	add	r0, sp, #40	@ 0x28
 8025afe:	f7ff fec7 	bl	8025890 <guess_content_type>
 8025b02:	ab28      	add	r3, sp, #160	@ 0xa0
 8025b04:	aa0a      	add	r2, sp, #40	@ 0x28
 8025b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025b0a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8025b0e:	2e00      	cmp	r6, #0
 8025b10:	d1c0      	bne.n	8025a94 <mg_http_serve_file+0xa8>
 8025b12:	e7c7      	b.n	8025aa4 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8025b14:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8025b18:	e9cd 2300 	strd	r2, r3, [sp]
 8025b1c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8025b1e:	2140      	movs	r1, #64	@ 0x40
 8025b20:	a84e      	add	r0, sp, #312	@ 0x138
 8025b22:	f7ff fa3d 	bl	8024fa0 <mg_http_etag>
 8025b26:	b190      	cbz	r0, 8025b4e <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8025b28:	495a      	ldr	r1, [pc, #360]	@ (8025c94 <mg_http_serve_file+0x2a8>)
 8025b2a:	4640      	mov	r0, r8
 8025b2c:	f7fe f822 	bl	8023b74 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8025b30:	4604      	mov	r4, r0
 8025b32:	b160      	cbz	r0, 8025b4e <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8025b34:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8025b38:	a94e      	add	r1, sp, #312	@ 0x138
 8025b3a:	4658      	mov	r0, fp
 8025b3c:	f7ff fb78 	bl	8025230 <mg_str_s>
 8025b40:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8025b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b48:	f7ff fc6d 	bl	8025426 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8025b4c:	b340      	cbz	r0, 8025ba0 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8025b4e:	f04f 0b00 	mov.w	fp, #0
 8025b52:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8025b56:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8025b5a:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8025b5c:	494e      	ldr	r1, [pc, #312]	@ (8025c98 <mg_http_serve_file+0x2ac>)
 8025b5e:	4640      	mov	r0, r8
 8025b60:	f7fe f808 	bl	8023b74 <mg_http_get_header>
    range[0] = '\0';
 8025b64:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8025b68:	2800      	cmp	r0, #0
 8025b6a:	d040      	beq.n	8025bee <mg_http_serve_file+0x202>
 8025b6c:	aa0e      	add	r2, sp, #56	@ 0x38
 8025b6e:	a90d      	add	r1, sp, #52	@ 0x34
 8025b70:	f7ff fef0 	bl	8025954 <getrange>
 8025b74:	2800      	cmp	r0, #0
 8025b76:	dd70      	ble.n	8025c5a <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8025b78:	2801      	cmp	r0, #1
 8025b7a:	d01c      	beq.n	8025bb6 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8025b7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025b80:	429a      	cmp	r2, r3
 8025b82:	d801      	bhi.n	8025b88 <mg_http_serve_file+0x19c>
 8025b84:	42a3      	cmp	r3, r4
 8025b86:	d319      	bcc.n	8025bbc <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8025b88:	2400      	movs	r4, #0
 8025b8a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025b8c:	9300      	str	r3, [sp, #0]
 8025b8e:	9401      	str	r4, [sp, #4]
 8025b90:	4a42      	ldr	r2, [pc, #264]	@ (8025c9c <mg_http_serve_file+0x2b0>)
 8025b92:	2164      	movs	r1, #100	@ 0x64
 8025b94:	a80f      	add	r0, sp, #60	@ 0x3c
 8025b96:	f7fe fcc3 	bl	8024520 <mg_snprintf>
        status = 416;
 8025b9a:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8025b9e:	e028      	b.n	8025bf2 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8025ba0:	4630      	mov	r0, r6
 8025ba2:	f7fd ff46 	bl	8023a32 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8025ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8025ca0 <mg_http_serve_file+0x2b4>)
 8025ba8:	68aa      	ldr	r2, [r5, #8]
 8025baa:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8025bae:	4638      	mov	r0, r7
 8025bb0:	f7ff f9b4 	bl	8024f1c <mg_http_reply>
 8025bb4:	e780      	b.n	8025ab8 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8025bb6:	1e63      	subs	r3, r4, #1
 8025bb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bba:	e7df      	b.n	8025b7c <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8025bbc:	1a9b      	subs	r3, r3, r2
 8025bbe:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8025bc0:	1911      	adds	r1, r2, r4
 8025bc2:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8025bc4:	2300      	movs	r3, #0
 8025bc6:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8025bc8:	9004      	str	r0, [sp, #16]
 8025bca:	9305      	str	r3, [sp, #20]
 8025bcc:	9102      	str	r1, [sp, #8]
 8025bce:	9303      	str	r3, [sp, #12]
 8025bd0:	9200      	str	r2, [sp, #0]
 8025bd2:	9301      	str	r3, [sp, #4]
 8025bd4:	4a33      	ldr	r2, [pc, #204]	@ (8025ca4 <mg_http_serve_file+0x2b8>)
 8025bd6:	2164      	movs	r1, #100	@ 0x64
 8025bd8:	a80f      	add	r0, sp, #60	@ 0x3c
 8025bda:	f7fe fca1 	bl	8024520 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8025bde:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8025be2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025be4:	6830      	ldr	r0, [r6, #0]
 8025be6:	4798      	blx	r3
        status = 206;
 8025be8:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8025bec:	e001      	b.n	8025bf2 <mg_http_serve_file+0x206>
    int n, status = 200;
 8025bee:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8025bf2:	4648      	mov	r0, r9
 8025bf4:	f7fb f96a 	bl	8020ecc <mg_http_status_code_str>
 8025bf8:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8025bfa:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8025bfc:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8025bfe:	46a4      	mov	ip, r4
 8025c00:	f1ba 0f00 	cmp.w	sl, #0
 8025c04:	d02c      	beq.n	8025c60 <mg_http_serve_file+0x274>
 8025c06:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8025cb8 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8025c0a:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8025c0c:	b35a      	cbz	r2, 8025c66 <mg_http_serve_file+0x27a>
 8025c0e:	9208      	str	r2, [sp, #32]
 8025c10:	aa0f      	add	r2, sp, #60	@ 0x3c
 8025c12:	9207      	str	r2, [sp, #28]
 8025c14:	f8cd e018 	str.w	lr, [sp, #24]
 8025c18:	f8cd c010 	str.w	ip, [sp, #16]
 8025c1c:	2200      	movs	r2, #0
 8025c1e:	9205      	str	r2, [sp, #20]
 8025c20:	aa4e      	add	r2, sp, #312	@ 0x138
 8025c22:	9202      	str	r2, [sp, #8]
 8025c24:	9001      	str	r0, [sp, #4]
 8025c26:	9100      	str	r1, [sp, #0]
 8025c28:	464a      	mov	r2, r9
 8025c2a:	491f      	ldr	r1, [pc, #124]	@ (8025ca8 <mg_http_serve_file+0x2bc>)
 8025c2c:	4638      	mov	r0, r7
 8025c2e:	f7ff f94f 	bl	8024ed0 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8025c32:	ad64      	add	r5, sp, #400	@ 0x190
 8025c34:	491d      	ldr	r1, [pc, #116]	@ (8025cac <mg_http_serve_file+0x2c0>)
 8025c36:	4628      	mov	r0, r5
 8025c38:	f7ff fafa 	bl	8025230 <mg_str_s>
 8025c3c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025c40:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025c44:	f7ff fbef 	bl	8025426 <mg_strcasecmp>
 8025c48:	b178      	cbz	r0, 8025c6a <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8025c4a:	4b19      	ldr	r3, [pc, #100]	@ (8025cb0 <mg_http_serve_file+0x2c4>)
 8025c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8025c50:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8025c54:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8025c58:	e72e      	b.n	8025ab8 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8025c5a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8025c5e:	e7c8      	b.n	8025bf2 <mg_http_serve_file+0x206>
    mg_printf(c,
 8025c60:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8025ca0 <mg_http_serve_file+0x2b4>
 8025c64:	e7d1      	b.n	8025c0a <mg_http_serve_file+0x21e>
 8025c66:	4a0e      	ldr	r2, [pc, #56]	@ (8025ca0 <mg_http_serve_file+0x2b4>)
 8025c68:	e7d1      	b.n	8025c0e <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8025c6a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025c6e:	f36f 13c7 	bfc	r3, #7, #1
 8025c72:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8025c76:	4630      	mov	r0, r6
 8025c78:	f7fd fedb 	bl	8023a32 <mg_fs_close>
 8025c7c:	e71c      	b.n	8025ab8 <mg_http_serve_file+0xcc>
 8025c7e:	bf00      	nop
 8025c80:	0803bb34 	.word	0x0803bb34
 8025c84:	0803ba40 	.word	0x0803ba40
 8025c88:	0803cef4 	.word	0x0803cef4
 8025c8c:	0803bb44 	.word	0x0803bb44
 8025c90:	0803bb4c 	.word	0x0803bb4c
 8025c94:	0803bb58 	.word	0x0803bb58
 8025c98:	0803bb68 	.word	0x0803bb68
 8025c9c:	0803bb70 	.word	0x0803bb70
 8025ca0:	080381c0 	.word	0x080381c0
 8025ca4:	0803bb90 	.word	0x0803bb90
 8025ca8:	0803bbb8 	.word	0x0803bbb8
 8025cac:	0803bc08 	.word	0x0803bc08
 8025cb0:	08027e3d 	.word	0x08027e3d
 8025cb4:	20000130 	.word	0x20000130
 8025cb8:	0803bb18 	.word	0x0803bb18

08025cbc <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8025cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cc0:	b083      	sub	sp, #12
 8025cc2:	ac02      	add	r4, sp, #8
 8025cc4:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8025cc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025cca:	3901      	subs	r1, #1
 8025ccc:	2907      	cmp	r1, #7
 8025cce:	f200 8128 	bhi.w	8025f22 <mg_str_to_num+0x266>
 8025cd2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8025cd6:	0008      	.short	0x0008
 8025cd8:	01260020 	.word	0x01260020
 8025cdc:	0126000c 	.word	0x0126000c
 8025ce0:	01260126 	.word	0x01260126
 8025ce4:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8025ce6:	20ff      	movs	r0, #255	@ 0xff
 8025ce8:	f04f 0e00 	mov.w	lr, #0
 8025cec:	e003      	b.n	8025cf6 <mg_str_to_num+0x3a>
 8025cee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025cf2:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8025cf6:	b9e2      	cbnz	r2, 8025d32 <mg_str_to_num+0x76>
 8025cf8:	9901      	ldr	r1, [sp, #4]
 8025cfa:	2901      	cmp	r1, #1
 8025cfc:	d926      	bls.n	8025d4c <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8025cfe:	9a00      	ldr	r2, [sp, #0]
 8025d00:	7811      	ldrb	r1, [r2, #0]
 8025d02:	2930      	cmp	r1, #48	@ 0x30
 8025d04:	d00c      	beq.n	8025d20 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8025d06:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8025d0a:	220a      	movs	r2, #10
 8025d0c:	e013      	b.n	8025d36 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8025d0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025d12:	4686      	mov	lr, r0
 8025d14:	e7ef      	b.n	8025cf6 <mg_str_to_num+0x3a>
 8025d16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8025d1a:	f04f 0e00 	mov.w	lr, #0
 8025d1e:	e7ea      	b.n	8025cf6 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025d20:	7852      	ldrb	r2, [r2, #1]
 8025d22:	2a62      	cmp	r2, #98	@ 0x62
 8025d24:	d015      	beq.n	8025d52 <mg_str_to_num+0x96>
 8025d26:	2a78      	cmp	r2, #120	@ 0x78
 8025d28:	d017      	beq.n	8025d5a <mg_str_to_num+0x9e>
      i++;
 8025d2a:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025d2e:	220a      	movs	r2, #10
 8025d30:	e001      	b.n	8025d36 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8025d32:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8025d36:	2a0a      	cmp	r2, #10
 8025d38:	d044      	beq.n	8025dc4 <mg_str_to_num+0x108>
 8025d3a:	2a10      	cmp	r2, #16
 8025d3c:	f000 80d4 	beq.w	8025ee8 <mg_str_to_num+0x22c>
 8025d40:	2a02      	cmp	r2, #2
 8025d42:	d00e      	beq.n	8025d62 <mg_str_to_num+0xa6>
 8025d44:	2000      	movs	r0, #0
}
 8025d46:	b003      	add	sp, #12
 8025d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8025d4c:	f04f 0c00 	mov.w	ip, #0
 8025d50:	e7f1      	b.n	8025d36 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8025d52:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025d56:	4662      	mov	r2, ip
 8025d58:	e7ed      	b.n	8025d36 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8025d5a:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025d5e:	2210      	movs	r2, #16
 8025d60:	e7e9      	b.n	8025d36 <mg_str_to_num+0x7a>
  switch (base) {
 8025d62:	2200      	movs	r2, #0
 8025d64:	4611      	mov	r1, r2
 8025d66:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8025d68:	9d01      	ldr	r5, [sp, #4]
 8025d6a:	4565      	cmp	r5, ip
 8025d6c:	f240 80c0 	bls.w	8025ef0 <mg_str_to_num+0x234>
 8025d70:	9d00      	ldr	r5, [sp, #0]
 8025d72:	f815 600c 	ldrb.w	r6, [r5, ip]
 8025d76:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8025d7a:	b2ff      	uxtb	r7, r7
 8025d7c:	2f01      	cmp	r7, #1
 8025d7e:	f200 80b7 	bhi.w	8025ef0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8025d82:	3e30      	subs	r6, #48	@ 0x30
 8025d84:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8025d88:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8025d8c:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8025d90:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8025d94:	4591      	cmp	r9, r2
 8025d96:	418f      	sbcs	r7, r1
 8025d98:	f0c0 80c5 	bcc.w	8025f26 <mg_str_to_num+0x26a>
        result *= 2;
 8025d9c:	1892      	adds	r2, r2, r2
 8025d9e:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8025da0:	ebb0 0a06 	subs.w	sl, r0, r6
 8025da4:	eb6e 0708 	sbc.w	r7, lr, r8
 8025da8:	4592      	cmp	sl, r2
 8025daa:	418f      	sbcs	r7, r1
 8025dac:	f0c0 80bd 	bcc.w	8025f2a <mg_str_to_num+0x26e>
        result += digit;
 8025db0:	18b2      	adds	r2, r6, r2
 8025db2:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8025db6:	f10c 0c01 	add.w	ip, ip, #1
 8025dba:	3401      	adds	r4, #1
 8025dbc:	e7d4      	b.n	8025d68 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8025dbe:	f04f 0901 	mov.w	r9, #1
 8025dc2:	e017      	b.n	8025df4 <mg_str_to_num+0x138>
  switch (base) {
 8025dc4:	2200      	movs	r2, #0
 8025dc6:	4611      	mov	r1, r2
 8025dc8:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8025dca:	9d01      	ldr	r5, [sp, #4]
 8025dcc:	4565      	cmp	r5, ip
 8025dce:	f240 808f 	bls.w	8025ef0 <mg_str_to_num+0x234>
 8025dd2:	9d00      	ldr	r5, [sp, #0]
 8025dd4:	f815 700c 	ldrb.w	r7, [r5, ip]
 8025dd8:	2f2f      	cmp	r7, #47	@ 0x2f
 8025dda:	f240 8089 	bls.w	8025ef0 <mg_str_to_num+0x234>
 8025dde:	2f39      	cmp	r7, #57	@ 0x39
 8025de0:	f200 8086 	bhi.w	8025ef0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8025de4:	3f30      	subs	r7, #48	@ 0x30
 8025de6:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8025dea:	f04f 0900 	mov.w	r9, #0
 8025dee:	eb10 060e 	adds.w	r6, r0, lr
 8025df2:	d2e4      	bcs.n	8025dbe <mg_str_to_num+0x102>
 8025df4:	444e      	add	r6, r9
 8025df6:	4d54      	ldr	r5, [pc, #336]	@ (8025f48 <mg_str_to_num+0x28c>)
 8025df8:	fba5 9b06 	umull	r9, fp, r5, r6
 8025dfc:	f02b 0903 	bic.w	r9, fp, #3
 8025e00:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8025e04:	eba6 0609 	sub.w	r6, r6, r9
 8025e08:	1b86      	subs	r6, r0, r6
 8025e0a:	f16e 0b00 	sbc.w	fp, lr, #0
 8025e0e:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8025e12:	fb09 f906 	mul.w	r9, r9, r6
 8025e16:	fb05 990b 	mla	r9, r5, fp, r9
 8025e1a:	fba6 6a05 	umull	r6, sl, r6, r5
 8025e1e:	44d1      	add	r9, sl
 8025e20:	0876      	lsrs	r6, r6, #1
 8025e22:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8025e26:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8025e2a:	4296      	cmp	r6, r2
 8025e2c:	eb79 0901 	sbcs.w	r9, r9, r1
 8025e30:	d37d      	bcc.n	8025f2e <mg_str_to_num+0x272>
        result *= 10;
 8025e32:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8025e36:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8025e3a:	0096      	lsls	r6, r2, #2
 8025e3c:	18b2      	adds	r2, r6, r2
 8025e3e:	eb41 0909 	adc.w	r9, r1, r9
 8025e42:	1892      	adds	r2, r2, r2
 8025e44:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8025e48:	ebb0 0a07 	subs.w	sl, r0, r7
 8025e4c:	eb6e 0108 	sbc.w	r1, lr, r8
 8025e50:	4592      	cmp	sl, r2
 8025e52:	eb71 0109 	sbcs.w	r1, r1, r9
 8025e56:	d36c      	bcc.n	8025f32 <mg_str_to_num+0x276>
        result += digit;
 8025e58:	18ba      	adds	r2, r7, r2
 8025e5a:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8025e5e:	f10c 0c01 	add.w	ip, ip, #1
 8025e62:	3401      	adds	r4, #1
 8025e64:	e7b1      	b.n	8025dca <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025e66:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8025e6a:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025e6c:	2f05      	cmp	r7, #5
 8025e6e:	d832      	bhi.n	8025ed6 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025e70:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025e72:	46b0      	mov	r8, r6
 8025e74:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8025e76:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8025e7a:	bf08      	it	eq
 8025e7c:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8025e80:	d036      	beq.n	8025ef0 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8025e82:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8025e86:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8025e8a:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8025e8e:	4591      	cmp	r9, r2
 8025e90:	418f      	sbcs	r7, r1
 8025e92:	d350      	bcc.n	8025f36 <mg_str_to_num+0x27a>
        result *= 16;
 8025e94:	0109      	lsls	r1, r1, #4
 8025e96:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8025e9a:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8025e9c:	ebb0 0908 	subs.w	r9, r0, r8
 8025ea0:	eb6e 0706 	sbc.w	r7, lr, r6
 8025ea4:	4591      	cmp	r9, r2
 8025ea6:	418f      	sbcs	r7, r1
 8025ea8:	d347      	bcc.n	8025f3a <mg_str_to_num+0x27e>
        result += digit;
 8025eaa:	eb18 0202 	adds.w	r2, r8, r2
 8025eae:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8025eb2:	f10c 0c01 	add.w	ip, ip, #1
 8025eb6:	3401      	adds	r4, #1
      while (i < str.len) {
 8025eb8:	9d01      	ldr	r5, [sp, #4]
 8025eba:	4565      	cmp	r5, ip
 8025ebc:	d918      	bls.n	8025ef0 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8025ebe:	9d00      	ldr	r5, [sp, #0]
 8025ec0:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8025ec4:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8025ec8:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025eca:	2f09      	cmp	r7, #9
 8025ecc:	d8cb      	bhi.n	8025e66 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8025ece:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025ed0:	46b0      	mov	r8, r6
 8025ed2:	17f6      	asrs	r6, r6, #31
 8025ed4:	e7cf      	b.n	8025e76 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025ed6:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8025eda:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8025edc:	2f05      	cmp	r7, #5
 8025ede:	d807      	bhi.n	8025ef0 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025ee0:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8025ee2:	46b0      	mov	r8, r6
 8025ee4:	17f6      	asrs	r6, r6, #31
 8025ee6:	e7c6      	b.n	8025e76 <mg_str_to_num+0x1ba>
  switch (base) {
 8025ee8:	2200      	movs	r2, #0
 8025eea:	4611      	mov	r1, r2
 8025eec:	4614      	mov	r4, r2
 8025eee:	e7e3      	b.n	8025eb8 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8025ef0:	b32c      	cbz	r4, 8025f3e <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8025ef2:	9801      	ldr	r0, [sp, #4]
 8025ef4:	4560      	cmp	r0, ip
 8025ef6:	d124      	bne.n	8025f42 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8025ef8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025efa:	2801      	cmp	r0, #1
 8025efc:	d009      	beq.n	8025f12 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8025efe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025f00:	2802      	cmp	r0, #2
 8025f02:	d008      	beq.n	8025f16 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8025f04:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025f06:	2804      	cmp	r0, #4
 8025f08:	d008      	beq.n	8025f1c <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8025f0a:	601a      	str	r2, [r3, #0]
 8025f0c:	6059      	str	r1, [r3, #4]
  return true;
 8025f0e:	2001      	movs	r0, #1
 8025f10:	e719      	b.n	8025d46 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8025f12:	701a      	strb	r2, [r3, #0]
 8025f14:	e717      	b.n	8025d46 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8025f16:	801a      	strh	r2, [r3, #0]
  return true;
 8025f18:	2001      	movs	r0, #1
 8025f1a:	e714      	b.n	8025d46 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8025f1c:	601a      	str	r2, [r3, #0]
  return true;
 8025f1e:	2001      	movs	r0, #1
 8025f20:	e711      	b.n	8025d46 <mg_str_to_num+0x8a>
  switch (base) {
 8025f22:	2000      	movs	r0, #0
 8025f24:	e70f      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8025f26:	2000      	movs	r0, #0
 8025f28:	e70d      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025f2a:	2000      	movs	r0, #0
 8025f2c:	e70b      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8025f2e:	2000      	movs	r0, #0
 8025f30:	e709      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025f32:	2000      	movs	r0, #0
 8025f34:	e707      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8025f36:	2000      	movs	r0, #0
 8025f38:	e705      	b.n	8025d46 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025f3a:	2000      	movs	r0, #0
 8025f3c:	e703      	b.n	8025d46 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 8025f3e:	2000      	movs	r0, #0
 8025f40:	e701      	b.n	8025d46 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8025f42:	2000      	movs	r0, #0
 8025f44:	e6ff      	b.n	8025d46 <mg_str_to_num+0x8a>
 8025f46:	bf00      	nop
 8025f48:	cccccccd 	.word	0xcccccccd

08025f4c <mg_url_decode>:
                  int is_form_url_encoded) {
 8025f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f50:	b087      	sub	sp, #28
 8025f52:	4606      	mov	r6, r0
 8025f54:	460f      	mov	r7, r1
 8025f56:	4693      	mov	fp, r2
 8025f58:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8025f5a:	2400      	movs	r4, #0
 8025f5c:	4623      	mov	r3, r4
 8025f5e:	e027      	b.n	8025fb0 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8025f60:	f103 0802 	add.w	r8, r3, #2
 8025f64:	45b8      	cmp	r8, r7
 8025f66:	d241      	bcs.n	8025fec <mg_url_decode+0xa0>
 8025f68:	3301      	adds	r3, #1
 8025f6a:	18f2      	adds	r2, r6, r3
 8025f6c:	9203      	str	r2, [sp, #12]
 8025f6e:	5cf0      	ldrb	r0, [r6, r3]
 8025f70:	f7fa fea8 	bl	8020cc4 <isx>
 8025f74:	2800      	cmp	r0, #0
 8025f76:	d03c      	beq.n	8025ff2 <mg_url_decode+0xa6>
 8025f78:	f816 0008 	ldrb.w	r0, [r6, r8]
 8025f7c:	f7fa fea2 	bl	8020cc4 <isx>
 8025f80:	2800      	cmp	r0, #0
 8025f82:	d039      	beq.n	8025ff8 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8025f84:	f10d 0a10 	add.w	sl, sp, #16
 8025f88:	2202      	movs	r2, #2
 8025f8a:	9903      	ldr	r1, [sp, #12]
 8025f8c:	4650      	mov	r0, sl
 8025f8e:	f7ff f95b 	bl	8025248 <mg_str_n>
 8025f92:	2301      	movs	r3, #1
 8025f94:	9300      	str	r3, [sp, #0]
 8025f96:	eb0b 0304 	add.w	r3, fp, r4
 8025f9a:	2210      	movs	r2, #16
 8025f9c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025fa0:	f7ff fe8c 	bl	8025cbc <mg_str_to_num>
        i += 2;
 8025fa4:	4643      	mov	r3, r8
 8025fa6:	e001      	b.n	8025fac <mg_url_decode+0x60>
      dst[j] = src[i];
 8025fa8:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8025fac:	3301      	adds	r3, #1
 8025fae:	462c      	mov	r4, r5
 8025fb0:	42bb      	cmp	r3, r7
 8025fb2:	d20e      	bcs.n	8025fd2 <mg_url_decode+0x86>
 8025fb4:	1c65      	adds	r5, r4, #1
 8025fb6:	454d      	cmp	r5, r9
 8025fb8:	d20b      	bcs.n	8025fd2 <mg_url_decode+0x86>
    if (src[i] == '%') {
 8025fba:	5cf2      	ldrb	r2, [r6, r3]
 8025fbc:	2a25      	cmp	r2, #37	@ 0x25
 8025fbe:	d0cf      	beq.n	8025f60 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8025fc0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025fc2:	2900      	cmp	r1, #0
 8025fc4:	d0f0      	beq.n	8025fa8 <mg_url_decode+0x5c>
 8025fc6:	2a2b      	cmp	r2, #43	@ 0x2b
 8025fc8:	d1ee      	bne.n	8025fa8 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8025fca:	2220      	movs	r2, #32
 8025fcc:	f80b 2004 	strb.w	r2, [fp, r4]
 8025fd0:	e7ec      	b.n	8025fac <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8025fd2:	454c      	cmp	r4, r9
 8025fd4:	d202      	bcs.n	8025fdc <mg_url_decode+0x90>
 8025fd6:	2200      	movs	r2, #0
 8025fd8:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8025fdc:	42bb      	cmp	r3, r7
 8025fde:	d30e      	bcc.n	8025ffe <mg_url_decode+0xb2>
 8025fe0:	454c      	cmp	r4, r9
 8025fe2:	d20f      	bcs.n	8026004 <mg_url_decode+0xb8>
 8025fe4:	4620      	mov	r0, r4
}
 8025fe6:	b007      	add	sp, #28
 8025fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8025fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ff0:	e7f9      	b.n	8025fe6 <mg_url_decode+0x9a>
 8025ff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ff6:	e7f6      	b.n	8025fe6 <mg_url_decode+0x9a>
 8025ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ffc:	e7f3      	b.n	8025fe6 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 8025ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026002:	e7f0      	b.n	8025fe6 <mg_url_decode+0x9a>
 8026004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026008:	e7ed      	b.n	8025fe6 <mg_url_decode+0x9a>

0802600a <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 802600a:	b352      	cbz	r2, 8026062 <mg_http_get_var+0x58>
                    size_t dst_len) {
 802600c:	b570      	push	{r4, r5, r6, lr}
 802600e:	b086      	sub	sp, #24
 8026010:	4604      	mov	r4, r0
 8026012:	461d      	mov	r5, r3
 8026014:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8026016:	b10b      	cbz	r3, 802601c <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8026018:	2300      	movs	r3, #0
 802601a:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 802601c:	b325      	cbz	r5, 8026068 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802601e:	6823      	ldr	r3, [r4, #0]
 8026020:	b32b      	cbz	r3, 802606e <mg_http_get_var+0x64>
 8026022:	b339      	cbz	r1, 8026074 <mg_http_get_var+0x6a>
 8026024:	6863      	ldr	r3, [r4, #4]
 8026026:	b343      	cbz	r3, 802607a <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8026028:	a804      	add	r0, sp, #16
 802602a:	f7ff f901 	bl	8025230 <mg_str_s>
 802602e:	9b05      	ldr	r3, [sp, #20]
 8026030:	9300      	str	r3, [sp, #0]
 8026032:	9b04      	ldr	r3, [sp, #16]
 8026034:	e894 0006 	ldmia.w	r4, {r1, r2}
 8026038:	a802      	add	r0, sp, #8
 802603a:	f7ff fbf3 	bl	8025824 <mg_http_var>
    if (v.buf == NULL) {
 802603e:	9802      	ldr	r0, [sp, #8]
 8026040:	b158      	cbz	r0, 802605a <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8026042:	2301      	movs	r3, #1
 8026044:	9300      	str	r3, [sp, #0]
 8026046:	462b      	mov	r3, r5
 8026048:	4632      	mov	r2, r6
 802604a:	9903      	ldr	r1, [sp, #12]
 802604c:	f7ff ff7e 	bl	8025f4c <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8026050:	2800      	cmp	r0, #0
 8026052:	da04      	bge.n	802605e <mg_http_get_var+0x54>
 8026054:	f06f 0002 	mvn.w	r0, #2
 8026058:	e001      	b.n	802605e <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 802605a:	f06f 0003 	mvn.w	r0, #3
}
 802605e:	b006      	add	sp, #24
 8026060:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8026062:	f06f 0001 	mvn.w	r0, #1
}
 8026066:	4770      	bx	lr
    len = -2;  // Bad destination
 8026068:	f06f 0001 	mvn.w	r0, #1
 802606c:	e7f7      	b.n	802605e <mg_http_get_var+0x54>
    len = -1;  // Bad source
 802606e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026072:	e7f4      	b.n	802605e <mg_http_get_var+0x54>
 8026074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026078:	e7f1      	b.n	802605e <mg_http_get_var+0x54>
 802607a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 802607e:	e7ee      	b.n	802605e <mg_http_get_var+0x54>

08026080 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8026080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026084:	b0c4      	sub	sp, #272	@ 0x110
 8026086:	4606      	mov	r6, r0
 8026088:	460d      	mov	r5, r1
 802608a:	4617      	mov	r7, r2
 802608c:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 802608e:	493f      	ldr	r1, [pc, #252]	@ (802618c <mg_http_creds+0x10c>)
 8026090:	f7fd fd70 	bl	8023b74 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8026094:	2300      	movs	r3, #0
 8026096:	7023      	strb	r3, [r4, #0]
 8026098:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 802609a:	b1c8      	cbz	r0, 80260d0 <mg_http_creds+0x50>
 802609c:	4680      	mov	r8, r0
 802609e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80260a2:	f1b9 0f06 	cmp.w	r9, #6
 80260a6:	d907      	bls.n	80260b8 <mg_http_creds+0x38>
 80260a8:	f8d0 a000 	ldr.w	sl, [r0]
 80260ac:	2206      	movs	r2, #6
 80260ae:	4938      	ldr	r1, [pc, #224]	@ (8026190 <mg_http_creds+0x110>)
 80260b0:	4650      	mov	r0, sl
 80260b2:	f007 fb99 	bl	802d7e8 <memcmp>
 80260b6:	b328      	cbz	r0, 8026104 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 80260b8:	f1b9 0f07 	cmp.w	r9, #7
 80260bc:	d908      	bls.n	80260d0 <mg_http_creds+0x50>
 80260be:	f8d8 5000 	ldr.w	r5, [r8]
 80260c2:	2207      	movs	r2, #7
 80260c4:	4933      	ldr	r1, [pc, #204]	@ (8026194 <mg_http_creds+0x114>)
 80260c6:	4628      	mov	r0, r5
 80260c8:	f007 fb8e 	bl	802d7e8 <memcmp>
 80260cc:	2800      	cmp	r0, #0
 80260ce:	d043      	beq.n	8026158 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 80260d0:	4931      	ldr	r1, [pc, #196]	@ (8026198 <mg_http_creds+0x118>)
 80260d2:	4630      	mov	r0, r6
 80260d4:	f7fd fd4e 	bl	8023b74 <mg_http_get_header>
 80260d8:	4605      	mov	r5, r0
 80260da:	2800      	cmp	r0, #0
 80260dc:	d04e      	beq.n	802617c <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 80260de:	220c      	movs	r2, #12
 80260e0:	492e      	ldr	r1, [pc, #184]	@ (802619c <mg_http_creds+0x11c>)
 80260e2:	a842      	add	r0, sp, #264	@ 0x108
 80260e4:	f7ff f8b0 	bl	8025248 <mg_str_n>
 80260e8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80260ea:	9300      	str	r3, [sp, #0]
 80260ec:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80260ee:	e895 0006 	ldmia.w	r5, {r1, r2}
 80260f2:	a802      	add	r0, sp, #8
 80260f4:	f7ff f8c8 	bl	8025288 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80260f8:	9b03      	ldr	r3, [sp, #12]
 80260fa:	2b00      	cmp	r3, #0
 80260fc:	d136      	bne.n	802616c <mg_http_creds+0xec>
}
 80260fe:	b044      	add	sp, #272	@ 0x110
 8026100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8026104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8026108:	aa02      	add	r2, sp, #8
 802610a:	f1a9 0106 	sub.w	r1, r9, #6
 802610e:	f10a 0006 	add.w	r0, sl, #6
 8026112:	f7fd fba3 	bl	802385c <mg_base64_decode>
 8026116:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8026118:	4602      	mov	r2, r0
 802611a:	213a      	movs	r1, #58	@ 0x3a
 802611c:	a802      	add	r0, sp, #8
 802611e:	f7ea f86f 	bl	8010200 <memchr>
    if (p != NULL) {
 8026122:	4680      	mov	r8, r0
 8026124:	2800      	cmp	r0, #0
 8026126:	d0ea      	beq.n	80260fe <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8026128:	ab02      	add	r3, sp, #8
 802612a:	eba0 0a03 	sub.w	sl, r0, r3
 802612e:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 80261a0 <mg_http_creds+0x120>
 8026132:	9300      	str	r3, [sp, #0]
 8026134:	4653      	mov	r3, sl
 8026136:	464a      	mov	r2, r9
 8026138:	4639      	mov	r1, r7
 802613a:	4628      	mov	r0, r5
 802613c:	f7fe f9f0 	bl	8024520 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8026140:	eba6 030a 	sub.w	r3, r6, sl
 8026144:	f108 0201 	add.w	r2, r8, #1
 8026148:	9200      	str	r2, [sp, #0]
 802614a:	3b01      	subs	r3, #1
 802614c:	464a      	mov	r2, r9
 802614e:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8026150:	4620      	mov	r0, r4
 8026152:	f7fe f9e5 	bl	8024520 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8026156:	e7d2      	b.n	80260fe <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8026158:	3507      	adds	r5, #7
 802615a:	9500      	str	r5, [sp, #0]
 802615c:	f1a9 0307 	sub.w	r3, r9, #7
 8026160:	4a0f      	ldr	r2, [pc, #60]	@ (80261a0 <mg_http_creds+0x120>)
 8026162:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8026164:	4620      	mov	r0, r4
 8026166:	f7fe f9db 	bl	8024520 <mg_snprintf>
 802616a:	e7c8      	b.n	80260fe <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 802616c:	9a02      	ldr	r2, [sp, #8]
 802616e:	9200      	str	r2, [sp, #0]
 8026170:	4a0b      	ldr	r2, [pc, #44]	@ (80261a0 <mg_http_creds+0x120>)
 8026172:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8026174:	4620      	mov	r0, r4
 8026176:	f7fe f9d3 	bl	8024520 <mg_snprintf>
 802617a:	e7c0      	b.n	80260fe <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 802617c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 802617e:	4622      	mov	r2, r4
 8026180:	4906      	ldr	r1, [pc, #24]	@ (802619c <mg_http_creds+0x11c>)
 8026182:	f106 0010 	add.w	r0, r6, #16
 8026186:	f7ff ff40 	bl	802600a <mg_http_get_var>
}
 802618a:	e7b8      	b.n	80260fe <mg_http_creds+0x7e>
 802618c:	0803bc10 	.word	0x0803bc10
 8026190:	0803bc20 	.word	0x0803bc20
 8026194:	0803bc28 	.word	0x0803bc28
 8026198:	0803bc30 	.word	0x0803bc30
 802619c:	08037f4c 	.word	0x08037f4c
 80261a0:	0803ba40 	.word	0x0803ba40

080261a4 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 80261a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80261a8:	b0ae      	sub	sp, #184	@ 0xb8
 80261aa:	4604      	mov	r4, r0
 80261ac:	460d      	mov	r5, r1
 80261ae:	4616      	mov	r6, r2
 80261b0:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80261b2:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80261b6:	f1b8 0f00 	cmp.w	r8, #0
 80261ba:	d04f      	beq.n	802625c <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 80261bc:	942a      	str	r4, [sp, #168]	@ 0xa8
 80261be:	952b      	str	r5, [sp, #172]	@ 0xac
 80261c0:	962c      	str	r6, [sp, #176]	@ 0xb0
 80261c2:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 80261c4:	2300      	movs	r3, #0
 80261c6:	9300      	str	r3, [sp, #0]
 80261c8:	2380      	movs	r3, #128	@ 0x80
 80261ca:	aa07      	add	r2, sp, #28
 80261cc:	68e9      	ldr	r1, [r5, #12]
 80261ce:	68a8      	ldr	r0, [r5, #8]
 80261d0:	f7ff febc 	bl	8025f4c <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80261d4:	1e02      	subs	r2, r0, #0
 80261d6:	dd44      	ble.n	8026262 <listdir+0xbe>
 80261d8:	a907      	add	r1, sp, #28
 80261da:	a805      	add	r0, sp, #20
 80261dc:	f7ff f834 	bl	8025248 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80261e0:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 80261e2:	2a00      	cmp	r2, #0
 80261e4:	d044      	beq.n	8026270 <listdir+0xcc>
 80261e6:	4923      	ldr	r1, [pc, #140]	@ (8026274 <listdir+0xd0>)
 80261e8:	4620      	mov	r0, r4
 80261ea:	f7fe fe71 	bl	8024ed0 <mg_printf>
  off = c->send.len;  // Start of body
 80261ee:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80261f0:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 80261f2:	9b05      	ldr	r3, [sp, #20]
 80261f4:	9303      	str	r3, [sp, #12]
 80261f6:	9202      	str	r2, [sp, #8]
 80261f8:	491f      	ldr	r1, [pc, #124]	@ (8026278 <listdir+0xd4>)
 80261fa:	9101      	str	r1, [sp, #4]
 80261fc:	491f      	ldr	r1, [pc, #124]	@ (802627c <listdir+0xd8>)
 80261fe:	9100      	str	r1, [sp, #0]
 8026200:	491f      	ldr	r1, [pc, #124]	@ (8026280 <listdir+0xdc>)
 8026202:	4620      	mov	r0, r4
 8026204:	f7fe fe64 	bl	8024ed0 <mg_printf>
  mg_printf(c, "%s",
 8026208:	4a1e      	ldr	r2, [pc, #120]	@ (8026284 <listdir+0xe0>)
 802620a:	491f      	ldr	r1, [pc, #124]	@ (8026288 <listdir+0xe4>)
 802620c:	4620      	mov	r0, r4
 802620e:	f7fe fe5f 	bl	8024ed0 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 8026212:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026216:	aa2a      	add	r2, sp, #168	@ 0xa8
 8026218:	491c      	ldr	r1, [pc, #112]	@ (802628c <listdir+0xe8>)
 802621a:	4638      	mov	r0, r7
 802621c:	4798      	blx	r3
  mg_printf(c,
 802621e:	4a1c      	ldr	r2, [pc, #112]	@ (8026290 <listdir+0xec>)
 8026220:	491c      	ldr	r1, [pc, #112]	@ (8026294 <listdir+0xf0>)
 8026222:	4620      	mov	r0, r4
 8026224:	f7fe fe54 	bl	8024ed0 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8026228:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802622a:	1b5b      	subs	r3, r3, r5
 802622c:	4a1a      	ldr	r2, [pc, #104]	@ (8026298 <listdir+0xf4>)
 802622e:	210a      	movs	r1, #10
 8026230:	a827      	add	r0, sp, #156	@ 0x9c
 8026232:	f7fe f975 	bl	8024520 <mg_snprintf>
 8026236:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8026238:	280a      	cmp	r0, #10
 802623a:	d900      	bls.n	802623e <listdir+0x9a>
 802623c:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 802623e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8026240:	3d0c      	subs	r5, #12
 8026242:	a927      	add	r1, sp, #156	@ 0x9c
 8026244:	4428      	add	r0, r5
 8026246:	f009 f8c9 	bl	802f3dc <memcpy>
  c->is_resp = 0;                          // Mark response end
 802624a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802624e:	f36f 13c7 	bfc	r3, #7, #1
 8026252:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8026256:	b02e      	add	sp, #184	@ 0xb8
 8026258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802625c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80262a0 <listdir+0xfc>
 8026260:	e7ac      	b.n	80261bc <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8026262:	ab05      	add	r3, sp, #20
 8026264:	3508      	adds	r5, #8
 8026266:	e895 0003 	ldmia.w	r5, {r0, r1}
 802626a:	e883 0003 	stmia.w	r3, {r0, r1}
 802626e:	e7b7      	b.n	80261e0 <listdir+0x3c>
  mg_printf(c,
 8026270:	4a0a      	ldr	r2, [pc, #40]	@ (802629c <listdir+0xf8>)
 8026272:	e7b8      	b.n	80261e6 <listdir+0x42>
 8026274:	0803bc38 	.word	0x0803bc38
 8026278:	0803be18 	.word	0x0803be18
 802627c:	0803bfdc 	.word	0x0803bfdc
 8026280:	0803bc90 	.word	0x0803bc90
 8026284:	0803c1a4 	.word	0x0803c1a4
 8026288:	0803c608 	.word	0x0803c608
 802628c:	08027a4d 	.word	0x08027a4d
 8026290:	08039b04 	.word	0x08039b04
 8026294:	0803c1f4 	.word	0x0803c1f4
 8026298:	08037720 	.word	0x08037720
 802629c:	080381c0 	.word	0x080381c0
 80262a0:	20000130 	.word	0x20000130

080262a4 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80262a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80262a8:	b087      	sub	sp, #28
 80262aa:	461f      	mov	r7, r3
  int i = 0, n = 0;
 80262ac:	2300      	movs	r3, #0
 80262ae:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 80262b0:	2902      	cmp	r1, #2
 80262b2:	dd42      	ble.n	802633a <skip_chunk+0x96>
 80262b4:	4606      	mov	r6, r0
 80262b6:	460d      	mov	r5, r1
 80262b8:	4690      	mov	r8, r2
  int i = 0, n = 0;
 80262ba:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 80262bc:	42ac      	cmp	r4, r5
 80262be:	da05      	bge.n	80262cc <skip_chunk+0x28>
 80262c0:	5d30      	ldrb	r0, [r6, r4]
 80262c2:	f7fb f92a 	bl	802151a <is_hex_digit>
 80262c6:	b108      	cbz	r0, 80262cc <skip_chunk+0x28>
 80262c8:	3401      	adds	r4, #1
 80262ca:	e7f7      	b.n	80262bc <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 80262cc:	2c00      	cmp	r4, #0
 80262ce:	d036      	beq.n	802633e <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80262d0:	2c08      	cmp	r4, #8
 80262d2:	dc37      	bgt.n	8026344 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80262d4:	42ac      	cmp	r4, r5
 80262d6:	da38      	bge.n	802634a <skip_chunk+0xa6>
 80262d8:	4622      	mov	r2, r4
 80262da:	5d33      	ldrb	r3, [r6, r4]
 80262dc:	2b0d      	cmp	r3, #13
 80262de:	d137      	bne.n	8026350 <skip_chunk+0xac>
 80262e0:	1933      	adds	r3, r6, r4
 80262e2:	785b      	ldrb	r3, [r3, #1]
 80262e4:	2b0a      	cmp	r3, #10
 80262e6:	d136      	bne.n	8026356 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80262e8:	f10d 0910 	add.w	r9, sp, #16
 80262ec:	4631      	mov	r1, r6
 80262ee:	4648      	mov	r0, r9
 80262f0:	f7fe ffaa 	bl	8025248 <mg_str_n>
 80262f4:	2304      	movs	r3, #4
 80262f6:	9300      	str	r3, [sp, #0]
 80262f8:	ab03      	add	r3, sp, #12
 80262fa:	2210      	movs	r2, #16
 80262fc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026300:	f7ff fcdc 	bl	8025cbc <mg_str_to_num>
 8026304:	b350      	cbz	r0, 802635c <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8026306:	9b03      	ldr	r3, [sp, #12]
 8026308:	2b00      	cmp	r3, #0
 802630a:	db2a      	blt.n	8026362 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 802630c:	1b2d      	subs	r5, r5, r4
 802630e:	3d03      	subs	r5, #3
 8026310:	42ab      	cmp	r3, r5
 8026312:	da29      	bge.n	8026368 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8026314:	4423      	add	r3, r4
 8026316:	18f2      	adds	r2, r6, r3
 8026318:	7892      	ldrb	r2, [r2, #2]
 802631a:	2a0d      	cmp	r2, #13
 802631c:	d126      	bne.n	802636c <skip_chunk+0xc8>
 802631e:	441e      	add	r6, r3
 8026320:	78f3      	ldrb	r3, [r6, #3]
 8026322:	2b0a      	cmp	r3, #10
 8026324:	d125      	bne.n	8026372 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8026326:	3402      	adds	r4, #2
 8026328:	f8c8 4000 	str.w	r4, [r8]
 802632c:	9b03      	ldr	r3, [sp, #12]
 802632e:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8026330:	441c      	add	r4, r3
 8026332:	1ca0      	adds	r0, r4, #2
}
 8026334:	b007      	add	sp, #28
 8026336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 802633a:	2000      	movs	r0, #0
 802633c:	e7fa      	b.n	8026334 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 802633e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026342:	e7f7      	b.n	8026334 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8026344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026348:	e7f4      	b.n	8026334 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 802634a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802634e:	e7f1      	b.n	8026334 <skip_chunk+0x90>
 8026350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026354:	e7ee      	b.n	8026334 <skip_chunk+0x90>
 8026356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802635a:	e7eb      	b.n	8026334 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 802635c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026360:	e7e8      	b.n	8026334 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8026362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026366:	e7e5      	b.n	8026334 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8026368:	2000      	movs	r0, #0
 802636a:	e7e3      	b.n	8026334 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 802636c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026370:	e7e0      	b.n	8026334 <skip_chunk+0x90>
 8026372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026376:	e7dd      	b.n	8026334 <skip_chunk+0x90>

08026378 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8026378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802637c:	b086      	sub	sp, #24
 802637e:	ac02      	add	r4, sp, #8
 8026380:	e884 0003 	stmia.w	r4, {r0, r1}
 8026384:	4617      	mov	r7, r2
 8026386:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8026388:	2400      	movs	r4, #0
 802638a:	4621      	mov	r1, r4
 802638c:	e01c      	b.n	80263c8 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802638e:	f101 0805 	add.w	r8, r1, #5
 8026392:	45a8      	cmp	r8, r5
 8026394:	d221      	bcs.n	80263da <mg_json_unescape+0x62>
 8026396:	185a      	adds	r2, r3, r1
 8026398:	7852      	ldrb	r2, [r2, #1]
 802639a:	2a75      	cmp	r2, #117	@ 0x75
 802639c:	d11d      	bne.n	80263da <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802639e:	3102      	adds	r1, #2
 80263a0:	ad04      	add	r5, sp, #16
 80263a2:	2204      	movs	r2, #4
 80263a4:	4419      	add	r1, r3
 80263a6:	4628      	mov	r0, r5
 80263a8:	f7fe ff4e 	bl	8025248 <mg_str_n>
 80263ac:	2301      	movs	r3, #1
 80263ae:	9300      	str	r3, [sp, #0]
 80263b0:	193b      	adds	r3, r7, r4
 80263b2:	2210      	movs	r2, #16
 80263b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80263b8:	f7ff fc80 	bl	8025cbc <mg_str_to_num>
 80263bc:	b308      	cbz	r0, 8026402 <mg_json_unescape+0x8a>
      i += 5;
 80263be:	4641      	mov	r1, r8
 80263c0:	e000      	b.n	80263c4 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 80263c2:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80263c4:	3101      	adds	r1, #1
 80263c6:	3401      	adds	r4, #1
 80263c8:	9d03      	ldr	r5, [sp, #12]
 80263ca:	428d      	cmp	r5, r1
 80263cc:	d914      	bls.n	80263f8 <mg_json_unescape+0x80>
 80263ce:	42b4      	cmp	r4, r6
 80263d0:	d212      	bcs.n	80263f8 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80263d2:	9b02      	ldr	r3, [sp, #8]
 80263d4:	5c58      	ldrb	r0, [r3, r1]
 80263d6:	285c      	cmp	r0, #92	@ 0x5c
 80263d8:	d0d9      	beq.n	802638e <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80263da:	285c      	cmp	r0, #92	@ 0x5c
 80263dc:	d1f1      	bne.n	80263c2 <mg_json_unescape+0x4a>
 80263de:	f101 0801 	add.w	r8, r1, #1
 80263e2:	45a8      	cmp	r8, r5
 80263e4:	d2ed      	bcs.n	80263c2 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 80263e6:	2100      	movs	r1, #0
 80263e8:	f813 0008 	ldrb.w	r0, [r3, r8]
 80263ec:	f7fb f8ba 	bl	8021564 <json_esc>
      if (c == 0) return false;
 80263f0:	b150      	cbz	r0, 8026408 <mg_json_unescape+0x90>
      to[j] = c;
 80263f2:	5538      	strb	r0, [r7, r4]
      i++;
 80263f4:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80263f6:	e7e5      	b.n	80263c4 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 80263f8:	42b4      	cmp	r4, r6
 80263fa:	d207      	bcs.n	802640c <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 80263fc:	2300      	movs	r3, #0
 80263fe:	553b      	strb	r3, [r7, r4]
  return true;
 8026400:	2001      	movs	r0, #1
}
 8026402:	b006      	add	sp, #24
 8026404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8026408:	2000      	movs	r0, #0
 802640a:	e7fa      	b.n	8026402 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 802640c:	2000      	movs	r0, #0
 802640e:	e7f8      	b.n	8026402 <mg_json_unescape+0x8a>

08026410 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8026410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026412:	b087      	sub	sp, #28
 8026414:	46ec      	mov	ip, sp
 8026416:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 802641a:	2300      	movs	r3, #0
 802641c:	9303      	str	r3, [sp, #12]
 802641e:	ab03      	add	r3, sp, #12
 8026420:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8026424:	f7fd fbd6 	bl	8023bd4 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8026428:	1e04      	subs	r4, r0, #0
 802642a:	db25      	blt.n	8026478 <mg_json_get_str+0x68>
 802642c:	9903      	ldr	r1, [sp, #12]
 802642e:	2901      	cmp	r1, #1
 8026430:	dd24      	ble.n	802647c <mg_json_get_str+0x6c>
 8026432:	9e00      	ldr	r6, [sp, #0]
 8026434:	5d33      	ldrb	r3, [r6, r4]
 8026436:	2b22      	cmp	r3, #34	@ 0x22
 8026438:	d003      	beq.n	8026442 <mg_json_get_str+0x32>
  char *result = NULL;
 802643a:	2500      	movs	r5, #0
}
 802643c:	4628      	mov	r0, r5
 802643e:	b007      	add	sp, #28
 8026440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8026442:	2001      	movs	r0, #1
 8026444:	f7fd f93c 	bl	80236c0 <mg_calloc>
 8026448:	4605      	mov	r5, r0
 802644a:	2800      	cmp	r0, #0
 802644c:	d0f6      	beq.n	802643c <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 802644e:	1c61      	adds	r1, r4, #1
 8026450:	9f03      	ldr	r7, [sp, #12]
 8026452:	ac04      	add	r4, sp, #16
 8026454:	1eba      	subs	r2, r7, #2
 8026456:	4431      	add	r1, r6
 8026458:	4620      	mov	r0, r4
 802645a:	f7fe fef5 	bl	8025248 <mg_str_n>
 802645e:	463b      	mov	r3, r7
 8026460:	462a      	mov	r2, r5
 8026462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026466:	f7ff ff87 	bl	8026378 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802646a:	2800      	cmp	r0, #0
 802646c:	d1e6      	bne.n	802643c <mg_json_get_str+0x2c>
      free(result);
 802646e:	4628      	mov	r0, r5
 8026470:	f7f5 fa84 	bl	801b97c <vPortFree>
      result = NULL;
 8026474:	2500      	movs	r5, #0
 8026476:	e7e1      	b.n	802643c <mg_json_get_str+0x2c>
  char *result = NULL;
 8026478:	2500      	movs	r5, #0
 802647a:	e7df      	b.n	802643c <mg_json_get_str+0x2c>
 802647c:	2500      	movs	r5, #0
 802647e:	e7dd      	b.n	802643c <mg_json_get_str+0x2c>

08026480 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8026480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026484:	b08a      	sub	sp, #40	@ 0x28
 8026486:	ab02      	add	r3, sp, #8
 8026488:	e883 0003 	stmia.w	r3, {r0, r1}
 802648c:	4617      	mov	r7, r2
  addr->scope_id = 0;
 802648e:	2300      	movs	r3, #0
 8026490:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8026492:	2902      	cmp	r1, #2
 8026494:	d904      	bls.n	80264a0 <mg_aton6+0x20>
 8026496:	460b      	mov	r3, r1
 8026498:	4602      	mov	r2, r0
 802649a:	7801      	ldrb	r1, [r0, #0]
 802649c:	295b      	cmp	r1, #91	@ 0x5b
 802649e:	d00f      	beq.n	80264c0 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 80264a0:	463a      	mov	r2, r7
 80264a2:	ab02      	add	r3, sp, #8
 80264a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80264a8:	f7fe ff40 	bl	802532c <mg_v4mapped>
 80264ac:	4680      	mov	r8, r0
 80264ae:	2800      	cmp	r0, #0
 80264b0:	f040 8087 	bne.w	80265c2 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 80264b4:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 80264b8:	2600      	movs	r6, #0
 80264ba:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 80264bc:	4634      	mov	r4, r6
 80264be:	e020      	b.n	8026502 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80264c0:	3201      	adds	r2, #1
 80264c2:	9202      	str	r2, [sp, #8]
 80264c4:	3b02      	subs	r3, #2
 80264c6:	9303      	str	r3, [sp, #12]
 80264c8:	e7ea      	b.n	80264a0 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 80264ca:	2300      	movs	r3, #0
 80264cc:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 80264ce:	1ceb      	adds	r3, r5, #3
 80264d0:	42a3      	cmp	r3, r4
 80264d2:	d376      	bcc.n	80265c2 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 80264d4:	1b62      	subs	r2, r4, r5
 80264d6:	f10d 0a18 	add.w	sl, sp, #24
 80264da:	3201      	adds	r2, #1
 80264dc:	4429      	add	r1, r5
 80264de:	4650      	mov	r0, sl
 80264e0:	f7fe feb2 	bl	8025248 <mg_str_n>
 80264e4:	2304      	movs	r3, #4
 80264e6:	9300      	str	r3, [sp, #0]
 80264e8:	ab05      	add	r3, sp, #20
 80264ea:	2210      	movs	r2, #16
 80264ec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80264f0:	f7ff fbe4 	bl	8025cbc <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80264f4:	9b05      	ldr	r3, [sp, #20]
 80264f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80264fa:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80264fc:	1c72      	adds	r2, r6, #1
 80264fe:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8026500:	3401      	adds	r4, #1
 8026502:	9803      	ldr	r0, [sp, #12]
 8026504:	42a0      	cmp	r0, r4
 8026506:	d941      	bls.n	802658c <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8026508:	9902      	ldr	r1, [sp, #8]
 802650a:	5d0a      	ldrb	r2, [r1, r4]
 802650c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8026510:	b2db      	uxtb	r3, r3
 8026512:	2b09      	cmp	r3, #9
 8026514:	d9d9      	bls.n	80264ca <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8026516:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 802651a:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802651c:	2b05      	cmp	r3, #5
 802651e:	d9d4      	bls.n	80264ca <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8026520:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8026524:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8026526:	2b05      	cmp	r3, #5
 8026528:	d9cf      	bls.n	80264ca <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 802652a:	2a3a      	cmp	r2, #58	@ 0x3a
 802652c:	d119      	bne.n	8026562 <mg_aton6+0xe2>
      j = i + 1;
 802652e:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8026530:	b12c      	cbz	r4, 802653e <mg_aton6+0xbe>
 8026532:	190b      	adds	r3, r1, r4
 8026534:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026538:	2b3a      	cmp	r3, #58	@ 0x3a
 802653a:	d007      	beq.n	802654c <mg_aton6+0xcc>
        n += 2;
 802653c:	3602      	adds	r6, #2
      if (n > 14) return false;
 802653e:	2e0e      	cmp	r6, #14
 8026540:	d83f      	bhi.n	80265c2 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8026542:	1c73      	adds	r3, r6, #1
 8026544:	2200      	movs	r2, #0
 8026546:	54fa      	strb	r2, [r7, r3]
 8026548:	55ba      	strb	r2, [r7, r6]
 802654a:	e7d9      	b.n	8026500 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802654c:	2c01      	cmp	r4, #1
 802654e:	d906      	bls.n	802655e <mg_aton6+0xde>
 8026550:	4421      	add	r1, r4
 8026552:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8026556:	2b3a      	cmp	r3, #58	@ 0x3a
 8026558:	d033      	beq.n	80265c2 <mg_aton6+0x142>
        dc = n;  // Double colon
 802655a:	46b1      	mov	r9, r6
 802655c:	e7ef      	b.n	802653e <mg_aton6+0xbe>
 802655e:	46b1      	mov	r9, r6
 8026560:	e7ed      	b.n	802653e <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8026562:	2a25      	cmp	r2, #37	@ 0x25
 8026564:	d12d      	bne.n	80265c2 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8026566:	1c63      	adds	r3, r4, #1
 8026568:	1b02      	subs	r2, r0, r4
 802656a:	ac08      	add	r4, sp, #32
 802656c:	3a01      	subs	r2, #1
 802656e:	4419      	add	r1, r3
 8026570:	4620      	mov	r0, r4
 8026572:	f7fe fe69 	bl	8025248 <mg_str_n>
 8026576:	2301      	movs	r3, #1
 8026578:	9300      	str	r3, [sp, #0]
 802657a:	f107 0312 	add.w	r3, r7, #18
 802657e:	220a      	movs	r2, #10
 8026580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026584:	f7ff fb9a 	bl	8025cbc <mg_str_to_num>
 8026588:	4680      	mov	r8, r0
 802658a:	e01a      	b.n	80265c2 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 802658c:	2e0d      	cmp	r6, #13
 802658e:	d814      	bhi.n	80265ba <mg_aton6+0x13a>
 8026590:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8026594:	d015      	beq.n	80265c2 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8026596:	eba9 0006 	sub.w	r0, r9, r6
 802659a:	300e      	adds	r0, #14
 802659c:	eb07 0409 	add.w	r4, r7, r9
 80265a0:	eba6 0209 	sub.w	r2, r6, r9
 80265a4:	3202      	adds	r2, #2
 80265a6:	4621      	mov	r1, r4
 80265a8:	4438      	add	r0, r7
 80265aa:	f007 f997 	bl	802d8dc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80265ae:	f1c6 020e 	rsb	r2, r6, #14
 80265b2:	2100      	movs	r1, #0
 80265b4:	4620      	mov	r0, r4
 80265b6:	f007 f9ab 	bl	802d910 <memset>
  addr->is_ip6 = true;
 80265ba:	f04f 0801 	mov.w	r8, #1
 80265be:	f887 8013 	strb.w	r8, [r7, #19]
}
 80265c2:	4640      	mov	r0, r8
 80265c4:	b00a      	add	sp, #40	@ 0x28
 80265c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080265ca <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 80265ca:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80265cc:	2400      	movs	r4, #0
 80265ce:	600c      	str	r4, [r1, #0]
 80265d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80265d4:	2200      	movs	r2, #0
 80265d6:	2300      	movs	r3, #0
 80265d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80265dc:	9b01      	ldr	r3, [sp, #4]
 80265de:	618b      	str	r3, [r1, #24]
 80265e0:	9b02      	ldr	r3, [sp, #8]
 80265e2:	61cb      	str	r3, [r1, #28]
 80265e4:	9b03      	ldr	r3, [sp, #12]
 80265e6:	620b      	str	r3, [r1, #32]
 80265e8:	6803      	ldr	r3, [r0, #0]
 80265ea:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 80265ec:	6001      	str	r1, [r0, #0]
}
 80265ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80265f2:	4770      	bx	lr

080265f4 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 80265f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265f6:	b085      	sub	sp, #20
 80265f8:	4604      	mov	r4, r0
 80265fa:	4616      	mov	r6, r2
 80265fc:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80265fe:	2128      	movs	r1, #40	@ 0x28
 8026600:	2001      	movs	r0, #1
 8026602:	f7fd f85d 	bl	80236c0 <mg_calloc>
  if (t != NULL) {
 8026606:	4607      	mov	r7, r0
 8026608:	b180      	cbz	r0, 802662c <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 802660a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802660c:	9302      	str	r3, [sp, #8]
 802660e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026610:	9301      	str	r3, [sp, #4]
 8026612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026614:	9300      	str	r3, [sp, #0]
 8026616:	4632      	mov	r2, r6
 8026618:	462b      	mov	r3, r5
 802661a:	4601      	mov	r1, r0
 802661c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8026620:	f7ff ffd3 	bl	80265ca <mg_timer_init>
    t->id = mgr->timerid++;
 8026624:	6a23      	ldr	r3, [r4, #32]
 8026626:	1c5a      	adds	r2, r3, #1
 8026628:	6222      	str	r2, [r4, #32]
 802662a:	603b      	str	r3, [r7, #0]
}
 802662c:	4638      	mov	r0, r7
 802662e:	b005      	add	sp, #20
 8026630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026632:	0000      	movs	r0, r0
 8026634:	0000      	movs	r0, r0
	...

08026638 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8026638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802663c:	4698      	mov	r8, r3
 802663e:	9906      	ldr	r1, [sp, #24]
 8026640:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8026642:	188e      	adds	r6, r1, r2
 8026644:	eb43 0504 	adc.w	r5, r3, r4
 8026648:	6847      	ldr	r7, [r0, #4]
 802664a:	6803      	ldr	r3, [r0, #0]
 802664c:	429e      	cmp	r6, r3
 802664e:	eb75 0707 	sbcs.w	r7, r5, r7
 8026652:	d203      	bcs.n	802665c <mg_timer_expired+0x24>
 8026654:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8026698 <mg_timer_expired+0x60>
 8026658:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 802665c:	6847      	ldr	r7, [r0, #4]
 802665e:	6803      	ldr	r3, [r0, #0]
 8026660:	431f      	orrs	r7, r3
 8026662:	d101      	bne.n	8026668 <mg_timer_expired+0x30>
 8026664:	6006      	str	r6, [r0, #0]
 8026666:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8026668:	6807      	ldr	r7, [r0, #0]
 802666a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802666e:	42b9      	cmp	r1, r7
 8026670:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8026674:	d30e      	bcc.n	8026694 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8026676:	1bc9      	subs	r1, r1, r7
 8026678:	eb64 040c 	sbc.w	r4, r4, ip
 802667c:	428a      	cmp	r2, r1
 802667e:	eb78 0404 	sbcs.w	r4, r8, r4
 8026682:	d302      	bcc.n	802668a <mg_timer_expired+0x52>
 8026684:	18be      	adds	r6, r7, r2
 8026686:	eb4c 0508 	adc.w	r5, ip, r8
 802668a:	6006      	str	r6, [r0, #0]
 802668c:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 802668e:	2001      	movs	r0, #1
}
 8026690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8026694:	2000      	movs	r0, #0
 8026696:	e7fb      	b.n	8026690 <mg_timer_expired+0x58>
	...

080266a0 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80266a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266a4:	b082      	sub	sp, #8
 80266a6:	4617      	mov	r7, r2
 80266a8:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 80266aa:	6804      	ldr	r4, [r0, #0]
 80266ac:	e019      	b.n	80266e2 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80266ae:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 80266b0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80266b4:	9700      	str	r7, [sp, #0]
 80266b6:	9601      	str	r6, [sp, #4]
 80266b8:	f104 0010 	add.w	r0, r4, #16
 80266bc:	f7ff ffbc 	bl	8026638 <mg_timer_expired>
    tmp = t->next;
 80266c0:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 80266c4:	b905      	cbnz	r5, 80266c8 <mg_timer_poll+0x28>
 80266c6:	b158      	cbz	r0, 80266e0 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80266c8:	69a3      	ldr	r3, [r4, #24]
 80266ca:	f003 0305 	and.w	r3, r3, #5
 80266ce:	2b04      	cmp	r3, #4
 80266d0:	d002      	beq.n	80266d8 <mg_timer_poll+0x38>
      t->fn(t->arg);
 80266d2:	69e3      	ldr	r3, [r4, #28]
 80266d4:	6a20      	ldr	r0, [r4, #32]
 80266d6:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 80266d8:	69a1      	ldr	r1, [r4, #24]
 80266da:	f041 0104 	orr.w	r1, r1, #4
 80266de:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80266e0:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 80266e2:	b164      	cbz	r4, 80266fe <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80266e4:	6923      	ldr	r3, [r4, #16]
 80266e6:	6962      	ldr	r2, [r4, #20]
 80266e8:	4313      	orrs	r3, r2
 80266ea:	d1e0      	bne.n	80266ae <mg_timer_poll+0xe>
 80266ec:	69a3      	ldr	r3, [r4, #24]
 80266ee:	f003 0306 	and.w	r3, r3, #6
 80266f2:	2b02      	cmp	r3, #2
 80266f4:	d001      	beq.n	80266fa <mg_timer_poll+0x5a>
 80266f6:	2500      	movs	r5, #0
 80266f8:	e7da      	b.n	80266b0 <mg_timer_poll+0x10>
 80266fa:	2501      	movs	r5, #1
 80266fc:	e7d8      	b.n	80266b0 <mg_timer_poll+0x10>
}
 80266fe:	b002      	add	sp, #8
 8026700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026704 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8026704:	b118      	cbz	r0, 802670e <mg_tls_recv+0xa>
 8026706:	b121      	cbz	r1, 8026712 <mg_tls_recv+0xe>
 8026708:	b92a      	cbnz	r2, 8026716 <mg_tls_recv+0x12>
 802670a:	2000      	movs	r0, #0
 802670c:	4770      	bx	lr
 802670e:	2000      	movs	r0, #0
 8026710:	4770      	bx	lr
 8026712:	2000      	movs	r0, #0
 8026714:	4770      	bx	lr
 8026716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802671a:	4770      	bx	lr

0802671c <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802671c:	b118      	cbz	r0, 8026726 <mg_tls_send+0xa>
 802671e:	b121      	cbz	r1, 802672a <mg_tls_send+0xe>
 8026720:	b92a      	cbnz	r2, 802672e <mg_tls_send+0x12>
 8026722:	2000      	movs	r0, #0
 8026724:	4770      	bx	lr
 8026726:	2000      	movs	r0, #0
 8026728:	4770      	bx	lr
 802672a:	2000      	movs	r0, #0
 802672c:	4770      	bx	lr
 802672e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8026732:	4770      	bx	lr

08026734 <mg_tls_pending>:
}
 8026734:	2000      	movs	r0, #0
 8026736:	4770      	bx	lr

08026738 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8026738:	b510      	push	{r4, lr}
 802673a:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802673c:	2204      	movs	r2, #4
 802673e:	4918      	ldr	r1, [pc, #96]	@ (80267a0 <mg_url_is_ssl+0x68>)
 8026740:	f007 f91b 	bl	802d97a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026744:	b1f8      	cbz	r0, 8026786 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8026746:	2206      	movs	r2, #6
 8026748:	4916      	ldr	r1, [pc, #88]	@ (80267a4 <mg_url_is_ssl+0x6c>)
 802674a:	4620      	mov	r0, r4
 802674c:	f007 f915 	bl	802d97a <strncmp>
 8026750:	b1d8      	cbz	r0, 802678a <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8026752:	2206      	movs	r2, #6
 8026754:	4914      	ldr	r1, [pc, #80]	@ (80267a8 <mg_url_is_ssl+0x70>)
 8026756:	4620      	mov	r0, r4
 8026758:	f007 f90f 	bl	802d97a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802675c:	b1b8      	cbz	r0, 802678e <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802675e:	2204      	movs	r2, #4
 8026760:	4912      	ldr	r1, [pc, #72]	@ (80267ac <mg_url_is_ssl+0x74>)
 8026762:	4620      	mov	r0, r4
 8026764:	f007 f909 	bl	802d97a <strncmp>
 8026768:	b198      	cbz	r0, 8026792 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802676a:	2204      	movs	r2, #4
 802676c:	4910      	ldr	r1, [pc, #64]	@ (80267b0 <mg_url_is_ssl+0x78>)
 802676e:	4620      	mov	r0, r4
 8026770:	f007 f903 	bl	802d97a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8026774:	b178      	cbz	r0, 8026796 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8026776:	2205      	movs	r2, #5
 8026778:	490e      	ldr	r1, [pc, #56]	@ (80267b4 <mg_url_is_ssl+0x7c>)
 802677a:	4620      	mov	r0, r4
 802677c:	f007 f8fd 	bl	802d97a <strncmp>
 8026780:	b958      	cbnz	r0, 802679a <mg_url_is_ssl+0x62>
 8026782:	2001      	movs	r0, #1
 8026784:	e000      	b.n	8026788 <mg_url_is_ssl+0x50>
 8026786:	2001      	movs	r0, #1
}
 8026788:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802678a:	2001      	movs	r0, #1
 802678c:	e7fc      	b.n	8026788 <mg_url_is_ssl+0x50>
 802678e:	2001      	movs	r0, #1
 8026790:	e7fa      	b.n	8026788 <mg_url_is_ssl+0x50>
 8026792:	2001      	movs	r0, #1
 8026794:	e7f8      	b.n	8026788 <mg_url_is_ssl+0x50>
 8026796:	2001      	movs	r0, #1
 8026798:	e7f6      	b.n	8026788 <mg_url_is_ssl+0x50>
 802679a:	2000      	movs	r0, #0
 802679c:	e7f4      	b.n	8026788 <mg_url_is_ssl+0x50>
 802679e:	bf00      	nop
 80267a0:	0803c268 	.word	0x0803c268
 80267a4:	0803c270 	.word	0x0803c270
 80267a8:	0803c278 	.word	0x0803c278
 80267ac:	0803c280 	.word	0x0803c280
 80267b0:	0803c288 	.word	0x0803c288
 80267b4:	0803c290 	.word	0x0803c290

080267b8 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 80267b8:	b530      	push	{r4, r5, lr}
 80267ba:	b089      	sub	sp, #36	@ 0x24
 80267bc:	4604      	mov	r4, r0
 80267be:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 80267c0:	a801      	add	r0, sp, #4
 80267c2:	f7fb feeb 	bl	802259c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80267c6:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 80267c8:	b152      	cbz	r2, 80267e0 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 80267ca:	9b04      	ldr	r3, [sp, #16]
 80267cc:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 80267ce:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 80267d0:	9904      	ldr	r1, [sp, #16]
 80267d2:	4429      	add	r1, r5
 80267d4:	4620      	mov	r0, r4
 80267d6:	f7fe fd37 	bl	8025248 <mg_str_n>
}
 80267da:	4620      	mov	r0, r4
 80267dc:	b009      	add	sp, #36	@ 0x24
 80267de:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 80267e0:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 80267e2:	b112      	cbz	r2, 80267ea <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 80267e4:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 80267e6:	1ad2      	subs	r2, r2, r3
 80267e8:	e7f2      	b.n	80267d0 <mg_url_host+0x18>
 80267ea:	9a07      	ldr	r2, [sp, #28]
 80267ec:	9b04      	ldr	r3, [sp, #16]
 80267ee:	1ad2      	subs	r2, r2, r3
 80267f0:	e7ee      	b.n	80267d0 <mg_url_host+0x18>
	...

080267f4 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 80267f4:	b530      	push	{r4, r5, lr}
 80267f6:	b089      	sub	sp, #36	@ 0x24
 80267f8:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 80267fa:	4601      	mov	r1, r0
 80267fc:	a801      	add	r0, sp, #4
 80267fe:	f7fb fecd 	bl	802259c <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8026802:	2205      	movs	r2, #5
 8026804:	491d      	ldr	r1, [pc, #116]	@ (802687c <mg_url_port+0x88>)
 8026806:	4620      	mov	r0, r4
 8026808:	f007 f8b7 	bl	802d97a <strncmp>
 802680c:	b138      	cbz	r0, 802681e <mg_url_port+0x2a>
 802680e:	2203      	movs	r2, #3
 8026810:	491b      	ldr	r1, [pc, #108]	@ (8026880 <mg_url_port+0x8c>)
 8026812:	4620      	mov	r0, r4
 8026814:	f007 f8b1 	bl	802d97a <strncmp>
 8026818:	b188      	cbz	r0, 802683e <mg_url_port+0x4a>
  unsigned short port = 0;
 802681a:	2500      	movs	r5, #0
 802681c:	e000      	b.n	8026820 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802681e:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8026820:	2204      	movs	r2, #4
 8026822:	4918      	ldr	r1, [pc, #96]	@ (8026884 <mg_url_port+0x90>)
 8026824:	4620      	mov	r0, r4
 8026826:	f007 f8a8 	bl	802d97a <strncmp>
 802682a:	b150      	cbz	r0, 8026842 <mg_url_port+0x4e>
 802682c:	2206      	movs	r2, #6
 802682e:	4916      	ldr	r1, [pc, #88]	@ (8026888 <mg_url_port+0x94>)
 8026830:	4620      	mov	r0, r4
 8026832:	f007 f8a2 	bl	802d97a <strncmp>
 8026836:	b930      	cbnz	r0, 8026846 <mg_url_port+0x52>
    port = 443;
 8026838:	f240 15bb 	movw	r5, #443	@ 0x1bb
 802683c:	e003      	b.n	8026846 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802683e:	2550      	movs	r5, #80	@ 0x50
 8026840:	e7ee      	b.n	8026820 <mg_url_port+0x2c>
    port = 443;
 8026842:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8026846:	2205      	movs	r2, #5
 8026848:	4910      	ldr	r1, [pc, #64]	@ (802688c <mg_url_port+0x98>)
 802684a:	4620      	mov	r0, r4
 802684c:	f007 f895 	bl	802d97a <strncmp>
 8026850:	b908      	cbnz	r0, 8026856 <mg_url_port+0x62>
 8026852:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8026856:	2206      	movs	r2, #6
 8026858:	490d      	ldr	r1, [pc, #52]	@ (8026890 <mg_url_port+0x9c>)
 802685a:	4620      	mov	r0, r4
 802685c:	f007 f88d 	bl	802d97a <strncmp>
 8026860:	b908      	cbnz	r0, 8026866 <mg_url_port+0x72>
 8026862:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8026866:	9805      	ldr	r0, [sp, #20]
 8026868:	b910      	cbnz	r0, 8026870 <mg_url_port+0x7c>
}
 802686a:	4628      	mov	r0, r5
 802686c:	b009      	add	sp, #36	@ 0x24
 802686e:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8026870:	4420      	add	r0, r4
 8026872:	f004 fb19 	bl	802aea8 <atoi>
 8026876:	b285      	uxth	r5, r0
 8026878:	e7f7      	b.n	802686a <mg_url_port+0x76>
 802687a:	bf00      	nop
 802687c:	0803c298 	.word	0x0803c298
 8026880:	0803c2a0 	.word	0x0803c2a0
 8026884:	0803c268 	.word	0x0803c268
 8026888:	0803c270 	.word	0x0803c270
 802688c:	0803c2a4 	.word	0x0803c2a4
 8026890:	0803c278 	.word	0x0803c278

08026894 <mg_bzero>:
  if (buf != NULL) {
 8026894:	4603      	mov	r3, r0
 8026896:	b920      	cbnz	r0, 80268a2 <mg_bzero+0xe>
 8026898:	4770      	bx	lr
    while (len--) *buf++ = 0;
 802689a:	2100      	movs	r1, #0
 802689c:	f803 1b01 	strb.w	r1, [r3], #1
 80268a0:	4611      	mov	r1, r2
 80268a2:	1e4a      	subs	r2, r1, #1
 80268a4:	2900      	cmp	r1, #0
 80268a6:	d1f8      	bne.n	802689a <mg_bzero+0x6>
}
 80268a8:	4770      	bx	lr

080268aa <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80268aa:	b538      	push	{r3, r4, r5, lr}
 80268ac:	4605      	mov	r5, r0
 80268ae:	4608      	mov	r0, r1
 80268b0:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 80268b2:	68aa      	ldr	r2, [r5, #8]
 80268b4:	428a      	cmp	r2, r1
 80268b6:	d200      	bcs.n	80268ba <mg_iobuf_del+0x10>
 80268b8:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 80268ba:	1903      	adds	r3, r0, r4
 80268bc:	429a      	cmp	r2, r3
 80268be:	d200      	bcs.n	80268c2 <mg_iobuf_del+0x18>
 80268c0:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80268c2:	682b      	ldr	r3, [r5, #0]
 80268c4:	b133      	cbz	r3, 80268d4 <mg_iobuf_del+0x2a>
 80268c6:	1901      	adds	r1, r0, r4
 80268c8:	1a12      	subs	r2, r2, r0
 80268ca:	1b12      	subs	r2, r2, r4
 80268cc:	4419      	add	r1, r3
 80268ce:	4418      	add	r0, r3
 80268d0:	f007 f804 	bl	802d8dc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80268d4:	682b      	ldr	r3, [r5, #0]
 80268d6:	b12b      	cbz	r3, 80268e4 <mg_iobuf_del+0x3a>
 80268d8:	68a8      	ldr	r0, [r5, #8]
 80268da:	1b00      	subs	r0, r0, r4
 80268dc:	4621      	mov	r1, r4
 80268de:	4418      	add	r0, r3
 80268e0:	f7ff ffd8 	bl	8026894 <mg_bzero>
  io->len -= len;
 80268e4:	68ab      	ldr	r3, [r5, #8]
 80268e6:	1b1b      	subs	r3, r3, r4
 80268e8:	60ab      	str	r3, [r5, #8]
}
 80268ea:	4620      	mov	r0, r4
 80268ec:	bd38      	pop	{r3, r4, r5, pc}

080268ee <mg_random>:
void mg_random(void *buf, size_t len) {
 80268ee:	b538      	push	{r3, r4, r5, lr}
 80268f0:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 80268f2:	e006      	b.n	8026902 <mg_random+0x14>
 80268f4:	f006 fac6 	bl	802ce84 <rand>
 80268f8:	4623      	mov	r3, r4
 80268fa:	f803 0b01 	strb.w	r0, [r3], #1
 80268fe:	461c      	mov	r4, r3
 8026900:	4629      	mov	r1, r5
 8026902:	1e4d      	subs	r5, r1, #1
 8026904:	2900      	cmp	r1, #0
 8026906:	d1f5      	bne.n	80268f4 <mg_random+0x6>
}
 8026908:	bd38      	pop	{r3, r4, r5, pc}
	...

0802690c <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 802690c:	b570      	push	{r4, r5, r6, lr}
 802690e:	4604      	mov	r4, r0
 8026910:	460d      	mov	r5, r1
  mg_random(buf, len);
 8026912:	f7ff ffec 	bl	80268ee <mg_random>
  for (i = 0; i < len; i++) {
 8026916:	2100      	movs	r1, #0
 8026918:	e00a      	b.n	8026930 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802691a:	2b33      	cmp	r3, #51	@ 0x33
 802691c:	d802      	bhi.n	8026924 <mg_random_str+0x18>
 802691e:	3327      	adds	r3, #39	@ 0x27
 8026920:	b2db      	uxtb	r3, r3
 8026922:	e003      	b.n	802692c <mg_random_str+0x20>
 8026924:	3b04      	subs	r3, #4
 8026926:	b2db      	uxtb	r3, r3
 8026928:	e000      	b.n	802692c <mg_random_str+0x20>
 802692a:	2300      	movs	r3, #0
 802692c:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 802692e:	3101      	adds	r1, #1
 8026930:	42a9      	cmp	r1, r5
 8026932:	d213      	bcs.n	802695c <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8026934:	1860      	adds	r0, r4, r1
 8026936:	5c63      	ldrb	r3, [r4, r1]
 8026938:	085a      	lsrs	r2, r3, #1
 802693a:	4e09      	ldr	r6, [pc, #36]	@ (8026960 <mg_random_str+0x54>)
 802693c:	fba6 6202 	umull	r6, r2, r6, r2
 8026940:	0912      	lsrs	r2, r2, #4
 8026942:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8026946:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 802694a:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802694c:	1e6a      	subs	r2, r5, #1
 802694e:	428a      	cmp	r2, r1
 8026950:	d0eb      	beq.n	802692a <mg_random_str+0x1e>
 8026952:	2b19      	cmp	r3, #25
 8026954:	d8e1      	bhi.n	802691a <mg_random_str+0xe>
 8026956:	3361      	adds	r3, #97	@ 0x61
 8026958:	b2db      	uxtb	r3, r3
 802695a:	e7e7      	b.n	802692c <mg_random_str+0x20>
}
 802695c:	4620      	mov	r0, r4
 802695e:	bd70      	pop	{r4, r5, r6, pc}
 8026960:	84210843 	.word	0x84210843

08026964 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8026964:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8026966:	2300      	movs	r3, #0
 8026968:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 802696a:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 802696c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8026970:	021b      	lsls	r3, r3, #8
 8026972:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8026976:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 802697a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 802697e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8026982:	b002      	add	sp, #8
 8026984:	4770      	bx	lr
	...

08026988 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8026988:	b5f0      	push	{r4, r5, r6, r7, lr}
 802698a:	b085      	sub	sp, #20
 802698c:	466c      	mov	r4, sp
 802698e:	e884 0003 	stmia.w	r4, {r0, r1}
 8026992:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8026994:	480b      	ldr	r0, [pc, #44]	@ (80269c4 <mg_atonl+0x3c>)
 8026996:	f7ff ffe5 	bl	8026964 <mg_ntohl>
 802699a:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 802699c:	ae02      	add	r6, sp, #8
 802699e:	490a      	ldr	r1, [pc, #40]	@ (80269c8 <mg_atonl+0x40>)
 80269a0:	4630      	mov	r0, r6
 80269a2:	f7fe fc45 	bl	8025230 <mg_str_s>
 80269a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80269aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269ae:	f7fe fd3a 	bl	8025426 <mg_strcasecmp>
 80269b2:	b928      	cbnz	r0, 80269c0 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 80269b4:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 80269b6:	2300      	movs	r3, #0
 80269b8:	74eb      	strb	r3, [r5, #19]
  return true;
 80269ba:	2001      	movs	r0, #1
}
 80269bc:	b005      	add	sp, #20
 80269be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 80269c0:	2000      	movs	r0, #0
 80269c2:	e7fb      	b.n	80269bc <mg_atonl+0x34>
 80269c4:	7f000001 	.word	0x7f000001
 80269c8:	0803c2ac 	.word	0x0803c2ac

080269cc <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80269cc:	b510      	push	{r4, lr}
 80269ce:	b082      	sub	sp, #8
 80269d0:	466b      	mov	r3, sp
 80269d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80269d6:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80269d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80269dc:	f7fb fdcf 	bl	802257e <mg_atone>
 80269e0:	b110      	cbz	r0, 80269e8 <mg_aton+0x1c>
 80269e2:	2001      	movs	r0, #1
}
 80269e4:	b002      	add	sp, #8
 80269e6:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80269e8:	4622      	mov	r2, r4
 80269ea:	ab02      	add	r3, sp, #8
 80269ec:	e913 0003 	ldmdb	r3, {r0, r1}
 80269f0:	f7ff ffca 	bl	8026988 <mg_atonl>
 80269f4:	b108      	cbz	r0, 80269fa <mg_aton+0x2e>
 80269f6:	2001      	movs	r0, #1
 80269f8:	e7f4      	b.n	80269e4 <mg_aton+0x18>
 80269fa:	4622      	mov	r2, r4
 80269fc:	ab02      	add	r3, sp, #8
 80269fe:	e913 0003 	ldmdb	r3, {r0, r1}
 8026a02:	f7fb fb37 	bl	8022074 <mg_aton4>
 8026a06:	b108      	cbz	r0, 8026a0c <mg_aton+0x40>
 8026a08:	2001      	movs	r0, #1
 8026a0a:	e7eb      	b.n	80269e4 <mg_aton+0x18>
         mg_aton6(str, addr);
 8026a0c:	4622      	mov	r2, r4
 8026a0e:	ab02      	add	r3, sp, #8
 8026a10:	e913 0003 	ldmdb	r3, {r0, r1}
 8026a14:	f7ff fd34 	bl	8026480 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8026a18:	2800      	cmp	r0, #0
 8026a1a:	d0e3      	beq.n	80269e4 <mg_aton+0x18>
 8026a1c:	2001      	movs	r0, #1
 8026a1e:	e7e1      	b.n	80269e4 <mg_aton+0x18>

08026a20 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8026a20:	b570      	push	{r4, r5, r6, lr}
 8026a22:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8026a24:	6800      	ldr	r0, [r0, #0]
 8026a26:	f7ff ff9d 	bl	8026964 <mg_ntohl>
 8026a2a:	4606      	mov	r6, r0
 8026a2c:	6860      	ldr	r0, [r4, #4]
 8026a2e:	f7ff ff99 	bl	8026964 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8026a32:	b12e      	cbz	r6, 8026a40 <gettimestamp+0x20>
 8026a34:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8026a38:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8026a3c:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8026a40:	0ef5      	lsrs	r5, r6, #27
 8026a42:	0174      	lsls	r4, r6, #5
 8026a44:	1ba4      	subs	r4, r4, r6
 8026a46:	f165 0500 	sbc.w	r5, r5, #0
 8026a4a:	00ad      	lsls	r5, r5, #2
 8026a4c:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8026a50:	00a4      	lsls	r4, r4, #2
 8026a52:	19a4      	adds	r4, r4, r6
 8026a54:	f145 0500 	adc.w	r5, r5, #0
 8026a58:	00ed      	lsls	r5, r5, #3
 8026a5a:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8026a5e:	00e4      	lsls	r4, r4, #3
 8026a60:	f7e9 fd68 	bl	8010534 <__aeabi_ui2d>
 8026a64:	a309      	add	r3, pc, #36	@ (adr r3, 8026a8c <gettimestamp+0x6c>)
 8026a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a6a:	f7e9 ff07 	bl	801087c <__aeabi_ddiv>
 8026a6e:	2200      	movs	r2, #0
 8026a70:	4b05      	ldr	r3, [pc, #20]	@ (8026a88 <gettimestamp+0x68>)
 8026a72:	f7e9 fdd9 	bl	8010628 <__aeabi_dmul>
 8026a76:	f7ea f99b 	bl	8010db0 <__aeabi_d2lz>
 8026a7a:	1820      	adds	r0, r4, r0
}
 8026a7c:	eb45 0101 	adc.w	r1, r5, r1
 8026a80:	bd70      	pop	{r4, r5, r6, pc}
 8026a82:	bf00      	nop
 8026a84:	f3af 8000 	nop.w
 8026a88:	408f4000 	.word	0x408f4000
 8026a8c:	ffe00000 	.word	0xffe00000
 8026a90:	41efffff 	.word	0x41efffff

08026a94 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8026a94:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8026a96:	2300      	movs	r3, #0
 8026a98:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8026a9c:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8026aa0:	b2c3      	uxtb	r3, r0
 8026aa2:	021b      	lsls	r3, r3, #8
}
 8026aa4:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8026aa8:	b002      	add	sp, #8
 8026aaa:	4770      	bx	lr

08026aac <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8026aac:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8026aae:	e001      	b.n	8026ab4 <csumfin+0x8>
 8026ab0:	fa13 f080 	uxtah	r0, r3, r0
 8026ab4:	0c03      	lsrs	r3, r0, #16
 8026ab6:	d1fb      	bne.n	8026ab0 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8026ab8:	43c0      	mvns	r0, r0
 8026aba:	b280      	uxth	r0, r0
 8026abc:	f7ff ffea 	bl	8026a94 <mg_ntohs>
}
 8026ac0:	bd08      	pop	{r3, pc}

08026ac2 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8026ac2:	b508      	push	{r3, lr}
 8026ac4:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8026ac6:	4601      	mov	r1, r0
 8026ac8:	2000      	movs	r0, #0
 8026aca:	f7fb fb2b 	bl	8022124 <csumup>
  return csumfin(sum);
 8026ace:	f7ff ffed 	bl	8026aac <csumfin>
}
 8026ad2:	bd08      	pop	{r3, pc}

08026ad4 <tx_ip>:
                        size_t plen) {
 8026ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ad6:	4617      	mov	r7, r2
 8026ad8:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8026ada:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8026adc:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8026ade:	680b      	ldr	r3, [r1, #0]
 8026ae0:	f845 3b0e 	str.w	r3, [r5], #14
 8026ae4:	888b      	ldrh	r3, [r1, #4]
 8026ae6:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8026ae8:	6803      	ldr	r3, [r0, #0]
 8026aea:	f8c4 3006 	str.w	r3, [r4, #6]
 8026aee:	8883      	ldrh	r3, [r0, #4]
 8026af0:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8026af2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026af6:	f7ff ffcd 	bl	8026a94 <mg_ntohs>
 8026afa:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8026afc:	2100      	movs	r1, #0
 8026afe:	f8c4 100e 	str.w	r1, [r4, #14]
 8026b02:	6069      	str	r1, [r5, #4]
 8026b04:	60a9      	str	r1, [r5, #8]
 8026b06:	60e9      	str	r1, [r5, #12]
 8026b08:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8026b0a:	2345      	movs	r3, #69	@ 0x45
 8026b0c:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8026b0e:	2340      	movs	r3, #64	@ 0x40
 8026b10:	7523      	strb	r3, [r4, #20]
 8026b12:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8026b14:	9807      	ldr	r0, [sp, #28]
 8026b16:	3014      	adds	r0, #20
 8026b18:	b280      	uxth	r0, r0
 8026b1a:	f7ff ffbb 	bl	8026a94 <mg_ntohs>
 8026b1e:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8026b20:	2340      	movs	r3, #64	@ 0x40
 8026b22:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8026b24:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8026b26:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8026b2a:	9b06      	ldr	r3, [sp, #24]
 8026b2c:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8026b30:	2114      	movs	r1, #20
 8026b32:	4628      	mov	r0, r5
 8026b34:	f7ff ffc5 	bl	8026ac2 <ipcsum>
 8026b38:	8320      	strh	r0, [r4, #24]
}
 8026b3a:	4628      	mov	r0, r5
 8026b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026b3e <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8026b3e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8026b40:	781b      	ldrb	r3, [r3, #0]
 8026b42:	2b08      	cmp	r3, #8
 8026b44:	d000      	beq.n	8026b48 <rx_icmp+0xa>
 8026b46:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026b4c:	b083      	sub	sp, #12
 8026b4e:	4605      	mov	r5, r0
 8026b50:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8026b52:	69ca      	ldr	r2, [r1, #28]
 8026b54:	b11a      	cbz	r2, 8026b5e <rx_icmp+0x20>
 8026b56:	6911      	ldr	r1, [r2, #16]
 8026b58:	6883      	ldr	r3, [r0, #8]
 8026b5a:	4299      	cmp	r1, r3
 8026b5c:	d002      	beq.n	8026b64 <rx_icmp+0x26>
}
 8026b5e:	b003      	add	sp, #12
 8026b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8026b64:	6986      	ldr	r6, [r0, #24]
 8026b66:	3e26      	subs	r6, #38	@ 0x26
 8026b68:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8026b6a:	428e      	cmp	r6, r1
 8026b6c:	d300      	bcc.n	8026b70 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8026b6e:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8026b70:	6921      	ldr	r1, [r4, #16]
 8026b72:	f106 0804 	add.w	r8, r6, #4
 8026b76:	f8cd 8004 	str.w	r8, [sp, #4]
 8026b7a:	68d2      	ldr	r2, [r2, #12]
 8026b7c:	9200      	str	r2, [sp, #0]
 8026b7e:	2201      	movs	r2, #1
 8026b80:	3106      	adds	r1, #6
 8026b82:	4628      	mov	r0, r5
 8026b84:	f7ff ffa6 	bl	8026ad4 <tx_ip>
 8026b88:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8026b8a:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8026b8e:	2300      	movs	r3, #0
 8026b90:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8026b92:	4632      	mov	r2, r6
 8026b94:	68a1      	ldr	r1, [r4, #8]
 8026b96:	3018      	adds	r0, #24
 8026b98:	f008 fc20 	bl	802f3dc <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8026b9c:	4641      	mov	r1, r8
 8026b9e:	4648      	mov	r0, r9
 8026ba0:	f7ff ff8f 	bl	8026ac2 <ipcsum>
 8026ba4:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8026ba6:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8026baa:	4628      	mov	r0, r5
 8026bac:	f7fb facb 	bl	8022146 <ether_output>
}
 8026bb0:	e7d5      	b.n	8026b5e <rx_icmp+0x20>

08026bb2 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026bb2:	b538      	push	{r3, r4, r5, lr}
 8026bb4:	4605      	mov	r5, r0
 8026bb6:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8026bb8:	6a09      	ldr	r1, [r1, #32]
 8026bba:	798b      	ldrb	r3, [r1, #6]
 8026bbc:	2b01      	cmp	r3, #1
 8026bbe:	d00e      	beq.n	8026bde <rx_ip6+0x2c>
 8026bc0:	2b3a      	cmp	r3, #58	@ 0x3a
 8026bc2:	d00c      	beq.n	8026bde <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8026bc4:	2b11      	cmp	r3, #17
 8026bc6:	d110      	bne.n	8026bea <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8026bc8:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8026bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8026bce:	68e3      	ldr	r3, [r4, #12]
 8026bd0:	2b07      	cmp	r3, #7
 8026bd2:	d90a      	bls.n	8026bea <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8026bd4:	3130      	adds	r1, #48	@ 0x30
 8026bd6:	4620      	mov	r0, r4
 8026bd8:	f7fe fbe9 	bl	80253ae <mkpay>
 8026bdc:	e005      	b.n	8026bea <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8026bde:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8026be2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8026be4:	68e3      	ldr	r3, [r4, #12]
 8026be6:	2b03      	cmp	r3, #3
 8026be8:	d800      	bhi.n	8026bec <rx_ip6+0x3a>
}
 8026bea:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8026bec:	312c      	adds	r1, #44	@ 0x2c
 8026bee:	4620      	mov	r0, r4
 8026bf0:	f7fe fbdd 	bl	80253ae <mkpay>
    rx_icmp(ifp, pkt);
 8026bf4:	4621      	mov	r1, r4
 8026bf6:	4628      	mov	r0, r5
 8026bf8:	f7ff ffa1 	bl	8026b3e <rx_icmp>
 8026bfc:	e7f5      	b.n	8026bea <rx_ip6+0x38>

08026bfe <tx_udp>:
                   const void *buf, size_t len) {
 8026bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026c02:	b083      	sub	sp, #12
 8026c04:	4606      	mov	r6, r0
 8026c06:	4698      	mov	r8, r3
 8026c08:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026c0a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8026c0c:	f105 0308 	add.w	r3, r5, #8
 8026c10:	9301      	str	r3, [sp, #4]
 8026c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026c14:	9300      	str	r3, [sp, #0]
 8026c16:	4613      	mov	r3, r2
 8026c18:	2211      	movs	r2, #17
 8026c1a:	f7ff ff5b 	bl	8026ad4 <tx_ip>
 8026c1e:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8026c20:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8026c24:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8026c28:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8026c2c:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8026c2e:	f105 0008 	add.w	r0, r5, #8
 8026c32:	b280      	uxth	r0, r0
 8026c34:	f7ff ff2e 	bl	8026a94 <mg_ntohs>
 8026c38:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8026c3a:	2000      	movs	r0, #0
 8026c3c:	76a0      	strb	r0, [r4, #26]
 8026c3e:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8026c40:	2208      	movs	r2, #8
 8026c42:	4649      	mov	r1, r9
 8026c44:	f7fb fa6e 	bl	8022124 <csumup>
  cs = csumup(cs, buf, len);
 8026c48:	462a      	mov	r2, r5
 8026c4a:	4639      	mov	r1, r7
 8026c4c:	f7fb fa6a 	bl	8022124 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8026c50:	2204      	movs	r2, #4
 8026c52:	f104 010c 	add.w	r1, r4, #12
 8026c56:	f7fb fa65 	bl	8022124 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8026c5a:	2204      	movs	r2, #4
 8026c5c:	f104 0110 	add.w	r1, r4, #16
 8026c60:	f7fb fa60 	bl	8022124 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8026c64:	7a63      	ldrb	r3, [r4, #9]
 8026c66:	442b      	add	r3, r5
 8026c68:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8026c6a:	3008      	adds	r0, #8
 8026c6c:	f7ff ff1e 	bl	8026aac <csumfin>
 8026c70:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8026c72:	462a      	mov	r2, r5
 8026c74:	4639      	mov	r1, r7
 8026c76:	f104 001c 	add.w	r0, r4, #28
 8026c7a:	f006 fe2f 	bl	802d8dc <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8026c7e:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8026c82:	4630      	mov	r0, r6
 8026c84:	f7fb fa5f 	bl	8022146 <ether_output>
}
 8026c88:	b003      	add	sp, #12
 8026c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08026c8e <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8026c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c90:	4605      	mov	r5, r0
 8026c92:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8026c94:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8026c96:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8026c98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026c9c:	f846 3b0e 	str.w	r3, [r6], #14
 8026ca0:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8026ca2:	6803      	ldr	r3, [r0, #0]
 8026ca4:	f8c4 3006 	str.w	r3, [r4, #6]
 8026ca8:	8883      	ldrh	r3, [r0, #4]
 8026caa:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8026cac:	f640 0006 	movw	r0, #2054	@ 0x806
 8026cb0:	f7ff fef0 	bl	8026a94 <mg_ntohs>
 8026cb4:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8026cb6:	2300      	movs	r3, #0
 8026cb8:	f8c4 300e 	str.w	r3, [r4, #14]
 8026cbc:	6073      	str	r3, [r6, #4]
 8026cbe:	60b3      	str	r3, [r6, #8]
 8026cc0:	60f3      	str	r3, [r6, #12]
 8026cc2:	6133      	str	r3, [r6, #16]
 8026cc4:	6173      	str	r3, [r6, #20]
 8026cc6:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8026cc8:	2001      	movs	r0, #1
 8026cca:	f7ff fee3 	bl	8026a94 <mg_ntohs>
 8026cce:	4606      	mov	r6, r0
 8026cd0:	81e0      	strh	r0, [r4, #14]
 8026cd2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026cd6:	f7ff fedd 	bl	8026a94 <mg_ntohs>
 8026cda:	8220      	strh	r0, [r4, #16]
 8026cdc:	2306      	movs	r3, #6
 8026cde:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8026ce0:	2304      	movs	r3, #4
 8026ce2:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8026ce4:	82a6      	strh	r6, [r4, #20]
 8026ce6:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8026cea:	68ab      	ldr	r3, [r5, #8]
 8026cec:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8026cee:	682b      	ldr	r3, [r5, #0]
 8026cf0:	f8c4 3016 	str.w	r3, [r4, #22]
 8026cf4:	88ab      	ldrh	r3, [r5, #4]
 8026cf6:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8026cf8:	212a      	movs	r1, #42	@ 0x2a
 8026cfa:	4628      	mov	r0, r5
 8026cfc:	f7fb fa23 	bl	8022146 <ether_output>
}
 8026d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026d02 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8026d02:	b510      	push	{r4, lr}
 8026d04:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8026d06:	4608      	mov	r0, r1
 8026d08:	f7ff fd74 	bl	80267f4 <mg_url_port>
 8026d0c:	f7ff fec2 	bl	8026a94 <mg_ntohs>
 8026d10:	8320      	strh	r0, [r4, #24]
}
 8026d12:	2001      	movs	r0, #1
 8026d14:	bd10      	pop	{r4, pc}
	...

08026d18 <tx_dhcp>:
                    bool ciaddr) {
 8026d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d1c:	b0c8      	sub	sp, #288	@ 0x120
 8026d1e:	4604      	mov	r4, r0
 8026d20:	460e      	mov	r6, r1
 8026d22:	4615      	mov	r5, r2
 8026d24:	4698      	mov	r8, r3
 8026d26:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8026d2a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8026d2e:	4917      	ldr	r1, [pc, #92]	@ (8026d8c <tx_dhcp+0x74>)
 8026d30:	a804      	add	r0, sp, #16
 8026d32:	f008 fb53 	bl	802f3dc <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8026d36:	4816      	ldr	r0, [pc, #88]	@ (8026d90 <tx_dhcp+0x78>)
 8026d38:	f7ff fe14 	bl	8026964 <mg_ntohl>
 8026d3c:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8026d3e:	6820      	ldr	r0, [r4, #0]
 8026d40:	900b      	str	r0, [sp, #44]	@ 0x2c
 8026d42:	88a3      	ldrh	r3, [r4, #4]
 8026d44:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8026d48:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8026d4c:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8026d4e:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8026d50:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8026d52:	a840      	add	r0, sp, #256	@ 0x100
 8026d54:	f008 fb42 	bl	802f3dc <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8026d58:	b107      	cbz	r7, 8026d5c <tx_dhcp+0x44>
 8026d5a:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8026d5c:	2044      	movs	r0, #68	@ 0x44
 8026d5e:	f7ff fe99 	bl	8026a94 <mg_ntohs>
 8026d62:	4607      	mov	r7, r0
 8026d64:	2043      	movs	r0, #67	@ 0x43
 8026d66:	f7ff fe95 	bl	8026a94 <mg_ntohs>
 8026d6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8026d6e:	9303      	str	r3, [sp, #12]
 8026d70:	ab04      	add	r3, sp, #16
 8026d72:	9302      	str	r3, [sp, #8]
 8026d74:	9001      	str	r0, [sp, #4]
 8026d76:	f8cd 8000 	str.w	r8, [sp]
 8026d7a:	463b      	mov	r3, r7
 8026d7c:	462a      	mov	r2, r5
 8026d7e:	4631      	mov	r1, r6
 8026d80:	4620      	mov	r0, r4
 8026d82:	f7ff ff3c 	bl	8026bfe <tx_udp>
}
 8026d86:	b048      	add	sp, #288	@ 0x120
 8026d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026d8c:	0803716c 	.word	0x0803716c
 8026d90:	63825363 	.word	0x63825363

08026d94 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d98:	b0d0      	sub	sp, #320	@ 0x140
 8026d9a:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8026d9c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8026d9e:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8026da2:	6809      	ldr	r1, [r1, #0]
 8026da4:	686a      	ldr	r2, [r5, #4]
 8026da6:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8026daa:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8026dae:	4543      	cmp	r3, r8
 8026db0:	d827      	bhi.n	8026e02 <rx_dhcp_server+0x6e>
 8026db2:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8026db4:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8026db8:	495e      	ldr	r1, [pc, #376]	@ (8026f34 <rx_dhcp_server+0x1a0>)
 8026dba:	a80c      	add	r0, sp, #48	@ 0x30
 8026dbc:	f008 fb0e 	bl	802f3dc <memcpy>
  res.yiaddr = ifp->ip;
 8026dc0:	68b3      	ldr	r3, [r6, #8]
 8026dc2:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8026dc4:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8026dc8:	3301      	adds	r3, #1
 8026dca:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8026dce:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026dd0:	e002      	b.n	8026dd8 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8026dd2:	7863      	ldrb	r3, [r4, #1]
 8026dd4:	3302      	adds	r3, #2
 8026dd6:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026dd8:	1c63      	adds	r3, r4, #1
 8026dda:	4543      	cmp	r3, r8
 8026ddc:	d20c      	bcs.n	8026df8 <rx_dhcp_server+0x64>
 8026dde:	7823      	ldrb	r3, [r4, #0]
 8026de0:	2bff      	cmp	r3, #255	@ 0xff
 8026de2:	d009      	beq.n	8026df8 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8026de4:	2b35      	cmp	r3, #53	@ 0x35
 8026de6:	d1f4      	bne.n	8026dd2 <rx_dhcp_server+0x3e>
 8026de8:	7863      	ldrb	r3, [r4, #1]
 8026dea:	2b01      	cmp	r3, #1
 8026dec:	d1f1      	bne.n	8026dd2 <rx_dhcp_server+0x3e>
 8026dee:	1ca3      	adds	r3, r4, #2
 8026df0:	4543      	cmp	r3, r8
 8026df2:	d2ee      	bcs.n	8026dd2 <rx_dhcp_server+0x3e>
      op = p[2];
 8026df4:	78a7      	ldrb	r7, [r4, #2]
 8026df6:	e7ec      	b.n	8026dd2 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8026df8:	2f01      	cmp	r7, #1
 8026dfa:	f000 808a 	beq.w	8026f12 <rx_dhcp_server+0x17e>
 8026dfe:	2f03      	cmp	r7, #3
 8026e00:	d002      	beq.n	8026e08 <rx_dhcp_server+0x74>
}
 8026e02:	b050      	add	sp, #320	@ 0x140
 8026e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026e08:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8026e0a:	2335      	movs	r3, #53	@ 0x35
 8026e0c:	f88d 3014 	strb.w	r3, [sp, #20]
 8026e10:	2301      	movs	r3, #1
 8026e12:	f88d 3015 	strb.w	r3, [sp, #21]
 8026e16:	f88d 2016 	strb.w	r2, [sp, #22]
 8026e1a:	f88d 3017 	strb.w	r3, [sp, #23]
 8026e1e:	2204      	movs	r2, #4
 8026e20:	f88d 2018 	strb.w	r2, [sp, #24]
 8026e24:	2300      	movs	r3, #0
 8026e26:	f88d 3019 	strb.w	r3, [sp, #25]
 8026e2a:	f88d 301a 	strb.w	r3, [sp, #26]
 8026e2e:	f88d 301b 	strb.w	r3, [sp, #27]
 8026e32:	f88d 301c 	strb.w	r3, [sp, #28]
 8026e36:	2136      	movs	r1, #54	@ 0x36
 8026e38:	f88d 101d 	strb.w	r1, [sp, #29]
 8026e3c:	f88d 201e 	strb.w	r2, [sp, #30]
 8026e40:	f88d 301f 	strb.w	r3, [sp, #31]
 8026e44:	f88d 3020 	strb.w	r3, [sp, #32]
 8026e48:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8026e4c:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8026e50:	230c      	movs	r3, #12
 8026e52:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8026e56:	2303      	movs	r3, #3
 8026e58:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8026e5c:	236d      	movs	r3, #109	@ 0x6d
 8026e5e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8026e62:	2369      	movs	r3, #105	@ 0x69
 8026e64:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8026e68:	2370      	movs	r3, #112	@ 0x70
 8026e6a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8026e6e:	2333      	movs	r3, #51	@ 0x33
 8026e70:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8026e74:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8026e78:	23ff      	movs	r3, #255	@ 0xff
 8026e7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026e7e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8026e82:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8026e86:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8026e8a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8026e8e:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8026e92:	f8de 001c 	ldr.w	r0, [lr, #28]
 8026e96:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026e98:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8026e9c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8026ea0:	68f3      	ldr	r3, [r6, #12]
 8026ea2:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8026ea6:	68b3      	ldr	r3, [r6, #8]
 8026ea8:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8026eac:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8026eb0:	ac05      	add	r4, sp, #20
 8026eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026eb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026eb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8026ebc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8026ec0:	f82c 2b02 	strh.w	r2, [ip], #2
 8026ec4:	0c12      	lsrs	r2, r2, #16
 8026ec6:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8026eca:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8026ece:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8026ed0:	f8de 3004 	ldr.w	r3, [lr, #4]
 8026ed4:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8026ed6:	7fb3      	ldrb	r3, [r6, #30]
 8026ed8:	b9eb      	cbnz	r3, 8026f16 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8026eda:	692c      	ldr	r4, [r5, #16]
 8026edc:	3406      	adds	r4, #6
 8026ede:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8026ee2:	2043      	movs	r0, #67	@ 0x43
 8026ee4:	f7ff fdd6 	bl	8026a94 <mg_ntohs>
 8026ee8:	4605      	mov	r5, r0
 8026eea:	2f01      	cmp	r7, #1
 8026eec:	d01e      	beq.n	8026f2c <rx_dhcp_server+0x198>
 8026eee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026ef0:	2044      	movs	r0, #68	@ 0x44
 8026ef2:	f7ff fdcf 	bl	8026a94 <mg_ntohs>
 8026ef6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8026efa:	9303      	str	r3, [sp, #12]
 8026efc:	ab0c      	add	r3, sp, #48	@ 0x30
 8026efe:	9302      	str	r3, [sp, #8]
 8026f00:	9001      	str	r0, [sp, #4]
 8026f02:	9700      	str	r7, [sp, #0]
 8026f04:	462b      	mov	r3, r5
 8026f06:	4642      	mov	r2, r8
 8026f08:	4621      	mov	r1, r4
 8026f0a:	4630      	mov	r0, r6
 8026f0c:	f7ff fe77 	bl	8026bfe <tx_udp>
 8026f10:	e777      	b.n	8026e02 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026f12:	2202      	movs	r2, #2
 8026f14:	e779      	b.n	8026e0a <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8026f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026f18:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8026f1a:	692b      	ldr	r3, [r5, #16]
 8026f1c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026f20:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8026f24:	895b      	ldrh	r3, [r3, #10]
 8026f26:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8026f2a:	e7d6      	b.n	8026eda <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8026f2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026f30:	e7de      	b.n	8026ef0 <rx_dhcp_server+0x15c>
 8026f32:	bf00      	nop
 8026f34:	0803727c 	.word	0x0803727c

08026f38 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8026f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f3c:	b08b      	sub	sp, #44	@ 0x2c
 8026f3e:	4605      	mov	r5, r0
 8026f40:	9108      	str	r1, [sp, #32]
 8026f42:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026f44:	8810      	ldrh	r0, [r2, #0]
 8026f46:	f7ff fda5 	bl	8026a94 <mg_ntohs>
 8026f4a:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8026f4c:	8860      	ldrh	r0, [r4, #2]
 8026f4e:	f7ff fda1 	bl	8026a94 <mg_ntohs>
 8026f52:	4606      	mov	r6, r0
 8026f54:	88a0      	ldrh	r0, [r4, #4]
 8026f56:	f7ff fd9d 	bl	8026a94 <mg_ntohs>
 8026f5a:	4607      	mov	r7, r0
 8026f5c:	88e0      	ldrh	r0, [r4, #6]
 8026f5e:	f7ff fd99 	bl	8026a94 <mg_ntohs>
 8026f62:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8026f64:	8920      	ldrh	r0, [r4, #8]
 8026f66:	f7ff fd95 	bl	8026a94 <mg_ntohs>
 8026f6a:	4681      	mov	r9, r0
 8026f6c:	8960      	ldrh	r0, [r4, #10]
 8026f6e:	f7ff fd91 	bl	8026a94 <mg_ntohs>
 8026f72:	4682      	mov	sl, r0
 8026f74:	89a0      	ldrh	r0, [r4, #12]
 8026f76:	f7ff fd8d 	bl	8026a94 <mg_ntohs>
 8026f7a:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 8026f7c:	89e0      	ldrh	r0, [r4, #14]
 8026f7e:	f7ff fd89 	bl	8026a94 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026f82:	9006      	str	r0, [sp, #24]
 8026f84:	f8cd b014 	str.w	fp, [sp, #20]
 8026f88:	f8cd a010 	str.w	sl, [sp, #16]
 8026f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8026f90:	f8cd 8008 	str.w	r8, [sp, #8]
 8026f94:	9701      	str	r7, [sp, #4]
 8026f96:	9600      	str	r6, [sp, #0]
 8026f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f9a:	4a04      	ldr	r2, [pc, #16]	@ (8026fac <print_ip6+0x74>)
 8026f9c:	9908      	ldr	r1, [sp, #32]
 8026f9e:	4628      	mov	r0, r5
 8026fa0:	f7fd ff28 	bl	8024df4 <mg_xprintf>
}
 8026fa4:	b00b      	add	sp, #44	@ 0x2c
 8026fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026faa:	bf00      	nop
 8026fac:	0803c2b8 	.word	0x0803c2b8

08026fb0 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026fb0:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026fb2:	6813      	ldr	r3, [r2, #0]
 8026fb4:	1d1c      	adds	r4, r3, #4
 8026fb6:	6014      	str	r4, [r2, #0]
 8026fb8:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026fba:	7cd3      	ldrb	r3, [r2, #19]
 8026fbc:	b913      	cbnz	r3, 8026fc4 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8026fbe:	f7fd ff29 	bl	8024e14 <print_ip4>
}
 8026fc2:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026fc4:	f7ff ffb8 	bl	8026f38 <print_ip6>
 8026fc8:	e7fb      	b.n	8026fc2 <mg_print_ip+0x12>
	...

08026fcc <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8026fcc:	b570      	push	{r4, r5, r6, lr}
 8026fce:	b082      	sub	sp, #8
 8026fd0:	4604      	mov	r4, r0
 8026fd2:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8026fd4:	6813      	ldr	r3, [r2, #0]
 8026fd6:	1d19      	adds	r1, r3, #4
 8026fd8:	6011      	str	r1, [r2, #0]
 8026fda:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8026fdc:	8a30      	ldrh	r0, [r6, #16]
 8026fde:	f7ff fd59 	bl	8026a94 <mg_ntohs>
 8026fe2:	9001      	str	r0, [sp, #4]
 8026fe4:	9600      	str	r6, [sp, #0]
 8026fe6:	4b04      	ldr	r3, [pc, #16]	@ (8026ff8 <mg_print_ip_port+0x2c>)
 8026fe8:	4a04      	ldr	r2, [pc, #16]	@ (8026ffc <mg_print_ip_port+0x30>)
 8026fea:	4629      	mov	r1, r5
 8026fec:	4620      	mov	r0, r4
 8026fee:	f7fd ff01 	bl	8024df4 <mg_xprintf>
}
 8026ff2:	b002      	add	sp, #8
 8026ff4:	bd70      	pop	{r4, r5, r6, pc}
 8026ff6:	bf00      	nop
 8026ff8:	08026fb1 	.word	0x08026fb1
 8026ffc:	0803c2d4 	.word	0x0803c2d4

08027000 <mg_crc32>:
  crc = ~crc;
 8027000:	43c0      	mvns	r0, r0
  while (len--) {
 8027002:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8027006:	b1e2      	cbz	r2, 8027042 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8027008:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 802700a:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 802700e:	ea83 0200 	eor.w	r2, r3, r0
 8027012:	f002 020f 	and.w	r2, r2, #15
 8027016:	4c0c      	ldr	r4, [pc, #48]	@ (8027048 <mg_crc32+0x48>)
 8027018:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802701c:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8027020:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8027024:	f003 030f 	and.w	r3, r3, #15
 8027028:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802702c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8027030:	4662      	mov	r2, ip
 8027032:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8027036:	2a00      	cmp	r2, #0
 8027038:	d1e7      	bne.n	802700a <mg_crc32+0xa>
}
 802703a:	43c0      	mvns	r0, r0
 802703c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027040:	4770      	bx	lr
 8027042:	43c0      	mvns	r0, r0
 8027044:	4770      	bx	lr
 8027046:	bf00      	nop
 8027048:	0803cb68 	.word	0x0803cb68

0802704c <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 802704c:	b530      	push	{r4, r5, lr}
 802704e:	b089      	sub	sp, #36	@ 0x24
 8027050:	ab02      	add	r3, sp, #8
 8027052:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8027056:	bb19      	cbnz	r1, 80270a0 <mg_check_ip_acl+0x54>
 8027058:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 802705a:	7cd3      	ldrb	r3, [r2, #19]
 802705c:	bb73      	cbnz	r3, 80270bc <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 802705e:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8027060:	ab02      	add	r3, sp, #8
 8027062:	222c      	movs	r2, #44	@ 0x2c
 8027064:	9200      	str	r2, [sp, #0]
 8027066:	aa06      	add	r2, sp, #24
 8027068:	e893 0003 	ldmia.w	r3, {r0, r1}
 802706c:	f7fe fb9d 	bl	80257aa <mg_span>
 8027070:	b1f0      	cbz	r0, 80270b0 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8027072:	9806      	ldr	r0, [sp, #24]
 8027074:	7803      	ldrb	r3, [r0, #0]
 8027076:	2b2b      	cmp	r3, #43	@ 0x2b
 8027078:	d001      	beq.n	802707e <mg_check_ip_acl+0x32>
 802707a:	2b2d      	cmp	r3, #45	@ 0x2d
 802707c:	d112      	bne.n	80270a4 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802707e:	aa05      	add	r2, sp, #20
 8027080:	a904      	add	r1, sp, #16
 8027082:	3001      	adds	r0, #1
 8027084:	f7fc fb82 	bl	802378c <parse_net>
 8027088:	b178      	cbz	r0, 80270aa <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 802708a:	4620      	mov	r0, r4
 802708c:	f7ff fc6a 	bl	8026964 <mg_ntohl>
 8027090:	9b05      	ldr	r3, [sp, #20]
 8027092:	4018      	ands	r0, r3
 8027094:	9b04      	ldr	r3, [sp, #16]
 8027096:	4298      	cmp	r0, r3
 8027098:	d1e2      	bne.n	8027060 <mg_check_ip_acl+0x14>
 802709a:	9b06      	ldr	r3, [sp, #24]
 802709c:	781d      	ldrb	r5, [r3, #0]
 802709e:	e7df      	b.n	8027060 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 80270a0:	252d      	movs	r5, #45	@ 0x2d
 80270a2:	e7da      	b.n	802705a <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 80270a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80270a8:	e006      	b.n	80270b8 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 80270aa:	f06f 0001 	mvn.w	r0, #1
 80270ae:	e003      	b.n	80270b8 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 80270b0:	2d2b      	cmp	r5, #43	@ 0x2b
 80270b2:	bf14      	ite	ne
 80270b4:	2000      	movne	r0, #0
 80270b6:	2001      	moveq	r0, #1
}
 80270b8:	b009      	add	sp, #36	@ 0x24
 80270ba:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 80270bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80270c0:	e7fa      	b.n	80270b8 <mg_check_ip_acl+0x6c>

080270c2 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 80270c2:	b082      	sub	sp, #8
 80270c4:	ab02      	add	r3, sp, #8
 80270c6:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 80270ca:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 80270cc:	7803      	ldrb	r3, [r0, #0]
 80270ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80270d0:	d106      	bne.n	80270e0 <mg_path_is_sane+0x1e>
 80270d2:	7843      	ldrb	r3, [r0, #1]
 80270d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80270d6:	d103      	bne.n	80270e0 <mg_path_is_sane+0x1e>
 80270d8:	2000      	movs	r0, #0
 80270da:	e015      	b.n	8027108 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80270dc:	3201      	adds	r2, #1
 80270de:	3901      	subs	r1, #1
 80270e0:	7813      	ldrb	r3, [r2, #0]
 80270e2:	b183      	cbz	r3, 8027106 <mg_path_is_sane+0x44>
 80270e4:	b169      	cbz	r1, 8027102 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80270e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80270e8:	d001      	beq.n	80270ee <mg_path_is_sane+0x2c>
 80270ea:	2b5c      	cmp	r3, #92	@ 0x5c
 80270ec:	d1f6      	bne.n	80270dc <mg_path_is_sane+0x1a>
 80270ee:	2901      	cmp	r1, #1
 80270f0:	d9f4      	bls.n	80270dc <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80270f2:	7853      	ldrb	r3, [r2, #1]
 80270f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80270f6:	d1f1      	bne.n	80270dc <mg_path_is_sane+0x1a>
 80270f8:	7893      	ldrb	r3, [r2, #2]
 80270fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80270fc:	d1ee      	bne.n	80270dc <mg_path_is_sane+0x1a>
 80270fe:	2000      	movs	r0, #0
 8027100:	e002      	b.n	8027108 <mg_path_is_sane+0x46>
  return true;
 8027102:	2001      	movs	r0, #1
 8027104:	e000      	b.n	8027108 <mg_path_is_sane+0x46>
 8027106:	2001      	movs	r0, #1
}
 8027108:	b002      	add	sp, #8
 802710a:	4770      	bx	lr

0802710c <mg_millis>:
uint64_t mg_millis(void) {
 802710c:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 802710e:	f7f3 fc0d 	bl	801a92c <xTaskGetTickCount>
}
 8027112:	2100      	movs	r1, #0
 8027114:	bd08      	pop	{r3, pc}
	...

08027118 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8027118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802711c:	b092      	sub	sp, #72	@ 0x48
 802711e:	4605      	mov	r5, r0
 8027120:	460c      	mov	r4, r1
 8027122:	4616      	mov	r6, r2
 8027124:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8027126:	212f      	movs	r1, #47	@ 0x2f
 8027128:	4620      	mov	r0, r4
 802712a:	f006 fc4b 	bl	802d9c4 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802712e:	4680      	mov	r8, r0
 8027130:	b1a8      	cbz	r0, 802715e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8027132:	f7ff ffeb 	bl	802710c <mg_millis>
 8027136:	f1b8 0f00 	cmp.w	r8, #0
 802713a:	d001      	beq.n	8027140 <mg_log_prefix+0x28>
 802713c:	f108 0401 	add.w	r4, r8, #1
 8027140:	9705      	str	r7, [sp, #20]
 8027142:	9604      	str	r6, [sp, #16]
 8027144:	9403      	str	r4, [sp, #12]
 8027146:	9502      	str	r5, [sp, #8]
 8027148:	9000      	str	r0, [sp, #0]
 802714a:	9101      	str	r1, [sp, #4]
 802714c:	4a0f      	ldr	r2, [pc, #60]	@ (802718c <mg_log_prefix+0x74>)
 802714e:	2129      	movs	r1, #41	@ 0x29
 8027150:	a807      	add	r0, sp, #28
 8027152:	f7fd f9e5 	bl	8024520 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8027156:	2827      	cmp	r0, #39	@ 0x27
 8027158:	d90e      	bls.n	8027178 <mg_log_prefix+0x60>
 802715a:	2027      	movs	r0, #39	@ 0x27
 802715c:	e00c      	b.n	8027178 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802715e:	215c      	movs	r1, #92	@ 0x5c
 8027160:	4620      	mov	r0, r4
 8027162:	f006 fc2f 	bl	802d9c4 <strrchr>
 8027166:	4680      	mov	r8, r0
 8027168:	e7e3      	b.n	8027132 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802716a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802716e:	446b      	add	r3, sp
 8027170:	2220      	movs	r2, #32
 8027172:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8027176:	3001      	adds	r0, #1
 8027178:	2828      	cmp	r0, #40	@ 0x28
 802717a:	d9f6      	bls.n	802716a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802717c:	1e41      	subs	r1, r0, #1
 802717e:	a807      	add	r0, sp, #28
 8027180:	f7fa fb34 	bl	80217ec <logs>
}
 8027184:	b012      	add	sp, #72	@ 0x48
 8027186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802718a:	bf00      	nop
 802718c:	0803c2dc 	.word	0x0803c2dc

08027190 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8027190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027194:	b084      	sub	sp, #16
 8027196:	4605      	mov	r5, r0
 8027198:	460e      	mov	r6, r1
 802719a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802719c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80271a0:	2100      	movs	r1, #0
 80271a2:	4640      	mov	r0, r8
 80271a4:	f006 fbb4 	bl	802d910 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80271a8:	2e0b      	cmp	r6, #11
 80271aa:	f240 808b 	bls.w	80272c4 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80271ae:	88a8      	ldrh	r0, [r5, #4]
 80271b0:	f7ff fc70 	bl	8026a94 <mg_ntohs>
 80271b4:	2801      	cmp	r0, #1
 80271b6:	f200 8089 	bhi.w	80272cc <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 80271ba:	88e8      	ldrh	r0, [r5, #6]
 80271bc:	f7ff fc6a 	bl	8026a94 <mg_ntohs>
 80271c0:	4604      	mov	r4, r0
 80271c2:	4681      	mov	r9, r0
  if (num_answers > 10) {
 80271c4:	280a      	cmp	r0, #10
 80271c6:	d905      	bls.n	80271d4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80271c8:	4b43      	ldr	r3, [pc, #268]	@ (80272d8 <mg_dns_parse+0x148>)
 80271ca:	681b      	ldr	r3, [r3, #0]
 80271cc:	2b02      	cmp	r3, #2
 80271ce:	dc1a      	bgt.n	8027206 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80271d0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80271d4:	8828      	ldrh	r0, [r5, #0]
 80271d6:	f7ff fc5d 	bl	8026a94 <mg_ntohs>
 80271da:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80271de:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80271e0:	2700      	movs	r7, #0
 80271e2:	88a8      	ldrh	r0, [r5, #4]
 80271e4:	f7ff fc56 	bl	8026a94 <mg_ntohs>
 80271e8:	42b8      	cmp	r0, r7
 80271ea:	d91a      	bls.n	8027222 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80271ec:	ab02      	add	r3, sp, #8
 80271ee:	9300      	str	r3, [sp, #0]
 80271f0:	2301      	movs	r3, #1
 80271f2:	4622      	mov	r2, r4
 80271f4:	4631      	mov	r1, r6
 80271f6:	4628      	mov	r0, r5
 80271f8:	f7fc fba4 	bl	8023944 <mg_dns_parse_rr>
 80271fc:	2800      	cmp	r0, #0
 80271fe:	d067      	beq.n	80272d0 <mg_dns_parse+0x140>
    ofs += n;
 8027200:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8027202:	3701      	adds	r7, #1
 8027204:	e7ed      	b.n	80271e2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8027206:	4b35      	ldr	r3, [pc, #212]	@ (80272dc <mg_dns_parse+0x14c>)
 8027208:	f240 4293 	movw	r2, #1171	@ 0x493
 802720c:	4934      	ldr	r1, [pc, #208]	@ (80272e0 <mg_dns_parse+0x150>)
 802720e:	2003      	movs	r0, #3
 8027210:	f7ff ff82 	bl	8027118 <mg_log_prefix>
 8027214:	4621      	mov	r1, r4
 8027216:	4833      	ldr	r0, [pc, #204]	@ (80272e4 <mg_dns_parse+0x154>)
 8027218:	f7fd fe2c 	bl	8024e74 <mg_log>
    num_answers = 10;  // Sanity cap
 802721c:	f04f 090a 	mov.w	r9, #10
 8027220:	e7d8      	b.n	80271d4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8027222:	2700      	movs	r7, #0
 8027224:	e013      	b.n	802724e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8027226:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802722a:	2a01      	cmp	r2, #1
 802722c:	d12a      	bne.n	8027284 <mg_dns_parse+0xf4>
 802722e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8027232:	2a01      	cmp	r2, #1
 8027234:	d126      	bne.n	8027284 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8027236:	2300      	movs	r3, #0
 8027238:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802723c:	3c04      	subs	r4, #4
 802723e:	592b      	ldr	r3, [r5, r4]
 8027240:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8027244:	2001      	movs	r0, #1
 8027246:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802724a:	e03c      	b.n	80272c6 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802724c:	3701      	adds	r7, #1
 802724e:	454f      	cmp	r7, r9
 8027250:	d236      	bcs.n	80272c0 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8027252:	ab02      	add	r3, sp, #8
 8027254:	9300      	str	r3, [sp, #0]
 8027256:	2300      	movs	r3, #0
 8027258:	4622      	mov	r2, r4
 802725a:	4631      	mov	r1, r6
 802725c:	4628      	mov	r0, r5
 802725e:	f7fc fb71 	bl	8023944 <mg_dns_parse_rr>
 8027262:	4682      	mov	sl, r0
 8027264:	b3b0      	cbz	r0, 80272d4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8027266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802726a:	9300      	str	r3, [sp, #0]
 802726c:	f108 0318 	add.w	r3, r8, #24
 8027270:	4622      	mov	r2, r4
 8027272:	4631      	mov	r1, r6
 8027274:	4628      	mov	r0, r5
 8027276:	f7fb fa54 	bl	8022722 <mg_dns_parse_name>
    ofs += n;
 802727a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802727c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8027280:	2b04      	cmp	r3, #4
 8027282:	d0d0      	beq.n	8027226 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8027284:	2b10      	cmp	r3, #16
 8027286:	d1e1      	bne.n	802724c <mg_dns_parse+0xbc>
 8027288:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802728c:	2b1c      	cmp	r3, #28
 802728e:	d1dd      	bne.n	802724c <mg_dns_parse+0xbc>
 8027290:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8027294:	2b01      	cmp	r3, #1
 8027296:	d1d9      	bne.n	802724c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8027298:	2001      	movs	r0, #1
 802729a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802729e:	3c10      	subs	r4, #16
 80272a0:	192b      	adds	r3, r5, r4
 80272a2:	592c      	ldr	r4, [r5, r4]
 80272a4:	6859      	ldr	r1, [r3, #4]
 80272a6:	689a      	ldr	r2, [r3, #8]
 80272a8:	68db      	ldr	r3, [r3, #12]
 80272aa:	f8c8 4004 	str.w	r4, [r8, #4]
 80272ae:	f8c8 1008 	str.w	r1, [r8, #8]
 80272b2:	f8c8 200c 	str.w	r2, [r8, #12]
 80272b6:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 80272ba:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80272be:	e002      	b.n	80272c6 <mg_dns_parse+0x136>
  return true;
 80272c0:	2001      	movs	r0, #1
 80272c2:	e000      	b.n	80272c6 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80272c4:	2000      	movs	r0, #0
}
 80272c6:	b004      	add	sp, #16
 80272c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80272cc:	2000      	movs	r0, #0
 80272ce:	e7fa      	b.n	80272c6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80272d0:	2000      	movs	r0, #0
 80272d2:	e7f8      	b.n	80272c6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80272d4:	2000      	movs	r0, #0
 80272d6:	e7f6      	b.n	80272c6 <mg_dns_parse+0x136>
 80272d8:	2000012c 	.word	0x2000012c
 80272dc:	0803cd68 	.word	0x0803cd68
 80272e0:	0803c2f0 	.word	0x0803c2f0
 80272e4:	0803c320 	.word	0x0803c320

080272e8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80272e8:	b40e      	push	{r1, r2, r3}
 80272ea:	b510      	push	{r4, lr}
 80272ec:	b093      	sub	sp, #76	@ 0x4c
 80272ee:	4604      	mov	r4, r0
 80272f0:	ab15      	add	r3, sp, #84	@ 0x54
 80272f2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80272f6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80272f8:	ab01      	add	r3, sp, #4
 80272fa:	2140      	movs	r1, #64	@ 0x40
 80272fc:	a802      	add	r0, sp, #8
 80272fe:	f7fd fdf7 	bl	8024ef0 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8027302:	4b11      	ldr	r3, [pc, #68]	@ (8027348 <mg_error+0x60>)
 8027304:	681b      	ldr	r3, [r3, #0]
 8027306:	2b00      	cmp	r3, #0
 8027308:	dc0f      	bgt.n	802732a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 802730a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802730e:	f043 0320 	orr.w	r3, r3, #32
 8027312:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8027316:	aa02      	add	r2, sp, #8
 8027318:	2100      	movs	r1, #0
 802731a:	4620      	mov	r0, r4
 802731c:	f7fc fb61 	bl	80239e2 <mg_call>
}
 8027320:	b013      	add	sp, #76	@ 0x4c
 8027322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027326:	b003      	add	sp, #12
 8027328:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 802732a:	4b08      	ldr	r3, [pc, #32]	@ (802734c <mg_error+0x64>)
 802732c:	f240 5253 	movw	r2, #1363	@ 0x553
 8027330:	4907      	ldr	r1, [pc, #28]	@ (8027350 <mg_error+0x68>)
 8027332:	2001      	movs	r0, #1
 8027334:	f7ff fef0 	bl	8027118 <mg_log_prefix>
 8027338:	ab02      	add	r3, sp, #8
 802733a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802733c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802733e:	4805      	ldr	r0, [pc, #20]	@ (8027354 <mg_error+0x6c>)
 8027340:	f7fd fd98 	bl	8024e74 <mg_log>
 8027344:	e7e1      	b.n	802730a <mg_error+0x22>
 8027346:	bf00      	nop
 8027348:	2000012c 	.word	0x2000012c
 802734c:	0803cd44 	.word	0x0803cd44
 8027350:	0803c2f0 	.word	0x0803c2f0
 8027354:	0803c34c 	.word	0x0803c34c

08027358 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8027358:	b570      	push	{r4, r5, r6, lr}
 802735a:	b082      	sub	sp, #8
 802735c:	4606      	mov	r6, r0
 802735e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8027360:	6809      	ldr	r1, [r1, #0]
 8027362:	68a5      	ldr	r5, [r4, #8]
 8027364:	6862      	ldr	r2, [r4, #4]
 8027366:	1b52      	subs	r2, r2, r5
 8027368:	4429      	add	r1, r5
 802736a:	f7ff f9cb 	bl	8026704 <mg_tls_recv>
 802736e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8027370:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027374:	d003      	beq.n	802737e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8027376:	2800      	cmp	r0, #0
 8027378:	dc06      	bgt.n	8027388 <handle_tls_recv+0x30>
}
 802737a:	b002      	add	sp, #8
 802737c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 802737e:	4906      	ldr	r1, [pc, #24]	@ (8027398 <handle_tls_recv+0x40>)
 8027380:	4630      	mov	r0, r6
 8027382:	f7ff ffb1 	bl	80272e8 <mg_error>
 8027386:	e7f8      	b.n	802737a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8027388:	4405      	add	r5, r0
 802738a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 802738c:	aa01      	add	r2, sp, #4
 802738e:	2107      	movs	r1, #7
 8027390:	4630      	mov	r0, r6
 8027392:	f7fc fb26 	bl	80239e2 <mg_call>
}
 8027396:	e7f0      	b.n	802737a <handle_tls_recv+0x22>
 8027398:	0803c358 	.word	0x0803c358

0802739c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273a0:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80273a4:	4607      	mov	r7, r0
 80273a6:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 80273a8:	2907      	cmp	r1, #7
 80273aa:	f000 80e3 	beq.w	8027574 <http_cb+0x1d8>
 80273ae:	2909      	cmp	r1, #9
 80273b0:	f000 814a 	beq.w	8027648 <http_cb+0x2ac>
 80273b4:	2902      	cmp	r1, #2
 80273b6:	f040 80d9 	bne.w	802756c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80273ba:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 80273be:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80273c2:	f023 030b 	bic.w	r3, r3, #11
 80273c6:	04db      	lsls	r3, r3, #19
 80273c8:	0cdb      	lsrs	r3, r3, #19
 80273ca:	2b04      	cmp	r3, #4
 80273cc:	f040 80ce 	bne.w	802756c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 80273d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	f000 80ca 	beq.w	802756c <http_cb+0x1d0>
 80273d8:	f04f 0900 	mov.w	r9, #0
 80273dc:	e0cc      	b.n	8027578 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80273de:	4b9f      	ldr	r3, [pc, #636]	@ (802765c <http_cb+0x2c0>)
 80273e0:	681b      	ldr	r3, [r3, #0]
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	dc11      	bgt.n	802740a <http_cb+0x6e>
        c->is_draining = 1;
 80273e6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80273ea:	f043 0310 	orr.w	r3, r3, #16
 80273ee:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80273f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80273f4:	eba3 0109 	sub.w	r1, r3, r9
 80273f8:	2910      	cmp	r1, #16
 80273fa:	bf28      	it	cs
 80273fc:	2110      	movcs	r1, #16
 80273fe:	4620      	mov	r0, r4
 8027400:	f7fc fe9a 	bl	8024138 <mg_hexdump>
        c->recv.len = 0;
 8027404:	2300      	movs	r3, #0
 8027406:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8027408:	e0b0      	b.n	802756c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802740a:	4b95      	ldr	r3, [pc, #596]	@ (8027660 <http_cb+0x2c4>)
 802740c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8027410:	4994      	ldr	r1, [pc, #592]	@ (8027664 <http_cb+0x2c8>)
 8027412:	2001      	movs	r0, #1
 8027414:	f7ff fe80 	bl	8027118 <mg_log_prefix>
 8027418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802741a:	4893      	ldr	r0, [pc, #588]	@ (8027668 <http_cb+0x2cc>)
 802741c:	f7fd fd2a 	bl	8024e74 <mg_log>
 8027420:	e7e1      	b.n	80273e6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8027422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027424:	eba3 0309 	sub.w	r3, r3, r9
 8027428:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 802742a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 802742c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 802742e:	1a52      	subs	r2, r2, r1
 8027430:	1a9b      	subs	r3, r3, r2
 8027432:	9383      	str	r3, [sp, #524]	@ 0x20c
 8027434:	e0bf      	b.n	80275b6 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8027436:	ad88      	add	r5, sp, #544	@ 0x220
 8027438:	498c      	ldr	r1, [pc, #560]	@ (802766c <http_cb+0x2d0>)
 802743a:	4628      	mov	r0, r5
 802743c:	f7fd fef8 	bl	8025230 <mg_str_s>
 8027440:	e895 000c 	ldmia.w	r5, {r2, r3}
 8027444:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027448:	f7fd ffed 	bl	8025426 <mg_strcasecmp>
 802744c:	4604      	mov	r4, r0
 802744e:	b950      	cbnz	r0, 8027466 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8027450:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8027452:	eb08 0309 	add.w	r3, r8, r9
 8027456:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8027458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802745a:	eba3 0309 	sub.w	r3, r3, r9
 802745e:	eba3 0b08 	sub.w	fp, r3, r8
 8027462:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8027464:	e04a      	b.n	80274fc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8027466:	4982      	ldr	r1, [pc, #520]	@ (8027670 <http_cb+0x2d4>)
 8027468:	4638      	mov	r0, r7
 802746a:	f7ff ff3d 	bl	80272e8 <mg_error>
          return;
 802746e:	e07d      	b.n	802756c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8027470:	2205      	movs	r2, #5
 8027472:	4980      	ldr	r1, [pc, #512]	@ (8027674 <http_cb+0x2d8>)
 8027474:	9802      	ldr	r0, [sp, #8]
 8027476:	f7f9 fc03 	bl	8020c80 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802747a:	2800      	cmp	r0, #0
 802747c:	d032      	beq.n	80274e4 <http_cb+0x148>
 802747e:	ac8a      	add	r4, sp, #552	@ 0x228
 8027480:	497d      	ldr	r1, [pc, #500]	@ (8027678 <http_cb+0x2dc>)
 8027482:	4620      	mov	r0, r4
 8027484:	f7fd fed4 	bl	8025230 <mg_str_s>
 8027488:	a902      	add	r1, sp, #8
 802748a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802748e:	c903      	ldmia	r1, {r0, r1}
 8027490:	f7fd ffc9 	bl	8025426 <mg_strcasecmp>
 8027494:	b9c0      	cbnz	r0, 80274c8 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8027496:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8027498:	4a78      	ldr	r2, [pc, #480]	@ (802767c <http_cb+0x2e0>)
 802749a:	4613      	mov	r3, r2
 802749c:	f240 119b 	movw	r1, #411	@ 0x19b
 80274a0:	4638      	mov	r0, r7
 80274a2:	f7fd fd3b 	bl	8024f1c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 80274a6:	4b6d      	ldr	r3, [pc, #436]	@ (802765c <http_cb+0x2c0>)
 80274a8:	681b      	ldr	r3, [r3, #0]
 80274aa:	2b00      	cmp	r3, #0
 80274ac:	f340 8092 	ble.w	80275d4 <http_cb+0x238>
 80274b0:	4b6b      	ldr	r3, [pc, #428]	@ (8027660 <http_cb+0x2c4>)
 80274b2:	f640 42ca 	movw	r2, #3274	@ 0xcca
 80274b6:	496b      	ldr	r1, [pc, #428]	@ (8027664 <http_cb+0x2c8>)
 80274b8:	2001      	movs	r0, #1
 80274ba:	f7ff fe2d 	bl	8027118 <mg_log_prefix>
 80274be:	4970      	ldr	r1, [pc, #448]	@ (8027680 <http_cb+0x2e4>)
 80274c0:	4870      	ldr	r0, [pc, #448]	@ (8027684 <http_cb+0x2e8>)
 80274c2:	f7fd fcd7 	bl	8024e74 <mg_log>
      if (is_chunked) {
 80274c6:	e085      	b.n	80275d4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 80274c8:	ac8c      	add	r4, sp, #560	@ 0x230
 80274ca:	496f      	ldr	r1, [pc, #444]	@ (8027688 <http_cb+0x2ec>)
 80274cc:	4620      	mov	r0, r4
 80274ce:	f7fd feaf 	bl	8025230 <mg_str_s>
 80274d2:	a902      	add	r1, sp, #8
 80274d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80274d8:	c903      	ldmia	r1, {r0, r1}
 80274da:	f7fd ffa4 	bl	8025426 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80274de:	2800      	cmp	r0, #0
 80274e0:	d178      	bne.n	80275d4 <http_cb+0x238>
 80274e2:	e7d8      	b.n	8027496 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 80274e4:	a802      	add	r0, sp, #8
 80274e6:	f7fc fb6f 	bl	8023bc8 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 80274ea:	28c7      	cmp	r0, #199	@ 0xc7
 80274ec:	dd72      	ble.n	80275d4 <http_cb+0x238>
 80274ee:	28cc      	cmp	r0, #204	@ 0xcc
 80274f0:	d070      	beq.n	80275d4 <http_cb+0x238>
 80274f2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 80274f6:	d1cf      	bne.n	8027498 <http_cb+0xfc>
 80274f8:	e06c      	b.n	80275d4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80274fa:	4406      	add	r6, r0
 80274fc:	ab01      	add	r3, sp, #4
 80274fe:	466a      	mov	r2, sp
 8027500:	ebab 0106 	sub.w	r1, fp, r6
 8027504:	19a8      	adds	r0, r5, r6
 8027506:	f7fe fecd 	bl	80262a4 <skip_chunk>
 802750a:	2800      	cmp	r0, #0
 802750c:	dd02      	ble.n	8027514 <http_cb+0x178>
 802750e:	9b01      	ldr	r3, [sp, #4]
 8027510:	2b00      	cmp	r3, #0
 8027512:	d1f2      	bne.n	80274fa <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8027514:	b338      	cbz	r0, 8027566 <http_cb+0x1ca>
        if (cl < 0) {
 8027516:	2800      	cmp	r0, #0
 8027518:	db21      	blt.n	802755e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802751a:	2300      	movs	r3, #0
 802751c:	9383      	str	r3, [sp, #524]	@ 0x20c
 802751e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8027522:	ab01      	add	r3, sp, #4
 8027524:	466a      	mov	r2, sp
 8027526:	ebab 0104 	sub.w	r1, fp, r4
 802752a:	1928      	adds	r0, r5, r4
 802752c:	f7fe feba 	bl	80262a4 <skip_chunk>
 8027530:	1e06      	subs	r6, r0, #0
 8027532:	dd11      	ble.n	8027558 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8027534:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8027536:	9900      	ldr	r1, [sp, #0]
 8027538:	4421      	add	r1, r4
 802753a:	9a01      	ldr	r2, [sp, #4]
 802753c:	4429      	add	r1, r5
 802753e:	4428      	add	r0, r5
 8027540:	f006 f9cc 	bl	802d8dc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8027544:	4434      	add	r4, r6
 8027546:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8027548:	9b01      	ldr	r3, [sp, #4]
 802754a:	441a      	add	r2, r3
 802754c:	9283      	str	r2, [sp, #524]	@ 0x20c
 802754e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8027550:	441a      	add	r2, r3
 8027552:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8027554:	2b00      	cmp	r3, #0
 8027556:	d1e4      	bne.n	8027522 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8027558:	4444      	add	r4, r8
 802755a:	44a1      	add	r9, r4
 802755c:	e044      	b.n	80275e8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 802755e:	494b      	ldr	r1, [pc, #300]	@ (802768c <http_cb+0x2f0>)
 8027560:	4638      	mov	r0, r7
 8027562:	f7ff fec1 	bl	80272e8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8027566:	f1b9 0f00 	cmp.w	r9, #0
 802756a:	d170      	bne.n	802764e <http_cb+0x2b2>
}
 802756c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8027570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027574:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8027578:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 802757c:	2b00      	cmp	r3, #0
 802757e:	dbf2      	blt.n	8027566 <http_cb+0x1ca>
 8027580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8027582:	4549      	cmp	r1, r9
 8027584:	d9ef      	bls.n	8027566 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8027586:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8027588:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 802758a:	aa02      	add	r2, sp, #8
 802758c:	eba1 0109 	sub.w	r1, r1, r9
 8027590:	4620      	mov	r0, r4
 8027592:	f7fd ff77 	bl	8025484 <mg_http_parse>
      if (n < 0) {
 8027596:	f1b0 0800 	subs.w	r8, r0, #0
 802759a:	f6ff af20 	blt.w	80273de <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802759e:	f1b8 0f00 	cmp.w	r8, #0
 80275a2:	d0e0      	beq.n	8027566 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80275a4:	aa02      	add	r2, sp, #8
 80275a6:	210a      	movs	r1, #10
 80275a8:	4638      	mov	r0, r7
 80275aa:	f7fc fa1a 	bl	80239e2 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 80275ae:	f1ba 0f09 	cmp.w	sl, #9
 80275b2:	f43f af36 	beq.w	8027422 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 80275b6:	4936      	ldr	r1, [pc, #216]	@ (8027690 <http_cb+0x2f4>)
 80275b8:	a802      	add	r0, sp, #8
 80275ba:	f7fc fadb 	bl	8023b74 <mg_http_get_header>
 80275be:	4604      	mov	r4, r0
 80275c0:	2800      	cmp	r0, #0
 80275c2:	f47f af38 	bne.w	8027436 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80275c6:	4933      	ldr	r1, [pc, #204]	@ (8027694 <http_cb+0x2f8>)
 80275c8:	a802      	add	r0, sp, #8
 80275ca:	f7fc fad3 	bl	8023b74 <mg_http_get_header>
 80275ce:	2800      	cmp	r0, #0
 80275d0:	f43f af4e 	beq.w	8027470 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 80275d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80275d6:	eba3 0309 	sub.w	r3, r3, r9
 80275da:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 80275de:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80275e0:	429a      	cmp	r2, r3
 80275e2:	d8c0      	bhi.n	8027566 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 80275e4:	4490      	add	r8, r2
 80275e6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80275e8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80275ec:	f013 0f04 	tst.w	r3, #4
 80275f0:	d005      	beq.n	80275fe <http_cb+0x262>
 80275f2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80275f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80275fa:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80275fe:	aa02      	add	r2, sp, #8
 8027600:	210b      	movs	r1, #11
 8027602:	4638      	mov	r0, r7
 8027604:	f7fc f9ed 	bl	80239e2 <mg_call>
      if (c->is_accepted) {
 8027608:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802760c:	f013 0f04 	tst.w	r3, #4
 8027610:	d0b2      	beq.n	8027578 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8027612:	4921      	ldr	r1, [pc, #132]	@ (8027698 <http_cb+0x2fc>)
 8027614:	a802      	add	r0, sp, #8
 8027616:	f7fc faad 	bl	8023b74 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802761a:	4605      	mov	r5, r0
 802761c:	2800      	cmp	r0, #0
 802761e:	d0ab      	beq.n	8027578 <http_cb+0x1dc>
 8027620:	ac8e      	add	r4, sp, #568	@ 0x238
 8027622:	491e      	ldr	r1, [pc, #120]	@ (802769c <http_cb+0x300>)
 8027624:	4620      	mov	r0, r4
 8027626:	f7fd fe03 	bl	8025230 <mg_str_s>
 802762a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802762e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027632:	f7fd fef8 	bl	8025426 <mg_strcasecmp>
 8027636:	2800      	cmp	r0, #0
 8027638:	d19e      	bne.n	8027578 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 802763a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802763e:	f043 0310 	orr.w	r3, r3, #16
 8027642:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8027646:	e78e      	b.n	8027566 <http_cb+0x1ca>
 8027648:	f04f 0900 	mov.w	r9, #0
 802764c:	e794      	b.n	8027578 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802764e:	464a      	mov	r2, r9
 8027650:	2100      	movs	r1, #0
 8027652:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8027656:	f7ff f928 	bl	80268aa <mg_iobuf_del>
 802765a:	e787      	b.n	802756c <http_cb+0x1d0>
 802765c:	2000012c 	.word	0x2000012c
 8027660:	0803cd3c 	.word	0x0803cd3c
 8027664:	0803c2f0 	.word	0x0803c2f0
 8027668:	0803c368 	.word	0x0803c368
 802766c:	0803c380 	.word	0x0803c380
 8027670:	0803c388 	.word	0x0803c388
 8027674:	0803bae8 	.word	0x0803bae8
 8027678:	08037c9c 	.word	0x08037c9c
 802767c:	080381c0 	.word	0x080381c0
 8027680:	0803c3b4 	.word	0x0803c3b4
 8027684:	0803c608 	.word	0x0803c608
 8027688:	080389e8 	.word	0x080389e8
 802768c:	0803c3d8 	.word	0x0803c3d8
 8027690:	0803c390 	.word	0x0803c390
 8027694:	0803c3a4 	.word	0x0803c3a4
 8027698:	0803c3e8 	.word	0x0803c3e8
 802769c:	0803c3f4 	.word	0x0803c3f4

080276a0 <uri_to_path2>:
                        char *path, size_t path_size) {
 80276a0:	b082      	sub	sp, #8
 80276a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80276a6:	b086      	sub	sp, #24
 80276a8:	4681      	mov	r9, r0
 80276aa:	460e      	mov	r6, r1
 80276ac:	4690      	mov	r8, r2
 80276ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80276b0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80276b2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 80276b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80276b6:	9300      	str	r3, [sp, #0]
 80276b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80276ba:	4a6f      	ldr	r2, [pc, #444]	@ (8027878 <uri_to_path2+0x1d8>)
 80276bc:	4639      	mov	r1, r7
 80276be:	4628      	mov	r0, r5
 80276c0:	f7fc ff2e 	bl	8024520 <mg_snprintf>
  if (n + 2 >= path_size) {
 80276c4:	1c83      	adds	r3, r0, #2
 80276c6:	42bb      	cmp	r3, r7
 80276c8:	d227      	bcs.n	802771a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 80276ca:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 80276ce:	2300      	movs	r3, #0
 80276d0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80276d4:	b150      	cbz	r0, 80276ec <uri_to_path2+0x4c>
 80276d6:	182b      	adds	r3, r5, r0
 80276d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80276dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80276de:	d005      	beq.n	80276ec <uri_to_path2+0x4c>
 80276e0:	1c43      	adds	r3, r0, #1
 80276e2:	222f      	movs	r2, #47	@ 0x2f
 80276e4:	542a      	strb	r2, [r5, r0]
 80276e6:	2200      	movs	r2, #0
 80276e8:	54ea      	strb	r2, [r5, r3]
 80276ea:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 80276ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80276ee:	68f1      	ldr	r1, [r6, #12]
 80276f0:	428c      	cmp	r4, r1
 80276f2:	d31c      	bcc.n	802772e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 80276f4:	2300      	movs	r3, #0
 80276f6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80276fa:	ac02      	add	r4, sp, #8
 80276fc:	463a      	mov	r2, r7
 80276fe:	4629      	mov	r1, r5
 8027700:	4620      	mov	r0, r4
 8027702:	f7fd fda1 	bl	8025248 <mg_str_n>
 8027706:	e894 0003 	ldmia.w	r4, {r0, r1}
 802770a:	f7ff fcda 	bl	80270c2 <mg_path_is_sane>
 802770e:	b1c0      	cbz	r0, 8027742 <uri_to_path2+0xa2>
  n = strlen(path);
 8027710:	4628      	mov	r0, r5
 8027712:	f7e8 fdc5 	bl	80102a0 <strlen>
 8027716:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8027718:	e020      	b.n	802775c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 802771a:	4b58      	ldr	r3, [pc, #352]	@ (802787c <uri_to_path2+0x1dc>)
 802771c:	4a58      	ldr	r2, [pc, #352]	@ (8027880 <uri_to_path2+0x1e0>)
 802771e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027722:	4648      	mov	r0, r9
 8027724:	f7fd fbfa 	bl	8024f1c <mg_http_reply>
    return -1;
 8027728:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802772c:	e046      	b.n	80277bc <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802772e:	2300      	movs	r3, #0
 8027730:	9300      	str	r3, [sp, #0]
 8027732:	1a3b      	subs	r3, r7, r0
 8027734:	182a      	adds	r2, r5, r0
 8027736:	1b09      	subs	r1, r1, r4
 8027738:	68b0      	ldr	r0, [r6, #8]
 802773a:	4420      	add	r0, r4
 802773c:	f7fe fc06 	bl	8025f4c <mg_url_decode>
 8027740:	e7d8      	b.n	80276f4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8027742:	4b50      	ldr	r3, [pc, #320]	@ (8027884 <uri_to_path2+0x1e4>)
 8027744:	4a4e      	ldr	r2, [pc, #312]	@ (8027880 <uri_to_path2+0x1e0>)
 8027746:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802774a:	4648      	mov	r0, r9
 802774c:	f7fd fbe6 	bl	8024f1c <mg_http_reply>
    return -1;
 8027750:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8027754:	e032      	b.n	80277bc <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8027756:	2200      	movs	r2, #0
 8027758:	54ea      	strb	r2, [r5, r3]
 802775a:	461c      	mov	r4, r3
 802775c:	2c01      	cmp	r4, #1
 802775e:	d905      	bls.n	802776c <uri_to_path2+0xcc>
 8027760:	1e63      	subs	r3, r4, #1
 8027762:	f815 c003 	ldrb.w	ip, [r5, r3]
 8027766:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 802776a:	d0f4      	beq.n	8027756 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802776c:	f10d 0a10 	add.w	sl, sp, #16
 8027770:	4945      	ldr	r1, [pc, #276]	@ (8027888 <uri_to_path2+0x1e8>)
 8027772:	4650      	mov	r0, sl
 8027774:	f7fd fd5c 	bl	8025230 <mg_str_s>
 8027778:	e89a 000c 	ldmia.w	sl, {r2, r3}
 802777c:	f106 0108 	add.w	r1, r6, #8
 8027780:	c903      	ldmia	r1, {r0, r1}
 8027782:	f7fd fe26 	bl	80253d2 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8027786:	b1f8      	cbz	r0, 80277c8 <uri_to_path2+0x128>
 8027788:	f8d8 3000 	ldr.w	r3, [r8]
 802778c:	2200      	movs	r2, #0
 802778e:	4611      	mov	r1, r2
 8027790:	4628      	mov	r0, r5
 8027792:	4798      	blx	r3
 8027794:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8027796:	4b3d      	ldr	r3, [pc, #244]	@ (802788c <uri_to_path2+0x1ec>)
 8027798:	681b      	ldr	r3, [r3, #0]
 802779a:	2b03      	cmp	r3, #3
 802779c:	dc17      	bgt.n	80277ce <uri_to_path2+0x12e>
  if (flags == 0) {
 802779e:	f1ba 0f00 	cmp.w	sl, #0
 80277a2:	d00b      	beq.n	80277bc <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80277a4:	f01a 0104 	ands.w	r1, sl, #4
 80277a8:	d007      	beq.n	80277ba <uri_to_path2+0x11a>
 80277aa:	68f2      	ldr	r2, [r6, #12]
 80277ac:	b12a      	cbz	r2, 80277ba <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 80277ae:	68b3      	ldr	r3, [r6, #8]
 80277b0:	1898      	adds	r0, r3, r2
 80277b2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80277b6:	282f      	cmp	r0, #47	@ 0x2f
 80277b8:	d11b      	bne.n	80277f2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 80277ba:	bb39      	cbnz	r1, 802780c <uri_to_path2+0x16c>
}
 80277bc:	4650      	mov	r0, sl
 80277be:	b006      	add	sp, #24
 80277c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80277c4:	b002      	add	sp, #8
 80277c6:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 80277c8:	f04f 0a04 	mov.w	sl, #4
 80277cc:	e7e3      	b.n	8027796 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 80277ce:	4b30      	ldr	r3, [pc, #192]	@ (8027890 <uri_to_path2+0x1f0>)
 80277d0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 80277d4:	492f      	ldr	r1, [pc, #188]	@ (8027894 <uri_to_path2+0x1f4>)
 80277d6:	2004      	movs	r0, #4
 80277d8:	f7ff fc9e 	bl	8027118 <mg_log_prefix>
 80277dc:	f8cd a004 	str.w	sl, [sp, #4]
 80277e0:	9500      	str	r5, [sp, #0]
 80277e2:	68b3      	ldr	r3, [r6, #8]
 80277e4:	68f2      	ldr	r2, [r6, #12]
 80277e6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 80277ea:	482b      	ldr	r0, [pc, #172]	@ (8027898 <uri_to_path2+0x1f8>)
 80277ec:	f7fd fb42 	bl	8024e74 <mg_log>
 80277f0:	e7d5      	b.n	802779e <uri_to_path2+0xfe>
    mg_printf(c,
 80277f2:	492a      	ldr	r1, [pc, #168]	@ (802789c <uri_to_path2+0x1fc>)
 80277f4:	4648      	mov	r0, r9
 80277f6:	f7fd fb6b 	bl	8024ed0 <mg_printf>
    c->is_resp = 0;
 80277fa:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 80277fe:	f36f 13c7 	bfc	r3, #7, #1
 8027802:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8027806:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802780a:	e7d7      	b.n	80277bc <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 802780c:	192e      	adds	r6, r5, r4
 802780e:	1b3f      	subs	r7, r7, r4
 8027810:	4a23      	ldr	r2, [pc, #140]	@ (80278a0 <uri_to_path2+0x200>)
 8027812:	4639      	mov	r1, r7
 8027814:	4630      	mov	r0, r6
 8027816:	f7fc fe83 	bl	8024520 <mg_snprintf>
 802781a:	b130      	cbz	r0, 802782a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802781c:	f8d8 3000 	ldr.w	r3, [r8]
 8027820:	2200      	movs	r2, #0
 8027822:	4611      	mov	r1, r2
 8027824:	4628      	mov	r0, r5
 8027826:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8027828:	bb08      	cbnz	r0, 802786e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802782a:	4a1e      	ldr	r2, [pc, #120]	@ (80278a4 <uri_to_path2+0x204>)
 802782c:	4639      	mov	r1, r7
 802782e:	4630      	mov	r0, r6
 8027830:	f7fc fe76 	bl	8024520 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8027834:	b130      	cbz	r0, 8027844 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8027836:	f8d8 3000 	ldr.w	r3, [r8]
 802783a:	2200      	movs	r2, #0
 802783c:	4611      	mov	r1, r2
 802783e:	4628      	mov	r0, r5
 8027840:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8027842:	b9b0      	cbnz	r0, 8027872 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8027844:	4a18      	ldr	r2, [pc, #96]	@ (80278a8 <uri_to_path2+0x208>)
 8027846:	4639      	mov	r1, r7
 8027848:	4630      	mov	r0, r6
 802784a:	f7fc fe69 	bl	8024520 <mg_snprintf>
 802784e:	b158      	cbz	r0, 8027868 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8027850:	f8d8 3000 	ldr.w	r3, [r8]
 8027854:	2200      	movs	r2, #0
 8027856:	4611      	mov	r1, r2
 8027858:	4628      	mov	r0, r5
 802785a:	4798      	blx	r3
                    0 &&
 802785c:	b120      	cbz	r0, 8027868 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 802785e:	340b      	adds	r4, #11
 8027860:	2200      	movs	r2, #0
 8027862:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8027864:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8027866:	e7a9      	b.n	80277bc <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8027868:	2300      	movs	r3, #0
 802786a:	7033      	strb	r3, [r6, #0]
 802786c:	e7a6      	b.n	80277bc <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802786e:	4682      	mov	sl, r0
 8027870:	e7a4      	b.n	80277bc <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8027872:	4682      	mov	sl, r0
 8027874:	e7a2      	b.n	80277bc <uri_to_path2+0x11c>
 8027876:	bf00      	nop
 8027878:	0803ba40 	.word	0x0803ba40
 802787c:	0803c3fc 	.word	0x0803c3fc
 8027880:	080381c0 	.word	0x080381c0
 8027884:	0803c410 	.word	0x0803c410
 8027888:	0803baec 	.word	0x0803baec
 802788c:	2000012c 	.word	0x2000012c
 8027890:	0803cd2c 	.word	0x0803cd2c
 8027894:	0803c2f0 	.word	0x0803c2f0
 8027898:	0803c420 	.word	0x0803c420
 802789c:	0803c434 	.word	0x0803c434
 80278a0:	0803c470 	.word	0x0803c470
 80278a4:	0803c47c 	.word	0x0803c47c
 80278a8:	0803c48c 	.word	0x0803c48c

080278ac <uri_to_path>:
                       size_t path_size) {
 80278ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278b0:	b096      	sub	sp, #88	@ 0x58
 80278b2:	4606      	mov	r6, r0
 80278b4:	460d      	mov	r5, r1
 80278b6:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80278b8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80278bc:	f1b8 0f00 	cmp.w	r8, #0
 80278c0:	d069      	beq.n	8027996 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80278c2:	6811      	ldr	r1, [r2, #0]
 80278c4:	a80c      	add	r0, sp, #48	@ 0x30
 80278c6:	f7fd fcb3 	bl	8025230 <mg_str_s>
 80278ca:	2300      	movs	r3, #0
 80278cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80278ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80278d0:	ab08      	add	r3, sp, #32
 80278d2:	aa0a      	add	r2, sp, #40	@ 0x28
 80278d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80278d8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80278dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80278de:	222c      	movs	r2, #44	@ 0x2c
 80278e0:	9200      	str	r2, [sp, #0]
 80278e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80278e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80278e8:	f7fd ff5f 	bl	80257aa <mg_span>
 80278ec:	2800      	cmp	r0, #0
 80278ee:	d055      	beq.n	802799c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80278f0:	233d      	movs	r3, #61	@ 0x3d
 80278f2:	9300      	str	r3, [sp, #0]
 80278f4:	ab10      	add	r3, sp, #64	@ 0x40
 80278f6:	aa12      	add	r2, sp, #72	@ 0x48
 80278f8:	ac0e      	add	r4, sp, #56	@ 0x38
 80278fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80278fe:	f7fd ff54 	bl	80257aa <mg_span>
 8027902:	b978      	cbnz	r0, 8027924 <uri_to_path+0x78>
 8027904:	ab12      	add	r3, sp, #72	@ 0x48
 8027906:	e9d4 0100 	ldrd	r0, r1, [r4]
 802790a:	e883 0003 	stmia.w	r3, {r0, r1}
 802790e:	ac06      	add	r4, sp, #24
 8027910:	2200      	movs	r2, #0
 8027912:	4611      	mov	r1, r2
 8027914:	4620      	mov	r0, r4
 8027916:	f7fd fc97 	bl	8025248 <mg_str_n>
 802791a:	ab10      	add	r3, sp, #64	@ 0x40
 802791c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027920:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8027924:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027926:	b9c3      	cbnz	r3, 802795a <uri_to_path+0xae>
 8027928:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802792c:	ac12      	add	r4, sp, #72	@ 0x48
 802792e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027932:	e889 0003 	stmia.w	r9, {r0, r1}
 8027936:	f10d 0a18 	add.w	sl, sp, #24
 802793a:	4922      	ldr	r1, [pc, #136]	@ (80279c4 <uri_to_path+0x118>)
 802793c:	4650      	mov	r0, sl
 802793e:	f7fd fc77 	bl	8025230 <mg_str_s>
 8027942:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8027946:	e884 0003 	stmia.w	r4, {r0, r1}
 802794a:	ab0a      	add	r3, sp, #40	@ 0x28
 802794c:	e883 0003 	stmia.w	r3, {r0, r1}
 8027950:	ab08      	add	r3, sp, #32
 8027952:	e899 0003 	ldmia.w	r9, {r0, r1}
 8027956:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 802795a:	68eb      	ldr	r3, [r5, #12]
 802795c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802795e:	4293      	cmp	r3, r2
 8027960:	d3bc      	bcc.n	80278dc <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8027962:	ac14      	add	r4, sp, #80	@ 0x50
 8027964:	68a9      	ldr	r1, [r5, #8]
 8027966:	4620      	mov	r0, r4
 8027968:	f7fd fc6e 	bl	8025248 <mg_str_n>
 802796c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8027970:	a912      	add	r1, sp, #72	@ 0x48
 8027972:	c903      	ldmia	r1, {r0, r1}
 8027974:	f7fd fd2d 	bl	80253d2 <mg_strcmp>
 8027978:	2800      	cmp	r0, #0
 802797a:	d1af      	bne.n	80278dc <uri_to_path+0x30>
    u = k, p = v;
 802797c:	ab0a      	add	r3, sp, #40	@ 0x28
 802797e:	aa12      	add	r2, sp, #72	@ 0x48
 8027980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027984:	e883 0003 	stmia.w	r3, {r0, r1}
 8027988:	ab08      	add	r3, sp, #32
 802798a:	aa10      	add	r2, sp, #64	@ 0x40
 802798c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027990:	e883 0003 	stmia.w	r3, {r0, r1}
 8027994:	e7a2      	b.n	80278dc <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8027996:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 80279c8 <uri_to_path+0x11c>
 802799a:	e792      	b.n	80278c2 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 802799c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802799e:	9304      	str	r3, [sp, #16]
 80279a0:	9703      	str	r7, [sp, #12]
 80279a2:	ab01      	add	r3, sp, #4
 80279a4:	aa08      	add	r2, sp, #32
 80279a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80279aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80279ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80279b0:	9300      	str	r3, [sp, #0]
 80279b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80279b4:	4642      	mov	r2, r8
 80279b6:	4629      	mov	r1, r5
 80279b8:	4630      	mov	r0, r6
 80279ba:	f7ff fe71 	bl	80276a0 <uri_to_path2>
}
 80279be:	b016      	add	sp, #88	@ 0x58
 80279c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279c4:	0803baec 	.word	0x0803baec
 80279c8:	20000130 	.word	0x20000130

080279cc <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 80279cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80279d0:	b0a7      	sub	sp, #156	@ 0x9c
 80279d2:	4607      	mov	r7, r0
 80279d4:	460e      	mov	r6, r1
 80279d6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 80279d8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80279dc:	2380      	movs	r3, #128	@ 0x80
 80279de:	9300      	str	r3, [sp, #0]
 80279e0:	ab02      	add	r3, sp, #8
 80279e2:	f7ff ff63 	bl	80278ac <uri_to_path>
  if (flags < 0) {
 80279e6:	2800      	cmp	r0, #0
 80279e8:	db20      	blt.n	8027a2c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 80279ea:	f010 0f04 	tst.w	r0, #4
 80279ee:	d120      	bne.n	8027a32 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80279f0:	b1b0      	cbz	r0, 8027a20 <mg_http_serve_dir+0x54>
 80279f2:	f1b8 0f00 	cmp.w	r8, #0
 80279f6:	d013      	beq.n	8027a20 <mg_http_serve_dir+0x54>
 80279f8:	ac22      	add	r4, sp, #136	@ 0x88
 80279fa:	a902      	add	r1, sp, #8
 80279fc:	4620      	mov	r0, r4
 80279fe:	f7fd fc17 	bl	8025230 <mg_str_s>
 8027a02:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8027a06:	4641      	mov	r1, r8
 8027a08:	4648      	mov	r0, r9
 8027a0a:	f7fd fc11 	bl	8025230 <mg_str_s>
 8027a0e:	2300      	movs	r3, #0
 8027a10:	9300      	str	r3, [sp, #0]
 8027a12:	e899 000c 	ldmia.w	r9, {r2, r3}
 8027a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027a1a:	f7fd fe2b 	bl	8025674 <mg_match>
 8027a1e:	b978      	cbnz	r0, 8027a40 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8027a20:	462b      	mov	r3, r5
 8027a22:	aa02      	add	r2, sp, #8
 8027a24:	4631      	mov	r1, r6
 8027a26:	4638      	mov	r0, r7
 8027a28:	f7fd ffe0 	bl	80259ec <mg_http_serve_file>
}
 8027a2c:	b027      	add	sp, #156	@ 0x9c
 8027a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8027a32:	ab02      	add	r3, sp, #8
 8027a34:	462a      	mov	r2, r5
 8027a36:	4631      	mov	r1, r6
 8027a38:	4638      	mov	r0, r7
 8027a3a:	f7fe fbb3 	bl	80261a4 <listdir>
 8027a3e:	e7f5      	b.n	8027a2c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8027a40:	aa02      	add	r2, sp, #8
 8027a42:	6829      	ldr	r1, [r5, #0]
 8027a44:	4638      	mov	r0, r7
 8027a46:	f7fd fbe9 	bl	802521c <mg_http_serve_ssi>
 8027a4a:	e7ef      	b.n	8027a2c <mg_http_serve_dir+0x60>

08027a4c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8027a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a4e:	b0c3      	sub	sp, #268	@ 0x10c
 8027a50:	4605      	mov	r5, r0
 8027a52:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8027a54:	688b      	ldr	r3, [r1, #8]
 8027a56:	695e      	ldr	r6, [r3, #20]
 8027a58:	b1b6      	cbz	r6, 8027a88 <printdirentry+0x3c>
  size_t size = 0;
 8027a5a:	2300      	movs	r3, #0
 8027a5c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8027a5e:	2200      	movs	r2, #0
 8027a60:	2300      	movs	r3, #0
 8027a62:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8027a66:	9501      	str	r5, [sp, #4]
 8027a68:	232f      	movs	r3, #47	@ 0x2f
 8027a6a:	9300      	str	r3, [sp, #0]
 8027a6c:	68e3      	ldr	r3, [r4, #12]
 8027a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8027b60 <printdirentry+0x114>)
 8027a70:	2180      	movs	r1, #128	@ 0x80
 8027a72:	a81e      	add	r0, sp, #120	@ 0x78
 8027a74:	f7fc fd54 	bl	8024520 <mg_snprintf>
 8027a78:	2880      	cmp	r0, #128	@ 0x80
 8027a7a:	d913      	bls.n	8027aa4 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8027a7c:	4b39      	ldr	r3, [pc, #228]	@ (8027b64 <printdirentry+0x118>)
 8027a7e:	681b      	ldr	r3, [r3, #0]
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	dc03      	bgt.n	8027a8c <printdirentry+0x40>
}
 8027a84:	b043      	add	sp, #268	@ 0x10c
 8027a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8027a88:	4e37      	ldr	r6, [pc, #220]	@ (8027b68 <printdirentry+0x11c>)
 8027a8a:	e7e6      	b.n	8027a5a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8027a8c:	4b37      	ldr	r3, [pc, #220]	@ (8027b6c <printdirentry+0x120>)
 8027a8e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8027a92:	4937      	ldr	r1, [pc, #220]	@ (8027b70 <printdirentry+0x124>)
 8027a94:	2001      	movs	r0, #1
 8027a96:	f7ff fb3f 	bl	8027118 <mg_log_prefix>
 8027a9a:	4629      	mov	r1, r5
 8027a9c:	4835      	ldr	r0, [pc, #212]	@ (8027b74 <printdirentry+0x128>)
 8027a9e:	f7fd f9e9 	bl	8024e74 <mg_log>
 8027aa2:	e7ef      	b.n	8027a84 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8027aa4:	6833      	ldr	r3, [r6, #0]
 8027aa6:	aa3e      	add	r2, sp, #248	@ 0xf8
 8027aa8:	a941      	add	r1, sp, #260	@ 0x104
 8027aaa:	a81e      	add	r0, sp, #120	@ 0x78
 8027aac:	4798      	blx	r3
 8027aae:	b9a8      	cbnz	r0, 8027adc <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8027ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8027b64 <printdirentry+0x118>)
 8027ab2:	681b      	ldr	r3, [r3, #0]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	dde5      	ble.n	8027a84 <printdirentry+0x38>
 8027ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8027b6c <printdirentry+0x120>)
 8027aba:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8027abe:	492c      	ldr	r1, [pc, #176]	@ (8027b70 <printdirentry+0x124>)
 8027ac0:	2001      	movs	r0, #1
 8027ac2:	f7ff fb29 	bl	8027118 <mg_log_prefix>
 8027ac6:	6823      	ldr	r3, [r4, #0]
 8027ac8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8027aca:	f007 fc4f 	bl	802f36c <__errno>
 8027ace:	6803      	ldr	r3, [r0, #0]
 8027ad0:	aa1e      	add	r2, sp, #120	@ 0x78
 8027ad2:	4621      	mov	r1, r4
 8027ad4:	4828      	ldr	r0, [pc, #160]	@ (8027b78 <printdirentry+0x12c>)
 8027ad6:	f7fd f9cd 	bl	8024e74 <mg_log>
 8027ada:	e7d3      	b.n	8027a84 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8027adc:	f010 0604 	ands.w	r6, r0, #4
 8027ae0:	d02d      	beq.n	8027b3e <printdirentry+0xf2>
 8027ae2:	4f26      	ldr	r7, [pc, #152]	@ (8027b7c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8027ae4:	2e00      	cmp	r6, #0
 8027ae6:	d02c      	beq.n	8027b42 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8027ae8:	4b25      	ldr	r3, [pc, #148]	@ (8027b80 <printdirentry+0x134>)
 8027aea:	4a26      	ldr	r2, [pc, #152]	@ (8027b84 <printdirentry+0x138>)
 8027aec:	2128      	movs	r1, #40	@ 0x28
 8027aee:	a814      	add	r0, sp, #80	@ 0x50
 8027af0:	f7fc fd16 	bl	8024520 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8027af4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8027af6:	4a24      	ldr	r2, [pc, #144]	@ (8027b88 <printdirentry+0x13c>)
 8027af8:	2128      	movs	r1, #40	@ 0x28
 8027afa:	eb0d 0001 	add.w	r0, sp, r1
 8027afe:	f7fc fd0f 	bl	8024520 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8027b02:	4628      	mov	r0, r5
 8027b04:	f7e8 fbcc 	bl	80102a0 <strlen>
 8027b08:	4601      	mov	r1, r0
 8027b0a:	2380      	movs	r3, #128	@ 0x80
 8027b0c:	aa1e      	add	r2, sp, #120	@ 0x78
 8027b0e:	4628      	mov	r0, r5
 8027b10:	f7fd fa58 	bl	8024fc4 <mg_url_encode>
 8027b14:	4602      	mov	r2, r0
    mg_printf(d->c,
 8027b16:	6820      	ldr	r0, [r4, #0]
 8027b18:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8027b1a:	b9e6      	cbnz	r6, 8027b56 <printdirentry+0x10a>
 8027b1c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027b1e:	2400      	movs	r4, #0
 8027b20:	ae14      	add	r6, sp, #80	@ 0x50
 8027b22:	9608      	str	r6, [sp, #32]
 8027b24:	9306      	str	r3, [sp, #24]
 8027b26:	9407      	str	r4, [sp, #28]
 8027b28:	ab0a      	add	r3, sp, #40	@ 0x28
 8027b2a:	9304      	str	r3, [sp, #16]
 8027b2c:	9103      	str	r1, [sp, #12]
 8027b2e:	9702      	str	r7, [sp, #8]
 8027b30:	9501      	str	r5, [sp, #4]
 8027b32:	9700      	str	r7, [sp, #0]
 8027b34:	ab1e      	add	r3, sp, #120	@ 0x78
 8027b36:	4915      	ldr	r1, [pc, #84]	@ (8027b8c <printdirentry+0x140>)
 8027b38:	f7fd f9ca 	bl	8024ed0 <mg_printf>
}
 8027b3c:	e7a2      	b.n	8027a84 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8027b3e:	4f14      	ldr	r7, [pc, #80]	@ (8027b90 <printdirentry+0x144>)
 8027b40:	e7d0      	b.n	8027ae4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8027b42:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027b44:	9300      	str	r3, [sp, #0]
 8027b46:	2300      	movs	r3, #0
 8027b48:	9301      	str	r3, [sp, #4]
 8027b4a:	4a12      	ldr	r2, [pc, #72]	@ (8027b94 <printdirentry+0x148>)
 8027b4c:	2128      	movs	r1, #40	@ 0x28
 8027b4e:	a814      	add	r0, sp, #80	@ 0x50
 8027b50:	f7fc fce6 	bl	8024520 <mg_snprintf>
 8027b54:	e7ce      	b.n	8027af4 <printdirentry+0xa8>
    mg_printf(d->c,
 8027b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027b5a:	461c      	mov	r4, r3
 8027b5c:	e7e0      	b.n	8027b20 <printdirentry+0xd4>
 8027b5e:	bf00      	nop
 8027b60:	0803c49c 	.word	0x0803c49c
 8027b64:	2000012c 	.word	0x2000012c
 8027b68:	20000130 	.word	0x20000130
 8027b6c:	0803cd1c 	.word	0x0803cd1c
 8027b70:	0803c2f0 	.word	0x0803c2f0
 8027b74:	0803c4a4 	.word	0x0803c4a4
 8027b78:	0803c4b4 	.word	0x0803c4b4
 8027b7c:	0803baec 	.word	0x0803baec
 8027b80:	0803c4c8 	.word	0x0803c4c8
 8027b84:	0803c608 	.word	0x0803c608
 8027b88:	08037720 	.word	0x08037720
 8027b8c:	0803c4d8 	.word	0x0803c4d8
 8027b90:	080381c0 	.word	0x080381c0
 8027b94:	0803c4d0 	.word	0x0803c4d0

08027b98 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8027b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b9c:	b0ca      	sub	sp, #296	@ 0x128
 8027b9e:	4607      	mov	r7, r0
 8027ba0:	460d      	mov	r5, r1
 8027ba2:	4616      	mov	r6, r2
 8027ba4:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8027ba6:	2330      	movs	r3, #48	@ 0x30
 8027ba8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8027baa:	2400      	movs	r4, #0
 8027bac:	9444      	str	r4, [sp, #272]	@ 0x110
 8027bae:	9445      	str	r4, [sp, #276]	@ 0x114
 8027bb0:	9446      	str	r4, [sp, #280]	@ 0x118
 8027bb2:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8027bb4:	f101 0a10 	add.w	sl, r1, #16
 8027bb8:	2314      	movs	r3, #20
 8027bba:	aa43      	add	r2, sp, #268	@ 0x10c
 8027bbc:	4964      	ldr	r1, [pc, #400]	@ (8027d50 <mg_http_upload+0x1b8>)
 8027bbe:	4650      	mov	r0, sl
 8027bc0:	f7fe fa23 	bl	802600a <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8027bc4:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8027bc8:	2380      	movs	r3, #128	@ 0x80
 8027bca:	464a      	mov	r2, r9
 8027bcc:	4961      	ldr	r1, [pc, #388]	@ (8027d54 <mg_http_upload+0x1bc>)
 8027bce:	4650      	mov	r0, sl
 8027bd0:	f7fe fa1b 	bl	802600a <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8027bd4:	4622      	mov	r2, r4
 8027bd6:	4621      	mov	r1, r4
 8027bd8:	a843      	add	r0, sp, #268	@ 0x10c
 8027bda:	f005 fa1f 	bl	802d01c <strtol>
 8027bde:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8027be0:	f8cd 9004 	str.w	r9, [sp, #4]
 8027be4:	232f      	movs	r3, #47	@ 0x2f
 8027be6:	9300      	str	r3, [sp, #0]
 8027be8:	4643      	mov	r3, r8
 8027bea:	4a5b      	ldr	r2, [pc, #364]	@ (8027d58 <mg_http_upload+0x1c0>)
 8027bec:	2180      	movs	r1, #128	@ 0x80
 8027bee:	a803      	add	r0, sp, #12
 8027bf0:	f7fc fc96 	bl	8024520 <mg_snprintf>
  if (hm->body.len == 0) {
 8027bf4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8027bf8:	f1b8 0f00 	cmp.w	r8, #0
 8027bfc:	d047      	beq.n	8027c8e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8027bfe:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8027c02:	2b00      	cmp	r3, #0
 8027c04:	d04c      	beq.n	8027ca0 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8027c06:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8027c0a:	a923      	add	r1, sp, #140	@ 0x8c
 8027c0c:	4648      	mov	r0, r9
 8027c0e:	f7fd fb0f 	bl	8025230 <mg_str_s>
 8027c12:	e899 0003 	ldmia.w	r9, {r0, r1}
 8027c16:	f7ff fa54 	bl	80270c2 <mg_path_is_sane>
 8027c1a:	2800      	cmp	r0, #0
 8027c1c:	d04a      	beq.n	8027cb4 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8027c1e:	2c00      	cmp	r4, #0
 8027c20:	db54      	blt.n	8027ccc <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8027c22:	44a0      	add	r8, r4
 8027c24:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8027c26:	4598      	cmp	r8, r3
 8027c28:	d85a      	bhi.n	8027ce0 <mg_http_upload+0x148>
    size_t current_size = 0;
 8027c2a:	2300      	movs	r3, #0
 8027c2c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8027c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8027d5c <mg_http_upload+0x1c4>)
 8027c30:	681b      	ldr	r3, [r3, #0]
 8027c32:	2b02      	cmp	r3, #2
 8027c34:	dc61      	bgt.n	8027cfa <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8027c36:	b914      	cbnz	r4, 8027c3e <mg_http_upload+0xa6>
 8027c38:	6a33      	ldr	r3, [r6, #32]
 8027c3a:	a803      	add	r0, sp, #12
 8027c3c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8027c3e:	6833      	ldr	r3, [r6, #0]
 8027c40:	2200      	movs	r2, #0
 8027c42:	a902      	add	r1, sp, #8
 8027c44:	a803      	add	r0, sp, #12
 8027c46:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8027c48:	2c00      	cmp	r4, #0
 8027c4a:	dd02      	ble.n	8027c52 <mg_http_upload+0xba>
 8027c4c:	9b02      	ldr	r3, [sp, #8]
 8027c4e:	429c      	cmp	r4, r3
 8027c50:	d162      	bne.n	8027d18 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8027c52:	2202      	movs	r2, #2
 8027c54:	a903      	add	r1, sp, #12
 8027c56:	4630      	mov	r0, r6
 8027c58:	f7fb fed2 	bl	8023a00 <mg_fs_open>
 8027c5c:	4680      	mov	r8, r0
 8027c5e:	2800      	cmp	r0, #0
 8027c60:	d066      	beq.n	8027d30 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8027c62:	6973      	ldr	r3, [r6, #20]
 8027c64:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8027c68:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8027c6c:	6800      	ldr	r0, [r0, #0]
 8027c6e:	4798      	blx	r3
 8027c70:	4404      	add	r4, r0
      mg_fs_close(fd);
 8027c72:	4640      	mov	r0, r8
 8027c74:	f7fb fedd 	bl	8023a32 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8027c78:	9400      	str	r4, [sp, #0]
 8027c7a:	4b39      	ldr	r3, [pc, #228]	@ (8027d60 <mg_http_upload+0x1c8>)
 8027c7c:	4a39      	ldr	r2, [pc, #228]	@ (8027d64 <mg_http_upload+0x1cc>)
 8027c7e:	21c8      	movs	r1, #200	@ 0xc8
 8027c80:	4638      	mov	r0, r7
 8027c82:	f7fd f94b 	bl	8024f1c <mg_http_reply>
}
 8027c86:	4620      	mov	r0, r4
 8027c88:	b04a      	add	sp, #296	@ 0x128
 8027c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8027c8e:	2400      	movs	r4, #0
 8027c90:	9400      	str	r4, [sp, #0]
 8027c92:	4b33      	ldr	r3, [pc, #204]	@ (8027d60 <mg_http_upload+0x1c8>)
 8027c94:	4a33      	ldr	r2, [pc, #204]	@ (8027d64 <mg_http_upload+0x1cc>)
 8027c96:	21c8      	movs	r1, #200	@ 0xc8
 8027c98:	4638      	mov	r0, r7
 8027c9a:	f7fd f93f 	bl	8024f1c <mg_http_reply>
 8027c9e:	e7f2      	b.n	8027c86 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8027ca0:	4b31      	ldr	r3, [pc, #196]	@ (8027d68 <mg_http_upload+0x1d0>)
 8027ca2:	4a32      	ldr	r2, [pc, #200]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027ca4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027ca8:	4638      	mov	r0, r7
 8027caa:	f7fd f937 	bl	8024f1c <mg_http_reply>
    res = -1;
 8027cae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8027cb2:	e7e8      	b.n	8027c86 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8027cb4:	ab23      	add	r3, sp, #140	@ 0x8c
 8027cb6:	9300      	str	r3, [sp, #0]
 8027cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8027d70 <mg_http_upload+0x1d8>)
 8027cba:	4a2c      	ldr	r2, [pc, #176]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027cbc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027cc0:	4638      	mov	r0, r7
 8027cc2:	f7fd f92b 	bl	8024f1c <mg_http_reply>
    res = -2;
 8027cc6:	f06f 0401 	mvn.w	r4, #1
 8027cca:	e7dc      	b.n	8027c86 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8027ccc:	4b29      	ldr	r3, [pc, #164]	@ (8027d74 <mg_http_upload+0x1dc>)
 8027cce:	4a27      	ldr	r2, [pc, #156]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027cd0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027cd4:	4638      	mov	r0, r7
 8027cd6:	f7fd f921 	bl	8024f1c <mg_http_reply>
    res = -3;
 8027cda:	f06f 0402 	mvn.w	r4, #2
 8027cde:	e7d2      	b.n	8027c86 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8027ce0:	9301      	str	r3, [sp, #4]
 8027ce2:	ab03      	add	r3, sp, #12
 8027ce4:	9300      	str	r3, [sp, #0]
 8027ce6:	4b24      	ldr	r3, [pc, #144]	@ (8027d78 <mg_http_upload+0x1e0>)
 8027ce8:	4a20      	ldr	r2, [pc, #128]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027cea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027cee:	4638      	mov	r0, r7
 8027cf0:	f7fd f914 	bl	8024f1c <mg_http_reply>
    res = -4;
 8027cf4:	f06f 0403 	mvn.w	r4, #3
 8027cf8:	e7c5      	b.n	8027c86 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8027cfa:	4b20      	ldr	r3, [pc, #128]	@ (8027d7c <mg_http_upload+0x1e4>)
 8027cfc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8027d00:	491f      	ldr	r1, [pc, #124]	@ (8027d80 <mg_http_upload+0x1e8>)
 8027d02:	2003      	movs	r0, #3
 8027d04:	f7ff fa08 	bl	8027118 <mg_log_prefix>
 8027d08:	4623      	mov	r3, r4
 8027d0a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8027d0e:	a903      	add	r1, sp, #12
 8027d10:	481c      	ldr	r0, [pc, #112]	@ (8027d84 <mg_http_upload+0x1ec>)
 8027d12:	f7fd f8af 	bl	8024e74 <mg_log>
 8027d16:	e78e      	b.n	8027c36 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8027d18:	ab03      	add	r3, sp, #12
 8027d1a:	9300      	str	r3, [sp, #0]
 8027d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8027d88 <mg_http_upload+0x1f0>)
 8027d1e:	4a13      	ldr	r2, [pc, #76]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027d20:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027d24:	4638      	mov	r0, r7
 8027d26:	f7fd f8f9 	bl	8024f1c <mg_http_reply>
      res = -5;
 8027d2a:	f06f 0404 	mvn.w	r4, #4
 8027d2e:	e7aa      	b.n	8027c86 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8027d30:	f007 fb1c 	bl	802f36c <__errno>
 8027d34:	6803      	ldr	r3, [r0, #0]
 8027d36:	9301      	str	r3, [sp, #4]
 8027d38:	ab03      	add	r3, sp, #12
 8027d3a:	9300      	str	r3, [sp, #0]
 8027d3c:	4b13      	ldr	r3, [pc, #76]	@ (8027d8c <mg_http_upload+0x1f4>)
 8027d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8027d6c <mg_http_upload+0x1d4>)
 8027d40:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027d44:	4638      	mov	r0, r7
 8027d46:	f7fd f8e9 	bl	8024f1c <mg_http_reply>
      res = -6;
 8027d4a:	f06f 0405 	mvn.w	r4, #5
 8027d4e:	e79a      	b.n	8027c86 <mg_http_upload+0xee>
 8027d50:	0803c530 	.word	0x0803c530
 8027d54:	0803c558 	.word	0x0803c558
 8027d58:	0803c49c 	.word	0x0803c49c
 8027d5c:	2000012c 	.word	0x2000012c
 8027d60:	0803c538 	.word	0x0803c538
 8027d64:	08037b44 	.word	0x08037b44
 8027d68:	0803c53c 	.word	0x0803c53c
 8027d6c:	080381c0 	.word	0x080381c0
 8027d70:	0803c54c 	.word	0x0803c54c
 8027d74:	0803c560 	.word	0x0803c560
 8027d78:	0803c570 	.word	0x0803c570
 8027d7c:	0803cd0c 	.word	0x0803cd0c
 8027d80:	0803c2f0 	.word	0x0803c2f0
 8027d84:	0803c58c 	.word	0x0803c58c
 8027d88:	0803c5a4 	.word	0x0803c5a4
 8027d8c:	0803c5b8 	.word	0x0803c5b8

08027d90 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8027d90:	b570      	push	{r4, r5, r6, lr}
 8027d92:	b082      	sub	sp, #8
 8027d94:	4604      	mov	r4, r0
 8027d96:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8027d98:	68e1      	ldr	r1, [r4, #12]
 8027d9a:	f7f9 fbd1 	bl	8021540 <roundup>
  if (new_size == 0) {
 8027d9e:	b130      	cbz	r0, 8027dae <mg_iobuf_resize+0x1e>
 8027da0:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8027da2:	6863      	ldr	r3, [r4, #4]
 8027da4:	4283      	cmp	r3, r0
 8027da6:	d10f      	bne.n	8027dc8 <mg_iobuf_resize+0x38>
  int ok = 1;
 8027da8:	2001      	movs	r0, #1
}
 8027daa:	b002      	add	sp, #8
 8027dac:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8027dae:	6861      	ldr	r1, [r4, #4]
 8027db0:	6820      	ldr	r0, [r4, #0]
 8027db2:	f7fe fd6f 	bl	8026894 <mg_bzero>
    free(io->buf);
 8027db6:	6820      	ldr	r0, [r4, #0]
 8027db8:	f7f3 fde0 	bl	801b97c <vPortFree>
    io->buf = NULL;
 8027dbc:	2300      	movs	r3, #0
 8027dbe:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8027dc0:	6063      	str	r3, [r4, #4]
 8027dc2:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8027dc4:	2001      	movs	r0, #1
 8027dc6:	e7f0      	b.n	8027daa <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8027dc8:	4601      	mov	r1, r0
 8027dca:	2001      	movs	r0, #1
 8027dcc:	f7fb fc78 	bl	80236c0 <mg_calloc>
    if (p != NULL) {
 8027dd0:	4606      	mov	r6, r0
 8027dd2:	b198      	cbz	r0, 8027dfc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8027dd4:	68a2      	ldr	r2, [r4, #8]
 8027dd6:	42aa      	cmp	r2, r5
 8027dd8:	bf28      	it	cs
 8027dda:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8027ddc:	b11a      	cbz	r2, 8027de6 <mg_iobuf_resize+0x56>
 8027dde:	6821      	ldr	r1, [r4, #0]
 8027de0:	b109      	cbz	r1, 8027de6 <mg_iobuf_resize+0x56>
 8027de2:	f005 fd7b 	bl	802d8dc <memmove>
      mg_bzero(io->buf, io->size);
 8027de6:	6861      	ldr	r1, [r4, #4]
 8027de8:	6820      	ldr	r0, [r4, #0]
 8027dea:	f7fe fd53 	bl	8026894 <mg_bzero>
      free(io->buf);
 8027dee:	6820      	ldr	r0, [r4, #0]
 8027df0:	f7f3 fdc4 	bl	801b97c <vPortFree>
      io->buf = (unsigned char *) p;
 8027df4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8027df6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8027df8:	2001      	movs	r0, #1
 8027dfa:	e7d6      	b.n	8027daa <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8027dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8027e2c <mg_iobuf_resize+0x9c>)
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	2b00      	cmp	r3, #0
 8027e02:	dc01      	bgt.n	8027e08 <mg_iobuf_resize+0x78>
      ok = 0;
 8027e04:	2000      	movs	r0, #0
  return ok;
 8027e06:	e7d0      	b.n	8027daa <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8027e08:	4b09      	ldr	r3, [pc, #36]	@ (8027e30 <mg_iobuf_resize+0xa0>)
 8027e0a:	f640 5244 	movw	r2, #3396	@ 0xd44
 8027e0e:	4909      	ldr	r1, [pc, #36]	@ (8027e34 <mg_iobuf_resize+0xa4>)
 8027e10:	2001      	movs	r0, #1
 8027e12:	f7ff f981 	bl	8027118 <mg_log_prefix>
 8027e16:	2600      	movs	r6, #0
 8027e18:	9500      	str	r5, [sp, #0]
 8027e1a:	9601      	str	r6, [sp, #4]
 8027e1c:	6862      	ldr	r2, [r4, #4]
 8027e1e:	4633      	mov	r3, r6
 8027e20:	4805      	ldr	r0, [pc, #20]	@ (8027e38 <mg_iobuf_resize+0xa8>)
 8027e22:	f7fd f827 	bl	8024e74 <mg_log>
      ok = 0;
 8027e26:	4630      	mov	r0, r6
 8027e28:	e7bf      	b.n	8027daa <mg_iobuf_resize+0x1a>
 8027e2a:	bf00      	nop
 8027e2c:	2000012c 	.word	0x2000012c
 8027e30:	0803ccfc 	.word	0x0803ccfc
 8027e34:	0803c2f0 	.word	0x0803c2f0
 8027e38:	0803c5c8 	.word	0x0803c5c8

08027e3c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027e3c:	b538      	push	{r3, r4, r5, lr}
 8027e3e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8027e40:	2908      	cmp	r1, #8
 8027e42:	d004      	beq.n	8027e4e <static_cb+0x12>
 8027e44:	2902      	cmp	r1, #2
 8027e46:	d002      	beq.n	8027e4e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8027e48:	2909      	cmp	r1, #9
 8027e4a:	d02b      	beq.n	8027ea4 <static_cb+0x68>
}
 8027e4c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8027e4e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8027e52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027e58:	d31d      	bcc.n	8027e96 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8027e5a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8027e5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027e5e:	4299      	cmp	r1, r3
 8027e60:	d2f4      	bcs.n	8027e4c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8027e62:	1a5b      	subs	r3, r3, r1
 8027e64:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8027e68:	429a      	cmp	r2, r3
 8027e6a:	d300      	bcc.n	8027e6e <static_cb+0x32>
 8027e6c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8027e6e:	686b      	ldr	r3, [r5, #4]
 8027e70:	691b      	ldr	r3, [r3, #16]
 8027e72:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8027e74:	4401      	add	r1, r0
 8027e76:	6828      	ldr	r0, [r5, #0]
 8027e78:	4798      	blx	r3
    c->send.len += n;
 8027e7a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027e7c:	4403      	add	r3, r0
 8027e7e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8027e80:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8027e84:	1a1b      	subs	r3, r3, r0
 8027e86:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8027e8a:	2800      	cmp	r0, #0
 8027e8c:	d1de      	bne.n	8027e4c <static_cb+0x10>
 8027e8e:	4620      	mov	r0, r4
 8027e90:	f7fb fddc 	bl	8023a4c <restore_http_cb>
 8027e94:	e7da      	b.n	8027e4c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8027e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8027e9a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027e9e:	f7ff ff77 	bl	8027d90 <mg_iobuf_resize>
 8027ea2:	e7da      	b.n	8027e5a <static_cb+0x1e>
    restore_http_cb(c);
 8027ea4:	f7fb fdd2 	bl	8023a4c <restore_http_cb>
  (void) ev_data;
 8027ea8:	e7d0      	b.n	8027e4c <static_cb+0x10>

08027eaa <mg_iobuf_add>:
                    size_t len) {
 8027eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027eae:	4604      	mov	r4, r0
 8027eb0:	460f      	mov	r7, r1
 8027eb2:	4690      	mov	r8, r2
 8027eb4:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8027eb6:	6880      	ldr	r0, [r0, #8]
 8027eb8:	68e1      	ldr	r1, [r4, #12]
 8027eba:	4418      	add	r0, r3
 8027ebc:	f7f9 fb40 	bl	8021540 <roundup>
 8027ec0:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8027ec2:	4601      	mov	r1, r0
 8027ec4:	4620      	mov	r0, r4
 8027ec6:	f7ff ff63 	bl	8027d90 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8027eca:	6863      	ldr	r3, [r4, #4]
 8027ecc:	42b3      	cmp	r3, r6
 8027ece:	d000      	beq.n	8027ed2 <mg_iobuf_add+0x28>
 8027ed0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8027ed2:	68a2      	ldr	r2, [r4, #8]
 8027ed4:	42ba      	cmp	r2, r7
 8027ed6:	d812      	bhi.n	8027efe <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8027ed8:	f1b8 0f00 	cmp.w	r8, #0
 8027edc:	d005      	beq.n	8027eea <mg_iobuf_add+0x40>
 8027ede:	6820      	ldr	r0, [r4, #0]
 8027ee0:	462a      	mov	r2, r5
 8027ee2:	4641      	mov	r1, r8
 8027ee4:	4438      	add	r0, r7
 8027ee6:	f005 fcf9 	bl	802d8dc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8027eea:	68a3      	ldr	r3, [r4, #8]
 8027eec:	42bb      	cmp	r3, r7
 8027eee:	d200      	bcs.n	8027ef2 <mg_iobuf_add+0x48>
 8027ef0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8027ef2:	68a3      	ldr	r3, [r4, #8]
 8027ef4:	442b      	add	r3, r5
 8027ef6:	60a3      	str	r3, [r4, #8]
}
 8027ef8:	4628      	mov	r0, r5
 8027efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8027efe:	6823      	ldr	r3, [r4, #0]
 8027f00:	19e8      	adds	r0, r5, r7
 8027f02:	1bd2      	subs	r2, r2, r7
 8027f04:	19d9      	adds	r1, r3, r7
 8027f06:	4418      	add	r0, r3
 8027f08:	f005 fce8 	bl	802d8dc <memmove>
 8027f0c:	e7e4      	b.n	8027ed8 <mg_iobuf_add+0x2e>

08027f0e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 8027f0e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8027f10:	2100      	movs	r1, #0
 8027f12:	f7ff ff3d 	bl	8027d90 <mg_iobuf_resize>
}
 8027f16:	bd08      	pop	{r3, pc}

08027f18 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027f18:	b538      	push	{r3, r4, r5, lr}
 8027f1a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8027f1c:	2201      	movs	r2, #1
 8027f1e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8027f20:	f7fb fbf3 	bl	802370a <getpeer>
  if (c == NULL) {
 8027f24:	b368      	cbz	r0, 8027f82 <rx_udp+0x6a>
 8027f26:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8027f28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8027f2a:	881b      	ldrh	r3, [r3, #0]
 8027f2c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8027f2e:	69e3      	ldr	r3, [r4, #28]
 8027f30:	68db      	ldr	r3, [r3, #12]
 8027f32:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027f34:	6923      	ldr	r3, [r4, #16]
 8027f36:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8027f3a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 8027f3e:	895b      	ldrh	r3, [r3, #10]
 8027f40:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8027f44:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8027f46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8027f4a:	d21b      	bcs.n	8027f84 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8027f4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8027f4e:	1ad2      	subs	r2, r2, r3
 8027f50:	68e1      	ldr	r1, [r4, #12]
 8027f52:	428a      	cmp	r2, r1
 8027f54:	d204      	bcs.n	8027f60 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8027f56:	4419      	add	r1, r3
 8027f58:	3038      	adds	r0, #56	@ 0x38
 8027f5a:	f7ff ff19 	bl	8027d90 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8027f5e:	b1a8      	cbz	r0, 8027f8c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8027f60:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8027f62:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027f64:	68e2      	ldr	r2, [r4, #12]
 8027f66:	68a1      	ldr	r1, [r4, #8]
 8027f68:	4418      	add	r0, r3
 8027f6a:	f007 fa37 	bl	802f3dc <memcpy>
      c->recv.len += pkt->pay.len;
 8027f6e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027f70:	4622      	mov	r2, r4
 8027f72:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8027f76:	440b      	add	r3, r1
 8027f78:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8027f7a:	2107      	movs	r1, #7
 8027f7c:	4628      	mov	r0, r5
 8027f7e:	f7fb fd30 	bl	80239e2 <mg_call>
}
 8027f82:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8027f84:	4904      	ldr	r1, [pc, #16]	@ (8027f98 <rx_udp+0x80>)
 8027f86:	f7ff f9af 	bl	80272e8 <mg_error>
 8027f8a:	e7fa      	b.n	8027f82 <rx_udp+0x6a>
      mg_error(c, "oom");
 8027f8c:	4903      	ldr	r1, [pc, #12]	@ (8027f9c <rx_udp+0x84>)
 8027f8e:	4628      	mov	r0, r5
 8027f90:	f7ff f9aa 	bl	80272e8 <mg_error>
 8027f94:	e7f5      	b.n	8027f82 <rx_udp+0x6a>
 8027f96:	bf00      	nop
 8027f98:	0803c5d4 	.word	0x0803c5d4
 8027f9c:	0803c5f0 	.word	0x0803c5f0

08027fa0 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8027fa0:	b538      	push	{r3, r4, r5, lr}
 8027fa2:	4605      	mov	r5, r0
 8027fa4:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027fa6:	b122      	cbz	r2, 8027fb2 <mg_pfn_iobuf_private+0x12>
 8027fa8:	6889      	ldr	r1, [r1, #8]
 8027faa:	3102      	adds	r1, #2
 8027fac:	6863      	ldr	r3, [r4, #4]
 8027fae:	4299      	cmp	r1, r3
 8027fb0:	d80d      	bhi.n	8027fce <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027fb2:	68a3      	ldr	r3, [r4, #8]
 8027fb4:	1c99      	adds	r1, r3, #2
 8027fb6:	6862      	ldr	r2, [r4, #4]
 8027fb8:	4291      	cmp	r1, r2
 8027fba:	d80c      	bhi.n	8027fd6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 8027fbc:	6822      	ldr	r2, [r4, #0]
 8027fbe:	1c59      	adds	r1, r3, #1
 8027fc0:	60a1      	str	r1, [r4, #8]
 8027fc2:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8027fc4:	6822      	ldr	r2, [r4, #0]
 8027fc6:	68a3      	ldr	r3, [r4, #8]
 8027fc8:	2100      	movs	r1, #0
 8027fca:	54d1      	strb	r1, [r2, r3]
}
 8027fcc:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027fce:	4620      	mov	r0, r4
 8027fd0:	f7ff fede 	bl	8027d90 <mg_iobuf_resize>
 8027fd4:	e7ed      	b.n	8027fb2 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8027fd6:	4293      	cmp	r3, r2
 8027fd8:	d2f8      	bcs.n	8027fcc <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8027fda:	6822      	ldr	r2, [r4, #0]
 8027fdc:	1c59      	adds	r1, r3, #1
 8027fde:	60a1      	str	r1, [r4, #8]
 8027fe0:	2100      	movs	r1, #0
 8027fe2:	54d1      	strb	r1, [r2, r3]
}
 8027fe4:	e7f2      	b.n	8027fcc <mg_pfn_iobuf_private+0x2c>

08027fe6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8027fe6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8027fe8:	2201      	movs	r2, #1
 8027fea:	f7ff ffd9 	bl	8027fa0 <mg_pfn_iobuf_private>
}
 8027fee:	bd08      	pop	{r3, pc}

08027ff0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8027ff0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8027ff2:	2200      	movs	r2, #0
 8027ff4:	f7ff ffd4 	bl	8027fa0 <mg_pfn_iobuf_private>
}
 8027ff8:	bd08      	pop	{r3, pc}
	...

08027ffc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 8027ffc:	b510      	push	{r4, lr}
 8027ffe:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8028000:	f7fb fc8e 	bl	8023920 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8028004:	6862      	ldr	r2, [r4, #4]
 8028006:	e000      	b.n	802800a <mg_close_conn+0xe>
 8028008:	461a      	mov	r2, r3
 802800a:	6813      	ldr	r3, [r2, #0]
 802800c:	42a3      	cmp	r3, r4
 802800e:	d1fb      	bne.n	8028008 <mg_close_conn+0xc>
 8028010:	6823      	ldr	r3, [r4, #0]
 8028012:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8028014:	6863      	ldr	r3, [r4, #4]
 8028016:	689a      	ldr	r2, [r3, #8]
 8028018:	42a2      	cmp	r2, r4
 802801a:	d020      	beq.n	802805e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802801c:	6863      	ldr	r3, [r4, #4]
 802801e:	691a      	ldr	r2, [r3, #16]
 8028020:	42a2      	cmp	r2, r4
 8028022:	d01f      	beq.n	8028064 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8028024:	2200      	movs	r2, #0
 8028026:	2109      	movs	r1, #9
 8028028:	4620      	mov	r0, r4
 802802a:	f7fb fcda 	bl	80239e2 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802802e:	4b15      	ldr	r3, [pc, #84]	@ (8028084 <mg_close_conn+0x88>)
 8028030:	681b      	ldr	r3, [r3, #0]
 8028032:	2b02      	cmp	r3, #2
 8028034:	dc19      	bgt.n	802806a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8028036:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802803a:	f7ff ff68 	bl	8027f0e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802803e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8028042:	f7ff ff64 	bl	8027f0e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8028046:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802804a:	f7ff ff60 	bl	8027f0e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802804e:	21b0      	movs	r1, #176	@ 0xb0
 8028050:	4620      	mov	r0, r4
 8028052:	f7fe fc1f 	bl	8026894 <mg_bzero>
  free(c);
 8028056:	4620      	mov	r0, r4
 8028058:	f7f3 fc90 	bl	801b97c <vPortFree>
}
 802805c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802805e:	2200      	movs	r2, #0
 8028060:	609a      	str	r2, [r3, #8]
 8028062:	e7db      	b.n	802801c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8028064:	2200      	movs	r2, #0
 8028066:	611a      	str	r2, [r3, #16]
 8028068:	e7dc      	b.n	8028024 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802806a:	4b07      	ldr	r3, [pc, #28]	@ (8028088 <mg_close_conn+0x8c>)
 802806c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8028070:	4906      	ldr	r1, [pc, #24]	@ (802808c <mg_close_conn+0x90>)
 8028072:	2003      	movs	r0, #3
 8028074:	f7ff f850 	bl	8027118 <mg_log_prefix>
 8028078:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802807a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802807c:	4804      	ldr	r0, [pc, #16]	@ (8028090 <mg_close_conn+0x94>)
 802807e:	f7fc fef9 	bl	8024e74 <mg_log>
 8028082:	e7d8      	b.n	8028036 <mg_close_conn+0x3a>
 8028084:	2000012c 	.word	0x2000012c
 8028088:	0803ccd8 	.word	0x0803ccd8
 802808c:	0803c2f0 	.word	0x0803c2f0
 8028090:	0803c5f4 	.word	0x0803c5f4

08028094 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8028094:	b510      	push	{r4, lr}
 8028096:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8028098:	30d0      	adds	r0, #208	@ 0xd0
 802809a:	f7ff ff38 	bl	8027f0e <mg_iobuf_free>
  mg_close_conn(c);
 802809e:	4620      	mov	r0, r4
 80280a0:	f7ff ffac 	bl	8027ffc <mg_close_conn>
}
 80280a4:	bd10      	pop	{r4, pc}
	...

080280a8 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 80280a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80280ac:	4606      	mov	r6, r0
 80280ae:	460d      	mov	r5, r1
 80280b0:	4690      	mov	r8, r2
 80280b2:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80280b4:	f7fc fa08 	bl	80244c8 <mg_alloc_conn>
 80280b8:	4604      	mov	r4, r0
 80280ba:	2800      	cmp	r0, #0
 80280bc:	d03f      	beq.n	802813e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 80280be:	4629      	mov	r1, r5
 80280c0:	f7fe fe1f 	bl	8026d02 <mg_open_listener>
 80280c4:	2800      	cmp	r0, #0
 80280c6:	d04d      	beq.n	8028164 <mg_listen+0xbc>
    c->is_listening = 1;
 80280c8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80280cc:	f043 0301 	orr.w	r3, r3, #1
 80280d0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80280d4:	2204      	movs	r2, #4
 80280d6:	492f      	ldr	r1, [pc, #188]	@ (8028194 <mg_listen+0xec>)
 80280d8:	4628      	mov	r0, r5
 80280da:	f005 fc4e 	bl	802d97a <strncmp>
 80280de:	fab0 f080 	clz	r0, r0
 80280e2:	0940      	lsrs	r0, r0, #5
 80280e4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80280e8:	f360 0300 	bfi	r3, r0, #0, #1
 80280ec:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80280f0:	6833      	ldr	r3, [r6, #0]
 80280f2:	6023      	str	r3, [r4, #0]
 80280f4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80280f6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80280fa:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80280fc:	2200      	movs	r2, #0
 80280fe:	2101      	movs	r1, #1
 8028100:	4620      	mov	r0, r4
 8028102:	f7fb fc6e 	bl	80239e2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8028106:	4628      	mov	r0, r5
 8028108:	f7fe fb16 	bl	8026738 <mg_url_is_ssl>
 802810c:	b128      	cbz	r0, 802811a <mg_listen+0x72>
 802810e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028116:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802811a:	4b1f      	ldr	r3, [pc, #124]	@ (8028198 <mg_listen+0xf0>)
 802811c:	681b      	ldr	r3, [r3, #0]
 802811e:	2b02      	cmp	r3, #2
 8028120:	dd11      	ble.n	8028146 <mg_listen+0x9e>
 8028122:	4b1e      	ldr	r3, [pc, #120]	@ (802819c <mg_listen+0xf4>)
 8028124:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8028128:	491d      	ldr	r1, [pc, #116]	@ (80281a0 <mg_listen+0xf8>)
 802812a:	2003      	movs	r0, #3
 802812c:	f7fe fff4 	bl	8027118 <mg_log_prefix>
 8028130:	462b      	mov	r3, r5
 8028132:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8028134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028136:	481b      	ldr	r0, [pc, #108]	@ (80281a4 <mg_listen+0xfc>)
 8028138:	f7fc fe9c 	bl	8024e74 <mg_log>
  return c;
 802813c:	e003      	b.n	8028146 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802813e:	4b16      	ldr	r3, [pc, #88]	@ (8028198 <mg_listen+0xf0>)
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	2b00      	cmp	r3, #0
 8028144:	dc02      	bgt.n	802814c <mg_listen+0xa4>
}
 8028146:	4620      	mov	r0, r4
 8028148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802814c:	4b13      	ldr	r3, [pc, #76]	@ (802819c <mg_listen+0xf4>)
 802814e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8028152:	4913      	ldr	r1, [pc, #76]	@ (80281a0 <mg_listen+0xf8>)
 8028154:	2001      	movs	r0, #1
 8028156:	f7fe ffdf 	bl	8027118 <mg_log_prefix>
 802815a:	4629      	mov	r1, r5
 802815c:	4812      	ldr	r0, [pc, #72]	@ (80281a8 <mg_listen+0x100>)
 802815e:	f7fc fe89 	bl	8024e74 <mg_log>
 8028162:	e7f0      	b.n	8028146 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8028164:	4b0c      	ldr	r3, [pc, #48]	@ (8028198 <mg_listen+0xf0>)
 8028166:	681b      	ldr	r3, [r3, #0]
 8028168:	2b00      	cmp	r3, #0
 802816a:	dc04      	bgt.n	8028176 <mg_listen+0xce>
    free(c);
 802816c:	4620      	mov	r0, r4
 802816e:	f7f3 fc05 	bl	801b97c <vPortFree>
    c = NULL;
 8028172:	2400      	movs	r4, #0
 8028174:	e7e7      	b.n	8028146 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8028176:	4b09      	ldr	r3, [pc, #36]	@ (802819c <mg_listen+0xf4>)
 8028178:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802817c:	4908      	ldr	r1, [pc, #32]	@ (80281a0 <mg_listen+0xf8>)
 802817e:	2001      	movs	r0, #1
 8028180:	f7fe ffca 	bl	8027118 <mg_log_prefix>
 8028184:	f007 f8f2 	bl	802f36c <__errno>
 8028188:	6802      	ldr	r2, [r0, #0]
 802818a:	4629      	mov	r1, r5
 802818c:	4807      	ldr	r0, [pc, #28]	@ (80281ac <mg_listen+0x104>)
 802818e:	f7fc fe71 	bl	8024e74 <mg_log>
 8028192:	e7eb      	b.n	802816c <mg_listen+0xc4>
 8028194:	0803c624 	.word	0x0803c624
 8028198:	2000012c 	.word	0x2000012c
 802819c:	0803ccc0 	.word	0x0803ccc0
 80281a0:	0803c2f0 	.word	0x0803c2f0
 80281a4:	0803c34c 	.word	0x0803c34c
 80281a8:	0803c604 	.word	0x0803c604
 80281ac:	0803c60c 	.word	0x0803c60c

080281b0 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 80281b0:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80281b2:	f7ff ff79 	bl	80280a8 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 80281b6:	b110      	cbz	r0, 80281be <mg_http_listen+0xe>
 80281b8:	4b01      	ldr	r3, [pc, #4]	@ (80281c0 <mg_http_listen+0x10>)
 80281ba:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 80281be:	bd08      	pop	{r3, pc}
 80281c0:	0802739d 	.word	0x0802739d

080281c4 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 80281c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80281c8:	4605      	mov	r5, r0
 80281ca:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80281cc:	6843      	ldr	r3, [r0, #4]
 80281ce:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80281d0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80281d4:	f013 0301 	ands.w	r3, r3, #1
 80281d8:	d02c      	beq.n	8028234 <trim_len+0x70>
 80281da:	2608      	movs	r6, #8
  size_t max_headers_len =
 80281dc:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80281e0:	bb53      	cbnz	r3, 8028238 <trim_len+0x74>
 80281e2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80281e4:	eb08 0304 	add.w	r3, r8, r4
 80281e8:	69ba      	ldr	r2, [r7, #24]
 80281ea:	4293      	cmp	r3, r2
 80281ec:	d901      	bls.n	80281f2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80281ee:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80281f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80281f6:	42b3      	cmp	r3, r6
 80281f8:	d205      	bcs.n	8028206 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80281fa:	4b1c      	ldr	r3, [pc, #112]	@ (802826c <trim_len+0xa8>)
 80281fc:	681b      	ldr	r3, [r3, #0]
 80281fe:	2b00      	cmp	r3, #0
 8028200:	dc1c      	bgt.n	802823c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8028202:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8028206:	eb04 0308 	add.w	r3, r4, r8
 802820a:	3b0e      	subs	r3, #14
 802820c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8028210:	4293      	cmp	r3, r2
 8028212:	d90c      	bls.n	802822e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8028214:	eba2 0208 	sub.w	r2, r2, r8
 8028218:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802821c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028220:	f013 0f01 	tst.w	r3, #1
 8028224:	d003      	beq.n	802822e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8028226:	4b11      	ldr	r3, [pc, #68]	@ (802826c <trim_len+0xa8>)
 8028228:	681b      	ldr	r3, [r3, #0]
 802822a:	2b00      	cmp	r3, #0
 802822c:	dc12      	bgt.n	8028254 <trim_len+0x90>
}
 802822e:	4620      	mov	r0, r4
 8028230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8028234:	263c      	movs	r6, #60	@ 0x3c
 8028236:	e7d1      	b.n	80281dc <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8028238:	2644      	movs	r6, #68	@ 0x44
 802823a:	e7d3      	b.n	80281e4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802823c:	4b0c      	ldr	r3, [pc, #48]	@ (8028270 <trim_len+0xac>)
 802823e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8028242:	490c      	ldr	r1, [pc, #48]	@ (8028274 <trim_len+0xb0>)
 8028244:	2001      	movs	r0, #1
 8028246:	f7fe ff67 	bl	8027118 <mg_log_prefix>
 802824a:	4631      	mov	r1, r6
 802824c:	480a      	ldr	r0, [pc, #40]	@ (8028278 <trim_len+0xb4>)
 802824e:	f7fc fe11 	bl	8024e74 <mg_log>
 8028252:	e7d6      	b.n	8028202 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8028254:	4b06      	ldr	r3, [pc, #24]	@ (8028270 <trim_len+0xac>)
 8028256:	f241 5293 	movw	r2, #5523	@ 0x1593
 802825a:	4906      	ldr	r1, [pc, #24]	@ (8028274 <trim_len+0xb0>)
 802825c:	2001      	movs	r0, #1
 802825e:	f7fe ff5b 	bl	8027118 <mg_log_prefix>
 8028262:	4806      	ldr	r0, [pc, #24]	@ (802827c <trim_len+0xb8>)
 8028264:	f7fc fe06 	bl	8024e74 <mg_log>
 8028268:	e7e1      	b.n	802822e <trim_len+0x6a>
 802826a:	bf00      	nop
 802826c:	2000012c 	.word	0x2000012c
 8028270:	0803ccb4 	.word	0x0803ccb4
 8028274:	0803c2f0 	.word	0x0803c2f0
 8028278:	0803c62c 	.word	0x0803c62c
 802827c:	0803c658 	.word	0x0803c658

08028280 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8028280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028282:	b085      	sub	sp, #20
 8028284:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028286:	6843      	ldr	r3, [r0, #4]
 8028288:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802828a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802828c:	68ab      	ldr	r3, [r5, #8]
 802828e:	b123      	cbz	r3, 802829a <mg_send+0x1a>
 8028290:	460e      	mov	r6, r1
 8028292:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028296:	2b03      	cmp	r3, #3
 8028298:	d006      	beq.n	80282a8 <mg_send+0x28>
    mg_error(c, "net down");
 802829a:	4913      	ldr	r1, [pc, #76]	@ (80282e8 <mg_send+0x68>)
 802829c:	4620      	mov	r0, r4
 802829e:	f7ff f823 	bl	80272e8 <mg_error>
  bool res = false;
 80282a2:	2000      	movs	r0, #0
}
 80282a4:	b005      	add	sp, #20
 80282a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 80282a8:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80282ac:	f013 0f01 	tst.w	r3, #1
 80282b0:	d010      	beq.n	80282d4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 80282b2:	4611      	mov	r1, r2
 80282b4:	f7ff ff86 	bl	80281c4 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 80282b8:	68aa      	ldr	r2, [r5, #8]
 80282ba:	9003      	str	r0, [sp, #12]
 80282bc:	9602      	str	r6, [sp, #8]
 80282be:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80282c0:	9301      	str	r3, [sp, #4]
 80282c2:	9700      	str	r7, [sp, #0]
 80282c4:	8b23      	ldrh	r3, [r4, #24]
 80282c6:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80282ca:	4628      	mov	r0, r5
 80282cc:	f7fe fc97 	bl	8026bfe <tx_udp>
    res = true;
 80282d0:	2001      	movs	r0, #1
 80282d2:	e7e7      	b.n	80282a4 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80282d4:	4613      	mov	r3, r2
 80282d6:	460a      	mov	r2, r1
 80282d8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80282da:	3048      	adds	r0, #72	@ 0x48
 80282dc:	f7ff fde5 	bl	8027eaa <mg_iobuf_add>
 80282e0:	3800      	subs	r0, #0
 80282e2:	bf18      	it	ne
 80282e4:	2001      	movne	r0, #1
 80282e6:	e7dd      	b.n	80282a4 <mg_send+0x24>
 80282e8:	0803c684 	.word	0x0803c684

080282ec <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80282ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282ee:	b0c5      	sub	sp, #276	@ 0x114
 80282f0:	4606      	mov	r6, r0
 80282f2:	460d      	mov	r5, r1
 80282f4:	4614      	mov	r4, r2
 80282f6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80282f8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80282fc:	2100      	movs	r1, #0
 80282fe:	a801      	add	r0, sp, #4
 8028300:	f005 fb06 	bl	802d910 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8028304:	4620      	mov	r0, r4
 8028306:	f7fe fbc5 	bl	8026a94 <mg_ntohs>
 802830a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 802830e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8028312:	f7fe fbbf 	bl	8026a94 <mg_ntohs>
 8028316:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 802831a:	2001      	movs	r0, #1
 802831c:	f7fe fbba 	bl	8026a94 <mg_ntohs>
 8028320:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8028324:	f04f 0c00 	mov.w	ip, #0
 8028328:	4664      	mov	r4, ip
 802832a:	e015      	b.n	8028358 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 802832c:	eba4 020c 	sub.w	r2, r4, ip
 8028330:	ab01      	add	r3, sp, #4
 8028332:	4463      	add	r3, ip
 8028334:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8028336:	f10c 0309 	add.w	r3, ip, #9
 802833a:	aa01      	add	r2, sp, #4
 802833c:	18d0      	adds	r0, r2, r3
 802833e:	6829      	ldr	r1, [r5, #0]
 8028340:	eba4 020c 	sub.w	r2, r4, ip
 8028344:	4461      	add	r1, ip
 8028346:	3004      	adds	r0, #4
 8028348:	f007 f848 	bl	802f3dc <memcpy>
      n = i + 1;
 802834c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8028350:	686a      	ldr	r2, [r5, #4]
 8028352:	42a2      	cmp	r2, r4
 8028354:	d90a      	bls.n	802836c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8028356:	3401      	adds	r4, #1
 8028358:	2cfa      	cmp	r4, #250	@ 0xfa
 802835a:	d807      	bhi.n	802836c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 802835c:	682b      	ldr	r3, [r5, #0]
 802835e:	5d1a      	ldrb	r2, [r3, r4]
 8028360:	2a2e      	cmp	r2, #46	@ 0x2e
 8028362:	d0e3      	beq.n	802832c <mg_dns_send+0x40>
 8028364:	686b      	ldr	r3, [r5, #4]
 8028366:	42a3      	cmp	r3, r4
 8028368:	d8f2      	bhi.n	8028350 <mg_dns_send+0x64>
 802836a:	e7df      	b.n	802832c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 802836c:	f10c 0308 	add.w	r3, ip, #8
 8028370:	aa01      	add	r2, sp, #4
 8028372:	4413      	add	r3, r2
 8028374:	4a0a      	ldr	r2, [pc, #40]	@ (80283a0 <mg_dns_send+0xb4>)
 8028376:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 802837a:	6058      	str	r0, [r3, #4]
 802837c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8028380:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8028382:	b12f      	cbz	r7, 8028390 <mg_dns_send+0xa4>
 8028384:	f10c 0302 	add.w	r3, ip, #2
 8028388:	aa01      	add	r2, sp, #4
 802838a:	4413      	add	r3, r2
 802838c:	221c      	movs	r2, #28
 802838e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8028390:	f10c 0211 	add.w	r2, ip, #17
 8028394:	a901      	add	r1, sp, #4
 8028396:	4630      	mov	r0, r6
 8028398:	f7ff ff72 	bl	8028280 <mg_send>
}
 802839c:	b045      	add	sp, #276	@ 0x114
 802839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283a0:	0803716c 	.word	0x0803716c

080283a4 <mg_mqtt_send_header>:
                         uint32_t len) {
 80283a4:	b500      	push	{lr}
 80283a6:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 80283a8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80283ac:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80283b0:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 80283b4:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 80283b8:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 80283ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80283bc:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80283c0:	d90e      	bls.n	80283e0 <mg_mqtt_send_header+0x3c>
 80283c2:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 80283c6:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80283ca:	f10d 0105 	add.w	r1, sp, #5
 80283ce:	428a      	cmp	r2, r1
 80283d0:	d3f0      	bcc.n	80283b4 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 80283d2:	4669      	mov	r1, sp
 80283d4:	1a52      	subs	r2, r2, r1
 80283d6:	f7ff ff53 	bl	8028280 <mg_send>
}
 80283da:	b003      	add	sp, #12
 80283dc:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 80283e0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80283e2:	e7f6      	b.n	80283d2 <mg_mqtt_send_header+0x2e>

080283e4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80283e4:	b500      	push	{lr}
 80283e6:	b083      	sub	sp, #12
 80283e8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 80283ea:	2204      	movs	r2, #4
 80283ec:	eb0d 0102 	add.w	r1, sp, r2
 80283f0:	f7ff ff46 	bl	8028280 <mg_send>
}
 80283f4:	b003      	add	sp, #12
 80283f6:	f85d fb04 	ldr.w	pc, [sp], #4

080283fa <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80283fa:	b500      	push	{lr}
 80283fc:	b083      	sub	sp, #12
 80283fe:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8028402:	2202      	movs	r2, #2
 8028404:	f10d 0106 	add.w	r1, sp, #6
 8028408:	f7ff ff3a 	bl	8028280 <mg_send>
}
 802840c:	b003      	add	sp, #12
 802840e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08028414 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8028414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028418:	b083      	sub	sp, #12
 802841a:	4606      	mov	r6, r0
 802841c:	460f      	mov	r7, r1
 802841e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8028420:	4611      	mov	r1, r2
 8028422:	4638      	mov	r0, r7
 8028424:	f7f9 fdda 	bl	8021fdc <get_properties_length>
 8028428:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802842a:	2500      	movs	r5, #0
 802842c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 802842e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8028430:	4668      	mov	r0, sp
 8028432:	f7f9 fd84 	bl	8021f3e <encode_varint>
 8028436:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8028438:	4669      	mov	r1, sp
 802843a:	4630      	mov	r0, r6
 802843c:	f7ff ff20 	bl	8028280 <mg_send>
  for (i = 0; i < nprops; i++) {
 8028440:	e018      	b.n	8028474 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8028442:	89a0      	ldrh	r0, [r4, #12]
 8028444:	f7fe fb26 	bl	8026a94 <mg_ntohs>
 8028448:	4601      	mov	r1, r0
 802844a:	4630      	mov	r0, r6
 802844c:	f7ff ffd5 	bl	80283fa <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8028450:	68e2      	ldr	r2, [r4, #12]
 8028452:	68a1      	ldr	r1, [r4, #8]
 8028454:	4630      	mov	r0, r6
 8028456:	f7ff ff13 	bl	8028280 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802845a:	8aa0      	ldrh	r0, [r4, #20]
 802845c:	f7fe fb1a 	bl	8026a94 <mg_ntohs>
 8028460:	4601      	mov	r1, r0
 8028462:	4630      	mov	r0, r6
 8028464:	f7ff ffc9 	bl	80283fa <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8028468:	6962      	ldr	r2, [r4, #20]
 802846a:	6921      	ldr	r1, [r4, #16]
 802846c:	4630      	mov	r0, r6
 802846e:	f7ff ff07 	bl	8028280 <mg_send>
  for (i = 0; i < nprops; i++) {
 8028472:	3501      	adds	r5, #1
 8028474:	454d      	cmp	r5, r9
 8028476:	d25b      	bcs.n	8028530 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8028478:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 802847c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8028480:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8028484:	2201      	movs	r2, #1
 8028486:	4621      	mov	r1, r4
 8028488:	4630      	mov	r0, r6
 802848a:	f7ff fef9 	bl	8028280 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802848e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8028492:	f7f9 fd8f 	bl	8021fb4 <mqtt_prop_type_by_id>
 8028496:	2806      	cmp	r0, #6
 8028498:	d8eb      	bhi.n	8028472 <mg_send_mqtt_properties+0x5e>
 802849a:	a301      	add	r3, pc, #4	@ (adr r3, 80284a0 <mg_send_mqtt_properties+0x8c>)
 802849c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80284a0:	080284bd 	.word	0x080284bd
 80284a4:	080284e9 	.word	0x080284e9
 80284a8:	08028443 	.word	0x08028443
 80284ac:	08028503 	.word	0x08028503
 80284b0:	0802851d 	.word	0x0802851d
 80284b4:	080284d9 	.word	0x080284d9
 80284b8:	080284c9 	.word	0x080284c9
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 80284bc:	2201      	movs	r2, #1
 80284be:	1d21      	adds	r1, r4, #4
 80284c0:	4630      	mov	r0, r6
 80284c2:	f7ff fedd 	bl	8028280 <mg_send>
        break;
 80284c6:	e7d4      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 80284c8:	88a0      	ldrh	r0, [r4, #4]
 80284ca:	f7fe fae3 	bl	8026a94 <mg_ntohs>
 80284ce:	4601      	mov	r1, r0
 80284d0:	4630      	mov	r0, r6
 80284d2:	f7ff ff92 	bl	80283fa <mg_send_u16>
        break;
 80284d6:	e7cc      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 80284d8:	6860      	ldr	r0, [r4, #4]
 80284da:	f7fe fa43 	bl	8026964 <mg_ntohl>
 80284de:	4601      	mov	r1, r0
 80284e0:	4630      	mov	r0, r6
 80284e2:	f7ff ff7f 	bl	80283e4 <mg_send_u32>
        break;
 80284e6:	e7c4      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80284e8:	8aa0      	ldrh	r0, [r4, #20]
 80284ea:	f7fe fad3 	bl	8026a94 <mg_ntohs>
 80284ee:	4601      	mov	r1, r0
 80284f0:	4630      	mov	r0, r6
 80284f2:	f7ff ff82 	bl	80283fa <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80284f6:	6962      	ldr	r2, [r4, #20]
 80284f8:	6921      	ldr	r1, [r4, #16]
 80284fa:	4630      	mov	r0, r6
 80284fc:	f7ff fec0 	bl	8028280 <mg_send>
        break;
 8028500:	e7b7      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8028502:	8aa0      	ldrh	r0, [r4, #20]
 8028504:	f7fe fac6 	bl	8026a94 <mg_ntohs>
 8028508:	4601      	mov	r1, r0
 802850a:	4630      	mov	r0, r6
 802850c:	f7ff ff75 	bl	80283fa <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8028510:	6962      	ldr	r2, [r4, #20]
 8028512:	6921      	ldr	r1, [r4, #16]
 8028514:	4630      	mov	r0, r6
 8028516:	f7ff feb3 	bl	8028280 <mg_send>
        break;
 802851a:	e7aa      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 802851c:	6861      	ldr	r1, [r4, #4]
 802851e:	a801      	add	r0, sp, #4
 8028520:	f7f9 fd0d 	bl	8021f3e <encode_varint>
 8028524:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8028526:	a901      	add	r1, sp, #4
 8028528:	4630      	mov	r0, r6
 802852a:	f7ff fea9 	bl	8028280 <mg_send>
        break;
 802852e:	e7a0      	b.n	8028472 <mg_send_mqtt_properties+0x5e>
}
 8028530:	b003      	add	sp, #12
 8028532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028536:	bf00      	nop

08028538 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8028538:	b5f0      	push	{r4, r5, r6, r7, lr}
 802853a:	b08b      	sub	sp, #44	@ 0x2c
 802853c:	4605      	mov	r5, r0
 802853e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8028540:	ab02      	add	r3, sp, #8
 8028542:	f101 0210 	add.w	r2, r1, #16
 8028546:	e892 0003 	ldmia.w	r2, {r0, r1}
 802854a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802854e:	2300      	movs	r3, #0
 8028550:	f88d 3000 	strb.w	r3, [sp]
 8028554:	2204      	movs	r2, #4
 8028556:	f88d 2001 	strb.w	r2, [sp, #1]
 802855a:	224d      	movs	r2, #77	@ 0x4d
 802855c:	f88d 2002 	strb.w	r2, [sp, #2]
 8028560:	2251      	movs	r2, #81	@ 0x51
 8028562:	f88d 2003 	strb.w	r2, [sp, #3]
 8028566:	2254      	movs	r2, #84	@ 0x54
 8028568:	f88d 2004 	strb.w	r2, [sp, #4]
 802856c:	f88d 2005 	strb.w	r2, [sp, #5]
 8028570:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8028574:	f88d 2006 	strb.w	r2, [sp, #6]
 8028578:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 802857c:	2900      	cmp	r1, #0
 802857e:	f000 809f 	beq.w	80286c0 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8028582:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8028586:	b913      	cbnz	r3, 802858e <mg_mqtt_login+0x56>
 8028588:	2304      	movs	r3, #4
 802858a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802858e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8028592:	2b05      	cmp	r3, #5
 8028594:	bf14      	ite	ne
 8028596:	2300      	movne	r3, #0
 8028598:	2301      	moveq	r3, #1
 802859a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802859e:	f363 0282 	bfi	r2, r3, #2, #1
 80285a2:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 80285a6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80285aa:	00d2      	lsls	r2, r2, #3
 80285ac:	f002 0218 	and.w	r2, r2, #24
 80285b0:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 80285b4:	6863      	ldr	r3, [r4, #4]
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	f000 808e 	beq.w	80286d8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 80285bc:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 80285be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80285c2:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 80285c6:	68e2      	ldr	r2, [r4, #12]
 80285c8:	b13a      	cbz	r2, 80285da <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 80285ca:	441a      	add	r2, r3
 80285cc:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 80285ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80285d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80285d6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 80285da:	69e2      	ldr	r2, [r4, #28]
 80285dc:	b14a      	cbz	r2, 80285f2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 80285de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80285e0:	440a      	add	r2, r1
 80285e2:	441a      	add	r2, r3
 80285e4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 80285e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80285ea:	f042 0204 	orr.w	r2, r2, #4
 80285ee:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80285f2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 80285f6:	b90a      	cbnz	r2, 80285fc <mg_mqtt_login+0xc4>
 80285f8:	9a03      	ldr	r2, [sp, #12]
 80285fa:	b92a      	cbnz	r2, 8028608 <mg_mqtt_login+0xd0>
 80285fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028600:	f042 0202 	orr.w	r2, r2, #2
 8028604:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8028608:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 802860c:	b12a      	cbz	r2, 802861a <mg_mqtt_login+0xe2>
 802860e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028612:	f042 0220 	orr.w	r2, r2, #32
 8028616:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 802861a:	9f03      	ldr	r7, [sp, #12]
 802861c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 802861e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028622:	f013 0f04 	tst.w	r3, #4
 8028626:	d159      	bne.n	80286dc <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8028628:	4633      	mov	r3, r6
 802862a:	2200      	movs	r2, #0
 802862c:	2101      	movs	r1, #1
 802862e:	4628      	mov	r0, r5
 8028630:	f7ff feb8 	bl	80283a4 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8028634:	2208      	movs	r2, #8
 8028636:	4669      	mov	r1, sp
 8028638:	4628      	mov	r0, r5
 802863a:	f7ff fe21 	bl	8028280 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802863e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8028640:	f7fe fa28 	bl	8026a94 <mg_ntohs>
 8028644:	4601      	mov	r1, r0
 8028646:	4628      	mov	r0, r5
 8028648:	f7ff fed7 	bl	80283fa <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802864c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028650:	f013 0f04 	tst.w	r3, #4
 8028654:	d152      	bne.n	80286fc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8028656:	b2b8      	uxth	r0, r7
 8028658:	f7fe fa1c 	bl	8026a94 <mg_ntohs>
 802865c:	4601      	mov	r1, r0
 802865e:	4628      	mov	r0, r5
 8028660:	f7ff fecb 	bl	80283fa <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8028664:	463a      	mov	r2, r7
 8028666:	9902      	ldr	r1, [sp, #8]
 8028668:	4628      	mov	r0, r5
 802866a:	f7ff fe09 	bl	8028280 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 802866e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8028672:	f013 0f04 	tst.w	r3, #4
 8028676:	d01c      	beq.n	80286b2 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8028678:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802867c:	f013 0f04 	tst.w	r3, #4
 8028680:	d142      	bne.n	8028708 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8028682:	8ba0      	ldrh	r0, [r4, #28]
 8028684:	f7fe fa06 	bl	8026a94 <mg_ntohs>
 8028688:	4601      	mov	r1, r0
 802868a:	4628      	mov	r0, r5
 802868c:	f7ff feb5 	bl	80283fa <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8028690:	69e2      	ldr	r2, [r4, #28]
 8028692:	69a1      	ldr	r1, [r4, #24]
 8028694:	4628      	mov	r0, r5
 8028696:	f7ff fdf3 	bl	8028280 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802869a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802869c:	f7fe f9fa 	bl	8026a94 <mg_ntohs>
 80286a0:	4601      	mov	r1, r0
 80286a2:	4628      	mov	r0, r5
 80286a4:	f7ff fea9 	bl	80283fa <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 80286a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80286aa:	6a21      	ldr	r1, [r4, #32]
 80286ac:	4628      	mov	r0, r5
 80286ae:	f7ff fde7 	bl	8028280 <mg_send>
  if (opts->user.len > 0) {
 80286b2:	6860      	ldr	r0, [r4, #4]
 80286b4:	bb70      	cbnz	r0, 8028714 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 80286b6:	68e0      	ldr	r0, [r4, #12]
 80286b8:	2800      	cmp	r0, #0
 80286ba:	d138      	bne.n	802872e <mg_mqtt_login+0x1f6>
}
 80286bc:	b00b      	add	sp, #44	@ 0x2c
 80286be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 80286c0:	2114      	movs	r1, #20
 80286c2:	a804      	add	r0, sp, #16
 80286c4:	f7fe f922 	bl	802690c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 80286c8:	2300      	movs	r3, #0
 80286ca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 80286ce:	a904      	add	r1, sp, #16
 80286d0:	a802      	add	r0, sp, #8
 80286d2:	f7fc fdad 	bl	8025230 <mg_str_s>
 80286d6:	e754      	b.n	8028582 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 80286d8:	230c      	movs	r3, #12
 80286da:	e774      	b.n	80285c6 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 80286dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80286de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80286e0:	f7f9 fcc0 	bl	8022064 <get_props_size>
 80286e4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 80286e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80286ea:	f013 0f04 	tst.w	r3, #4
 80286ee:	d09b      	beq.n	8028628 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80286f0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80286f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80286f4:	f7f9 fcb6 	bl	8022064 <get_props_size>
 80286f8:	4406      	add	r6, r0
 80286fa:	e795      	b.n	8028628 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80286fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80286fe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8028700:	4628      	mov	r0, r5
 8028702:	f7ff fe87 	bl	8028414 <mg_send_mqtt_properties>
 8028706:	e7a6      	b.n	8028656 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8028708:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 802870a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802870c:	4628      	mov	r0, r5
 802870e:	f7ff fe81 	bl	8028414 <mg_send_mqtt_properties>
 8028712:	e7b6      	b.n	8028682 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8028714:	b280      	uxth	r0, r0
 8028716:	f7fe f9bd 	bl	8026a94 <mg_ntohs>
 802871a:	4601      	mov	r1, r0
 802871c:	4628      	mov	r0, r5
 802871e:	f7ff fe6c 	bl	80283fa <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8028722:	6862      	ldr	r2, [r4, #4]
 8028724:	6821      	ldr	r1, [r4, #0]
 8028726:	4628      	mov	r0, r5
 8028728:	f7ff fdaa 	bl	8028280 <mg_send>
 802872c:	e7c3      	b.n	80286b6 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802872e:	b280      	uxth	r0, r0
 8028730:	f7fe f9b0 	bl	8026a94 <mg_ntohs>
 8028734:	4601      	mov	r1, r0
 8028736:	4628      	mov	r0, r5
 8028738:	f7ff fe5f 	bl	80283fa <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802873c:	68e2      	ldr	r2, [r4, #12]
 802873e:	68a1      	ldr	r1, [r4, #8]
 8028740:	4628      	mov	r0, r5
 8028742:	f7ff fd9d 	bl	8028280 <mg_send>
}
 8028746:	e7b9      	b.n	80286bc <mg_mqtt_login+0x184>

08028748 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8028748:	b530      	push	{r4, r5, lr}
 802874a:	b083      	sub	sp, #12
 802874c:	4604      	mov	r4, r0
 802874e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8028750:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8028754:	f003 0303 	and.w	r3, r3, #3
 8028758:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802875c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8028760:	f013 0f04 	tst.w	r3, #4
 8028764:	d133      	bne.n	80287ce <mg_mqtt_sub+0x86>
 8028766:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8028768:	69eb      	ldr	r3, [r5, #28]
 802876a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802876c:	3305      	adds	r3, #5
 802876e:	2202      	movs	r2, #2
 8028770:	2108      	movs	r1, #8
 8028772:	4620      	mov	r0, r4
 8028774:	f7ff fe16 	bl	80283a4 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8028778:	6862      	ldr	r2, [r4, #4]
 802877a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802877c:	3301      	adds	r3, #1
 802877e:	b29b      	uxth	r3, r3
 8028780:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8028782:	b91b      	cbnz	r3, 802878c <mg_mqtt_sub+0x44>
 8028784:	6862      	ldr	r2, [r4, #4]
 8028786:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8028788:	3301      	adds	r3, #1
 802878a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802878c:	6863      	ldr	r3, [r4, #4]
 802878e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8028790:	f7fe f980 	bl	8026a94 <mg_ntohs>
 8028794:	4601      	mov	r1, r0
 8028796:	4620      	mov	r0, r4
 8028798:	f7ff fe2f 	bl	80283fa <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802879c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80287a0:	f013 0f04 	tst.w	r3, #4
 80287a4:	d118      	bne.n	80287d8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80287a6:	8ba8      	ldrh	r0, [r5, #28]
 80287a8:	f7fe f974 	bl	8026a94 <mg_ntohs>
 80287ac:	4601      	mov	r1, r0
 80287ae:	4620      	mov	r0, r4
 80287b0:	f7ff fe23 	bl	80283fa <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80287b4:	69ea      	ldr	r2, [r5, #28]
 80287b6:	69a9      	ldr	r1, [r5, #24]
 80287b8:	4620      	mov	r0, r4
 80287ba:	f7ff fd61 	bl	8028280 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 80287be:	2201      	movs	r2, #1
 80287c0:	f10d 0107 	add.w	r1, sp, #7
 80287c4:	4620      	mov	r0, r4
 80287c6:	f7ff fd5b 	bl	8028280 <mg_send>
}
 80287ca:	b003      	add	sp, #12
 80287cc:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 80287ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80287d0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80287d2:	f7f9 fc47 	bl	8022064 <get_props_size>
 80287d6:	e7c7      	b.n	8028768 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80287d8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80287da:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80287dc:	4620      	mov	r0, r4
 80287de:	f7ff fe19 	bl	8028414 <mg_send_mqtt_properties>
 80287e2:	e7e0      	b.n	80287a6 <mg_mqtt_sub+0x5e>

080287e4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80287e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287e8:	b083      	sub	sp, #12
 80287ea:	4605      	mov	r5, r0
 80287ec:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 80287ee:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80287f2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80287f6:	005b      	lsls	r3, r3, #1
 80287f8:	f003 0306 	and.w	r3, r3, #6
 80287fc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8028800:	2a00      	cmp	r2, #0
 8028802:	d057      	beq.n	80288b4 <mg_mqtt_pub+0xd0>
 8028804:	2201      	movs	r2, #1
 8028806:	ea43 0a02 	orr.w	sl, r3, r2
 802880a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 802880c:	69e7      	ldr	r7, [r4, #28]
 802880e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028810:	441f      	add	r7, r3
 8028812:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8028816:	4b3a      	ldr	r3, [pc, #232]	@ (8028900 <mg_mqtt_pub+0x11c>)
 8028818:	681b      	ldr	r3, [r3, #0]
 802881a:	2b02      	cmp	r3, #2
 802881c:	dc4c      	bgt.n	80288b8 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 802881e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8028822:	f1bb 0f00 	cmp.w	fp, #0
 8028826:	d001      	beq.n	802882c <mg_mqtt_pub+0x48>
 8028828:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802882c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028830:	f013 0f04 	tst.w	r3, #4
 8028834:	d152      	bne.n	80288dc <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8028836:	f1bb 0f00 	cmp.w	fp, #0
 802883a:	d004      	beq.n	8028846 <mg_mqtt_pub+0x62>
 802883c:	f1b8 0f00 	cmp.w	r8, #0
 8028840:	d001      	beq.n	8028846 <mg_mqtt_pub+0x62>
 8028842:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8028846:	464b      	mov	r3, r9
 8028848:	4632      	mov	r2, r6
 802884a:	2103      	movs	r1, #3
 802884c:	4628      	mov	r0, r5
 802884e:	f7ff fda9 	bl	80283a4 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8028852:	8ba0      	ldrh	r0, [r4, #28]
 8028854:	f7fe f91e 	bl	8026a94 <mg_ntohs>
 8028858:	4601      	mov	r1, r0
 802885a:	4628      	mov	r0, r5
 802885c:	f7ff fdcd 	bl	80283fa <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8028860:	69e2      	ldr	r2, [r4, #28]
 8028862:	69a1      	ldr	r1, [r4, #24]
 8028864:	4628      	mov	r0, r5
 8028866:	f7ff fd0b 	bl	8028280 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802886a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802886e:	b1b3      	cbz	r3, 802889e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8028870:	f1b8 0f00 	cmp.w	r8, #0
 8028874:	d10c      	bne.n	8028890 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8028876:	686a      	ldr	r2, [r5, #4]
 8028878:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802887a:	3301      	adds	r3, #1
 802887c:	b29b      	uxth	r3, r3
 802887e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8028880:	b91b      	cbnz	r3, 802888a <mg_mqtt_pub+0xa6>
 8028882:	686a      	ldr	r2, [r5, #4]
 8028884:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8028886:	3301      	adds	r3, #1
 8028888:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802888a:	686b      	ldr	r3, [r5, #4]
 802888c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8028890:	4640      	mov	r0, r8
 8028892:	f7fe f8ff 	bl	8026a94 <mg_ntohs>
 8028896:	4601      	mov	r1, r0
 8028898:	4628      	mov	r0, r5
 802889a:	f7ff fdae 	bl	80283fa <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802889e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80288a2:	f013 0f04 	tst.w	r3, #4
 80288a6:	d11f      	bne.n	80288e8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80288a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80288aa:	bb1a      	cbnz	r2, 80288f4 <mg_mqtt_pub+0x110>
}
 80288ac:	4640      	mov	r0, r8
 80288ae:	b003      	add	sp, #12
 80288b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80288b4:	2200      	movs	r2, #0
 80288b6:	e7a6      	b.n	8028806 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80288b8:	4b12      	ldr	r3, [pc, #72]	@ (8028904 <mg_mqtt_pub+0x120>)
 80288ba:	f241 123c 	movw	r2, #4412	@ 0x113c
 80288be:	4912      	ldr	r1, [pc, #72]	@ (8028908 <mg_mqtt_pub+0x124>)
 80288c0:	2003      	movs	r0, #3
 80288c2:	f7fe fc29 	bl	8027118 <mg_log_prefix>
 80288c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80288c8:	6a22      	ldr	r2, [r4, #32]
 80288ca:	9201      	str	r2, [sp, #4]
 80288cc:	9300      	str	r3, [sp, #0]
 80288ce:	69a3      	ldr	r3, [r4, #24]
 80288d0:	69e2      	ldr	r2, [r4, #28]
 80288d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80288d4:	480d      	ldr	r0, [pc, #52]	@ (802890c <mg_mqtt_pub+0x128>)
 80288d6:	f7fc facd 	bl	8024e74 <mg_log>
 80288da:	e7a0      	b.n	802881e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80288dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80288de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80288e0:	f7f9 fbc0 	bl	8022064 <get_props_size>
 80288e4:	4481      	add	r9, r0
 80288e6:	e7a6      	b.n	8028836 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80288e8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80288ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80288ec:	4628      	mov	r0, r5
 80288ee:	f7ff fd91 	bl	8028414 <mg_send_mqtt_properties>
 80288f2:	e7d9      	b.n	80288a8 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80288f4:	6a21      	ldr	r1, [r4, #32]
 80288f6:	4628      	mov	r0, r5
 80288f8:	f7ff fcc2 	bl	8028280 <mg_send>
 80288fc:	e7d6      	b.n	80288ac <mg_mqtt_pub+0xc8>
 80288fe:	bf00      	nop
 8028900:	2000012c 	.word	0x2000012c
 8028904:	0803ccf0 	.word	0x0803ccf0
 8028908:	0803c2f0 	.word	0x0803c2f0
 802890c:	0803c690 	.word	0x0803c690

08028910 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028910:	b530      	push	{r4, r5, lr}
 8028912:	b08f      	sub	sp, #60	@ 0x3c
 8028914:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8028916:	2907      	cmp	r1, #7
 8028918:	f000 808f 	beq.w	8028a3a <mqtt_cb+0x12a>
}
 802891c:	b00f      	add	sp, #60	@ 0x3c
 802891e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8028920:	2204      	movs	r2, #4
 8028922:	e091      	b.n	8028a48 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8028924:	4b73      	ldr	r3, [pc, #460]	@ (8028af4 <mqtt_cb+0x1e4>)
 8028926:	681b      	ldr	r3, [r3, #0]
 8028928:	2b00      	cmp	r3, #0
 802892a:	dc06      	bgt.n	802893a <mqtt_cb+0x2a>
        c->is_closing = 1;
 802892c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028930:	f043 0320 	orr.w	r3, r3, #32
 8028934:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8028938:	e7f0      	b.n	802891c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802893a:	4b6f      	ldr	r3, [pc, #444]	@ (8028af8 <mqtt_cb+0x1e8>)
 802893c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8028940:	496e      	ldr	r1, [pc, #440]	@ (8028afc <mqtt_cb+0x1ec>)
 8028942:	2001      	movs	r0, #1
 8028944:	f7fe fbe8 	bl	8027118 <mg_log_prefix>
 8028948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802894a:	486d      	ldr	r0, [pc, #436]	@ (8028b00 <mqtt_cb+0x1f0>)
 802894c:	f7fc fa92 	bl	8024e74 <mg_log>
 8028950:	e7ec      	b.n	802892c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8028952:	4b69      	ldr	r3, [pc, #420]	@ (8028af8 <mqtt_cb+0x1e8>)
 8028954:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8028958:	4968      	ldr	r1, [pc, #416]	@ (8028afc <mqtt_cb+0x1ec>)
 802895a:	2004      	movs	r0, #4
 802895c:	f7fe fbdc 	bl	8027118 <mg_log_prefix>
 8028960:	9b06      	ldr	r3, [sp, #24]
 8028962:	9301      	str	r3, [sp, #4]
 8028964:	9b07      	ldr	r3, [sp, #28]
 8028966:	9300      	str	r3, [sp, #0]
 8028968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802896a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 802896e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028970:	4864      	ldr	r0, [pc, #400]	@ (8028b04 <mqtt_cb+0x1f4>)
 8028972:	f7fc fa7f 	bl	8024e74 <mg_log>
 8028976:	e077      	b.n	8028a68 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8028978:	aa0b      	add	r2, sp, #44	@ 0x2c
 802897a:	2111      	movs	r1, #17
 802897c:	4620      	mov	r0, r4
 802897e:	f7fb f830 	bl	80239e2 <mg_call>
            if (mm.ack == 0) {
 8028982:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8028986:	b97b      	cbnz	r3, 80289a8 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8028988:	4b5a      	ldr	r3, [pc, #360]	@ (8028af4 <mqtt_cb+0x1e4>)
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	2b02      	cmp	r3, #2
 802898e:	dd49      	ble.n	8028a24 <mqtt_cb+0x114>
 8028990:	4b59      	ldr	r3, [pc, #356]	@ (8028af8 <mqtt_cb+0x1e8>)
 8028992:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8028996:	4959      	ldr	r1, [pc, #356]	@ (8028afc <mqtt_cb+0x1ec>)
 8028998:	2003      	movs	r0, #3
 802899a:	f7fe fbbd 	bl	8027118 <mg_log_prefix>
 802899e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289a0:	4859      	ldr	r0, [pc, #356]	@ (8028b08 <mqtt_cb+0x1f8>)
 80289a2:	f7fc fa67 	bl	8024e74 <mg_log>
 80289a6:	e03d      	b.n	8028a24 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 80289a8:	4b52      	ldr	r3, [pc, #328]	@ (8028af4 <mqtt_cb+0x1e4>)
 80289aa:	681b      	ldr	r3, [r3, #0]
 80289ac:	2b00      	cmp	r3, #0
 80289ae:	dc06      	bgt.n	80289be <mqtt_cb+0xae>
              c->is_closing = 1;
 80289b0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80289b4:	f043 0320 	orr.w	r3, r3, #32
 80289b8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 80289bc:	e032      	b.n	8028a24 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 80289be:	4b4e      	ldr	r3, [pc, #312]	@ (8028af8 <mqtt_cb+0x1e8>)
 80289c0:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 80289c4:	494d      	ldr	r1, [pc, #308]	@ (8028afc <mqtt_cb+0x1ec>)
 80289c6:	2001      	movs	r0, #1
 80289c8:	f7fe fba6 	bl	8027118 <mg_log_prefix>
 80289cc:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80289d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289d2:	484e      	ldr	r0, [pc, #312]	@ (8028b0c <mqtt_cb+0x1fc>)
 80289d4:	f7fc fa4e 	bl	8024e74 <mg_log>
 80289d8:	e7ea      	b.n	80289b0 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 80289da:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 80289de:	b1e5      	cbz	r5, 8028a1a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 80289e0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80289e4:	f7fe f856 	bl	8026a94 <mg_ntohs>
 80289e8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80289ec:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80289f0:	f013 0f04 	tst.w	r3, #4
 80289f4:	d14a      	bne.n	8028a8c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 80289f6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 80289f8:	2d02      	cmp	r5, #2
 80289fa:	d049      	beq.n	8028a90 <mqtt_cb+0x180>
 80289fc:	2104      	movs	r1, #4
 80289fe:	2200      	movs	r2, #0
 8028a00:	4620      	mov	r0, r4
 8028a02:	f7ff fccf 	bl	80283a4 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8028a06:	2202      	movs	r2, #2
 8028a08:	a903      	add	r1, sp, #12
 8028a0a:	4620      	mov	r0, r4
 8028a0c:	f7ff fc38 	bl	8028280 <mg_send>
              if (c->is_mqtt5) {
 8028a10:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028a14:	f013 0f04 	tst.w	r3, #4
 8028a18:	d13c      	bne.n	8028a94 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8028a1a:	aa04      	add	r2, sp, #16
 8028a1c:	2110      	movs	r1, #16
 8028a1e:	4620      	mov	r0, r4
 8028a20:	f7fa ffdf 	bl	80239e2 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8028a24:	aa04      	add	r2, sp, #16
 8028a26:	210f      	movs	r1, #15
 8028a28:	4620      	mov	r0, r4
 8028a2a:	f7fa ffda 	bl	80239e2 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8028a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028a30:	2100      	movs	r1, #0
 8028a32:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8028a36:	f7fd ff38 	bl	80268aa <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8028a3a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028a3e:	f013 0f04 	tst.w	r3, #4
 8028a42:	f43f af6d 	beq.w	8028920 <mqtt_cb+0x10>
 8028a46:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8028a48:	ab04      	add	r3, sp, #16
 8028a4a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8028a4c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8028a4e:	f7fb fc8c 	bl	802436a <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8028a52:	2802      	cmp	r0, #2
 8028a54:	f43f af66 	beq.w	8028924 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8028a58:	2800      	cmp	r0, #0
 8028a5a:	f47f af5f 	bne.w	802891c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8028a5e:	4b25      	ldr	r3, [pc, #148]	@ (8028af4 <mqtt_cb+0x1e4>)
 8028a60:	681b      	ldr	r3, [r3, #0]
 8028a62:	2b03      	cmp	r3, #3
 8028a64:	f73f af75 	bgt.w	8028952 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8028a68:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8028a6c:	3b02      	subs	r3, #2
 8028a6e:	2b04      	cmp	r3, #4
 8028a70:	d8d8      	bhi.n	8028a24 <mqtt_cb+0x114>
 8028a72:	a201      	add	r2, pc, #4	@ (adr r2, 8028a78 <mqtt_cb+0x168>)
 8028a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028a78:	08028979 	.word	0x08028979
 8028a7c:	080289db 	.word	0x080289db
 8028a80:	08028a25 	.word	0x08028a25
 8028a84:	08028aa9 	.word	0x08028aa9
 8028a88:	08028acf 	.word	0x08028acf
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8028a8c:	2304      	movs	r3, #4
 8028a8e:	e7b3      	b.n	80289f8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8028a90:	2105      	movs	r1, #5
 8028a92:	e7b4      	b.n	80289fe <mqtt_cb+0xee>
                uint16_t zero = 0;
 8028a94:	2300      	movs	r3, #0
 8028a96:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8028a9a:	2202      	movs	r2, #2
 8028a9c:	f10d 010e 	add.w	r1, sp, #14
 8028aa0:	4620      	mov	r0, r4
 8028aa2:	f7ff fbed 	bl	8028280 <mg_send>
 8028aa6:	e7b8      	b.n	8028a1a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8028aa8:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8028aac:	f7fd fff2 	bl	8026a94 <mg_ntohs>
 8028ab0:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8028ab4:	2302      	movs	r3, #2
 8028ab6:	461a      	mov	r2, r3
 8028ab8:	2106      	movs	r1, #6
 8028aba:	4620      	mov	r0, r4
 8028abc:	f7ff fc72 	bl	80283a4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8028ac0:	2202      	movs	r2, #2
 8028ac2:	f10d 010e 	add.w	r1, sp, #14
 8028ac6:	4620      	mov	r0, r4
 8028ac8:	f7ff fbda 	bl	8028280 <mg_send>
            break;
 8028acc:	e7aa      	b.n	8028a24 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8028ace:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8028ad2:	f7fd ffdf 	bl	8026a94 <mg_ntohs>
 8028ad6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8028ada:	2302      	movs	r3, #2
 8028adc:	2200      	movs	r2, #0
 8028ade:	2107      	movs	r1, #7
 8028ae0:	4620      	mov	r0, r4
 8028ae2:	f7ff fc5f 	bl	80283a4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8028ae6:	2202      	movs	r2, #2
 8028ae8:	f10d 010e 	add.w	r1, sp, #14
 8028aec:	4620      	mov	r0, r4
 8028aee:	f7ff fbc7 	bl	8028280 <mg_send>
            break;
 8028af2:	e797      	b.n	8028a24 <mqtt_cb+0x114>
 8028af4:	2000012c 	.word	0x2000012c
 8028af8:	0803cce8 	.word	0x0803cce8
 8028afc:	0803c2f0 	.word	0x0803c2f0
 8028b00:	0803c6a8 	.word	0x0803c6a8
 8028b04:	0803c6c4 	.word	0x0803c6c4
 8028b08:	0803c6e4 	.word	0x0803c6e4
 8028b0c:	0803c6f4 	.word	0x0803c6f4

08028b10 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8028b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028b14:	b088      	sub	sp, #32
 8028b16:	4605      	mov	r5, r0
 8028b18:	469a      	mov	sl, r3
 8028b1a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8028b1c:	f107 0614 	add.w	r6, r7, #20
 8028b20:	9601      	str	r6, [sp, #4]
 8028b22:	9200      	str	r2, [sp, #0]
 8028b24:	6883      	ldr	r3, [r0, #8]
 8028b26:	2206      	movs	r2, #6
 8028b28:	f7fd ffd4 	bl	8026ad4 <tx_ip>
 8028b2c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8028b2e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8028b32:	2200      	movs	r2, #0
 8028b34:	6142      	str	r2, [r0, #20]
 8028b36:	6182      	str	r2, [r0, #24]
 8028b38:	61c2      	str	r2, [r0, #28]
 8028b3a:	6202      	str	r2, [r0, #32]
 8028b3c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8028b3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028b40:	b10b      	cbz	r3, 8028b46 <tx_tcp+0x36>
 8028b42:	2f00      	cmp	r7, #0
 8028b44:	d147      	bne.n	8028bd6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8028b46:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8028b4a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8028b4c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8028b50:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8028b52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028b54:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8028b56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028b58:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8028b5a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8028b5e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8028b62:	f7fd ff97 	bl	8026a94 <mg_ntohs>
 8028b66:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8028b68:	2350      	movs	r3, #80	@ 0x50
 8028b6a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8028b6e:	b2bb      	uxth	r3, r7
 8028b70:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8028b72:	2000      	movs	r0, #0
 8028b74:	f88d 001c 	strb.w	r0, [sp, #28]
 8028b78:	7a62      	ldrb	r2, [r4, #9]
 8028b7a:	f88d 201d 	strb.w	r2, [sp, #29]
 8028b7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8028b82:	f88d 201e 	strb.w	r2, [sp, #30]
 8028b86:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8028b8a:	b2b2      	uxth	r2, r6
 8028b8c:	4649      	mov	r1, r9
 8028b8e:	f7f9 fac9 	bl	8022124 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8028b92:	f104 060c 	add.w	r6, r4, #12
 8028b96:	2204      	movs	r2, #4
 8028b98:	4631      	mov	r1, r6
 8028b9a:	f7f9 fac3 	bl	8022124 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8028b9e:	f104 0810 	add.w	r8, r4, #16
 8028ba2:	2204      	movs	r2, #4
 8028ba4:	4641      	mov	r1, r8
 8028ba6:	f7f9 fabd 	bl	8022124 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8028baa:	2204      	movs	r2, #4
 8028bac:	a907      	add	r1, sp, #28
 8028bae:	f7f9 fab9 	bl	8022124 <csumup>
  tcp->csum = csumfin(cs);
 8028bb2:	f7fd ff7b 	bl	8026aac <csumfin>
 8028bb6:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8028bb8:	4b18      	ldr	r3, [pc, #96]	@ (8028c1c <tx_tcp+0x10c>)
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	2b03      	cmp	r3, #3
 8028bbe:	dc10      	bgt.n	8028be2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8028bc0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8028bc4:	696b      	ldr	r3, [r5, #20]
 8028bc6:	1ac9      	subs	r1, r1, r3
 8028bc8:	4439      	add	r1, r7
 8028bca:	4628      	mov	r0, r5
 8028bcc:	f7f9 fabb 	bl	8022146 <ether_output>
}
 8028bd0:	b008      	add	sp, #32
 8028bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8028bd6:	463a      	mov	r2, r7
 8028bd8:	4619      	mov	r1, r3
 8028bda:	3028      	adds	r0, #40	@ 0x28
 8028bdc:	f004 fe7e 	bl	802d8dc <memmove>
 8028be0:	e7b1      	b.n	8028b46 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8028be2:	4b0f      	ldr	r3, [pc, #60]	@ (8028c20 <tx_tcp+0x110>)
 8028be4:	f241 5254 	movw	r2, #5460	@ 0x1554
 8028be8:	490e      	ldr	r1, [pc, #56]	@ (8028c24 <tx_tcp+0x114>)
 8028bea:	2004      	movs	r0, #4
 8028bec:	f7fe fa94 	bl	8027118 <mg_log_prefix>
 8028bf0:	8aa0      	ldrh	r0, [r4, #20]
 8028bf2:	f7fd ff4f 	bl	8026a94 <mg_ntohs>
 8028bf6:	4681      	mov	r9, r0
 8028bf8:	8ae0      	ldrh	r0, [r4, #22]
 8028bfa:	f7fd ff4b 	bl	8026a94 <mg_ntohs>
 8028bfe:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8028c02:	4909      	ldr	r1, [pc, #36]	@ (8028c28 <tx_tcp+0x118>)
 8028c04:	9704      	str	r7, [sp, #16]
 8028c06:	9303      	str	r3, [sp, #12]
 8028c08:	9002      	str	r0, [sp, #8]
 8028c0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8028c0e:	9100      	str	r1, [sp, #0]
 8028c10:	464b      	mov	r3, r9
 8028c12:	4632      	mov	r2, r6
 8028c14:	4805      	ldr	r0, [pc, #20]	@ (8028c2c <tx_tcp+0x11c>)
 8028c16:	f7fc f92d 	bl	8024e74 <mg_log>
 8028c1a:	e7d1      	b.n	8028bc0 <tx_tcp+0xb0>
 8028c1c:	2000012c 	.word	0x2000012c
 8028c20:	0803ccac 	.word	0x0803ccac
 8028c24:	0803c2f0 	.word	0x0803c2f0
 8028c28:	08024e35 	.word	0x08024e35
 8028c2c:	0803c714 	.word	0x0803c714

08028c30 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8028c30:	b530      	push	{r4, r5, lr}
 8028c32:	b087      	sub	sp, #28
 8028c34:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8028c36:	8b05      	ldrh	r5, [r0, #24]
 8028c38:	4628      	mov	r0, r5
 8028c3a:	f7fd ff2b 	bl	8026a94 <mg_ntohs>
 8028c3e:	f7fd fe91 	bl	8026964 <mg_ntohl>
 8028c42:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028c44:	6863      	ldr	r3, [r4, #4]
 8028c46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8028c48:	2300      	movs	r3, #0
 8028c4a:	9305      	str	r3, [sp, #20]
 8028c4c:	9304      	str	r3, [sp, #16]
 8028c4e:	9303      	str	r3, [sp, #12]
 8028c50:	9202      	str	r2, [sp, #8]
 8028c52:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8028c54:	9301      	str	r3, [sp, #4]
 8028c56:	9500      	str	r5, [sp, #0]
 8028c58:	2302      	movs	r3, #2
 8028c5a:	69e2      	ldr	r2, [r4, #28]
 8028c5c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8028c60:	f7ff ff56 	bl	8028b10 <tx_tcp>
}
 8028c64:	b007      	add	sp, #28
 8028c66:	bd30      	pop	{r4, r5, pc}

08028c68 <tx_tcp_pkt>:
                         size_t len) {
 8028c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c6c:	b087      	sub	sp, #28
 8028c6e:	4605      	mov	r5, r0
 8028c70:	4617      	mov	r7, r2
 8028c72:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8028c74:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8028c76:	7b5c      	ldrb	r4, [r3, #13]
 8028c78:	f014 0403 	ands.w	r4, r4, #3
 8028c7c:	bf18      	it	ne
 8028c7e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8028c80:	690e      	ldr	r6, [r1, #16]
 8028c82:	3606      	adds	r6, #6
 8028c84:	69ca      	ldr	r2, [r1, #28]
 8028c86:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8028c8a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8028c8e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8028c92:	6858      	ldr	r0, [r3, #4]
 8028c94:	f7fd fe66 	bl	8026964 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8028c98:	4420      	add	r0, r4
 8028c9a:	f7fd fe63 	bl	8026964 <mg_ntohl>
 8028c9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028ca0:	9305      	str	r3, [sp, #20]
 8028ca2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028ca4:	9304      	str	r3, [sp, #16]
 8028ca6:	9003      	str	r0, [sp, #12]
 8028ca8:	f8cd 8008 	str.w	r8, [sp, #8]
 8028cac:	f8cd b004 	str.w	fp, [sp, #4]
 8028cb0:	f8cd a000 	str.w	sl, [sp]
 8028cb4:	463b      	mov	r3, r7
 8028cb6:	464a      	mov	r2, r9
 8028cb8:	4631      	mov	r1, r6
 8028cba:	4628      	mov	r0, r5
 8028cbc:	f7ff ff28 	bl	8028b10 <tx_tcp>
}
 8028cc0:	b007      	add	sp, #28
 8028cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028cc8 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8028cc8:	b530      	push	{r4, r5, lr}
 8028cca:	b083      	sub	sp, #12
 8028ccc:	4604      	mov	r4, r0
 8028cce:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028cd0:	6843      	ldr	r3, [r0, #4]
 8028cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8028cd4:	2901      	cmp	r1, #1
 8028cd6:	d01a      	beq.n	8028d0e <settmout+0x46>
 8028cd8:	2903      	cmp	r1, #3
 8028cda:	d01a      	beq.n	8028d12 <settmout+0x4a>
 8028cdc:	2904      	cmp	r1, #4
 8028cde:	d01b      	beq.n	8028d18 <settmout+0x50>
 8028ce0:	2902      	cmp	r1, #2
 8028ce2:	d012      	beq.n	8028d0a <settmout+0x42>
 8028ce4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8028ce8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8028cea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8028cec:	185b      	adds	r3, r3, r1
 8028cee:	f142 0200 	adc.w	r2, r2, #0
 8028cf2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8028cf6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8028cfa:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8028cfe:	4b10      	ldr	r3, [pc, #64]	@ (8028d40 <settmout+0x78>)
 8028d00:	681b      	ldr	r3, [r3, #0]
 8028d02:	2b03      	cmp	r3, #3
 8028d04:	dc0b      	bgt.n	8028d1e <settmout+0x56>
}
 8028d06:	b003      	add	sp, #12
 8028d08:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8028d0a:	2364      	movs	r3, #100	@ 0x64
 8028d0c:	e7ec      	b.n	8028ce8 <settmout+0x20>
 8028d0e:	2396      	movs	r3, #150	@ 0x96
 8028d10:	e7ea      	b.n	8028ce8 <settmout+0x20>
 8028d12:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8028d16:	e7e7      	b.n	8028ce8 <settmout+0x20>
 8028d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8028d1c:	e7e4      	b.n	8028ce8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8028d1e:	4b09      	ldr	r3, [pc, #36]	@ (8028d44 <settmout+0x7c>)
 8028d20:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8028d24:	4908      	ldr	r1, [pc, #32]	@ (8028d48 <settmout+0x80>)
 8028d26:	2004      	movs	r0, #4
 8028d28:	f7fe f9f6 	bl	8027118 <mg_log_prefix>
 8028d2c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8028d30:	e9cd 2300 	strd	r2, r3, [sp]
 8028d34:	462a      	mov	r2, r5
 8028d36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028d38:	4804      	ldr	r0, [pc, #16]	@ (8028d4c <settmout+0x84>)
 8028d3a:	f7fc f89b 	bl	8024e74 <mg_log>
}
 8028d3e:	e7e2      	b.n	8028d06 <settmout+0x3e>
 8028d40:	2000012c 	.word	0x2000012c
 8028d44:	0803cca0 	.word	0x0803cca0
 8028d48:	0803c2f0 	.word	0x0803c2f0
 8028d4c:	0803c738 	.word	0x0803c738

08028d50 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8028d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d54:	b089      	sub	sp, #36	@ 0x24
 8028d56:	4604      	mov	r4, r0
 8028d58:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028d5a:	6843      	ldr	r3, [r0, #4]
 8028d5c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8028d5e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8028d62:	4611      	mov	r1, r2
 8028d64:	f7ff fa2e 	bl	80281c4 <trim_len>
 8028d68:	4605      	mov	r5, r0
  if (c->is_udp) {
 8028d6a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d6e:	f013 0f01 	tst.w	r3, #1
 8028d72:	d010      	beq.n	8028d96 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8028d74:	68ba      	ldr	r2, [r7, #8]
 8028d76:	9003      	str	r0, [sp, #12]
 8028d78:	9602      	str	r6, [sp, #8]
 8028d7a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8028d7c:	9301      	str	r3, [sp, #4]
 8028d7e:	f8cd 8000 	str.w	r8, [sp]
 8028d82:	8b23      	ldrh	r3, [r4, #24]
 8028d84:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8028d88:	4638      	mov	r0, r7
 8028d8a:	f7fd ff38 	bl	8026bfe <tx_udp>
  return (long) len;
 8028d8e:	4628      	mov	r0, r5
}
 8028d90:	b009      	add	sp, #36	@ 0x24
 8028d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8028d96:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8028d9a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028d9e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028da2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028da6:	f7fd fddd 	bl	8026964 <mg_ntohl>
 8028daa:	9007      	str	r0, [sp, #28]
 8028dac:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028db0:	f7fd fdd8 	bl	8026964 <mg_ntohl>
 8028db4:	9505      	str	r5, [sp, #20]
 8028db6:	9604      	str	r6, [sp, #16]
 8028db8:	9003      	str	r0, [sp, #12]
 8028dba:	9b07      	ldr	r3, [sp, #28]
 8028dbc:	9302      	str	r3, [sp, #8]
 8028dbe:	f8cd b004 	str.w	fp, [sp, #4]
 8028dc2:	f8cd a000 	str.w	sl, [sp]
 8028dc6:	2318      	movs	r3, #24
 8028dc8:	4642      	mov	r2, r8
 8028dca:	4649      	mov	r1, r9
 8028dcc:	4638      	mov	r0, r7
 8028dce:	f7ff fe9f 	bl	8028b10 <tx_tcp>
    if (sent == 0) {
 8028dd2:	b180      	cbz	r0, 8028df6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8028dd4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028dd8:	d010      	beq.n	8028dfc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8028dda:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8028dde:	442b      	add	r3, r5
 8028de0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028de4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028de8:	2b01      	cmp	r3, #1
 8028dea:	d1d0      	bne.n	8028d8e <mg_io_send+0x3e>
 8028dec:	2100      	movs	r1, #0
 8028dee:	4620      	mov	r0, r4
 8028df0:	f7ff ff6a 	bl	8028cc8 <settmout>
 8028df4:	e7cb      	b.n	8028d8e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8028df6:	f06f 0001 	mvn.w	r0, #1
 8028dfa:	e7c9      	b.n	8028d90 <mg_io_send+0x40>
      return MG_IO_ERR;
 8028dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028e00:	e7c6      	b.n	8028d90 <mg_io_send+0x40>
	...

08028e04 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8028e04:	b510      	push	{r4, lr}
 8028e06:	b082      	sub	sp, #8
 8028e08:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8028e0a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8028e0e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028e12:	d00b      	beq.n	8028e2c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8028e14:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8028e16:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028e18:	f7fd fc80 	bl	802671c <mg_tls_send>
 8028e1c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8028e1e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028e22:	d008      	beq.n	8028e36 <write_conn+0x32>
  } else if (len > 0) {
 8028e24:	2800      	cmp	r0, #0
 8028e26:	dc0b      	bgt.n	8028e40 <write_conn+0x3c>
}
 8028e28:	b002      	add	sp, #8
 8028e2a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8028e2c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8028e2e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028e30:	f7ff ff8e 	bl	8028d50 <mg_io_send>
 8028e34:	e7f2      	b.n	8028e1c <write_conn+0x18>
    mg_error(c, "tx err");
 8028e36:	4908      	ldr	r1, [pc, #32]	@ (8028e58 <write_conn+0x54>)
 8028e38:	4620      	mov	r0, r4
 8028e3a:	f7fe fa55 	bl	80272e8 <mg_error>
 8028e3e:	e7f3      	b.n	8028e28 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8028e40:	4602      	mov	r2, r0
 8028e42:	2100      	movs	r1, #0
 8028e44:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8028e48:	f7fd fd2f 	bl	80268aa <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8028e4c:	aa01      	add	r2, sp, #4
 8028e4e:	2108      	movs	r1, #8
 8028e50:	4620      	mov	r0, r4
 8028e52:	f7fa fdc6 	bl	80239e2 <mg_call>
}
 8028e56:	e7e7      	b.n	8028e28 <write_conn+0x24>
 8028e58:	0803c748 	.word	0x0803c748

08028e5c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8028e5c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8028e60:	f240 1221 	movw	r2, #289	@ 0x121
 8028e64:	421a      	tst	r2, r3
 8028e66:	d000      	beq.n	8028e6a <init_closure+0xe>
 8028e68:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8028e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e6e:	b086      	sub	sp, #24
 8028e70:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8028e72:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8028e74:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028e76:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8028e7a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8028e7e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8028e82:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8028e86:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8028e8a:	f7fd fd6b 	bl	8026964 <mg_ntohl>
 8028e8e:	4605      	mov	r5, r0
 8028e90:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028e94:	f7fd fd66 	bl	8026964 <mg_ntohl>
 8028e98:	2300      	movs	r3, #0
 8028e9a:	9305      	str	r3, [sp, #20]
 8028e9c:	9304      	str	r3, [sp, #16]
 8028e9e:	9003      	str	r0, [sp, #12]
 8028ea0:	9502      	str	r5, [sp, #8]
 8028ea2:	f8cd a004 	str.w	sl, [sp, #4]
 8028ea6:	f8cd 9000 	str.w	r9, [sp]
 8028eaa:	2311      	movs	r3, #17
 8028eac:	4642      	mov	r2, r8
 8028eae:	4639      	mov	r1, r7
 8028eb0:	4630      	mov	r0, r6
 8028eb2:	f7ff fe2d 	bl	8028b10 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8028eb6:	2104      	movs	r1, #4
 8028eb8:	4620      	mov	r0, r4
 8028eba:	f7ff ff05 	bl	8028cc8 <settmout>
}
 8028ebe:	b006      	add	sp, #24
 8028ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08028ec4 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8028ec4:	b530      	push	{r4, r5, lr}
 8028ec6:	b085      	sub	sp, #20
 8028ec8:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028eca:	6843      	ldr	r3, [r0, #4]
 8028ecc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028ece:	69c3      	ldr	r3, [r0, #28]
 8028ed0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8028ed2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028ed6:	f36f 03c3 	bfc	r3, #3, #1
 8028eda:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8028ede:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8028ee2:	2b00      	cmp	r3, #0
 8028ee4:	db03      	blt.n	8028eee <mg_connect_resolved+0x2a>
 8028ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8028eea:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8028eee:	68ab      	ldr	r3, [r5, #8]
 8028ef0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8028ef2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8028ef6:	1c43      	adds	r3, r0, #1
 8028ef8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 8028efc:	f7fd fdca 	bl	8026a94 <mg_ntohs>
 8028f00:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028f02:	4b51      	ldr	r3, [pc, #324]	@ (8029048 <mg_connect_resolved+0x184>)
 8028f04:	681b      	ldr	r3, [r3, #0]
 8028f06:	2b02      	cmp	r3, #2
 8028f08:	dc36      	bgt.n	8028f78 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 8028f0a:	2200      	movs	r2, #0
 8028f0c:	2103      	movs	r1, #3
 8028f0e:	4620      	mov	r0, r4
 8028f10:	f7fa fd67 	bl	80239e2 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8028f14:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028f18:	f013 0301 	ands.w	r3, r3, #1
 8028f1c:	d009      	beq.n	8028f32 <mg_connect_resolved+0x6e>
 8028f1e:	9903      	ldr	r1, [sp, #12]
 8028f20:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8028f24:	d03b      	beq.n	8028f9e <mg_connect_resolved+0xda>
 8028f26:	68aa      	ldr	r2, [r5, #8]
 8028f28:	68e8      	ldr	r0, [r5, #12]
 8028f2a:	ea62 0200 	orn	r2, r2, r0
 8028f2e:	4291      	cmp	r1, r2
 8028f30:	d035      	beq.n	8028f9e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028f32:	68aa      	ldr	r2, [r5, #8]
 8028f34:	2a00      	cmp	r2, #0
 8028f36:	d046      	beq.n	8028fc6 <mg_connect_resolved+0x102>
 8028f38:	9903      	ldr	r1, [sp, #12]
 8028f3a:	68e8      	ldr	r0, [r5, #12]
 8028f3c:	404a      	eors	r2, r1
 8028f3e:	4202      	tst	r2, r0
 8028f40:	d141      	bne.n	8028fc6 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8028f42:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028f44:	4291      	cmp	r1, r2
 8028f46:	d03e      	beq.n	8028fc6 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028f48:	4b3f      	ldr	r3, [pc, #252]	@ (8029048 <mg_connect_resolved+0x184>)
 8028f4a:	681b      	ldr	r3, [r3, #0]
 8028f4c:	2b02      	cmp	r3, #2
 8028f4e:	dc2e      	bgt.n	8028fae <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8028f50:	9903      	ldr	r1, [sp, #12]
 8028f52:	4628      	mov	r0, r5
 8028f54:	f7fd fe9b 	bl	8026c8e <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8028f58:	2102      	movs	r1, #2
 8028f5a:	4620      	mov	r0, r4
 8028f5c:	f7ff feb4 	bl	8028cc8 <settmout>
    c->is_arplooking = 1;
 8028f60:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028f64:	f043 0310 	orr.w	r3, r3, #16
 8028f68:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 8028f6c:	b2db      	uxtb	r3, r3
 8028f6e:	f043 0320 	orr.w	r3, r3, #32
 8028f72:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8028f76:	e018      	b.n	8028faa <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028f78:	4b34      	ldr	r3, [pc, #208]	@ (802904c <mg_connect_resolved+0x188>)
 8028f7a:	f241 724f 	movw	r2, #5967	@ 0x174f
 8028f7e:	4934      	ldr	r1, [pc, #208]	@ (8029050 <mg_connect_resolved+0x18c>)
 8028f80:	2003      	movs	r0, #3
 8028f82:	f7fe f8c9 	bl	8027118 <mg_log_prefix>
 8028f86:	4a33      	ldr	r2, [pc, #204]	@ (8029054 <mg_connect_resolved+0x190>)
 8028f88:	f104 031c 	add.w	r3, r4, #28
 8028f8c:	9301      	str	r3, [sp, #4]
 8028f8e:	9200      	str	r2, [sp, #0]
 8028f90:	f104 0308 	add.w	r3, r4, #8
 8028f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f96:	4830      	ldr	r0, [pc, #192]	@ (8029058 <mg_connect_resolved+0x194>)
 8028f98:	f7fb ff6c 	bl	8024e74 <mg_log>
 8028f9c:	e7b5      	b.n	8028f0a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8028f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028fa2:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8028fa6:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 8028faa:	b005      	add	sp, #20
 8028fac:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028fae:	4b27      	ldr	r3, [pc, #156]	@ (802904c <mg_connect_resolved+0x188>)
 8028fb0:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028fb4:	4926      	ldr	r1, [pc, #152]	@ (8029050 <mg_connect_resolved+0x18c>)
 8028fb6:	2003      	movs	r0, #3
 8028fb8:	f7fe f8ae 	bl	8027118 <mg_log_prefix>
 8028fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028fbe:	4827      	ldr	r0, [pc, #156]	@ (802905c <mg_connect_resolved+0x198>)
 8028fc0:	f7fb ff58 	bl	8024e74 <mg_log>
 8028fc4:	e7c4      	b.n	8028f50 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8028fc6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8028fca:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 8028fce:	2ae0      	cmp	r2, #224	@ 0xe0
 8028fd0:	d00e      	beq.n	8028ff0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8028fd2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8028fd6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8028fda:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 8028fde:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8028fe2:	b31b      	cbz	r3, 802902c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8028fe4:	2200      	movs	r2, #0
 8028fe6:	2104      	movs	r1, #4
 8028fe8:	4620      	mov	r0, r4
 8028fea:	f7fa fcfa 	bl	80239e2 <mg_call>
 8028fee:	e7dc      	b.n	8028faa <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8028ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8029060 <mg_connect_resolved+0x19c>)
 8028ff2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8028ff6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8028ffa:	0c1b      	lsrs	r3, r3, #16
 8028ffc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8029000:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8029004:	b2db      	uxtb	r3, r3
 8029006:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 802900a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802900e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8029012:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8029016:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802901a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802901e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8029022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8029026:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802902a:	e7be      	b.n	8028faa <mg_connect_resolved+0xe6>
      send_syn(c);
 802902c:	4620      	mov	r0, r4
 802902e:	f7ff fdff 	bl	8028c30 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8029032:	2103      	movs	r1, #3
 8029034:	4620      	mov	r0, r4
 8029036:	f7ff fe47 	bl	8028cc8 <settmout>
      c->is_connecting = 1;
 802903a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802903e:	f043 0320 	orr.w	r3, r3, #32
 8029042:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8029046:	e7b0      	b.n	8028faa <mg_connect_resolved+0xe6>
 8029048:	2000012c 	.word	0x2000012c
 802904c:	0803cc7c 	.word	0x0803cc7c
 8029050:	0803c2f0 	.word	0x0803c2f0
 8029054:	08026fcd 	.word	0x08026fcd
 8029058:	0803c750 	.word	0x0803c750
 802905c:	0803c760 	.word	0x0803c760
 8029060:	0803716c 	.word	0x0803716c

08029064 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029066:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8029068:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802906a:	2902      	cmp	r1, #2
 802906c:	d009      	beq.n	8029082 <dns_cb+0x1e>
 802906e:	4604      	mov	r4, r0
 8029070:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8029074:	2907      	cmp	r1, #7
 8029076:	d016      	beq.n	80290a6 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8029078:	2909      	cmp	r1, #9
 802907a:	f000 809a 	beq.w	80291b2 <dns_cb+0x14e>
}
 802907e:	b049      	add	sp, #292	@ 0x124
 8029080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8029082:	6816      	ldr	r6, [r2, #0]
 8029084:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8029086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029088:	e000      	b.n	802908c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802908a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802908c:	2b00      	cmp	r3, #0
 802908e:	d0f6      	beq.n	802907e <dns_cb+0x1a>
      tmp = d->next;
 8029090:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8029092:	6899      	ldr	r1, [r3, #8]
 8029094:	68da      	ldr	r2, [r3, #12]
 8029096:	42b1      	cmp	r1, r6
 8029098:	41aa      	sbcs	r2, r5
 802909a:	d2f6      	bcs.n	802908a <dns_cb+0x26>
 802909c:	494c      	ldr	r1, [pc, #304]	@ (80291d0 <dns_cb+0x16c>)
 802909e:	6858      	ldr	r0, [r3, #4]
 80290a0:	f7fe f922 	bl	80272e8 <mg_error>
 80290a4:	e7f1      	b.n	802908a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 80290a6:	aa02      	add	r2, sp, #8
 80290a8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80290aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80290ac:	f7fe f870 	bl	8027190 <mg_dns_parse>
 80290b0:	b9c8      	cbnz	r0, 80290e6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 80290b2:	4b48      	ldr	r3, [pc, #288]	@ (80291d4 <dns_cb+0x170>)
 80290b4:	681b      	ldr	r3, [r3, #0]
 80290b6:	2b00      	cmp	r3, #0
 80290b8:	dc0a      	bgt.n	80290d0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 80290ba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80290bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80290be:	f7fb f83b 	bl	8024138 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80290c2:	4b44      	ldr	r3, [pc, #272]	@ (80291d4 <dns_cb+0x170>)
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	2b00      	cmp	r3, #0
 80290c8:	dc68      	bgt.n	802919c <dns_cb+0x138>
    c->recv.len = 0;
 80290ca:	2300      	movs	r3, #0
 80290cc:	6423      	str	r3, [r4, #64]	@ 0x40
 80290ce:	e7d6      	b.n	802907e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80290d0:	4b41      	ldr	r3, [pc, #260]	@ (80291d8 <dns_cb+0x174>)
 80290d2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80290d6:	4941      	ldr	r1, [pc, #260]	@ (80291dc <dns_cb+0x178>)
 80290d8:	2001      	movs	r0, #1
 80290da:	f7fe f81d 	bl	8027118 <mg_log_prefix>
 80290de:	4840      	ldr	r0, [pc, #256]	@ (80291e0 <dns_cb+0x17c>)
 80290e0:	f7fb fec8 	bl	8024e74 <mg_log>
 80290e4:	e7e9      	b.n	80290ba <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80290e6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80290e8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80290ea:	e008      	b.n	80290fe <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80290ec:	6868      	ldr	r0, [r5, #4]
 80290ee:	f7ff fee9 	bl	8028ec4 <mg_connect_resolved>
        mg_dns_free(head, d);
 80290f2:	4629      	mov	r1, r5
 80290f4:	4630      	mov	r0, r6
 80290f6:	f7f9 fa35 	bl	8022564 <mg_dns_free>
        resolved = 1;
 80290fa:	2101      	movs	r1, #1
 80290fc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80290fe:	2d00      	cmp	r5, #0
 8029100:	d049      	beq.n	8029196 <dns_cb+0x132>
        tmp = d->next;
 8029102:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8029104:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8029108:	8a2b      	ldrh	r3, [r5, #16]
 802910a:	429a      	cmp	r2, r3
 802910c:	d1f6      	bne.n	80290fc <dns_cb+0x98>
        if (d->c->is_resolving) {
 802910e:	6868      	ldr	r0, [r5, #4]
 8029110:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029114:	f013 0f08 	tst.w	r3, #8
 8029118:	d02c      	beq.n	8029174 <dns_cb+0x110>
          if (dm.resolved) {
 802911a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802911e:	b323      	cbz	r3, 802916a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8029120:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8029122:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8029126:	686b      	ldr	r3, [r5, #4]
 8029128:	f103 0c1c 	add.w	ip, r3, #28
 802912c:	f10d 0e0c 	add.w	lr, sp, #12
 8029130:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8029134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8029138:	f8de 3000 	ldr.w	r3, [lr]
 802913c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8029140:	4b24      	ldr	r3, [pc, #144]	@ (80291d4 <dns_cb+0x170>)
 8029142:	681b      	ldr	r3, [r3, #0]
 8029144:	2b02      	cmp	r3, #2
 8029146:	ddd1      	ble.n	80290ec <dns_cb+0x88>
 8029148:	4b23      	ldr	r3, [pc, #140]	@ (80291d8 <dns_cb+0x174>)
 802914a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802914e:	4923      	ldr	r1, [pc, #140]	@ (80291dc <dns_cb+0x178>)
 8029150:	2003      	movs	r0, #3
 8029152:	f7fd ffe1 	bl	8027118 <mg_log_prefix>
 8029156:	686b      	ldr	r3, [r5, #4]
 8029158:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802915a:	331c      	adds	r3, #28
 802915c:	9300      	str	r3, [sp, #0]
 802915e:	4b21      	ldr	r3, [pc, #132]	@ (80291e4 <dns_cb+0x180>)
 8029160:	aa08      	add	r2, sp, #32
 8029162:	4821      	ldr	r0, [pc, #132]	@ (80291e8 <dns_cb+0x184>)
 8029164:	f7fb fe86 	bl	8024e74 <mg_log>
 8029168:	e7c0      	b.n	80290ec <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802916a:	aa08      	add	r2, sp, #32
 802916c:	491f      	ldr	r1, [pc, #124]	@ (80291ec <dns_cb+0x188>)
 802916e:	f7fe f8bb 	bl	80272e8 <mg_error>
 8029172:	e7be      	b.n	80290f2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8029174:	4b17      	ldr	r3, [pc, #92]	@ (80291d4 <dns_cb+0x170>)
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	2b00      	cmp	r3, #0
 802917a:	ddba      	ble.n	80290f2 <dns_cb+0x8e>
 802917c:	4b16      	ldr	r3, [pc, #88]	@ (80291d8 <dns_cb+0x174>)
 802917e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8029182:	4916      	ldr	r1, [pc, #88]	@ (80291dc <dns_cb+0x178>)
 8029184:	2001      	movs	r0, #1
 8029186:	f7fd ffc7 	bl	8027118 <mg_log_prefix>
 802918a:	686b      	ldr	r3, [r5, #4]
 802918c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802918e:	4818      	ldr	r0, [pc, #96]	@ (80291f0 <dns_cb+0x18c>)
 8029190:	f7fb fe70 	bl	8024e74 <mg_log>
 8029194:	e7ad      	b.n	80290f2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8029196:	2900      	cmp	r1, #0
 8029198:	d197      	bne.n	80290ca <dns_cb+0x66>
 802919a:	e792      	b.n	80290c2 <dns_cb+0x5e>
 802919c:	4b0e      	ldr	r3, [pc, #56]	@ (80291d8 <dns_cb+0x174>)
 802919e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80291a2:	490e      	ldr	r1, [pc, #56]	@ (80291dc <dns_cb+0x178>)
 80291a4:	2001      	movs	r0, #1
 80291a6:	f7fd ffb7 	bl	8027118 <mg_log_prefix>
 80291aa:	4812      	ldr	r0, [pc, #72]	@ (80291f4 <dns_cb+0x190>)
 80291ac:	f7fb fe62 	bl	8024e74 <mg_log>
 80291b0:	e78b      	b.n	80290ca <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 80291b2:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80291b4:	2c00      	cmp	r4, #0
 80291b6:	f43f af62 	beq.w	802907e <dns_cb+0x1a>
      tmp = d->next;
 80291ba:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 80291bc:	490e      	ldr	r1, [pc, #56]	@ (80291f8 <dns_cb+0x194>)
 80291be:	6860      	ldr	r0, [r4, #4]
 80291c0:	f7fe f892 	bl	80272e8 <mg_error>
      mg_dns_free(head, d);
 80291c4:	4621      	mov	r1, r4
 80291c6:	4630      	mov	r0, r6
 80291c8:	f7f9 f9cc 	bl	8022564 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80291cc:	462c      	mov	r4, r5
 80291ce:	e7f1      	b.n	80291b4 <dns_cb+0x150>
 80291d0:	0803c774 	.word	0x0803c774
 80291d4:	2000012c 	.word	0x2000012c
 80291d8:	0803cd50 	.word	0x0803cd50
 80291dc:	0803c2f0 	.word	0x0803c2f0
 80291e0:	0803c780 	.word	0x0803c780
 80291e4:	08026fb1 	.word	0x08026fb1
 80291e8:	0803c79c 	.word	0x0803c79c
 80291ec:	0803c7ac 	.word	0x0803c7ac
 80291f0:	0803c7c4 	.word	0x0803c7c4
 80291f4:	0803c7dc 	.word	0x0803c7dc
 80291f8:	0803c7ec 	.word	0x0803c7ec

080291fc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80291fc:	b510      	push	{r4, lr}
 80291fe:	b086      	sub	sp, #24
 8029200:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8029202:	4a12      	ldr	r2, [pc, #72]	@ (802924c <tx_dhcp_discover+0x50>)
 8029204:	ab04      	add	r3, sp, #16
 8029206:	e892 0003 	ldmia.w	r2, {r0, r1}
 802920a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802920e:	2200      	movs	r2, #0
 8029210:	9202      	str	r2, [sp, #8]
 8029212:	2108      	movs	r1, #8
 8029214:	9101      	str	r1, [sp, #4]
 8029216:	9300      	str	r3, [sp, #0]
 8029218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802921c:	490c      	ldr	r1, [pc, #48]	@ (8029250 <tx_dhcp_discover+0x54>)
 802921e:	4620      	mov	r0, r4
 8029220:	f7fd fd7a 	bl	8026d18 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8029224:	4b0b      	ldr	r3, [pc, #44]	@ (8029254 <tx_dhcp_discover+0x58>)
 8029226:	681b      	ldr	r3, [r3, #0]
 8029228:	2b02      	cmp	r3, #2
 802922a:	dc01      	bgt.n	8029230 <tx_dhcp_discover+0x34>
}
 802922c:	b006      	add	sp, #24
 802922e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8029230:	4b09      	ldr	r3, [pc, #36]	@ (8029258 <tx_dhcp_discover+0x5c>)
 8029232:	f241 4270 	movw	r2, #5232	@ 0x1470
 8029236:	4909      	ldr	r1, [pc, #36]	@ (802925c <tx_dhcp_discover+0x60>)
 8029238:	2003      	movs	r0, #3
 802923a:	f7fd ff6d 	bl	8027118 <mg_log_prefix>
 802923e:	4622      	mov	r2, r4
 8029240:	4907      	ldr	r1, [pc, #28]	@ (8029260 <tx_dhcp_discover+0x64>)
 8029242:	4808      	ldr	r0, [pc, #32]	@ (8029264 <tx_dhcp_discover+0x68>)
 8029244:	f7fb fe16 	bl	8024e74 <mg_log>
}
 8029248:	e7f0      	b.n	802922c <tx_dhcp_discover+0x30>
 802924a:	bf00      	nop
 802924c:	0803c818 	.word	0x0803c818
 8029250:	0803cd78 	.word	0x0803cd78
 8029254:	2000012c 	.word	0x2000012c
 8029258:	0803cc4c 	.word	0x0803cc4c
 802925c:	0803c2f0 	.word	0x0803c2f0
 8029260:	08024e45 	.word	0x08024e45
 8029264:	0803c7f8 	.word	0x0803c7f8

08029268 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8029268:	b510      	push	{r4, lr}
 802926a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802926c:	4c0d      	ldr	r4, [pc, #52]	@ (80292a4 <tx_dhcp_request_re+0x3c>)
 802926e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8029270:	2401      	movs	r4, #1
 8029272:	9402      	str	r4, [sp, #8]
 8029274:	2404      	movs	r4, #4
 8029276:	9401      	str	r4, [sp, #4]
 8029278:	ac05      	add	r4, sp, #20
 802927a:	9400      	str	r4, [sp, #0]
 802927c:	f7fd fd4c 	bl	8026d18 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8029280:	4b09      	ldr	r3, [pc, #36]	@ (80292a8 <tx_dhcp_request_re+0x40>)
 8029282:	681b      	ldr	r3, [r3, #0]
 8029284:	2b02      	cmp	r3, #2
 8029286:	dc01      	bgt.n	802928c <tx_dhcp_request_re+0x24>
}
 8029288:	b006      	add	sp, #24
 802928a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802928c:	4b07      	ldr	r3, [pc, #28]	@ (80292ac <tx_dhcp_request_re+0x44>)
 802928e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8029292:	4907      	ldr	r1, [pc, #28]	@ (80292b0 <tx_dhcp_request_re+0x48>)
 8029294:	2003      	movs	r0, #3
 8029296:	f7fd ff3f 	bl	8027118 <mg_log_prefix>
 802929a:	4806      	ldr	r0, [pc, #24]	@ (80292b4 <tx_dhcp_request_re+0x4c>)
 802929c:	f7fb fdea 	bl	8024e74 <mg_log>
}
 80292a0:	e7f2      	b.n	8029288 <tx_dhcp_request_re+0x20>
 80292a2:	bf00      	nop
 80292a4:	ff030135 	.word	0xff030135
 80292a8:	2000012c 	.word	0x2000012c
 80292ac:	0803cc28 	.word	0x0803cc28
 80292b0:	0803c2f0 	.word	0x0803c2f0
 80292b4:	0803c824 	.word	0x0803c824

080292b8 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80292b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292ba:	b083      	sub	sp, #12
 80292bc:	4604      	mov	r4, r0
 80292be:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80292c0:	698e      	ldr	r6, [r1, #24]
 80292c2:	88f7      	ldrh	r7, [r6, #6]
 80292c4:	2001      	movs	r0, #1
 80292c6:	f7fd fbe5 	bl	8026a94 <mg_ntohs>
 80292ca:	4287      	cmp	r7, r0
 80292cc:	d006      	beq.n	80292dc <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 80292ce:	2002      	movs	r0, #2
 80292d0:	f7fd fbe0 	bl	8026a94 <mg_ntohs>
 80292d4:	4287      	cmp	r7, r0
 80292d6:	d05a      	beq.n	802938e <rx_arp+0xd6>
}
 80292d8:	b003      	add	sp, #12
 80292da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80292dc:	69b2      	ldr	r2, [r6, #24]
 80292de:	68a3      	ldr	r3, [r4, #8]
 80292e0:	429a      	cmp	r2, r3
 80292e2:	d1f4      	bne.n	80292ce <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80292e4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80292e6:	692b      	ldr	r3, [r5, #16]
 80292e8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80292ec:	6032      	str	r2, [r6, #0]
 80292ee:	895b      	ldrh	r3, [r3, #10]
 80292f0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80292f2:	6823      	ldr	r3, [r4, #0]
 80292f4:	f8c6 3006 	str.w	r3, [r6, #6]
 80292f8:	88a3      	ldrh	r3, [r4, #4]
 80292fa:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80292fc:	f640 0006 	movw	r0, #2054	@ 0x806
 8029300:	f7fd fbc8 	bl	8026a94 <mg_ntohs>
 8029304:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8029306:	69ab      	ldr	r3, [r5, #24]
 8029308:	6818      	ldr	r0, [r3, #0]
 802930a:	6859      	ldr	r1, [r3, #4]
 802930c:	689a      	ldr	r2, [r3, #8]
 802930e:	68df      	ldr	r7, [r3, #12]
 8029310:	f8c6 000e 	str.w	r0, [r6, #14]
 8029314:	f8c6 1012 	str.w	r1, [r6, #18]
 8029318:	f8c6 2016 	str.w	r2, [r6, #22]
 802931c:	f8c6 701a 	str.w	r7, [r6, #26]
 8029320:	6918      	ldr	r0, [r3, #16]
 8029322:	6959      	ldr	r1, [r3, #20]
 8029324:	699a      	ldr	r2, [r3, #24]
 8029326:	f8c6 001e 	str.w	r0, [r6, #30]
 802932a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 802932e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8029332:	2002      	movs	r0, #2
 8029334:	f7fd fbae 	bl	8026a94 <mg_ntohs>
 8029338:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802933a:	69ab      	ldr	r3, [r5, #24]
 802933c:	689a      	ldr	r2, [r3, #8]
 802933e:	6232      	str	r2, [r6, #32]
 8029340:	899b      	ldrh	r3, [r3, #12]
 8029342:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8029344:	6823      	ldr	r3, [r4, #0]
 8029346:	f8c6 3016 	str.w	r3, [r6, #22]
 802934a:	88a3      	ldrh	r3, [r4, #4]
 802934c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 802934e:	69ab      	ldr	r3, [r5, #24]
 8029350:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8029354:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8029358:	68a3      	ldr	r3, [r4, #8]
 802935a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802935c:	4b32      	ldr	r3, [pc, #200]	@ (8029428 <rx_arp+0x170>)
 802935e:	681b      	ldr	r3, [r3, #0]
 8029360:	2b02      	cmp	r3, #2
 8029362:	dc04      	bgt.n	802936e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8029364:	212a      	movs	r1, #42	@ 0x2a
 8029366:	4620      	mov	r0, r4
 8029368:	f7f8 feed 	bl	8022146 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802936c:	e7b4      	b.n	80292d8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802936e:	4b2f      	ldr	r3, [pc, #188]	@ (802942c <rx_arp+0x174>)
 8029370:	f241 4292 	movw	r2, #5266	@ 0x1492
 8029374:	492e      	ldr	r1, [pc, #184]	@ (8029430 <rx_arp+0x178>)
 8029376:	2003      	movs	r0, #3
 8029378:	f7fd fece 	bl	8027118 <mg_log_prefix>
 802937c:	9400      	str	r4, [sp, #0]
 802937e:	4b2d      	ldr	r3, [pc, #180]	@ (8029434 <rx_arp+0x17c>)
 8029380:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8029384:	492c      	ldr	r1, [pc, #176]	@ (8029438 <rx_arp+0x180>)
 8029386:	482d      	ldr	r0, [pc, #180]	@ (802943c <rx_arp+0x184>)
 8029388:	f7fb fd74 	bl	8024e74 <mg_log>
 802938c:	e7ea      	b.n	8029364 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802938e:	2206      	movs	r2, #6
 8029390:	4621      	mov	r1, r4
 8029392:	f106 0012 	add.w	r0, r6, #18
 8029396:	f004 fa27 	bl	802d7e8 <memcmp>
 802939a:	2800      	cmp	r0, #0
 802939c:	d19c      	bne.n	80292d8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802939e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 80293a2:	6923      	ldr	r3, [r4, #16]
 80293a4:	429a      	cmp	r2, r3
 80293a6:	d026      	beq.n	80293f6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80293a8:	2200      	movs	r2, #0
 80293aa:	4629      	mov	r1, r5
 80293ac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80293ae:	f7fa f9ac 	bl	802370a <getpeer>
      if (c != NULL && c->is_arplooking) {
 80293b2:	4604      	mov	r4, r0
 80293b4:	2800      	cmp	r0, #0
 80293b6:	d08f      	beq.n	80292d8 <rx_arp+0x20>
 80293b8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80293bc:	f013 0f10 	tst.w	r3, #16
 80293c0:	d08a      	beq.n	80292d8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 80293c2:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 80293c6:	68b3      	ldr	r3, [r6, #8]
 80293c8:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 80293cc:	89b3      	ldrh	r3, [r6, #12]
 80293ce:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80293d2:	4b15      	ldr	r3, [pc, #84]	@ (8029428 <rx_arp+0x170>)
 80293d4:	681b      	ldr	r3, [r3, #0]
 80293d6:	2b02      	cmp	r3, #2
 80293d8:	dc14      	bgt.n	8029404 <rx_arp+0x14c>
        c->is_arplooking = 0;
 80293da:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80293de:	f36f 1304 	bfc	r3, #4, #1
 80293e2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 80293e6:	4620      	mov	r0, r4
 80293e8:	f7ff fc22 	bl	8028c30 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 80293ec:	2103      	movs	r1, #3
 80293ee:	4620      	mov	r0, r4
 80293f0:	f7ff fc6a 	bl	8028cc8 <settmout>
 80293f4:	e770      	b.n	80292d8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80293f6:	68b3      	ldr	r3, [r6, #8]
 80293f8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80293fc:	89b3      	ldrh	r3, [r6, #12]
 80293fe:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8029402:	e769      	b.n	80292d8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8029404:	4b09      	ldr	r3, [pc, #36]	@ (802942c <rx_arp+0x174>)
 8029406:	f241 429f 	movw	r2, #5279	@ 0x149f
 802940a:	4909      	ldr	r1, [pc, #36]	@ (8029430 <rx_arp+0x178>)
 802940c:	2003      	movs	r0, #3
 802940e:	f7fd fe83 	bl	8027118 <mg_log_prefix>
 8029412:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029414:	9501      	str	r5, [sp, #4]
 8029416:	4b07      	ldr	r3, [pc, #28]	@ (8029434 <rx_arp+0x17c>)
 8029418:	9300      	str	r3, [sp, #0]
 802941a:	f104 031c 	add.w	r3, r4, #28
 802941e:	4a06      	ldr	r2, [pc, #24]	@ (8029438 <rx_arp+0x180>)
 8029420:	4807      	ldr	r0, [pc, #28]	@ (8029440 <rx_arp+0x188>)
 8029422:	f7fb fd27 	bl	8024e74 <mg_log>
 8029426:	e7d8      	b.n	80293da <rx_arp+0x122>
 8029428:	2000012c 	.word	0x2000012c
 802942c:	0803cc14 	.word	0x0803cc14
 8029430:	0803c2f0 	.word	0x0803c2f0
 8029434:	08024e45 	.word	0x08024e45
 8029438:	08024e35 	.word	0x08024e35
 802943c:	0803c834 	.word	0x0803c834
 8029440:	0803c84c 	.word	0x0803c84c

08029444 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8029444:	b570      	push	{r4, r5, r6, lr}
 8029446:	b08c      	sub	sp, #48	@ 0x30
 8029448:	4686      	mov	lr, r0
 802944a:	460d      	mov	r5, r1
 802944c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 802944e:	f10d 0c14 	add.w	ip, sp, #20
 8029452:	4c22      	ldr	r4, [pc, #136]	@ (80294dc <tx_dhcp_request_sel+0x98>)
 8029454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802945a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802945e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8029462:	f82c 2b02 	strh.w	r2, [ip], #2
 8029466:	0c12      	lsrs	r2, r2, #16
 8029468:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802946c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8029470:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8029472:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8029476:	b323      	cbz	r3, 80294c2 <tx_dhcp_request_sel+0x7e>
 8029478:	2306      	movs	r3, #6
 802947a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802947e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8029480:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8029484:	b132      	cbz	r2, 8029494 <tx_dhcp_request_sel+0x50>
 8029486:	1c5a      	adds	r2, r3, #1
 8029488:	3348      	adds	r3, #72	@ 0x48
 802948a:	446b      	add	r3, sp
 802948c:	212a      	movs	r1, #42	@ 0x2a
 802948e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8029492:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8029494:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8029498:	441a      	add	r2, r3
 802949a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802949e:	2200      	movs	r2, #0
 80294a0:	9202      	str	r2, [sp, #8]
 80294a2:	3319      	adds	r3, #25
 80294a4:	9301      	str	r3, [sp, #4]
 80294a6:	ab05      	add	r3, sp, #20
 80294a8:	9300      	str	r3, [sp, #0]
 80294aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80294ae:	490c      	ldr	r1, [pc, #48]	@ (80294e0 <tx_dhcp_request_sel+0x9c>)
 80294b0:	4670      	mov	r0, lr
 80294b2:	f7fd fc31 	bl	8026d18 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80294b6:	4b0b      	ldr	r3, [pc, #44]	@ (80294e4 <tx_dhcp_request_sel+0xa0>)
 80294b8:	681b      	ldr	r3, [r3, #0]
 80294ba:	2b02      	cmp	r3, #2
 80294bc:	dc03      	bgt.n	80294c6 <tx_dhcp_request_sel+0x82>
}
 80294be:	b00c      	add	sp, #48	@ 0x30
 80294c0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 80294c2:	2300      	movs	r3, #0
 80294c4:	e7dc      	b.n	8029480 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 80294c6:	4b08      	ldr	r3, [pc, #32]	@ (80294e8 <tx_dhcp_request_sel+0xa4>)
 80294c8:	f241 425b 	movw	r2, #5211	@ 0x145b
 80294cc:	4907      	ldr	r1, [pc, #28]	@ (80294ec <tx_dhcp_request_sel+0xa8>)
 80294ce:	2003      	movs	r0, #3
 80294d0:	f7fd fe22 	bl	8027118 <mg_log_prefix>
 80294d4:	4806      	ldr	r0, [pc, #24]	@ (80294f0 <tx_dhcp_request_sel+0xac>)
 80294d6:	f7fb fccd 	bl	8024e74 <mg_log>
}
 80294da:	e7f0      	b.n	80294be <tx_dhcp_request_sel+0x7a>
 80294dc:	08037398 	.word	0x08037398
 80294e0:	0803cd78 	.word	0x0803cd78
 80294e4:	2000012c 	.word	0x2000012c
 80294e8:	0803cbe8 	.word	0x0803cbe8
 80294ec:	0803c2f0 	.word	0x0803c2f0
 80294f0:	0803c824 	.word	0x0803c824

080294f4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80294f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80294f8:	b089      	sub	sp, #36	@ 0x24
 80294fa:	4604      	mov	r4, r0
 80294fc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80294fe:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029502:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029506:	d049      	beq.n	802959c <read_conn+0xa8>
 8029508:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802950c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 802950e:	6878      	ldr	r0, [r7, #4]
 8029510:	f7fd fa28 	bl	8026964 <mg_ntohl>
 8029514:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029516:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8029518:	7b7b      	ldrb	r3, [r7, #13]
 802951a:	f013 0f01 	tst.w	r3, #1
 802951e:	d053      	beq.n	80295c8 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8029520:	68eb      	ldr	r3, [r5, #12]
 8029522:	4403      	add	r3, r0
 8029524:	3301      	adds	r3, #1
 8029526:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802952a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802952e:	f013 0f10 	tst.w	r3, #16
 8029532:	d003      	beq.n	802953c <read_conn+0x48>
 8029534:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029538:	2b04      	cmp	r3, #4
 802953a:	d032      	beq.n	80295a2 <read_conn+0xae>
      c->is_draining = 1;
 802953c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029540:	f043 0310 	orr.w	r3, r3, #16
 8029544:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8029548:	2104      	movs	r1, #4
 802954a:	4620      	mov	r0, r4
 802954c:	f7ff fbbc 	bl	8028cc8 <settmout>
      flags |= TH_FIN;
 8029550:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8029554:	6863      	ldr	r3, [r4, #4]
 8029556:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8029558:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802955c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8029560:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8029564:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029568:	f7fd f9fc 	bl	8026964 <mg_ntohl>
 802956c:	4605      	mov	r5, r0
 802956e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029572:	f7fd f9f7 	bl	8026964 <mg_ntohl>
 8029576:	2300      	movs	r3, #0
 8029578:	9305      	str	r3, [sp, #20]
 802957a:	4b9b      	ldr	r3, [pc, #620]	@ (80297e8 <read_conn+0x2f4>)
 802957c:	9304      	str	r3, [sp, #16]
 802957e:	9003      	str	r0, [sp, #12]
 8029580:	9502      	str	r5, [sp, #8]
 8029582:	f8cd a004 	str.w	sl, [sp, #4]
 8029586:	f8cd 9000 	str.w	r9, [sp]
 802958a:	465b      	mov	r3, fp
 802958c:	4632      	mov	r2, r6
 802958e:	4641      	mov	r1, r8
 8029590:	4638      	mov	r0, r7
 8029592:	f7ff fabd 	bl	8028b10 <tx_tcp>
}
 8029596:	b009      	add	sp, #36	@ 0x24
 8029598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802959c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 80295a0:	e7b4      	b.n	802950c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 80295a2:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 80295a6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80295a8:	6898      	ldr	r0, [r3, #8]
 80295aa:	f7fd f9db 	bl	8026964 <mg_ntohl>
 80295ae:	4287      	cmp	r7, r0
 80295b0:	d004      	beq.n	80295bc <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80295b2:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 80295b6:	f04f 0b10 	mov.w	fp, #16
 80295ba:	e7cb      	b.n	8029554 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 80295bc:	3701      	adds	r7, #1
 80295be:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 80295c2:	f04f 0b10 	mov.w	fp, #16
 80295c6:	e7c5      	b.n	8029554 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 80295c8:	68eb      	ldr	r3, [r5, #12]
 80295ca:	2b00      	cmp	r3, #0
 80295cc:	d0e3      	beq.n	8029596 <read_conn+0xa2>
  } else if (seq != s->ack) {
 80295ce:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80295d2:	4282      	cmp	r2, r0
 80295d4:	d046      	beq.n	8029664 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80295d6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 80295d8:	42aa      	cmp	r2, r5
 80295da:	d025      	beq.n	8029628 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80295dc:	4b83      	ldr	r3, [pc, #524]	@ (80297ec <read_conn+0x2f8>)
 80295de:	681b      	ldr	r3, [r3, #0]
 80295e0:	2b03      	cmp	r3, #3
 80295e2:	dc30      	bgt.n	8029646 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80295e4:	6863      	ldr	r3, [r4, #4]
 80295e6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80295e8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80295ec:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80295f0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80295f4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80295f8:	f7fd f9b4 	bl	8026964 <mg_ntohl>
 80295fc:	4605      	mov	r5, r0
 80295fe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029602:	f7fd f9af 	bl	8026964 <mg_ntohl>
 8029606:	2300      	movs	r3, #0
 8029608:	9305      	str	r3, [sp, #20]
 802960a:	4b77      	ldr	r3, [pc, #476]	@ (80297e8 <read_conn+0x2f4>)
 802960c:	9304      	str	r3, [sp, #16]
 802960e:	9003      	str	r0, [sp, #12]
 8029610:	9502      	str	r5, [sp, #8]
 8029612:	f8cd a004 	str.w	sl, [sp, #4]
 8029616:	f8cd 9000 	str.w	r9, [sp]
 802961a:	2310      	movs	r3, #16
 802961c:	4632      	mov	r2, r6
 802961e:	4641      	mov	r1, r8
 8029620:	4638      	mov	r0, r7
 8029622:	f7ff fa75 	bl	8028b10 <tx_tcp>
 8029626:	e7b6      	b.n	8029596 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8029628:	4b70      	ldr	r3, [pc, #448]	@ (80297ec <read_conn+0x2f8>)
 802962a:	681b      	ldr	r3, [r3, #0]
 802962c:	2b03      	cmp	r3, #3
 802962e:	ddb2      	ble.n	8029596 <read_conn+0xa2>
 8029630:	4b6f      	ldr	r3, [pc, #444]	@ (80297f0 <read_conn+0x2fc>)
 8029632:	f241 52da 	movw	r2, #5594	@ 0x15da
 8029636:	496f      	ldr	r1, [pc, #444]	@ (80297f4 <read_conn+0x300>)
 8029638:	2004      	movs	r0, #4
 802963a:	f7fd fd6d 	bl	8027118 <mg_log_prefix>
 802963e:	486e      	ldr	r0, [pc, #440]	@ (80297f8 <read_conn+0x304>)
 8029640:	f7fb fc18 	bl	8024e74 <mg_log>
 8029644:	e7a7      	b.n	8029596 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8029646:	4b6a      	ldr	r3, [pc, #424]	@ (80297f0 <read_conn+0x2fc>)
 8029648:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802964c:	4969      	ldr	r1, [pc, #420]	@ (80297f4 <read_conn+0x300>)
 802964e:	2004      	movs	r0, #4
 8029650:	f7fd fd62 	bl	8027118 <mg_log_prefix>
 8029654:	462b      	mov	r3, r5
 8029656:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802965a:	4641      	mov	r1, r8
 802965c:	4867      	ldr	r0, [pc, #412]	@ (80297fc <read_conn+0x308>)
 802965e:	f7fb fc09 	bl	8024e74 <mg_log>
 8029662:	e7bf      	b.n	80295e4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8029664:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8029668:	f8d9 1008 	ldr.w	r1, [r9, #8]
 802966c:	1a52      	subs	r2, r2, r1
 802966e:	4293      	cmp	r3, r2
 8029670:	d905      	bls.n	802967e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8029672:	4419      	add	r1, r3
 8029674:	4648      	mov	r0, r9
 8029676:	f7fe fb8b 	bl	8027d90 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 802967a:	2800      	cmp	r0, #0
 802967c:	d05c      	beq.n	8029738 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802967e:	f8d9 0000 	ldr.w	r0, [r9]
 8029682:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029686:	68ea      	ldr	r2, [r5, #12]
 8029688:	68a9      	ldr	r1, [r5, #8]
 802968a:	4418      	add	r0, r3
 802968c:	f005 fea6 	bl	802f3dc <memcpy>
    io->len += pkt->pay.len;
 8029690:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029694:	68ea      	ldr	r2, [r5, #12]
 8029696:	4413      	add	r3, r2
 8029698:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802969c:	4b53      	ldr	r3, [pc, #332]	@ (80297ec <read_conn+0x2f8>)
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	2b03      	cmp	r3, #3
 80296a2:	dc4e      	bgt.n	8029742 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80296a4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80296a6:	6858      	ldr	r0, [r3, #4]
 80296a8:	f7fd f95c 	bl	8026964 <mg_ntohl>
 80296ac:	68eb      	ldr	r3, [r5, #12]
 80296ae:	4418      	add	r0, r3
 80296b0:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 80296b4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80296b8:	68ea      	ldr	r2, [r5, #12]
 80296ba:	4413      	add	r3, r2
 80296bc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 80296c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80296c4:	4293      	cmp	r3, r2
 80296c6:	d95e      	bls.n	8029786 <read_conn+0x292>
 80296c8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80296cc:	4298      	cmp	r0, r3
 80296ce:	d05a      	beq.n	8029786 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80296d0:	4b46      	ldr	r3, [pc, #280]	@ (80297ec <read_conn+0x2f8>)
 80296d2:	681b      	ldr	r3, [r3, #0]
 80296d4:	2b03      	cmp	r3, #3
 80296d6:	dc48      	bgt.n	802976a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80296d8:	6863      	ldr	r3, [r4, #4]
 80296da:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 80296de:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80296e2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80296e6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80296ea:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80296ee:	f7fd f939 	bl	8026964 <mg_ntohl>
 80296f2:	9007      	str	r0, [sp, #28]
 80296f4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80296f8:	f7fd f934 	bl	8026964 <mg_ntohl>
 80296fc:	2700      	movs	r7, #0
 80296fe:	9705      	str	r7, [sp, #20]
 8029700:	9704      	str	r7, [sp, #16]
 8029702:	9003      	str	r0, [sp, #12]
 8029704:	9b07      	ldr	r3, [sp, #28]
 8029706:	9302      	str	r3, [sp, #8]
 8029708:	f8cd b004 	str.w	fp, [sp, #4]
 802970c:	f8cd a000 	str.w	sl, [sp]
 8029710:	2310      	movs	r3, #16
 8029712:	4632      	mov	r2, r6
 8029714:	4641      	mov	r1, r8
 8029716:	4648      	mov	r0, r9
 8029718:	f7ff f9fa 	bl	8028b10 <tx_tcp>
      s->unacked = 0;
 802971c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8029720:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029724:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8029728:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802972c:	b37b      	cbz	r3, 802978e <read_conn+0x29a>
 802972e:	4639      	mov	r1, r7
 8029730:	4620      	mov	r0, r4
 8029732:	f7ff fac9 	bl	8028cc8 <settmout>
 8029736:	e02a      	b.n	802978e <read_conn+0x29a>
    mg_error(c, "oom");
 8029738:	4931      	ldr	r1, [pc, #196]	@ (8029800 <read_conn+0x30c>)
 802973a:	4620      	mov	r0, r4
 802973c:	f7fd fdd4 	bl	80272e8 <mg_error>
 8029740:	e729      	b.n	8029596 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8029742:	4b2b      	ldr	r3, [pc, #172]	@ (80297f0 <read_conn+0x2fc>)
 8029744:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8029748:	492a      	ldr	r1, [pc, #168]	@ (80297f4 <read_conn+0x300>)
 802974a:	2004      	movs	r0, #4
 802974c:	f7fd fce4 	bl	8027118 <mg_log_prefix>
 8029750:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8029752:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029754:	6858      	ldr	r0, [r3, #4]
 8029756:	f7fd f905 	bl	8026964 <mg_ntohl>
 802975a:	4602      	mov	r2, r0
 802975c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029760:	4639      	mov	r1, r7
 8029762:	4828      	ldr	r0, [pc, #160]	@ (8029804 <read_conn+0x310>)
 8029764:	f7fb fb86 	bl	8024e74 <mg_log>
 8029768:	e79c      	b.n	80296a4 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802976a:	4b21      	ldr	r3, [pc, #132]	@ (80297f0 <read_conn+0x2fc>)
 802976c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8029770:	4920      	ldr	r1, [pc, #128]	@ (80297f4 <read_conn+0x300>)
 8029772:	2004      	movs	r0, #4
 8029774:	f7fd fcd0 	bl	8027118 <mg_log_prefix>
 8029778:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 802977c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802977e:	4822      	ldr	r0, [pc, #136]	@ (8029808 <read_conn+0x314>)
 8029780:	f7fb fb78 	bl	8024e74 <mg_log>
 8029784:	e7a8      	b.n	80296d8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8029786:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802978a:	2b01      	cmp	r3, #1
 802978c:	d11b      	bne.n	80297c6 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 802978e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029792:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8029796:	2ac0      	cmp	r2, #192	@ 0xc0
 8029798:	f43f aefd 	beq.w	8029596 <read_conn+0xa2>
    } else if (c->is_tls) {
 802979c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80297a0:	d01b      	beq.n	80297da <read_conn+0x2e6>
      io = &c->recv;
 80297a2:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 80297a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80297a8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80297aa:	1a5b      	subs	r3, r3, r1
 80297ac:	68ea      	ldr	r2, [r5, #12]
 80297ae:	4293      	cmp	r3, r2
 80297b0:	d204      	bcs.n	80297bc <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80297b2:	4411      	add	r1, r2
 80297b4:	4630      	mov	r0, r6
 80297b6:	f7fe faeb 	bl	8027d90 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 80297ba:	b148      	cbz	r0, 80297d0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 80297bc:	4631      	mov	r1, r6
 80297be:	4620      	mov	r0, r4
 80297c0:	f7fd fdca 	bl	8027358 <handle_tls_recv>
 80297c4:	e6e7      	b.n	8029596 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80297c6:	2101      	movs	r1, #1
 80297c8:	4620      	mov	r0, r4
 80297ca:	f7ff fa7d 	bl	8028cc8 <settmout>
 80297ce:	e7de      	b.n	802978e <read_conn+0x29a>
        mg_error(c, "oom");
 80297d0:	490b      	ldr	r1, [pc, #44]	@ (8029800 <read_conn+0x30c>)
 80297d2:	4620      	mov	r0, r4
 80297d4:	f7fd fd88 	bl	80272e8 <mg_error>
 80297d8:	e6dd      	b.n	8029596 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80297da:	f105 020c 	add.w	r2, r5, #12
 80297de:	2107      	movs	r1, #7
 80297e0:	4620      	mov	r0, r4
 80297e2:	f7fa f8fe 	bl	80239e2 <mg_call>
}
 80297e6:	e6d6      	b.n	8029596 <read_conn+0xa2>
 80297e8:	080381c0 	.word	0x080381c0
 80297ec:	2000012c 	.word	0x2000012c
 80297f0:	0803cbdc 	.word	0x0803cbdc
 80297f4:	0803c2f0 	.word	0x0803c2f0
 80297f8:	0803c868 	.word	0x0803c868
 80297fc:	0803c880 	.word	0x0803c880
 8029800:	0803c5f0 	.word	0x0803c5f0
 8029804:	0803c898 	.word	0x0803c898
 8029808:	0803c8ac 	.word	0x0803c8ac

0802980c <accept_conn>:
                                         struct pkt *pkt) {
 802980c:	b570      	push	{r4, r5, r6, lr}
 802980e:	4605      	mov	r5, r0
 8029810:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8029812:	6840      	ldr	r0, [r0, #4]
 8029814:	f7fa fe58 	bl	80244c8 <mg_alloc_conn>
  if (c == NULL) {
 8029818:	4604      	mov	r4, r0
 802981a:	2800      	cmp	r0, #0
 802981c:	d058      	beq.n	80298d0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802981e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029820:	6898      	ldr	r0, [r3, #8]
 8029822:	f7fd f89f 	bl	8026964 <mg_ntohl>
 8029826:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802982a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802982c:	6858      	ldr	r0, [r3, #4]
 802982e:	f7fd f899 	bl	8026964 <mg_ntohl>
 8029832:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8029836:	6933      	ldr	r3, [r6, #16]
 8029838:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802983c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8029840:	895b      	ldrh	r3, [r3, #10]
 8029842:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8029846:	2100      	movs	r1, #0
 8029848:	4620      	mov	r0, r4
 802984a:	f7ff fa3d 	bl	8028cc8 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802984e:	69f3      	ldr	r3, [r6, #28]
 8029850:	68db      	ldr	r3, [r3, #12]
 8029852:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8029854:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029856:	881b      	ldrh	r3, [r3, #0]
 8029858:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802985a:	4b2c      	ldr	r3, [pc, #176]	@ (802990c <accept_conn+0x100>)
 802985c:	681b      	ldr	r3, [r3, #0]
 802985e:	2b02      	cmp	r3, #2
 8029860:	dc45      	bgt.n	80298ee <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8029862:	686b      	ldr	r3, [r5, #4]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	6023      	str	r3, [r4, #0]
 8029868:	686b      	ldr	r3, [r5, #4]
 802986a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802986c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029870:	f043 0304 	orr.w	r3, r3, #4
 8029874:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8029878:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802987c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8029880:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8029884:	f363 02c3 	bfi	r2, r3, #3, #1
 8029888:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802988c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8029890:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8029894:	f104 0608 	add.w	r6, r4, #8
 8029898:	f105 0c08 	add.w	ip, r5, #8
 802989c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80298a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80298a2:	f8dc 3000 	ldr.w	r3, [ip]
 80298a6:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 80298a8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 80298ac:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 80298b0:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 80298b2:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 80298b4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80298b6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 80298b8:	2200      	movs	r2, #0
 80298ba:	2101      	movs	r1, #1
 80298bc:	4620      	mov	r0, r4
 80298be:	f7fa f890 	bl	80239e2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 80298c2:	2200      	movs	r2, #0
 80298c4:	2105      	movs	r1, #5
 80298c6:	4620      	mov	r0, r4
 80298c8:	f7fa f88b 	bl	80239e2 <mg_call>
}
 80298cc:	4620      	mov	r0, r4
 80298ce:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 80298d0:	4b0e      	ldr	r3, [pc, #56]	@ (802990c <accept_conn+0x100>)
 80298d2:	681b      	ldr	r3, [r3, #0]
 80298d4:	2b00      	cmp	r3, #0
 80298d6:	ddf9      	ble.n	80298cc <accept_conn+0xc0>
 80298d8:	4b0d      	ldr	r3, [pc, #52]	@ (8029910 <accept_conn+0x104>)
 80298da:	f241 5268 	movw	r2, #5480	@ 0x1568
 80298de:	490d      	ldr	r1, [pc, #52]	@ (8029914 <accept_conn+0x108>)
 80298e0:	2001      	movs	r0, #1
 80298e2:	f7fd fc19 	bl	8027118 <mg_log_prefix>
 80298e6:	480c      	ldr	r0, [pc, #48]	@ (8029918 <accept_conn+0x10c>)
 80298e8:	f7fb fac4 	bl	8024e74 <mg_log>
    return NULL;
 80298ec:	e7ee      	b.n	80298cc <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80298ee:	4b08      	ldr	r3, [pc, #32]	@ (8029910 <accept_conn+0x104>)
 80298f0:	f241 5271 	movw	r2, #5489	@ 0x1571
 80298f4:	4907      	ldr	r1, [pc, #28]	@ (8029914 <accept_conn+0x108>)
 80298f6:	2003      	movs	r0, #3
 80298f8:	f7fd fc0e 	bl	8027118 <mg_log_prefix>
 80298fc:	f104 031c 	add.w	r3, r4, #28
 8029900:	4a06      	ldr	r2, [pc, #24]	@ (802991c <accept_conn+0x110>)
 8029902:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029904:	4806      	ldr	r0, [pc, #24]	@ (8029920 <accept_conn+0x114>)
 8029906:	f7fb fab5 	bl	8024e74 <mg_log>
 802990a:	e7aa      	b.n	8029862 <accept_conn+0x56>
 802990c:	2000012c 	.word	0x2000012c
 8029910:	0803cbd0 	.word	0x0803cbd0
 8029914:	0803c2f0 	.word	0x0803c2f0
 8029918:	0803c918 	.word	0x0803c918
 802991c:	08026fcd 	.word	0x08026fcd
 8029920:	0803c8bc 	.word	0x0803c8bc

08029924 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029928:	b083      	sub	sp, #12
 802992a:	4606      	mov	r6, r0
 802992c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802992e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8029930:	2200      	movs	r2, #0
 8029932:	4638      	mov	r0, r7
 8029934:	f7f9 fee9 	bl	802370a <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8029938:	4605      	mov	r5, r0
 802993a:	b380      	cbz	r0, 802999e <rx_tcp+0x7a>
 802993c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8029940:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029944:	f013 0f20 	tst.w	r3, #32
 8029948:	d02b      	beq.n	80299a2 <rx_tcp+0x7e>
 802994a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802994c:	7b5a      	ldrb	r2, [r3, #13]
 802994e:	2a12      	cmp	r2, #18
 8029950:	d126      	bne.n	80299a0 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8029952:	6898      	ldr	r0, [r3, #8]
 8029954:	f7fd f806 	bl	8026964 <mg_ntohl>
 8029958:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 802995c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802995e:	6858      	ldr	r0, [r3, #4]
 8029960:	f7fd f800 	bl	8026964 <mg_ntohl>
 8029964:	3001      	adds	r0, #1
 8029966:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802996a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802996c:	689b      	ldr	r3, [r3, #8]
 802996e:	2700      	movs	r7, #0
 8029970:	9701      	str	r7, [sp, #4]
 8029972:	9700      	str	r7, [sp, #0]
 8029974:	2210      	movs	r2, #16
 8029976:	4621      	mov	r1, r4
 8029978:	4630      	mov	r0, r6
 802997a:	f7ff f975 	bl	8028c68 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802997e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8029982:	f367 1345 	bfi	r3, r7, #5, #1
 8029986:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802998a:	4639      	mov	r1, r7
 802998c:	4628      	mov	r0, r5
 802998e:	f7ff f99b 	bl	8028cc8 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8029992:	463a      	mov	r2, r7
 8029994:	2104      	movs	r1, #4
 8029996:	4628      	mov	r0, r5
 8029998:	f7fa f823 	bl	80239e2 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802999c:	e01b      	b.n	80299d6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802999e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80299a0:	b385      	cbz	r5, 8029a04 <rx_tcp+0xe0>
 80299a2:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 80299a6:	f013 0f20 	tst.w	r3, #32
 80299aa:	d004      	beq.n	80299b6 <rx_tcp+0x92>
 80299ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80299ae:	7b5a      	ldrb	r2, [r3, #13]
 80299b0:	2a10      	cmp	r2, #16
 80299b2:	d113      	bne.n	80299dc <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 80299b4:	b335      	cbz	r5, 8029a04 <rx_tcp+0xe0>
 80299b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80299b8:	7b5b      	ldrb	r3, [r3, #13]
 80299ba:	f013 0f04 	tst.w	r3, #4
 80299be:	d117      	bne.n	80299f0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 80299c0:	b305      	cbz	r5, 8029a04 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 80299c2:	2300      	movs	r3, #0
 80299c4:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 80299c8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80299cc:	b1ab      	cbz	r3, 80299fa <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 80299ce:	4621      	mov	r1, r4
 80299d0:	4628      	mov	r0, r5
 80299d2:	f7ff fd8f 	bl	80294f4 <read_conn>
}
 80299d6:	b003      	add	sp, #12
 80299d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80299dc:	689b      	ldr	r3, [r3, #8]
 80299de:	2200      	movs	r2, #0
 80299e0:	9201      	str	r2, [sp, #4]
 80299e2:	9200      	str	r2, [sp, #0]
 80299e4:	2214      	movs	r2, #20
 80299e6:	4621      	mov	r1, r4
 80299e8:	4630      	mov	r0, r6
 80299ea:	f7ff f93d 	bl	8028c68 <tx_tcp_pkt>
 80299ee:	e7f2      	b.n	80299d6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80299f0:	4934      	ldr	r1, [pc, #208]	@ (8029ac4 <rx_tcp+0x1a0>)
 80299f2:	4628      	mov	r0, r5
 80299f4:	f7fd fc78 	bl	80272e8 <mg_error>
 80299f8:	e7ed      	b.n	80299d6 <rx_tcp+0xb2>
      settmout(c,
 80299fa:	2100      	movs	r1, #0
 80299fc:	4628      	mov	r0, r5
 80299fe:	f7ff f963 	bl	8028cc8 <settmout>
 8029a02:	e7e4      	b.n	80299ce <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8029a04:	2201      	movs	r2, #1
 8029a06:	4621      	mov	r1, r4
 8029a08:	4638      	mov	r0, r7
 8029a0a:	f7f9 fe7e 	bl	802370a <getpeer>
 8029a0e:	4607      	mov	r7, r0
 8029a10:	b168      	cbz	r0, 8029a2e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8029a12:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8029a14:	7b6b      	ldrb	r3, [r5, #13]
 8029a16:	f013 0f04 	tst.w	r3, #4
 8029a1a:	d013      	beq.n	8029a44 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8029a1c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029a20:	f013 0f04 	tst.w	r3, #4
 8029a24:	d0d7      	beq.n	80299d6 <rx_tcp+0xb2>
 8029a26:	4927      	ldr	r1, [pc, #156]	@ (8029ac4 <rx_tcp+0x1a0>)
 8029a28:	f7fd fc5e 	bl	80272e8 <mg_error>
 8029a2c:	e7d3      	b.n	80299d6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8029a2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029a30:	689b      	ldr	r3, [r3, #8]
 8029a32:	2200      	movs	r2, #0
 8029a34:	9201      	str	r2, [sp, #4]
 8029a36:	9200      	str	r2, [sp, #0]
 8029a38:	2214      	movs	r2, #20
 8029a3a:	4621      	mov	r1, r4
 8029a3c:	4630      	mov	r0, r6
 8029a3e:	f7ff f913 	bl	8028c68 <tx_tcp_pkt>
 8029a42:	e7c8      	b.n	80299d6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8029a44:	f013 0f02 	tst.w	r3, #2
 8029a48:	d11d      	bne.n	8029a86 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8029a4a:	f013 0f01 	tst.w	r3, #1
 8029a4e:	d129      	bne.n	8029aa4 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8029a50:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8029a54:	4648      	mov	r0, r9
 8029a56:	f7fc ff85 	bl	8026964 <mg_ntohl>
 8029a5a:	4680      	mov	r8, r0
 8029a5c:	8828      	ldrh	r0, [r5, #0]
 8029a5e:	f7fd f819 	bl	8026a94 <mg_ntohs>
 8029a62:	1c43      	adds	r3, r0, #1
 8029a64:	4598      	cmp	r8, r3
 8029a66:	d027      	beq.n	8029ab8 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8029a68:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8029a6c:	f013 0f04 	tst.w	r3, #4
 8029a70:	d1b1      	bne.n	80299d6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8029a72:	2300      	movs	r3, #0
 8029a74:	9301      	str	r3, [sp, #4]
 8029a76:	9300      	str	r3, [sp, #0]
 8029a78:	464b      	mov	r3, r9
 8029a7a:	2214      	movs	r2, #20
 8029a7c:	4621      	mov	r1, r4
 8029a7e:	4630      	mov	r0, r6
 8029a80:	f7ff f8f2 	bl	8028c68 <tx_tcp_pkt>
}
 8029a84:	e7a7      	b.n	80299d6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8029a86:	8828      	ldrh	r0, [r5, #0]
 8029a88:	f7fd f804 	bl	8026a94 <mg_ntohs>
 8029a8c:	f7fc ff6a 	bl	8026964 <mg_ntohl>
 8029a90:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8029a92:	2200      	movs	r2, #0
 8029a94:	9201      	str	r2, [sp, #4]
 8029a96:	9200      	str	r2, [sp, #0]
 8029a98:	2212      	movs	r2, #18
 8029a9a:	4621      	mov	r1, r4
 8029a9c:	4630      	mov	r0, r6
 8029a9e:	f7ff f8e3 	bl	8028c68 <tx_tcp_pkt>
 8029aa2:	e798      	b.n	80299d6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8029aa4:	68ab      	ldr	r3, [r5, #8]
 8029aa6:	2200      	movs	r2, #0
 8029aa8:	9201      	str	r2, [sp, #4]
 8029aaa:	9200      	str	r2, [sp, #0]
 8029aac:	2211      	movs	r2, #17
 8029aae:	4621      	mov	r1, r4
 8029ab0:	4630      	mov	r0, r6
 8029ab2:	f7ff f8d9 	bl	8028c68 <tx_tcp_pkt>
 8029ab6:	e78e      	b.n	80299d6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8029ab8:	4621      	mov	r1, r4
 8029aba:	4638      	mov	r0, r7
 8029abc:	f7ff fea6 	bl	802980c <accept_conn>
 8029ac0:	e789      	b.n	80299d6 <rx_tcp+0xb2>
 8029ac2:	bf00      	nop
 8029ac4:	0803c8cc 	.word	0x0803c8cc

08029ac8 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8029ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029acc:	b082      	sub	sp, #8
 8029ace:	4604      	mov	r4, r0
 8029ad0:	4688      	mov	r8, r1
 8029ad2:	4617      	mov	r7, r2
 8029ad4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8029ad6:	6819      	ldr	r1, [r3, #0]
 8029ad8:	2900      	cmp	r1, #0
 8029ada:	d037      	beq.n	8029b4c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8029adc:	685b      	ldr	r3, [r3, #4]
 8029ade:	2b00      	cmp	r3, #0
 8029ae0:	d038      	beq.n	8029b54 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8029ae2:	686b      	ldr	r3, [r5, #4]
 8029ae4:	2b00      	cmp	r3, #0
 8029ae6:	d040      	beq.n	8029b6a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8029ae8:	2118      	movs	r1, #24
 8029aea:	2001      	movs	r0, #1
 8029aec:	f7f9 fde8 	bl	80236c0 <mg_calloc>
 8029af0:	4606      	mov	r6, r0
 8029af2:	2800      	cmp	r0, #0
 8029af4:	d03e      	beq.n	8029b74 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8029af6:	6863      	ldr	r3, [r4, #4]
 8029af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	d03f      	beq.n	8029b7e <mg_sendnsreq+0xb6>
 8029afe:	8a1b      	ldrh	r3, [r3, #16]
 8029b00:	3301      	adds	r3, #1
 8029b02:	b29b      	uxth	r3, r3
 8029b04:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8029b06:	6863      	ldr	r3, [r4, #4]
 8029b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029b0a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8029b0c:	6863      	ldr	r3, [r4, #4]
 8029b0e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8029b10:	f7fd fafc 	bl	802710c <mg_millis>
 8029b14:	19c0      	adds	r0, r0, r7
 8029b16:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8029b1a:	60b0      	str	r0, [r6, #8]
 8029b1c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8029b1e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8029b20:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029b24:	f043 0308 	orr.w	r3, r3, #8
 8029b28:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8029b2c:	4b21      	ldr	r3, [pc, #132]	@ (8029bb4 <mg_sendnsreq+0xec>)
 8029b2e:	681b      	ldr	r3, [r3, #0]
 8029b30:	2b03      	cmp	r3, #3
 8029b32:	dc26      	bgt.n	8029b82 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8029b34:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8029b38:	8a32      	ldrh	r2, [r6, #16]
 8029b3a:	4641      	mov	r1, r8
 8029b3c:	6868      	ldr	r0, [r5, #4]
 8029b3e:	f7fe fbd5 	bl	80282ec <mg_dns_send>
 8029b42:	2800      	cmp	r0, #0
 8029b44:	d031      	beq.n	8029baa <mg_sendnsreq+0xe2>
}
 8029b46:	b002      	add	sp, #8
 8029b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8029b4c:	491a      	ldr	r1, [pc, #104]	@ (8029bb8 <mg_sendnsreq+0xf0>)
 8029b4e:	f7fd fbcb 	bl	80272e8 <mg_error>
 8029b52:	e7c6      	b.n	8029ae2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8029b54:	461a      	mov	r2, r3
 8029b56:	6840      	ldr	r0, [r0, #4]
 8029b58:	f000 f866 	bl	8029c28 <mg_connect>
 8029b5c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8029b5e:	2800      	cmp	r0, #0
 8029b60:	d0bf      	beq.n	8029ae2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8029b62:	4b16      	ldr	r3, [pc, #88]	@ (8029bbc <mg_sendnsreq+0xf4>)
 8029b64:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8029b68:	e7bb      	b.n	8029ae2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8029b6a:	4915      	ldr	r1, [pc, #84]	@ (8029bc0 <mg_sendnsreq+0xf8>)
 8029b6c:	4620      	mov	r0, r4
 8029b6e:	f7fd fbbb 	bl	80272e8 <mg_error>
 8029b72:	e7e8      	b.n	8029b46 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8029b74:	4913      	ldr	r1, [pc, #76]	@ (8029bc4 <mg_sendnsreq+0xfc>)
 8029b76:	4620      	mov	r0, r4
 8029b78:	f7fd fbb6 	bl	80272e8 <mg_error>
 8029b7c:	e7e3      	b.n	8029b46 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8029b7e:	2301      	movs	r3, #1
 8029b80:	e7c0      	b.n	8029b04 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8029b82:	4b11      	ldr	r3, [pc, #68]	@ (8029bc8 <mg_sendnsreq+0x100>)
 8029b84:	f240 521e 	movw	r2, #1310	@ 0x51e
 8029b88:	4910      	ldr	r1, [pc, #64]	@ (8029bcc <mg_sendnsreq+0x104>)
 8029b8a:	2004      	movs	r0, #4
 8029b8c:	f7fd fac4 	bl	8027118 <mg_log_prefix>
 8029b90:	8a33      	ldrh	r3, [r6, #16]
 8029b92:	9301      	str	r3, [sp, #4]
 8029b94:	682b      	ldr	r3, [r5, #0]
 8029b96:	9300      	str	r3, [sp, #0]
 8029b98:	f8d8 3000 	ldr.w	r3, [r8]
 8029b9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8029ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029ba2:	480b      	ldr	r0, [pc, #44]	@ (8029bd0 <mg_sendnsreq+0x108>)
 8029ba4:	f7fb f966 	bl	8024e74 <mg_log>
 8029ba8:	e7c4      	b.n	8029b34 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8029baa:	490a      	ldr	r1, [pc, #40]	@ (8029bd4 <mg_sendnsreq+0x10c>)
 8029bac:	6868      	ldr	r0, [r5, #4]
 8029bae:	f7fd fb9b 	bl	80272e8 <mg_error>
}
 8029bb2:	e7c8      	b.n	8029b46 <mg_sendnsreq+0x7e>
 8029bb4:	2000012c 	.word	0x2000012c
 8029bb8:	0803c8d8 	.word	0x0803c8d8
 8029bbc:	08029065 	.word	0x08029065
 8029bc0:	0803c904 	.word	0x0803c904
 8029bc4:	0803c910 	.word	0x0803c910
 8029bc8:	0803cd58 	.word	0x0803cd58
 8029bcc:	0803c2f0 	.word	0x0803c2f0
 8029bd0:	0803c91c 	.word	0x0803c91c
 8029bd4:	0803c940 	.word	0x0803c940

08029bd8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8029bd8:	b570      	push	{r4, r5, r6, lr}
 8029bda:	b084      	sub	sp, #16
 8029bdc:	4604      	mov	r4, r0
 8029bde:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8029be0:	ad02      	add	r5, sp, #8
 8029be2:	4628      	mov	r0, r5
 8029be4:	f7fc fde8 	bl	80267b8 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8029be8:	4630      	mov	r0, r6
 8029bea:	f7fc fe03 	bl	80267f4 <mg_url_port>
 8029bee:	f7fc ff51 	bl	8026a94 <mg_ntohs>
 8029bf2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8029bf4:	f104 021c 	add.w	r2, r4, #28
 8029bf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8029bfc:	f7fc fee6 	bl	80269cc <mg_aton>
 8029c00:	b960      	cbnz	r0, 8029c1c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8029c02:	6862      	ldr	r2, [r4, #4]
 8029c04:	7e11      	ldrb	r1, [r2, #24]
 8029c06:	b169      	cbz	r1, 8029c24 <mg_resolve+0x4c>
 8029c08:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8029c0c:	6952      	ldr	r2, [r2, #20]
 8029c0e:	9100      	str	r1, [sp, #0]
 8029c10:	a902      	add	r1, sp, #8
 8029c12:	4620      	mov	r0, r4
 8029c14:	f7ff ff58 	bl	8029ac8 <mg_sendnsreq>
}
 8029c18:	b004      	add	sp, #16
 8029c1a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8029c1c:	4620      	mov	r0, r4
 8029c1e:	f7ff f951 	bl	8028ec4 <mg_connect_resolved>
 8029c22:	e7f9      	b.n	8029c18 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8029c24:	1d13      	adds	r3, r2, #4
 8029c26:	e7f1      	b.n	8029c0c <mg_resolve+0x34>

08029c28 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8029c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8029c2c:	b129      	cbz	r1, 8029c3a <mg_connect+0x12>
 8029c2e:	4680      	mov	r8, r0
 8029c30:	4617      	mov	r7, r2
 8029c32:	461e      	mov	r6, r3
 8029c34:	460d      	mov	r5, r1
 8029c36:	780b      	ldrb	r3, [r1, #0]
 8029c38:	b99b      	cbnz	r3, 8029c62 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8029c3a:	4b30      	ldr	r3, [pc, #192]	@ (8029cfc <mg_connect+0xd4>)
 8029c3c:	681b      	ldr	r3, [r3, #0]
 8029c3e:	2b00      	cmp	r3, #0
 8029c40:	dc03      	bgt.n	8029c4a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8029c42:	2400      	movs	r4, #0
}
 8029c44:	4620      	mov	r0, r4
 8029c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8029c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8029d00 <mg_connect+0xd8>)
 8029c4c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8029c50:	492c      	ldr	r1, [pc, #176]	@ (8029d04 <mg_connect+0xdc>)
 8029c52:	2001      	movs	r0, #1
 8029c54:	f7fd fa60 	bl	8027118 <mg_log_prefix>
 8029c58:	482b      	ldr	r0, [pc, #172]	@ (8029d08 <mg_connect+0xe0>)
 8029c5a:	f7fb f90b 	bl	8024e74 <mg_log>
  struct mg_connection *c = NULL;
 8029c5e:	2400      	movs	r4, #0
 8029c60:	e7f0      	b.n	8029c44 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8029c62:	f7fa fc31 	bl	80244c8 <mg_alloc_conn>
 8029c66:	4604      	mov	r4, r0
 8029c68:	b358      	cbz	r0, 8029cc2 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8029c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8029c6e:	6003      	str	r3, [r0, #0]
 8029c70:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8029c74:	2204      	movs	r2, #4
 8029c76:	4925      	ldr	r1, [pc, #148]	@ (8029d0c <mg_connect+0xe4>)
 8029c78:	4628      	mov	r0, r5
 8029c7a:	f003 fe7e 	bl	802d97a <strncmp>
 8029c7e:	fab0 f080 	clz	r0, r0
 8029c82:	0940      	lsrs	r0, r0, #5
 8029c84:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029c88:	f360 0300 	bfi	r3, r0, #0, #1
 8029c8c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8029c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029c94:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8029c96:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8029c98:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029c9c:	f043 0302 	orr.w	r3, r3, #2
 8029ca0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8029ca4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029ca6:	4b15      	ldr	r3, [pc, #84]	@ (8029cfc <mg_connect+0xd4>)
 8029ca8:	681b      	ldr	r3, [r3, #0]
 8029caa:	2b02      	cmp	r3, #2
 8029cac:	dc18      	bgt.n	8029ce0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8029cae:	462a      	mov	r2, r5
 8029cb0:	2101      	movs	r1, #1
 8029cb2:	4620      	mov	r0, r4
 8029cb4:	f7f9 fe95 	bl	80239e2 <mg_call>
    mg_resolve(c, url);
 8029cb8:	4629      	mov	r1, r5
 8029cba:	4620      	mov	r0, r4
 8029cbc:	f7ff ff8c 	bl	8029bd8 <mg_resolve>
 8029cc0:	e7c0      	b.n	8029c44 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8029cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8029cfc <mg_connect+0xd4>)
 8029cc4:	681b      	ldr	r3, [r3, #0]
 8029cc6:	2b00      	cmp	r3, #0
 8029cc8:	ddbc      	ble.n	8029c44 <mg_connect+0x1c>
 8029cca:	4b0d      	ldr	r3, [pc, #52]	@ (8029d00 <mg_connect+0xd8>)
 8029ccc:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8029cd0:	490c      	ldr	r1, [pc, #48]	@ (8029d04 <mg_connect+0xdc>)
 8029cd2:	2001      	movs	r0, #1
 8029cd4:	f7fd fa20 	bl	8027118 <mg_log_prefix>
 8029cd8:	480d      	ldr	r0, [pc, #52]	@ (8029d10 <mg_connect+0xe8>)
 8029cda:	f7fb f8cb 	bl	8024e74 <mg_log>
 8029cde:	e7b1      	b.n	8029c44 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029ce0:	4b07      	ldr	r3, [pc, #28]	@ (8029d00 <mg_connect+0xd8>)
 8029ce2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8029ce6:	4907      	ldr	r1, [pc, #28]	@ (8029d04 <mg_connect+0xdc>)
 8029ce8:	2003      	movs	r0, #3
 8029cea:	f7fd fa15 	bl	8027118 <mg_log_prefix>
 8029cee:	462b      	mov	r3, r5
 8029cf0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8029cf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029cf4:	4807      	ldr	r0, [pc, #28]	@ (8029d14 <mg_connect+0xec>)
 8029cf6:	f7fb f8bd 	bl	8024e74 <mg_log>
 8029cfa:	e7d8      	b.n	8029cae <mg_connect+0x86>
 8029cfc:	2000012c 	.word	0x2000012c
 8029d00:	0803cccc 	.word	0x0803cccc
 8029d04:	0803c2f0 	.word	0x0803c2f0
 8029d08:	0803c94c 	.word	0x0803c94c
 8029d0c:	0803c624 	.word	0x0803c624
 8029d10:	0803c918 	.word	0x0803c918
 8029d14:	0803c34c 	.word	0x0803c34c

08029d18 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8029d18:	b530      	push	{r4, r5, lr}
 8029d1a:	b091      	sub	sp, #68	@ 0x44
 8029d1c:	4614      	mov	r4, r2
 8029d1e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8029d20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029d22:	f7ff ff81 	bl	8029c28 <mg_connect>
  if (c != NULL) {
 8029d26:	4605      	mov	r5, r0
 8029d28:	b160      	cbz	r0, 8029d44 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8029d2a:	2240      	movs	r2, #64	@ 0x40
 8029d2c:	2100      	movs	r1, #0
 8029d2e:	4668      	mov	r0, sp
 8029d30:	f003 fdee 	bl	802d910 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8029d34:	b14c      	cbz	r4, 8029d4a <mg_mqtt_connect+0x32>
 8029d36:	4621      	mov	r1, r4
 8029d38:	4628      	mov	r0, r5
 8029d3a:	f7fe fbfd 	bl	8028538 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8029d3e:	4b04      	ldr	r3, [pc, #16]	@ (8029d50 <mg_mqtt_connect+0x38>)
 8029d40:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8029d44:	4628      	mov	r0, r5
 8029d46:	b011      	add	sp, #68	@ 0x44
 8029d48:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8029d4a:	466c      	mov	r4, sp
 8029d4c:	e7f3      	b.n	8029d36 <mg_mqtt_connect+0x1e>
 8029d4e:	bf00      	nop
 8029d50:	08028911 	.word	0x08028911

08029d54 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8029d54:	b538      	push	{r3, r4, r5, lr}
 8029d56:	4605      	mov	r5, r0
 8029d58:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8029d5a:	680b      	ldr	r3, [r1, #0]
 8029d5c:	b90b      	cbnz	r3, 8029d62 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8029d5e:	888b      	ldrh	r3, [r1, #4]
 8029d60:	b1a3      	cbz	r3, 8029d8c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8029d62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029d64:	681b      	ldr	r3, [r3, #0]
 8029d66:	b34b      	cbz	r3, 8029dbc <mg_tcpip_init+0x68>
 8029d68:	4620      	mov	r0, r4
 8029d6a:	4798      	blx	r3
 8029d6c:	bb30      	cbnz	r0, 8029dbc <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8029d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8029e5c <mg_tcpip_init+0x108>)
 8029d70:	681b      	ldr	r3, [r3, #0]
 8029d72:	2b00      	cmp	r3, #0
 8029d74:	dd5f      	ble.n	8029e36 <mg_tcpip_init+0xe2>
 8029d76:	4b3a      	ldr	r3, [pc, #232]	@ (8029e60 <mg_tcpip_init+0x10c>)
 8029d78:	f241 7223 	movw	r2, #5923	@ 0x1723
 8029d7c:	4939      	ldr	r1, [pc, #228]	@ (8029e64 <mg_tcpip_init+0x110>)
 8029d7e:	2001      	movs	r0, #1
 8029d80:	f7fd f9ca 	bl	8027118 <mg_log_prefix>
 8029d84:	4838      	ldr	r0, [pc, #224]	@ (8029e68 <mg_tcpip_init+0x114>)
 8029d86:	f7fb f875 	bl	8024e74 <mg_log>
 8029d8a:	e054      	b.n	8029e36 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8029d8c:	4608      	mov	r0, r1
 8029d8e:	2302      	movs	r3, #2
 8029d90:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8029d94:	2105      	movs	r1, #5
 8029d96:	f7fc fdaa 	bl	80268ee <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8029d9a:	4b30      	ldr	r3, [pc, #192]	@ (8029e5c <mg_tcpip_init+0x108>)
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	2b01      	cmp	r3, #1
 8029da0:	dddf      	ble.n	8029d62 <mg_tcpip_init+0xe>
 8029da2:	4b2f      	ldr	r3, [pc, #188]	@ (8029e60 <mg_tcpip_init+0x10c>)
 8029da4:	f241 721f 	movw	r2, #5919	@ 0x171f
 8029da8:	492e      	ldr	r1, [pc, #184]	@ (8029e64 <mg_tcpip_init+0x110>)
 8029daa:	2002      	movs	r0, #2
 8029dac:	f7fd f9b4 	bl	8027118 <mg_log_prefix>
 8029db0:	4622      	mov	r2, r4
 8029db2:	492e      	ldr	r1, [pc, #184]	@ (8029e6c <mg_tcpip_init+0x118>)
 8029db4:	482e      	ldr	r0, [pc, #184]	@ (8029e70 <mg_tcpip_init+0x11c>)
 8029db6:	f7fb f85d 	bl	8024e74 <mg_log>
 8029dba:	e7d2      	b.n	8029d62 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8029dbc:	f240 6104 	movw	r1, #1540	@ 0x604
 8029dc0:	2001      	movs	r0, #1
 8029dc2:	f7f9 fc7d 	bl	80236c0 <mg_calloc>
 8029dc6:	6160      	str	r0, [r4, #20]
 8029dc8:	f240 6304 	movw	r3, #1540	@ 0x604
 8029dcc:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8029dce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8029dd0:	b92b      	cbnz	r3, 8029dde <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029dd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029dd4:	689b      	ldr	r3, [r3, #8]
 8029dd6:	b37b      	cbz	r3, 8029e38 <mg_tcpip_init+0xe4>
 8029dd8:	f240 6304 	movw	r3, #1540	@ 0x604
 8029ddc:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8029dde:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8029de0:	2001      	movs	r0, #1
 8029de2:	f7f9 fc6d 	bl	80236c0 <mg_calloc>
 8029de6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8029de8:	f7fd f990 	bl	802710c <mg_millis>
 8029dec:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8029df0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8029df2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8029df4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8029df8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8029dfc:	2330      	movs	r3, #48	@ 0x30
 8029dfe:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8029e00:	68a3      	ldr	r3, [r4, #8]
 8029e02:	b90b      	cbnz	r3, 8029e08 <mg_tcpip_init+0xb4>
 8029e04:	2301      	movs	r3, #1
 8029e06:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8029e08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029e0c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8029e10:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8029e14:	2102      	movs	r1, #2
 8029e16:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029e1a:	f7fc fd68 	bl	80268ee <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8029e1e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8029e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8029e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8029e2a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8029e2e:	6963      	ldr	r3, [r4, #20]
 8029e30:	b12b      	cbz	r3, 8029e3e <mg_tcpip_init+0xea>
 8029e32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029e34:	b11b      	cbz	r3, 8029e3e <mg_tcpip_init+0xea>
}
 8029e36:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8029e3c:	e7ce      	b.n	8029ddc <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8029e3e:	4b07      	ldr	r3, [pc, #28]	@ (8029e5c <mg_tcpip_init+0x108>)
 8029e40:	681b      	ldr	r3, [r3, #0]
 8029e42:	2b00      	cmp	r3, #0
 8029e44:	ddf7      	ble.n	8029e36 <mg_tcpip_init+0xe2>
 8029e46:	4b06      	ldr	r3, [pc, #24]	@ (8029e60 <mg_tcpip_init+0x10c>)
 8029e48:	f241 7234 	movw	r2, #5940	@ 0x1734
 8029e4c:	4905      	ldr	r1, [pc, #20]	@ (8029e64 <mg_tcpip_init+0x110>)
 8029e4e:	2001      	movs	r0, #1
 8029e50:	f7fd f962 	bl	8027118 <mg_log_prefix>
 8029e54:	4807      	ldr	r0, [pc, #28]	@ (8029e74 <mg_tcpip_init+0x120>)
 8029e56:	f7fb f80d 	bl	8024e74 <mg_log>
}
 8029e5a:	e7ec      	b.n	8029e36 <mg_tcpip_init+0xe2>
 8029e5c:	2000012c 	.word	0x2000012c
 8029e60:	0803cc90 	.word	0x0803cc90
 8029e64:	0803c2f0 	.word	0x0803c2f0
 8029e68:	0803c97c 	.word	0x0803c97c
 8029e6c:	08024e45 	.word	0x08024e45
 8029e70:	0803c958 	.word	0x0803c958
 8029e74:	0803c918 	.word	0x0803c918

08029e78 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8029e78:	b510      	push	{r4, lr}
 8029e7a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8029e7c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8029e80:	2b03      	cmp	r3, #3
 8029e82:	d011      	beq.n	8029ea8 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8029e84:	2b01      	cmp	r3, #1
 8029e86:	d04f      	beq.n	8029f28 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8029e88:	b9f3      	cbnz	r3, 8029ec8 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8029e8a:	4b31      	ldr	r3, [pc, #196]	@ (8029f50 <onstatechange+0xd8>)
 8029e8c:	681b      	ldr	r3, [r3, #0]
 8029e8e:	2b00      	cmp	r3, #0
 8029e90:	dd1a      	ble.n	8029ec8 <onstatechange+0x50>
 8029e92:	4b30      	ldr	r3, [pc, #192]	@ (8029f54 <onstatechange+0xdc>)
 8029e94:	f241 4209 	movw	r2, #5129	@ 0x1409
 8029e98:	492f      	ldr	r1, [pc, #188]	@ (8029f58 <onstatechange+0xe0>)
 8029e9a:	2001      	movs	r0, #1
 8029e9c:	f7fd f93c 	bl	8027118 <mg_log_prefix>
 8029ea0:	482e      	ldr	r0, [pc, #184]	@ (8029f5c <onstatechange+0xe4>)
 8029ea2:	f7fa ffe7 	bl	8024e74 <mg_log>
 8029ea6:	e00f      	b.n	8029ec8 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029ea8:	4b29      	ldr	r3, [pc, #164]	@ (8029f50 <onstatechange+0xd8>)
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	2b01      	cmp	r3, #1
 8029eae:	dc12      	bgt.n	8029ed6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029eb0:	4b27      	ldr	r3, [pc, #156]	@ (8029f50 <onstatechange+0xd8>)
 8029eb2:	681b      	ldr	r3, [r3, #0]
 8029eb4:	2b01      	cmp	r3, #1
 8029eb6:	dc1c      	bgt.n	8029ef2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8029eb8:	4b25      	ldr	r3, [pc, #148]	@ (8029f50 <onstatechange+0xd8>)
 8029eba:	681b      	ldr	r3, [r3, #0]
 8029ebc:	2b01      	cmp	r3, #1
 8029ebe:	dc26      	bgt.n	8029f0e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8029ec0:	6921      	ldr	r1, [r4, #16]
 8029ec2:	4620      	mov	r0, r4
 8029ec4:	f7fc fee3 	bl	8026c8e <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8029ec8:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 8029ecc:	2100      	movs	r1, #0
 8029ece:	4620      	mov	r0, r4
 8029ed0:	f7f8 f923 	bl	802211a <mg_tcpip_call>
}
 8029ed4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8029f54 <onstatechange+0xdc>)
 8029ed8:	f241 4201 	movw	r2, #5121	@ 0x1401
 8029edc:	491e      	ldr	r1, [pc, #120]	@ (8029f58 <onstatechange+0xe0>)
 8029ede:	2002      	movs	r0, #2
 8029ee0:	f7fd f91a 	bl	8027118 <mg_log_prefix>
 8029ee4:	f104 0208 	add.w	r2, r4, #8
 8029ee8:	491d      	ldr	r1, [pc, #116]	@ (8029f60 <onstatechange+0xe8>)
 8029eea:	481e      	ldr	r0, [pc, #120]	@ (8029f64 <onstatechange+0xec>)
 8029eec:	f7fa ffc2 	bl	8024e74 <mg_log>
 8029ef0:	e7de      	b.n	8029eb0 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029ef2:	4b18      	ldr	r3, [pc, #96]	@ (8029f54 <onstatechange+0xdc>)
 8029ef4:	f241 4202 	movw	r2, #5122	@ 0x1402
 8029ef8:	4917      	ldr	r1, [pc, #92]	@ (8029f58 <onstatechange+0xe0>)
 8029efa:	2002      	movs	r0, #2
 8029efc:	f7fd f90c 	bl	8027118 <mg_log_prefix>
 8029f00:	f104 0210 	add.w	r2, r4, #16
 8029f04:	4916      	ldr	r1, [pc, #88]	@ (8029f60 <onstatechange+0xe8>)
 8029f06:	4818      	ldr	r0, [pc, #96]	@ (8029f68 <onstatechange+0xf0>)
 8029f08:	f7fa ffb4 	bl	8024e74 <mg_log>
 8029f0c:	e7d4      	b.n	8029eb8 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8029f0e:	4b11      	ldr	r3, [pc, #68]	@ (8029f54 <onstatechange+0xdc>)
 8029f10:	f241 4203 	movw	r2, #5123	@ 0x1403
 8029f14:	4910      	ldr	r1, [pc, #64]	@ (8029f58 <onstatechange+0xe0>)
 8029f16:	2002      	movs	r0, #2
 8029f18:	f7fd f8fe 	bl	8027118 <mg_log_prefix>
 8029f1c:	4622      	mov	r2, r4
 8029f1e:	4913      	ldr	r1, [pc, #76]	@ (8029f6c <onstatechange+0xf4>)
 8029f20:	4813      	ldr	r0, [pc, #76]	@ (8029f70 <onstatechange+0xf8>)
 8029f22:	f7fa ffa7 	bl	8024e74 <mg_log>
 8029f26:	e7cb      	b.n	8029ec0 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8029f28:	4b09      	ldr	r3, [pc, #36]	@ (8029f50 <onstatechange+0xd8>)
 8029f2a:	681b      	ldr	r3, [r3, #0]
 8029f2c:	2b00      	cmp	r3, #0
 8029f2e:	dc04      	bgt.n	8029f3a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8029f30:	f7fd f8ec 	bl	802710c <mg_millis>
 8029f34:	f002 ff9c 	bl	802ce70 <srand>
 8029f38:	e7c6      	b.n	8029ec8 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 8029f3a:	4b06      	ldr	r3, [pc, #24]	@ (8029f54 <onstatechange+0xdc>)
 8029f3c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8029f40:	4905      	ldr	r1, [pc, #20]	@ (8029f58 <onstatechange+0xe0>)
 8029f42:	2001      	movs	r0, #1
 8029f44:	f7fd f8e8 	bl	8027118 <mg_log_prefix>
 8029f48:	480a      	ldr	r0, [pc, #40]	@ (8029f74 <onstatechange+0xfc>)
 8029f4a:	f7fa ff93 	bl	8024e74 <mg_log>
 8029f4e:	e7ef      	b.n	8029f30 <onstatechange+0xb8>
 8029f50:	2000012c 	.word	0x2000012c
 8029f54:	0803cc3c 	.word	0x0803cc3c
 8029f58:	0803c2f0 	.word	0x0803c2f0
 8029f5c:	0803c9c8 	.word	0x0803c9c8
 8029f60:	08024e35 	.word	0x08024e35
 8029f64:	0803c990 	.word	0x0803c990
 8029f68:	0803c9a0 	.word	0x0803c9a0
 8029f6c:	08024e45 	.word	0x08024e45
 8029f70:	0803c9b0 	.word	0x0803c9b0
 8029f74:	0803c9c0 	.word	0x0803c9c0

08029f78 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f7c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029f7e:	2300      	movs	r3, #0
 8029f80:	9305      	str	r3, [sp, #20]
 8029f82:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8029f84:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8029f88:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8029f8c:	680e      	ldr	r6, [r1, #0]
 8029f8e:	684b      	ldr	r3, [r1, #4]
 8029f90:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8029f92:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8029f96:	42b3      	cmp	r3, r6
 8029f98:	d87b      	bhi.n	802a092 <rx_dhcp_client+0x11a>
 8029f9a:	4605      	mov	r5, r0
 8029f9c:	460f      	mov	r7, r1
 8029f9e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8029fa2:	2204      	movs	r2, #4
 8029fa4:	1c81      	adds	r1, r0, #2
 8029fa6:	eb08 0002 	add.w	r0, r8, r2
 8029faa:	f003 fc1d 	bl	802d7e8 <memcmp>
 8029fae:	2800      	cmp	r0, #0
 8029fb0:	d16f      	bne.n	802a092 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029fb2:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029fb6:	4648      	mov	r0, r9
 8029fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8029fbc:	f8cd 9000 	str.w	r9, [sp]
 8029fc0:	46cb      	mov	fp, r9
 8029fc2:	e026      	b.n	802a012 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8029fc4:	7862      	ldrb	r2, [r4, #1]
 8029fc6:	2a04      	cmp	r2, #4
 8029fc8:	d12b      	bne.n	802a022 <rx_dhcp_client+0xaa>
 8029fca:	1da2      	adds	r2, r4, #6
 8029fcc:	42b2      	cmp	r2, r6
 8029fce:	d228      	bcs.n	802a022 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8029fd0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029fd4:	9301      	str	r3, [sp, #4]
 8029fd6:	e019      	b.n	802a00c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029fd8:	7862      	ldrb	r2, [r4, #1]
 8029fda:	2a04      	cmp	r2, #4
 8029fdc:	d123      	bne.n	802a026 <rx_dhcp_client+0xae>
 8029fde:	1da2      	adds	r2, r4, #6
 8029fe0:	42b2      	cmp	r2, r6
 8029fe2:	d220      	bcs.n	802a026 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8029fe4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8029fe8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029fec:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 8029fee:	e00d      	b.n	802a00c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029ff0:	7862      	ldrb	r2, [r4, #1]
 8029ff2:	2a04      	cmp	r2, #4
 8029ff4:	d11b      	bne.n	802a02e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8029ff6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029ff8:	42b2      	cmp	r2, r6
 8029ffa:	d218      	bcs.n	802a02e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 8029ffc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a000:	9305      	str	r3, [sp, #20]
 802a002:	e003      	b.n	802a00c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802a004:	2b33      	cmp	r3, #51	@ 0x33
 802a006:	d022      	beq.n	802a04e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802a008:	2b35      	cmp	r3, #53	@ 0x35
 802a00a:	d02b      	beq.n	802a064 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802a00c:	7863      	ldrb	r3, [r4, #1]
 802a00e:	3302      	adds	r3, #2
 802a010:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802a012:	1c63      	adds	r3, r4, #1
 802a014:	42b3      	cmp	r3, r6
 802a016:	d22e      	bcs.n	802a076 <rx_dhcp_client+0xfe>
 802a018:	7823      	ldrb	r3, [r4, #0]
 802a01a:	2bff      	cmp	r3, #255	@ 0xff
 802a01c:	d02b      	beq.n	802a076 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802a01e:	2b01      	cmp	r3, #1
 802a020:	d0d0      	beq.n	8029fc4 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 802a022:	2b03      	cmp	r3, #3
 802a024:	d0d8      	beq.n	8029fd8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802a026:	7fea      	ldrb	r2, [r5, #31]
 802a028:	b10a      	cbz	r2, 802a02e <rx_dhcp_client+0xb6>
 802a02a:	2b06      	cmp	r3, #6
 802a02c:	d0e0      	beq.n	8029ff0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802a02e:	f895 2020 	ldrb.w	r2, [r5, #32]
 802a032:	2a00      	cmp	r2, #0
 802a034:	d0e6      	beq.n	802a004 <rx_dhcp_client+0x8c>
 802a036:	2b2a      	cmp	r3, #42	@ 0x2a
 802a038:	d1e4      	bne.n	802a004 <rx_dhcp_client+0x8c>
 802a03a:	7862      	ldrb	r2, [r4, #1]
 802a03c:	2a04      	cmp	r2, #4
 802a03e:	d1e1      	bne.n	802a004 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 802a040:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802a042:	42b2      	cmp	r2, r6
 802a044:	d2de      	bcs.n	802a004 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 802a046:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802a04a:	9304      	str	r3, [sp, #16]
 802a04c:	e7de      	b.n	802a00c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802a04e:	7862      	ldrb	r2, [r4, #1]
 802a050:	2a04      	cmp	r2, #4
 802a052:	d1d9      	bne.n	802a008 <rx_dhcp_client+0x90>
 802a054:	1da2      	adds	r2, r4, #6
 802a056:	42b2      	cmp	r2, r6
 802a058:	d2d6      	bcs.n	802a008 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802a05a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802a05e:	f7fc fc81 	bl	8026964 <mg_ntohl>
 802a062:	e7d3      	b.n	802a00c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802a064:	7863      	ldrb	r3, [r4, #1]
 802a066:	2b01      	cmp	r3, #1
 802a068:	d1d0      	bne.n	802a00c <rx_dhcp_client+0x94>
 802a06a:	1da3      	adds	r3, r4, #6
 802a06c:	42b3      	cmp	r3, r6
 802a06e:	d2cd      	bcs.n	802a00c <rx_dhcp_client+0x94>
      msgtype = p[2];
 802a070:	f894 9002 	ldrb.w	r9, [r4, #2]
 802a074:	e7ca      	b.n	802a00c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802a076:	f1b9 0f06 	cmp.w	r9, #6
 802a07a:	d00d      	beq.n	802a098 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802a07c:	f1b9 0f02 	cmp.w	r9, #2
 802a080:	d013      	beq.n	802a0aa <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 802a082:	f1b9 0f05 	cmp.w	r9, #5
 802a086:	d028      	beq.n	802a0da <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 802a088:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802a08c:	4553      	cmp	r3, sl
 802a08e:	f040 80b4 	bne.w	802a1fa <rx_dhcp_client+0x282>
}
 802a092:	b007      	add	sp, #28
 802a094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802a098:	68ab      	ldr	r3, [r5, #8]
 802a09a:	455b      	cmp	r3, fp
 802a09c:	d1ee      	bne.n	802a07c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802a09e:	2301      	movs	r3, #1
 802a0a0:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802a0a4:	2300      	movs	r3, #0
 802a0a6:	60ab      	str	r3, [r5, #8]
 802a0a8:	e7ee      	b.n	802a088 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802a0aa:	f1ba 0f01 	cmp.w	sl, #1
 802a0ae:	d1e8      	bne.n	802a082 <rx_dhcp_client+0x10a>
 802a0b0:	f1bb 0f00 	cmp.w	fp, #0
 802a0b4:	d0e5      	beq.n	802a082 <rx_dhcp_client+0x10a>
 802a0b6:	9b00      	ldr	r3, [sp, #0]
 802a0b8:	2b00      	cmp	r3, #0
 802a0ba:	d0e2      	beq.n	802a082 <rx_dhcp_client+0x10a>
 802a0bc:	2800      	cmp	r0, #0
 802a0be:	d0e0      	beq.n	802a082 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802a0c0:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 802a0c4:	b90a      	cbnz	r2, 802a0ca <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802a0c6:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 802a0c8:	68da      	ldr	r2, [r3, #12]
 802a0ca:	4659      	mov	r1, fp
 802a0cc:	4628      	mov	r0, r5
 802a0ce:	f7ff f9b9 	bl	8029444 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 802a0d2:	2302      	movs	r3, #2
 802a0d4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802a0d8:	e7d6      	b.n	802a088 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a0da:	f1ba 0f02 	cmp.w	sl, #2
 802a0de:	d02a      	beq.n	802a136 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 802a0e0:	f1ba 0f03 	cmp.w	sl, #3
 802a0e4:	d1d0      	bne.n	802a088 <rx_dhcp_client+0x110>
 802a0e6:	68ab      	ldr	r3, [r5, #8]
 802a0e8:	455b      	cmp	r3, fp
 802a0ea:	d1cd      	bne.n	802a088 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802a0ec:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802a0ee:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802a0f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a0f4:	4604      	mov	r4, r0
 802a0f6:	fb00 f202 	mul.w	r2, r0, r2
 802a0fa:	189b      	adds	r3, r3, r2
 802a0fc:	f141 0100 	adc.w	r1, r1, #0
 802a100:	662b      	str	r3, [r5, #96]	@ 0x60
 802a102:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a104:	4b3f      	ldr	r3, [pc, #252]	@ (802a204 <rx_dhcp_client+0x28c>)
 802a106:	681b      	ldr	r3, [r3, #0]
 802a108:	2b01      	cmp	r3, #1
 802a10a:	ddbd      	ble.n	802a088 <rx_dhcp_client+0x110>
 802a10c:	4b3e      	ldr	r3, [pc, #248]	@ (802a208 <rx_dhcp_client+0x290>)
 802a10e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 802a112:	493e      	ldr	r1, [pc, #248]	@ (802a20c <rx_dhcp_client+0x294>)
 802a114:	2002      	movs	r0, #2
 802a116:	f7fc ffff 	bl	8027118 <mg_log_prefix>
 802a11a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a11e:	2300      	movs	r3, #0
 802a120:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802a124:	f7e6 fe18 	bl	8010d58 <__aeabi_uldivmod>
 802a128:	4602      	mov	r2, r0
 802a12a:	460b      	mov	r3, r1
 802a12c:	4621      	mov	r1, r4
 802a12e:	4838      	ldr	r0, [pc, #224]	@ (802a210 <rx_dhcp_client+0x298>)
 802a130:	f7fa fea0 	bl	8024e74 <mg_log>
 802a134:	e7a8      	b.n	802a088 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a136:	f1bb 0f00 	cmp.w	fp, #0
 802a13a:	d0d1      	beq.n	802a0e0 <rx_dhcp_client+0x168>
 802a13c:	9b00      	ldr	r3, [sp, #0]
 802a13e:	2b00      	cmp	r3, #0
 802a140:	d0ce      	beq.n	802a0e0 <rx_dhcp_client+0x168>
 802a142:	4604      	mov	r4, r0
 802a144:	2800      	cmp	r0, #0
 802a146:	d0cb      	beq.n	802a0e0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 802a148:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802a14a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802a14c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a150:	fb00 f202 	mul.w	r2, r0, r2
 802a154:	189b      	adds	r3, r3, r2
 802a156:	f141 0100 	adc.w	r1, r1, #0
 802a15a:	662b      	str	r3, [r5, #96]	@ 0x60
 802a15c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a15e:	4b29      	ldr	r3, [pc, #164]	@ (802a204 <rx_dhcp_client+0x28c>)
 802a160:	681b      	ldr	r3, [r3, #0]
 802a162:	2b01      	cmp	r3, #1
 802a164:	dc2e      	bgt.n	802a1c4 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802a166:	693b      	ldr	r3, [r7, #16]
 802a168:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802a16c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 802a170:	895b      	ldrh	r3, [r3, #10]
 802a172:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 802a176:	f8c5 b008 	str.w	fp, [r5, #8]
 802a17a:	9b00      	ldr	r3, [sp, #0]
 802a17c:	612b      	str	r3, [r5, #16]
 802a17e:	9b01      	ldr	r3, [sp, #4]
 802a180:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 802a182:	2303      	movs	r3, #3
 802a184:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 802a188:	2108      	movs	r1, #8
 802a18a:	eb0d 0001 	add.w	r0, sp, r1
 802a18e:	f7fc fbae 	bl	80268ee <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 802a192:	9c02      	ldr	r4, [sp, #8]
 802a194:	f7fc ffba 	bl	802710c <mg_millis>
 802a198:	4420      	add	r0, r4
 802a19a:	f002 fe69 	bl	802ce70 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802a19e:	7feb      	ldrb	r3, [r5, #31]
 802a1a0:	b10b      	cbz	r3, 802a1a6 <rx_dhcp_client+0x22e>
 802a1a2:	9b05      	ldr	r3, [sp, #20]
 802a1a4:	bb1b      	cbnz	r3, 802a1ee <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 802a1a6:	f895 3020 	ldrb.w	r3, [r5, #32]
 802a1aa:	2b00      	cmp	r3, #0
 802a1ac:	f43f af6c 	beq.w	802a088 <rx_dhcp_client+0x110>
 802a1b0:	9b04      	ldr	r3, [sp, #16]
 802a1b2:	2b00      	cmp	r3, #0
 802a1b4:	f43f af68 	beq.w	802a088 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 802a1b8:	aa04      	add	r2, sp, #16
 802a1ba:	2102      	movs	r1, #2
 802a1bc:	4628      	mov	r0, r5
 802a1be:	f7f7 ffac 	bl	802211a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802a1c2:	e761      	b.n	802a088 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802a1c4:	4b10      	ldr	r3, [pc, #64]	@ (802a208 <rx_dhcp_client+0x290>)
 802a1c6:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802a1ca:	4910      	ldr	r1, [pc, #64]	@ (802a20c <rx_dhcp_client+0x294>)
 802a1cc:	2002      	movs	r0, #2
 802a1ce:	f7fc ffa3 	bl	8027118 <mg_log_prefix>
 802a1d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a1d6:	2300      	movs	r3, #0
 802a1d8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802a1dc:	f7e6 fdbc 	bl	8010d58 <__aeabi_uldivmod>
 802a1e0:	4602      	mov	r2, r0
 802a1e2:	460b      	mov	r3, r1
 802a1e4:	4621      	mov	r1, r4
 802a1e6:	480a      	ldr	r0, [pc, #40]	@ (802a210 <rx_dhcp_client+0x298>)
 802a1e8:	f7fa fe44 	bl	8024e74 <mg_log>
 802a1ec:	e7bb      	b.n	802a166 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802a1ee:	aa05      	add	r2, sp, #20
 802a1f0:	2101      	movs	r1, #1
 802a1f2:	4628      	mov	r0, r5
 802a1f4:	f7f7 ff91 	bl	802211a <mg_tcpip_call>
 802a1f8:	e7d5      	b.n	802a1a6 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802a1fa:	4628      	mov	r0, r5
 802a1fc:	f7ff fe3c 	bl	8029e78 <onstatechange>
 802a200:	e747      	b.n	802a092 <rx_dhcp_client+0x11a>
 802a202:	bf00      	nop
 802a204:	2000012c 	.word	0x2000012c
 802a208:	0803cbfc 	.word	0x0803cbfc
 802a20c:	0803c2f0 	.word	0x0803c2f0
 802a210:	0803c9d4 	.word	0x0803c9d4

0802a214 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a218:	b084      	sub	sp, #16
 802a21a:	4605      	mov	r5, r0
 802a21c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802a21e:	69c9      	ldr	r1, [r1, #28]
 802a220:	88cb      	ldrh	r3, [r1, #6]
 802a222:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 802a226:	b29b      	uxth	r3, r3
 802a228:	b1c3      	cbz	r3, 802a25c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802a22a:	7a4b      	ldrb	r3, [r1, #9]
 802a22c:	2b11      	cmp	r3, #17
 802a22e:	d00e      	beq.n	802a24e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802a230:	7a4b      	ldrb	r3, [r1, #9]
 802a232:	2b06      	cmp	r3, #6
 802a234:	d00f      	beq.n	802a256 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802a236:	2200      	movs	r2, #0
 802a238:	4621      	mov	r1, r4
 802a23a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802a23c:	f7f9 fa65 	bl	802370a <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 802a240:	b110      	cbz	r0, 802a248 <rx_ip+0x34>
 802a242:	4963      	ldr	r1, [pc, #396]	@ (802a3d0 <rx_ip+0x1bc>)
 802a244:	f7fd f850 	bl	80272e8 <mg_error>
}
 802a248:	b004      	add	sp, #16
 802a24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802a24e:	f101 0314 	add.w	r3, r1, #20
 802a252:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802a254:	e7ec      	b.n	802a230 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802a256:	3114      	adds	r1, #20
 802a258:	62a1      	str	r1, [r4, #40]	@ 0x28
 802a25a:	e7ec      	b.n	802a236 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802a25c:	7a4b      	ldrb	r3, [r1, #9]
 802a25e:	2b01      	cmp	r3, #1
 802a260:	d024      	beq.n	802a2ac <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 802a262:	2b11      	cmp	r3, #17
 802a264:	d031      	beq.n	802a2ca <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 802a266:	2b06      	cmp	r3, #6
 802a268:	d1ee      	bne.n	802a248 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802a26a:	f101 0314 	add.w	r3, r1, #20
 802a26e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 802a270:	68e3      	ldr	r3, [r4, #12]
 802a272:	2b13      	cmp	r3, #19
 802a274:	d9e8      	bls.n	802a248 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 802a276:	3128      	adds	r1, #40	@ 0x28
 802a278:	4620      	mov	r0, r4
 802a27a:	f7fb f898 	bl	80253ae <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802a27e:	69e3      	ldr	r3, [r4, #28]
 802a280:	8858      	ldrh	r0, [r3, #2]
 802a282:	f7fc fc07 	bl	8026a94 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 802a286:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802a288:	7b1b      	ldrb	r3, [r3, #12]
 802a28a:	091b      	lsrs	r3, r3, #4
 802a28c:	3305      	adds	r3, #5
 802a28e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 802a290:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 802a294:	d301      	bcc.n	802a29a <rx_ip+0x86>
 802a296:	1a80      	subs	r0, r0, r2
 802a298:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802a29a:	4b4e      	ldr	r3, [pc, #312]	@ (802a3d4 <rx_ip+0x1c0>)
 802a29c:	681b      	ldr	r3, [r3, #0]
 802a29e:	2b03      	cmp	r3, #3
 802a2a0:	dc74      	bgt.n	802a38c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 802a2a2:	4621      	mov	r1, r4
 802a2a4:	4628      	mov	r0, r5
 802a2a6:	f7ff fb3d 	bl	8029924 <rx_tcp>
 802a2aa:	e7cd      	b.n	802a248 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802a2ac:	f101 0314 	add.w	r3, r1, #20
 802a2b0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 802a2b2:	68e3      	ldr	r3, [r4, #12]
 802a2b4:	2b03      	cmp	r3, #3
 802a2b6:	d9c7      	bls.n	802a248 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 802a2b8:	3118      	adds	r1, #24
 802a2ba:	4620      	mov	r0, r4
 802a2bc:	f7fb f877 	bl	80253ae <mkpay>
    rx_icmp(ifp, pkt);
 802a2c0:	4621      	mov	r1, r4
 802a2c2:	4628      	mov	r0, r5
 802a2c4:	f7fc fc3b 	bl	8026b3e <rx_icmp>
 802a2c8:	e7be      	b.n	802a248 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802a2ca:	f101 0314 	add.w	r3, r1, #20
 802a2ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 802a2d0:	68e3      	ldr	r3, [r4, #12]
 802a2d2:	2b07      	cmp	r3, #7
 802a2d4:	d9b8      	bls.n	802a248 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 802a2d6:	311c      	adds	r1, #28
 802a2d8:	4620      	mov	r0, r4
 802a2da:	f7fb f868 	bl	80253ae <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802a2de:	4b3d      	ldr	r3, [pc, #244]	@ (802a3d4 <rx_ip+0x1c0>)
 802a2e0:	681b      	ldr	r3, [r3, #0]
 802a2e2:	2b03      	cmp	r3, #3
 802a2e4:	dc16      	bgt.n	802a314 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 802a2e6:	7f2b      	ldrb	r3, [r5, #28]
 802a2e8:	b133      	cbz	r3, 802a2f8 <rx_ip+0xe4>
 802a2ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a2ec:	8877      	ldrh	r7, [r6, #2]
 802a2ee:	2044      	movs	r0, #68	@ 0x44
 802a2f0:	f7fc fbd0 	bl	8026a94 <mg_ntohs>
 802a2f4:	4287      	cmp	r7, r0
 802a2f6:	d02f      	beq.n	802a358 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 802a2f8:	7f6b      	ldrb	r3, [r5, #29]
 802a2fa:	b133      	cbz	r3, 802a30a <rx_ip+0xf6>
 802a2fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a2fe:	8877      	ldrh	r7, [r6, #2]
 802a300:	2043      	movs	r0, #67	@ 0x43
 802a302:	f7fc fbc7 	bl	8026a94 <mg_ntohs>
 802a306:	4287      	cmp	r7, r0
 802a308:	d033      	beq.n	802a372 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 802a30a:	4621      	mov	r1, r4
 802a30c:	4628      	mov	r0, r5
 802a30e:	f7fd fe03 	bl	8027f18 <rx_udp>
 802a312:	e799      	b.n	802a248 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802a314:	4b30      	ldr	r3, [pc, #192]	@ (802a3d8 <rx_ip+0x1c4>)
 802a316:	f241 6255 	movw	r2, #5717	@ 0x1655
 802a31a:	4930      	ldr	r1, [pc, #192]	@ (802a3dc <rx_ip+0x1c8>)
 802a31c:	2004      	movs	r0, #4
 802a31e:	f7fc fefb 	bl	8027118 <mg_log_prefix>
 802a322:	69e7      	ldr	r7, [r4, #28]
 802a324:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 802a328:	f8b8 0000 	ldrh.w	r0, [r8]
 802a32c:	f7fc fbb2 	bl	8026a94 <mg_ntohs>
 802a330:	4606      	mov	r6, r0
 802a332:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802a336:	f7fc fbad 	bl	8026a94 <mg_ntohs>
 802a33a:	68e3      	ldr	r3, [r4, #12]
 802a33c:	4928      	ldr	r1, [pc, #160]	@ (802a3e0 <rx_ip+0x1cc>)
 802a33e:	9303      	str	r3, [sp, #12]
 802a340:	9002      	str	r0, [sp, #8]
 802a342:	f107 0310 	add.w	r3, r7, #16
 802a346:	9301      	str	r3, [sp, #4]
 802a348:	9100      	str	r1, [sp, #0]
 802a34a:	4633      	mov	r3, r6
 802a34c:	f107 020c 	add.w	r2, r7, #12
 802a350:	4824      	ldr	r0, [pc, #144]	@ (802a3e4 <rx_ip+0x1d0>)
 802a352:	f7fa fd8f 	bl	8024e74 <mg_log>
 802a356:	e7c6      	b.n	802a2e6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 802a358:	f106 0308 	add.w	r3, r6, #8
 802a35c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802a35e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802a362:	4620      	mov	r0, r4
 802a364:	f7fb f823 	bl	80253ae <mkpay>
      rx_dhcp_client(ifp, pkt);
 802a368:	4621      	mov	r1, r4
 802a36a:	4628      	mov	r0, r5
 802a36c:	f7ff fe04 	bl	8029f78 <rx_dhcp_client>
 802a370:	e76a      	b.n	802a248 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 802a372:	f106 0308 	add.w	r3, r6, #8
 802a376:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802a378:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802a37c:	4620      	mov	r0, r4
 802a37e:	f7fb f816 	bl	80253ae <mkpay>
      rx_dhcp_server(ifp, pkt);
 802a382:	4621      	mov	r1, r4
 802a384:	4628      	mov	r0, r5
 802a386:	f7fc fd05 	bl	8026d94 <rx_dhcp_server>
 802a38a:	e75d      	b.n	802a248 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802a38c:	4b12      	ldr	r3, [pc, #72]	@ (802a3d8 <rx_ip+0x1c4>)
 802a38e:	f241 626a 	movw	r2, #5738	@ 0x166a
 802a392:	4912      	ldr	r1, [pc, #72]	@ (802a3dc <rx_ip+0x1c8>)
 802a394:	2004      	movs	r0, #4
 802a396:	f7fc febf 	bl	8027118 <mg_log_prefix>
 802a39a:	69e7      	ldr	r7, [r4, #28]
 802a39c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 802a3a0:	f8b8 0000 	ldrh.w	r0, [r8]
 802a3a4:	f7fc fb76 	bl	8026a94 <mg_ntohs>
 802a3a8:	4606      	mov	r6, r0
 802a3aa:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802a3ae:	f7fc fb71 	bl	8026a94 <mg_ntohs>
 802a3b2:	68e3      	ldr	r3, [r4, #12]
 802a3b4:	490a      	ldr	r1, [pc, #40]	@ (802a3e0 <rx_ip+0x1cc>)
 802a3b6:	9303      	str	r3, [sp, #12]
 802a3b8:	9002      	str	r0, [sp, #8]
 802a3ba:	f107 0310 	add.w	r3, r7, #16
 802a3be:	9301      	str	r3, [sp, #4]
 802a3c0:	9100      	str	r1, [sp, #0]
 802a3c2:	4633      	mov	r3, r6
 802a3c4:	f107 020c 	add.w	r2, r7, #12
 802a3c8:	4807      	ldr	r0, [pc, #28]	@ (802a3e8 <rx_ip+0x1d4>)
 802a3ca:	f7fa fd53 	bl	8024e74 <mg_log>
 802a3ce:	e768      	b.n	802a2a2 <rx_ip+0x8e>
 802a3d0:	0803c9ec 	.word	0x0803c9ec
 802a3d4:	2000012c 	.word	0x2000012c
 802a3d8:	0803cc0c 	.word	0x0803cc0c
 802a3dc:	0803c2f0 	.word	0x0803c2f0
 802a3e0:	08024e35 	.word	0x08024e35
 802a3e4:	0803ca08 	.word	0x0803ca08
 802a3e8:	0803ca24 	.word	0x0803ca24

0802a3ec <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 802a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a3f0:	b08e      	sub	sp, #56	@ 0x38
 802a3f2:	4606      	mov	r6, r0
 802a3f4:	460c      	mov	r4, r1
 802a3f6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 802a3f8:	2234      	movs	r2, #52	@ 0x34
 802a3fa:	2100      	movs	r1, #0
 802a3fc:	a801      	add	r0, sp, #4
 802a3fe:	f003 fa87 	bl	802d910 <memset>
  pkt.raw.buf = (char *) buf;
 802a402:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 802a404:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 802a406:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 802a408:	2d0d      	cmp	r5, #13
 802a40a:	d93f      	bls.n	802a48c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 802a40c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 802a410:	b15b      	cbz	r3, 802a42a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 802a412:	2206      	movs	r2, #6
 802a414:	4631      	mov	r1, r6
 802a416:	4620      	mov	r0, r4
 802a418:	f003 f9e6 	bl	802d7e8 <memcmp>
  if (ifp->enable_mac_check &&
 802a41c:	b128      	cbz	r0, 802a42a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802a41e:	2206      	movs	r2, #6
 802a420:	4945      	ldr	r1, [pc, #276]	@ (802a538 <mg_tcpip_rx+0x14c>)
 802a422:	4620      	mov	r0, r4
 802a424:	f003 f9e0 	bl	802d7e8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 802a428:	bb80      	cbnz	r0, 802a48c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802a42a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802a42e:	b18b      	cbz	r3, 802a454 <mg_tcpip_rx+0x68>
 802a430:	2d04      	cmp	r5, #4
 802a432:	d92e      	bls.n	802a492 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 802a434:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 802a438:	4642      	mov	r2, r8
 802a43a:	4621      	mov	r1, r4
 802a43c:	2000      	movs	r0, #0
 802a43e:	f7fc fddf 	bl	8027000 <mg_crc32>
 802a442:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 802a444:	2204      	movs	r2, #4
 802a446:	4669      	mov	r1, sp
 802a448:	eb04 0008 	add.w	r0, r4, r8
 802a44c:	f003 f9cc 	bl	802d7e8 <memcmp>
 802a450:	b108      	cbz	r0, 802a456 <mg_tcpip_rx+0x6a>
 802a452:	e01b      	b.n	802a48c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802a454:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 802a456:	89a7      	ldrh	r7, [r4, #12]
 802a458:	f640 0006 	movw	r0, #2054	@ 0x806
 802a45c:	f7fc fb1a 	bl	8026a94 <mg_ntohs>
 802a460:	4287      	cmp	r7, r0
 802a462:	d018      	beq.n	802a496 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 802a464:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 802a468:	f7fc fb14 	bl	8026a94 <mg_ntohs>
 802a46c:	4287      	cmp	r7, r0
 802a46e:	d01b      	beq.n	802a4a8 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 802a470:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802a474:	f7fc fb0e 	bl	8026a94 <mg_ntohs>
 802a478:	4287      	cmp	r7, r0
 802a47a:	d028      	beq.n	802a4ce <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802a47c:	4b2f      	ldr	r3, [pc, #188]	@ (802a53c <mg_tcpip_rx+0x150>)
 802a47e:	681b      	ldr	r3, [r3, #0]
 802a480:	2b02      	cmp	r3, #2
 802a482:	dc41      	bgt.n	802a508 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 802a484:	4b2d      	ldr	r3, [pc, #180]	@ (802a53c <mg_tcpip_rx+0x150>)
 802a486:	681b      	ldr	r3, [r3, #0]
 802a488:	2b03      	cmp	r3, #3
 802a48a:	dc4d      	bgt.n	802a528 <mg_tcpip_rx+0x13c>
}
 802a48c:	b00e      	add	sp, #56	@ 0x38
 802a48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 802a492:	46a8      	mov	r8, r5
 802a494:	e7df      	b.n	802a456 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 802a496:	340e      	adds	r4, #14
 802a498:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802a49a:	2d29      	cmp	r5, #41	@ 0x29
 802a49c:	d9f6      	bls.n	802a48c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802a49e:	a901      	add	r1, sp, #4
 802a4a0:	4630      	mov	r0, r6
 802a4a2:	f7fe ff09 	bl	80292b8 <rx_arp>
 802a4a6:	e7f1      	b.n	802a48c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 802a4a8:	f104 030e 	add.w	r3, r4, #14
 802a4ac:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802a4ae:	2d35      	cmp	r5, #53	@ 0x35
 802a4b0:	d9ec      	bls.n	802a48c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 802a4b2:	7ba3      	ldrb	r3, [r4, #14]
 802a4b4:	091b      	lsrs	r3, r3, #4
 802a4b6:	2b06      	cmp	r3, #6
 802a4b8:	d1e8      	bne.n	802a48c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802a4ba:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802a4be:	a801      	add	r0, sp, #4
 802a4c0:	f7fa ff75 	bl	80253ae <mkpay>
    rx_ip6(ifp, &pkt);
 802a4c4:	a901      	add	r1, sp, #4
 802a4c6:	4630      	mov	r0, r6
 802a4c8:	f7fc fb73 	bl	8026bb2 <rx_ip6>
 802a4cc:	e7de      	b.n	802a48c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802a4ce:	f104 030e 	add.w	r3, r4, #14
 802a4d2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802a4d4:	2d21      	cmp	r5, #33	@ 0x21
 802a4d6:	d9d9      	bls.n	802a48c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 802a4d8:	8a20      	ldrh	r0, [r4, #16]
 802a4da:	f7fc fadb 	bl	8026a94 <mg_ntohs>
 802a4de:	300e      	adds	r0, #14
 802a4e0:	42a8      	cmp	r0, r5
 802a4e2:	d200      	bcs.n	802a4e6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 802a4e4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802a4e6:	9b02      	ldr	r3, [sp, #8]
 802a4e8:	2b21      	cmp	r3, #33	@ 0x21
 802a4ea:	d9cf      	bls.n	802a48c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802a4ec:	7ba3      	ldrb	r3, [r4, #14]
 802a4ee:	091b      	lsrs	r3, r3, #4
 802a4f0:	2b04      	cmp	r3, #4
 802a4f2:	d1cb      	bne.n	802a48c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 802a4f4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 802a4f8:	a801      	add	r0, sp, #4
 802a4fa:	f7fa ff58 	bl	80253ae <mkpay>
    rx_ip(ifp, &pkt);
 802a4fe:	a901      	add	r1, sp, #4
 802a500:	4630      	mov	r0, r6
 802a502:	f7ff fe87 	bl	802a214 <rx_ip>
 802a506:	e7c1      	b.n	802a48c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802a508:	4b0d      	ldr	r3, [pc, #52]	@ (802a540 <mg_tcpip_rx+0x154>)
 802a50a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 802a50e:	490d      	ldr	r1, [pc, #52]	@ (802a544 <mg_tcpip_rx+0x158>)
 802a510:	2003      	movs	r0, #3
 802a512:	f7fc fe01 	bl	8027118 <mg_log_prefix>
 802a516:	9b05      	ldr	r3, [sp, #20]
 802a518:	8998      	ldrh	r0, [r3, #12]
 802a51a:	f7fc fabb 	bl	8026a94 <mg_ntohs>
 802a51e:	4601      	mov	r1, r0
 802a520:	4809      	ldr	r0, [pc, #36]	@ (802a548 <mg_tcpip_rx+0x15c>)
 802a522:	f7fa fca7 	bl	8024e74 <mg_log>
 802a526:	e7ad      	b.n	802a484 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 802a528:	4641      	mov	r1, r8
 802a52a:	2920      	cmp	r1, #32
 802a52c:	bf28      	it	cs
 802a52e:	2120      	movcs	r1, #32
 802a530:	4620      	mov	r0, r4
 802a532:	f7f9 fe01 	bl	8024138 <mg_hexdump>
 802a536:	e7a9      	b.n	802a48c <mg_tcpip_rx+0xa0>
 802a538:	0803cd78 	.word	0x0803cd78
 802a53c:	2000012c 	.word	0x2000012c
 802a540:	0803cc1c 	.word	0x0803cc1c
 802a544:	0803c2f0 	.word	0x0803c2f0
 802a548:	0803ca40 	.word	0x0803ca40

0802a54c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a550:	b08b      	sub	sp, #44	@ 0x2c
 802a552:	4605      	mov	r5, r0
 802a554:	4616      	mov	r6, r2
 802a556:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 802a558:	9200      	str	r2, [sp, #0]
 802a55a:	9301      	str	r3, [sp, #4]
 802a55c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a560:	2300      	movs	r3, #0
 802a562:	3058      	adds	r0, #88	@ 0x58
 802a564:	f7fc f868 	bl	8026638 <mg_timer_expired>
  ifp->now = now;
 802a568:	652e      	str	r6, [r5, #80]	@ 0x50
 802a56a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802a56c:	4604      	mov	r4, r0
 802a56e:	b318      	cbz	r0, 802a5b8 <mg_tcpip_poll+0x6c>
 802a570:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802a572:	68db      	ldr	r3, [r3, #12]
 802a574:	b303      	cbz	r3, 802a5b8 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 802a576:	4628      	mov	r0, r5
 802a578:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802a57a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802a57e:	3b00      	subs	r3, #0
 802a580:	bf18      	it	ne
 802a582:	2301      	movne	r3, #1
    if (up != current) {
 802a584:	4298      	cmp	r0, r3
 802a586:	d010      	beq.n	802a5aa <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802a588:	b120      	cbz	r0, 802a594 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802a58a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802a58c:	2b00      	cmp	r3, #0
 802a58e:	d06e      	beq.n	802a66e <mg_tcpip_poll+0x122>
 802a590:	2301      	movs	r3, #1
 802a592:	e000      	b.n	802a596 <mg_tcpip_poll+0x4a>
 802a594:	2300      	movs	r3, #0
 802a596:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802a59a:	b918      	cbnz	r0, 802a5a4 <mg_tcpip_poll+0x58>
 802a59c:	7f2b      	ldrb	r3, [r5, #28]
 802a59e:	b10b      	cbz	r3, 802a5a4 <mg_tcpip_poll+0x58>
 802a5a0:	2300      	movs	r3, #0
 802a5a2:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 802a5a4:	4628      	mov	r0, r5
 802a5a6:	f7ff fc67 	bl	8029e78 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802a5aa:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802a5ae:	b91b      	cbnz	r3, 802a5b8 <mg_tcpip_poll+0x6c>
 802a5b0:	4ba8      	ldr	r3, [pc, #672]	@ (802a854 <mg_tcpip_poll+0x308>)
 802a5b2:	681b      	ldr	r3, [r3, #0]
 802a5b4:	2b00      	cmp	r3, #0
 802a5b6:	dc5c      	bgt.n	802a672 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 802a5b8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802a5bc:	2b00      	cmp	r3, #0
 802a5be:	f000 8146 	beq.w	802a84e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802a5c2:	2b01      	cmp	r3, #1
 802a5c4:	d060      	beq.n	802a688 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 802a5c6:	2c00      	cmp	r4, #0
 802a5c8:	d05f      	beq.n	802a68a <mg_tcpip_poll+0x13e>
 802a5ca:	2b03      	cmp	r3, #3
 802a5cc:	d15d      	bne.n	802a68a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802a5ce:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 802a5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 802a5d2:	ea52 0103 	orrs.w	r1, r2, r3
 802a5d6:	d058      	beq.n	802a68a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 802a5d8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802a5da:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802a5dc:	4290      	cmp	r0, r2
 802a5de:	eb71 0403 	sbcs.w	r4, r1, r3
 802a5e2:	d262      	bcs.n	802a6aa <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802a5e4:	4c9c      	ldr	r4, [pc, #624]	@ (802a858 <mg_tcpip_poll+0x30c>)
 802a5e6:	1904      	adds	r4, r0, r4
 802a5e8:	f141 0c00 	adc.w	ip, r1, #0
 802a5ec:	42a2      	cmp	r2, r4
 802a5ee:	eb73 030c 	sbcs.w	r3, r3, ip
 802a5f2:	d24a      	bcs.n	802a68a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802a5f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a5f8:	2300      	movs	r3, #0
 802a5fa:	f7e6 fbad 	bl	8010d58 <__aeabi_uldivmod>
 802a5fe:	4602      	mov	r2, r0
 802a600:	2000      	movs	r0, #0
 802a602:	1853      	adds	r3, r2, r1
 802a604:	d25a      	bcs.n	802a6bc <mg_tcpip_poll+0x170>
 802a606:	4403      	add	r3, r0
 802a608:	4894      	ldr	r0, [pc, #592]	@ (802a85c <mg_tcpip_poll+0x310>)
 802a60a:	fba0 4003 	umull	r4, r0, r0, r3
 802a60e:	08c0      	lsrs	r0, r0, #3
 802a610:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 802a614:	1a1b      	subs	r3, r3, r0
 802a616:	1ad3      	subs	r3, r2, r3
 802a618:	f161 0c00 	sbc.w	ip, r1, #0
 802a61c:	4c90      	ldr	r4, [pc, #576]	@ (802a860 <mg_tcpip_poll+0x314>)
 802a61e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 802a622:	fb03 f000 	mul.w	r0, r3, r0
 802a626:	fb04 000c 	mla	r0, r4, ip, r0
 802a62a:	fba3 3404 	umull	r3, r4, r3, r4
 802a62e:	4420      	add	r0, r4
 802a630:	089b      	lsrs	r3, r3, #2
 802a632:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 802a636:	0880      	lsrs	r0, r0, #2
 802a638:	0104      	lsls	r4, r0, #4
 802a63a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802a63e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 802a642:	ebbc 0c03 	subs.w	ip, ip, r3
 802a646:	eb64 0300 	sbc.w	r3, r4, r0
 802a64a:	009b      	lsls	r3, r3, #2
 802a64c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 802a650:	ea4f 008c 	mov.w	r0, ip, lsl #2
 802a654:	1a12      	subs	r2, r2, r0
 802a656:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802a65a:	430a      	orrs	r2, r1
 802a65c:	d115      	bne.n	802a68a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802a65e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a662:	68aa      	ldr	r2, [r5, #8]
 802a664:	497f      	ldr	r1, [pc, #508]	@ (802a864 <mg_tcpip_poll+0x318>)
 802a666:	4628      	mov	r0, r5
 802a668:	f7fe fdfe 	bl	8029268 <tx_dhcp_request_re>
 802a66c:	e00d      	b.n	802a68a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802a66e:	2303      	movs	r3, #3
 802a670:	e791      	b.n	802a596 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802a672:	4b7d      	ldr	r3, [pc, #500]	@ (802a868 <mg_tcpip_poll+0x31c>)
 802a674:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 802a678:	497c      	ldr	r1, [pc, #496]	@ (802a86c <mg_tcpip_poll+0x320>)
 802a67a:	2001      	movs	r0, #1
 802a67c:	f7fc fd4c 	bl	8027118 <mg_log_prefix>
 802a680:	487b      	ldr	r0, [pc, #492]	@ (802a870 <mg_tcpip_poll+0x324>)
 802a682:	f7fa fbf7 	bl	8024e74 <mg_log>
 802a686:	e797      	b.n	802a5b8 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802a688:	b95c      	cbnz	r4, 802a6a2 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802a68a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802a68c:	689b      	ldr	r3, [r3, #8]
 802a68e:	b1fb      	cbz	r3, 802a6d0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 802a690:	462a      	mov	r2, r5
 802a692:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 802a694:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 802a696:	4798      	blx	r3
    if (len > 0) {
 802a698:	4602      	mov	r2, r0
 802a69a:	b988      	cbnz	r0, 802a6c0 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802a69c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802a69e:	681c      	ldr	r4, [r3, #0]
 802a6a0:	e0a3      	b.n	802a7ea <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 802a6a2:	4628      	mov	r0, r5
 802a6a4:	f7fe fdaa 	bl	80291fc <tx_dhcp_discover>
 802a6a8:	e7ef      	b.n	802a68a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802a6aa:	2301      	movs	r3, #1
 802a6ac:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 802a6b0:	2300      	movs	r3, #0
 802a6b2:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 802a6b4:	4628      	mov	r0, r5
 802a6b6:	f7ff fbdf 	bl	8029e78 <onstatechange>
 802a6ba:	e7e6      	b.n	802a68a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802a6bc:	2001      	movs	r0, #1
 802a6be:	e7a2      	b.n	802a606 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 802a6c0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 802a6c2:	3301      	adds	r3, #1
 802a6c4:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 802a6c6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 802a6c8:	4628      	mov	r0, r5
 802a6ca:	f7ff fe8f 	bl	802a3ec <mg_tcpip_rx>
 802a6ce:	e7e5      	b.n	802a69c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 802a6d0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 802a6d4:	a909      	add	r1, sp, #36	@ 0x24
 802a6d6:	4620      	mov	r0, r4
 802a6d8:	f7fa fcd7 	bl	802508a <mg_queue_next>
    if (len > 0) {
 802a6dc:	4680      	mov	r8, r0
 802a6de:	2800      	cmp	r0, #0
 802a6e0:	d0dc      	beq.n	802a69c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 802a6e2:	4602      	mov	r2, r0
 802a6e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a6e6:	4628      	mov	r0, r5
 802a6e8:	f7ff fe80 	bl	802a3ec <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 802a6ec:	4641      	mov	r1, r8
 802a6ee:	4620      	mov	r0, r4
 802a6f0:	f7fa fce7 	bl	80250c2 <mg_queue_del>
 802a6f4:	e7d2      	b.n	802a69c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802a6f6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 802a6fa:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802a6fe:	4291      	cmp	r1, r2
 802a700:	f000 8088 	beq.w	802a814 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 802a704:	4b53      	ldr	r3, [pc, #332]	@ (802a854 <mg_tcpip_poll+0x308>)
 802a706:	681b      	ldr	r3, [r3, #0]
 802a708:	2b03      	cmp	r3, #3
 802a70a:	dc23      	bgt.n	802a754 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802a70c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802a710:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802a714:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 802a718:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802a71c:	f7fc f922 	bl	8026964 <mg_ntohl>
 802a720:	9007      	str	r0, [sp, #28]
 802a722:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802a726:	f7fc f91d 	bl	8026964 <mg_ntohl>
 802a72a:	2300      	movs	r3, #0
 802a72c:	9305      	str	r3, [sp, #20]
 802a72e:	9304      	str	r3, [sp, #16]
 802a730:	9003      	str	r0, [sp, #12]
 802a732:	9b07      	ldr	r3, [sp, #28]
 802a734:	9302      	str	r3, [sp, #8]
 802a736:	f8cd b004 	str.w	fp, [sp, #4]
 802a73a:	f8cd a000 	str.w	sl, [sp]
 802a73e:	2310      	movs	r3, #16
 802a740:	4642      	mov	r2, r8
 802a742:	4649      	mov	r1, r9
 802a744:	4628      	mov	r0, r5
 802a746:	f7fe f9e3 	bl	8028b10 <tx_tcp>
        s->acked = s->ack;
 802a74a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802a74e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 802a752:	e045      	b.n	802a7e0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 802a754:	4b44      	ldr	r3, [pc, #272]	@ (802a868 <mg_tcpip_poll+0x31c>)
 802a756:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802a75a:	4944      	ldr	r1, [pc, #272]	@ (802a86c <mg_tcpip_poll+0x320>)
 802a75c:	2004      	movs	r0, #4
 802a75e:	f7fc fcdb 	bl	8027118 <mg_log_prefix>
 802a762:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802a766:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802a76a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a76c:	4841      	ldr	r0, [pc, #260]	@ (802a874 <mg_tcpip_poll+0x328>)
 802a76e:	f7fa fb81 	bl	8024e74 <mg_log>
 802a772:	e7cb      	b.n	802a70c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 802a774:	4940      	ldr	r1, [pc, #256]	@ (802a878 <mg_tcpip_poll+0x32c>)
 802a776:	4620      	mov	r0, r4
 802a778:	f7fc fdb6 	bl	80272e8 <mg_error>
 802a77c:	e030      	b.n	802a7e0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802a77e:	493f      	ldr	r1, [pc, #252]	@ (802a87c <mg_tcpip_poll+0x330>)
 802a780:	4620      	mov	r0, r4
 802a782:	f7fc fdb1 	bl	80272e8 <mg_error>
 802a786:	e02b      	b.n	802a7e0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 802a788:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a78c:	f043 0320 	orr.w	r3, r3, #32
 802a790:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 802a794:	e028      	b.n	802a7e8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 802a796:	493a      	ldr	r1, [pc, #232]	@ (802a880 <mg_tcpip_poll+0x334>)
 802a798:	4620      	mov	r0, r4
 802a79a:	f7fc fda5 	bl	80272e8 <mg_error>
 802a79e:	e01f      	b.n	802a7e0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802a7a0:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802a7a4:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802a7a8:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802a7ac:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802a7b0:	3801      	subs	r0, #1
 802a7b2:	f7fc f8d7 	bl	8026964 <mg_ntohl>
 802a7b6:	9007      	str	r0, [sp, #28]
 802a7b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802a7bc:	f7fc f8d2 	bl	8026964 <mg_ntohl>
 802a7c0:	2300      	movs	r3, #0
 802a7c2:	9305      	str	r3, [sp, #20]
 802a7c4:	9304      	str	r3, [sp, #16]
 802a7c6:	9003      	str	r0, [sp, #12]
 802a7c8:	9b07      	ldr	r3, [sp, #28]
 802a7ca:	9302      	str	r3, [sp, #8]
 802a7cc:	f8cd b004 	str.w	fp, [sp, #4]
 802a7d0:	f8cd a000 	str.w	sl, [sp]
 802a7d4:	2310      	movs	r3, #16
 802a7d6:	4642      	mov	r2, r8
 802a7d8:	4649      	mov	r1, r9
 802a7da:	4628      	mov	r0, r5
 802a7dc:	f7fe f998 	bl	8028b10 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 802a7e0:	2100      	movs	r1, #0
 802a7e2:	4620      	mov	r0, r4
 802a7e4:	f7fe fa70 	bl	8028cc8 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802a7e8:	6824      	ldr	r4, [r4, #0]
 802a7ea:	b384      	cbz	r4, 802a84e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 802a7ec:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 802a7f0:	f240 1209 	movw	r2, #265	@ 0x109
 802a7f4:	421a      	tst	r2, r3
 802a7f6:	d1f7      	bne.n	802a7e8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802a7f8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 802a7fc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 802a800:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 802a804:	42b2      	cmp	r2, r6
 802a806:	41bb      	sbcs	r3, r7
 802a808:	d2ee      	bcs.n	802a7e8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802a80a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802a80e:	2b01      	cmp	r3, #1
 802a810:	f43f af71 	beq.w	802a6f6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 802a814:	2b02      	cmp	r3, #2
 802a816:	d0ad      	beq.n	802a774 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 802a818:	2b03      	cmp	r3, #3
 802a81a:	d0b0      	beq.n	802a77e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802a81c:	2b04      	cmp	r3, #4
 802a81e:	d0b3      	beq.n	802a788 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 802a820:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 802a824:	1c5a      	adds	r2, r3, #1
 802a826:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802a82a:	2b02      	cmp	r3, #2
 802a82c:	d8b3      	bhi.n	802a796 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802a82e:	4b09      	ldr	r3, [pc, #36]	@ (802a854 <mg_tcpip_poll+0x308>)
 802a830:	681b      	ldr	r3, [r3, #0]
 802a832:	2b03      	cmp	r3, #3
 802a834:	ddb4      	ble.n	802a7a0 <mg_tcpip_poll+0x254>
 802a836:	4b0c      	ldr	r3, [pc, #48]	@ (802a868 <mg_tcpip_poll+0x31c>)
 802a838:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802a83c:	490b      	ldr	r1, [pc, #44]	@ (802a86c <mg_tcpip_poll+0x320>)
 802a83e:	2004      	movs	r0, #4
 802a840:	f7fc fc6a 	bl	8027118 <mg_log_prefix>
 802a844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a846:	480f      	ldr	r0, [pc, #60]	@ (802a884 <mg_tcpip_poll+0x338>)
 802a848:	f7fa fb14 	bl	8024e74 <mg_log>
 802a84c:	e7a8      	b.n	802a7a0 <mg_tcpip_poll+0x254>
}
 802a84e:	b00b      	add	sp, #44	@ 0x2c
 802a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a854:	2000012c 	.word	0x2000012c
 802a858:	001b7740 	.word	0x001b7740
 802a85c:	88888889 	.word	0x88888889
 802a860:	eeeeeeef 	.word	0xeeeeeeef
 802a864:	0803cd78 	.word	0x0803cd78
 802a868:	0803cc60 	.word	0x0803cc60
 802a86c:	0803c2f0 	.word	0x0803c2f0
 802a870:	0803ca54 	.word	0x0803ca54
 802a874:	0803ca64 	.word	0x0803ca64
 802a878:	0803ca74 	.word	0x0803ca74
 802a87c:	0803ca80 	.word	0x0803ca80
 802a880:	0803ca98 	.word	0x0803ca98
 802a884:	0803ca94 	.word	0x0803ca94

0802a888 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 802a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a88a:	b087      	sub	sp, #28
 802a88c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802a88e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 802a890:	f7fc fc3c 	bl	802710c <mg_millis>
 802a894:	4602      	mov	r2, r0
 802a896:	460b      	mov	r3, r1
 802a898:	9004      	str	r0, [sp, #16]
 802a89a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802a89c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 802a8a0:	f7fb fefe 	bl	80266a0 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 802a8a4:	2d00      	cmp	r5, #0
 802a8a6:	d078      	beq.n	802a99a <mg_mgr_poll+0x112>
 802a8a8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802a8aa:	2b00      	cmp	r3, #0
 802a8ac:	d075      	beq.n	802a99a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802a8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a8b2:	4628      	mov	r0, r5
 802a8b4:	f7ff fe4a 	bl	802a54c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a8b8:	6824      	ldr	r4, [r4, #0]
 802a8ba:	e040      	b.n	802a93e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a8bc:	4b38      	ldr	r3, [pc, #224]	@ (802a9a0 <mg_mgr_poll+0x118>)
 802a8be:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 802a8c2:	4938      	ldr	r1, [pc, #224]	@ (802a9a4 <mg_mgr_poll+0x11c>)
 802a8c4:	2004      	movs	r0, #4
 802a8c6:	f7fc fc27 	bl	8027118 <mg_log_prefix>
 802a8ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a8cc:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 802a8d0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802a8d4:	d019      	beq.n	802a90a <mg_mgr_poll+0x82>
 802a8d6:	2254      	movs	r2, #84	@ 0x54
 802a8d8:	f010 0f20 	tst.w	r0, #32
 802a8dc:	d017      	beq.n	802a90e <mg_mgr_poll+0x86>
 802a8de:	2343      	movs	r3, #67	@ 0x43
 802a8e0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802a8e4:	d115      	bne.n	802a912 <mg_mgr_poll+0x8a>
 802a8e6:	2668      	movs	r6, #104	@ 0x68
 802a8e8:	f010 0f08 	tst.w	r0, #8
 802a8ec:	d013      	beq.n	802a916 <mg_mgr_poll+0x8e>
 802a8ee:	2752      	movs	r7, #82	@ 0x52
 802a8f0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 802a8f4:	f010 0f20 	tst.w	r0, #32
 802a8f8:	d00f      	beq.n	802a91a <mg_mgr_poll+0x92>
 802a8fa:	2043      	movs	r0, #67	@ 0x43
 802a8fc:	9002      	str	r0, [sp, #8]
 802a8fe:	9701      	str	r7, [sp, #4]
 802a900:	9600      	str	r6, [sp, #0]
 802a902:	4829      	ldr	r0, [pc, #164]	@ (802a9a8 <mg_mgr_poll+0x120>)
 802a904:	f7fa fab6 	bl	8024e74 <mg_log>
 802a908:	e024      	b.n	802a954 <mg_mgr_poll+0xcc>
 802a90a:	2274      	movs	r2, #116	@ 0x74
 802a90c:	e7e4      	b.n	802a8d8 <mg_mgr_poll+0x50>
 802a90e:	2363      	movs	r3, #99	@ 0x63
 802a910:	e7e6      	b.n	802a8e0 <mg_mgr_poll+0x58>
 802a912:	2648      	movs	r6, #72	@ 0x48
 802a914:	e7e8      	b.n	802a8e8 <mg_mgr_poll+0x60>
 802a916:	2772      	movs	r7, #114	@ 0x72
 802a918:	e7ea      	b.n	802a8f0 <mg_mgr_poll+0x68>
 802a91a:	2063      	movs	r0, #99	@ 0x63
 802a91c:	e7ee      	b.n	802a8fc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802a91e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 802a922:	4620      	mov	r0, r4
 802a924:	f7fc fd18 	bl	8027358 <handle_tls_recv>
 802a928:	e01e      	b.n	802a968 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802a92a:	4620      	mov	r0, r4
 802a92c:	f7fe fa6a 	bl	8028e04 <write_conn>
 802a930:	e01f      	b.n	802a972 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 802a932:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a936:	f013 0f20 	tst.w	r3, #32
 802a93a:	d12a      	bne.n	802a992 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a93c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a93e:	b364      	cbz	r4, 802a99a <mg_mgr_poll+0x112>
    tmp = c->next;
 802a940:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 802a942:	aa04      	add	r2, sp, #16
 802a944:	2102      	movs	r1, #2
 802a946:	4620      	mov	r0, r4
 802a948:	f7f9 f84b 	bl	80239e2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a94c:	4b17      	ldr	r3, [pc, #92]	@ (802a9ac <mg_mgr_poll+0x124>)
 802a94e:	681b      	ldr	r3, [r3, #0]
 802a950:	2b03      	cmp	r3, #3
 802a952:	dcb3      	bgt.n	802a8bc <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 802a954:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a958:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802a95c:	d004      	beq.n	802a968 <mg_mgr_poll+0xe0>
 802a95e:	4620      	mov	r0, r4
 802a960:	f7fb fee8 	bl	8026734 <mg_tls_pending>
 802a964:	2800      	cmp	r0, #0
 802a966:	d1da      	bne.n	802a91e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 802a968:	4620      	mov	r0, r4
 802a96a:	f7f7 fbfb 	bl	8022164 <can_write>
 802a96e:	2800      	cmp	r0, #0
 802a970:	d1db      	bne.n	802a92a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 802a972:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a976:	f013 0f10 	tst.w	r3, #16
 802a97a:	d0da      	beq.n	802a932 <mg_mgr_poll+0xaa>
 802a97c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802a97e:	2b00      	cmp	r3, #0
 802a980:	d1d7      	bne.n	802a932 <mg_mgr_poll+0xaa>
 802a982:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802a986:	2b04      	cmp	r3, #4
 802a988:	d0d3      	beq.n	802a932 <mg_mgr_poll+0xaa>
      init_closure(c);
 802a98a:	4620      	mov	r0, r4
 802a98c:	f7fe fa66 	bl	8028e5c <init_closure>
 802a990:	e7cf      	b.n	802a932 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 802a992:	4620      	mov	r0, r4
 802a994:	f7fd fb7e 	bl	8028094 <close_conn>
 802a998:	e7d0      	b.n	802a93c <mg_mgr_poll+0xb4>
}
 802a99a:	b007      	add	sp, #28
 802a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a99e:	bf00      	nop
 802a9a0:	0803cc70 	.word	0x0803cc70
 802a9a4:	0803c2f0 	.word	0x0803c2f0
 802a9a8:	0803caa4 	.word	0x0803caa4
 802a9ac:	2000012c 	.word	0x2000012c

0802a9b0 <mg_now>:
uint64_t mg_now(void) {
 802a9b0:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 802a9b2:	f7fc fbab 	bl	802710c <mg_millis>
 802a9b6:	4a03      	ldr	r2, [pc, #12]	@ (802a9c4 <mg_now+0x14>)
 802a9b8:	6813      	ldr	r3, [r2, #0]
 802a9ba:	6852      	ldr	r2, [r2, #4]
 802a9bc:	18c0      	adds	r0, r0, r3
}
 802a9be:	eb42 0101 	adc.w	r1, r2, r1
 802a9c2:	bd08      	pop	{r3, pc}
 802a9c4:	20019f98 	.word	0x20019f98

0802a9c8 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 802a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a9cc:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a9ce:	460a      	mov	r2, r1
 802a9d0:	b129      	cbz	r1, 802a9de <mg_sntp_parse+0x16>
 802a9d2:	7801      	ldrb	r1, [r0, #0]
 802a9d4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a9d8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802a9dc:	e001      	b.n	802a9e2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a9de:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a9e0:	461d      	mov	r5, r3
  if (len < 48) {
 802a9e2:	2a2f      	cmp	r2, #47	@ 0x2f
 802a9e4:	d817      	bhi.n	802aa16 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 802a9e6:	4b4b      	ldr	r3, [pc, #300]	@ (802ab14 <mg_sntp_parse+0x14c>)
 802a9e8:	681b      	ldr	r3, [r3, #0]
 802a9ea:	2b00      	cmp	r3, #0
 802a9ec:	dc04      	bgt.n	802a9f8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802a9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a9f2:	4601      	mov	r1, r0
}
 802a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 802a9f8:	4b47      	ldr	r3, [pc, #284]	@ (802ab18 <mg_sntp_parse+0x150>)
 802a9fa:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802a9fe:	4947      	ldr	r1, [pc, #284]	@ (802ab1c <mg_sntp_parse+0x154>)
 802aa00:	2001      	movs	r0, #1
 802aa02:	f7fc fb89 	bl	8027118 <mg_log_prefix>
 802aa06:	4946      	ldr	r1, [pc, #280]	@ (802ab20 <mg_sntp_parse+0x158>)
 802aa08:	4846      	ldr	r0, [pc, #280]	@ (802ab24 <mg_sntp_parse+0x15c>)
 802aa0a:	f7fa fa33 	bl	8024e74 <mg_log>
  int64_t epoch_milliseconds = -1;
 802aa0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa12:	4601      	mov	r1, r0
 802aa14:	e7ee      	b.n	802a9f4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 802aa16:	3b04      	subs	r3, #4
 802aa18:	2b01      	cmp	r3, #1
 802aa1a:	d916      	bls.n	802aa4a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802aa1c:	4b3d      	ldr	r3, [pc, #244]	@ (802ab14 <mg_sntp_parse+0x14c>)
 802aa1e:	681b      	ldr	r3, [r3, #0]
 802aa20:	2b00      	cmp	r3, #0
 802aa22:	dc03      	bgt.n	802aa2c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 802aa24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa28:	4601      	mov	r1, r0
 802aa2a:	e7e3      	b.n	802a9f4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802aa2c:	4b3a      	ldr	r3, [pc, #232]	@ (802ab18 <mg_sntp_parse+0x150>)
 802aa2e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 802aa32:	493a      	ldr	r1, [pc, #232]	@ (802ab1c <mg_sntp_parse+0x154>)
 802aa34:	2001      	movs	r0, #1
 802aa36:	f7fc fb6f 	bl	8027118 <mg_log_prefix>
 802aa3a:	493b      	ldr	r1, [pc, #236]	@ (802ab28 <mg_sntp_parse+0x160>)
 802aa3c:	4839      	ldr	r0, [pc, #228]	@ (802ab24 <mg_sntp_parse+0x15c>)
 802aa3e:	f7fa fa19 	bl	8024e74 <mg_log>
  int64_t epoch_milliseconds = -1;
 802aa42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa46:	4601      	mov	r1, r0
 802aa48:	e7d4      	b.n	802a9f4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 802aa4a:	7863      	ldrb	r3, [r4, #1]
 802aa4c:	b9b3      	cbnz	r3, 802aa7c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802aa4e:	4b31      	ldr	r3, [pc, #196]	@ (802ab14 <mg_sntp_parse+0x14c>)
 802aa50:	681b      	ldr	r3, [r3, #0]
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	dc03      	bgt.n	802aa5e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 802aa56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa5a:	4601      	mov	r1, r0
 802aa5c:	e7ca      	b.n	802a9f4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802aa5e:	4b2e      	ldr	r3, [pc, #184]	@ (802ab18 <mg_sntp_parse+0x150>)
 802aa60:	f641 4212 	movw	r2, #7186	@ 0x1c12
 802aa64:	492d      	ldr	r1, [pc, #180]	@ (802ab1c <mg_sntp_parse+0x154>)
 802aa66:	2001      	movs	r0, #1
 802aa68:	f7fc fb56 	bl	8027118 <mg_log_prefix>
 802aa6c:	492f      	ldr	r1, [pc, #188]	@ (802ab2c <mg_sntp_parse+0x164>)
 802aa6e:	482d      	ldr	r0, [pc, #180]	@ (802ab24 <mg_sntp_parse+0x15c>)
 802aa70:	f7fa fa00 	bl	8024e74 <mg_log>
  int64_t epoch_milliseconds = -1;
 802aa74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa78:	4601      	mov	r1, r0
 802aa7a:	e7bb      	b.n	802a9f4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 802aa7c:	1eeb      	subs	r3, r5, #3
 802aa7e:	2b01      	cmp	r3, #1
 802aa80:	d907      	bls.n	802aa92 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 802aa82:	4b24      	ldr	r3, [pc, #144]	@ (802ab14 <mg_sntp_parse+0x14c>)
 802aa84:	681b      	ldr	r3, [r3, #0]
 802aa86:	2b00      	cmp	r3, #0
 802aa88:	dc35      	bgt.n	802aaf6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 802aa8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802aa8e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 802aa90:	e7b0      	b.n	802a9f4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 802aa92:	f104 0018 	add.w	r0, r4, #24
 802aa96:	f7fb ffc3 	bl	8026a20 <gettimestamp>
 802aa9a:	4606      	mov	r6, r0
 802aa9c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802aa9e:	f104 0020 	add.w	r0, r4, #32
 802aaa2:	f7fb ffbd 	bl	8026a20 <gettimestamp>
 802aaa6:	4680      	mov	r8, r0
 802aaa8:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802aaaa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802aaae:	f7fb ffb7 	bl	8026a20 <gettimestamp>
 802aab2:	4607      	mov	r7, r0
 802aab4:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 802aab6:	f7fc fb29 	bl	802710c <mg_millis>
 802aaba:	4605      	mov	r5, r0
 802aabc:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802aabe:	1b86      	subs	r6, r0, r6
 802aac0:	eb61 020a 	sbc.w	r2, r1, sl
 802aac4:	ebb7 0808 	subs.w	r8, r7, r8
 802aac8:	eb64 0909 	sbc.w	r9, r4, r9
 802aacc:	ebb6 0608 	subs.w	r6, r6, r8
 802aad0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 802aad4:	0fd3      	lsrs	r3, r2, #31
 802aad6:	199b      	adds	r3, r3, r6
 802aad8:	f142 0200 	adc.w	r2, r2, #0
 802aadc:	085b      	lsrs	r3, r3, #1
 802aade:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 802aae2:	19d8      	adds	r0, r3, r7
 802aae4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 802aae8:	1b45      	subs	r5, r0, r5
 802aaea:	eb61 030c 	sbc.w	r3, r1, ip
 802aaee:	4a10      	ldr	r2, [pc, #64]	@ (802ab30 <mg_sntp_parse+0x168>)
 802aaf0:	6015      	str	r5, [r2, #0]
 802aaf2:	6053      	str	r3, [r2, #4]
 802aaf4:	e77e      	b.n	802a9f4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 802aaf6:	4b08      	ldr	r3, [pc, #32]	@ (802ab18 <mg_sntp_parse+0x150>)
 802aaf8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802aafc:	4907      	ldr	r1, [pc, #28]	@ (802ab1c <mg_sntp_parse+0x154>)
 802aafe:	2001      	movs	r0, #1
 802ab00:	f7fc fb0a 	bl	8027118 <mg_log_prefix>
 802ab04:	4629      	mov	r1, r5
 802ab06:	480b      	ldr	r0, [pc, #44]	@ (802ab34 <mg_sntp_parse+0x16c>)
 802ab08:	f7fa f9b4 	bl	8024e74 <mg_log>
  int64_t epoch_milliseconds = -1;
 802ab0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ab10:	4601      	mov	r1, r0
 802ab12:	e76f      	b.n	802a9f4 <mg_sntp_parse+0x2c>
 802ab14:	2000012c 	.word	0x2000012c
 802ab18:	0803cbc0 	.word	0x0803cbc0
 802ab1c:	0803c2f0 	.word	0x0803c2f0
 802ab20:	0803cab8 	.word	0x0803cab8
 802ab24:	0803c608 	.word	0x0803c608
 802ab28:	0803cac8 	.word	0x0803cac8
 802ab2c:	0803cadc 	.word	0x0803cadc
 802ab30:	20019f98 	.word	0x20019f98
 802ab34:	0803caf8 	.word	0x0803caf8

0802ab38 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 802ab38:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 802ab3c:	b08c      	sub	sp, #48	@ 0x30
 802ab3e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 802ab40:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802ab44:	f013 0f08 	tst.w	r3, #8
 802ab48:	d012      	beq.n	802ab70 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 802ab4a:	4b2b      	ldr	r3, [pc, #172]	@ (802abf8 <mg_sntp_request+0xc0>)
 802ab4c:	681b      	ldr	r3, [r3, #0]
 802ab4e:	2b00      	cmp	r3, #0
 802ab50:	dc02      	bgt.n	802ab58 <mg_sntp_request+0x20>
}
 802ab52:	b00c      	add	sp, #48	@ 0x30
 802ab54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 802ab58:	4b28      	ldr	r3, [pc, #160]	@ (802abfc <mg_sntp_request+0xc4>)
 802ab5a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 802ab5e:	4928      	ldr	r1, [pc, #160]	@ (802ac00 <mg_sntp_request+0xc8>)
 802ab60:	2001      	movs	r0, #1
 802ab62:	f7fc fad9 	bl	8027118 <mg_log_prefix>
 802ab66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ab68:	4826      	ldr	r0, [pc, #152]	@ (802ac04 <mg_sntp_request+0xcc>)
 802ab6a:	f7fa f983 	bl	8024e74 <mg_log>
 802ab6e:	e7f0      	b.n	802ab52 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 802ab70:	f7fc facc 	bl	802710c <mg_millis>
 802ab74:	4606      	mov	r6, r0
 802ab76:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 802ab78:	2100      	movs	r1, #0
 802ab7a:	9100      	str	r1, [sp, #0]
 802ab7c:	222c      	movs	r2, #44	@ 0x2c
 802ab7e:	a801      	add	r0, sp, #4
 802ab80:	f002 fec6 	bl	802d910 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 802ab84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ab88:	2300      	movs	r3, #0
 802ab8a:	4630      	mov	r0, r6
 802ab8c:	4629      	mov	r1, r5
 802ab8e:	f7e6 f893 	bl	8010cb8 <__aeabi_ldivmod>
 802ab92:	4610      	mov	r0, r2
 802ab94:	4619      	mov	r1, r3
 802ab96:	f7e5 fd19 	bl	80105cc <__aeabi_l2d>
 802ab9a:	2200      	movs	r2, #0
 802ab9c:	4b1a      	ldr	r3, [pc, #104]	@ (802ac08 <mg_sntp_request+0xd0>)
 802ab9e:	f7e5 fe6d 	bl	801087c <__aeabi_ddiv>
 802aba2:	a313      	add	r3, pc, #76	@ (adr r3, 802abf0 <mg_sntp_request+0xb8>)
 802aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aba8:	f7e5 fd3e 	bl	8010628 <__aeabi_dmul>
 802abac:	4680      	mov	r8, r0
 802abae:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802abb0:	2323      	movs	r3, #35	@ 0x23
 802abb2:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 802abb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802abba:	2300      	movs	r3, #0
 802abbc:	4630      	mov	r0, r6
 802abbe:	4629      	mov	r1, r5
 802abc0:	f7e6 f87a 	bl	8010cb8 <__aeabi_ldivmod>
 802abc4:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 802abc8:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 802abcc:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 802abd0:	f7fb fec8 	bl	8026964 <mg_ntohl>
 802abd4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 802abd6:	4640      	mov	r0, r8
 802abd8:	4649      	mov	r1, r9
 802abda:	f7e5 fffd 	bl	8010bd8 <__aeabi_d2uiz>
 802abde:	f7fb fec1 	bl	8026964 <mg_ntohl>
 802abe2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 802abe4:	2230      	movs	r2, #48	@ 0x30
 802abe6:	4669      	mov	r1, sp
 802abe8:	4620      	mov	r0, r4
 802abea:	f7fd fb49 	bl	8028280 <mg_send>
}
 802abee:	e7b0      	b.n	802ab52 <mg_sntp_request+0x1a>
 802abf0:	ffe00000 	.word	0xffe00000
 802abf4:	41efffff 	.word	0x41efffff
 802abf8:	2000012c 	.word	0x2000012c
 802abfc:	0803cbb0 	.word	0x0803cbb0
 802ac00:	0803c2f0 	.word	0x0803c2f0
 802ac04:	0803cb10 	.word	0x0803cb10
 802ac08:	408f4000 	.word	0x408f4000

0802ac0c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 802ac0c:	b570      	push	{r4, r5, r6, lr}
 802ac0e:	b082      	sub	sp, #8
 802ac10:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 802ac12:	3901      	subs	r1, #1
 802ac14:	2906      	cmp	r1, #6
 802ac16:	d810      	bhi.n	802ac3a <sntp_cb+0x2e>
 802ac18:	e8df f001 	tbb	[pc, r1]
 802ac1c:	110f4604 	.word	0x110f4604
 802ac20:	0f0f      	.short	0x0f0f
 802ac22:	14          	.byte	0x14
 802ac23:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 802ac24:	f7fc fa72 	bl	802710c <mg_millis>
 802ac28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802ac2c:	18c0      	adds	r0, r0, r3
 802ac2e:	f141 0100 	adc.w	r1, r1, #0
 802ac32:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802ac36:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 802ac3a:	b002      	add	sp, #8
 802ac3c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 802ac3e:	f7ff ff7b 	bl	802ab38 <mg_sntp_request>
 802ac42:	e7fa      	b.n	802ac3a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 802ac44:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802ac46:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802ac48:	f7ff febe 	bl	802a9c8 <mg_sntp_parse>
 802ac4c:	4605      	mov	r5, r0
 802ac4e:	460e      	mov	r6, r1
 802ac50:	9000      	str	r0, [sp, #0]
 802ac52:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 802ac54:	2801      	cmp	r0, #1
 802ac56:	f171 0300 	sbcs.w	r3, r1, #0
 802ac5a:	da06      	bge.n	802ac6a <sntp_cb+0x5e>
    c->is_closing = 1;
 802ac5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802ac60:	f043 0320 	orr.w	r3, r3, #32
 802ac64:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802ac68:	e7e7      	b.n	802ac3a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802ac6a:	f7fc fa4f 	bl	802710c <mg_millis>
 802ac6e:	1a2d      	subs	r5, r5, r0
 802ac70:	eb66 0601 	sbc.w	r6, r6, r1
 802ac74:	4b14      	ldr	r3, [pc, #80]	@ (802acc8 <sntp_cb+0xbc>)
 802ac76:	601d      	str	r5, [r3, #0]
 802ac78:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802ac7a:	466a      	mov	r2, sp
 802ac7c:	2112      	movs	r1, #18
 802ac7e:	4620      	mov	r0, r4
 802ac80:	f7f8 feaf 	bl	80239e2 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 802ac84:	4b11      	ldr	r3, [pc, #68]	@ (802accc <sntp_cb+0xc0>)
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	2b02      	cmp	r3, #2
 802ac8a:	dde7      	ble.n	802ac5c <sntp_cb+0x50>
 802ac8c:	4b10      	ldr	r3, [pc, #64]	@ (802acd0 <sntp_cb+0xc4>)
 802ac8e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 802ac92:	4910      	ldr	r1, [pc, #64]	@ (802acd4 <sntp_cb+0xc8>)
 802ac94:	2003      	movs	r0, #3
 802ac96:	f7fc fa3f 	bl	8027118 <mg_log_prefix>
 802ac9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ac9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802aca0:	480d      	ldr	r0, [pc, #52]	@ (802acd8 <sntp_cb+0xcc>)
 802aca2:	f7fa f8e7 	bl	8024e74 <mg_log>
 802aca6:	e7d9      	b.n	802ac5c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 802aca8:	f7fc fa30 	bl	802710c <mg_millis>
 802acac:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 802acb0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 802acb4:	4282      	cmp	r2, r0
 802acb6:	418b      	sbcs	r3, r1
 802acb8:	d2bf      	bcs.n	802ac3a <sntp_cb+0x2e>
 802acba:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802acbe:	f043 0320 	orr.w	r3, r3, #32
 802acc2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802acc6:	e7b8      	b.n	802ac3a <sntp_cb+0x2e>
 802acc8:	20019f98 	.word	0x20019f98
 802accc:	2000012c 	.word	0x2000012c
 802acd0:	0803cba8 	.word	0x0803cba8
 802acd4:	0803c2f0 	.word	0x0803c2f0
 802acd8:	0803cb28 	.word	0x0803cb28

0802acdc <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802acdc:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802acde:	460d      	mov	r5, r1
 802ace0:	b169      	cbz	r1, 802acfe <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 802ace2:	4629      	mov	r1, r5
 802ace4:	f7fe ffa0 	bl	8029c28 <mg_connect>
 802ace8:	4604      	mov	r4, r0
 802acea:	b130      	cbz	r0, 802acfa <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802acec:	4b05      	ldr	r3, [pc, #20]	@ (802ad04 <mg_sntp_connect+0x28>)
 802acee:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 802acf2:	462a      	mov	r2, r5
 802acf4:	2101      	movs	r1, #1
 802acf6:	f7ff ff89 	bl	802ac0c <sntp_cb>
}
 802acfa:	4620      	mov	r0, r4
 802acfc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802acfe:	4d02      	ldr	r5, [pc, #8]	@ (802ad08 <mg_sntp_connect+0x2c>)
 802ad00:	e7ef      	b.n	802ace2 <mg_sntp_connect+0x6>
 802ad02:	bf00      	nop
 802ad04:	0802ac0d 	.word	0x0802ac0d
 802ad08:	0803cb4c 	.word	0x0803cb4c

0802ad0c <has_mqtt_prefix>:
 802ad0c:	b508      	push	{r3, lr}
 802ad0e:	2207      	movs	r2, #7
 802ad10:	4903      	ldr	r1, [pc, #12]	@ (802ad20 <has_mqtt_prefix+0x14>)
 802ad12:	f002 fe32 	bl	802d97a <strncmp>
 802ad16:	fab0 f080 	clz	r0, r0
 802ad1a:	0940      	lsrs	r0, r0, #5
 802ad1c:	bd08      	pop	{r3, pc}
 802ad1e:	bf00      	nop
 802ad20:	0803d1c8 	.word	0x0803d1c8

0802ad24 <is_valid_ip_or_domain>:
 802ad24:	b570      	push	{r4, r5, r6, lr}
 802ad26:	4604      	mov	r4, r0
 802ad28:	2200      	movs	r2, #0
 802ad2a:	4610      	mov	r0, r2
 802ad2c:	e001      	b.n	802ad32 <is_valid_ip_or_domain+0xe>
 802ad2e:	3001      	adds	r0, #1
 802ad30:	3201      	adds	r2, #1
 802ad32:	5ca3      	ldrb	r3, [r4, r2]
 802ad34:	b143      	cbz	r3, 802ad48 <is_valid_ip_or_domain+0x24>
 802ad36:	2b2e      	cmp	r3, #46	@ 0x2e
 802ad38:	d0f9      	beq.n	802ad2e <is_valid_ip_or_domain+0xa>
 802ad3a:	491d      	ldr	r1, [pc, #116]	@ (802adb0 <is_valid_ip_or_domain+0x8c>)
 802ad3c:	5ccb      	ldrb	r3, [r1, r3]
 802ad3e:	f013 0f04 	tst.w	r3, #4
 802ad42:	d1f5      	bne.n	802ad30 <is_valid_ip_or_domain+0xc>
 802ad44:	2500      	movs	r5, #0
 802ad46:	e000      	b.n	802ad4a <is_valid_ip_or_domain+0x26>
 802ad48:	2501      	movs	r5, #1
 802ad4a:	b335      	cbz	r5, 802ad9a <is_valid_ip_or_domain+0x76>
 802ad4c:	2803      	cmp	r0, #3
 802ad4e:	d013      	beq.n	802ad78 <is_valid_ip_or_domain+0x54>
 802ad50:	2200      	movs	r2, #0
 802ad52:	4615      	mov	r5, r2
 802ad54:	e014      	b.n	802ad80 <is_valid_ip_or_domain+0x5c>
 802ad56:	3601      	adds	r6, #1
 802ad58:	2e03      	cmp	r6, #3
 802ad5a:	dc24      	bgt.n	802ada6 <is_valid_ip_or_domain+0x82>
 802ad5c:	4620      	mov	r0, r4
 802ad5e:	f000 f8a3 	bl	802aea8 <atoi>
 802ad62:	28ff      	cmp	r0, #255	@ 0xff
 802ad64:	d821      	bhi.n	802adaa <is_valid_ip_or_domain+0x86>
 802ad66:	212e      	movs	r1, #46	@ 0x2e
 802ad68:	4620      	mov	r0, r4
 802ad6a:	f002 fde8 	bl	802d93e <strchr>
 802ad6e:	4604      	mov	r4, r0
 802ad70:	2800      	cmp	r0, #0
 802ad72:	d0f0      	beq.n	802ad56 <is_valid_ip_or_domain+0x32>
 802ad74:	3401      	adds	r4, #1
 802ad76:	e7ee      	b.n	802ad56 <is_valid_ip_or_domain+0x32>
 802ad78:	2600      	movs	r6, #0
 802ad7a:	e7ed      	b.n	802ad58 <is_valid_ip_or_domain+0x34>
 802ad7c:	3501      	adds	r5, #1
 802ad7e:	3201      	adds	r2, #1
 802ad80:	5ca3      	ldrb	r3, [r4, r2]
 802ad82:	b163      	cbz	r3, 802ad9e <is_valid_ip_or_domain+0x7a>
 802ad84:	2b2e      	cmp	r3, #46	@ 0x2e
 802ad86:	d0f9      	beq.n	802ad7c <is_valid_ip_or_domain+0x58>
 802ad88:	4909      	ldr	r1, [pc, #36]	@ (802adb0 <is_valid_ip_or_domain+0x8c>)
 802ad8a:	5cc9      	ldrb	r1, [r1, r3]
 802ad8c:	f011 0f07 	tst.w	r1, #7
 802ad90:	d1f5      	bne.n	802ad7e <is_valid_ip_or_domain+0x5a>
 802ad92:	2b2d      	cmp	r3, #45	@ 0x2d
 802ad94:	d0f3      	beq.n	802ad7e <is_valid_ip_or_domain+0x5a>
 802ad96:	2500      	movs	r5, #0
 802ad98:	e005      	b.n	802ada6 <is_valid_ip_or_domain+0x82>
 802ad9a:	462a      	mov	r2, r5
 802ad9c:	e7f0      	b.n	802ad80 <is_valid_ip_or_domain+0x5c>
 802ad9e:	2d00      	cmp	r5, #0
 802ada0:	bfd4      	ite	le
 802ada2:	2500      	movle	r5, #0
 802ada4:	2501      	movgt	r5, #1
 802ada6:	4628      	mov	r0, r5
 802ada8:	bd70      	pop	{r4, r5, r6, pc}
 802adaa:	2500      	movs	r5, #0
 802adac:	e7fb      	b.n	802ada6 <is_valid_ip_or_domain+0x82>
 802adae:	bf00      	nop
 802adb0:	0803d6c9 	.word	0x0803d6c9

0802adb4 <is_valid_port>:
 802adb4:	b510      	push	{r4, lr}
 802adb6:	4604      	mov	r4, r0
 802adb8:	f000 f876 	bl	802aea8 <atoi>
 802adbc:	3801      	subs	r0, #1
 802adbe:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 802adc2:	4298      	cmp	r0, r3
 802adc4:	d80a      	bhi.n	802addc <is_valid_port+0x28>
 802adc6:	7823      	ldrb	r3, [r4, #0]
 802adc8:	b133      	cbz	r3, 802add8 <is_valid_port+0x24>
 802adca:	4a06      	ldr	r2, [pc, #24]	@ (802ade4 <is_valid_port+0x30>)
 802adcc:	5cd3      	ldrb	r3, [r2, r3]
 802adce:	f013 0f04 	tst.w	r3, #4
 802add2:	d005      	beq.n	802ade0 <is_valid_port+0x2c>
 802add4:	3401      	adds	r4, #1
 802add6:	e7f6      	b.n	802adc6 <is_valid_port+0x12>
 802add8:	2001      	movs	r0, #1
 802adda:	e000      	b.n	802adde <is_valid_port+0x2a>
 802addc:	2000      	movs	r0, #0
 802adde:	bd10      	pop	{r4, pc}
 802ade0:	2000      	movs	r0, #0
 802ade2:	e7fc      	b.n	802adde <is_valid_port+0x2a>
 802ade4:	0803d6c9 	.word	0x0803d6c9

0802ade8 <is_valid_mqtt_url>:
 802ade8:	b570      	push	{r4, r5, r6, lr}
 802adea:	b0c0      	sub	sp, #256	@ 0x100
 802adec:	4604      	mov	r4, r0
 802adee:	f7ff ff8d 	bl	802ad0c <has_mqtt_prefix>
 802adf2:	b1d0      	cbz	r0, 802ae2a <is_valid_mqtt_url+0x42>
 802adf4:	3407      	adds	r4, #7
 802adf6:	213a      	movs	r1, #58	@ 0x3a
 802adf8:	4620      	mov	r0, r4
 802adfa:	f002 fda0 	bl	802d93e <strchr>
 802adfe:	4606      	mov	r6, r0
 802ae00:	b1c8      	cbz	r0, 802ae36 <is_valid_mqtt_url+0x4e>
 802ae02:	1b05      	subs	r5, r0, r4
 802ae04:	462a      	mov	r2, r5
 802ae06:	4621      	mov	r1, r4
 802ae08:	4668      	mov	r0, sp
 802ae0a:	f002 fdc8 	bl	802d99e <strncpy>
 802ae0e:	2300      	movs	r3, #0
 802ae10:	f80d 3005 	strb.w	r3, [sp, r5]
 802ae14:	4668      	mov	r0, sp
 802ae16:	f7ff ff85 	bl	802ad24 <is_valid_ip_or_domain>
 802ae1a:	b190      	cbz	r0, 802ae42 <is_valid_mqtt_url+0x5a>
 802ae1c:	1c70      	adds	r0, r6, #1
 802ae1e:	f7ff ffc9 	bl	802adb4 <is_valid_port>
 802ae22:	b1a0      	cbz	r0, 802ae4e <is_valid_mqtt_url+0x66>
 802ae24:	2000      	movs	r0, #0
 802ae26:	b040      	add	sp, #256	@ 0x100
 802ae28:	bd70      	pop	{r4, r5, r6, pc}
 802ae2a:	480c      	ldr	r0, [pc, #48]	@ (802ae5c <is_valid_mqtt_url+0x74>)
 802ae2c:	f002 f818 	bl	802ce60 <puts>
 802ae30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ae34:	e7f7      	b.n	802ae26 <is_valid_mqtt_url+0x3e>
 802ae36:	480a      	ldr	r0, [pc, #40]	@ (802ae60 <is_valid_mqtt_url+0x78>)
 802ae38:	f002 f812 	bl	802ce60 <puts>
 802ae3c:	f06f 0001 	mvn.w	r0, #1
 802ae40:	e7f1      	b.n	802ae26 <is_valid_mqtt_url+0x3e>
 802ae42:	4808      	ldr	r0, [pc, #32]	@ (802ae64 <is_valid_mqtt_url+0x7c>)
 802ae44:	f002 f80c 	bl	802ce60 <puts>
 802ae48:	f06f 0002 	mvn.w	r0, #2
 802ae4c:	e7eb      	b.n	802ae26 <is_valid_mqtt_url+0x3e>
 802ae4e:	4806      	ldr	r0, [pc, #24]	@ (802ae68 <is_valid_mqtt_url+0x80>)
 802ae50:	f002 f806 	bl	802ce60 <puts>
 802ae54:	f06f 0003 	mvn.w	r0, #3
 802ae58:	e7e5      	b.n	802ae26 <is_valid_mqtt_url+0x3e>
 802ae5a:	bf00      	nop
 802ae5c:	0803d1d0 	.word	0x0803d1d0
 802ae60:	0803d1fc 	.word	0x0803d1fc
 802ae64:	0803d230 	.word	0x0803d230
 802ae68:	0803d254 	.word	0x0803d254

0802ae6c <__assert_func>:
 802ae6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ae6e:	4614      	mov	r4, r2
 802ae70:	461a      	mov	r2, r3
 802ae72:	4b09      	ldr	r3, [pc, #36]	@ (802ae98 <__assert_func+0x2c>)
 802ae74:	681b      	ldr	r3, [r3, #0]
 802ae76:	4605      	mov	r5, r0
 802ae78:	68d8      	ldr	r0, [r3, #12]
 802ae7a:	b954      	cbnz	r4, 802ae92 <__assert_func+0x26>
 802ae7c:	4b07      	ldr	r3, [pc, #28]	@ (802ae9c <__assert_func+0x30>)
 802ae7e:	461c      	mov	r4, r3
 802ae80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ae84:	9100      	str	r1, [sp, #0]
 802ae86:	462b      	mov	r3, r5
 802ae88:	4905      	ldr	r1, [pc, #20]	@ (802aea0 <__assert_func+0x34>)
 802ae8a:	f000 f811 	bl	802aeb0 <fiprintf>
 802ae8e:	f004 fb09 	bl	802f4a4 <abort>
 802ae92:	4b04      	ldr	r3, [pc, #16]	@ (802aea4 <__assert_func+0x38>)
 802ae94:	e7f4      	b.n	802ae80 <__assert_func+0x14>
 802ae96:	bf00      	nop
 802ae98:	200002d8 	.word	0x200002d8
 802ae9c:	0803d2aa 	.word	0x0803d2aa
 802aea0:	0803d27c 	.word	0x0803d27c
 802aea4:	0803d26f 	.word	0x0803d26f

0802aea8 <atoi>:
 802aea8:	220a      	movs	r2, #10
 802aeaa:	2100      	movs	r1, #0
 802aeac:	f002 b8b6 	b.w	802d01c <strtol>

0802aeb0 <fiprintf>:
 802aeb0:	b40e      	push	{r1, r2, r3}
 802aeb2:	b503      	push	{r0, r1, lr}
 802aeb4:	4601      	mov	r1, r0
 802aeb6:	ab03      	add	r3, sp, #12
 802aeb8:	4805      	ldr	r0, [pc, #20]	@ (802aed0 <fiprintf+0x20>)
 802aeba:	f853 2b04 	ldr.w	r2, [r3], #4
 802aebe:	6800      	ldr	r0, [r0, #0]
 802aec0:	9301      	str	r3, [sp, #4]
 802aec2:	f001 fab7 	bl	802c434 <_vfiprintf_r>
 802aec6:	b002      	add	sp, #8
 802aec8:	f85d eb04 	ldr.w	lr, [sp], #4
 802aecc:	b003      	add	sp, #12
 802aece:	4770      	bx	lr
 802aed0:	200002d8 	.word	0x200002d8

0802aed4 <printf>:
 802aed4:	b40f      	push	{r0, r1, r2, r3}
 802aed6:	b507      	push	{r0, r1, r2, lr}
 802aed8:	4906      	ldr	r1, [pc, #24]	@ (802aef4 <printf+0x20>)
 802aeda:	ab04      	add	r3, sp, #16
 802aedc:	6808      	ldr	r0, [r1, #0]
 802aede:	f853 2b04 	ldr.w	r2, [r3], #4
 802aee2:	6881      	ldr	r1, [r0, #8]
 802aee4:	9301      	str	r3, [sp, #4]
 802aee6:	f000 f807 	bl	802aef8 <_vfprintf_r>
 802aeea:	b003      	add	sp, #12
 802aeec:	f85d eb04 	ldr.w	lr, [sp], #4
 802aef0:	b004      	add	sp, #16
 802aef2:	4770      	bx	lr
 802aef4:	200002d8 	.word	0x200002d8

0802aef8 <_vfprintf_r>:
 802aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aefc:	b0d3      	sub	sp, #332	@ 0x14c
 802aefe:	468b      	mov	fp, r1
 802af00:	4690      	mov	r8, r2
 802af02:	461c      	mov	r4, r3
 802af04:	461e      	mov	r6, r3
 802af06:	9003      	str	r0, [sp, #12]
 802af08:	f004 f9ba 	bl	802f280 <_localeconv_r>
 802af0c:	6803      	ldr	r3, [r0, #0]
 802af0e:	9316      	str	r3, [sp, #88]	@ 0x58
 802af10:	4618      	mov	r0, r3
 802af12:	f7e5 f9c5 	bl	80102a0 <strlen>
 802af16:	9b03      	ldr	r3, [sp, #12]
 802af18:	900d      	str	r0, [sp, #52]	@ 0x34
 802af1a:	b123      	cbz	r3, 802af26 <_vfprintf_r+0x2e>
 802af1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802af1e:	b913      	cbnz	r3, 802af26 <_vfprintf_r+0x2e>
 802af20:	9803      	ldr	r0, [sp, #12]
 802af22:	f002 fa4f 	bl	802d3c4 <__sinit>
 802af26:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802af2a:	07da      	lsls	r2, r3, #31
 802af2c:	d407      	bmi.n	802af3e <_vfprintf_r+0x46>
 802af2e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802af32:	059b      	lsls	r3, r3, #22
 802af34:	d403      	bmi.n	802af3e <_vfprintf_r+0x46>
 802af36:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802af3a:	f004 fa4c 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 802af3e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802af42:	049f      	lsls	r7, r3, #18
 802af44:	d409      	bmi.n	802af5a <_vfprintf_r+0x62>
 802af46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802af4a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802af4e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802af52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802af56:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802af5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802af5e:	071d      	lsls	r5, r3, #28
 802af60:	d502      	bpl.n	802af68 <_vfprintf_r+0x70>
 802af62:	f8db 3010 	ldr.w	r3, [fp, #16]
 802af66:	b9c3      	cbnz	r3, 802af9a <_vfprintf_r+0xa2>
 802af68:	9803      	ldr	r0, [sp, #12]
 802af6a:	4659      	mov	r1, fp
 802af6c:	f002 fbe6 	bl	802d73c <__swsetup_r>
 802af70:	b198      	cbz	r0, 802af9a <_vfprintf_r+0xa2>
 802af72:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802af76:	07d8      	lsls	r0, r3, #31
 802af78:	d506      	bpl.n	802af88 <_vfprintf_r+0x90>
 802af7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802af7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802af80:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802af82:	b053      	add	sp, #332	@ 0x14c
 802af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af88:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802af8c:	0599      	lsls	r1, r3, #22
 802af8e:	d4f4      	bmi.n	802af7a <_vfprintf_r+0x82>
 802af90:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802af94:	f004 fa21 	bl	802f3da <__retarget_lock_release_recursive>
 802af98:	e7ef      	b.n	802af7a <_vfprintf_r+0x82>
 802af9a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802af9e:	f003 021a 	and.w	r2, r3, #26
 802afa2:	2a0a      	cmp	r2, #10
 802afa4:	d116      	bne.n	802afd4 <_vfprintf_r+0xdc>
 802afa6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802afaa:	2a00      	cmp	r2, #0
 802afac:	db12      	blt.n	802afd4 <_vfprintf_r+0xdc>
 802afae:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802afb2:	07d2      	lsls	r2, r2, #31
 802afb4:	d405      	bmi.n	802afc2 <_vfprintf_r+0xca>
 802afb6:	059b      	lsls	r3, r3, #22
 802afb8:	d403      	bmi.n	802afc2 <_vfprintf_r+0xca>
 802afba:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802afbe:	f004 fa0c 	bl	802f3da <__retarget_lock_release_recursive>
 802afc2:	9803      	ldr	r0, [sp, #12]
 802afc4:	4623      	mov	r3, r4
 802afc6:	4642      	mov	r2, r8
 802afc8:	4659      	mov	r1, fp
 802afca:	b053      	add	sp, #332	@ 0x14c
 802afcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802afd0:	f001 b9be 	b.w	802c350 <__sbprintf>
 802afd4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802b220 <_vfprintf_r+0x328>
 802afd8:	2300      	movs	r3, #0
 802afda:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802afde:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802afe2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802afe6:	ac29      	add	r4, sp, #164	@ 0xa4
 802afe8:	9426      	str	r4, [sp, #152]	@ 0x98
 802afea:	9304      	str	r3, [sp, #16]
 802afec:	9309      	str	r3, [sp, #36]	@ 0x24
 802afee:	9312      	str	r3, [sp, #72]	@ 0x48
 802aff0:	9317      	str	r3, [sp, #92]	@ 0x5c
 802aff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802aff4:	4643      	mov	r3, r8
 802aff6:	461d      	mov	r5, r3
 802aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802affc:	b10a      	cbz	r2, 802b002 <_vfprintf_r+0x10a>
 802affe:	2a25      	cmp	r2, #37	@ 0x25
 802b000:	d1f9      	bne.n	802aff6 <_vfprintf_r+0xfe>
 802b002:	ebb5 0708 	subs.w	r7, r5, r8
 802b006:	d00d      	beq.n	802b024 <_vfprintf_r+0x12c>
 802b008:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b00a:	443b      	add	r3, r7
 802b00c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b00e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b010:	3301      	adds	r3, #1
 802b012:	2b07      	cmp	r3, #7
 802b014:	e9c4 8700 	strd	r8, r7, [r4]
 802b018:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b01a:	dc75      	bgt.n	802b108 <_vfprintf_r+0x210>
 802b01c:	3408      	adds	r4, #8
 802b01e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b020:	443b      	add	r3, r7
 802b022:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b024:	782b      	ldrb	r3, [r5, #0]
 802b026:	2b00      	cmp	r3, #0
 802b028:	f001 814f 	beq.w	802c2ca <_vfprintf_r+0x13d2>
 802b02c:	2200      	movs	r2, #0
 802b02e:	1c6b      	adds	r3, r5, #1
 802b030:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802b034:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802b038:	920e      	str	r2, [sp, #56]	@ 0x38
 802b03a:	4615      	mov	r5, r2
 802b03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b040:	9206      	str	r2, [sp, #24]
 802b042:	930c      	str	r3, [sp, #48]	@ 0x30
 802b044:	9b06      	ldr	r3, [sp, #24]
 802b046:	3b20      	subs	r3, #32
 802b048:	2b5a      	cmp	r3, #90	@ 0x5a
 802b04a:	f200 85aa 	bhi.w	802bba2 <_vfprintf_r+0xcaa>
 802b04e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802b052:	009d      	.short	0x009d
 802b054:	05a805a8 	.word	0x05a805a8
 802b058:	05a800a5 	.word	0x05a800a5
 802b05c:	05a805a8 	.word	0x05a805a8
 802b060:	05a80085 	.word	0x05a80085
 802b064:	00a805a8 	.word	0x00a805a8
 802b068:	05a800b2 	.word	0x05a800b2
 802b06c:	00b400af 	.word	0x00b400af
 802b070:	00ce05a8 	.word	0x00ce05a8
 802b074:	00d100d1 	.word	0x00d100d1
 802b078:	00d100d1 	.word	0x00d100d1
 802b07c:	00d100d1 	.word	0x00d100d1
 802b080:	00d100d1 	.word	0x00d100d1
 802b084:	05a800d1 	.word	0x05a800d1
 802b088:	05a805a8 	.word	0x05a805a8
 802b08c:	05a805a8 	.word	0x05a805a8
 802b090:	05a805a8 	.word	0x05a805a8
 802b094:	05a80146 	.word	0x05a80146
 802b098:	011a0107 	.word	0x011a0107
 802b09c:	01460146 	.word	0x01460146
 802b0a0:	05a80146 	.word	0x05a80146
 802b0a4:	05a805a8 	.word	0x05a805a8
 802b0a8:	00e205a8 	.word	0x00e205a8
 802b0ac:	05a805a8 	.word	0x05a805a8
 802b0b0:	05a804a3 	.word	0x05a804a3
 802b0b4:	05a805a8 	.word	0x05a805a8
 802b0b8:	05a804ed 	.word	0x05a804ed
 802b0bc:	05a8050e 	.word	0x05a8050e
 802b0c0:	053005a8 	.word	0x053005a8
 802b0c4:	05a805a8 	.word	0x05a805a8
 802b0c8:	05a805a8 	.word	0x05a805a8
 802b0cc:	05a805a8 	.word	0x05a805a8
 802b0d0:	05a805a8 	.word	0x05a805a8
 802b0d4:	05a80146 	.word	0x05a80146
 802b0d8:	011c0107 	.word	0x011c0107
 802b0dc:	01460146 	.word	0x01460146
 802b0e0:	00ed0146 	.word	0x00ed0146
 802b0e4:	0101011c 	.word	0x0101011c
 802b0e8:	00fa05a8 	.word	0x00fa05a8
 802b0ec:	048705a8 	.word	0x048705a8
 802b0f0:	04dc04a5 	.word	0x04dc04a5
 802b0f4:	05a80101 	.word	0x05a80101
 802b0f8:	009b04ed 	.word	0x009b04ed
 802b0fc:	05a80510 	.word	0x05a80510
 802b100:	006505a8 	.word	0x006505a8
 802b104:	009b05a8 	.word	0x009b05a8
 802b108:	9803      	ldr	r0, [sp, #12]
 802b10a:	aa26      	add	r2, sp, #152	@ 0x98
 802b10c:	4659      	mov	r1, fp
 802b10e:	f001 f95f 	bl	802c3d0 <__sprint_r>
 802b112:	2800      	cmp	r0, #0
 802b114:	f040 814d 	bne.w	802b3b2 <_vfprintf_r+0x4ba>
 802b118:	ac29      	add	r4, sp, #164	@ 0xa4
 802b11a:	e780      	b.n	802b01e <_vfprintf_r+0x126>
 802b11c:	4b42      	ldr	r3, [pc, #264]	@ (802b228 <_vfprintf_r+0x330>)
 802b11e:	9319      	str	r3, [sp, #100]	@ 0x64
 802b120:	f015 0320 	ands.w	r3, r5, #32
 802b124:	f000 84c8 	beq.w	802bab8 <_vfprintf_r+0xbc0>
 802b128:	3607      	adds	r6, #7
 802b12a:	f026 0307 	bic.w	r3, r6, #7
 802b12e:	461a      	mov	r2, r3
 802b130:	685f      	ldr	r7, [r3, #4]
 802b132:	f852 6b08 	ldr.w	r6, [r2], #8
 802b136:	9207      	str	r2, [sp, #28]
 802b138:	07eb      	lsls	r3, r5, #31
 802b13a:	d50a      	bpl.n	802b152 <_vfprintf_r+0x25a>
 802b13c:	ea56 0307 	orrs.w	r3, r6, r7
 802b140:	d007      	beq.n	802b152 <_vfprintf_r+0x25a>
 802b142:	2330      	movs	r3, #48	@ 0x30
 802b144:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802b148:	9b06      	ldr	r3, [sp, #24]
 802b14a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802b14e:	f045 0502 	orr.w	r5, r5, #2
 802b152:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802b156:	2302      	movs	r3, #2
 802b158:	f000 bc2e 	b.w	802b9b8 <_vfprintf_r+0xac0>
 802b15c:	9803      	ldr	r0, [sp, #12]
 802b15e:	f004 f88f 	bl	802f280 <_localeconv_r>
 802b162:	6843      	ldr	r3, [r0, #4]
 802b164:	9317      	str	r3, [sp, #92]	@ 0x5c
 802b166:	4618      	mov	r0, r3
 802b168:	f7e5 f89a 	bl	80102a0 <strlen>
 802b16c:	9012      	str	r0, [sp, #72]	@ 0x48
 802b16e:	9803      	ldr	r0, [sp, #12]
 802b170:	f004 f886 	bl	802f280 <_localeconv_r>
 802b174:	6883      	ldr	r3, [r0, #8]
 802b176:	9309      	str	r3, [sp, #36]	@ 0x24
 802b178:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b17a:	b12b      	cbz	r3, 802b188 <_vfprintf_r+0x290>
 802b17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b17e:	b11b      	cbz	r3, 802b188 <_vfprintf_r+0x290>
 802b180:	781b      	ldrb	r3, [r3, #0]
 802b182:	b10b      	cbz	r3, 802b188 <_vfprintf_r+0x290>
 802b184:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802b188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b18a:	e757      	b.n	802b03c <_vfprintf_r+0x144>
 802b18c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802b190:	2b00      	cmp	r3, #0
 802b192:	d1f9      	bne.n	802b188 <_vfprintf_r+0x290>
 802b194:	2320      	movs	r3, #32
 802b196:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b19a:	e7f5      	b.n	802b188 <_vfprintf_r+0x290>
 802b19c:	f045 0501 	orr.w	r5, r5, #1
 802b1a0:	e7f2      	b.n	802b188 <_vfprintf_r+0x290>
 802b1a2:	f856 3b04 	ldr.w	r3, [r6], #4
 802b1a6:	930e      	str	r3, [sp, #56]	@ 0x38
 802b1a8:	2b00      	cmp	r3, #0
 802b1aa:	daed      	bge.n	802b188 <_vfprintf_r+0x290>
 802b1ac:	425b      	negs	r3, r3
 802b1ae:	930e      	str	r3, [sp, #56]	@ 0x38
 802b1b0:	f045 0504 	orr.w	r5, r5, #4
 802b1b4:	e7e8      	b.n	802b188 <_vfprintf_r+0x290>
 802b1b6:	232b      	movs	r3, #43	@ 0x2b
 802b1b8:	e7ed      	b.n	802b196 <_vfprintf_r+0x29e>
 802b1ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b1c0:	9206      	str	r2, [sp, #24]
 802b1c2:	2a2a      	cmp	r2, #42	@ 0x2a
 802b1c4:	d10f      	bne.n	802b1e6 <_vfprintf_r+0x2ee>
 802b1c6:	f856 2b04 	ldr.w	r2, [r6], #4
 802b1ca:	930c      	str	r3, [sp, #48]	@ 0x30
 802b1cc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802b1d0:	e7da      	b.n	802b188 <_vfprintf_r+0x290>
 802b1d2:	fb01 2909 	mla	r9, r1, r9, r2
 802b1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b1da:	9206      	str	r2, [sp, #24]
 802b1dc:	9a06      	ldr	r2, [sp, #24]
 802b1de:	3a30      	subs	r2, #48	@ 0x30
 802b1e0:	2a09      	cmp	r2, #9
 802b1e2:	d9f6      	bls.n	802b1d2 <_vfprintf_r+0x2da>
 802b1e4:	e72d      	b.n	802b042 <_vfprintf_r+0x14a>
 802b1e6:	f04f 0900 	mov.w	r9, #0
 802b1ea:	210a      	movs	r1, #10
 802b1ec:	e7f6      	b.n	802b1dc <_vfprintf_r+0x2e4>
 802b1ee:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802b1f2:	e7c9      	b.n	802b188 <_vfprintf_r+0x290>
 802b1f4:	2200      	movs	r2, #0
 802b1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 802b1fa:	210a      	movs	r1, #10
 802b1fc:	9a06      	ldr	r2, [sp, #24]
 802b1fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802b200:	3a30      	subs	r2, #48	@ 0x30
 802b202:	fb01 2200 	mla	r2, r1, r0, r2
 802b206:	920e      	str	r2, [sp, #56]	@ 0x38
 802b208:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b20c:	9206      	str	r2, [sp, #24]
 802b20e:	3a30      	subs	r2, #48	@ 0x30
 802b210:	2a09      	cmp	r2, #9
 802b212:	d9f3      	bls.n	802b1fc <_vfprintf_r+0x304>
 802b214:	e715      	b.n	802b042 <_vfprintf_r+0x14a>
 802b216:	f045 0508 	orr.w	r5, r5, #8
 802b21a:	e7b5      	b.n	802b188 <_vfprintf_r+0x290>
 802b21c:	f3af 8000 	nop.w
	...
 802b228:	0803d2bb 	.word	0x0803d2bb
 802b22c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b22e:	781b      	ldrb	r3, [r3, #0]
 802b230:	2b68      	cmp	r3, #104	@ 0x68
 802b232:	bf01      	itttt	eq
 802b234:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802b236:	3301      	addeq	r3, #1
 802b238:	930c      	streq	r3, [sp, #48]	@ 0x30
 802b23a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802b23e:	bf18      	it	ne
 802b240:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802b244:	e7a0      	b.n	802b188 <_vfprintf_r+0x290>
 802b246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b248:	781b      	ldrb	r3, [r3, #0]
 802b24a:	2b6c      	cmp	r3, #108	@ 0x6c
 802b24c:	d105      	bne.n	802b25a <_vfprintf_r+0x362>
 802b24e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b250:	3301      	adds	r3, #1
 802b252:	930c      	str	r3, [sp, #48]	@ 0x30
 802b254:	f045 0520 	orr.w	r5, r5, #32
 802b258:	e796      	b.n	802b188 <_vfprintf_r+0x290>
 802b25a:	f045 0510 	orr.w	r5, r5, #16
 802b25e:	e793      	b.n	802b188 <_vfprintf_r+0x290>
 802b260:	4632      	mov	r2, r6
 802b262:	f852 3b04 	ldr.w	r3, [r2], #4
 802b266:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802b26a:	2300      	movs	r3, #0
 802b26c:	9207      	str	r2, [sp, #28]
 802b26e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b272:	469a      	mov	sl, r3
 802b274:	f04f 0901 	mov.w	r9, #1
 802b278:	9310      	str	r3, [sp, #64]	@ 0x40
 802b27a:	461f      	mov	r7, r3
 802b27c:	9308      	str	r3, [sp, #32]
 802b27e:	461e      	mov	r6, r3
 802b280:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802b284:	e1da      	b.n	802b63c <_vfprintf_r+0x744>
 802b286:	f045 0510 	orr.w	r5, r5, #16
 802b28a:	06af      	lsls	r7, r5, #26
 802b28c:	d512      	bpl.n	802b2b4 <_vfprintf_r+0x3bc>
 802b28e:	3607      	adds	r6, #7
 802b290:	f026 0307 	bic.w	r3, r6, #7
 802b294:	461a      	mov	r2, r3
 802b296:	685f      	ldr	r7, [r3, #4]
 802b298:	f852 6b08 	ldr.w	r6, [r2], #8
 802b29c:	9207      	str	r2, [sp, #28]
 802b29e:	2f00      	cmp	r7, #0
 802b2a0:	da06      	bge.n	802b2b0 <_vfprintf_r+0x3b8>
 802b2a2:	4276      	negs	r6, r6
 802b2a4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b2a8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802b2ac:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b2b0:	2301      	movs	r3, #1
 802b2b2:	e384      	b.n	802b9be <_vfprintf_r+0xac6>
 802b2b4:	4633      	mov	r3, r6
 802b2b6:	06ee      	lsls	r6, r5, #27
 802b2b8:	f853 7b04 	ldr.w	r7, [r3], #4
 802b2bc:	9307      	str	r3, [sp, #28]
 802b2be:	d502      	bpl.n	802b2c6 <_vfprintf_r+0x3ce>
 802b2c0:	463e      	mov	r6, r7
 802b2c2:	17ff      	asrs	r7, r7, #31
 802b2c4:	e7eb      	b.n	802b29e <_vfprintf_r+0x3a6>
 802b2c6:	0668      	lsls	r0, r5, #25
 802b2c8:	d503      	bpl.n	802b2d2 <_vfprintf_r+0x3da>
 802b2ca:	b23e      	sxth	r6, r7
 802b2cc:	f347 37c0 	sbfx	r7, r7, #15, #1
 802b2d0:	e7e5      	b.n	802b29e <_vfprintf_r+0x3a6>
 802b2d2:	05a9      	lsls	r1, r5, #22
 802b2d4:	d5f4      	bpl.n	802b2c0 <_vfprintf_r+0x3c8>
 802b2d6:	b27e      	sxtb	r6, r7
 802b2d8:	f347 17c0 	sbfx	r7, r7, #7, #1
 802b2dc:	e7df      	b.n	802b29e <_vfprintf_r+0x3a6>
 802b2de:	3607      	adds	r6, #7
 802b2e0:	f026 0307 	bic.w	r3, r6, #7
 802b2e4:	ecb3 7b02 	vldmia	r3!, {d7}
 802b2e8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802b2ec:	9307      	str	r3, [sp, #28]
 802b2ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b2f0:	931a      	str	r3, [sp, #104]	@ 0x68
 802b2f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b2f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802b2f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802b2fa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802b2fe:	4b85      	ldr	r3, [pc, #532]	@ (802b514 <_vfprintf_r+0x61c>)
 802b300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b304:	f7e5 fc2a 	bl	8010b5c <__aeabi_dcmpun>
 802b308:	bb10      	cbnz	r0, 802b350 <_vfprintf_r+0x458>
 802b30a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802b30e:	4b81      	ldr	r3, [pc, #516]	@ (802b514 <_vfprintf_r+0x61c>)
 802b310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b314:	f7e5 fc04 	bl	8010b20 <__aeabi_dcmple>
 802b318:	b9d0      	cbnz	r0, 802b350 <_vfprintf_r+0x458>
 802b31a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b31e:	2200      	movs	r2, #0
 802b320:	2300      	movs	r3, #0
 802b322:	f7e5 fbf3 	bl	8010b0c <__aeabi_dcmplt>
 802b326:	b110      	cbz	r0, 802b32e <_vfprintf_r+0x436>
 802b328:	232d      	movs	r3, #45	@ 0x2d
 802b32a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b32e:	4a7a      	ldr	r2, [pc, #488]	@ (802b518 <_vfprintf_r+0x620>)
 802b330:	4b7a      	ldr	r3, [pc, #488]	@ (802b51c <_vfprintf_r+0x624>)
 802b332:	9906      	ldr	r1, [sp, #24]
 802b334:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802b338:	2947      	cmp	r1, #71	@ 0x47
 802b33a:	bfd4      	ite	le
 802b33c:	4690      	movle	r8, r2
 802b33e:	4698      	movgt	r8, r3
 802b340:	f04f 0a00 	mov.w	sl, #0
 802b344:	f04f 0903 	mov.w	r9, #3
 802b348:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802b34c:	f000 bff8 	b.w	802c340 <_vfprintf_r+0x1448>
 802b350:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802b354:	4610      	mov	r0, r2
 802b356:	4619      	mov	r1, r3
 802b358:	f7e5 fc00 	bl	8010b5c <__aeabi_dcmpun>
 802b35c:	4682      	mov	sl, r0
 802b35e:	b140      	cbz	r0, 802b372 <_vfprintf_r+0x47a>
 802b360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b362:	4a6f      	ldr	r2, [pc, #444]	@ (802b520 <_vfprintf_r+0x628>)
 802b364:	2b00      	cmp	r3, #0
 802b366:	bfbc      	itt	lt
 802b368:	232d      	movlt	r3, #45	@ 0x2d
 802b36a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802b36e:	4b6d      	ldr	r3, [pc, #436]	@ (802b524 <_vfprintf_r+0x62c>)
 802b370:	e7df      	b.n	802b332 <_vfprintf_r+0x43a>
 802b372:	9b06      	ldr	r3, [sp, #24]
 802b374:	2b61      	cmp	r3, #97	@ 0x61
 802b376:	d02e      	beq.n	802b3d6 <_vfprintf_r+0x4de>
 802b378:	2b41      	cmp	r3, #65	@ 0x41
 802b37a:	d12e      	bne.n	802b3da <_vfprintf_r+0x4e2>
 802b37c:	2358      	movs	r3, #88	@ 0x58
 802b37e:	2230      	movs	r2, #48	@ 0x30
 802b380:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802b384:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802b388:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802b38c:	f045 0502 	orr.w	r5, r5, #2
 802b390:	f340 80ae 	ble.w	802b4f0 <_vfprintf_r+0x5f8>
 802b394:	9803      	ldr	r0, [sp, #12]
 802b396:	f109 0101 	add.w	r1, r9, #1
 802b39a:	f005 f83f 	bl	803041c <_malloc_r>
 802b39e:	4680      	mov	r8, r0
 802b3a0:	2800      	cmp	r0, #0
 802b3a2:	f040 80aa 	bne.w	802b4fa <_vfprintf_r+0x602>
 802b3a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802b3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b3ae:	f8ab 300c 	strh.w	r3, [fp, #12]
 802b3b2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802b3b6:	07d9      	lsls	r1, r3, #31
 802b3b8:	d407      	bmi.n	802b3ca <_vfprintf_r+0x4d2>
 802b3ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802b3be:	059a      	lsls	r2, r3, #22
 802b3c0:	d403      	bmi.n	802b3ca <_vfprintf_r+0x4d2>
 802b3c2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802b3c6:	f004 f808 	bl	802f3da <__retarget_lock_release_recursive>
 802b3ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802b3ce:	065b      	lsls	r3, r3, #25
 802b3d0:	f57f add6 	bpl.w	802af80 <_vfprintf_r+0x88>
 802b3d4:	e5d1      	b.n	802af7a <_vfprintf_r+0x82>
 802b3d6:	2378      	movs	r3, #120	@ 0x78
 802b3d8:	e7d1      	b.n	802b37e <_vfprintf_r+0x486>
 802b3da:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b3de:	f000 808e 	beq.w	802b4fe <_vfprintf_r+0x606>
 802b3e2:	9b06      	ldr	r3, [sp, #24]
 802b3e4:	f023 0320 	bic.w	r3, r3, #32
 802b3e8:	2b47      	cmp	r3, #71	@ 0x47
 802b3ea:	d105      	bne.n	802b3f8 <_vfprintf_r+0x500>
 802b3ec:	f1b9 0f00 	cmp.w	r9, #0
 802b3f0:	d102      	bne.n	802b3f8 <_vfprintf_r+0x500>
 802b3f2:	46ca      	mov	sl, r9
 802b3f4:	f04f 0901 	mov.w	r9, #1
 802b3f8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802b3fc:	9311      	str	r3, [sp, #68]	@ 0x44
 802b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b400:	2b00      	cmp	r3, #0
 802b402:	da7f      	bge.n	802b504 <_vfprintf_r+0x60c>
 802b404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b406:	9314      	str	r3, [sp, #80]	@ 0x50
 802b408:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b40a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802b40e:	9315      	str	r3, [sp, #84]	@ 0x54
 802b410:	232d      	movs	r3, #45	@ 0x2d
 802b412:	931c      	str	r3, [sp, #112]	@ 0x70
 802b414:	9b06      	ldr	r3, [sp, #24]
 802b416:	f023 0320 	bic.w	r3, r3, #32
 802b41a:	2b41      	cmp	r3, #65	@ 0x41
 802b41c:	9308      	str	r3, [sp, #32]
 802b41e:	f040 81e7 	bne.w	802b7f0 <_vfprintf_r+0x8f8>
 802b422:	a820      	add	r0, sp, #128	@ 0x80
 802b424:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802b428:	f003 fffc 	bl	802f424 <frexp>
 802b42c:	2200      	movs	r2, #0
 802b42e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802b432:	ec51 0b10 	vmov	r0, r1, d0
 802b436:	f7e5 f8f7 	bl	8010628 <__aeabi_dmul>
 802b43a:	4602      	mov	r2, r0
 802b43c:	460b      	mov	r3, r1
 802b43e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802b442:	2200      	movs	r2, #0
 802b444:	2300      	movs	r3, #0
 802b446:	f7e5 fb57 	bl	8010af8 <__aeabi_dcmpeq>
 802b44a:	b108      	cbz	r0, 802b450 <_vfprintf_r+0x558>
 802b44c:	2301      	movs	r3, #1
 802b44e:	9320      	str	r3, [sp, #128]	@ 0x80
 802b450:	4a35      	ldr	r2, [pc, #212]	@ (802b528 <_vfprintf_r+0x630>)
 802b452:	4b36      	ldr	r3, [pc, #216]	@ (802b52c <_vfprintf_r+0x634>)
 802b454:	9906      	ldr	r1, [sp, #24]
 802b456:	2961      	cmp	r1, #97	@ 0x61
 802b458:	bf18      	it	ne
 802b45a:	461a      	movne	r2, r3
 802b45c:	9210      	str	r2, [sp, #64]	@ 0x40
 802b45e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802b462:	4646      	mov	r6, r8
 802b464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b468:	4b31      	ldr	r3, [pc, #196]	@ (802b530 <_vfprintf_r+0x638>)
 802b46a:	2200      	movs	r2, #0
 802b46c:	f7e5 f8dc 	bl	8010628 <__aeabi_dmul>
 802b470:	4602      	mov	r2, r0
 802b472:	460b      	mov	r3, r1
 802b474:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802b478:	f7e5 fb86 	bl	8010b88 <__aeabi_d2iz>
 802b47c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802b47e:	f7e5 f869 	bl	8010554 <__aeabi_i2d>
 802b482:	4602      	mov	r2, r0
 802b484:	460b      	mov	r3, r1
 802b486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b48a:	f7e4 ff15 	bl	80102b8 <__aeabi_dsub>
 802b48e:	4602      	mov	r2, r0
 802b490:	460b      	mov	r3, r1
 802b492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802b496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b498:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b49a:	5c9b      	ldrb	r3, [r3, r2]
 802b49c:	f806 3b01 	strb.w	r3, [r6], #1
 802b4a0:	1c7a      	adds	r2, r7, #1
 802b4a2:	d006      	beq.n	802b4b2 <_vfprintf_r+0x5ba>
 802b4a4:	1e7b      	subs	r3, r7, #1
 802b4a6:	931d      	str	r3, [sp, #116]	@ 0x74
 802b4a8:	2200      	movs	r2, #0
 802b4aa:	2300      	movs	r3, #0
 802b4ac:	f7e5 fb24 	bl	8010af8 <__aeabi_dcmpeq>
 802b4b0:	b370      	cbz	r0, 802b510 <_vfprintf_r+0x618>
 802b4b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b4b6:	4b1f      	ldr	r3, [pc, #124]	@ (802b534 <_vfprintf_r+0x63c>)
 802b4b8:	2200      	movs	r2, #0
 802b4ba:	f7e5 fb45 	bl	8010b48 <__aeabi_dcmpgt>
 802b4be:	2800      	cmp	r0, #0
 802b4c0:	d13a      	bne.n	802b538 <_vfprintf_r+0x640>
 802b4c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b4c6:	4b1b      	ldr	r3, [pc, #108]	@ (802b534 <_vfprintf_r+0x63c>)
 802b4c8:	2200      	movs	r2, #0
 802b4ca:	f7e5 fb15 	bl	8010af8 <__aeabi_dcmpeq>
 802b4ce:	b110      	cbz	r0, 802b4d6 <_vfprintf_r+0x5de>
 802b4d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b4d2:	07db      	lsls	r3, r3, #31
 802b4d4:	d430      	bmi.n	802b538 <_vfprintf_r+0x640>
 802b4d6:	4633      	mov	r3, r6
 802b4d8:	19f1      	adds	r1, r6, r7
 802b4da:	2030      	movs	r0, #48	@ 0x30
 802b4dc:	1aca      	subs	r2, r1, r3
 802b4de:	2a00      	cmp	r2, #0
 802b4e0:	f280 8183 	bge.w	802b7ea <_vfprintf_r+0x8f2>
 802b4e4:	1c7b      	adds	r3, r7, #1
 802b4e6:	3701      	adds	r7, #1
 802b4e8:	bfb8      	it	lt
 802b4ea:	2300      	movlt	r3, #0
 802b4ec:	441e      	add	r6, r3
 802b4ee:	e037      	b.n	802b560 <_vfprintf_r+0x668>
 802b4f0:	f04f 0a00 	mov.w	sl, #0
 802b4f4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802b4f8:	e77e      	b.n	802b3f8 <_vfprintf_r+0x500>
 802b4fa:	4682      	mov	sl, r0
 802b4fc:	e77c      	b.n	802b3f8 <_vfprintf_r+0x500>
 802b4fe:	f04f 0906 	mov.w	r9, #6
 802b502:	e779      	b.n	802b3f8 <_vfprintf_r+0x500>
 802b504:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802b508:	2300      	movs	r3, #0
 802b50a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802b50e:	e780      	b.n	802b412 <_vfprintf_r+0x51a>
 802b510:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802b512:	e7a7      	b.n	802b464 <_vfprintf_r+0x56c>
 802b514:	7fefffff 	.word	0x7fefffff
 802b518:	0803d2ab 	.word	0x0803d2ab
 802b51c:	0803d2af 	.word	0x0803d2af
 802b520:	0803d2b3 	.word	0x0803d2b3
 802b524:	0803d2b7 	.word	0x0803d2b7
 802b528:	0803d2bb 	.word	0x0803d2bb
 802b52c:	0803d2cc 	.word	0x0803d2cc
 802b530:	40300000 	.word	0x40300000
 802b534:	3fe00000 	.word	0x3fe00000
 802b538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b53a:	9624      	str	r6, [sp, #144]	@ 0x90
 802b53c:	7bd9      	ldrb	r1, [r3, #15]
 802b53e:	2030      	movs	r0, #48	@ 0x30
 802b540:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802b542:	1e53      	subs	r3, r2, #1
 802b544:	9324      	str	r3, [sp, #144]	@ 0x90
 802b546:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802b54a:	428b      	cmp	r3, r1
 802b54c:	f000 814a 	beq.w	802b7e4 <_vfprintf_r+0x8ec>
 802b550:	2b39      	cmp	r3, #57	@ 0x39
 802b552:	bf0b      	itete	eq
 802b554:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802b556:	3301      	addne	r3, #1
 802b558:	7a9b      	ldrbeq	r3, [r3, #10]
 802b55a:	b2db      	uxtbne	r3, r3
 802b55c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802b560:	eba6 0308 	sub.w	r3, r6, r8
 802b564:	9304      	str	r3, [sp, #16]
 802b566:	9b08      	ldr	r3, [sp, #32]
 802b568:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b56a:	2b47      	cmp	r3, #71	@ 0x47
 802b56c:	f040 8189 	bne.w	802b882 <_vfprintf_r+0x98a>
 802b570:	1cf1      	adds	r1, r6, #3
 802b572:	db02      	blt.n	802b57a <_vfprintf_r+0x682>
 802b574:	45b1      	cmp	r9, r6
 802b576:	f280 81a7 	bge.w	802b8c8 <_vfprintf_r+0x9d0>
 802b57a:	9b06      	ldr	r3, [sp, #24]
 802b57c:	3b02      	subs	r3, #2
 802b57e:	9306      	str	r3, [sp, #24]
 802b580:	9906      	ldr	r1, [sp, #24]
 802b582:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802b586:	f021 0120 	bic.w	r1, r1, #32
 802b58a:	2941      	cmp	r1, #65	@ 0x41
 802b58c:	bf08      	it	eq
 802b58e:	320f      	addeq	r2, #15
 802b590:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802b594:	bf06      	itte	eq
 802b596:	b2d2      	uxtbeq	r2, r2
 802b598:	2101      	moveq	r1, #1
 802b59a:	2100      	movne	r1, #0
 802b59c:	2b00      	cmp	r3, #0
 802b59e:	9320      	str	r3, [sp, #128]	@ 0x80
 802b5a0:	bfb8      	it	lt
 802b5a2:	f1c6 0301 	rsblt	r3, r6, #1
 802b5a6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802b5aa:	bfb4      	ite	lt
 802b5ac:	222d      	movlt	r2, #45	@ 0x2d
 802b5ae:	222b      	movge	r2, #43	@ 0x2b
 802b5b0:	2b09      	cmp	r3, #9
 802b5b2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802b5b6:	f340 817a 	ble.w	802b8ae <_vfprintf_r+0x9b6>
 802b5ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802b5be:	270a      	movs	r7, #10
 802b5c0:	4602      	mov	r2, r0
 802b5c2:	fbb3 f6f7 	udiv	r6, r3, r7
 802b5c6:	fb07 3116 	mls	r1, r7, r6, r3
 802b5ca:	3130      	adds	r1, #48	@ 0x30
 802b5cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 802b5d0:	4619      	mov	r1, r3
 802b5d2:	2963      	cmp	r1, #99	@ 0x63
 802b5d4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802b5d8:	4633      	mov	r3, r6
 802b5da:	dcf1      	bgt.n	802b5c0 <_vfprintf_r+0x6c8>
 802b5dc:	3330      	adds	r3, #48	@ 0x30
 802b5de:	1e91      	subs	r1, r2, #2
 802b5e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 802b5e4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802b5e8:	460b      	mov	r3, r1
 802b5ea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802b5ee:	4283      	cmp	r3, r0
 802b5f0:	f0c0 8158 	bcc.w	802b8a4 <_vfprintf_r+0x9ac>
 802b5f4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802b5f8:	1a9b      	subs	r3, r3, r2
 802b5fa:	4281      	cmp	r1, r0
 802b5fc:	bf88      	it	hi
 802b5fe:	2300      	movhi	r3, #0
 802b600:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802b604:	441a      	add	r2, r3
 802b606:	ab22      	add	r3, sp, #136	@ 0x88
 802b608:	1ad3      	subs	r3, r2, r3
 802b60a:	9a04      	ldr	r2, [sp, #16]
 802b60c:	9318      	str	r3, [sp, #96]	@ 0x60
 802b60e:	2a01      	cmp	r2, #1
 802b610:	eb03 0902 	add.w	r9, r3, r2
 802b614:	dc01      	bgt.n	802b61a <_vfprintf_r+0x722>
 802b616:	07ea      	lsls	r2, r5, #31
 802b618:	d501      	bpl.n	802b61e <_vfprintf_r+0x726>
 802b61a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b61c:	4499      	add	r9, r3
 802b61e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802b622:	2700      	movs	r7, #0
 802b624:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802b628:	9311      	str	r3, [sp, #68]	@ 0x44
 802b62a:	9708      	str	r7, [sp, #32]
 802b62c:	463e      	mov	r6, r7
 802b62e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b630:	2b00      	cmp	r3, #0
 802b632:	f040 8191 	bne.w	802b958 <_vfprintf_r+0xa60>
 802b636:	2300      	movs	r3, #0
 802b638:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802b63a:	9310      	str	r3, [sp, #64]	@ 0x40
 802b63c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b63e:	454b      	cmp	r3, r9
 802b640:	bfb8      	it	lt
 802b642:	464b      	movlt	r3, r9
 802b644:	9311      	str	r3, [sp, #68]	@ 0x44
 802b646:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802b64a:	b113      	cbz	r3, 802b652 <_vfprintf_r+0x75a>
 802b64c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802b64e:	3301      	adds	r3, #1
 802b650:	9311      	str	r3, [sp, #68]	@ 0x44
 802b652:	f015 0302 	ands.w	r3, r5, #2
 802b656:	931c      	str	r3, [sp, #112]	@ 0x70
 802b658:	bf1e      	ittt	ne
 802b65a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802b65c:	3302      	addne	r3, #2
 802b65e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802b660:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802b664:	931d      	str	r3, [sp, #116]	@ 0x74
 802b666:	d122      	bne.n	802b6ae <_vfprintf_r+0x7b6>
 802b668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b66a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b66c:	1a9b      	subs	r3, r3, r2
 802b66e:	2b00      	cmp	r3, #0
 802b670:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b672:	dd1c      	ble.n	802b6ae <_vfprintf_r+0x7b6>
 802b674:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802b676:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b67a:	2810      	cmp	r0, #16
 802b67c:	489f      	ldr	r0, [pc, #636]	@ (802b8fc <_vfprintf_r+0xa04>)
 802b67e:	6020      	str	r0, [r4, #0]
 802b680:	f102 0201 	add.w	r2, r2, #1
 802b684:	f104 0108 	add.w	r1, r4, #8
 802b688:	f300 8297 	bgt.w	802bbba <_vfprintf_r+0xcc2>
 802b68c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802b68e:	6060      	str	r0, [r4, #4]
 802b690:	4403      	add	r3, r0
 802b692:	2a07      	cmp	r2, #7
 802b694:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b698:	f340 82a4 	ble.w	802bbe4 <_vfprintf_r+0xcec>
 802b69c:	9803      	ldr	r0, [sp, #12]
 802b69e:	aa26      	add	r2, sp, #152	@ 0x98
 802b6a0:	4659      	mov	r1, fp
 802b6a2:	f000 fe95 	bl	802c3d0 <__sprint_r>
 802b6a6:	2800      	cmp	r0, #0
 802b6a8:	f040 85ed 	bne.w	802c286 <_vfprintf_r+0x138e>
 802b6ac:	ac29      	add	r4, sp, #164	@ 0xa4
 802b6ae:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802b6b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b6b4:	b16a      	cbz	r2, 802b6d2 <_vfprintf_r+0x7da>
 802b6b6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802b6ba:	6022      	str	r2, [r4, #0]
 802b6bc:	2201      	movs	r2, #1
 802b6be:	4413      	add	r3, r2
 802b6c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b6c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b6c4:	6062      	str	r2, [r4, #4]
 802b6c6:	4413      	add	r3, r2
 802b6c8:	2b07      	cmp	r3, #7
 802b6ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b6cc:	f300 828c 	bgt.w	802bbe8 <_vfprintf_r+0xcf0>
 802b6d0:	3408      	adds	r4, #8
 802b6d2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802b6d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b6d6:	b162      	cbz	r2, 802b6f2 <_vfprintf_r+0x7fa>
 802b6d8:	aa1f      	add	r2, sp, #124	@ 0x7c
 802b6da:	6022      	str	r2, [r4, #0]
 802b6dc:	2202      	movs	r2, #2
 802b6de:	4413      	add	r3, r2
 802b6e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b6e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b6e4:	6062      	str	r2, [r4, #4]
 802b6e6:	3301      	adds	r3, #1
 802b6e8:	2b07      	cmp	r3, #7
 802b6ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b6ec:	f300 8286 	bgt.w	802bbfc <_vfprintf_r+0xd04>
 802b6f0:	3408      	adds	r4, #8
 802b6f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b6f4:	2b80      	cmp	r3, #128	@ 0x80
 802b6f6:	d122      	bne.n	802b73e <_vfprintf_r+0x846>
 802b6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b6fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b6fc:	1a9b      	subs	r3, r3, r2
 802b6fe:	2b00      	cmp	r3, #0
 802b700:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b702:	dd1c      	ble.n	802b73e <_vfprintf_r+0x846>
 802b704:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802b706:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b70a:	2810      	cmp	r0, #16
 802b70c:	487c      	ldr	r0, [pc, #496]	@ (802b900 <_vfprintf_r+0xa08>)
 802b70e:	6020      	str	r0, [r4, #0]
 802b710:	f102 0201 	add.w	r2, r2, #1
 802b714:	f104 0108 	add.w	r1, r4, #8
 802b718:	f300 827a 	bgt.w	802bc10 <_vfprintf_r+0xd18>
 802b71c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802b71e:	6060      	str	r0, [r4, #4]
 802b720:	4403      	add	r3, r0
 802b722:	2a07      	cmp	r2, #7
 802b724:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b728:	f340 8287 	ble.w	802bc3a <_vfprintf_r+0xd42>
 802b72c:	9803      	ldr	r0, [sp, #12]
 802b72e:	aa26      	add	r2, sp, #152	@ 0x98
 802b730:	4659      	mov	r1, fp
 802b732:	f000 fe4d 	bl	802c3d0 <__sprint_r>
 802b736:	2800      	cmp	r0, #0
 802b738:	f040 85a5 	bne.w	802c286 <_vfprintf_r+0x138e>
 802b73c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b73e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b740:	eba3 0309 	sub.w	r3, r3, r9
 802b744:	2b00      	cmp	r3, #0
 802b746:	9310      	str	r3, [sp, #64]	@ 0x40
 802b748:	dd1c      	ble.n	802b784 <_vfprintf_r+0x88c>
 802b74a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802b74c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b750:	2810      	cmp	r0, #16
 802b752:	486b      	ldr	r0, [pc, #428]	@ (802b900 <_vfprintf_r+0xa08>)
 802b754:	6020      	str	r0, [r4, #0]
 802b756:	f102 0201 	add.w	r2, r2, #1
 802b75a:	f104 0108 	add.w	r1, r4, #8
 802b75e:	f300 826e 	bgt.w	802bc3e <_vfprintf_r+0xd46>
 802b762:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802b764:	6060      	str	r0, [r4, #4]
 802b766:	4403      	add	r3, r0
 802b768:	2a07      	cmp	r2, #7
 802b76a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b76e:	f340 827b 	ble.w	802bc68 <_vfprintf_r+0xd70>
 802b772:	9803      	ldr	r0, [sp, #12]
 802b774:	aa26      	add	r2, sp, #152	@ 0x98
 802b776:	4659      	mov	r1, fp
 802b778:	f000 fe2a 	bl	802c3d0 <__sprint_r>
 802b77c:	2800      	cmp	r0, #0
 802b77e:	f040 8582 	bne.w	802c286 <_vfprintf_r+0x138e>
 802b782:	ac29      	add	r4, sp, #164	@ 0xa4
 802b784:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b786:	9310      	str	r3, [sp, #64]	@ 0x40
 802b788:	05e8      	lsls	r0, r5, #23
 802b78a:	f100 8273 	bmi.w	802bc74 <_vfprintf_r+0xd7c>
 802b78e:	444b      	add	r3, r9
 802b790:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b792:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b794:	3301      	adds	r3, #1
 802b796:	2b07      	cmp	r3, #7
 802b798:	e9c4 8900 	strd	r8, r9, [r4]
 802b79c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b79e:	f300 82af 	bgt.w	802bd00 <_vfprintf_r+0xe08>
 802b7a2:	3408      	adds	r4, #8
 802b7a4:	0768      	lsls	r0, r5, #29
 802b7a6:	f100 8550 	bmi.w	802c24a <_vfprintf_r+0x1352>
 802b7aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802b7ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802b7b0:	428a      	cmp	r2, r1
 802b7b2:	bfac      	ite	ge
 802b7b4:	189b      	addge	r3, r3, r2
 802b7b6:	185b      	addlt	r3, r3, r1
 802b7b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b7ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b7bc:	b13b      	cbz	r3, 802b7ce <_vfprintf_r+0x8d6>
 802b7be:	9803      	ldr	r0, [sp, #12]
 802b7c0:	aa26      	add	r2, sp, #152	@ 0x98
 802b7c2:	4659      	mov	r1, fp
 802b7c4:	f000 fe04 	bl	802c3d0 <__sprint_r>
 802b7c8:	2800      	cmp	r0, #0
 802b7ca:	f040 855c 	bne.w	802c286 <_vfprintf_r+0x138e>
 802b7ce:	2300      	movs	r3, #0
 802b7d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b7d2:	f1ba 0f00 	cmp.w	sl, #0
 802b7d6:	f040 8572 	bne.w	802c2be <_vfprintf_r+0x13c6>
 802b7da:	9e07      	ldr	r6, [sp, #28]
 802b7dc:	ac29      	add	r4, sp, #164	@ 0xa4
 802b7de:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802b7e2:	e407      	b.n	802aff4 <_vfprintf_r+0xfc>
 802b7e4:	f802 0c01 	strb.w	r0, [r2, #-1]
 802b7e8:	e6aa      	b.n	802b540 <_vfprintf_r+0x648>
 802b7ea:	f803 0b01 	strb.w	r0, [r3], #1
 802b7ee:	e675      	b.n	802b4dc <_vfprintf_r+0x5e4>
 802b7f0:	9b08      	ldr	r3, [sp, #32]
 802b7f2:	2b46      	cmp	r3, #70	@ 0x46
 802b7f4:	d005      	beq.n	802b802 <_vfprintf_r+0x90a>
 802b7f6:	2b45      	cmp	r3, #69	@ 0x45
 802b7f8:	d11a      	bne.n	802b830 <_vfprintf_r+0x938>
 802b7fa:	f109 0601 	add.w	r6, r9, #1
 802b7fe:	2102      	movs	r1, #2
 802b800:	e001      	b.n	802b806 <_vfprintf_r+0x90e>
 802b802:	464e      	mov	r6, r9
 802b804:	2103      	movs	r1, #3
 802b806:	ab24      	add	r3, sp, #144	@ 0x90
 802b808:	9301      	str	r3, [sp, #4]
 802b80a:	ab21      	add	r3, sp, #132	@ 0x84
 802b80c:	9300      	str	r3, [sp, #0]
 802b80e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802b812:	ab20      	add	r3, sp, #128	@ 0x80
 802b814:	9803      	ldr	r0, [sp, #12]
 802b816:	4632      	mov	r2, r6
 802b818:	f003 fee6 	bl	802f5e8 <_dtoa_r>
 802b81c:	9b08      	ldr	r3, [sp, #32]
 802b81e:	2b47      	cmp	r3, #71	@ 0x47
 802b820:	4680      	mov	r8, r0
 802b822:	d119      	bne.n	802b858 <_vfprintf_r+0x960>
 802b824:	07e8      	lsls	r0, r5, #31
 802b826:	d405      	bmi.n	802b834 <_vfprintf_r+0x93c>
 802b828:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b82a:	eba3 0308 	sub.w	r3, r3, r8
 802b82e:	e699      	b.n	802b564 <_vfprintf_r+0x66c>
 802b830:	464e      	mov	r6, r9
 802b832:	e7e4      	b.n	802b7fe <_vfprintf_r+0x906>
 802b834:	eb08 0706 	add.w	r7, r8, r6
 802b838:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802b83c:	2200      	movs	r2, #0
 802b83e:	2300      	movs	r3, #0
 802b840:	f7e5 f95a 	bl	8010af8 <__aeabi_dcmpeq>
 802b844:	b100      	cbz	r0, 802b848 <_vfprintf_r+0x950>
 802b846:	9724      	str	r7, [sp, #144]	@ 0x90
 802b848:	2230      	movs	r2, #48	@ 0x30
 802b84a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b84c:	429f      	cmp	r7, r3
 802b84e:	d9eb      	bls.n	802b828 <_vfprintf_r+0x930>
 802b850:	1c59      	adds	r1, r3, #1
 802b852:	9124      	str	r1, [sp, #144]	@ 0x90
 802b854:	701a      	strb	r2, [r3, #0]
 802b856:	e7f8      	b.n	802b84a <_vfprintf_r+0x952>
 802b858:	9b08      	ldr	r3, [sp, #32]
 802b85a:	2b46      	cmp	r3, #70	@ 0x46
 802b85c:	eb00 0706 	add.w	r7, r0, r6
 802b860:	d1ea      	bne.n	802b838 <_vfprintf_r+0x940>
 802b862:	7803      	ldrb	r3, [r0, #0]
 802b864:	2b30      	cmp	r3, #48	@ 0x30
 802b866:	d109      	bne.n	802b87c <_vfprintf_r+0x984>
 802b868:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802b86c:	2200      	movs	r2, #0
 802b86e:	2300      	movs	r3, #0
 802b870:	f7e5 f942 	bl	8010af8 <__aeabi_dcmpeq>
 802b874:	b910      	cbnz	r0, 802b87c <_vfprintf_r+0x984>
 802b876:	f1c6 0601 	rsb	r6, r6, #1
 802b87a:	9620      	str	r6, [sp, #128]	@ 0x80
 802b87c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b87e:	441f      	add	r7, r3
 802b880:	e7da      	b.n	802b838 <_vfprintf_r+0x940>
 802b882:	9b08      	ldr	r3, [sp, #32]
 802b884:	2b46      	cmp	r3, #70	@ 0x46
 802b886:	f47f ae7b 	bne.w	802b580 <_vfprintf_r+0x688>
 802b88a:	f005 0301 	and.w	r3, r5, #1
 802b88e:	2e00      	cmp	r6, #0
 802b890:	ea43 0309 	orr.w	r3, r3, r9
 802b894:	dd25      	ble.n	802b8e2 <_vfprintf_r+0x9ea>
 802b896:	b37b      	cbz	r3, 802b8f8 <_vfprintf_r+0xa00>
 802b898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b89a:	18f3      	adds	r3, r6, r3
 802b89c:	4499      	add	r9, r3
 802b89e:	2366      	movs	r3, #102	@ 0x66
 802b8a0:	9306      	str	r3, [sp, #24]
 802b8a2:	e033      	b.n	802b90c <_vfprintf_r+0xa14>
 802b8a4:	f813 7b01 	ldrb.w	r7, [r3], #1
 802b8a8:	f806 7f01 	strb.w	r7, [r6, #1]!
 802b8ac:	e69f      	b.n	802b5ee <_vfprintf_r+0x6f6>
 802b8ae:	b941      	cbnz	r1, 802b8c2 <_vfprintf_r+0x9ca>
 802b8b0:	2230      	movs	r2, #48	@ 0x30
 802b8b2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802b8b6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802b8ba:	3330      	adds	r3, #48	@ 0x30
 802b8bc:	f802 3b01 	strb.w	r3, [r2], #1
 802b8c0:	e6a1      	b.n	802b606 <_vfprintf_r+0x70e>
 802b8c2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802b8c6:	e7f8      	b.n	802b8ba <_vfprintf_r+0x9c2>
 802b8c8:	9b04      	ldr	r3, [sp, #16]
 802b8ca:	42b3      	cmp	r3, r6
 802b8cc:	dd0d      	ble.n	802b8ea <_vfprintf_r+0x9f2>
 802b8ce:	9b04      	ldr	r3, [sp, #16]
 802b8d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b8d2:	2e00      	cmp	r6, #0
 802b8d4:	eb03 0902 	add.w	r9, r3, r2
 802b8d8:	dc0c      	bgt.n	802b8f4 <_vfprintf_r+0x9fc>
 802b8da:	f1c6 0301 	rsb	r3, r6, #1
 802b8de:	4499      	add	r9, r3
 802b8e0:	e008      	b.n	802b8f4 <_vfprintf_r+0x9fc>
 802b8e2:	b17b      	cbz	r3, 802b904 <_vfprintf_r+0xa0c>
 802b8e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b8e6:	3301      	adds	r3, #1
 802b8e8:	e7d8      	b.n	802b89c <_vfprintf_r+0x9a4>
 802b8ea:	07eb      	lsls	r3, r5, #31
 802b8ec:	d521      	bpl.n	802b932 <_vfprintf_r+0xa3a>
 802b8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b8f0:	eb06 0903 	add.w	r9, r6, r3
 802b8f4:	2367      	movs	r3, #103	@ 0x67
 802b8f6:	e7d3      	b.n	802b8a0 <_vfprintf_r+0x9a8>
 802b8f8:	46b1      	mov	r9, r6
 802b8fa:	e7d0      	b.n	802b89e <_vfprintf_r+0x9a6>
 802b8fc:	0803d2ef 	.word	0x0803d2ef
 802b900:	0803d2df 	.word	0x0803d2df
 802b904:	2366      	movs	r3, #102	@ 0x66
 802b906:	9306      	str	r3, [sp, #24]
 802b908:	f04f 0901 	mov.w	r9, #1
 802b90c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802b910:	9308      	str	r3, [sp, #32]
 802b912:	d01f      	beq.n	802b954 <_vfprintf_r+0xa5c>
 802b914:	2700      	movs	r7, #0
 802b916:	2e00      	cmp	r6, #0
 802b918:	9708      	str	r7, [sp, #32]
 802b91a:	f77f ae88 	ble.w	802b62e <_vfprintf_r+0x736>
 802b91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b920:	781b      	ldrb	r3, [r3, #0]
 802b922:	2bff      	cmp	r3, #255	@ 0xff
 802b924:	d107      	bne.n	802b936 <_vfprintf_r+0xa3e>
 802b926:	9b08      	ldr	r3, [sp, #32]
 802b928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b92a:	443b      	add	r3, r7
 802b92c:	fb02 9903 	mla	r9, r2, r3, r9
 802b930:	e67d      	b.n	802b62e <_vfprintf_r+0x736>
 802b932:	46b1      	mov	r9, r6
 802b934:	e7de      	b.n	802b8f4 <_vfprintf_r+0x9fc>
 802b936:	42b3      	cmp	r3, r6
 802b938:	daf5      	bge.n	802b926 <_vfprintf_r+0xa2e>
 802b93a:	1af6      	subs	r6, r6, r3
 802b93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b93e:	785b      	ldrb	r3, [r3, #1]
 802b940:	b133      	cbz	r3, 802b950 <_vfprintf_r+0xa58>
 802b942:	9b08      	ldr	r3, [sp, #32]
 802b944:	3301      	adds	r3, #1
 802b946:	9308      	str	r3, [sp, #32]
 802b948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b94a:	3301      	adds	r3, #1
 802b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 802b94e:	e7e6      	b.n	802b91e <_vfprintf_r+0xa26>
 802b950:	3701      	adds	r7, #1
 802b952:	e7e4      	b.n	802b91e <_vfprintf_r+0xa26>
 802b954:	9f08      	ldr	r7, [sp, #32]
 802b956:	e66a      	b.n	802b62e <_vfprintf_r+0x736>
 802b958:	232d      	movs	r3, #45	@ 0x2d
 802b95a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b95e:	e66a      	b.n	802b636 <_vfprintf_r+0x73e>
 802b960:	06af      	lsls	r7, r5, #26
 802b962:	d507      	bpl.n	802b974 <_vfprintf_r+0xa7c>
 802b964:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b966:	6833      	ldr	r3, [r6, #0]
 802b968:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b96a:	17d2      	asrs	r2, r2, #31
 802b96c:	e9c3 1200 	strd	r1, r2, [r3]
 802b970:	3604      	adds	r6, #4
 802b972:	e734      	b.n	802b7de <_vfprintf_r+0x8e6>
 802b974:	06e8      	lsls	r0, r5, #27
 802b976:	d503      	bpl.n	802b980 <_vfprintf_r+0xa88>
 802b978:	6833      	ldr	r3, [r6, #0]
 802b97a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b97c:	601a      	str	r2, [r3, #0]
 802b97e:	e7f7      	b.n	802b970 <_vfprintf_r+0xa78>
 802b980:	0669      	lsls	r1, r5, #25
 802b982:	d503      	bpl.n	802b98c <_vfprintf_r+0xa94>
 802b984:	6833      	ldr	r3, [r6, #0]
 802b986:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b988:	801a      	strh	r2, [r3, #0]
 802b98a:	e7f1      	b.n	802b970 <_vfprintf_r+0xa78>
 802b98c:	05aa      	lsls	r2, r5, #22
 802b98e:	d5f3      	bpl.n	802b978 <_vfprintf_r+0xa80>
 802b990:	6833      	ldr	r3, [r6, #0]
 802b992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b994:	701a      	strb	r2, [r3, #0]
 802b996:	e7eb      	b.n	802b970 <_vfprintf_r+0xa78>
 802b998:	f045 0510 	orr.w	r5, r5, #16
 802b99c:	f015 0320 	ands.w	r3, r5, #32
 802b9a0:	d020      	beq.n	802b9e4 <_vfprintf_r+0xaec>
 802b9a2:	3607      	adds	r6, #7
 802b9a4:	f026 0307 	bic.w	r3, r6, #7
 802b9a8:	461a      	mov	r2, r3
 802b9aa:	685f      	ldr	r7, [r3, #4]
 802b9ac:	f852 6b08 	ldr.w	r6, [r2], #8
 802b9b0:	9207      	str	r2, [sp, #28]
 802b9b2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802b9b6:	2300      	movs	r3, #0
 802b9b8:	2200      	movs	r2, #0
 802b9ba:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802b9be:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b9c2:	f000 8491 	beq.w	802c2e8 <_vfprintf_r+0x13f0>
 802b9c6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802b9ca:	9208      	str	r2, [sp, #32]
 802b9cc:	ea56 0207 	orrs.w	r2, r6, r7
 802b9d0:	f040 848f 	bne.w	802c2f2 <_vfprintf_r+0x13fa>
 802b9d4:	f1b9 0f00 	cmp.w	r9, #0
 802b9d8:	f000 80db 	beq.w	802bb92 <_vfprintf_r+0xc9a>
 802b9dc:	2b01      	cmp	r3, #1
 802b9de:	f040 848b 	bne.w	802c2f8 <_vfprintf_r+0x1400>
 802b9e2:	e083      	b.n	802baec <_vfprintf_r+0xbf4>
 802b9e4:	4632      	mov	r2, r6
 802b9e6:	f015 0710 	ands.w	r7, r5, #16
 802b9ea:	f852 6b04 	ldr.w	r6, [r2], #4
 802b9ee:	9207      	str	r2, [sp, #28]
 802b9f0:	d001      	beq.n	802b9f6 <_vfprintf_r+0xafe>
 802b9f2:	461f      	mov	r7, r3
 802b9f4:	e7dd      	b.n	802b9b2 <_vfprintf_r+0xaba>
 802b9f6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b9fa:	d001      	beq.n	802ba00 <_vfprintf_r+0xb08>
 802b9fc:	b2b6      	uxth	r6, r6
 802b9fe:	e7d8      	b.n	802b9b2 <_vfprintf_r+0xaba>
 802ba00:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ba04:	d0d5      	beq.n	802b9b2 <_vfprintf_r+0xaba>
 802ba06:	b2f6      	uxtb	r6, r6
 802ba08:	e7f3      	b.n	802b9f2 <_vfprintf_r+0xafa>
 802ba0a:	4633      	mov	r3, r6
 802ba0c:	2278      	movs	r2, #120	@ 0x78
 802ba0e:	f853 6b04 	ldr.w	r6, [r3], #4
 802ba12:	9307      	str	r3, [sp, #28]
 802ba14:	f647 0330 	movw	r3, #30768	@ 0x7830
 802ba18:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802ba1c:	4b93      	ldr	r3, [pc, #588]	@ (802bc6c <_vfprintf_r+0xd74>)
 802ba1e:	9319      	str	r3, [sp, #100]	@ 0x64
 802ba20:	2700      	movs	r7, #0
 802ba22:	f045 0502 	orr.w	r5, r5, #2
 802ba26:	2302      	movs	r3, #2
 802ba28:	9206      	str	r2, [sp, #24]
 802ba2a:	e7c5      	b.n	802b9b8 <_vfprintf_r+0xac0>
 802ba2c:	4633      	mov	r3, r6
 802ba2e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802ba32:	f853 8b04 	ldr.w	r8, [r3], #4
 802ba36:	9307      	str	r3, [sp, #28]
 802ba38:	f04f 0600 	mov.w	r6, #0
 802ba3c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802ba40:	d00f      	beq.n	802ba62 <_vfprintf_r+0xb6a>
 802ba42:	464a      	mov	r2, r9
 802ba44:	4631      	mov	r1, r6
 802ba46:	4640      	mov	r0, r8
 802ba48:	f7e4 fbda 	bl	8010200 <memchr>
 802ba4c:	4682      	mov	sl, r0
 802ba4e:	2800      	cmp	r0, #0
 802ba50:	f43f ac7a 	beq.w	802b348 <_vfprintf_r+0x450>
 802ba54:	eba0 0908 	sub.w	r9, r0, r8
 802ba58:	46b2      	mov	sl, r6
 802ba5a:	9610      	str	r6, [sp, #64]	@ 0x40
 802ba5c:	4637      	mov	r7, r6
 802ba5e:	9608      	str	r6, [sp, #32]
 802ba60:	e5ec      	b.n	802b63c <_vfprintf_r+0x744>
 802ba62:	4640      	mov	r0, r8
 802ba64:	f7e4 fc1c 	bl	80102a0 <strlen>
 802ba68:	46b2      	mov	sl, r6
 802ba6a:	4681      	mov	r9, r0
 802ba6c:	e46c      	b.n	802b348 <_vfprintf_r+0x450>
 802ba6e:	f045 0510 	orr.w	r5, r5, #16
 802ba72:	f015 0320 	ands.w	r3, r5, #32
 802ba76:	d009      	beq.n	802ba8c <_vfprintf_r+0xb94>
 802ba78:	3607      	adds	r6, #7
 802ba7a:	f026 0307 	bic.w	r3, r6, #7
 802ba7e:	461a      	mov	r2, r3
 802ba80:	685f      	ldr	r7, [r3, #4]
 802ba82:	f852 6b08 	ldr.w	r6, [r2], #8
 802ba86:	9207      	str	r2, [sp, #28]
 802ba88:	2301      	movs	r3, #1
 802ba8a:	e795      	b.n	802b9b8 <_vfprintf_r+0xac0>
 802ba8c:	4632      	mov	r2, r6
 802ba8e:	f015 0710 	ands.w	r7, r5, #16
 802ba92:	f852 6b04 	ldr.w	r6, [r2], #4
 802ba96:	9207      	str	r2, [sp, #28]
 802ba98:	d001      	beq.n	802ba9e <_vfprintf_r+0xba6>
 802ba9a:	461f      	mov	r7, r3
 802ba9c:	e7f4      	b.n	802ba88 <_vfprintf_r+0xb90>
 802ba9e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802baa2:	d001      	beq.n	802baa8 <_vfprintf_r+0xbb0>
 802baa4:	b2b6      	uxth	r6, r6
 802baa6:	e7ef      	b.n	802ba88 <_vfprintf_r+0xb90>
 802baa8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802baac:	d0ec      	beq.n	802ba88 <_vfprintf_r+0xb90>
 802baae:	b2f6      	uxtb	r6, r6
 802bab0:	e7f3      	b.n	802ba9a <_vfprintf_r+0xba2>
 802bab2:	4b6f      	ldr	r3, [pc, #444]	@ (802bc70 <_vfprintf_r+0xd78>)
 802bab4:	f7ff bb33 	b.w	802b11e <_vfprintf_r+0x226>
 802bab8:	4632      	mov	r2, r6
 802baba:	f015 0710 	ands.w	r7, r5, #16
 802babe:	f852 6b04 	ldr.w	r6, [r2], #4
 802bac2:	9207      	str	r2, [sp, #28]
 802bac4:	d002      	beq.n	802bacc <_vfprintf_r+0xbd4>
 802bac6:	461f      	mov	r7, r3
 802bac8:	f7ff bb36 	b.w	802b138 <_vfprintf_r+0x240>
 802bacc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802bad0:	d002      	beq.n	802bad8 <_vfprintf_r+0xbe0>
 802bad2:	b2b6      	uxth	r6, r6
 802bad4:	f7ff bb30 	b.w	802b138 <_vfprintf_r+0x240>
 802bad8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802badc:	f43f ab2c 	beq.w	802b138 <_vfprintf_r+0x240>
 802bae0:	b2f6      	uxtb	r6, r6
 802bae2:	e7f0      	b.n	802bac6 <_vfprintf_r+0xbce>
 802bae4:	2e0a      	cmp	r6, #10
 802bae6:	f177 0300 	sbcs.w	r3, r7, #0
 802baea:	d207      	bcs.n	802bafc <_vfprintf_r+0xc04>
 802baec:	3630      	adds	r6, #48	@ 0x30
 802baee:	b2f6      	uxtb	r6, r6
 802baf0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802baf4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802baf8:	f000 bc1a 	b.w	802c330 <_vfprintf_r+0x1438>
 802bafc:	2300      	movs	r3, #0
 802bafe:	9304      	str	r3, [sp, #16]
 802bb00:	9b08      	ldr	r3, [sp, #32]
 802bb02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802bb06:	ad52      	add	r5, sp, #328	@ 0x148
 802bb08:	9310      	str	r3, [sp, #64]	@ 0x40
 802bb0a:	220a      	movs	r2, #10
 802bb0c:	2300      	movs	r3, #0
 802bb0e:	4630      	mov	r0, r6
 802bb10:	4639      	mov	r1, r7
 802bb12:	f7e5 f921 	bl	8010d58 <__aeabi_uldivmod>
 802bb16:	9b04      	ldr	r3, [sp, #16]
 802bb18:	9011      	str	r0, [sp, #68]	@ 0x44
 802bb1a:	3301      	adds	r3, #1
 802bb1c:	9304      	str	r3, [sp, #16]
 802bb1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bb20:	3230      	adds	r2, #48	@ 0x30
 802bb22:	468a      	mov	sl, r1
 802bb24:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802bb28:	f805 2c01 	strb.w	r2, [r5, #-1]
 802bb2c:	b1d3      	cbz	r3, 802bb64 <_vfprintf_r+0xc6c>
 802bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb30:	9a04      	ldr	r2, [sp, #16]
 802bb32:	781b      	ldrb	r3, [r3, #0]
 802bb34:	429a      	cmp	r2, r3
 802bb36:	d115      	bne.n	802bb64 <_vfprintf_r+0xc6c>
 802bb38:	2aff      	cmp	r2, #255	@ 0xff
 802bb3a:	d013      	beq.n	802bb64 <_vfprintf_r+0xc6c>
 802bb3c:	2e0a      	cmp	r6, #10
 802bb3e:	f177 0300 	sbcs.w	r3, r7, #0
 802bb42:	d30f      	bcc.n	802bb64 <_vfprintf_r+0xc6c>
 802bb44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802bb46:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802bb48:	eba8 0803 	sub.w	r8, r8, r3
 802bb4c:	461a      	mov	r2, r3
 802bb4e:	4640      	mov	r0, r8
 802bb50:	f001 ff25 	bl	802d99e <strncpy>
 802bb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb56:	785b      	ldrb	r3, [r3, #1]
 802bb58:	b11b      	cbz	r3, 802bb62 <_vfprintf_r+0xc6a>
 802bb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb5c:	3301      	adds	r3, #1
 802bb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 802bb60:	2300      	movs	r3, #0
 802bb62:	9304      	str	r3, [sp, #16]
 802bb64:	2e0a      	cmp	r6, #10
 802bb66:	f177 0700 	sbcs.w	r7, r7, #0
 802bb6a:	f0c0 83e1 	bcc.w	802c330 <_vfprintf_r+0x1438>
 802bb6e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802bb70:	4657      	mov	r7, sl
 802bb72:	4645      	mov	r5, r8
 802bb74:	e7c9      	b.n	802bb0a <_vfprintf_r+0xc12>
 802bb76:	f006 030f 	and.w	r3, r6, #15
 802bb7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802bb7c:	0936      	lsrs	r6, r6, #4
 802bb7e:	5cd3      	ldrb	r3, [r2, r3]
 802bb80:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802bb84:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802bb88:	093f      	lsrs	r7, r7, #4
 802bb8a:	ea56 0307 	orrs.w	r3, r6, r7
 802bb8e:	d1f2      	bne.n	802bb76 <_vfprintf_r+0xc7e>
 802bb90:	e3ce      	b.n	802c330 <_vfprintf_r+0x1438>
 802bb92:	b91b      	cbnz	r3, 802bb9c <_vfprintf_r+0xca4>
 802bb94:	07ed      	lsls	r5, r5, #31
 802bb96:	d501      	bpl.n	802bb9c <_vfprintf_r+0xca4>
 802bb98:	2630      	movs	r6, #48	@ 0x30
 802bb9a:	e7a9      	b.n	802baf0 <_vfprintf_r+0xbf8>
 802bb9c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802bba0:	e3c6      	b.n	802c330 <_vfprintf_r+0x1438>
 802bba2:	9b06      	ldr	r3, [sp, #24]
 802bba4:	2b00      	cmp	r3, #0
 802bba6:	f000 8390 	beq.w	802c2ca <_vfprintf_r+0x13d2>
 802bbaa:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802bbae:	2300      	movs	r3, #0
 802bbb0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802bbb4:	9607      	str	r6, [sp, #28]
 802bbb6:	f7ff bb5c 	b.w	802b272 <_vfprintf_r+0x37a>
 802bbba:	2010      	movs	r0, #16
 802bbbc:	4403      	add	r3, r0
 802bbbe:	2a07      	cmp	r2, #7
 802bbc0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802bbc4:	6060      	str	r0, [r4, #4]
 802bbc6:	dd08      	ble.n	802bbda <_vfprintf_r+0xce2>
 802bbc8:	9803      	ldr	r0, [sp, #12]
 802bbca:	aa26      	add	r2, sp, #152	@ 0x98
 802bbcc:	4659      	mov	r1, fp
 802bbce:	f000 fbff 	bl	802c3d0 <__sprint_r>
 802bbd2:	2800      	cmp	r0, #0
 802bbd4:	f040 8357 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bbd8:	a929      	add	r1, sp, #164	@ 0xa4
 802bbda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802bbdc:	3b10      	subs	r3, #16
 802bbde:	9313      	str	r3, [sp, #76]	@ 0x4c
 802bbe0:	460c      	mov	r4, r1
 802bbe2:	e547      	b.n	802b674 <_vfprintf_r+0x77c>
 802bbe4:	460c      	mov	r4, r1
 802bbe6:	e562      	b.n	802b6ae <_vfprintf_r+0x7b6>
 802bbe8:	9803      	ldr	r0, [sp, #12]
 802bbea:	aa26      	add	r2, sp, #152	@ 0x98
 802bbec:	4659      	mov	r1, fp
 802bbee:	f000 fbef 	bl	802c3d0 <__sprint_r>
 802bbf2:	2800      	cmp	r0, #0
 802bbf4:	f040 8347 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bbf8:	ac29      	add	r4, sp, #164	@ 0xa4
 802bbfa:	e56a      	b.n	802b6d2 <_vfprintf_r+0x7da>
 802bbfc:	9803      	ldr	r0, [sp, #12]
 802bbfe:	aa26      	add	r2, sp, #152	@ 0x98
 802bc00:	4659      	mov	r1, fp
 802bc02:	f000 fbe5 	bl	802c3d0 <__sprint_r>
 802bc06:	2800      	cmp	r0, #0
 802bc08:	f040 833d 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bc0c:	ac29      	add	r4, sp, #164	@ 0xa4
 802bc0e:	e570      	b.n	802b6f2 <_vfprintf_r+0x7fa>
 802bc10:	2010      	movs	r0, #16
 802bc12:	4403      	add	r3, r0
 802bc14:	2a07      	cmp	r2, #7
 802bc16:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802bc1a:	6060      	str	r0, [r4, #4]
 802bc1c:	dd08      	ble.n	802bc30 <_vfprintf_r+0xd38>
 802bc1e:	9803      	ldr	r0, [sp, #12]
 802bc20:	aa26      	add	r2, sp, #152	@ 0x98
 802bc22:	4659      	mov	r1, fp
 802bc24:	f000 fbd4 	bl	802c3d0 <__sprint_r>
 802bc28:	2800      	cmp	r0, #0
 802bc2a:	f040 832c 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bc2e:	a929      	add	r1, sp, #164	@ 0xa4
 802bc30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802bc32:	3b10      	subs	r3, #16
 802bc34:	9313      	str	r3, [sp, #76]	@ 0x4c
 802bc36:	460c      	mov	r4, r1
 802bc38:	e564      	b.n	802b704 <_vfprintf_r+0x80c>
 802bc3a:	460c      	mov	r4, r1
 802bc3c:	e57f      	b.n	802b73e <_vfprintf_r+0x846>
 802bc3e:	2010      	movs	r0, #16
 802bc40:	4403      	add	r3, r0
 802bc42:	2a07      	cmp	r2, #7
 802bc44:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802bc48:	6060      	str	r0, [r4, #4]
 802bc4a:	dd08      	ble.n	802bc5e <_vfprintf_r+0xd66>
 802bc4c:	9803      	ldr	r0, [sp, #12]
 802bc4e:	aa26      	add	r2, sp, #152	@ 0x98
 802bc50:	4659      	mov	r1, fp
 802bc52:	f000 fbbd 	bl	802c3d0 <__sprint_r>
 802bc56:	2800      	cmp	r0, #0
 802bc58:	f040 8315 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bc5c:	a929      	add	r1, sp, #164	@ 0xa4
 802bc5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc60:	3b10      	subs	r3, #16
 802bc62:	9310      	str	r3, [sp, #64]	@ 0x40
 802bc64:	460c      	mov	r4, r1
 802bc66:	e570      	b.n	802b74a <_vfprintf_r+0x852>
 802bc68:	460c      	mov	r4, r1
 802bc6a:	e58b      	b.n	802b784 <_vfprintf_r+0x88c>
 802bc6c:	0803d2bb 	.word	0x0803d2bb
 802bc70:	0803d2cc 	.word	0x0803d2cc
 802bc74:	9b06      	ldr	r3, [sp, #24]
 802bc76:	2b65      	cmp	r3, #101	@ 0x65
 802bc78:	f340 8245 	ble.w	802c106 <_vfprintf_r+0x120e>
 802bc7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802bc80:	2200      	movs	r2, #0
 802bc82:	2300      	movs	r3, #0
 802bc84:	f7e4 ff38 	bl	8010af8 <__aeabi_dcmpeq>
 802bc88:	2800      	cmp	r0, #0
 802bc8a:	d06a      	beq.n	802bd62 <_vfprintf_r+0xe6a>
 802bc8c:	4b73      	ldr	r3, [pc, #460]	@ (802be5c <_vfprintf_r+0xf64>)
 802bc8e:	6023      	str	r3, [r4, #0]
 802bc90:	2301      	movs	r3, #1
 802bc92:	6063      	str	r3, [r4, #4]
 802bc94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc96:	3301      	adds	r3, #1
 802bc98:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bc9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bc9c:	3301      	adds	r3, #1
 802bc9e:	2b07      	cmp	r3, #7
 802bca0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bca2:	dc37      	bgt.n	802bd14 <_vfprintf_r+0xe1c>
 802bca4:	3408      	adds	r4, #8
 802bca6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802bca8:	9a04      	ldr	r2, [sp, #16]
 802bcaa:	4293      	cmp	r3, r2
 802bcac:	db02      	blt.n	802bcb4 <_vfprintf_r+0xdbc>
 802bcae:	07e9      	lsls	r1, r5, #31
 802bcb0:	f57f ad78 	bpl.w	802b7a4 <_vfprintf_r+0x8ac>
 802bcb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802bcb6:	6023      	str	r3, [r4, #0]
 802bcb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802bcba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802bcbc:	6063      	str	r3, [r4, #4]
 802bcbe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802bcc0:	4413      	add	r3, r2
 802bcc2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bcc4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bcc6:	3301      	adds	r3, #1
 802bcc8:	2b07      	cmp	r3, #7
 802bcca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bccc:	dc2c      	bgt.n	802bd28 <_vfprintf_r+0xe30>
 802bcce:	3408      	adds	r4, #8
 802bcd0:	9b04      	ldr	r3, [sp, #16]
 802bcd2:	1e5e      	subs	r6, r3, #1
 802bcd4:	2e00      	cmp	r6, #0
 802bcd6:	f77f ad65 	ble.w	802b7a4 <_vfprintf_r+0x8ac>
 802bcda:	4f61      	ldr	r7, [pc, #388]	@ (802be60 <_vfprintf_r+0xf68>)
 802bcdc:	f04f 0810 	mov.w	r8, #16
 802bce0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802bce4:	2e10      	cmp	r6, #16
 802bce6:	f103 0301 	add.w	r3, r3, #1
 802bcea:	f104 0108 	add.w	r1, r4, #8
 802bcee:	6027      	str	r7, [r4, #0]
 802bcf0:	dc24      	bgt.n	802bd3c <_vfprintf_r+0xe44>
 802bcf2:	6066      	str	r6, [r4, #4]
 802bcf4:	2b07      	cmp	r3, #7
 802bcf6:	4416      	add	r6, r2
 802bcf8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802bcfc:	f340 82a2 	ble.w	802c244 <_vfprintf_r+0x134c>
 802bd00:	9803      	ldr	r0, [sp, #12]
 802bd02:	aa26      	add	r2, sp, #152	@ 0x98
 802bd04:	4659      	mov	r1, fp
 802bd06:	f000 fb63 	bl	802c3d0 <__sprint_r>
 802bd0a:	2800      	cmp	r0, #0
 802bd0c:	f040 82bb 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bd10:	ac29      	add	r4, sp, #164	@ 0xa4
 802bd12:	e547      	b.n	802b7a4 <_vfprintf_r+0x8ac>
 802bd14:	9803      	ldr	r0, [sp, #12]
 802bd16:	aa26      	add	r2, sp, #152	@ 0x98
 802bd18:	4659      	mov	r1, fp
 802bd1a:	f000 fb59 	bl	802c3d0 <__sprint_r>
 802bd1e:	2800      	cmp	r0, #0
 802bd20:	f040 82b1 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bd24:	ac29      	add	r4, sp, #164	@ 0xa4
 802bd26:	e7be      	b.n	802bca6 <_vfprintf_r+0xdae>
 802bd28:	9803      	ldr	r0, [sp, #12]
 802bd2a:	aa26      	add	r2, sp, #152	@ 0x98
 802bd2c:	4659      	mov	r1, fp
 802bd2e:	f000 fb4f 	bl	802c3d0 <__sprint_r>
 802bd32:	2800      	cmp	r0, #0
 802bd34:	f040 82a7 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bd38:	ac29      	add	r4, sp, #164	@ 0xa4
 802bd3a:	e7c9      	b.n	802bcd0 <_vfprintf_r+0xdd8>
 802bd3c:	3210      	adds	r2, #16
 802bd3e:	2b07      	cmp	r3, #7
 802bd40:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802bd44:	f8c4 8004 	str.w	r8, [r4, #4]
 802bd48:	dd08      	ble.n	802bd5c <_vfprintf_r+0xe64>
 802bd4a:	9803      	ldr	r0, [sp, #12]
 802bd4c:	aa26      	add	r2, sp, #152	@ 0x98
 802bd4e:	4659      	mov	r1, fp
 802bd50:	f000 fb3e 	bl	802c3d0 <__sprint_r>
 802bd54:	2800      	cmp	r0, #0
 802bd56:	f040 8296 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bd5a:	a929      	add	r1, sp, #164	@ 0xa4
 802bd5c:	3e10      	subs	r6, #16
 802bd5e:	460c      	mov	r4, r1
 802bd60:	e7be      	b.n	802bce0 <_vfprintf_r+0xde8>
 802bd62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	dc7d      	bgt.n	802be64 <_vfprintf_r+0xf6c>
 802bd68:	4b3c      	ldr	r3, [pc, #240]	@ (802be5c <_vfprintf_r+0xf64>)
 802bd6a:	6023      	str	r3, [r4, #0]
 802bd6c:	2301      	movs	r3, #1
 802bd6e:	6063      	str	r3, [r4, #4]
 802bd70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bd72:	3301      	adds	r3, #1
 802bd74:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bd76:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bd78:	3301      	adds	r3, #1
 802bd7a:	2b07      	cmp	r3, #7
 802bd7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bd7e:	dc46      	bgt.n	802be0e <_vfprintf_r+0xf16>
 802bd80:	3408      	adds	r4, #8
 802bd82:	9904      	ldr	r1, [sp, #16]
 802bd84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802bd86:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802bd88:	430b      	orrs	r3, r1
 802bd8a:	f005 0101 	and.w	r1, r5, #1
 802bd8e:	430b      	orrs	r3, r1
 802bd90:	f43f ad08 	beq.w	802b7a4 <_vfprintf_r+0x8ac>
 802bd94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802bd96:	6023      	str	r3, [r4, #0]
 802bd98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802bd9a:	6063      	str	r3, [r4, #4]
 802bd9c:	441a      	add	r2, r3
 802bd9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bda0:	9228      	str	r2, [sp, #160]	@ 0xa0
 802bda2:	3301      	adds	r3, #1
 802bda4:	2b07      	cmp	r3, #7
 802bda6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bda8:	dc3b      	bgt.n	802be22 <_vfprintf_r+0xf2a>
 802bdaa:	f104 0308 	add.w	r3, r4, #8
 802bdae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802bdb0:	2e00      	cmp	r6, #0
 802bdb2:	da1b      	bge.n	802bdec <_vfprintf_r+0xef4>
 802bdb4:	4f2a      	ldr	r7, [pc, #168]	@ (802be60 <_vfprintf_r+0xf68>)
 802bdb6:	4276      	negs	r6, r6
 802bdb8:	461a      	mov	r2, r3
 802bdba:	2410      	movs	r4, #16
 802bdbc:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802bdc0:	2e10      	cmp	r6, #16
 802bdc2:	f101 0101 	add.w	r1, r1, #1
 802bdc6:	f103 0308 	add.w	r3, r3, #8
 802bdca:	6017      	str	r7, [r2, #0]
 802bdcc:	dc33      	bgt.n	802be36 <_vfprintf_r+0xf3e>
 802bdce:	6056      	str	r6, [r2, #4]
 802bdd0:	2907      	cmp	r1, #7
 802bdd2:	4406      	add	r6, r0
 802bdd4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802bdd8:	dd08      	ble.n	802bdec <_vfprintf_r+0xef4>
 802bdda:	9803      	ldr	r0, [sp, #12]
 802bddc:	aa26      	add	r2, sp, #152	@ 0x98
 802bdde:	4659      	mov	r1, fp
 802bde0:	f000 faf6 	bl	802c3d0 <__sprint_r>
 802bde4:	2800      	cmp	r0, #0
 802bde6:	f040 824e 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bdea:	ab29      	add	r3, sp, #164	@ 0xa4
 802bdec:	9a04      	ldr	r2, [sp, #16]
 802bdee:	9904      	ldr	r1, [sp, #16]
 802bdf0:	605a      	str	r2, [r3, #4]
 802bdf2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802bdf4:	f8c3 8000 	str.w	r8, [r3]
 802bdf8:	440a      	add	r2, r1
 802bdfa:	9228      	str	r2, [sp, #160]	@ 0xa0
 802bdfc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802bdfe:	3201      	adds	r2, #1
 802be00:	2a07      	cmp	r2, #7
 802be02:	9227      	str	r2, [sp, #156]	@ 0x9c
 802be04:	f73f af7c 	bgt.w	802bd00 <_vfprintf_r+0xe08>
 802be08:	f103 0408 	add.w	r4, r3, #8
 802be0c:	e4ca      	b.n	802b7a4 <_vfprintf_r+0x8ac>
 802be0e:	9803      	ldr	r0, [sp, #12]
 802be10:	aa26      	add	r2, sp, #152	@ 0x98
 802be12:	4659      	mov	r1, fp
 802be14:	f000 fadc 	bl	802c3d0 <__sprint_r>
 802be18:	2800      	cmp	r0, #0
 802be1a:	f040 8234 	bne.w	802c286 <_vfprintf_r+0x138e>
 802be1e:	ac29      	add	r4, sp, #164	@ 0xa4
 802be20:	e7af      	b.n	802bd82 <_vfprintf_r+0xe8a>
 802be22:	9803      	ldr	r0, [sp, #12]
 802be24:	aa26      	add	r2, sp, #152	@ 0x98
 802be26:	4659      	mov	r1, fp
 802be28:	f000 fad2 	bl	802c3d0 <__sprint_r>
 802be2c:	2800      	cmp	r0, #0
 802be2e:	f040 822a 	bne.w	802c286 <_vfprintf_r+0x138e>
 802be32:	ab29      	add	r3, sp, #164	@ 0xa4
 802be34:	e7bb      	b.n	802bdae <_vfprintf_r+0xeb6>
 802be36:	3010      	adds	r0, #16
 802be38:	2907      	cmp	r1, #7
 802be3a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802be3e:	6054      	str	r4, [r2, #4]
 802be40:	dd08      	ble.n	802be54 <_vfprintf_r+0xf5c>
 802be42:	9803      	ldr	r0, [sp, #12]
 802be44:	aa26      	add	r2, sp, #152	@ 0x98
 802be46:	4659      	mov	r1, fp
 802be48:	f000 fac2 	bl	802c3d0 <__sprint_r>
 802be4c:	2800      	cmp	r0, #0
 802be4e:	f040 821a 	bne.w	802c286 <_vfprintf_r+0x138e>
 802be52:	ab29      	add	r3, sp, #164	@ 0xa4
 802be54:	3e10      	subs	r6, #16
 802be56:	461a      	mov	r2, r3
 802be58:	e7b0      	b.n	802bdbc <_vfprintf_r+0xec4>
 802be5a:	bf00      	nop
 802be5c:	0803d2dd 	.word	0x0803d2dd
 802be60:	0803d2df 	.word	0x0803d2df
 802be64:	9b04      	ldr	r3, [sp, #16]
 802be66:	4443      	add	r3, r8
 802be68:	9313      	str	r3, [sp, #76]	@ 0x4c
 802be6a:	9b04      	ldr	r3, [sp, #16]
 802be6c:	42b3      	cmp	r3, r6
 802be6e:	bfa8      	it	ge
 802be70:	4633      	movge	r3, r6
 802be72:	2b00      	cmp	r3, #0
 802be74:	4699      	mov	r9, r3
 802be76:	dd0b      	ble.n	802be90 <_vfprintf_r+0xf98>
 802be78:	e9c4 8300 	strd	r8, r3, [r4]
 802be7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802be7e:	444b      	add	r3, r9
 802be80:	9328      	str	r3, [sp, #160]	@ 0xa0
 802be82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802be84:	3301      	adds	r3, #1
 802be86:	2b07      	cmp	r3, #7
 802be88:	9327      	str	r3, [sp, #156]	@ 0x9c
 802be8a:	f300 8089 	bgt.w	802bfa0 <_vfprintf_r+0x10a8>
 802be8e:	3408      	adds	r4, #8
 802be90:	f1b9 0f00 	cmp.w	r9, #0
 802be94:	bfac      	ite	ge
 802be96:	eba6 0309 	subge.w	r3, r6, r9
 802be9a:	4633      	movlt	r3, r6
 802be9c:	2b00      	cmp	r3, #0
 802be9e:	9306      	str	r3, [sp, #24]
 802bea0:	dd1c      	ble.n	802bedc <_vfprintf_r+0xfe4>
 802bea2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802c208 <_vfprintf_r+0x1310>
 802bea6:	9806      	ldr	r0, [sp, #24]
 802bea8:	f8c4 9000 	str.w	r9, [r4]
 802beac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802beb0:	2810      	cmp	r0, #16
 802beb2:	f102 0201 	add.w	r2, r2, #1
 802beb6:	f104 0108 	add.w	r1, r4, #8
 802beba:	dc7b      	bgt.n	802bfb4 <_vfprintf_r+0x10bc>
 802bebc:	4403      	add	r3, r0
 802bebe:	2a07      	cmp	r2, #7
 802bec0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802bec4:	6060      	str	r0, [r4, #4]
 802bec6:	f340 808a 	ble.w	802bfde <_vfprintf_r+0x10e6>
 802beca:	9803      	ldr	r0, [sp, #12]
 802becc:	aa26      	add	r2, sp, #152	@ 0x98
 802bece:	4659      	mov	r1, fp
 802bed0:	f000 fa7e 	bl	802c3d0 <__sprint_r>
 802bed4:	2800      	cmp	r0, #0
 802bed6:	f040 81d6 	bne.w	802c286 <_vfprintf_r+0x138e>
 802beda:	ac29      	add	r4, sp, #164	@ 0xa4
 802bedc:	056a      	lsls	r2, r5, #21
 802bede:	44b0      	add	r8, r6
 802bee0:	d508      	bpl.n	802bef4 <_vfprintf_r+0xffc>
 802bee2:	9b08      	ldr	r3, [sp, #32]
 802bee4:	2b00      	cmp	r3, #0
 802bee6:	d17c      	bne.n	802bfe2 <_vfprintf_r+0x10ea>
 802bee8:	2f00      	cmp	r7, #0
 802beea:	d17c      	bne.n	802bfe6 <_vfprintf_r+0x10ee>
 802beec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802beee:	4598      	cmp	r8, r3
 802bef0:	bf28      	it	cs
 802bef2:	4698      	movcs	r8, r3
 802bef4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802bef6:	9a04      	ldr	r2, [sp, #16]
 802bef8:	4293      	cmp	r3, r2
 802befa:	db01      	blt.n	802bf00 <_vfprintf_r+0x1008>
 802befc:	07eb      	lsls	r3, r5, #31
 802befe:	d50e      	bpl.n	802bf1e <_vfprintf_r+0x1026>
 802bf00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802bf02:	6023      	str	r3, [r4, #0]
 802bf04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802bf06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802bf08:	6063      	str	r3, [r4, #4]
 802bf0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802bf0c:	4413      	add	r3, r2
 802bf0e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bf10:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bf12:	3301      	adds	r3, #1
 802bf14:	2b07      	cmp	r3, #7
 802bf16:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bf18:	f300 80e1 	bgt.w	802c0de <_vfprintf_r+0x11e6>
 802bf1c:	3408      	adds	r4, #8
 802bf1e:	9b04      	ldr	r3, [sp, #16]
 802bf20:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802bf22:	1bdf      	subs	r7, r3, r7
 802bf24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802bf26:	eba3 0308 	sub.w	r3, r3, r8
 802bf2a:	429f      	cmp	r7, r3
 802bf2c:	bfa8      	it	ge
 802bf2e:	461f      	movge	r7, r3
 802bf30:	2f00      	cmp	r7, #0
 802bf32:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802bf34:	dd0a      	ble.n	802bf4c <_vfprintf_r+0x1054>
 802bf36:	443b      	add	r3, r7
 802bf38:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bf3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bf3c:	3301      	adds	r3, #1
 802bf3e:	2b07      	cmp	r3, #7
 802bf40:	e9c4 8700 	strd	r8, r7, [r4]
 802bf44:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bf46:	f300 80d4 	bgt.w	802c0f2 <_vfprintf_r+0x11fa>
 802bf4a:	3408      	adds	r4, #8
 802bf4c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802bf4e:	9b04      	ldr	r3, [sp, #16]
 802bf50:	2f00      	cmp	r7, #0
 802bf52:	eba3 0606 	sub.w	r6, r3, r6
 802bf56:	bfa8      	it	ge
 802bf58:	1bf6      	subge	r6, r6, r7
 802bf5a:	2e00      	cmp	r6, #0
 802bf5c:	f77f ac22 	ble.w	802b7a4 <_vfprintf_r+0x8ac>
 802bf60:	4fa9      	ldr	r7, [pc, #676]	@ (802c208 <_vfprintf_r+0x1310>)
 802bf62:	f04f 0810 	mov.w	r8, #16
 802bf66:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802bf6a:	2e10      	cmp	r6, #16
 802bf6c:	f103 0301 	add.w	r3, r3, #1
 802bf70:	f104 0108 	add.w	r1, r4, #8
 802bf74:	6027      	str	r7, [r4, #0]
 802bf76:	f77f aebc 	ble.w	802bcf2 <_vfprintf_r+0xdfa>
 802bf7a:	3210      	adds	r2, #16
 802bf7c:	2b07      	cmp	r3, #7
 802bf7e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802bf82:	f8c4 8004 	str.w	r8, [r4, #4]
 802bf86:	dd08      	ble.n	802bf9a <_vfprintf_r+0x10a2>
 802bf88:	9803      	ldr	r0, [sp, #12]
 802bf8a:	aa26      	add	r2, sp, #152	@ 0x98
 802bf8c:	4659      	mov	r1, fp
 802bf8e:	f000 fa1f 	bl	802c3d0 <__sprint_r>
 802bf92:	2800      	cmp	r0, #0
 802bf94:	f040 8177 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bf98:	a929      	add	r1, sp, #164	@ 0xa4
 802bf9a:	3e10      	subs	r6, #16
 802bf9c:	460c      	mov	r4, r1
 802bf9e:	e7e2      	b.n	802bf66 <_vfprintf_r+0x106e>
 802bfa0:	9803      	ldr	r0, [sp, #12]
 802bfa2:	aa26      	add	r2, sp, #152	@ 0x98
 802bfa4:	4659      	mov	r1, fp
 802bfa6:	f000 fa13 	bl	802c3d0 <__sprint_r>
 802bfaa:	2800      	cmp	r0, #0
 802bfac:	f040 816b 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bfb0:	ac29      	add	r4, sp, #164	@ 0xa4
 802bfb2:	e76d      	b.n	802be90 <_vfprintf_r+0xf98>
 802bfb4:	2010      	movs	r0, #16
 802bfb6:	4403      	add	r3, r0
 802bfb8:	2a07      	cmp	r2, #7
 802bfba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802bfbe:	6060      	str	r0, [r4, #4]
 802bfc0:	dd08      	ble.n	802bfd4 <_vfprintf_r+0x10dc>
 802bfc2:	9803      	ldr	r0, [sp, #12]
 802bfc4:	aa26      	add	r2, sp, #152	@ 0x98
 802bfc6:	4659      	mov	r1, fp
 802bfc8:	f000 fa02 	bl	802c3d0 <__sprint_r>
 802bfcc:	2800      	cmp	r0, #0
 802bfce:	f040 815a 	bne.w	802c286 <_vfprintf_r+0x138e>
 802bfd2:	a929      	add	r1, sp, #164	@ 0xa4
 802bfd4:	9b06      	ldr	r3, [sp, #24]
 802bfd6:	3b10      	subs	r3, #16
 802bfd8:	9306      	str	r3, [sp, #24]
 802bfda:	460c      	mov	r4, r1
 802bfdc:	e763      	b.n	802bea6 <_vfprintf_r+0xfae>
 802bfde:	460c      	mov	r4, r1
 802bfe0:	e77c      	b.n	802bedc <_vfprintf_r+0xfe4>
 802bfe2:	2f00      	cmp	r7, #0
 802bfe4:	d04b      	beq.n	802c07e <_vfprintf_r+0x1186>
 802bfe6:	3f01      	subs	r7, #1
 802bfe8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802bfea:	6023      	str	r3, [r4, #0]
 802bfec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802bfee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802bff0:	6063      	str	r3, [r4, #4]
 802bff2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802bff4:	4413      	add	r3, r2
 802bff6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802bff8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802bffa:	3301      	adds	r3, #1
 802bffc:	2b07      	cmp	r3, #7
 802bffe:	9327      	str	r3, [sp, #156]	@ 0x9c
 802c000:	dc44      	bgt.n	802c08c <_vfprintf_r+0x1194>
 802c002:	3408      	adds	r4, #8
 802c004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c006:	f893 9000 	ldrb.w	r9, [r3]
 802c00a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802c00c:	eba3 0308 	sub.w	r3, r3, r8
 802c010:	4599      	cmp	r9, r3
 802c012:	bfa8      	it	ge
 802c014:	4699      	movge	r9, r3
 802c016:	f1b9 0f00 	cmp.w	r9, #0
 802c01a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802c01c:	dd09      	ble.n	802c032 <_vfprintf_r+0x113a>
 802c01e:	444b      	add	r3, r9
 802c020:	9328      	str	r3, [sp, #160]	@ 0xa0
 802c022:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802c024:	3301      	adds	r3, #1
 802c026:	2b07      	cmp	r3, #7
 802c028:	e9c4 8900 	strd	r8, r9, [r4]
 802c02c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802c02e:	dc37      	bgt.n	802c0a0 <_vfprintf_r+0x11a8>
 802c030:	3408      	adds	r4, #8
 802c032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c034:	781e      	ldrb	r6, [r3, #0]
 802c036:	f1b9 0f00 	cmp.w	r9, #0
 802c03a:	bfa8      	it	ge
 802c03c:	eba6 0609 	subge.w	r6, r6, r9
 802c040:	2e00      	cmp	r6, #0
 802c042:	dd18      	ble.n	802c076 <_vfprintf_r+0x117e>
 802c044:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802c048:	486f      	ldr	r0, [pc, #444]	@ (802c208 <_vfprintf_r+0x1310>)
 802c04a:	6020      	str	r0, [r4, #0]
 802c04c:	2e10      	cmp	r6, #16
 802c04e:	f103 0301 	add.w	r3, r3, #1
 802c052:	f104 0108 	add.w	r1, r4, #8
 802c056:	dc2d      	bgt.n	802c0b4 <_vfprintf_r+0x11bc>
 802c058:	6066      	str	r6, [r4, #4]
 802c05a:	2b07      	cmp	r3, #7
 802c05c:	4416      	add	r6, r2
 802c05e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802c062:	dd3a      	ble.n	802c0da <_vfprintf_r+0x11e2>
 802c064:	9803      	ldr	r0, [sp, #12]
 802c066:	aa26      	add	r2, sp, #152	@ 0x98
 802c068:	4659      	mov	r1, fp
 802c06a:	f000 f9b1 	bl	802c3d0 <__sprint_r>
 802c06e:	2800      	cmp	r0, #0
 802c070:	f040 8109 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c074:	ac29      	add	r4, sp, #164	@ 0xa4
 802c076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c078:	781b      	ldrb	r3, [r3, #0]
 802c07a:	4498      	add	r8, r3
 802c07c:	e731      	b.n	802bee2 <_vfprintf_r+0xfea>
 802c07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c080:	3b01      	subs	r3, #1
 802c082:	9309      	str	r3, [sp, #36]	@ 0x24
 802c084:	9b08      	ldr	r3, [sp, #32]
 802c086:	3b01      	subs	r3, #1
 802c088:	9308      	str	r3, [sp, #32]
 802c08a:	e7ad      	b.n	802bfe8 <_vfprintf_r+0x10f0>
 802c08c:	9803      	ldr	r0, [sp, #12]
 802c08e:	aa26      	add	r2, sp, #152	@ 0x98
 802c090:	4659      	mov	r1, fp
 802c092:	f000 f99d 	bl	802c3d0 <__sprint_r>
 802c096:	2800      	cmp	r0, #0
 802c098:	f040 80f5 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c09c:	ac29      	add	r4, sp, #164	@ 0xa4
 802c09e:	e7b1      	b.n	802c004 <_vfprintf_r+0x110c>
 802c0a0:	9803      	ldr	r0, [sp, #12]
 802c0a2:	aa26      	add	r2, sp, #152	@ 0x98
 802c0a4:	4659      	mov	r1, fp
 802c0a6:	f000 f993 	bl	802c3d0 <__sprint_r>
 802c0aa:	2800      	cmp	r0, #0
 802c0ac:	f040 80eb 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c0b0:	ac29      	add	r4, sp, #164	@ 0xa4
 802c0b2:	e7be      	b.n	802c032 <_vfprintf_r+0x113a>
 802c0b4:	2010      	movs	r0, #16
 802c0b6:	4402      	add	r2, r0
 802c0b8:	2b07      	cmp	r3, #7
 802c0ba:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802c0be:	6060      	str	r0, [r4, #4]
 802c0c0:	dd08      	ble.n	802c0d4 <_vfprintf_r+0x11dc>
 802c0c2:	9803      	ldr	r0, [sp, #12]
 802c0c4:	aa26      	add	r2, sp, #152	@ 0x98
 802c0c6:	4659      	mov	r1, fp
 802c0c8:	f000 f982 	bl	802c3d0 <__sprint_r>
 802c0cc:	2800      	cmp	r0, #0
 802c0ce:	f040 80da 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c0d2:	a929      	add	r1, sp, #164	@ 0xa4
 802c0d4:	3e10      	subs	r6, #16
 802c0d6:	460c      	mov	r4, r1
 802c0d8:	e7b4      	b.n	802c044 <_vfprintf_r+0x114c>
 802c0da:	460c      	mov	r4, r1
 802c0dc:	e7cb      	b.n	802c076 <_vfprintf_r+0x117e>
 802c0de:	9803      	ldr	r0, [sp, #12]
 802c0e0:	aa26      	add	r2, sp, #152	@ 0x98
 802c0e2:	4659      	mov	r1, fp
 802c0e4:	f000 f974 	bl	802c3d0 <__sprint_r>
 802c0e8:	2800      	cmp	r0, #0
 802c0ea:	f040 80cc 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c0ee:	ac29      	add	r4, sp, #164	@ 0xa4
 802c0f0:	e715      	b.n	802bf1e <_vfprintf_r+0x1026>
 802c0f2:	9803      	ldr	r0, [sp, #12]
 802c0f4:	aa26      	add	r2, sp, #152	@ 0x98
 802c0f6:	4659      	mov	r1, fp
 802c0f8:	f000 f96a 	bl	802c3d0 <__sprint_r>
 802c0fc:	2800      	cmp	r0, #0
 802c0fe:	f040 80c2 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c102:	ac29      	add	r4, sp, #164	@ 0xa4
 802c104:	e722      	b.n	802bf4c <_vfprintf_r+0x1054>
 802c106:	9904      	ldr	r1, [sp, #16]
 802c108:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c10a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802c10c:	2901      	cmp	r1, #1
 802c10e:	f103 0301 	add.w	r3, r3, #1
 802c112:	f102 0201 	add.w	r2, r2, #1
 802c116:	f104 0608 	add.w	r6, r4, #8
 802c11a:	dc02      	bgt.n	802c122 <_vfprintf_r+0x122a>
 802c11c:	07ef      	lsls	r7, r5, #31
 802c11e:	f140 8086 	bpl.w	802c22e <_vfprintf_r+0x1336>
 802c122:	2101      	movs	r1, #1
 802c124:	2a07      	cmp	r2, #7
 802c126:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802c12a:	f8c4 8000 	str.w	r8, [r4]
 802c12e:	6061      	str	r1, [r4, #4]
 802c130:	dd08      	ble.n	802c144 <_vfprintf_r+0x124c>
 802c132:	9803      	ldr	r0, [sp, #12]
 802c134:	aa26      	add	r2, sp, #152	@ 0x98
 802c136:	4659      	mov	r1, fp
 802c138:	f000 f94a 	bl	802c3d0 <__sprint_r>
 802c13c:	2800      	cmp	r0, #0
 802c13e:	f040 80a2 	bne.w	802c286 <_vfprintf_r+0x138e>
 802c142:	ae29      	add	r6, sp, #164	@ 0xa4
 802c144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802c146:	6033      	str	r3, [r6, #0]
 802c148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802c14a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802c14c:	6073      	str	r3, [r6, #4]
 802c14e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802c150:	4413      	add	r3, r2
 802c152:	9328      	str	r3, [sp, #160]	@ 0xa0
 802c154:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802c156:	3301      	adds	r3, #1
 802c158:	2b07      	cmp	r3, #7
 802c15a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802c15c:	dc33      	bgt.n	802c1c6 <_vfprintf_r+0x12ce>
 802c15e:	3608      	adds	r6, #8
 802c160:	9b04      	ldr	r3, [sp, #16]
 802c162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802c166:	1e5c      	subs	r4, r3, #1
 802c168:	2200      	movs	r2, #0
 802c16a:	2300      	movs	r3, #0
 802c16c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802c170:	f7e4 fcc2 	bl	8010af8 <__aeabi_dcmpeq>
 802c174:	2800      	cmp	r0, #0
 802c176:	d12f      	bne.n	802c1d8 <_vfprintf_r+0x12e0>
 802c178:	f108 0201 	add.w	r2, r8, #1
 802c17c:	e9c6 2400 	strd	r2, r4, [r6]
 802c180:	9a04      	ldr	r2, [sp, #16]
 802c182:	f109 0301 	add.w	r3, r9, #1
 802c186:	3f01      	subs	r7, #1
 802c188:	4417      	add	r7, r2
 802c18a:	2b07      	cmp	r3, #7
 802c18c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802c190:	dd56      	ble.n	802c240 <_vfprintf_r+0x1348>
 802c192:	9803      	ldr	r0, [sp, #12]
 802c194:	aa26      	add	r2, sp, #152	@ 0x98
 802c196:	4659      	mov	r1, fp
 802c198:	f000 f91a 	bl	802c3d0 <__sprint_r>
 802c19c:	2800      	cmp	r0, #0
 802c19e:	d172      	bne.n	802c286 <_vfprintf_r+0x138e>
 802c1a0:	ae29      	add	r6, sp, #164	@ 0xa4
 802c1a2:	ab22      	add	r3, sp, #136	@ 0x88
 802c1a4:	6033      	str	r3, [r6, #0]
 802c1a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c1a8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802c1aa:	6073      	str	r3, [r6, #4]
 802c1ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802c1ae:	4413      	add	r3, r2
 802c1b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802c1b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802c1b4:	3301      	adds	r3, #1
 802c1b6:	2b07      	cmp	r3, #7
 802c1b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802c1ba:	f73f ada1 	bgt.w	802bd00 <_vfprintf_r+0xe08>
 802c1be:	f106 0408 	add.w	r4, r6, #8
 802c1c2:	f7ff baef 	b.w	802b7a4 <_vfprintf_r+0x8ac>
 802c1c6:	9803      	ldr	r0, [sp, #12]
 802c1c8:	aa26      	add	r2, sp, #152	@ 0x98
 802c1ca:	4659      	mov	r1, fp
 802c1cc:	f000 f900 	bl	802c3d0 <__sprint_r>
 802c1d0:	2800      	cmp	r0, #0
 802c1d2:	d158      	bne.n	802c286 <_vfprintf_r+0x138e>
 802c1d4:	ae29      	add	r6, sp, #164	@ 0xa4
 802c1d6:	e7c3      	b.n	802c160 <_vfprintf_r+0x1268>
 802c1d8:	9b04      	ldr	r3, [sp, #16]
 802c1da:	2b01      	cmp	r3, #1
 802c1dc:	dde1      	ble.n	802c1a2 <_vfprintf_r+0x12aa>
 802c1de:	4f0a      	ldr	r7, [pc, #40]	@ (802c208 <_vfprintf_r+0x1310>)
 802c1e0:	f04f 0810 	mov.w	r8, #16
 802c1e4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802c1e8:	2c10      	cmp	r4, #16
 802c1ea:	f103 0301 	add.w	r3, r3, #1
 802c1ee:	f106 0108 	add.w	r1, r6, #8
 802c1f2:	6037      	str	r7, [r6, #0]
 802c1f4:	dc0a      	bgt.n	802c20c <_vfprintf_r+0x1314>
 802c1f6:	6074      	str	r4, [r6, #4]
 802c1f8:	2b07      	cmp	r3, #7
 802c1fa:	4414      	add	r4, r2
 802c1fc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802c200:	dcc7      	bgt.n	802c192 <_vfprintf_r+0x129a>
 802c202:	460e      	mov	r6, r1
 802c204:	e7cd      	b.n	802c1a2 <_vfprintf_r+0x12aa>
 802c206:	bf00      	nop
 802c208:	0803d2df 	.word	0x0803d2df
 802c20c:	3210      	adds	r2, #16
 802c20e:	2b07      	cmp	r3, #7
 802c210:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802c214:	f8c6 8004 	str.w	r8, [r6, #4]
 802c218:	dd06      	ble.n	802c228 <_vfprintf_r+0x1330>
 802c21a:	9803      	ldr	r0, [sp, #12]
 802c21c:	aa26      	add	r2, sp, #152	@ 0x98
 802c21e:	4659      	mov	r1, fp
 802c220:	f000 f8d6 	bl	802c3d0 <__sprint_r>
 802c224:	bb78      	cbnz	r0, 802c286 <_vfprintf_r+0x138e>
 802c226:	a929      	add	r1, sp, #164	@ 0xa4
 802c228:	3c10      	subs	r4, #16
 802c22a:	460e      	mov	r6, r1
 802c22c:	e7da      	b.n	802c1e4 <_vfprintf_r+0x12ec>
 802c22e:	2101      	movs	r1, #1
 802c230:	2a07      	cmp	r2, #7
 802c232:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802c236:	f8c4 8000 	str.w	r8, [r4]
 802c23a:	6061      	str	r1, [r4, #4]
 802c23c:	ddb1      	ble.n	802c1a2 <_vfprintf_r+0x12aa>
 802c23e:	e7a8      	b.n	802c192 <_vfprintf_r+0x129a>
 802c240:	3608      	adds	r6, #8
 802c242:	e7ae      	b.n	802c1a2 <_vfprintf_r+0x12aa>
 802c244:	460c      	mov	r4, r1
 802c246:	f7ff baad 	b.w	802b7a4 <_vfprintf_r+0x8ac>
 802c24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802c24c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802c24e:	1a9d      	subs	r5, r3, r2
 802c250:	2d00      	cmp	r5, #0
 802c252:	f77f aaaa 	ble.w	802b7aa <_vfprintf_r+0x8b2>
 802c256:	4e3d      	ldr	r6, [pc, #244]	@ (802c34c <_vfprintf_r+0x1454>)
 802c258:	2710      	movs	r7, #16
 802c25a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802c25e:	2d10      	cmp	r5, #16
 802c260:	f103 0301 	add.w	r3, r3, #1
 802c264:	6026      	str	r6, [r4, #0]
 802c266:	dc18      	bgt.n	802c29a <_vfprintf_r+0x13a2>
 802c268:	6065      	str	r5, [r4, #4]
 802c26a:	2b07      	cmp	r3, #7
 802c26c:	4415      	add	r5, r2
 802c26e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802c272:	f77f aa9a 	ble.w	802b7aa <_vfprintf_r+0x8b2>
 802c276:	9803      	ldr	r0, [sp, #12]
 802c278:	aa26      	add	r2, sp, #152	@ 0x98
 802c27a:	4659      	mov	r1, fp
 802c27c:	f000 f8a8 	bl	802c3d0 <__sprint_r>
 802c280:	2800      	cmp	r0, #0
 802c282:	f43f aa92 	beq.w	802b7aa <_vfprintf_r+0x8b2>
 802c286:	f1ba 0f00 	cmp.w	sl, #0
 802c28a:	f43f a892 	beq.w	802b3b2 <_vfprintf_r+0x4ba>
 802c28e:	9803      	ldr	r0, [sp, #12]
 802c290:	4651      	mov	r1, sl
 802c292:	f003 ffab 	bl	80301ec <_free_r>
 802c296:	f7ff b88c 	b.w	802b3b2 <_vfprintf_r+0x4ba>
 802c29a:	3210      	adds	r2, #16
 802c29c:	2b07      	cmp	r3, #7
 802c29e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802c2a2:	6067      	str	r7, [r4, #4]
 802c2a4:	dc02      	bgt.n	802c2ac <_vfprintf_r+0x13b4>
 802c2a6:	3408      	adds	r4, #8
 802c2a8:	3d10      	subs	r5, #16
 802c2aa:	e7d6      	b.n	802c25a <_vfprintf_r+0x1362>
 802c2ac:	9803      	ldr	r0, [sp, #12]
 802c2ae:	aa26      	add	r2, sp, #152	@ 0x98
 802c2b0:	4659      	mov	r1, fp
 802c2b2:	f000 f88d 	bl	802c3d0 <__sprint_r>
 802c2b6:	2800      	cmp	r0, #0
 802c2b8:	d1e5      	bne.n	802c286 <_vfprintf_r+0x138e>
 802c2ba:	ac29      	add	r4, sp, #164	@ 0xa4
 802c2bc:	e7f4      	b.n	802c2a8 <_vfprintf_r+0x13b0>
 802c2be:	9803      	ldr	r0, [sp, #12]
 802c2c0:	4651      	mov	r1, sl
 802c2c2:	f003 ff93 	bl	80301ec <_free_r>
 802c2c6:	f7ff ba88 	b.w	802b7da <_vfprintf_r+0x8e2>
 802c2ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802c2cc:	b91b      	cbnz	r3, 802c2d6 <_vfprintf_r+0x13de>
 802c2ce:	2300      	movs	r3, #0
 802c2d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802c2d2:	f7ff b86e 	b.w	802b3b2 <_vfprintf_r+0x4ba>
 802c2d6:	9803      	ldr	r0, [sp, #12]
 802c2d8:	aa26      	add	r2, sp, #152	@ 0x98
 802c2da:	4659      	mov	r1, fp
 802c2dc:	f000 f878 	bl	802c3d0 <__sprint_r>
 802c2e0:	2800      	cmp	r0, #0
 802c2e2:	d0f4      	beq.n	802c2ce <_vfprintf_r+0x13d6>
 802c2e4:	f7ff b865 	b.w	802b3b2 <_vfprintf_r+0x4ba>
 802c2e8:	ea56 0207 	orrs.w	r2, r6, r7
 802c2ec:	9508      	str	r5, [sp, #32]
 802c2ee:	f43f ab75 	beq.w	802b9dc <_vfprintf_r+0xae4>
 802c2f2:	2b01      	cmp	r3, #1
 802c2f4:	f43f abf6 	beq.w	802bae4 <_vfprintf_r+0xbec>
 802c2f8:	2b02      	cmp	r3, #2
 802c2fa:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802c2fe:	f43f ac3a 	beq.w	802bb76 <_vfprintf_r+0xc7e>
 802c302:	f006 0307 	and.w	r3, r6, #7
 802c306:	08f6      	lsrs	r6, r6, #3
 802c308:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802c30c:	08ff      	lsrs	r7, r7, #3
 802c30e:	3330      	adds	r3, #48	@ 0x30
 802c310:	ea56 0107 	orrs.w	r1, r6, r7
 802c314:	4642      	mov	r2, r8
 802c316:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802c31a:	d1f2      	bne.n	802c302 <_vfprintf_r+0x140a>
 802c31c:	9908      	ldr	r1, [sp, #32]
 802c31e:	07ce      	lsls	r6, r1, #31
 802c320:	d506      	bpl.n	802c330 <_vfprintf_r+0x1438>
 802c322:	2b30      	cmp	r3, #48	@ 0x30
 802c324:	d004      	beq.n	802c330 <_vfprintf_r+0x1438>
 802c326:	2330      	movs	r3, #48	@ 0x30
 802c328:	f808 3c01 	strb.w	r3, [r8, #-1]
 802c32c:	f1a2 0802 	sub.w	r8, r2, #2
 802c330:	ab52      	add	r3, sp, #328	@ 0x148
 802c332:	9d08      	ldr	r5, [sp, #32]
 802c334:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802c338:	f04f 0a00 	mov.w	sl, #0
 802c33c:	eba3 0908 	sub.w	r9, r3, r8
 802c340:	4657      	mov	r7, sl
 802c342:	f8cd a020 	str.w	sl, [sp, #32]
 802c346:	4656      	mov	r6, sl
 802c348:	f7ff b978 	b.w	802b63c <_vfprintf_r+0x744>
 802c34c:	0803d2ef 	.word	0x0803d2ef

0802c350 <__sbprintf>:
 802c350:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c352:	461f      	mov	r7, r3
 802c354:	898b      	ldrh	r3, [r1, #12]
 802c356:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802c35a:	f023 0302 	bic.w	r3, r3, #2
 802c35e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c362:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802c364:	9319      	str	r3, [sp, #100]	@ 0x64
 802c366:	89cb      	ldrh	r3, [r1, #14]
 802c368:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c36c:	69cb      	ldr	r3, [r1, #28]
 802c36e:	9307      	str	r3, [sp, #28]
 802c370:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802c372:	9309      	str	r3, [sp, #36]	@ 0x24
 802c374:	ab1a      	add	r3, sp, #104	@ 0x68
 802c376:	9300      	str	r3, [sp, #0]
 802c378:	9304      	str	r3, [sp, #16]
 802c37a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c37e:	4615      	mov	r5, r2
 802c380:	4606      	mov	r6, r0
 802c382:	9302      	str	r3, [sp, #8]
 802c384:	9305      	str	r3, [sp, #20]
 802c386:	a816      	add	r0, sp, #88	@ 0x58
 802c388:	2300      	movs	r3, #0
 802c38a:	460c      	mov	r4, r1
 802c38c:	9306      	str	r3, [sp, #24]
 802c38e:	f003 f81f 	bl	802f3d0 <__retarget_lock_init_recursive>
 802c392:	462a      	mov	r2, r5
 802c394:	463b      	mov	r3, r7
 802c396:	4669      	mov	r1, sp
 802c398:	4630      	mov	r0, r6
 802c39a:	f7fe fdad 	bl	802aef8 <_vfprintf_r>
 802c39e:	1e05      	subs	r5, r0, #0
 802c3a0:	db07      	blt.n	802c3b2 <__sbprintf+0x62>
 802c3a2:	4669      	mov	r1, sp
 802c3a4:	4630      	mov	r0, r6
 802c3a6:	f000 fecb 	bl	802d140 <_fflush_r>
 802c3aa:	2800      	cmp	r0, #0
 802c3ac:	bf18      	it	ne
 802c3ae:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c3b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802c3b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c3b8:	065b      	lsls	r3, r3, #25
 802c3ba:	bf42      	ittt	mi
 802c3bc:	89a3      	ldrhmi	r3, [r4, #12]
 802c3be:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802c3c2:	81a3      	strhmi	r3, [r4, #12]
 802c3c4:	f003 f805 	bl	802f3d2 <__retarget_lock_close_recursive>
 802c3c8:	4628      	mov	r0, r5
 802c3ca:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802c3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c3d0 <__sprint_r>:
 802c3d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3d4:	6893      	ldr	r3, [r2, #8]
 802c3d6:	4680      	mov	r8, r0
 802c3d8:	460e      	mov	r6, r1
 802c3da:	4614      	mov	r4, r2
 802c3dc:	b343      	cbz	r3, 802c430 <__sprint_r+0x60>
 802c3de:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802c3e0:	049d      	lsls	r5, r3, #18
 802c3e2:	d522      	bpl.n	802c42a <__sprint_r+0x5a>
 802c3e4:	6815      	ldr	r5, [r2, #0]
 802c3e6:	68a0      	ldr	r0, [r4, #8]
 802c3e8:	3508      	adds	r5, #8
 802c3ea:	b928      	cbnz	r0, 802c3f8 <__sprint_r+0x28>
 802c3ec:	2300      	movs	r3, #0
 802c3ee:	60a3      	str	r3, [r4, #8]
 802c3f0:	2300      	movs	r3, #0
 802c3f2:	6063      	str	r3, [r4, #4]
 802c3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3f8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802c3fc:	f04f 0900 	mov.w	r9, #0
 802c400:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802c404:	45ca      	cmp	sl, r9
 802c406:	dc05      	bgt.n	802c414 <__sprint_r+0x44>
 802c408:	68a3      	ldr	r3, [r4, #8]
 802c40a:	f027 0703 	bic.w	r7, r7, #3
 802c40e:	1bdb      	subs	r3, r3, r7
 802c410:	60a3      	str	r3, [r4, #8]
 802c412:	e7e8      	b.n	802c3e6 <__sprint_r+0x16>
 802c414:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802c418:	4632      	mov	r2, r6
 802c41a:	4640      	mov	r0, r8
 802c41c:	f001 fa35 	bl	802d88a <_fputwc_r>
 802c420:	1c43      	adds	r3, r0, #1
 802c422:	d0e3      	beq.n	802c3ec <__sprint_r+0x1c>
 802c424:	f109 0901 	add.w	r9, r9, #1
 802c428:	e7ec      	b.n	802c404 <__sprint_r+0x34>
 802c42a:	f001 f81d 	bl	802d468 <__sfvwrite_r>
 802c42e:	e7dd      	b.n	802c3ec <__sprint_r+0x1c>
 802c430:	4618      	mov	r0, r3
 802c432:	e7dd      	b.n	802c3f0 <__sprint_r+0x20>

0802c434 <_vfiprintf_r>:
 802c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c438:	b0bb      	sub	sp, #236	@ 0xec
 802c43a:	460f      	mov	r7, r1
 802c43c:	4693      	mov	fp, r2
 802c43e:	461c      	mov	r4, r3
 802c440:	461d      	mov	r5, r3
 802c442:	9000      	str	r0, [sp, #0]
 802c444:	b118      	cbz	r0, 802c44e <_vfiprintf_r+0x1a>
 802c446:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c448:	b90b      	cbnz	r3, 802c44e <_vfiprintf_r+0x1a>
 802c44a:	f000 ffbb 	bl	802d3c4 <__sinit>
 802c44e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c450:	07db      	lsls	r3, r3, #31
 802c452:	d405      	bmi.n	802c460 <_vfiprintf_r+0x2c>
 802c454:	89bb      	ldrh	r3, [r7, #12]
 802c456:	059e      	lsls	r6, r3, #22
 802c458:	d402      	bmi.n	802c460 <_vfiprintf_r+0x2c>
 802c45a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802c45c:	f002 ffbb 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 802c460:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802c464:	0498      	lsls	r0, r3, #18
 802c466:	d406      	bmi.n	802c476 <_vfiprintf_r+0x42>
 802c468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c46c:	81bb      	strh	r3, [r7, #12]
 802c46e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802c474:	667b      	str	r3, [r7, #100]	@ 0x64
 802c476:	89bb      	ldrh	r3, [r7, #12]
 802c478:	0719      	lsls	r1, r3, #28
 802c47a:	d501      	bpl.n	802c480 <_vfiprintf_r+0x4c>
 802c47c:	693b      	ldr	r3, [r7, #16]
 802c47e:	b9ab      	cbnz	r3, 802c4ac <_vfiprintf_r+0x78>
 802c480:	9800      	ldr	r0, [sp, #0]
 802c482:	4639      	mov	r1, r7
 802c484:	f001 f95a 	bl	802d73c <__swsetup_r>
 802c488:	b180      	cbz	r0, 802c4ac <_vfiprintf_r+0x78>
 802c48a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c48c:	07da      	lsls	r2, r3, #31
 802c48e:	d506      	bpl.n	802c49e <_vfiprintf_r+0x6a>
 802c490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c494:	9303      	str	r3, [sp, #12]
 802c496:	9803      	ldr	r0, [sp, #12]
 802c498:	b03b      	add	sp, #236	@ 0xec
 802c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c49e:	89bb      	ldrh	r3, [r7, #12]
 802c4a0:	059b      	lsls	r3, r3, #22
 802c4a2:	d4f5      	bmi.n	802c490 <_vfiprintf_r+0x5c>
 802c4a4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802c4a6:	f002 ff98 	bl	802f3da <__retarget_lock_release_recursive>
 802c4aa:	e7f1      	b.n	802c490 <_vfiprintf_r+0x5c>
 802c4ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802c4b0:	f003 021a 	and.w	r2, r3, #26
 802c4b4:	2a0a      	cmp	r2, #10
 802c4b6:	d114      	bne.n	802c4e2 <_vfiprintf_r+0xae>
 802c4b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802c4bc:	2a00      	cmp	r2, #0
 802c4be:	db10      	blt.n	802c4e2 <_vfiprintf_r+0xae>
 802c4c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802c4c2:	07d6      	lsls	r6, r2, #31
 802c4c4:	d404      	bmi.n	802c4d0 <_vfiprintf_r+0x9c>
 802c4c6:	059d      	lsls	r5, r3, #22
 802c4c8:	d402      	bmi.n	802c4d0 <_vfiprintf_r+0x9c>
 802c4ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802c4cc:	f002 ff85 	bl	802f3da <__retarget_lock_release_recursive>
 802c4d0:	9800      	ldr	r0, [sp, #0]
 802c4d2:	4623      	mov	r3, r4
 802c4d4:	465a      	mov	r2, fp
 802c4d6:	4639      	mov	r1, r7
 802c4d8:	b03b      	add	sp, #236	@ 0xec
 802c4da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4de:	f000 bc31 	b.w	802cd44 <__sbprintf>
 802c4e2:	2300      	movs	r3, #0
 802c4e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802c4e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802c4ec:	ae11      	add	r6, sp, #68	@ 0x44
 802c4ee:	960e      	str	r6, [sp, #56]	@ 0x38
 802c4f0:	9307      	str	r3, [sp, #28]
 802c4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 802c4f4:	9303      	str	r3, [sp, #12]
 802c4f6:	465b      	mov	r3, fp
 802c4f8:	461c      	mov	r4, r3
 802c4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c4fe:	b10a      	cbz	r2, 802c504 <_vfiprintf_r+0xd0>
 802c500:	2a25      	cmp	r2, #37	@ 0x25
 802c502:	d1f9      	bne.n	802c4f8 <_vfiprintf_r+0xc4>
 802c504:	ebb4 080b 	subs.w	r8, r4, fp
 802c508:	d00d      	beq.n	802c526 <_vfiprintf_r+0xf2>
 802c50a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c50c:	4443      	add	r3, r8
 802c50e:	9310      	str	r3, [sp, #64]	@ 0x40
 802c510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c512:	3301      	adds	r3, #1
 802c514:	2b07      	cmp	r3, #7
 802c516:	e9c6 b800 	strd	fp, r8, [r6]
 802c51a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c51c:	dc75      	bgt.n	802c60a <_vfiprintf_r+0x1d6>
 802c51e:	3608      	adds	r6, #8
 802c520:	9b03      	ldr	r3, [sp, #12]
 802c522:	4443      	add	r3, r8
 802c524:	9303      	str	r3, [sp, #12]
 802c526:	7823      	ldrb	r3, [r4, #0]
 802c528:	2b00      	cmp	r3, #0
 802c52a:	f000 83cd 	beq.w	802ccc8 <_vfiprintf_r+0x894>
 802c52e:	2300      	movs	r3, #0
 802c530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c534:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802c538:	3401      	adds	r4, #1
 802c53a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c53e:	469a      	mov	sl, r3
 802c540:	46a3      	mov	fp, r4
 802c542:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802c546:	f1a3 0220 	sub.w	r2, r3, #32
 802c54a:	2a5a      	cmp	r2, #90	@ 0x5a
 802c54c:	f200 8316 	bhi.w	802cb7c <_vfiprintf_r+0x748>
 802c550:	e8df f012 	tbh	[pc, r2, lsl #1]
 802c554:	0314009a 	.word	0x0314009a
 802c558:	00a20314 	.word	0x00a20314
 802c55c:	03140314 	.word	0x03140314
 802c560:	00820314 	.word	0x00820314
 802c564:	03140314 	.word	0x03140314
 802c568:	00af00a5 	.word	0x00af00a5
 802c56c:	00ac0314 	.word	0x00ac0314
 802c570:	031400b1 	.word	0x031400b1
 802c574:	00d000cd 	.word	0x00d000cd
 802c578:	00d000d0 	.word	0x00d000d0
 802c57c:	00d000d0 	.word	0x00d000d0
 802c580:	00d000d0 	.word	0x00d000d0
 802c584:	00d000d0 	.word	0x00d000d0
 802c588:	03140314 	.word	0x03140314
 802c58c:	03140314 	.word	0x03140314
 802c590:	03140314 	.word	0x03140314
 802c594:	03140314 	.word	0x03140314
 802c598:	00f70314 	.word	0x00f70314
 802c59c:	03140104 	.word	0x03140104
 802c5a0:	03140314 	.word	0x03140314
 802c5a4:	03140314 	.word	0x03140314
 802c5a8:	03140314 	.word	0x03140314
 802c5ac:	03140314 	.word	0x03140314
 802c5b0:	01520314 	.word	0x01520314
 802c5b4:	03140314 	.word	0x03140314
 802c5b8:	019a0314 	.word	0x019a0314
 802c5bc:	027a0314 	.word	0x027a0314
 802c5c0:	03140314 	.word	0x03140314
 802c5c4:	0314029a 	.word	0x0314029a
 802c5c8:	03140314 	.word	0x03140314
 802c5cc:	03140314 	.word	0x03140314
 802c5d0:	03140314 	.word	0x03140314
 802c5d4:	03140314 	.word	0x03140314
 802c5d8:	00f70314 	.word	0x00f70314
 802c5dc:	03140106 	.word	0x03140106
 802c5e0:	03140314 	.word	0x03140314
 802c5e4:	010600e0 	.word	0x010600e0
 802c5e8:	031400f1 	.word	0x031400f1
 802c5ec:	031400eb 	.word	0x031400eb
 802c5f0:	01540132 	.word	0x01540132
 802c5f4:	00f10189 	.word	0x00f10189
 802c5f8:	019a0314 	.word	0x019a0314
 802c5fc:	027c0098 	.word	0x027c0098
 802c600:	03140314 	.word	0x03140314
 802c604:	03140065 	.word	0x03140065
 802c608:	0098      	.short	0x0098
 802c60a:	9800      	ldr	r0, [sp, #0]
 802c60c:	aa0e      	add	r2, sp, #56	@ 0x38
 802c60e:	4639      	mov	r1, r7
 802c610:	f7ff fede 	bl	802c3d0 <__sprint_r>
 802c614:	2800      	cmp	r0, #0
 802c616:	f040 8336 	bne.w	802cc86 <_vfiprintf_r+0x852>
 802c61a:	ae11      	add	r6, sp, #68	@ 0x44
 802c61c:	e780      	b.n	802c520 <_vfiprintf_r+0xec>
 802c61e:	4a99      	ldr	r2, [pc, #612]	@ (802c884 <_vfiprintf_r+0x450>)
 802c620:	9205      	str	r2, [sp, #20]
 802c622:	f01a 0220 	ands.w	r2, sl, #32
 802c626:	f000 8231 	beq.w	802ca8c <_vfiprintf_r+0x658>
 802c62a:	3507      	adds	r5, #7
 802c62c:	f025 0507 	bic.w	r5, r5, #7
 802c630:	46a8      	mov	r8, r5
 802c632:	686d      	ldr	r5, [r5, #4]
 802c634:	f858 4b08 	ldr.w	r4, [r8], #8
 802c638:	f01a 0f01 	tst.w	sl, #1
 802c63c:	d009      	beq.n	802c652 <_vfiprintf_r+0x21e>
 802c63e:	ea54 0205 	orrs.w	r2, r4, r5
 802c642:	bf1f      	itttt	ne
 802c644:	2230      	movne	r2, #48	@ 0x30
 802c646:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802c64a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802c64e:	f04a 0a02 	orrne.w	sl, sl, #2
 802c652:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802c656:	e112      	b.n	802c87e <_vfiprintf_r+0x44a>
 802c658:	9800      	ldr	r0, [sp, #0]
 802c65a:	f002 fe11 	bl	802f280 <_localeconv_r>
 802c65e:	6843      	ldr	r3, [r0, #4]
 802c660:	9309      	str	r3, [sp, #36]	@ 0x24
 802c662:	4618      	mov	r0, r3
 802c664:	f7e3 fe1c 	bl	80102a0 <strlen>
 802c668:	9007      	str	r0, [sp, #28]
 802c66a:	9800      	ldr	r0, [sp, #0]
 802c66c:	f002 fe08 	bl	802f280 <_localeconv_r>
 802c670:	6883      	ldr	r3, [r0, #8]
 802c672:	9306      	str	r3, [sp, #24]
 802c674:	9b07      	ldr	r3, [sp, #28]
 802c676:	b12b      	cbz	r3, 802c684 <_vfiprintf_r+0x250>
 802c678:	9b06      	ldr	r3, [sp, #24]
 802c67a:	b11b      	cbz	r3, 802c684 <_vfiprintf_r+0x250>
 802c67c:	781b      	ldrb	r3, [r3, #0]
 802c67e:	b10b      	cbz	r3, 802c684 <_vfiprintf_r+0x250>
 802c680:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802c684:	465c      	mov	r4, fp
 802c686:	e75b      	b.n	802c540 <_vfiprintf_r+0x10c>
 802c688:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c68c:	2b00      	cmp	r3, #0
 802c68e:	d1f9      	bne.n	802c684 <_vfiprintf_r+0x250>
 802c690:	2320      	movs	r3, #32
 802c692:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c696:	e7f5      	b.n	802c684 <_vfiprintf_r+0x250>
 802c698:	f04a 0a01 	orr.w	sl, sl, #1
 802c69c:	e7f2      	b.n	802c684 <_vfiprintf_r+0x250>
 802c69e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c6a2:	9302      	str	r3, [sp, #8]
 802c6a4:	2b00      	cmp	r3, #0
 802c6a6:	daed      	bge.n	802c684 <_vfiprintf_r+0x250>
 802c6a8:	425b      	negs	r3, r3
 802c6aa:	9302      	str	r3, [sp, #8]
 802c6ac:	f04a 0a04 	orr.w	sl, sl, #4
 802c6b0:	e7e8      	b.n	802c684 <_vfiprintf_r+0x250>
 802c6b2:	232b      	movs	r3, #43	@ 0x2b
 802c6b4:	e7ed      	b.n	802c692 <_vfiprintf_r+0x25e>
 802c6b6:	465a      	mov	r2, fp
 802c6b8:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c6bc:	2b2a      	cmp	r3, #42	@ 0x2a
 802c6be:	d112      	bne.n	802c6e6 <_vfiprintf_r+0x2b2>
 802c6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 802c6c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c6c8:	9301      	str	r3, [sp, #4]
 802c6ca:	4693      	mov	fp, r2
 802c6cc:	e7da      	b.n	802c684 <_vfiprintf_r+0x250>
 802c6ce:	9b01      	ldr	r3, [sp, #4]
 802c6d0:	fb00 1303 	mla	r3, r0, r3, r1
 802c6d4:	9301      	str	r3, [sp, #4]
 802c6d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c6da:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c6de:	2909      	cmp	r1, #9
 802c6e0:	d9f5      	bls.n	802c6ce <_vfiprintf_r+0x29a>
 802c6e2:	4693      	mov	fp, r2
 802c6e4:	e72f      	b.n	802c546 <_vfiprintf_r+0x112>
 802c6e6:	2100      	movs	r1, #0
 802c6e8:	9101      	str	r1, [sp, #4]
 802c6ea:	200a      	movs	r0, #10
 802c6ec:	e7f5      	b.n	802c6da <_vfiprintf_r+0x2a6>
 802c6ee:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802c6f2:	e7c7      	b.n	802c684 <_vfiprintf_r+0x250>
 802c6f4:	2100      	movs	r1, #0
 802c6f6:	465a      	mov	r2, fp
 802c6f8:	9102      	str	r1, [sp, #8]
 802c6fa:	200a      	movs	r0, #10
 802c6fc:	9902      	ldr	r1, [sp, #8]
 802c6fe:	3b30      	subs	r3, #48	@ 0x30
 802c700:	fb00 3301 	mla	r3, r0, r1, r3
 802c704:	9302      	str	r3, [sp, #8]
 802c706:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c70a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c70e:	2909      	cmp	r1, #9
 802c710:	d9f4      	bls.n	802c6fc <_vfiprintf_r+0x2c8>
 802c712:	e7e6      	b.n	802c6e2 <_vfiprintf_r+0x2ae>
 802c714:	f89b 3000 	ldrb.w	r3, [fp]
 802c718:	2b68      	cmp	r3, #104	@ 0x68
 802c71a:	bf06      	itte	eq
 802c71c:	f10b 0b01 	addeq.w	fp, fp, #1
 802c720:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802c724:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802c728:	e7ac      	b.n	802c684 <_vfiprintf_r+0x250>
 802c72a:	f89b 3000 	ldrb.w	r3, [fp]
 802c72e:	2b6c      	cmp	r3, #108	@ 0x6c
 802c730:	d104      	bne.n	802c73c <_vfiprintf_r+0x308>
 802c732:	f10b 0b01 	add.w	fp, fp, #1
 802c736:	f04a 0a20 	orr.w	sl, sl, #32
 802c73a:	e7a3      	b.n	802c684 <_vfiprintf_r+0x250>
 802c73c:	f04a 0a10 	orr.w	sl, sl, #16
 802c740:	e7a0      	b.n	802c684 <_vfiprintf_r+0x250>
 802c742:	46a8      	mov	r8, r5
 802c744:	2400      	movs	r4, #0
 802c746:	f858 3b04 	ldr.w	r3, [r8], #4
 802c74a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802c74e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802c752:	2301      	movs	r3, #1
 802c754:	9301      	str	r3, [sp, #4]
 802c756:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802c75a:	e0ab      	b.n	802c8b4 <_vfiprintf_r+0x480>
 802c75c:	f04a 0a10 	orr.w	sl, sl, #16
 802c760:	f01a 0f20 	tst.w	sl, #32
 802c764:	d011      	beq.n	802c78a <_vfiprintf_r+0x356>
 802c766:	3507      	adds	r5, #7
 802c768:	f025 0507 	bic.w	r5, r5, #7
 802c76c:	46a8      	mov	r8, r5
 802c76e:	686d      	ldr	r5, [r5, #4]
 802c770:	f858 4b08 	ldr.w	r4, [r8], #8
 802c774:	2d00      	cmp	r5, #0
 802c776:	da06      	bge.n	802c786 <_vfiprintf_r+0x352>
 802c778:	4264      	negs	r4, r4
 802c77a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802c77e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802c782:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c786:	2301      	movs	r3, #1
 802c788:	e048      	b.n	802c81c <_vfiprintf_r+0x3e8>
 802c78a:	46a8      	mov	r8, r5
 802c78c:	f01a 0f10 	tst.w	sl, #16
 802c790:	f858 5b04 	ldr.w	r5, [r8], #4
 802c794:	d002      	beq.n	802c79c <_vfiprintf_r+0x368>
 802c796:	462c      	mov	r4, r5
 802c798:	17ed      	asrs	r5, r5, #31
 802c79a:	e7eb      	b.n	802c774 <_vfiprintf_r+0x340>
 802c79c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802c7a0:	d003      	beq.n	802c7aa <_vfiprintf_r+0x376>
 802c7a2:	b22c      	sxth	r4, r5
 802c7a4:	f345 35c0 	sbfx	r5, r5, #15, #1
 802c7a8:	e7e4      	b.n	802c774 <_vfiprintf_r+0x340>
 802c7aa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802c7ae:	d0f2      	beq.n	802c796 <_vfiprintf_r+0x362>
 802c7b0:	b26c      	sxtb	r4, r5
 802c7b2:	f345 15c0 	sbfx	r5, r5, #7, #1
 802c7b6:	e7dd      	b.n	802c774 <_vfiprintf_r+0x340>
 802c7b8:	f01a 0f20 	tst.w	sl, #32
 802c7bc:	d007      	beq.n	802c7ce <_vfiprintf_r+0x39a>
 802c7be:	9a03      	ldr	r2, [sp, #12]
 802c7c0:	682b      	ldr	r3, [r5, #0]
 802c7c2:	9903      	ldr	r1, [sp, #12]
 802c7c4:	17d2      	asrs	r2, r2, #31
 802c7c6:	e9c3 1200 	strd	r1, r2, [r3]
 802c7ca:	3504      	adds	r5, #4
 802c7cc:	e693      	b.n	802c4f6 <_vfiprintf_r+0xc2>
 802c7ce:	f01a 0f10 	tst.w	sl, #16
 802c7d2:	d003      	beq.n	802c7dc <_vfiprintf_r+0x3a8>
 802c7d4:	682b      	ldr	r3, [r5, #0]
 802c7d6:	9a03      	ldr	r2, [sp, #12]
 802c7d8:	601a      	str	r2, [r3, #0]
 802c7da:	e7f6      	b.n	802c7ca <_vfiprintf_r+0x396>
 802c7dc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802c7e0:	d003      	beq.n	802c7ea <_vfiprintf_r+0x3b6>
 802c7e2:	682b      	ldr	r3, [r5, #0]
 802c7e4:	9a03      	ldr	r2, [sp, #12]
 802c7e6:	801a      	strh	r2, [r3, #0]
 802c7e8:	e7ef      	b.n	802c7ca <_vfiprintf_r+0x396>
 802c7ea:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802c7ee:	d0f1      	beq.n	802c7d4 <_vfiprintf_r+0x3a0>
 802c7f0:	682b      	ldr	r3, [r5, #0]
 802c7f2:	9a03      	ldr	r2, [sp, #12]
 802c7f4:	701a      	strb	r2, [r3, #0]
 802c7f6:	e7e8      	b.n	802c7ca <_vfiprintf_r+0x396>
 802c7f8:	f04a 0a10 	orr.w	sl, sl, #16
 802c7fc:	f01a 0320 	ands.w	r3, sl, #32
 802c800:	d01f      	beq.n	802c842 <_vfiprintf_r+0x40e>
 802c802:	3507      	adds	r5, #7
 802c804:	f025 0507 	bic.w	r5, r5, #7
 802c808:	46a8      	mov	r8, r5
 802c80a:	686d      	ldr	r5, [r5, #4]
 802c80c:	f858 4b08 	ldr.w	r4, [r8], #8
 802c810:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802c814:	2300      	movs	r3, #0
 802c816:	2200      	movs	r2, #0
 802c818:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802c81c:	9a01      	ldr	r2, [sp, #4]
 802c81e:	3201      	adds	r2, #1
 802c820:	f000 825f 	beq.w	802cce2 <_vfiprintf_r+0x8ae>
 802c824:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802c828:	9204      	str	r2, [sp, #16]
 802c82a:	ea54 0205 	orrs.w	r2, r4, r5
 802c82e:	f040 825e 	bne.w	802ccee <_vfiprintf_r+0x8ba>
 802c832:	9a01      	ldr	r2, [sp, #4]
 802c834:	2a00      	cmp	r2, #0
 802c836:	f000 8198 	beq.w	802cb6a <_vfiprintf_r+0x736>
 802c83a:	2b01      	cmp	r3, #1
 802c83c:	f040 825a 	bne.w	802ccf4 <_vfiprintf_r+0x8c0>
 802c840:	e13b      	b.n	802caba <_vfiprintf_r+0x686>
 802c842:	46a8      	mov	r8, r5
 802c844:	f01a 0510 	ands.w	r5, sl, #16
 802c848:	f858 4b04 	ldr.w	r4, [r8], #4
 802c84c:	d001      	beq.n	802c852 <_vfiprintf_r+0x41e>
 802c84e:	461d      	mov	r5, r3
 802c850:	e7de      	b.n	802c810 <_vfiprintf_r+0x3dc>
 802c852:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802c856:	d001      	beq.n	802c85c <_vfiprintf_r+0x428>
 802c858:	b2a4      	uxth	r4, r4
 802c85a:	e7d9      	b.n	802c810 <_vfiprintf_r+0x3dc>
 802c85c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c860:	d0d6      	beq.n	802c810 <_vfiprintf_r+0x3dc>
 802c862:	b2e4      	uxtb	r4, r4
 802c864:	e7f3      	b.n	802c84e <_vfiprintf_r+0x41a>
 802c866:	46a8      	mov	r8, r5
 802c868:	f647 0330 	movw	r3, #30768	@ 0x7830
 802c86c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802c870:	f858 4b04 	ldr.w	r4, [r8], #4
 802c874:	4b03      	ldr	r3, [pc, #12]	@ (802c884 <_vfiprintf_r+0x450>)
 802c876:	9305      	str	r3, [sp, #20]
 802c878:	2500      	movs	r5, #0
 802c87a:	f04a 0a02 	orr.w	sl, sl, #2
 802c87e:	2302      	movs	r3, #2
 802c880:	e7c9      	b.n	802c816 <_vfiprintf_r+0x3e2>
 802c882:	bf00      	nop
 802c884:	0803d2bb 	.word	0x0803d2bb
 802c888:	9b01      	ldr	r3, [sp, #4]
 802c88a:	46a8      	mov	r8, r5
 802c88c:	1c5c      	adds	r4, r3, #1
 802c88e:	f04f 0500 	mov.w	r5, #0
 802c892:	f858 9b04 	ldr.w	r9, [r8], #4
 802c896:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802c89a:	f000 80d0 	beq.w	802ca3e <_vfiprintf_r+0x60a>
 802c89e:	461a      	mov	r2, r3
 802c8a0:	4629      	mov	r1, r5
 802c8a2:	4648      	mov	r0, r9
 802c8a4:	f7e3 fcac 	bl	8010200 <memchr>
 802c8a8:	4604      	mov	r4, r0
 802c8aa:	b118      	cbz	r0, 802c8b4 <_vfiprintf_r+0x480>
 802c8ac:	eba0 0309 	sub.w	r3, r0, r9
 802c8b0:	9301      	str	r3, [sp, #4]
 802c8b2:	462c      	mov	r4, r5
 802c8b4:	9b01      	ldr	r3, [sp, #4]
 802c8b6:	42a3      	cmp	r3, r4
 802c8b8:	bfb8      	it	lt
 802c8ba:	4623      	movlt	r3, r4
 802c8bc:	9304      	str	r3, [sp, #16]
 802c8be:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c8c2:	b113      	cbz	r3, 802c8ca <_vfiprintf_r+0x496>
 802c8c4:	9b04      	ldr	r3, [sp, #16]
 802c8c6:	3301      	adds	r3, #1
 802c8c8:	9304      	str	r3, [sp, #16]
 802c8ca:	f01a 0302 	ands.w	r3, sl, #2
 802c8ce:	9308      	str	r3, [sp, #32]
 802c8d0:	bf1e      	ittt	ne
 802c8d2:	9b04      	ldrne	r3, [sp, #16]
 802c8d4:	3302      	addne	r3, #2
 802c8d6:	9304      	strne	r3, [sp, #16]
 802c8d8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802c8dc:	930a      	str	r3, [sp, #40]	@ 0x28
 802c8de:	d11f      	bne.n	802c920 <_vfiprintf_r+0x4ec>
 802c8e0:	9b02      	ldr	r3, [sp, #8]
 802c8e2:	9a04      	ldr	r2, [sp, #16]
 802c8e4:	1a9d      	subs	r5, r3, r2
 802c8e6:	2d00      	cmp	r5, #0
 802c8e8:	dd1a      	ble.n	802c920 <_vfiprintf_r+0x4ec>
 802c8ea:	4ba9      	ldr	r3, [pc, #676]	@ (802cb90 <_vfiprintf_r+0x75c>)
 802c8ec:	6033      	str	r3, [r6, #0]
 802c8ee:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c8f2:	2d10      	cmp	r5, #16
 802c8f4:	f102 0201 	add.w	r2, r2, #1
 802c8f8:	f106 0008 	add.w	r0, r6, #8
 802c8fc:	f300 814e 	bgt.w	802cb9c <_vfiprintf_r+0x768>
 802c900:	6075      	str	r5, [r6, #4]
 802c902:	2a07      	cmp	r2, #7
 802c904:	4465      	add	r5, ip
 802c906:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c90a:	f340 815a 	ble.w	802cbc2 <_vfiprintf_r+0x78e>
 802c90e:	9800      	ldr	r0, [sp, #0]
 802c910:	aa0e      	add	r2, sp, #56	@ 0x38
 802c912:	4639      	mov	r1, r7
 802c914:	f7ff fd5c 	bl	802c3d0 <__sprint_r>
 802c918:	2800      	cmp	r0, #0
 802c91a:	f040 81b4 	bne.w	802cc86 <_vfiprintf_r+0x852>
 802c91e:	ae11      	add	r6, sp, #68	@ 0x44
 802c920:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802c924:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c928:	b161      	cbz	r1, 802c944 <_vfiprintf_r+0x510>
 802c92a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802c92e:	3301      	adds	r3, #1
 802c930:	6031      	str	r1, [r6, #0]
 802c932:	2101      	movs	r1, #1
 802c934:	440a      	add	r2, r1
 802c936:	2b07      	cmp	r3, #7
 802c938:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c93c:	6071      	str	r1, [r6, #4]
 802c93e:	f300 8142 	bgt.w	802cbc6 <_vfiprintf_r+0x792>
 802c942:	3608      	adds	r6, #8
 802c944:	9908      	ldr	r1, [sp, #32]
 802c946:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c94a:	b159      	cbz	r1, 802c964 <_vfiprintf_r+0x530>
 802c94c:	a90d      	add	r1, sp, #52	@ 0x34
 802c94e:	3301      	adds	r3, #1
 802c950:	6031      	str	r1, [r6, #0]
 802c952:	2102      	movs	r1, #2
 802c954:	440a      	add	r2, r1
 802c956:	2b07      	cmp	r3, #7
 802c958:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c95c:	6071      	str	r1, [r6, #4]
 802c95e:	f300 813b 	bgt.w	802cbd8 <_vfiprintf_r+0x7a4>
 802c962:	3608      	adds	r6, #8
 802c964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c966:	2b80      	cmp	r3, #128	@ 0x80
 802c968:	d11f      	bne.n	802c9aa <_vfiprintf_r+0x576>
 802c96a:	9b02      	ldr	r3, [sp, #8]
 802c96c:	9a04      	ldr	r2, [sp, #16]
 802c96e:	1a9d      	subs	r5, r3, r2
 802c970:	2d00      	cmp	r5, #0
 802c972:	dd1a      	ble.n	802c9aa <_vfiprintf_r+0x576>
 802c974:	4b87      	ldr	r3, [pc, #540]	@ (802cb94 <_vfiprintf_r+0x760>)
 802c976:	6033      	str	r3, [r6, #0]
 802c978:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c97c:	2d10      	cmp	r5, #16
 802c97e:	f102 0201 	add.w	r2, r2, #1
 802c982:	f106 0008 	add.w	r0, r6, #8
 802c986:	f300 8130 	bgt.w	802cbea <_vfiprintf_r+0x7b6>
 802c98a:	6075      	str	r5, [r6, #4]
 802c98c:	2a07      	cmp	r2, #7
 802c98e:	4465      	add	r5, ip
 802c990:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c994:	f340 813c 	ble.w	802cc10 <_vfiprintf_r+0x7dc>
 802c998:	9800      	ldr	r0, [sp, #0]
 802c99a:	aa0e      	add	r2, sp, #56	@ 0x38
 802c99c:	4639      	mov	r1, r7
 802c99e:	f7ff fd17 	bl	802c3d0 <__sprint_r>
 802c9a2:	2800      	cmp	r0, #0
 802c9a4:	f040 816f 	bne.w	802cc86 <_vfiprintf_r+0x852>
 802c9a8:	ae11      	add	r6, sp, #68	@ 0x44
 802c9aa:	9b01      	ldr	r3, [sp, #4]
 802c9ac:	1ae4      	subs	r4, r4, r3
 802c9ae:	2c00      	cmp	r4, #0
 802c9b0:	dd1a      	ble.n	802c9e8 <_vfiprintf_r+0x5b4>
 802c9b2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c9b6:	4877      	ldr	r0, [pc, #476]	@ (802cb94 <_vfiprintf_r+0x760>)
 802c9b8:	6030      	str	r0, [r6, #0]
 802c9ba:	2c10      	cmp	r4, #16
 802c9bc:	f103 0301 	add.w	r3, r3, #1
 802c9c0:	f106 0108 	add.w	r1, r6, #8
 802c9c4:	f300 8126 	bgt.w	802cc14 <_vfiprintf_r+0x7e0>
 802c9c8:	6074      	str	r4, [r6, #4]
 802c9ca:	2b07      	cmp	r3, #7
 802c9cc:	4414      	add	r4, r2
 802c9ce:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802c9d2:	f340 8130 	ble.w	802cc36 <_vfiprintf_r+0x802>
 802c9d6:	9800      	ldr	r0, [sp, #0]
 802c9d8:	aa0e      	add	r2, sp, #56	@ 0x38
 802c9da:	4639      	mov	r1, r7
 802c9dc:	f7ff fcf8 	bl	802c3d0 <__sprint_r>
 802c9e0:	2800      	cmp	r0, #0
 802c9e2:	f040 8150 	bne.w	802cc86 <_vfiprintf_r+0x852>
 802c9e6:	ae11      	add	r6, sp, #68	@ 0x44
 802c9e8:	9b01      	ldr	r3, [sp, #4]
 802c9ea:	9a01      	ldr	r2, [sp, #4]
 802c9ec:	6073      	str	r3, [r6, #4]
 802c9ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c9f0:	f8c6 9000 	str.w	r9, [r6]
 802c9f4:	4413      	add	r3, r2
 802c9f6:	9310      	str	r3, [sp, #64]	@ 0x40
 802c9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c9fa:	3301      	adds	r3, #1
 802c9fc:	2b07      	cmp	r3, #7
 802c9fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ca00:	f300 811b 	bgt.w	802cc3a <_vfiprintf_r+0x806>
 802ca04:	f106 0308 	add.w	r3, r6, #8
 802ca08:	f01a 0f04 	tst.w	sl, #4
 802ca0c:	f040 811d 	bne.w	802cc4a <_vfiprintf_r+0x816>
 802ca10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ca14:	9904      	ldr	r1, [sp, #16]
 802ca16:	428a      	cmp	r2, r1
 802ca18:	bfac      	ite	ge
 802ca1a:	189b      	addge	r3, r3, r2
 802ca1c:	185b      	addlt	r3, r3, r1
 802ca1e:	9303      	str	r3, [sp, #12]
 802ca20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ca22:	b13b      	cbz	r3, 802ca34 <_vfiprintf_r+0x600>
 802ca24:	9800      	ldr	r0, [sp, #0]
 802ca26:	aa0e      	add	r2, sp, #56	@ 0x38
 802ca28:	4639      	mov	r1, r7
 802ca2a:	f7ff fcd1 	bl	802c3d0 <__sprint_r>
 802ca2e:	2800      	cmp	r0, #0
 802ca30:	f040 8129 	bne.w	802cc86 <_vfiprintf_r+0x852>
 802ca34:	2300      	movs	r3, #0
 802ca36:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ca38:	4645      	mov	r5, r8
 802ca3a:	ae11      	add	r6, sp, #68	@ 0x44
 802ca3c:	e55b      	b.n	802c4f6 <_vfiprintf_r+0xc2>
 802ca3e:	4648      	mov	r0, r9
 802ca40:	f7e3 fc2e 	bl	80102a0 <strlen>
 802ca44:	9001      	str	r0, [sp, #4]
 802ca46:	e734      	b.n	802c8b2 <_vfiprintf_r+0x47e>
 802ca48:	f04a 0a10 	orr.w	sl, sl, #16
 802ca4c:	f01a 0320 	ands.w	r3, sl, #32
 802ca50:	d008      	beq.n	802ca64 <_vfiprintf_r+0x630>
 802ca52:	3507      	adds	r5, #7
 802ca54:	f025 0507 	bic.w	r5, r5, #7
 802ca58:	46a8      	mov	r8, r5
 802ca5a:	686d      	ldr	r5, [r5, #4]
 802ca5c:	f858 4b08 	ldr.w	r4, [r8], #8
 802ca60:	2301      	movs	r3, #1
 802ca62:	e6d8      	b.n	802c816 <_vfiprintf_r+0x3e2>
 802ca64:	46a8      	mov	r8, r5
 802ca66:	f01a 0510 	ands.w	r5, sl, #16
 802ca6a:	f858 4b04 	ldr.w	r4, [r8], #4
 802ca6e:	d001      	beq.n	802ca74 <_vfiprintf_r+0x640>
 802ca70:	461d      	mov	r5, r3
 802ca72:	e7f5      	b.n	802ca60 <_vfiprintf_r+0x62c>
 802ca74:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802ca78:	d001      	beq.n	802ca7e <_vfiprintf_r+0x64a>
 802ca7a:	b2a4      	uxth	r4, r4
 802ca7c:	e7f0      	b.n	802ca60 <_vfiprintf_r+0x62c>
 802ca7e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802ca82:	d0ed      	beq.n	802ca60 <_vfiprintf_r+0x62c>
 802ca84:	b2e4      	uxtb	r4, r4
 802ca86:	e7f3      	b.n	802ca70 <_vfiprintf_r+0x63c>
 802ca88:	4a43      	ldr	r2, [pc, #268]	@ (802cb98 <_vfiprintf_r+0x764>)
 802ca8a:	e5c9      	b.n	802c620 <_vfiprintf_r+0x1ec>
 802ca8c:	46a8      	mov	r8, r5
 802ca8e:	f01a 0510 	ands.w	r5, sl, #16
 802ca92:	f858 4b04 	ldr.w	r4, [r8], #4
 802ca96:	d001      	beq.n	802ca9c <_vfiprintf_r+0x668>
 802ca98:	4615      	mov	r5, r2
 802ca9a:	e5cd      	b.n	802c638 <_vfiprintf_r+0x204>
 802ca9c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802caa0:	d001      	beq.n	802caa6 <_vfiprintf_r+0x672>
 802caa2:	b2a4      	uxth	r4, r4
 802caa4:	e5c8      	b.n	802c638 <_vfiprintf_r+0x204>
 802caa6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802caaa:	f43f adc5 	beq.w	802c638 <_vfiprintf_r+0x204>
 802caae:	b2e4      	uxtb	r4, r4
 802cab0:	e7f2      	b.n	802ca98 <_vfiprintf_r+0x664>
 802cab2:	2c0a      	cmp	r4, #10
 802cab4:	f175 0300 	sbcs.w	r3, r5, #0
 802cab8:	d206      	bcs.n	802cac8 <_vfiprintf_r+0x694>
 802caba:	3430      	adds	r4, #48	@ 0x30
 802cabc:	b2e4      	uxtb	r4, r4
 802cabe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802cac2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802cac6:	e131      	b.n	802cd2c <_vfiprintf_r+0x8f8>
 802cac8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802caca:	9308      	str	r3, [sp, #32]
 802cacc:	9b04      	ldr	r3, [sp, #16]
 802cace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802cad2:	f04f 0a00 	mov.w	sl, #0
 802cad6:	930a      	str	r3, [sp, #40]	@ 0x28
 802cad8:	220a      	movs	r2, #10
 802cada:	2300      	movs	r3, #0
 802cadc:	4620      	mov	r0, r4
 802cade:	4629      	mov	r1, r5
 802cae0:	f7e4 f93a 	bl	8010d58 <__aeabi_uldivmod>
 802cae4:	460b      	mov	r3, r1
 802cae6:	9908      	ldr	r1, [sp, #32]
 802cae8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802caea:	3230      	adds	r2, #48	@ 0x30
 802caec:	f801 2c01 	strb.w	r2, [r1, #-1]
 802caf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802caf2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802caf6:	f10a 0a01 	add.w	sl, sl, #1
 802cafa:	b1e2      	cbz	r2, 802cb36 <_vfiprintf_r+0x702>
 802cafc:	9a06      	ldr	r2, [sp, #24]
 802cafe:	7812      	ldrb	r2, [r2, #0]
 802cb00:	4552      	cmp	r2, sl
 802cb02:	d118      	bne.n	802cb36 <_vfiprintf_r+0x702>
 802cb04:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802cb08:	d015      	beq.n	802cb36 <_vfiprintf_r+0x702>
 802cb0a:	2c0a      	cmp	r4, #10
 802cb0c:	f175 0200 	sbcs.w	r2, r5, #0
 802cb10:	d311      	bcc.n	802cb36 <_vfiprintf_r+0x702>
 802cb12:	9308      	str	r3, [sp, #32]
 802cb14:	9b07      	ldr	r3, [sp, #28]
 802cb16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802cb18:	eba9 0903 	sub.w	r9, r9, r3
 802cb1c:	461a      	mov	r2, r3
 802cb1e:	4648      	mov	r0, r9
 802cb20:	f000 ff3d 	bl	802d99e <strncpy>
 802cb24:	9b06      	ldr	r3, [sp, #24]
 802cb26:	785a      	ldrb	r2, [r3, #1]
 802cb28:	9b08      	ldr	r3, [sp, #32]
 802cb2a:	b172      	cbz	r2, 802cb4a <_vfiprintf_r+0x716>
 802cb2c:	9a06      	ldr	r2, [sp, #24]
 802cb2e:	3201      	adds	r2, #1
 802cb30:	9206      	str	r2, [sp, #24]
 802cb32:	f04f 0a00 	mov.w	sl, #0
 802cb36:	2c0a      	cmp	r4, #10
 802cb38:	f175 0500 	sbcs.w	r5, r5, #0
 802cb3c:	f0c0 80f6 	bcc.w	802cd2c <_vfiprintf_r+0x8f8>
 802cb40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802cb42:	f8cd 9020 	str.w	r9, [sp, #32]
 802cb46:	461d      	mov	r5, r3
 802cb48:	e7c6      	b.n	802cad8 <_vfiprintf_r+0x6a4>
 802cb4a:	4692      	mov	sl, r2
 802cb4c:	e7f3      	b.n	802cb36 <_vfiprintf_r+0x702>
 802cb4e:	f004 030f 	and.w	r3, r4, #15
 802cb52:	9a05      	ldr	r2, [sp, #20]
 802cb54:	0924      	lsrs	r4, r4, #4
 802cb56:	5cd3      	ldrb	r3, [r2, r3]
 802cb58:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802cb5c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802cb60:	092d      	lsrs	r5, r5, #4
 802cb62:	ea54 0305 	orrs.w	r3, r4, r5
 802cb66:	d1f2      	bne.n	802cb4e <_vfiprintf_r+0x71a>
 802cb68:	e0e0      	b.n	802cd2c <_vfiprintf_r+0x8f8>
 802cb6a:	b923      	cbnz	r3, 802cb76 <_vfiprintf_r+0x742>
 802cb6c:	f01a 0f01 	tst.w	sl, #1
 802cb70:	d001      	beq.n	802cb76 <_vfiprintf_r+0x742>
 802cb72:	2430      	movs	r4, #48	@ 0x30
 802cb74:	e7a3      	b.n	802cabe <_vfiprintf_r+0x68a>
 802cb76:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802cb7a:	e0d7      	b.n	802cd2c <_vfiprintf_r+0x8f8>
 802cb7c:	2b00      	cmp	r3, #0
 802cb7e:	f000 80a3 	beq.w	802ccc8 <_vfiprintf_r+0x894>
 802cb82:	2400      	movs	r4, #0
 802cb84:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802cb88:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802cb8c:	46a8      	mov	r8, r5
 802cb8e:	e5e0      	b.n	802c752 <_vfiprintf_r+0x31e>
 802cb90:	0803d30f 	.word	0x0803d30f
 802cb94:	0803d2ff 	.word	0x0803d2ff
 802cb98:	0803d2cc 	.word	0x0803d2cc
 802cb9c:	2110      	movs	r1, #16
 802cb9e:	6071      	str	r1, [r6, #4]
 802cba0:	2a07      	cmp	r2, #7
 802cba2:	4461      	add	r1, ip
 802cba4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cba8:	dd08      	ble.n	802cbbc <_vfiprintf_r+0x788>
 802cbaa:	9800      	ldr	r0, [sp, #0]
 802cbac:	aa0e      	add	r2, sp, #56	@ 0x38
 802cbae:	4639      	mov	r1, r7
 802cbb0:	f7ff fc0e 	bl	802c3d0 <__sprint_r>
 802cbb4:	2800      	cmp	r0, #0
 802cbb6:	d166      	bne.n	802cc86 <_vfiprintf_r+0x852>
 802cbb8:	4b60      	ldr	r3, [pc, #384]	@ (802cd3c <_vfiprintf_r+0x908>)
 802cbba:	a811      	add	r0, sp, #68	@ 0x44
 802cbbc:	3d10      	subs	r5, #16
 802cbbe:	4606      	mov	r6, r0
 802cbc0:	e694      	b.n	802c8ec <_vfiprintf_r+0x4b8>
 802cbc2:	4606      	mov	r6, r0
 802cbc4:	e6ac      	b.n	802c920 <_vfiprintf_r+0x4ec>
 802cbc6:	9800      	ldr	r0, [sp, #0]
 802cbc8:	aa0e      	add	r2, sp, #56	@ 0x38
 802cbca:	4639      	mov	r1, r7
 802cbcc:	f7ff fc00 	bl	802c3d0 <__sprint_r>
 802cbd0:	2800      	cmp	r0, #0
 802cbd2:	d158      	bne.n	802cc86 <_vfiprintf_r+0x852>
 802cbd4:	ae11      	add	r6, sp, #68	@ 0x44
 802cbd6:	e6b5      	b.n	802c944 <_vfiprintf_r+0x510>
 802cbd8:	9800      	ldr	r0, [sp, #0]
 802cbda:	aa0e      	add	r2, sp, #56	@ 0x38
 802cbdc:	4639      	mov	r1, r7
 802cbde:	f7ff fbf7 	bl	802c3d0 <__sprint_r>
 802cbe2:	2800      	cmp	r0, #0
 802cbe4:	d14f      	bne.n	802cc86 <_vfiprintf_r+0x852>
 802cbe6:	ae11      	add	r6, sp, #68	@ 0x44
 802cbe8:	e6bc      	b.n	802c964 <_vfiprintf_r+0x530>
 802cbea:	2110      	movs	r1, #16
 802cbec:	6071      	str	r1, [r6, #4]
 802cbee:	2a07      	cmp	r2, #7
 802cbf0:	4461      	add	r1, ip
 802cbf2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cbf6:	dd08      	ble.n	802cc0a <_vfiprintf_r+0x7d6>
 802cbf8:	9800      	ldr	r0, [sp, #0]
 802cbfa:	aa0e      	add	r2, sp, #56	@ 0x38
 802cbfc:	4639      	mov	r1, r7
 802cbfe:	f7ff fbe7 	bl	802c3d0 <__sprint_r>
 802cc02:	2800      	cmp	r0, #0
 802cc04:	d13f      	bne.n	802cc86 <_vfiprintf_r+0x852>
 802cc06:	4b4e      	ldr	r3, [pc, #312]	@ (802cd40 <_vfiprintf_r+0x90c>)
 802cc08:	a811      	add	r0, sp, #68	@ 0x44
 802cc0a:	3d10      	subs	r5, #16
 802cc0c:	4606      	mov	r6, r0
 802cc0e:	e6b2      	b.n	802c976 <_vfiprintf_r+0x542>
 802cc10:	4606      	mov	r6, r0
 802cc12:	e6ca      	b.n	802c9aa <_vfiprintf_r+0x576>
 802cc14:	2010      	movs	r0, #16
 802cc16:	4402      	add	r2, r0
 802cc18:	2b07      	cmp	r3, #7
 802cc1a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802cc1e:	6070      	str	r0, [r6, #4]
 802cc20:	dd06      	ble.n	802cc30 <_vfiprintf_r+0x7fc>
 802cc22:	9800      	ldr	r0, [sp, #0]
 802cc24:	aa0e      	add	r2, sp, #56	@ 0x38
 802cc26:	4639      	mov	r1, r7
 802cc28:	f7ff fbd2 	bl	802c3d0 <__sprint_r>
 802cc2c:	bb58      	cbnz	r0, 802cc86 <_vfiprintf_r+0x852>
 802cc2e:	a911      	add	r1, sp, #68	@ 0x44
 802cc30:	3c10      	subs	r4, #16
 802cc32:	460e      	mov	r6, r1
 802cc34:	e6bd      	b.n	802c9b2 <_vfiprintf_r+0x57e>
 802cc36:	460e      	mov	r6, r1
 802cc38:	e6d6      	b.n	802c9e8 <_vfiprintf_r+0x5b4>
 802cc3a:	9800      	ldr	r0, [sp, #0]
 802cc3c:	aa0e      	add	r2, sp, #56	@ 0x38
 802cc3e:	4639      	mov	r1, r7
 802cc40:	f7ff fbc6 	bl	802c3d0 <__sprint_r>
 802cc44:	b9f8      	cbnz	r0, 802cc86 <_vfiprintf_r+0x852>
 802cc46:	ab11      	add	r3, sp, #68	@ 0x44
 802cc48:	e6de      	b.n	802ca08 <_vfiprintf_r+0x5d4>
 802cc4a:	9a02      	ldr	r2, [sp, #8]
 802cc4c:	9904      	ldr	r1, [sp, #16]
 802cc4e:	1a54      	subs	r4, r2, r1
 802cc50:	2c00      	cmp	r4, #0
 802cc52:	f77f aedd 	ble.w	802ca10 <_vfiprintf_r+0x5dc>
 802cc56:	4d39      	ldr	r5, [pc, #228]	@ (802cd3c <_vfiprintf_r+0x908>)
 802cc58:	2610      	movs	r6, #16
 802cc5a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802cc5e:	2c10      	cmp	r4, #16
 802cc60:	f102 0201 	add.w	r2, r2, #1
 802cc64:	601d      	str	r5, [r3, #0]
 802cc66:	dc1d      	bgt.n	802cca4 <_vfiprintf_r+0x870>
 802cc68:	605c      	str	r4, [r3, #4]
 802cc6a:	2a07      	cmp	r2, #7
 802cc6c:	440c      	add	r4, r1
 802cc6e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802cc72:	f77f aecd 	ble.w	802ca10 <_vfiprintf_r+0x5dc>
 802cc76:	9800      	ldr	r0, [sp, #0]
 802cc78:	aa0e      	add	r2, sp, #56	@ 0x38
 802cc7a:	4639      	mov	r1, r7
 802cc7c:	f7ff fba8 	bl	802c3d0 <__sprint_r>
 802cc80:	2800      	cmp	r0, #0
 802cc82:	f43f aec5 	beq.w	802ca10 <_vfiprintf_r+0x5dc>
 802cc86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802cc88:	07d9      	lsls	r1, r3, #31
 802cc8a:	d405      	bmi.n	802cc98 <_vfiprintf_r+0x864>
 802cc8c:	89bb      	ldrh	r3, [r7, #12]
 802cc8e:	059a      	lsls	r2, r3, #22
 802cc90:	d402      	bmi.n	802cc98 <_vfiprintf_r+0x864>
 802cc92:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802cc94:	f002 fba1 	bl	802f3da <__retarget_lock_release_recursive>
 802cc98:	89bb      	ldrh	r3, [r7, #12]
 802cc9a:	065b      	lsls	r3, r3, #25
 802cc9c:	f57f abfb 	bpl.w	802c496 <_vfiprintf_r+0x62>
 802cca0:	f7ff bbf6 	b.w	802c490 <_vfiprintf_r+0x5c>
 802cca4:	3110      	adds	r1, #16
 802cca6:	2a07      	cmp	r2, #7
 802cca8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ccac:	605e      	str	r6, [r3, #4]
 802ccae:	dc02      	bgt.n	802ccb6 <_vfiprintf_r+0x882>
 802ccb0:	3308      	adds	r3, #8
 802ccb2:	3c10      	subs	r4, #16
 802ccb4:	e7d1      	b.n	802cc5a <_vfiprintf_r+0x826>
 802ccb6:	9800      	ldr	r0, [sp, #0]
 802ccb8:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccba:	4639      	mov	r1, r7
 802ccbc:	f7ff fb88 	bl	802c3d0 <__sprint_r>
 802ccc0:	2800      	cmp	r0, #0
 802ccc2:	d1e0      	bne.n	802cc86 <_vfiprintf_r+0x852>
 802ccc4:	ab11      	add	r3, sp, #68	@ 0x44
 802ccc6:	e7f4      	b.n	802ccb2 <_vfiprintf_r+0x87e>
 802ccc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ccca:	b913      	cbnz	r3, 802ccd2 <_vfiprintf_r+0x89e>
 802cccc:	2300      	movs	r3, #0
 802ccce:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ccd0:	e7d9      	b.n	802cc86 <_vfiprintf_r+0x852>
 802ccd2:	9800      	ldr	r0, [sp, #0]
 802ccd4:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccd6:	4639      	mov	r1, r7
 802ccd8:	f7ff fb7a 	bl	802c3d0 <__sprint_r>
 802ccdc:	2800      	cmp	r0, #0
 802ccde:	d0f5      	beq.n	802cccc <_vfiprintf_r+0x898>
 802cce0:	e7d1      	b.n	802cc86 <_vfiprintf_r+0x852>
 802cce2:	ea54 0205 	orrs.w	r2, r4, r5
 802cce6:	f8cd a010 	str.w	sl, [sp, #16]
 802ccea:	f43f ada6 	beq.w	802c83a <_vfiprintf_r+0x406>
 802ccee:	2b01      	cmp	r3, #1
 802ccf0:	f43f aedf 	beq.w	802cab2 <_vfiprintf_r+0x67e>
 802ccf4:	2b02      	cmp	r3, #2
 802ccf6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802ccfa:	f43f af28 	beq.w	802cb4e <_vfiprintf_r+0x71a>
 802ccfe:	f004 0307 	and.w	r3, r4, #7
 802cd02:	08e4      	lsrs	r4, r4, #3
 802cd04:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802cd08:	08ed      	lsrs	r5, r5, #3
 802cd0a:	3330      	adds	r3, #48	@ 0x30
 802cd0c:	ea54 0105 	orrs.w	r1, r4, r5
 802cd10:	464a      	mov	r2, r9
 802cd12:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802cd16:	d1f2      	bne.n	802ccfe <_vfiprintf_r+0x8ca>
 802cd18:	9904      	ldr	r1, [sp, #16]
 802cd1a:	07c8      	lsls	r0, r1, #31
 802cd1c:	d506      	bpl.n	802cd2c <_vfiprintf_r+0x8f8>
 802cd1e:	2b30      	cmp	r3, #48	@ 0x30
 802cd20:	d004      	beq.n	802cd2c <_vfiprintf_r+0x8f8>
 802cd22:	2330      	movs	r3, #48	@ 0x30
 802cd24:	f809 3c01 	strb.w	r3, [r9, #-1]
 802cd28:	f1a2 0902 	sub.w	r9, r2, #2
 802cd2c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802cd2e:	eba3 0309 	sub.w	r3, r3, r9
 802cd32:	9c01      	ldr	r4, [sp, #4]
 802cd34:	f8dd a010 	ldr.w	sl, [sp, #16]
 802cd38:	9301      	str	r3, [sp, #4]
 802cd3a:	e5bb      	b.n	802c8b4 <_vfiprintf_r+0x480>
 802cd3c:	0803d30f 	.word	0x0803d30f
 802cd40:	0803d2ff 	.word	0x0803d2ff

0802cd44 <__sbprintf>:
 802cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cd46:	461f      	mov	r7, r3
 802cd48:	898b      	ldrh	r3, [r1, #12]
 802cd4a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802cd4e:	f023 0302 	bic.w	r3, r3, #2
 802cd52:	f8ad 300c 	strh.w	r3, [sp, #12]
 802cd56:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802cd58:	9319      	str	r3, [sp, #100]	@ 0x64
 802cd5a:	89cb      	ldrh	r3, [r1, #14]
 802cd5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802cd60:	69cb      	ldr	r3, [r1, #28]
 802cd62:	9307      	str	r3, [sp, #28]
 802cd64:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802cd66:	9309      	str	r3, [sp, #36]	@ 0x24
 802cd68:	ab1a      	add	r3, sp, #104	@ 0x68
 802cd6a:	9300      	str	r3, [sp, #0]
 802cd6c:	9304      	str	r3, [sp, #16]
 802cd6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802cd72:	4615      	mov	r5, r2
 802cd74:	4606      	mov	r6, r0
 802cd76:	9302      	str	r3, [sp, #8]
 802cd78:	9305      	str	r3, [sp, #20]
 802cd7a:	a816      	add	r0, sp, #88	@ 0x58
 802cd7c:	2300      	movs	r3, #0
 802cd7e:	460c      	mov	r4, r1
 802cd80:	9306      	str	r3, [sp, #24]
 802cd82:	f002 fb25 	bl	802f3d0 <__retarget_lock_init_recursive>
 802cd86:	462a      	mov	r2, r5
 802cd88:	463b      	mov	r3, r7
 802cd8a:	4669      	mov	r1, sp
 802cd8c:	4630      	mov	r0, r6
 802cd8e:	f7ff fb51 	bl	802c434 <_vfiprintf_r>
 802cd92:	1e05      	subs	r5, r0, #0
 802cd94:	db07      	blt.n	802cda6 <__sbprintf+0x62>
 802cd96:	4669      	mov	r1, sp
 802cd98:	4630      	mov	r0, r6
 802cd9a:	f000 f9d1 	bl	802d140 <_fflush_r>
 802cd9e:	2800      	cmp	r0, #0
 802cda0:	bf18      	it	ne
 802cda2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802cda6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802cdaa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802cdac:	065b      	lsls	r3, r3, #25
 802cdae:	bf42      	ittt	mi
 802cdb0:	89a3      	ldrhmi	r3, [r4, #12]
 802cdb2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802cdb6:	81a3      	strhmi	r3, [r4, #12]
 802cdb8:	f002 fb0b 	bl	802f3d2 <__retarget_lock_close_recursive>
 802cdbc:	4628      	mov	r0, r5
 802cdbe:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802cdc4 <putchar>:
 802cdc4:	4b02      	ldr	r3, [pc, #8]	@ (802cdd0 <putchar+0xc>)
 802cdc6:	4601      	mov	r1, r0
 802cdc8:	6818      	ldr	r0, [r3, #0]
 802cdca:	6882      	ldr	r2, [r0, #8]
 802cdcc:	f007 bdfc 	b.w	80349c8 <_putc_r>
 802cdd0:	200002d8 	.word	0x200002d8

0802cdd4 <_puts_r>:
 802cdd4:	b530      	push	{r4, r5, lr}
 802cdd6:	4605      	mov	r5, r0
 802cdd8:	b089      	sub	sp, #36	@ 0x24
 802cdda:	4608      	mov	r0, r1
 802cddc:	460c      	mov	r4, r1
 802cdde:	f7e3 fa5f 	bl	80102a0 <strlen>
 802cde2:	4b1e      	ldr	r3, [pc, #120]	@ (802ce5c <_puts_r+0x88>)
 802cde4:	9306      	str	r3, [sp, #24]
 802cde6:	2301      	movs	r3, #1
 802cde8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802cdec:	9307      	str	r3, [sp, #28]
 802cdee:	4418      	add	r0, r3
 802cdf0:	ab04      	add	r3, sp, #16
 802cdf2:	9301      	str	r3, [sp, #4]
 802cdf4:	2302      	movs	r3, #2
 802cdf6:	9302      	str	r3, [sp, #8]
 802cdf8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802cdfa:	68ac      	ldr	r4, [r5, #8]
 802cdfc:	9003      	str	r0, [sp, #12]
 802cdfe:	b913      	cbnz	r3, 802ce06 <_puts_r+0x32>
 802ce00:	4628      	mov	r0, r5
 802ce02:	f000 fadf 	bl	802d3c4 <__sinit>
 802ce06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce08:	07db      	lsls	r3, r3, #31
 802ce0a:	d405      	bmi.n	802ce18 <_puts_r+0x44>
 802ce0c:	89a3      	ldrh	r3, [r4, #12]
 802ce0e:	0598      	lsls	r0, r3, #22
 802ce10:	d402      	bmi.n	802ce18 <_puts_r+0x44>
 802ce12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce14:	f002 fadf 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 802ce18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ce1c:	0499      	lsls	r1, r3, #18
 802ce1e:	d406      	bmi.n	802ce2e <_puts_r+0x5a>
 802ce20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802ce24:	81a3      	strh	r3, [r4, #12]
 802ce26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802ce2c:	6663      	str	r3, [r4, #100]	@ 0x64
 802ce2e:	4628      	mov	r0, r5
 802ce30:	aa01      	add	r2, sp, #4
 802ce32:	4621      	mov	r1, r4
 802ce34:	f000 fb18 	bl	802d468 <__sfvwrite_r>
 802ce38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce3a:	2800      	cmp	r0, #0
 802ce3c:	bf0c      	ite	eq
 802ce3e:	250a      	moveq	r5, #10
 802ce40:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802ce44:	07da      	lsls	r2, r3, #31
 802ce46:	d405      	bmi.n	802ce54 <_puts_r+0x80>
 802ce48:	89a3      	ldrh	r3, [r4, #12]
 802ce4a:	059b      	lsls	r3, r3, #22
 802ce4c:	d402      	bmi.n	802ce54 <_puts_r+0x80>
 802ce4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce50:	f002 fac3 	bl	802f3da <__retarget_lock_release_recursive>
 802ce54:	4628      	mov	r0, r5
 802ce56:	b009      	add	sp, #36	@ 0x24
 802ce58:	bd30      	pop	{r4, r5, pc}
 802ce5a:	bf00      	nop
 802ce5c:	0803d2a9 	.word	0x0803d2a9

0802ce60 <puts>:
 802ce60:	4b02      	ldr	r3, [pc, #8]	@ (802ce6c <puts+0xc>)
 802ce62:	4601      	mov	r1, r0
 802ce64:	6818      	ldr	r0, [r3, #0]
 802ce66:	f7ff bfb5 	b.w	802cdd4 <_puts_r>
 802ce6a:	bf00      	nop
 802ce6c:	200002d8 	.word	0x200002d8

0802ce70 <srand>:
 802ce70:	4b03      	ldr	r3, [pc, #12]	@ (802ce80 <srand+0x10>)
 802ce72:	681b      	ldr	r3, [r3, #0]
 802ce74:	2200      	movs	r2, #0
 802ce76:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802ce7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802ce7e:	4770      	bx	lr
 802ce80:	200002d8 	.word	0x200002d8

0802ce84 <rand>:
 802ce84:	4b0a      	ldr	r3, [pc, #40]	@ (802ceb0 <rand+0x2c>)
 802ce86:	480b      	ldr	r0, [pc, #44]	@ (802ceb4 <rand+0x30>)
 802ce88:	6819      	ldr	r1, [r3, #0]
 802ce8a:	4a0b      	ldr	r2, [pc, #44]	@ (802ceb8 <rand+0x34>)
 802ce8c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802ce90:	b510      	push	{r4, lr}
 802ce92:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802ce96:	4358      	muls	r0, r3
 802ce98:	fb02 0004 	mla	r0, r2, r4, r0
 802ce9c:	fba3 3202 	umull	r3, r2, r3, r2
 802cea0:	3301      	adds	r3, #1
 802cea2:	eb40 0002 	adc.w	r0, r0, r2
 802cea6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802ceaa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802ceae:	bd10      	pop	{r4, pc}
 802ceb0:	200002d8 	.word	0x200002d8
 802ceb4:	5851f42d 	.word	0x5851f42d
 802ceb8:	4c957f2d 	.word	0x4c957f2d

0802cebc <snprintf>:
 802cebc:	b40c      	push	{r2, r3}
 802cebe:	b530      	push	{r4, r5, lr}
 802cec0:	4b17      	ldr	r3, [pc, #92]	@ (802cf20 <snprintf+0x64>)
 802cec2:	1e0c      	subs	r4, r1, #0
 802cec4:	681d      	ldr	r5, [r3, #0]
 802cec6:	b09d      	sub	sp, #116	@ 0x74
 802cec8:	da08      	bge.n	802cedc <snprintf+0x20>
 802ceca:	238b      	movs	r3, #139	@ 0x8b
 802cecc:	602b      	str	r3, [r5, #0]
 802cece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ced2:	b01d      	add	sp, #116	@ 0x74
 802ced4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ced8:	b002      	add	sp, #8
 802ceda:	4770      	bx	lr
 802cedc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802cee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802cee4:	bf14      	ite	ne
 802cee6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802ceea:	4623      	moveq	r3, r4
 802ceec:	9304      	str	r3, [sp, #16]
 802ceee:	9307      	str	r3, [sp, #28]
 802cef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802cef4:	9002      	str	r0, [sp, #8]
 802cef6:	9006      	str	r0, [sp, #24]
 802cef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802cefc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802cefe:	ab21      	add	r3, sp, #132	@ 0x84
 802cf00:	a902      	add	r1, sp, #8
 802cf02:	4628      	mov	r0, r5
 802cf04:	9301      	str	r3, [sp, #4]
 802cf06:	f005 f9ab 	bl	8032260 <_svfprintf_r>
 802cf0a:	1c43      	adds	r3, r0, #1
 802cf0c:	bfbc      	itt	lt
 802cf0e:	238b      	movlt	r3, #139	@ 0x8b
 802cf10:	602b      	strlt	r3, [r5, #0]
 802cf12:	2c00      	cmp	r4, #0
 802cf14:	d0dd      	beq.n	802ced2 <snprintf+0x16>
 802cf16:	9b02      	ldr	r3, [sp, #8]
 802cf18:	2200      	movs	r2, #0
 802cf1a:	701a      	strb	r2, [r3, #0]
 802cf1c:	e7d9      	b.n	802ced2 <snprintf+0x16>
 802cf1e:	bf00      	nop
 802cf20:	200002d8 	.word	0x200002d8

0802cf24 <_strtol_l.constprop.0>:
 802cf24:	2b24      	cmp	r3, #36	@ 0x24
 802cf26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cf2a:	4686      	mov	lr, r0
 802cf2c:	4690      	mov	r8, r2
 802cf2e:	d801      	bhi.n	802cf34 <_strtol_l.constprop.0+0x10>
 802cf30:	2b01      	cmp	r3, #1
 802cf32:	d106      	bne.n	802cf42 <_strtol_l.constprop.0+0x1e>
 802cf34:	f002 fa1a 	bl	802f36c <__errno>
 802cf38:	2316      	movs	r3, #22
 802cf3a:	6003      	str	r3, [r0, #0]
 802cf3c:	2000      	movs	r0, #0
 802cf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cf42:	4834      	ldr	r0, [pc, #208]	@ (802d014 <_strtol_l.constprop.0+0xf0>)
 802cf44:	460d      	mov	r5, r1
 802cf46:	462a      	mov	r2, r5
 802cf48:	f815 4b01 	ldrb.w	r4, [r5], #1
 802cf4c:	5d06      	ldrb	r6, [r0, r4]
 802cf4e:	f016 0608 	ands.w	r6, r6, #8
 802cf52:	d1f8      	bne.n	802cf46 <_strtol_l.constprop.0+0x22>
 802cf54:	2c2d      	cmp	r4, #45	@ 0x2d
 802cf56:	d12d      	bne.n	802cfb4 <_strtol_l.constprop.0+0x90>
 802cf58:	782c      	ldrb	r4, [r5, #0]
 802cf5a:	2601      	movs	r6, #1
 802cf5c:	1c95      	adds	r5, r2, #2
 802cf5e:	f033 0210 	bics.w	r2, r3, #16
 802cf62:	d109      	bne.n	802cf78 <_strtol_l.constprop.0+0x54>
 802cf64:	2c30      	cmp	r4, #48	@ 0x30
 802cf66:	d12a      	bne.n	802cfbe <_strtol_l.constprop.0+0x9a>
 802cf68:	782a      	ldrb	r2, [r5, #0]
 802cf6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802cf6e:	2a58      	cmp	r2, #88	@ 0x58
 802cf70:	d125      	bne.n	802cfbe <_strtol_l.constprop.0+0x9a>
 802cf72:	786c      	ldrb	r4, [r5, #1]
 802cf74:	2310      	movs	r3, #16
 802cf76:	3502      	adds	r5, #2
 802cf78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802cf7c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802cf80:	2200      	movs	r2, #0
 802cf82:	fbbc f9f3 	udiv	r9, ip, r3
 802cf86:	4610      	mov	r0, r2
 802cf88:	fb03 ca19 	mls	sl, r3, r9, ip
 802cf8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802cf90:	2f09      	cmp	r7, #9
 802cf92:	d81b      	bhi.n	802cfcc <_strtol_l.constprop.0+0xa8>
 802cf94:	463c      	mov	r4, r7
 802cf96:	42a3      	cmp	r3, r4
 802cf98:	dd27      	ble.n	802cfea <_strtol_l.constprop.0+0xc6>
 802cf9a:	1c57      	adds	r7, r2, #1
 802cf9c:	d007      	beq.n	802cfae <_strtol_l.constprop.0+0x8a>
 802cf9e:	4581      	cmp	r9, r0
 802cfa0:	d320      	bcc.n	802cfe4 <_strtol_l.constprop.0+0xc0>
 802cfa2:	d101      	bne.n	802cfa8 <_strtol_l.constprop.0+0x84>
 802cfa4:	45a2      	cmp	sl, r4
 802cfa6:	db1d      	blt.n	802cfe4 <_strtol_l.constprop.0+0xc0>
 802cfa8:	fb00 4003 	mla	r0, r0, r3, r4
 802cfac:	2201      	movs	r2, #1
 802cfae:	f815 4b01 	ldrb.w	r4, [r5], #1
 802cfb2:	e7eb      	b.n	802cf8c <_strtol_l.constprop.0+0x68>
 802cfb4:	2c2b      	cmp	r4, #43	@ 0x2b
 802cfb6:	bf04      	itt	eq
 802cfb8:	782c      	ldrbeq	r4, [r5, #0]
 802cfba:	1c95      	addeq	r5, r2, #2
 802cfbc:	e7cf      	b.n	802cf5e <_strtol_l.constprop.0+0x3a>
 802cfbe:	2b00      	cmp	r3, #0
 802cfc0:	d1da      	bne.n	802cf78 <_strtol_l.constprop.0+0x54>
 802cfc2:	2c30      	cmp	r4, #48	@ 0x30
 802cfc4:	bf0c      	ite	eq
 802cfc6:	2308      	moveq	r3, #8
 802cfc8:	230a      	movne	r3, #10
 802cfca:	e7d5      	b.n	802cf78 <_strtol_l.constprop.0+0x54>
 802cfcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802cfd0:	2f19      	cmp	r7, #25
 802cfd2:	d801      	bhi.n	802cfd8 <_strtol_l.constprop.0+0xb4>
 802cfd4:	3c37      	subs	r4, #55	@ 0x37
 802cfd6:	e7de      	b.n	802cf96 <_strtol_l.constprop.0+0x72>
 802cfd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802cfdc:	2f19      	cmp	r7, #25
 802cfde:	d804      	bhi.n	802cfea <_strtol_l.constprop.0+0xc6>
 802cfe0:	3c57      	subs	r4, #87	@ 0x57
 802cfe2:	e7d8      	b.n	802cf96 <_strtol_l.constprop.0+0x72>
 802cfe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802cfe8:	e7e1      	b.n	802cfae <_strtol_l.constprop.0+0x8a>
 802cfea:	1c53      	adds	r3, r2, #1
 802cfec:	d108      	bne.n	802d000 <_strtol_l.constprop.0+0xdc>
 802cfee:	2322      	movs	r3, #34	@ 0x22
 802cff0:	f8ce 3000 	str.w	r3, [lr]
 802cff4:	4660      	mov	r0, ip
 802cff6:	f1b8 0f00 	cmp.w	r8, #0
 802cffa:	d0a0      	beq.n	802cf3e <_strtol_l.constprop.0+0x1a>
 802cffc:	1e69      	subs	r1, r5, #1
 802cffe:	e006      	b.n	802d00e <_strtol_l.constprop.0+0xea>
 802d000:	b106      	cbz	r6, 802d004 <_strtol_l.constprop.0+0xe0>
 802d002:	4240      	negs	r0, r0
 802d004:	f1b8 0f00 	cmp.w	r8, #0
 802d008:	d099      	beq.n	802cf3e <_strtol_l.constprop.0+0x1a>
 802d00a:	2a00      	cmp	r2, #0
 802d00c:	d1f6      	bne.n	802cffc <_strtol_l.constprop.0+0xd8>
 802d00e:	f8c8 1000 	str.w	r1, [r8]
 802d012:	e794      	b.n	802cf3e <_strtol_l.constprop.0+0x1a>
 802d014:	0803d6c9 	.word	0x0803d6c9

0802d018 <_strtol_r>:
 802d018:	f7ff bf84 	b.w	802cf24 <_strtol_l.constprop.0>

0802d01c <strtol>:
 802d01c:	4613      	mov	r3, r2
 802d01e:	460a      	mov	r2, r1
 802d020:	4601      	mov	r1, r0
 802d022:	4802      	ldr	r0, [pc, #8]	@ (802d02c <strtol+0x10>)
 802d024:	6800      	ldr	r0, [r0, #0]
 802d026:	f7ff bf7d 	b.w	802cf24 <_strtol_l.constprop.0>
 802d02a:	bf00      	nop
 802d02c:	200002d8 	.word	0x200002d8

0802d030 <__sflush_r>:
 802d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d034:	4605      	mov	r5, r0
 802d036:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802d03a:	0706      	lsls	r6, r0, #28
 802d03c:	460c      	mov	r4, r1
 802d03e:	d457      	bmi.n	802d0f0 <__sflush_r+0xc0>
 802d040:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802d044:	818b      	strh	r3, [r1, #12]
 802d046:	684b      	ldr	r3, [r1, #4]
 802d048:	2b00      	cmp	r3, #0
 802d04a:	dc02      	bgt.n	802d052 <__sflush_r+0x22>
 802d04c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802d04e:	2b00      	cmp	r3, #0
 802d050:	dd4c      	ble.n	802d0ec <__sflush_r+0xbc>
 802d052:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d054:	2e00      	cmp	r6, #0
 802d056:	d049      	beq.n	802d0ec <__sflush_r+0xbc>
 802d058:	2300      	movs	r3, #0
 802d05a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802d05e:	682f      	ldr	r7, [r5, #0]
 802d060:	69e1      	ldr	r1, [r4, #28]
 802d062:	602b      	str	r3, [r5, #0]
 802d064:	d034      	beq.n	802d0d0 <__sflush_r+0xa0>
 802d066:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802d068:	89a3      	ldrh	r3, [r4, #12]
 802d06a:	0759      	lsls	r1, r3, #29
 802d06c:	d505      	bpl.n	802d07a <__sflush_r+0x4a>
 802d06e:	6863      	ldr	r3, [r4, #4]
 802d070:	1ad2      	subs	r2, r2, r3
 802d072:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802d074:	b10b      	cbz	r3, 802d07a <__sflush_r+0x4a>
 802d076:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802d078:	1ad2      	subs	r2, r2, r3
 802d07a:	2300      	movs	r3, #0
 802d07c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d07e:	69e1      	ldr	r1, [r4, #28]
 802d080:	4628      	mov	r0, r5
 802d082:	47b0      	blx	r6
 802d084:	1c43      	adds	r3, r0, #1
 802d086:	d106      	bne.n	802d096 <__sflush_r+0x66>
 802d088:	682a      	ldr	r2, [r5, #0]
 802d08a:	2a1d      	cmp	r2, #29
 802d08c:	d848      	bhi.n	802d120 <__sflush_r+0xf0>
 802d08e:	4b2b      	ldr	r3, [pc, #172]	@ (802d13c <__sflush_r+0x10c>)
 802d090:	4113      	asrs	r3, r2
 802d092:	07de      	lsls	r6, r3, #31
 802d094:	d444      	bmi.n	802d120 <__sflush_r+0xf0>
 802d096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d09a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802d09e:	81a2      	strh	r2, [r4, #12]
 802d0a0:	2200      	movs	r2, #0
 802d0a2:	6062      	str	r2, [r4, #4]
 802d0a4:	04d9      	lsls	r1, r3, #19
 802d0a6:	6922      	ldr	r2, [r4, #16]
 802d0a8:	6022      	str	r2, [r4, #0]
 802d0aa:	d504      	bpl.n	802d0b6 <__sflush_r+0x86>
 802d0ac:	1c42      	adds	r2, r0, #1
 802d0ae:	d101      	bne.n	802d0b4 <__sflush_r+0x84>
 802d0b0:	682b      	ldr	r3, [r5, #0]
 802d0b2:	b903      	cbnz	r3, 802d0b6 <__sflush_r+0x86>
 802d0b4:	6520      	str	r0, [r4, #80]	@ 0x50
 802d0b6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802d0b8:	602f      	str	r7, [r5, #0]
 802d0ba:	b1b9      	cbz	r1, 802d0ec <__sflush_r+0xbc>
 802d0bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802d0c0:	4299      	cmp	r1, r3
 802d0c2:	d002      	beq.n	802d0ca <__sflush_r+0x9a>
 802d0c4:	4628      	mov	r0, r5
 802d0c6:	f003 f891 	bl	80301ec <_free_r>
 802d0ca:	2300      	movs	r3, #0
 802d0cc:	6323      	str	r3, [r4, #48]	@ 0x30
 802d0ce:	e00d      	b.n	802d0ec <__sflush_r+0xbc>
 802d0d0:	2301      	movs	r3, #1
 802d0d2:	4628      	mov	r0, r5
 802d0d4:	47b0      	blx	r6
 802d0d6:	4602      	mov	r2, r0
 802d0d8:	1c50      	adds	r0, r2, #1
 802d0da:	d1c5      	bne.n	802d068 <__sflush_r+0x38>
 802d0dc:	682b      	ldr	r3, [r5, #0]
 802d0de:	2b00      	cmp	r3, #0
 802d0e0:	d0c2      	beq.n	802d068 <__sflush_r+0x38>
 802d0e2:	2b1d      	cmp	r3, #29
 802d0e4:	d001      	beq.n	802d0ea <__sflush_r+0xba>
 802d0e6:	2b16      	cmp	r3, #22
 802d0e8:	d11a      	bne.n	802d120 <__sflush_r+0xf0>
 802d0ea:	602f      	str	r7, [r5, #0]
 802d0ec:	2000      	movs	r0, #0
 802d0ee:	e01e      	b.n	802d12e <__sflush_r+0xfe>
 802d0f0:	690f      	ldr	r7, [r1, #16]
 802d0f2:	2f00      	cmp	r7, #0
 802d0f4:	d0fa      	beq.n	802d0ec <__sflush_r+0xbc>
 802d0f6:	0783      	lsls	r3, r0, #30
 802d0f8:	680e      	ldr	r6, [r1, #0]
 802d0fa:	bf08      	it	eq
 802d0fc:	694b      	ldreq	r3, [r1, #20]
 802d0fe:	600f      	str	r7, [r1, #0]
 802d100:	bf18      	it	ne
 802d102:	2300      	movne	r3, #0
 802d104:	eba6 0807 	sub.w	r8, r6, r7
 802d108:	608b      	str	r3, [r1, #8]
 802d10a:	f1b8 0f00 	cmp.w	r8, #0
 802d10e:	dded      	ble.n	802d0ec <__sflush_r+0xbc>
 802d110:	69e1      	ldr	r1, [r4, #28]
 802d112:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802d114:	4643      	mov	r3, r8
 802d116:	463a      	mov	r2, r7
 802d118:	4628      	mov	r0, r5
 802d11a:	47b0      	blx	r6
 802d11c:	2800      	cmp	r0, #0
 802d11e:	dc08      	bgt.n	802d132 <__sflush_r+0x102>
 802d120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d128:	81a3      	strh	r3, [r4, #12]
 802d12a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d132:	4407      	add	r7, r0
 802d134:	eba8 0800 	sub.w	r8, r8, r0
 802d138:	e7e7      	b.n	802d10a <__sflush_r+0xda>
 802d13a:	bf00      	nop
 802d13c:	dfbffffe 	.word	0xdfbffffe

0802d140 <_fflush_r>:
 802d140:	b538      	push	{r3, r4, r5, lr}
 802d142:	460c      	mov	r4, r1
 802d144:	4605      	mov	r5, r0
 802d146:	b118      	cbz	r0, 802d150 <_fflush_r+0x10>
 802d148:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802d14a:	b90b      	cbnz	r3, 802d150 <_fflush_r+0x10>
 802d14c:	f000 f93a 	bl	802d3c4 <__sinit>
 802d150:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802d154:	b1b8      	cbz	r0, 802d186 <_fflush_r+0x46>
 802d156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d158:	07db      	lsls	r3, r3, #31
 802d15a:	d404      	bmi.n	802d166 <_fflush_r+0x26>
 802d15c:	0581      	lsls	r1, r0, #22
 802d15e:	d402      	bmi.n	802d166 <_fflush_r+0x26>
 802d160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d162:	f002 f938 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 802d166:	4628      	mov	r0, r5
 802d168:	4621      	mov	r1, r4
 802d16a:	f7ff ff61 	bl	802d030 <__sflush_r>
 802d16e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d170:	07da      	lsls	r2, r3, #31
 802d172:	4605      	mov	r5, r0
 802d174:	d405      	bmi.n	802d182 <_fflush_r+0x42>
 802d176:	89a3      	ldrh	r3, [r4, #12]
 802d178:	059b      	lsls	r3, r3, #22
 802d17a:	d402      	bmi.n	802d182 <_fflush_r+0x42>
 802d17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d17e:	f002 f92c 	bl	802f3da <__retarget_lock_release_recursive>
 802d182:	4628      	mov	r0, r5
 802d184:	bd38      	pop	{r3, r4, r5, pc}
 802d186:	4605      	mov	r5, r0
 802d188:	e7fb      	b.n	802d182 <_fflush_r+0x42>
	...

0802d18c <sprintf>:
 802d18c:	b40e      	push	{r1, r2, r3}
 802d18e:	b500      	push	{lr}
 802d190:	b09c      	sub	sp, #112	@ 0x70
 802d192:	ab1d      	add	r3, sp, #116	@ 0x74
 802d194:	9002      	str	r0, [sp, #8]
 802d196:	9006      	str	r0, [sp, #24]
 802d198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802d19c:	4809      	ldr	r0, [pc, #36]	@ (802d1c4 <sprintf+0x38>)
 802d19e:	9107      	str	r1, [sp, #28]
 802d1a0:	9104      	str	r1, [sp, #16]
 802d1a2:	4909      	ldr	r1, [pc, #36]	@ (802d1c8 <sprintf+0x3c>)
 802d1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 802d1a8:	9105      	str	r1, [sp, #20]
 802d1aa:	6800      	ldr	r0, [r0, #0]
 802d1ac:	9301      	str	r3, [sp, #4]
 802d1ae:	a902      	add	r1, sp, #8
 802d1b0:	f005 f856 	bl	8032260 <_svfprintf_r>
 802d1b4:	9b02      	ldr	r3, [sp, #8]
 802d1b6:	2200      	movs	r2, #0
 802d1b8:	701a      	strb	r2, [r3, #0]
 802d1ba:	b01c      	add	sp, #112	@ 0x70
 802d1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 802d1c0:	b003      	add	sp, #12
 802d1c2:	4770      	bx	lr
 802d1c4:	200002d8 	.word	0x200002d8
 802d1c8:	ffff0208 	.word	0xffff0208

0802d1cc <sscanf>:
 802d1cc:	b40e      	push	{r1, r2, r3}
 802d1ce:	b530      	push	{r4, r5, lr}
 802d1d0:	b09c      	sub	sp, #112	@ 0x70
 802d1d2:	ac1f      	add	r4, sp, #124	@ 0x7c
 802d1d4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802d1d8:	f854 5b04 	ldr.w	r5, [r4], #4
 802d1dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 802d1e0:	9002      	str	r0, [sp, #8]
 802d1e2:	9006      	str	r0, [sp, #24]
 802d1e4:	f7e3 f85c 	bl	80102a0 <strlen>
 802d1e8:	4b0b      	ldr	r3, [pc, #44]	@ (802d218 <sscanf+0x4c>)
 802d1ea:	9003      	str	r0, [sp, #12]
 802d1ec:	9007      	str	r0, [sp, #28]
 802d1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 802d1f0:	480a      	ldr	r0, [pc, #40]	@ (802d21c <sscanf+0x50>)
 802d1f2:	9401      	str	r4, [sp, #4]
 802d1f4:	2300      	movs	r3, #0
 802d1f6:	930e      	str	r3, [sp, #56]	@ 0x38
 802d1f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d1fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802d1fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d202:	462a      	mov	r2, r5
 802d204:	4623      	mov	r3, r4
 802d206:	a902      	add	r1, sp, #8
 802d208:	6800      	ldr	r0, [r0, #0]
 802d20a:	f006 fa6b 	bl	80336e4 <__ssvfscanf_r>
 802d20e:	b01c      	add	sp, #112	@ 0x70
 802d210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d214:	b003      	add	sp, #12
 802d216:	4770      	bx	lr
 802d218:	0802d243 	.word	0x0802d243
 802d21c:	200002d8 	.word	0x200002d8

0802d220 <__sread>:
 802d220:	b510      	push	{r4, lr}
 802d222:	460c      	mov	r4, r1
 802d224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d228:	f002 f87c 	bl	802f324 <_read_r>
 802d22c:	2800      	cmp	r0, #0
 802d22e:	bfab      	itete	ge
 802d230:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802d232:	89a3      	ldrhlt	r3, [r4, #12]
 802d234:	181b      	addge	r3, r3, r0
 802d236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802d23a:	bfac      	ite	ge
 802d23c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802d23e:	81a3      	strhlt	r3, [r4, #12]
 802d240:	bd10      	pop	{r4, pc}

0802d242 <__seofread>:
 802d242:	2000      	movs	r0, #0
 802d244:	4770      	bx	lr

0802d246 <__swrite>:
 802d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d24a:	461f      	mov	r7, r3
 802d24c:	898b      	ldrh	r3, [r1, #12]
 802d24e:	05db      	lsls	r3, r3, #23
 802d250:	4605      	mov	r5, r0
 802d252:	460c      	mov	r4, r1
 802d254:	4616      	mov	r6, r2
 802d256:	d505      	bpl.n	802d264 <__swrite+0x1e>
 802d258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d25c:	2302      	movs	r3, #2
 802d25e:	2200      	movs	r2, #0
 802d260:	f002 f84e 	bl	802f300 <_lseek_r>
 802d264:	89a3      	ldrh	r3, [r4, #12]
 802d266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d26a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802d26e:	81a3      	strh	r3, [r4, #12]
 802d270:	4632      	mov	r2, r6
 802d272:	463b      	mov	r3, r7
 802d274:	4628      	mov	r0, r5
 802d276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d27a:	f002 b865 	b.w	802f348 <_write_r>

0802d27e <__sseek>:
 802d27e:	b510      	push	{r4, lr}
 802d280:	460c      	mov	r4, r1
 802d282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d286:	f002 f83b 	bl	802f300 <_lseek_r>
 802d28a:	1c43      	adds	r3, r0, #1
 802d28c:	89a3      	ldrh	r3, [r4, #12]
 802d28e:	bf15      	itete	ne
 802d290:	6520      	strne	r0, [r4, #80]	@ 0x50
 802d292:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802d296:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802d29a:	81a3      	strheq	r3, [r4, #12]
 802d29c:	bf18      	it	ne
 802d29e:	81a3      	strhne	r3, [r4, #12]
 802d2a0:	bd10      	pop	{r4, pc}

0802d2a2 <__sclose>:
 802d2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d2a6:	f001 bfef 	b.w	802f288 <_close_r>
	...

0802d2ac <std>:
 802d2ac:	2300      	movs	r3, #0
 802d2ae:	b510      	push	{r4, lr}
 802d2b0:	4604      	mov	r4, r0
 802d2b2:	e9c0 3300 	strd	r3, r3, [r0]
 802d2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d2ba:	6083      	str	r3, [r0, #8]
 802d2bc:	8181      	strh	r1, [r0, #12]
 802d2be:	6643      	str	r3, [r0, #100]	@ 0x64
 802d2c0:	81c2      	strh	r2, [r0, #14]
 802d2c2:	6183      	str	r3, [r0, #24]
 802d2c4:	4619      	mov	r1, r3
 802d2c6:	2208      	movs	r2, #8
 802d2c8:	305c      	adds	r0, #92	@ 0x5c
 802d2ca:	f000 fb21 	bl	802d910 <memset>
 802d2ce:	4b0d      	ldr	r3, [pc, #52]	@ (802d304 <std+0x58>)
 802d2d0:	6223      	str	r3, [r4, #32]
 802d2d2:	4b0d      	ldr	r3, [pc, #52]	@ (802d308 <std+0x5c>)
 802d2d4:	6263      	str	r3, [r4, #36]	@ 0x24
 802d2d6:	4b0d      	ldr	r3, [pc, #52]	@ (802d30c <std+0x60>)
 802d2d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d2da:	4b0d      	ldr	r3, [pc, #52]	@ (802d310 <std+0x64>)
 802d2dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802d2de:	4b0d      	ldr	r3, [pc, #52]	@ (802d314 <std+0x68>)
 802d2e0:	61e4      	str	r4, [r4, #28]
 802d2e2:	429c      	cmp	r4, r3
 802d2e4:	d006      	beq.n	802d2f4 <std+0x48>
 802d2e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802d2ea:	4294      	cmp	r4, r2
 802d2ec:	d002      	beq.n	802d2f4 <std+0x48>
 802d2ee:	33d0      	adds	r3, #208	@ 0xd0
 802d2f0:	429c      	cmp	r4, r3
 802d2f2:	d105      	bne.n	802d300 <std+0x54>
 802d2f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802d2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d2fc:	f002 b868 	b.w	802f3d0 <__retarget_lock_init_recursive>
 802d300:	bd10      	pop	{r4, pc}
 802d302:	bf00      	nop
 802d304:	0802d221 	.word	0x0802d221
 802d308:	0802d247 	.word	0x0802d247
 802d30c:	0802d27f 	.word	0x0802d27f
 802d310:	0802d2a3 	.word	0x0802d2a3
 802d314:	20019fa4 	.word	0x20019fa4

0802d318 <stdio_exit_handler>:
 802d318:	4a02      	ldr	r2, [pc, #8]	@ (802d324 <stdio_exit_handler+0xc>)
 802d31a:	4903      	ldr	r1, [pc, #12]	@ (802d328 <stdio_exit_handler+0x10>)
 802d31c:	4803      	ldr	r0, [pc, #12]	@ (802d32c <stdio_exit_handler+0x14>)
 802d31e:	f000 b9ef 	b.w	802d700 <_fwalk_sglue>
 802d322:	bf00      	nop
 802d324:	20000158 	.word	0x20000158
 802d328:	08035321 	.word	0x08035321
 802d32c:	200002e0 	.word	0x200002e0

0802d330 <cleanup_stdio>:
 802d330:	6841      	ldr	r1, [r0, #4]
 802d332:	4b0c      	ldr	r3, [pc, #48]	@ (802d364 <cleanup_stdio+0x34>)
 802d334:	4299      	cmp	r1, r3
 802d336:	b510      	push	{r4, lr}
 802d338:	4604      	mov	r4, r0
 802d33a:	d001      	beq.n	802d340 <cleanup_stdio+0x10>
 802d33c:	f007 fff0 	bl	8035320 <_fclose_r>
 802d340:	68a1      	ldr	r1, [r4, #8]
 802d342:	4b09      	ldr	r3, [pc, #36]	@ (802d368 <cleanup_stdio+0x38>)
 802d344:	4299      	cmp	r1, r3
 802d346:	d002      	beq.n	802d34e <cleanup_stdio+0x1e>
 802d348:	4620      	mov	r0, r4
 802d34a:	f007 ffe9 	bl	8035320 <_fclose_r>
 802d34e:	68e1      	ldr	r1, [r4, #12]
 802d350:	4b06      	ldr	r3, [pc, #24]	@ (802d36c <cleanup_stdio+0x3c>)
 802d352:	4299      	cmp	r1, r3
 802d354:	d004      	beq.n	802d360 <cleanup_stdio+0x30>
 802d356:	4620      	mov	r0, r4
 802d358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d35c:	f007 bfe0 	b.w	8035320 <_fclose_r>
 802d360:	bd10      	pop	{r4, pc}
 802d362:	bf00      	nop
 802d364:	20019fa4 	.word	0x20019fa4
 802d368:	2001a00c 	.word	0x2001a00c
 802d36c:	2001a074 	.word	0x2001a074

0802d370 <global_stdio_init.part.0>:
 802d370:	b510      	push	{r4, lr}
 802d372:	4b0b      	ldr	r3, [pc, #44]	@ (802d3a0 <global_stdio_init.part.0+0x30>)
 802d374:	4c0b      	ldr	r4, [pc, #44]	@ (802d3a4 <global_stdio_init.part.0+0x34>)
 802d376:	4a0c      	ldr	r2, [pc, #48]	@ (802d3a8 <global_stdio_init.part.0+0x38>)
 802d378:	601a      	str	r2, [r3, #0]
 802d37a:	4620      	mov	r0, r4
 802d37c:	2200      	movs	r2, #0
 802d37e:	2104      	movs	r1, #4
 802d380:	f7ff ff94 	bl	802d2ac <std>
 802d384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802d388:	2201      	movs	r2, #1
 802d38a:	2109      	movs	r1, #9
 802d38c:	f7ff ff8e 	bl	802d2ac <std>
 802d390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802d394:	2202      	movs	r2, #2
 802d396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d39a:	2112      	movs	r1, #18
 802d39c:	f7ff bf86 	b.w	802d2ac <std>
 802d3a0:	2001a0dc 	.word	0x2001a0dc
 802d3a4:	20019fa4 	.word	0x20019fa4
 802d3a8:	0802d319 	.word	0x0802d319

0802d3ac <__sfp_lock_acquire>:
 802d3ac:	4801      	ldr	r0, [pc, #4]	@ (802d3b4 <__sfp_lock_acquire+0x8>)
 802d3ae:	f002 b812 	b.w	802f3d6 <__retarget_lock_acquire_recursive>
 802d3b2:	bf00      	nop
 802d3b4:	2001a10c 	.word	0x2001a10c

0802d3b8 <__sfp_lock_release>:
 802d3b8:	4801      	ldr	r0, [pc, #4]	@ (802d3c0 <__sfp_lock_release+0x8>)
 802d3ba:	f002 b80e 	b.w	802f3da <__retarget_lock_release_recursive>
 802d3be:	bf00      	nop
 802d3c0:	2001a10c 	.word	0x2001a10c

0802d3c4 <__sinit>:
 802d3c4:	b510      	push	{r4, lr}
 802d3c6:	4604      	mov	r4, r0
 802d3c8:	f7ff fff0 	bl	802d3ac <__sfp_lock_acquire>
 802d3cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d3ce:	b11b      	cbz	r3, 802d3d8 <__sinit+0x14>
 802d3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d3d4:	f7ff bff0 	b.w	802d3b8 <__sfp_lock_release>
 802d3d8:	4b04      	ldr	r3, [pc, #16]	@ (802d3ec <__sinit+0x28>)
 802d3da:	6363      	str	r3, [r4, #52]	@ 0x34
 802d3dc:	4b04      	ldr	r3, [pc, #16]	@ (802d3f0 <__sinit+0x2c>)
 802d3de:	681b      	ldr	r3, [r3, #0]
 802d3e0:	2b00      	cmp	r3, #0
 802d3e2:	d1f5      	bne.n	802d3d0 <__sinit+0xc>
 802d3e4:	f7ff ffc4 	bl	802d370 <global_stdio_init.part.0>
 802d3e8:	e7f2      	b.n	802d3d0 <__sinit+0xc>
 802d3ea:	bf00      	nop
 802d3ec:	0802d331 	.word	0x0802d331
 802d3f0:	2001a0dc 	.word	0x2001a0dc

0802d3f4 <_vsnprintf_r>:
 802d3f4:	b530      	push	{r4, r5, lr}
 802d3f6:	4614      	mov	r4, r2
 802d3f8:	2c00      	cmp	r4, #0
 802d3fa:	b09b      	sub	sp, #108	@ 0x6c
 802d3fc:	4605      	mov	r5, r0
 802d3fe:	461a      	mov	r2, r3
 802d400:	da05      	bge.n	802d40e <_vsnprintf_r+0x1a>
 802d402:	238b      	movs	r3, #139	@ 0x8b
 802d404:	6003      	str	r3, [r0, #0]
 802d406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d40a:	b01b      	add	sp, #108	@ 0x6c
 802d40c:	bd30      	pop	{r4, r5, pc}
 802d40e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802d412:	f8ad 300c 	strh.w	r3, [sp, #12]
 802d416:	bf14      	ite	ne
 802d418:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802d41c:	4623      	moveq	r3, r4
 802d41e:	9302      	str	r3, [sp, #8]
 802d420:	9305      	str	r3, [sp, #20]
 802d422:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802d426:	9100      	str	r1, [sp, #0]
 802d428:	9104      	str	r1, [sp, #16]
 802d42a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d42e:	4669      	mov	r1, sp
 802d430:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802d432:	f004 ff15 	bl	8032260 <_svfprintf_r>
 802d436:	1c43      	adds	r3, r0, #1
 802d438:	bfbc      	itt	lt
 802d43a:	238b      	movlt	r3, #139	@ 0x8b
 802d43c:	602b      	strlt	r3, [r5, #0]
 802d43e:	2c00      	cmp	r4, #0
 802d440:	d0e3      	beq.n	802d40a <_vsnprintf_r+0x16>
 802d442:	9b00      	ldr	r3, [sp, #0]
 802d444:	2200      	movs	r2, #0
 802d446:	701a      	strb	r2, [r3, #0]
 802d448:	e7df      	b.n	802d40a <_vsnprintf_r+0x16>
	...

0802d44c <vsnprintf>:
 802d44c:	b507      	push	{r0, r1, r2, lr}
 802d44e:	9300      	str	r3, [sp, #0]
 802d450:	4613      	mov	r3, r2
 802d452:	460a      	mov	r2, r1
 802d454:	4601      	mov	r1, r0
 802d456:	4803      	ldr	r0, [pc, #12]	@ (802d464 <vsnprintf+0x18>)
 802d458:	6800      	ldr	r0, [r0, #0]
 802d45a:	f7ff ffcb 	bl	802d3f4 <_vsnprintf_r>
 802d45e:	b003      	add	sp, #12
 802d460:	f85d fb04 	ldr.w	pc, [sp], #4
 802d464:	200002d8 	.word	0x200002d8

0802d468 <__sfvwrite_r>:
 802d468:	6893      	ldr	r3, [r2, #8]
 802d46a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d46e:	4606      	mov	r6, r0
 802d470:	460c      	mov	r4, r1
 802d472:	4691      	mov	r9, r2
 802d474:	b91b      	cbnz	r3, 802d47e <__sfvwrite_r+0x16>
 802d476:	2000      	movs	r0, #0
 802d478:	b003      	add	sp, #12
 802d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d47e:	898b      	ldrh	r3, [r1, #12]
 802d480:	0718      	lsls	r0, r3, #28
 802d482:	d550      	bpl.n	802d526 <__sfvwrite_r+0xbe>
 802d484:	690b      	ldr	r3, [r1, #16]
 802d486:	2b00      	cmp	r3, #0
 802d488:	d04d      	beq.n	802d526 <__sfvwrite_r+0xbe>
 802d48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d48e:	f8d9 8000 	ldr.w	r8, [r9]
 802d492:	f013 0702 	ands.w	r7, r3, #2
 802d496:	d16b      	bne.n	802d570 <__sfvwrite_r+0x108>
 802d498:	f013 0301 	ands.w	r3, r3, #1
 802d49c:	f000 809c 	beq.w	802d5d8 <__sfvwrite_r+0x170>
 802d4a0:	4638      	mov	r0, r7
 802d4a2:	46ba      	mov	sl, r7
 802d4a4:	46bb      	mov	fp, r7
 802d4a6:	f1bb 0f00 	cmp.w	fp, #0
 802d4aa:	f000 8103 	beq.w	802d6b4 <__sfvwrite_r+0x24c>
 802d4ae:	b950      	cbnz	r0, 802d4c6 <__sfvwrite_r+0x5e>
 802d4b0:	465a      	mov	r2, fp
 802d4b2:	210a      	movs	r1, #10
 802d4b4:	4650      	mov	r0, sl
 802d4b6:	f7e2 fea3 	bl	8010200 <memchr>
 802d4ba:	2800      	cmp	r0, #0
 802d4bc:	f000 8100 	beq.w	802d6c0 <__sfvwrite_r+0x258>
 802d4c0:	3001      	adds	r0, #1
 802d4c2:	eba0 070a 	sub.w	r7, r0, sl
 802d4c6:	6820      	ldr	r0, [r4, #0]
 802d4c8:	6921      	ldr	r1, [r4, #16]
 802d4ca:	68a5      	ldr	r5, [r4, #8]
 802d4cc:	6963      	ldr	r3, [r4, #20]
 802d4ce:	455f      	cmp	r7, fp
 802d4d0:	463a      	mov	r2, r7
 802d4d2:	bf28      	it	cs
 802d4d4:	465a      	movcs	r2, fp
 802d4d6:	4288      	cmp	r0, r1
 802d4d8:	f240 80f5 	bls.w	802d6c6 <__sfvwrite_r+0x25e>
 802d4dc:	441d      	add	r5, r3
 802d4de:	42aa      	cmp	r2, r5
 802d4e0:	f340 80f1 	ble.w	802d6c6 <__sfvwrite_r+0x25e>
 802d4e4:	4651      	mov	r1, sl
 802d4e6:	462a      	mov	r2, r5
 802d4e8:	f000 f9f8 	bl	802d8dc <memmove>
 802d4ec:	6823      	ldr	r3, [r4, #0]
 802d4ee:	442b      	add	r3, r5
 802d4f0:	6023      	str	r3, [r4, #0]
 802d4f2:	4621      	mov	r1, r4
 802d4f4:	4630      	mov	r0, r6
 802d4f6:	f7ff fe23 	bl	802d140 <_fflush_r>
 802d4fa:	2800      	cmp	r0, #0
 802d4fc:	d167      	bne.n	802d5ce <__sfvwrite_r+0x166>
 802d4fe:	1b7f      	subs	r7, r7, r5
 802d500:	f040 80f9 	bne.w	802d6f6 <__sfvwrite_r+0x28e>
 802d504:	4621      	mov	r1, r4
 802d506:	4630      	mov	r0, r6
 802d508:	f7ff fe1a 	bl	802d140 <_fflush_r>
 802d50c:	2800      	cmp	r0, #0
 802d50e:	d15e      	bne.n	802d5ce <__sfvwrite_r+0x166>
 802d510:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802d514:	1b5b      	subs	r3, r3, r5
 802d516:	44aa      	add	sl, r5
 802d518:	ebab 0b05 	sub.w	fp, fp, r5
 802d51c:	f8c9 3008 	str.w	r3, [r9, #8]
 802d520:	2b00      	cmp	r3, #0
 802d522:	d1c0      	bne.n	802d4a6 <__sfvwrite_r+0x3e>
 802d524:	e7a7      	b.n	802d476 <__sfvwrite_r+0xe>
 802d526:	4621      	mov	r1, r4
 802d528:	4630      	mov	r0, r6
 802d52a:	f000 f907 	bl	802d73c <__swsetup_r>
 802d52e:	2800      	cmp	r0, #0
 802d530:	d0ab      	beq.n	802d48a <__sfvwrite_r+0x22>
 802d532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d536:	e79f      	b.n	802d478 <__sfvwrite_r+0x10>
 802d538:	e9d8 a500 	ldrd	sl, r5, [r8]
 802d53c:	f108 0808 	add.w	r8, r8, #8
 802d540:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802d544:	69e1      	ldr	r1, [r4, #28]
 802d546:	2d00      	cmp	r5, #0
 802d548:	d0f6      	beq.n	802d538 <__sfvwrite_r+0xd0>
 802d54a:	42bd      	cmp	r5, r7
 802d54c:	462b      	mov	r3, r5
 802d54e:	4652      	mov	r2, sl
 802d550:	bf28      	it	cs
 802d552:	463b      	movcs	r3, r7
 802d554:	4630      	mov	r0, r6
 802d556:	47d8      	blx	fp
 802d558:	2800      	cmp	r0, #0
 802d55a:	dd38      	ble.n	802d5ce <__sfvwrite_r+0x166>
 802d55c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802d560:	1a1b      	subs	r3, r3, r0
 802d562:	4482      	add	sl, r0
 802d564:	1a2d      	subs	r5, r5, r0
 802d566:	f8c9 3008 	str.w	r3, [r9, #8]
 802d56a:	2b00      	cmp	r3, #0
 802d56c:	d1e8      	bne.n	802d540 <__sfvwrite_r+0xd8>
 802d56e:	e782      	b.n	802d476 <__sfvwrite_r+0xe>
 802d570:	f04f 0a00 	mov.w	sl, #0
 802d574:	4f61      	ldr	r7, [pc, #388]	@ (802d6fc <__sfvwrite_r+0x294>)
 802d576:	4655      	mov	r5, sl
 802d578:	e7e2      	b.n	802d540 <__sfvwrite_r+0xd8>
 802d57a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802d57e:	f108 0808 	add.w	r8, r8, #8
 802d582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d586:	6820      	ldr	r0, [r4, #0]
 802d588:	68a2      	ldr	r2, [r4, #8]
 802d58a:	f1ba 0f00 	cmp.w	sl, #0
 802d58e:	d0f4      	beq.n	802d57a <__sfvwrite_r+0x112>
 802d590:	0599      	lsls	r1, r3, #22
 802d592:	d563      	bpl.n	802d65c <__sfvwrite_r+0x1f4>
 802d594:	4552      	cmp	r2, sl
 802d596:	d836      	bhi.n	802d606 <__sfvwrite_r+0x19e>
 802d598:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802d59c:	d033      	beq.n	802d606 <__sfvwrite_r+0x19e>
 802d59e:	6921      	ldr	r1, [r4, #16]
 802d5a0:	6965      	ldr	r5, [r4, #20]
 802d5a2:	eba0 0b01 	sub.w	fp, r0, r1
 802d5a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d5aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d5ae:	f10b 0201 	add.w	r2, fp, #1
 802d5b2:	106d      	asrs	r5, r5, #1
 802d5b4:	4452      	add	r2, sl
 802d5b6:	4295      	cmp	r5, r2
 802d5b8:	bf38      	it	cc
 802d5ba:	4615      	movcc	r5, r2
 802d5bc:	055b      	lsls	r3, r3, #21
 802d5be:	d53d      	bpl.n	802d63c <__sfvwrite_r+0x1d4>
 802d5c0:	4629      	mov	r1, r5
 802d5c2:	4630      	mov	r0, r6
 802d5c4:	f002 ff2a 	bl	803041c <_malloc_r>
 802d5c8:	b948      	cbnz	r0, 802d5de <__sfvwrite_r+0x176>
 802d5ca:	230c      	movs	r3, #12
 802d5cc:	6033      	str	r3, [r6, #0]
 802d5ce:	89a3      	ldrh	r3, [r4, #12]
 802d5d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d5d4:	81a3      	strh	r3, [r4, #12]
 802d5d6:	e7ac      	b.n	802d532 <__sfvwrite_r+0xca>
 802d5d8:	461f      	mov	r7, r3
 802d5da:	469a      	mov	sl, r3
 802d5dc:	e7d1      	b.n	802d582 <__sfvwrite_r+0x11a>
 802d5de:	465a      	mov	r2, fp
 802d5e0:	6921      	ldr	r1, [r4, #16]
 802d5e2:	9001      	str	r0, [sp, #4]
 802d5e4:	f001 fefa 	bl	802f3dc <memcpy>
 802d5e8:	89a2      	ldrh	r2, [r4, #12]
 802d5ea:	9b01      	ldr	r3, [sp, #4]
 802d5ec:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802d5f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802d5f4:	81a2      	strh	r2, [r4, #12]
 802d5f6:	6123      	str	r3, [r4, #16]
 802d5f8:	6165      	str	r5, [r4, #20]
 802d5fa:	445b      	add	r3, fp
 802d5fc:	eba5 050b 	sub.w	r5, r5, fp
 802d600:	6023      	str	r3, [r4, #0]
 802d602:	4652      	mov	r2, sl
 802d604:	60a5      	str	r5, [r4, #8]
 802d606:	4552      	cmp	r2, sl
 802d608:	bf28      	it	cs
 802d60a:	4652      	movcs	r2, sl
 802d60c:	6820      	ldr	r0, [r4, #0]
 802d60e:	9201      	str	r2, [sp, #4]
 802d610:	4639      	mov	r1, r7
 802d612:	f000 f963 	bl	802d8dc <memmove>
 802d616:	68a3      	ldr	r3, [r4, #8]
 802d618:	9a01      	ldr	r2, [sp, #4]
 802d61a:	1a9b      	subs	r3, r3, r2
 802d61c:	60a3      	str	r3, [r4, #8]
 802d61e:	6823      	ldr	r3, [r4, #0]
 802d620:	4413      	add	r3, r2
 802d622:	4655      	mov	r5, sl
 802d624:	6023      	str	r3, [r4, #0]
 802d626:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802d62a:	1b5b      	subs	r3, r3, r5
 802d62c:	442f      	add	r7, r5
 802d62e:	ebaa 0a05 	sub.w	sl, sl, r5
 802d632:	f8c9 3008 	str.w	r3, [r9, #8]
 802d636:	2b00      	cmp	r3, #0
 802d638:	d1a3      	bne.n	802d582 <__sfvwrite_r+0x11a>
 802d63a:	e71c      	b.n	802d476 <__sfvwrite_r+0xe>
 802d63c:	462a      	mov	r2, r5
 802d63e:	4630      	mov	r0, r6
 802d640:	f007 fefc 	bl	803543c <_realloc_r>
 802d644:	4603      	mov	r3, r0
 802d646:	2800      	cmp	r0, #0
 802d648:	d1d5      	bne.n	802d5f6 <__sfvwrite_r+0x18e>
 802d64a:	6921      	ldr	r1, [r4, #16]
 802d64c:	4630      	mov	r0, r6
 802d64e:	f002 fdcd 	bl	80301ec <_free_r>
 802d652:	89a3      	ldrh	r3, [r4, #12]
 802d654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802d658:	81a3      	strh	r3, [r4, #12]
 802d65a:	e7b6      	b.n	802d5ca <__sfvwrite_r+0x162>
 802d65c:	6923      	ldr	r3, [r4, #16]
 802d65e:	4283      	cmp	r3, r0
 802d660:	d302      	bcc.n	802d668 <__sfvwrite_r+0x200>
 802d662:	6961      	ldr	r1, [r4, #20]
 802d664:	4551      	cmp	r1, sl
 802d666:	d915      	bls.n	802d694 <__sfvwrite_r+0x22c>
 802d668:	4552      	cmp	r2, sl
 802d66a:	bf28      	it	cs
 802d66c:	4652      	movcs	r2, sl
 802d66e:	4639      	mov	r1, r7
 802d670:	4615      	mov	r5, r2
 802d672:	f000 f933 	bl	802d8dc <memmove>
 802d676:	68a3      	ldr	r3, [r4, #8]
 802d678:	6822      	ldr	r2, [r4, #0]
 802d67a:	1b5b      	subs	r3, r3, r5
 802d67c:	442a      	add	r2, r5
 802d67e:	60a3      	str	r3, [r4, #8]
 802d680:	6022      	str	r2, [r4, #0]
 802d682:	2b00      	cmp	r3, #0
 802d684:	d1cf      	bne.n	802d626 <__sfvwrite_r+0x1be>
 802d686:	4621      	mov	r1, r4
 802d688:	4630      	mov	r0, r6
 802d68a:	f7ff fd59 	bl	802d140 <_fflush_r>
 802d68e:	2800      	cmp	r0, #0
 802d690:	d0c9      	beq.n	802d626 <__sfvwrite_r+0x1be>
 802d692:	e79c      	b.n	802d5ce <__sfvwrite_r+0x166>
 802d694:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802d698:	4553      	cmp	r3, sl
 802d69a:	bf28      	it	cs
 802d69c:	4653      	movcs	r3, sl
 802d69e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802d6a0:	fb93 f3f1 	sdiv	r3, r3, r1
 802d6a4:	463a      	mov	r2, r7
 802d6a6:	434b      	muls	r3, r1
 802d6a8:	4630      	mov	r0, r6
 802d6aa:	69e1      	ldr	r1, [r4, #28]
 802d6ac:	47a8      	blx	r5
 802d6ae:	1e05      	subs	r5, r0, #0
 802d6b0:	dcb9      	bgt.n	802d626 <__sfvwrite_r+0x1be>
 802d6b2:	e78c      	b.n	802d5ce <__sfvwrite_r+0x166>
 802d6b4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802d6b8:	2000      	movs	r0, #0
 802d6ba:	f108 0808 	add.w	r8, r8, #8
 802d6be:	e6f2      	b.n	802d4a6 <__sfvwrite_r+0x3e>
 802d6c0:	f10b 0701 	add.w	r7, fp, #1
 802d6c4:	e6ff      	b.n	802d4c6 <__sfvwrite_r+0x5e>
 802d6c6:	4293      	cmp	r3, r2
 802d6c8:	dc08      	bgt.n	802d6dc <__sfvwrite_r+0x274>
 802d6ca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802d6cc:	69e1      	ldr	r1, [r4, #28]
 802d6ce:	4652      	mov	r2, sl
 802d6d0:	4630      	mov	r0, r6
 802d6d2:	47a8      	blx	r5
 802d6d4:	1e05      	subs	r5, r0, #0
 802d6d6:	f73f af12 	bgt.w	802d4fe <__sfvwrite_r+0x96>
 802d6da:	e778      	b.n	802d5ce <__sfvwrite_r+0x166>
 802d6dc:	4651      	mov	r1, sl
 802d6de:	9201      	str	r2, [sp, #4]
 802d6e0:	f000 f8fc 	bl	802d8dc <memmove>
 802d6e4:	9a01      	ldr	r2, [sp, #4]
 802d6e6:	68a3      	ldr	r3, [r4, #8]
 802d6e8:	1a9b      	subs	r3, r3, r2
 802d6ea:	60a3      	str	r3, [r4, #8]
 802d6ec:	6823      	ldr	r3, [r4, #0]
 802d6ee:	4413      	add	r3, r2
 802d6f0:	6023      	str	r3, [r4, #0]
 802d6f2:	4615      	mov	r5, r2
 802d6f4:	e703      	b.n	802d4fe <__sfvwrite_r+0x96>
 802d6f6:	2001      	movs	r0, #1
 802d6f8:	e70a      	b.n	802d510 <__sfvwrite_r+0xa8>
 802d6fa:	bf00      	nop
 802d6fc:	7ffffc00 	.word	0x7ffffc00

0802d700 <_fwalk_sglue>:
 802d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d704:	4607      	mov	r7, r0
 802d706:	4688      	mov	r8, r1
 802d708:	4614      	mov	r4, r2
 802d70a:	2600      	movs	r6, #0
 802d70c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d710:	f1b9 0901 	subs.w	r9, r9, #1
 802d714:	d505      	bpl.n	802d722 <_fwalk_sglue+0x22>
 802d716:	6824      	ldr	r4, [r4, #0]
 802d718:	2c00      	cmp	r4, #0
 802d71a:	d1f7      	bne.n	802d70c <_fwalk_sglue+0xc>
 802d71c:	4630      	mov	r0, r6
 802d71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d722:	89ab      	ldrh	r3, [r5, #12]
 802d724:	2b01      	cmp	r3, #1
 802d726:	d907      	bls.n	802d738 <_fwalk_sglue+0x38>
 802d728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d72c:	3301      	adds	r3, #1
 802d72e:	d003      	beq.n	802d738 <_fwalk_sglue+0x38>
 802d730:	4629      	mov	r1, r5
 802d732:	4638      	mov	r0, r7
 802d734:	47c0      	blx	r8
 802d736:	4306      	orrs	r6, r0
 802d738:	3568      	adds	r5, #104	@ 0x68
 802d73a:	e7e9      	b.n	802d710 <_fwalk_sglue+0x10>

0802d73c <__swsetup_r>:
 802d73c:	b538      	push	{r3, r4, r5, lr}
 802d73e:	4b29      	ldr	r3, [pc, #164]	@ (802d7e4 <__swsetup_r+0xa8>)
 802d740:	4605      	mov	r5, r0
 802d742:	6818      	ldr	r0, [r3, #0]
 802d744:	460c      	mov	r4, r1
 802d746:	b118      	cbz	r0, 802d750 <__swsetup_r+0x14>
 802d748:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802d74a:	b90b      	cbnz	r3, 802d750 <__swsetup_r+0x14>
 802d74c:	f7ff fe3a 	bl	802d3c4 <__sinit>
 802d750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d754:	0719      	lsls	r1, r3, #28
 802d756:	d422      	bmi.n	802d79e <__swsetup_r+0x62>
 802d758:	06da      	lsls	r2, r3, #27
 802d75a:	d407      	bmi.n	802d76c <__swsetup_r+0x30>
 802d75c:	2209      	movs	r2, #9
 802d75e:	602a      	str	r2, [r5, #0]
 802d760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d764:	81a3      	strh	r3, [r4, #12]
 802d766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802d76a:	e033      	b.n	802d7d4 <__swsetup_r+0x98>
 802d76c:	0758      	lsls	r0, r3, #29
 802d76e:	d512      	bpl.n	802d796 <__swsetup_r+0x5a>
 802d770:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802d772:	b141      	cbz	r1, 802d786 <__swsetup_r+0x4a>
 802d774:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802d778:	4299      	cmp	r1, r3
 802d77a:	d002      	beq.n	802d782 <__swsetup_r+0x46>
 802d77c:	4628      	mov	r0, r5
 802d77e:	f002 fd35 	bl	80301ec <_free_r>
 802d782:	2300      	movs	r3, #0
 802d784:	6323      	str	r3, [r4, #48]	@ 0x30
 802d786:	89a3      	ldrh	r3, [r4, #12]
 802d788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802d78c:	81a3      	strh	r3, [r4, #12]
 802d78e:	2300      	movs	r3, #0
 802d790:	6063      	str	r3, [r4, #4]
 802d792:	6923      	ldr	r3, [r4, #16]
 802d794:	6023      	str	r3, [r4, #0]
 802d796:	89a3      	ldrh	r3, [r4, #12]
 802d798:	f043 0308 	orr.w	r3, r3, #8
 802d79c:	81a3      	strh	r3, [r4, #12]
 802d79e:	6923      	ldr	r3, [r4, #16]
 802d7a0:	b94b      	cbnz	r3, 802d7b6 <__swsetup_r+0x7a>
 802d7a2:	89a3      	ldrh	r3, [r4, #12]
 802d7a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802d7a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802d7ac:	d003      	beq.n	802d7b6 <__swsetup_r+0x7a>
 802d7ae:	4621      	mov	r1, r4
 802d7b0:	4628      	mov	r0, r5
 802d7b2:	f005 ff5b 	bl	803366c <__smakebuf_r>
 802d7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d7ba:	f013 0201 	ands.w	r2, r3, #1
 802d7be:	d00a      	beq.n	802d7d6 <__swsetup_r+0x9a>
 802d7c0:	2200      	movs	r2, #0
 802d7c2:	60a2      	str	r2, [r4, #8]
 802d7c4:	6962      	ldr	r2, [r4, #20]
 802d7c6:	4252      	negs	r2, r2
 802d7c8:	61a2      	str	r2, [r4, #24]
 802d7ca:	6922      	ldr	r2, [r4, #16]
 802d7cc:	b942      	cbnz	r2, 802d7e0 <__swsetup_r+0xa4>
 802d7ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802d7d2:	d1c5      	bne.n	802d760 <__swsetup_r+0x24>
 802d7d4:	bd38      	pop	{r3, r4, r5, pc}
 802d7d6:	0799      	lsls	r1, r3, #30
 802d7d8:	bf58      	it	pl
 802d7da:	6962      	ldrpl	r2, [r4, #20]
 802d7dc:	60a2      	str	r2, [r4, #8]
 802d7de:	e7f4      	b.n	802d7ca <__swsetup_r+0x8e>
 802d7e0:	2000      	movs	r0, #0
 802d7e2:	e7f7      	b.n	802d7d4 <__swsetup_r+0x98>
 802d7e4:	200002d8 	.word	0x200002d8

0802d7e8 <memcmp>:
 802d7e8:	b510      	push	{r4, lr}
 802d7ea:	3901      	subs	r1, #1
 802d7ec:	4402      	add	r2, r0
 802d7ee:	4290      	cmp	r0, r2
 802d7f0:	d101      	bne.n	802d7f6 <memcmp+0xe>
 802d7f2:	2000      	movs	r0, #0
 802d7f4:	e005      	b.n	802d802 <memcmp+0x1a>
 802d7f6:	7803      	ldrb	r3, [r0, #0]
 802d7f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d7fc:	42a3      	cmp	r3, r4
 802d7fe:	d001      	beq.n	802d804 <memcmp+0x1c>
 802d800:	1b18      	subs	r0, r3, r4
 802d802:	bd10      	pop	{r4, pc}
 802d804:	3001      	adds	r0, #1
 802d806:	e7f2      	b.n	802d7ee <memcmp+0x6>

0802d808 <__fputwc>:
 802d808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802d80c:	4680      	mov	r8, r0
 802d80e:	460f      	mov	r7, r1
 802d810:	4614      	mov	r4, r2
 802d812:	f001 fd2f 	bl	802f274 <__locale_mb_cur_max>
 802d816:	2801      	cmp	r0, #1
 802d818:	4605      	mov	r5, r0
 802d81a:	d11b      	bne.n	802d854 <__fputwc+0x4c>
 802d81c:	1e7b      	subs	r3, r7, #1
 802d81e:	2bfe      	cmp	r3, #254	@ 0xfe
 802d820:	d818      	bhi.n	802d854 <__fputwc+0x4c>
 802d822:	f88d 7004 	strb.w	r7, [sp, #4]
 802d826:	2600      	movs	r6, #0
 802d828:	f10d 0904 	add.w	r9, sp, #4
 802d82c:	42ae      	cmp	r6, r5
 802d82e:	d021      	beq.n	802d874 <__fputwc+0x6c>
 802d830:	68a3      	ldr	r3, [r4, #8]
 802d832:	f816 1009 	ldrb.w	r1, [r6, r9]
 802d836:	3b01      	subs	r3, #1
 802d838:	2b00      	cmp	r3, #0
 802d83a:	60a3      	str	r3, [r4, #8]
 802d83c:	da04      	bge.n	802d848 <__fputwc+0x40>
 802d83e:	69a2      	ldr	r2, [r4, #24]
 802d840:	4293      	cmp	r3, r2
 802d842:	db1b      	blt.n	802d87c <__fputwc+0x74>
 802d844:	290a      	cmp	r1, #10
 802d846:	d019      	beq.n	802d87c <__fputwc+0x74>
 802d848:	6823      	ldr	r3, [r4, #0]
 802d84a:	1c5a      	adds	r2, r3, #1
 802d84c:	6022      	str	r2, [r4, #0]
 802d84e:	7019      	strb	r1, [r3, #0]
 802d850:	3601      	adds	r6, #1
 802d852:	e7eb      	b.n	802d82c <__fputwc+0x24>
 802d854:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802d858:	463a      	mov	r2, r7
 802d85a:	a901      	add	r1, sp, #4
 802d85c:	4640      	mov	r0, r8
 802d85e:	f001 fdcb 	bl	802f3f8 <_wcrtomb_r>
 802d862:	1c43      	adds	r3, r0, #1
 802d864:	4605      	mov	r5, r0
 802d866:	d1de      	bne.n	802d826 <__fputwc+0x1e>
 802d868:	89a3      	ldrh	r3, [r4, #12]
 802d86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d86e:	81a3      	strh	r3, [r4, #12]
 802d870:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802d874:	4638      	mov	r0, r7
 802d876:	b003      	add	sp, #12
 802d878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d87c:	4622      	mov	r2, r4
 802d87e:	4640      	mov	r0, r8
 802d880:	f008 fe4d 	bl	803651e <__swbuf_r>
 802d884:	3001      	adds	r0, #1
 802d886:	d1e3      	bne.n	802d850 <__fputwc+0x48>
 802d888:	e7f2      	b.n	802d870 <__fputwc+0x68>

0802d88a <_fputwc_r>:
 802d88a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802d88c:	07db      	lsls	r3, r3, #31
 802d88e:	b570      	push	{r4, r5, r6, lr}
 802d890:	4605      	mov	r5, r0
 802d892:	460e      	mov	r6, r1
 802d894:	4614      	mov	r4, r2
 802d896:	d405      	bmi.n	802d8a4 <_fputwc_r+0x1a>
 802d898:	8993      	ldrh	r3, [r2, #12]
 802d89a:	0598      	lsls	r0, r3, #22
 802d89c:	d402      	bmi.n	802d8a4 <_fputwc_r+0x1a>
 802d89e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802d8a0:	f001 fd99 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 802d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d8a8:	0499      	lsls	r1, r3, #18
 802d8aa:	d406      	bmi.n	802d8ba <_fputwc_r+0x30>
 802d8ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d8b0:	81a3      	strh	r3, [r4, #12]
 802d8b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d8b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d8b8:	6663      	str	r3, [r4, #100]	@ 0x64
 802d8ba:	4622      	mov	r2, r4
 802d8bc:	4628      	mov	r0, r5
 802d8be:	4631      	mov	r1, r6
 802d8c0:	f7ff ffa2 	bl	802d808 <__fputwc>
 802d8c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d8c6:	07da      	lsls	r2, r3, #31
 802d8c8:	4605      	mov	r5, r0
 802d8ca:	d405      	bmi.n	802d8d8 <_fputwc_r+0x4e>
 802d8cc:	89a3      	ldrh	r3, [r4, #12]
 802d8ce:	059b      	lsls	r3, r3, #22
 802d8d0:	d402      	bmi.n	802d8d8 <_fputwc_r+0x4e>
 802d8d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d8d4:	f001 fd81 	bl	802f3da <__retarget_lock_release_recursive>
 802d8d8:	4628      	mov	r0, r5
 802d8da:	bd70      	pop	{r4, r5, r6, pc}

0802d8dc <memmove>:
 802d8dc:	4288      	cmp	r0, r1
 802d8de:	b510      	push	{r4, lr}
 802d8e0:	eb01 0402 	add.w	r4, r1, r2
 802d8e4:	d902      	bls.n	802d8ec <memmove+0x10>
 802d8e6:	4284      	cmp	r4, r0
 802d8e8:	4623      	mov	r3, r4
 802d8ea:	d807      	bhi.n	802d8fc <memmove+0x20>
 802d8ec:	1e43      	subs	r3, r0, #1
 802d8ee:	42a1      	cmp	r1, r4
 802d8f0:	d008      	beq.n	802d904 <memmove+0x28>
 802d8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d8fa:	e7f8      	b.n	802d8ee <memmove+0x12>
 802d8fc:	4402      	add	r2, r0
 802d8fe:	4601      	mov	r1, r0
 802d900:	428a      	cmp	r2, r1
 802d902:	d100      	bne.n	802d906 <memmove+0x2a>
 802d904:	bd10      	pop	{r4, pc}
 802d906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d90e:	e7f7      	b.n	802d900 <memmove+0x24>

0802d910 <memset>:
 802d910:	4402      	add	r2, r0
 802d912:	4603      	mov	r3, r0
 802d914:	4293      	cmp	r3, r2
 802d916:	d100      	bne.n	802d91a <memset+0xa>
 802d918:	4770      	bx	lr
 802d91a:	f803 1b01 	strb.w	r1, [r3], #1
 802d91e:	e7f9      	b.n	802d914 <memset+0x4>

0802d920 <strcat>:
 802d920:	b510      	push	{r4, lr}
 802d922:	4602      	mov	r2, r0
 802d924:	7814      	ldrb	r4, [r2, #0]
 802d926:	4613      	mov	r3, r2
 802d928:	3201      	adds	r2, #1
 802d92a:	2c00      	cmp	r4, #0
 802d92c:	d1fa      	bne.n	802d924 <strcat+0x4>
 802d92e:	3b01      	subs	r3, #1
 802d930:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d934:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d938:	2a00      	cmp	r2, #0
 802d93a:	d1f9      	bne.n	802d930 <strcat+0x10>
 802d93c:	bd10      	pop	{r4, pc}

0802d93e <strchr>:
 802d93e:	b2c9      	uxtb	r1, r1
 802d940:	4603      	mov	r3, r0
 802d942:	4618      	mov	r0, r3
 802d944:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d948:	b112      	cbz	r2, 802d950 <strchr+0x12>
 802d94a:	428a      	cmp	r2, r1
 802d94c:	d1f9      	bne.n	802d942 <strchr+0x4>
 802d94e:	4770      	bx	lr
 802d950:	2900      	cmp	r1, #0
 802d952:	bf18      	it	ne
 802d954:	2000      	movne	r0, #0
 802d956:	4770      	bx	lr

0802d958 <strcspn>:
 802d958:	b570      	push	{r4, r5, r6, lr}
 802d95a:	4603      	mov	r3, r0
 802d95c:	461e      	mov	r6, r3
 802d95e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d962:	b144      	cbz	r4, 802d976 <strcspn+0x1e>
 802d964:	1e4a      	subs	r2, r1, #1
 802d966:	e001      	b.n	802d96c <strcspn+0x14>
 802d968:	42a5      	cmp	r5, r4
 802d96a:	d004      	beq.n	802d976 <strcspn+0x1e>
 802d96c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d970:	2d00      	cmp	r5, #0
 802d972:	d1f9      	bne.n	802d968 <strcspn+0x10>
 802d974:	e7f2      	b.n	802d95c <strcspn+0x4>
 802d976:	1a30      	subs	r0, r6, r0
 802d978:	bd70      	pop	{r4, r5, r6, pc}

0802d97a <strncmp>:
 802d97a:	b510      	push	{r4, lr}
 802d97c:	b16a      	cbz	r2, 802d99a <strncmp+0x20>
 802d97e:	3901      	subs	r1, #1
 802d980:	1884      	adds	r4, r0, r2
 802d982:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d986:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d98a:	429a      	cmp	r2, r3
 802d98c:	d103      	bne.n	802d996 <strncmp+0x1c>
 802d98e:	42a0      	cmp	r0, r4
 802d990:	d001      	beq.n	802d996 <strncmp+0x1c>
 802d992:	2a00      	cmp	r2, #0
 802d994:	d1f5      	bne.n	802d982 <strncmp+0x8>
 802d996:	1ad0      	subs	r0, r2, r3
 802d998:	bd10      	pop	{r4, pc}
 802d99a:	4610      	mov	r0, r2
 802d99c:	e7fc      	b.n	802d998 <strncmp+0x1e>

0802d99e <strncpy>:
 802d99e:	b510      	push	{r4, lr}
 802d9a0:	3901      	subs	r1, #1
 802d9a2:	4603      	mov	r3, r0
 802d9a4:	b132      	cbz	r2, 802d9b4 <strncpy+0x16>
 802d9a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d9aa:	f803 4b01 	strb.w	r4, [r3], #1
 802d9ae:	3a01      	subs	r2, #1
 802d9b0:	2c00      	cmp	r4, #0
 802d9b2:	d1f7      	bne.n	802d9a4 <strncpy+0x6>
 802d9b4:	441a      	add	r2, r3
 802d9b6:	2100      	movs	r1, #0
 802d9b8:	4293      	cmp	r3, r2
 802d9ba:	d100      	bne.n	802d9be <strncpy+0x20>
 802d9bc:	bd10      	pop	{r4, pc}
 802d9be:	f803 1b01 	strb.w	r1, [r3], #1
 802d9c2:	e7f9      	b.n	802d9b8 <strncpy+0x1a>

0802d9c4 <strrchr>:
 802d9c4:	b538      	push	{r3, r4, r5, lr}
 802d9c6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802d9ca:	4603      	mov	r3, r0
 802d9cc:	d10e      	bne.n	802d9ec <strrchr+0x28>
 802d9ce:	4621      	mov	r1, r4
 802d9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d9d4:	f7ff bfb3 	b.w	802d93e <strchr>
 802d9d8:	1c43      	adds	r3, r0, #1
 802d9da:	4605      	mov	r5, r0
 802d9dc:	4621      	mov	r1, r4
 802d9de:	4618      	mov	r0, r3
 802d9e0:	f7ff ffad 	bl	802d93e <strchr>
 802d9e4:	2800      	cmp	r0, #0
 802d9e6:	d1f7      	bne.n	802d9d8 <strrchr+0x14>
 802d9e8:	4628      	mov	r0, r5
 802d9ea:	bd38      	pop	{r3, r4, r5, pc}
 802d9ec:	2500      	movs	r5, #0
 802d9ee:	e7f5      	b.n	802d9dc <strrchr+0x18>

0802d9f0 <strspn>:
 802d9f0:	b570      	push	{r4, r5, r6, lr}
 802d9f2:	4603      	mov	r3, r0
 802d9f4:	461e      	mov	r6, r3
 802d9f6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d9fa:	b13c      	cbz	r4, 802da0c <strspn+0x1c>
 802d9fc:	1e4a      	subs	r2, r1, #1
 802d9fe:	e001      	b.n	802da04 <strspn+0x14>
 802da00:	42a5      	cmp	r5, r4
 802da02:	d0f7      	beq.n	802d9f4 <strspn+0x4>
 802da04:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802da08:	2d00      	cmp	r5, #0
 802da0a:	d1f9      	bne.n	802da00 <strspn+0x10>
 802da0c:	1a30      	subs	r0, r6, r0
 802da0e:	bd70      	pop	{r4, r5, r6, pc}

0802da10 <strstr>:
 802da10:	780a      	ldrb	r2, [r1, #0]
 802da12:	b570      	push	{r4, r5, r6, lr}
 802da14:	b96a      	cbnz	r2, 802da32 <strstr+0x22>
 802da16:	bd70      	pop	{r4, r5, r6, pc}
 802da18:	429a      	cmp	r2, r3
 802da1a:	d109      	bne.n	802da30 <strstr+0x20>
 802da1c:	460c      	mov	r4, r1
 802da1e:	4605      	mov	r5, r0
 802da20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802da24:	2b00      	cmp	r3, #0
 802da26:	d0f6      	beq.n	802da16 <strstr+0x6>
 802da28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802da2c:	429e      	cmp	r6, r3
 802da2e:	d0f7      	beq.n	802da20 <strstr+0x10>
 802da30:	3001      	adds	r0, #1
 802da32:	7803      	ldrb	r3, [r0, #0]
 802da34:	2b00      	cmp	r3, #0
 802da36:	d1ef      	bne.n	802da18 <strstr+0x8>
 802da38:	4618      	mov	r0, r3
 802da3a:	e7ec      	b.n	802da16 <strstr+0x6>

0802da3c <gmtime_r>:
 802da3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802da40:	4a4d      	ldr	r2, [pc, #308]	@ (802db78 <gmtime_r+0x13c>)
 802da42:	460c      	mov	r4, r1
 802da44:	2300      	movs	r3, #0
 802da46:	e9d0 0100 	ldrd	r0, r1, [r0]
 802da4a:	f7e3 f935 	bl	8010cb8 <__aeabi_ldivmod>
 802da4e:	2a00      	cmp	r2, #0
 802da50:	bfbc      	itt	lt
 802da52:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802da56:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802da5a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802da5e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802da62:	fbb2 f3f1 	udiv	r3, r2, r1
 802da66:	fb01 2213 	mls	r2, r1, r3, r2
 802da6a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802da6e:	bfac      	ite	ge
 802da70:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802da74:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802da78:	60a3      	str	r3, [r4, #8]
 802da7a:	fbb2 f3f1 	udiv	r3, r2, r1
 802da7e:	fb01 2213 	mls	r2, r1, r3, r2
 802da82:	6063      	str	r3, [r4, #4]
 802da84:	6022      	str	r2, [r4, #0]
 802da86:	1cc3      	adds	r3, r0, #3
 802da88:	2207      	movs	r2, #7
 802da8a:	fb93 f2f2 	sdiv	r2, r3, r2
 802da8e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802da92:	1a9b      	subs	r3, r3, r2
 802da94:	bf48      	it	mi
 802da96:	3307      	addmi	r3, #7
 802da98:	2800      	cmp	r0, #0
 802da9a:	61a3      	str	r3, [r4, #24]
 802da9c:	bfb8      	it	lt
 802da9e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 802daa2:	4936      	ldr	r1, [pc, #216]	@ (802db7c <gmtime_r+0x140>)
 802daa4:	bfae      	itee	ge
 802daa6:	fb90 f1f1 	sdivge	r1, r0, r1
 802daaa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 802daae:	fb93 f1f1 	sdivlt	r1, r3, r1
 802dab2:	4b33      	ldr	r3, [pc, #204]	@ (802db80 <gmtime_r+0x144>)
 802dab4:	fb03 0001 	mla	r0, r3, r1, r0
 802dab8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802dabc:	fbb0 f3f3 	udiv	r3, r0, r3
 802dac0:	4403      	add	r3, r0
 802dac2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802dac6:	fbb0 f2fc 	udiv	r2, r0, ip
 802daca:	1a9b      	subs	r3, r3, r2
 802dacc:	f240 176d 	movw	r7, #365	@ 0x16d
 802dad0:	4a2c      	ldr	r2, [pc, #176]	@ (802db84 <gmtime_r+0x148>)
 802dad2:	fbb0 f2f2 	udiv	r2, r0, r2
 802dad6:	2664      	movs	r6, #100	@ 0x64
 802dad8:	1a9b      	subs	r3, r3, r2
 802dada:	fbb3 f2f7 	udiv	r2, r3, r7
 802dade:	fbb3 f3fc 	udiv	r3, r3, ip
 802dae2:	fbb2 f5f6 	udiv	r5, r2, r6
 802dae6:	1aeb      	subs	r3, r5, r3
 802dae8:	4403      	add	r3, r0
 802daea:	fb07 3312 	mls	r3, r7, r2, r3
 802daee:	2099      	movs	r0, #153	@ 0x99
 802daf0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802daf4:	3702      	adds	r7, #2
 802daf6:	f103 0e01 	add.w	lr, r3, #1
 802dafa:	fbb7 fcf0 	udiv	ip, r7, r0
 802dafe:	fb00 f00c 	mul.w	r0, r0, ip
 802db02:	3002      	adds	r0, #2
 802db04:	f04f 0805 	mov.w	r8, #5
 802db08:	fbb0 f0f8 	udiv	r0, r0, r8
 802db0c:	ebae 0000 	sub.w	r0, lr, r0
 802db10:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802db14:	4577      	cmp	r7, lr
 802db16:	bf8c      	ite	hi
 802db18:	f06f 0709 	mvnhi.w	r7, #9
 802db1c:	2702      	movls	r7, #2
 802db1e:	4467      	add	r7, ip
 802db20:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802db24:	fb0c 2101 	mla	r1, ip, r1, r2
 802db28:	2f01      	cmp	r7, #1
 802db2a:	bf98      	it	ls
 802db2c:	3101      	addls	r1, #1
 802db2e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802db32:	d30c      	bcc.n	802db4e <gmtime_r+0x112>
 802db34:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802db38:	61e3      	str	r3, [r4, #28]
 802db3a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802db3e:	2300      	movs	r3, #0
 802db40:	60e0      	str	r0, [r4, #12]
 802db42:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802db46:	6223      	str	r3, [r4, #32]
 802db48:	4620      	mov	r0, r4
 802db4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802db4e:	f012 0f03 	tst.w	r2, #3
 802db52:	d102      	bne.n	802db5a <gmtime_r+0x11e>
 802db54:	fb06 2515 	mls	r5, r6, r5, r2
 802db58:	b95d      	cbnz	r5, 802db72 <gmtime_r+0x136>
 802db5a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802db5e:	fbb2 f6f5 	udiv	r6, r2, r5
 802db62:	fb05 2216 	mls	r2, r5, r6, r2
 802db66:	fab2 f282 	clz	r2, r2
 802db6a:	0952      	lsrs	r2, r2, #5
 802db6c:	333b      	adds	r3, #59	@ 0x3b
 802db6e:	4413      	add	r3, r2
 802db70:	e7e2      	b.n	802db38 <gmtime_r+0xfc>
 802db72:	2201      	movs	r2, #1
 802db74:	e7fa      	b.n	802db6c <gmtime_r+0x130>
 802db76:	bf00      	nop
 802db78:	00015180 	.word	0x00015180
 802db7c:	00023ab1 	.word	0x00023ab1
 802db80:	fffdc54f 	.word	0xfffdc54f
 802db84:	00023ab0 	.word	0x00023ab0

0802db88 <localtime_r>:
 802db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802db8c:	460c      	mov	r4, r1
 802db8e:	4680      	mov	r8, r0
 802db90:	f008 fd40 	bl	8036614 <__gettzinfo>
 802db94:	4621      	mov	r1, r4
 802db96:	4605      	mov	r5, r0
 802db98:	4640      	mov	r0, r8
 802db9a:	f7ff ff4f 	bl	802da3c <gmtime_r>
 802db9e:	6943      	ldr	r3, [r0, #20]
 802dba0:	0799      	lsls	r1, r3, #30
 802dba2:	4604      	mov	r4, r0
 802dba4:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802dba8:	d106      	bne.n	802dbb8 <localtime_r+0x30>
 802dbaa:	2264      	movs	r2, #100	@ 0x64
 802dbac:	fb97 f3f2 	sdiv	r3, r7, r2
 802dbb0:	fb02 7313 	mls	r3, r2, r3, r7
 802dbb4:	2b00      	cmp	r3, #0
 802dbb6:	d170      	bne.n	802dc9a <localtime_r+0x112>
 802dbb8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802dbbc:	fb97 f3f2 	sdiv	r3, r7, r2
 802dbc0:	fb02 7313 	mls	r3, r2, r3, r7
 802dbc4:	fab3 f383 	clz	r3, r3
 802dbc8:	095b      	lsrs	r3, r3, #5
 802dbca:	4e64      	ldr	r6, [pc, #400]	@ (802dd5c <localtime_r+0x1d4>)
 802dbcc:	2230      	movs	r2, #48	@ 0x30
 802dbce:	fb02 6603 	mla	r6, r2, r3, r6
 802dbd2:	f001 f91b 	bl	802ee0c <__tz_lock>
 802dbd6:	f001 f925 	bl	802ee24 <_tzset_unlocked>
 802dbda:	4b61      	ldr	r3, [pc, #388]	@ (802dd60 <localtime_r+0x1d8>)
 802dbdc:	681b      	ldr	r3, [r3, #0]
 802dbde:	2b00      	cmp	r3, #0
 802dbe0:	d06a      	beq.n	802dcb8 <localtime_r+0x130>
 802dbe2:	686b      	ldr	r3, [r5, #4]
 802dbe4:	42bb      	cmp	r3, r7
 802dbe6:	d15a      	bne.n	802dc9e <localtime_r+0x116>
 802dbe8:	682f      	ldr	r7, [r5, #0]
 802dbea:	e9d8 2300 	ldrd	r2, r3, [r8]
 802dbee:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802dbf2:	2f00      	cmp	r7, #0
 802dbf4:	d15b      	bne.n	802dcae <localtime_r+0x126>
 802dbf6:	4282      	cmp	r2, r0
 802dbf8:	eb73 0101 	sbcs.w	r1, r3, r1
 802dbfc:	db5e      	blt.n	802dcbc <localtime_r+0x134>
 802dbfe:	2301      	movs	r3, #1
 802dc00:	6223      	str	r3, [r4, #32]
 802dc02:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802dc04:	6861      	ldr	r1, [r4, #4]
 802dc06:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802dc0a:	fb93 f0f2 	sdiv	r0, r3, r2
 802dc0e:	fb02 3310 	mls	r3, r2, r0, r3
 802dc12:	223c      	movs	r2, #60	@ 0x3c
 802dc14:	fb93 f5f2 	sdiv	r5, r3, r2
 802dc18:	fb02 3215 	mls	r2, r2, r5, r3
 802dc1c:	6823      	ldr	r3, [r4, #0]
 802dc1e:	1a9b      	subs	r3, r3, r2
 802dc20:	68a2      	ldr	r2, [r4, #8]
 802dc22:	6023      	str	r3, [r4, #0]
 802dc24:	1b49      	subs	r1, r1, r5
 802dc26:	1a12      	subs	r2, r2, r0
 802dc28:	2b3b      	cmp	r3, #59	@ 0x3b
 802dc2a:	6061      	str	r1, [r4, #4]
 802dc2c:	60a2      	str	r2, [r4, #8]
 802dc2e:	dd51      	ble.n	802dcd4 <localtime_r+0x14c>
 802dc30:	3101      	adds	r1, #1
 802dc32:	6061      	str	r1, [r4, #4]
 802dc34:	3b3c      	subs	r3, #60	@ 0x3c
 802dc36:	6023      	str	r3, [r4, #0]
 802dc38:	6863      	ldr	r3, [r4, #4]
 802dc3a:	2b3b      	cmp	r3, #59	@ 0x3b
 802dc3c:	dd50      	ble.n	802dce0 <localtime_r+0x158>
 802dc3e:	3201      	adds	r2, #1
 802dc40:	60a2      	str	r2, [r4, #8]
 802dc42:	3b3c      	subs	r3, #60	@ 0x3c
 802dc44:	6063      	str	r3, [r4, #4]
 802dc46:	68a3      	ldr	r3, [r4, #8]
 802dc48:	2b17      	cmp	r3, #23
 802dc4a:	dd4f      	ble.n	802dcec <localtime_r+0x164>
 802dc4c:	69e2      	ldr	r2, [r4, #28]
 802dc4e:	3201      	adds	r2, #1
 802dc50:	61e2      	str	r2, [r4, #28]
 802dc52:	69a2      	ldr	r2, [r4, #24]
 802dc54:	3201      	adds	r2, #1
 802dc56:	2a07      	cmp	r2, #7
 802dc58:	bfa8      	it	ge
 802dc5a:	2200      	movge	r2, #0
 802dc5c:	61a2      	str	r2, [r4, #24]
 802dc5e:	68e2      	ldr	r2, [r4, #12]
 802dc60:	3b18      	subs	r3, #24
 802dc62:	3201      	adds	r2, #1
 802dc64:	60a3      	str	r3, [r4, #8]
 802dc66:	6923      	ldr	r3, [r4, #16]
 802dc68:	60e2      	str	r2, [r4, #12]
 802dc6a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802dc6e:	428a      	cmp	r2, r1
 802dc70:	dd0e      	ble.n	802dc90 <localtime_r+0x108>
 802dc72:	2b0b      	cmp	r3, #11
 802dc74:	eba2 0201 	sub.w	r2, r2, r1
 802dc78:	60e2      	str	r2, [r4, #12]
 802dc7a:	f103 0201 	add.w	r2, r3, #1
 802dc7e:	bf09      	itett	eq
 802dc80:	6963      	ldreq	r3, [r4, #20]
 802dc82:	6122      	strne	r2, [r4, #16]
 802dc84:	2200      	moveq	r2, #0
 802dc86:	3301      	addeq	r3, #1
 802dc88:	bf02      	ittt	eq
 802dc8a:	6122      	streq	r2, [r4, #16]
 802dc8c:	6163      	streq	r3, [r4, #20]
 802dc8e:	61e2      	streq	r2, [r4, #28]
 802dc90:	f001 f8c2 	bl	802ee18 <__tz_unlock>
 802dc94:	4620      	mov	r0, r4
 802dc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dc9a:	2301      	movs	r3, #1
 802dc9c:	e795      	b.n	802dbca <localtime_r+0x42>
 802dc9e:	4638      	mov	r0, r7
 802dca0:	f001 f80a 	bl	802ecb8 <__tzcalc_limits>
 802dca4:	2800      	cmp	r0, #0
 802dca6:	d19f      	bne.n	802dbe8 <localtime_r+0x60>
 802dca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802dcac:	e004      	b.n	802dcb8 <localtime_r+0x130>
 802dcae:	4282      	cmp	r2, r0
 802dcb0:	eb73 0101 	sbcs.w	r1, r3, r1
 802dcb4:	da02      	bge.n	802dcbc <localtime_r+0x134>
 802dcb6:	2300      	movs	r3, #0
 802dcb8:	6223      	str	r3, [r4, #32]
 802dcba:	e009      	b.n	802dcd0 <localtime_r+0x148>
 802dcbc:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802dcc0:	4282      	cmp	r2, r0
 802dcc2:	418b      	sbcs	r3, r1
 802dcc4:	bfb4      	ite	lt
 802dcc6:	2301      	movlt	r3, #1
 802dcc8:	2300      	movge	r3, #0
 802dcca:	6223      	str	r3, [r4, #32]
 802dccc:	2b00      	cmp	r3, #0
 802dcce:	d198      	bne.n	802dc02 <localtime_r+0x7a>
 802dcd0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802dcd2:	e797      	b.n	802dc04 <localtime_r+0x7c>
 802dcd4:	2b00      	cmp	r3, #0
 802dcd6:	daaf      	bge.n	802dc38 <localtime_r+0xb0>
 802dcd8:	3901      	subs	r1, #1
 802dcda:	6061      	str	r1, [r4, #4]
 802dcdc:	333c      	adds	r3, #60	@ 0x3c
 802dcde:	e7aa      	b.n	802dc36 <localtime_r+0xae>
 802dce0:	2b00      	cmp	r3, #0
 802dce2:	dab0      	bge.n	802dc46 <localtime_r+0xbe>
 802dce4:	3a01      	subs	r2, #1
 802dce6:	60a2      	str	r2, [r4, #8]
 802dce8:	333c      	adds	r3, #60	@ 0x3c
 802dcea:	e7ab      	b.n	802dc44 <localtime_r+0xbc>
 802dcec:	2b00      	cmp	r3, #0
 802dcee:	dacf      	bge.n	802dc90 <localtime_r+0x108>
 802dcf0:	69e2      	ldr	r2, [r4, #28]
 802dcf2:	3a01      	subs	r2, #1
 802dcf4:	61e2      	str	r2, [r4, #28]
 802dcf6:	69a2      	ldr	r2, [r4, #24]
 802dcf8:	3a01      	subs	r2, #1
 802dcfa:	bf48      	it	mi
 802dcfc:	2206      	movmi	r2, #6
 802dcfe:	61a2      	str	r2, [r4, #24]
 802dd00:	68e2      	ldr	r2, [r4, #12]
 802dd02:	3318      	adds	r3, #24
 802dd04:	3a01      	subs	r2, #1
 802dd06:	60e2      	str	r2, [r4, #12]
 802dd08:	60a3      	str	r3, [r4, #8]
 802dd0a:	2a00      	cmp	r2, #0
 802dd0c:	d1c0      	bne.n	802dc90 <localtime_r+0x108>
 802dd0e:	6923      	ldr	r3, [r4, #16]
 802dd10:	3b01      	subs	r3, #1
 802dd12:	d405      	bmi.n	802dd20 <localtime_r+0x198>
 802dd14:	6123      	str	r3, [r4, #16]
 802dd16:	6923      	ldr	r3, [r4, #16]
 802dd18:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802dd1c:	60e3      	str	r3, [r4, #12]
 802dd1e:	e7b7      	b.n	802dc90 <localtime_r+0x108>
 802dd20:	230b      	movs	r3, #11
 802dd22:	6123      	str	r3, [r4, #16]
 802dd24:	6963      	ldr	r3, [r4, #20]
 802dd26:	1e5a      	subs	r2, r3, #1
 802dd28:	6162      	str	r2, [r4, #20]
 802dd2a:	0792      	lsls	r2, r2, #30
 802dd2c:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802dd30:	d105      	bne.n	802dd3e <localtime_r+0x1b6>
 802dd32:	2164      	movs	r1, #100	@ 0x64
 802dd34:	fb93 f2f1 	sdiv	r2, r3, r1
 802dd38:	fb01 3212 	mls	r2, r1, r2, r3
 802dd3c:	b962      	cbnz	r2, 802dd58 <localtime_r+0x1d0>
 802dd3e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802dd42:	fb93 f1f2 	sdiv	r1, r3, r2
 802dd46:	fb02 3311 	mls	r3, r2, r1, r3
 802dd4a:	fab3 f383 	clz	r3, r3
 802dd4e:	095b      	lsrs	r3, r3, #5
 802dd50:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802dd54:	61e3      	str	r3, [r4, #28]
 802dd56:	e7de      	b.n	802dd16 <localtime_r+0x18e>
 802dd58:	2301      	movs	r3, #1
 802dd5a:	e7f9      	b.n	802dd50 <localtime_r+0x1c8>
 802dd5c:	0803d380 	.word	0x0803d380
 802dd60:	2001a100 	.word	0x2001a100

0802dd64 <validate_structure>:
 802dd64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802dd66:	6801      	ldr	r1, [r0, #0]
 802dd68:	293b      	cmp	r1, #59	@ 0x3b
 802dd6a:	4604      	mov	r4, r0
 802dd6c:	d911      	bls.n	802dd92 <validate_structure+0x2e>
 802dd6e:	223c      	movs	r2, #60	@ 0x3c
 802dd70:	4668      	mov	r0, sp
 802dd72:	f001 fba8 	bl	802f4c6 <div>
 802dd76:	9a01      	ldr	r2, [sp, #4]
 802dd78:	6863      	ldr	r3, [r4, #4]
 802dd7a:	9900      	ldr	r1, [sp, #0]
 802dd7c:	2a00      	cmp	r2, #0
 802dd7e:	440b      	add	r3, r1
 802dd80:	6063      	str	r3, [r4, #4]
 802dd82:	bfbb      	ittet	lt
 802dd84:	323c      	addlt	r2, #60	@ 0x3c
 802dd86:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802dd8a:	6022      	strge	r2, [r4, #0]
 802dd8c:	6022      	strlt	r2, [r4, #0]
 802dd8e:	bfb8      	it	lt
 802dd90:	6063      	strlt	r3, [r4, #4]
 802dd92:	6861      	ldr	r1, [r4, #4]
 802dd94:	293b      	cmp	r1, #59	@ 0x3b
 802dd96:	d911      	bls.n	802ddbc <validate_structure+0x58>
 802dd98:	223c      	movs	r2, #60	@ 0x3c
 802dd9a:	4668      	mov	r0, sp
 802dd9c:	f001 fb93 	bl	802f4c6 <div>
 802dda0:	9a01      	ldr	r2, [sp, #4]
 802dda2:	68a3      	ldr	r3, [r4, #8]
 802dda4:	9900      	ldr	r1, [sp, #0]
 802dda6:	2a00      	cmp	r2, #0
 802dda8:	440b      	add	r3, r1
 802ddaa:	60a3      	str	r3, [r4, #8]
 802ddac:	bfbb      	ittet	lt
 802ddae:	323c      	addlt	r2, #60	@ 0x3c
 802ddb0:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802ddb4:	6062      	strge	r2, [r4, #4]
 802ddb6:	6062      	strlt	r2, [r4, #4]
 802ddb8:	bfb8      	it	lt
 802ddba:	60a3      	strlt	r3, [r4, #8]
 802ddbc:	68a1      	ldr	r1, [r4, #8]
 802ddbe:	2917      	cmp	r1, #23
 802ddc0:	d911      	bls.n	802dde6 <validate_structure+0x82>
 802ddc2:	2218      	movs	r2, #24
 802ddc4:	4668      	mov	r0, sp
 802ddc6:	f001 fb7e 	bl	802f4c6 <div>
 802ddca:	9a01      	ldr	r2, [sp, #4]
 802ddcc:	68e3      	ldr	r3, [r4, #12]
 802ddce:	9900      	ldr	r1, [sp, #0]
 802ddd0:	2a00      	cmp	r2, #0
 802ddd2:	440b      	add	r3, r1
 802ddd4:	60e3      	str	r3, [r4, #12]
 802ddd6:	bfbb      	ittet	lt
 802ddd8:	3218      	addlt	r2, #24
 802ddda:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802ddde:	60a2      	strge	r2, [r4, #8]
 802dde0:	60a2      	strlt	r2, [r4, #8]
 802dde2:	bfb8      	it	lt
 802dde4:	60e3      	strlt	r3, [r4, #12]
 802dde6:	6921      	ldr	r1, [r4, #16]
 802dde8:	290b      	cmp	r1, #11
 802ddea:	d911      	bls.n	802de10 <validate_structure+0xac>
 802ddec:	220c      	movs	r2, #12
 802ddee:	4668      	mov	r0, sp
 802ddf0:	f001 fb69 	bl	802f4c6 <div>
 802ddf4:	9a01      	ldr	r2, [sp, #4]
 802ddf6:	6963      	ldr	r3, [r4, #20]
 802ddf8:	9900      	ldr	r1, [sp, #0]
 802ddfa:	2a00      	cmp	r2, #0
 802ddfc:	440b      	add	r3, r1
 802ddfe:	6163      	str	r3, [r4, #20]
 802de00:	bfbb      	ittet	lt
 802de02:	320c      	addlt	r2, #12
 802de04:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 802de08:	6122      	strge	r2, [r4, #16]
 802de0a:	6122      	strlt	r2, [r4, #16]
 802de0c:	bfb8      	it	lt
 802de0e:	6163      	strlt	r3, [r4, #20]
 802de10:	6963      	ldr	r3, [r4, #20]
 802de12:	079a      	lsls	r2, r3, #30
 802de14:	d11c      	bne.n	802de50 <validate_structure+0xec>
 802de16:	2164      	movs	r1, #100	@ 0x64
 802de18:	fb93 f2f1 	sdiv	r2, r3, r1
 802de1c:	fb01 3212 	mls	r2, r1, r2, r3
 802de20:	b9c2      	cbnz	r2, 802de54 <validate_structure+0xf0>
 802de22:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 802de26:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802de2a:	fb93 f1f2 	sdiv	r1, r3, r2
 802de2e:	fb02 3311 	mls	r3, r2, r1, r3
 802de32:	2b00      	cmp	r3, #0
 802de34:	bf14      	ite	ne
 802de36:	231c      	movne	r3, #28
 802de38:	231d      	moveq	r3, #29
 802de3a:	68e2      	ldr	r2, [r4, #12]
 802de3c:	2a00      	cmp	r2, #0
 802de3e:	dc0b      	bgt.n	802de58 <validate_structure+0xf4>
 802de40:	4d31      	ldr	r5, [pc, #196]	@ (802df08 <validate_structure+0x1a4>)
 802de42:	200b      	movs	r0, #11
 802de44:	2164      	movs	r1, #100	@ 0x64
 802de46:	68e6      	ldr	r6, [r4, #12]
 802de48:	2e00      	cmp	r6, #0
 802de4a:	dd30      	ble.n	802deae <validate_structure+0x14a>
 802de4c:	b003      	add	sp, #12
 802de4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802de50:	231c      	movs	r3, #28
 802de52:	e7f2      	b.n	802de3a <validate_structure+0xd6>
 802de54:	231d      	movs	r3, #29
 802de56:	e7f0      	b.n	802de3a <validate_structure+0xd6>
 802de58:	4d2b      	ldr	r5, [pc, #172]	@ (802df08 <validate_structure+0x1a4>)
 802de5a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 802de5e:	2a01      	cmp	r2, #1
 802de60:	bf14      	ite	ne
 802de62:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 802de66:	4618      	moveq	r0, r3
 802de68:	4281      	cmp	r1, r0
 802de6a:	ddef      	ble.n	802de4c <validate_structure+0xe8>
 802de6c:	3201      	adds	r2, #1
 802de6e:	1a09      	subs	r1, r1, r0
 802de70:	2a0c      	cmp	r2, #12
 802de72:	60e1      	str	r1, [r4, #12]
 802de74:	6122      	str	r2, [r4, #16]
 802de76:	d1f0      	bne.n	802de5a <validate_structure+0xf6>
 802de78:	6963      	ldr	r3, [r4, #20]
 802de7a:	2100      	movs	r1, #0
 802de7c:	1c5a      	adds	r2, r3, #1
 802de7e:	6121      	str	r1, [r4, #16]
 802de80:	0791      	lsls	r1, r2, #30
 802de82:	6162      	str	r2, [r4, #20]
 802de84:	d13c      	bne.n	802df00 <validate_structure+0x19c>
 802de86:	2164      	movs	r1, #100	@ 0x64
 802de88:	fb92 f0f1 	sdiv	r0, r2, r1
 802de8c:	fb01 2210 	mls	r2, r1, r0, r2
 802de90:	2a00      	cmp	r2, #0
 802de92:	d137      	bne.n	802df04 <validate_structure+0x1a0>
 802de94:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 802de98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802de9c:	fb93 f1f2 	sdiv	r1, r3, r2
 802dea0:	fb02 3311 	mls	r3, r2, r1, r3
 802dea4:	2b00      	cmp	r3, #0
 802dea6:	bf14      	ite	ne
 802dea8:	231c      	movne	r3, #28
 802deaa:	231d      	moveq	r3, #29
 802deac:	e7d5      	b.n	802de5a <validate_structure+0xf6>
 802deae:	6922      	ldr	r2, [r4, #16]
 802deb0:	3a01      	subs	r2, #1
 802deb2:	6122      	str	r2, [r4, #16]
 802deb4:	3201      	adds	r2, #1
 802deb6:	d116      	bne.n	802dee6 <validate_structure+0x182>
 802deb8:	6963      	ldr	r3, [r4, #20]
 802deba:	1e5a      	subs	r2, r3, #1
 802debc:	0797      	lsls	r7, r2, #30
 802debe:	e9c4 0204 	strd	r0, r2, [r4, #16]
 802dec2:	d119      	bne.n	802def8 <validate_structure+0x194>
 802dec4:	fb92 f7f1 	sdiv	r7, r2, r1
 802dec8:	fb01 2217 	mls	r2, r1, r7, r2
 802decc:	b9b2      	cbnz	r2, 802defc <validate_structure+0x198>
 802dece:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802ded2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ded6:	fb93 f7f2 	sdiv	r7, r3, r2
 802deda:	fb02 3317 	mls	r3, r2, r7, r3
 802dede:	2b00      	cmp	r3, #0
 802dee0:	bf14      	ite	ne
 802dee2:	231c      	movne	r3, #28
 802dee4:	231d      	moveq	r3, #29
 802dee6:	6922      	ldr	r2, [r4, #16]
 802dee8:	2a01      	cmp	r2, #1
 802deea:	bf14      	ite	ne
 802deec:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 802def0:	461a      	moveq	r2, r3
 802def2:	4432      	add	r2, r6
 802def4:	60e2      	str	r2, [r4, #12]
 802def6:	e7a6      	b.n	802de46 <validate_structure+0xe2>
 802def8:	231c      	movs	r3, #28
 802defa:	e7f4      	b.n	802dee6 <validate_structure+0x182>
 802defc:	231d      	movs	r3, #29
 802defe:	e7f2      	b.n	802dee6 <validate_structure+0x182>
 802df00:	231c      	movs	r3, #28
 802df02:	e7aa      	b.n	802de5a <validate_structure+0xf6>
 802df04:	231d      	movs	r3, #29
 802df06:	e7a8      	b.n	802de5a <validate_structure+0xf6>
 802df08:	0803d350 	.word	0x0803d350

0802df0c <mktime>:
 802df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df10:	b085      	sub	sp, #20
 802df12:	4607      	mov	r7, r0
 802df14:	f008 fb7e 	bl	8036614 <__gettzinfo>
 802df18:	4681      	mov	r9, r0
 802df1a:	4638      	mov	r0, r7
 802df1c:	f7ff ff22 	bl	802dd64 <validate_structure>
 802df20:	e9d7 4300 	ldrd	r4, r3, [r7]
 802df24:	223c      	movs	r2, #60	@ 0x3c
 802df26:	fb02 4403 	mla	r4, r2, r3, r4
 802df2a:	68bb      	ldr	r3, [r7, #8]
 802df2c:	697d      	ldr	r5, [r7, #20]
 802df2e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802df32:	fb02 4403 	mla	r4, r2, r3, r4
 802df36:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 802df3a:	4ac1      	ldr	r2, [pc, #772]	@ (802e240 <mktime+0x334>)
 802df3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802df40:	3e01      	subs	r6, #1
 802df42:	2b01      	cmp	r3, #1
 802df44:	4416      	add	r6, r2
 802df46:	dd11      	ble.n	802df6c <mktime+0x60>
 802df48:	07a9      	lsls	r1, r5, #30
 802df4a:	d10f      	bne.n	802df6c <mktime+0x60>
 802df4c:	2264      	movs	r2, #100	@ 0x64
 802df4e:	fb95 f3f2 	sdiv	r3, r5, r2
 802df52:	fb02 5313 	mls	r3, r2, r3, r5
 802df56:	b943      	cbnz	r3, 802df6a <mktime+0x5e>
 802df58:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 802df5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802df60:	fb93 f1f2 	sdiv	r1, r3, r2
 802df64:	fb02 3311 	mls	r3, r2, r1, r3
 802df68:	b903      	cbnz	r3, 802df6c <mktime+0x60>
 802df6a:	3601      	adds	r6, #1
 802df6c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 802df70:	3310      	adds	r3, #16
 802df72:	f644 6220 	movw	r2, #20000	@ 0x4e20
 802df76:	4293      	cmp	r3, r2
 802df78:	61fe      	str	r6, [r7, #28]
 802df7a:	f200 8167 	bhi.w	802e24c <mktime+0x340>
 802df7e:	2d46      	cmp	r5, #70	@ 0x46
 802df80:	f340 808e 	ble.w	802e0a0 <mktime+0x194>
 802df84:	2346      	movs	r3, #70	@ 0x46
 802df86:	f240 1c6d 	movw	ip, #365	@ 0x16d
 802df8a:	2164      	movs	r1, #100	@ 0x64
 802df8c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 802df90:	079a      	lsls	r2, r3, #30
 802df92:	d17f      	bne.n	802e094 <mktime+0x188>
 802df94:	fb93 f2f1 	sdiv	r2, r3, r1
 802df98:	fb01 3212 	mls	r2, r1, r2, r3
 802df9c:	2a00      	cmp	r2, #0
 802df9e:	d17c      	bne.n	802e09a <mktime+0x18e>
 802dfa0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 802dfa4:	fb92 fef0 	sdiv	lr, r2, r0
 802dfa8:	fb00 221e 	mls	r2, r0, lr, r2
 802dfac:	2a00      	cmp	r2, #0
 802dfae:	bf14      	ite	ne
 802dfb0:	4662      	movne	r2, ip
 802dfb2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802dfb6:	3301      	adds	r3, #1
 802dfb8:	429d      	cmp	r5, r3
 802dfba:	4416      	add	r6, r2
 802dfbc:	d1e8      	bne.n	802df90 <mktime+0x84>
 802dfbe:	4ba1      	ldr	r3, [pc, #644]	@ (802e244 <mktime+0x338>)
 802dfc0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802dfc4:	fbc6 4803 	smlal	r4, r8, r6, r3
 802dfc8:	f000 ff20 	bl	802ee0c <__tz_lock>
 802dfcc:	f000 ff2a 	bl	802ee24 <_tzset_unlocked>
 802dfd0:	4b9d      	ldr	r3, [pc, #628]	@ (802e248 <mktime+0x33c>)
 802dfd2:	681b      	ldr	r3, [r3, #0]
 802dfd4:	2b00      	cmp	r3, #0
 802dfd6:	f000 8140 	beq.w	802e25a <mktime+0x34e>
 802dfda:	f8d7 a020 	ldr.w	sl, [r7, #32]
 802dfde:	6978      	ldr	r0, [r7, #20]
 802dfe0:	4653      	mov	r3, sl
 802dfe2:	2b01      	cmp	r3, #1
 802dfe4:	bfa8      	it	ge
 802dfe6:	2301      	movge	r3, #1
 802dfe8:	9301      	str	r3, [sp, #4]
 802dfea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802dfee:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802dff2:	4283      	cmp	r3, r0
 802dff4:	f040 8096 	bne.w	802e124 <mktime+0x218>
 802dff8:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 802dffc:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 802e000:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 802e004:	1a13      	subs	r3, r2, r0
 802e006:	9303      	str	r3, [sp, #12]
 802e008:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 802e00c:	9302      	str	r3, [sp, #8]
 802e00e:	9a02      	ldr	r2, [sp, #8]
 802e010:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 802e014:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 802e018:	ebb2 0e03 	subs.w	lr, r2, r3
 802e01c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 802e020:	4574      	cmp	r4, lr
 802e022:	eb78 0201 	sbcs.w	r2, r8, r1
 802e026:	f280 8085 	bge.w	802e134 <mktime+0x228>
 802e02a:	f8d9 2000 	ldr.w	r2, [r9]
 802e02e:	2a00      	cmp	r2, #0
 802e030:	f000 808d 	beq.w	802e14e <mktime+0x242>
 802e034:	9a03      	ldr	r2, [sp, #12]
 802e036:	4294      	cmp	r4, r2
 802e038:	eb78 020b 	sbcs.w	r2, r8, fp
 802e03c:	f2c0 810a 	blt.w	802e254 <mktime+0x348>
 802e040:	4574      	cmp	r4, lr
 802e042:	eb78 0101 	sbcs.w	r1, r8, r1
 802e046:	bfb4      	ite	lt
 802e048:	f04f 0b01 	movlt.w	fp, #1
 802e04c:	f04f 0b00 	movge.w	fp, #0
 802e050:	f1ba 0f00 	cmp.w	sl, #0
 802e054:	f280 8087 	bge.w	802e166 <mktime+0x25a>
 802e058:	f1bb 0f01 	cmp.w	fp, #1
 802e05c:	f040 80ff 	bne.w	802e25e <mktime+0x352>
 802e060:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 802e064:	191c      	adds	r4, r3, r4
 802e066:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802e06a:	f04f 0b01 	mov.w	fp, #1
 802e06e:	f000 fed3 	bl	802ee18 <__tz_unlock>
 802e072:	3604      	adds	r6, #4
 802e074:	2307      	movs	r3, #7
 802e076:	fb96 f3f3 	sdiv	r3, r6, r3
 802e07a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802e07e:	1af6      	subs	r6, r6, r3
 802e080:	f100 80db 	bmi.w	802e23a <mktime+0x32e>
 802e084:	f8c7 b020 	str.w	fp, [r7, #32]
 802e088:	61be      	str	r6, [r7, #24]
 802e08a:	4620      	mov	r0, r4
 802e08c:	4641      	mov	r1, r8
 802e08e:	b005      	add	sp, #20
 802e090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e094:	f240 126d 	movw	r2, #365	@ 0x16d
 802e098:	e78d      	b.n	802dfb6 <mktime+0xaa>
 802e09a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802e09e:	e78a      	b.n	802dfb6 <mktime+0xaa>
 802e0a0:	d08d      	beq.n	802dfbe <mktime+0xb2>
 802e0a2:	2345      	movs	r3, #69	@ 0x45
 802e0a4:	f240 1c6d 	movw	ip, #365	@ 0x16d
 802e0a8:	2164      	movs	r1, #100	@ 0x64
 802e0aa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 802e0ae:	e012      	b.n	802e0d6 <mktime+0x1ca>
 802e0b0:	bb62      	cbnz	r2, 802e10c <mktime+0x200>
 802e0b2:	fb93 f2f1 	sdiv	r2, r3, r1
 802e0b6:	fb01 3212 	mls	r2, r1, r2, r3
 802e0ba:	bb52      	cbnz	r2, 802e112 <mktime+0x206>
 802e0bc:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 802e0c0:	fb92 fef0 	sdiv	lr, r2, r0
 802e0c4:	fb00 221e 	mls	r2, r0, lr, r2
 802e0c8:	2a00      	cmp	r2, #0
 802e0ca:	bf14      	ite	ne
 802e0cc:	4662      	movne	r2, ip
 802e0ce:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802e0d2:	1ab6      	subs	r6, r6, r2
 802e0d4:	3b01      	subs	r3, #1
 802e0d6:	429d      	cmp	r5, r3
 802e0d8:	f003 0203 	and.w	r2, r3, #3
 802e0dc:	dbe8      	blt.n	802e0b0 <mktime+0x1a4>
 802e0de:	b9da      	cbnz	r2, 802e118 <mktime+0x20c>
 802e0e0:	2264      	movs	r2, #100	@ 0x64
 802e0e2:	fb95 f3f2 	sdiv	r3, r5, r2
 802e0e6:	fb02 5313 	mls	r3, r2, r3, r5
 802e0ea:	b9c3      	cbnz	r3, 802e11e <mktime+0x212>
 802e0ec:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 802e0f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802e0f4:	fb93 f1f2 	sdiv	r1, r3, r2
 802e0f8:	fb02 3311 	mls	r3, r2, r1, r3
 802e0fc:	2b00      	cmp	r3, #0
 802e0fe:	f240 136d 	movw	r3, #365	@ 0x16d
 802e102:	bf08      	it	eq
 802e104:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 802e108:	1af6      	subs	r6, r6, r3
 802e10a:	e758      	b.n	802dfbe <mktime+0xb2>
 802e10c:	f240 126d 	movw	r2, #365	@ 0x16d
 802e110:	e7df      	b.n	802e0d2 <mktime+0x1c6>
 802e112:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802e116:	e7dc      	b.n	802e0d2 <mktime+0x1c6>
 802e118:	f240 136d 	movw	r3, #365	@ 0x16d
 802e11c:	e7f4      	b.n	802e108 <mktime+0x1fc>
 802e11e:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 802e122:	e7f1      	b.n	802e108 <mktime+0x1fc>
 802e124:	f000 fdc8 	bl	802ecb8 <__tzcalc_limits>
 802e128:	2800      	cmp	r0, #0
 802e12a:	f47f af65 	bne.w	802dff8 <mktime+0xec>
 802e12e:	f8dd b004 	ldr.w	fp, [sp, #4]
 802e132:	e791      	b.n	802e058 <mktime+0x14c>
 802e134:	9a02      	ldr	r2, [sp, #8]
 802e136:	1a12      	subs	r2, r2, r0
 802e138:	9202      	str	r2, [sp, #8]
 802e13a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 802e13e:	eb6c 0c02 	sbc.w	ip, ip, r2
 802e142:	9a02      	ldr	r2, [sp, #8]
 802e144:	4294      	cmp	r4, r2
 802e146:	eb78 0c0c 	sbcs.w	ip, r8, ip
 802e14a:	dbf0      	blt.n	802e12e <mktime+0x222>
 802e14c:	e76d      	b.n	802e02a <mktime+0x11e>
 802e14e:	9a03      	ldr	r2, [sp, #12]
 802e150:	4294      	cmp	r4, r2
 802e152:	eb78 020b 	sbcs.w	r2, r8, fp
 802e156:	f6ff af73 	blt.w	802e040 <mktime+0x134>
 802e15a:	f1ba 0f00 	cmp.w	sl, #0
 802e15e:	f6ff af7f 	blt.w	802e060 <mktime+0x154>
 802e162:	f04f 0b01 	mov.w	fp, #1
 802e166:	9a01      	ldr	r2, [sp, #4]
 802e168:	ea82 020b 	eor.w	r2, r2, fp
 802e16c:	2a01      	cmp	r2, #1
 802e16e:	f47f af73 	bne.w	802e058 <mktime+0x14c>
 802e172:	f1bb 0f00 	cmp.w	fp, #0
 802e176:	d035      	beq.n	802e1e4 <mktime+0x2d8>
 802e178:	1a1b      	subs	r3, r3, r0
 802e17a:	683a      	ldr	r2, [r7, #0]
 802e17c:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802e180:	441a      	add	r2, r3
 802e182:	191c      	adds	r4, r3, r4
 802e184:	603a      	str	r2, [r7, #0]
 802e186:	4638      	mov	r0, r7
 802e188:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802e18c:	f7ff fdea 	bl	802dd64 <validate_structure>
 802e190:	68fa      	ldr	r2, [r7, #12]
 802e192:	ebb2 020a 	subs.w	r2, r2, sl
 802e196:	f43f af5f 	beq.w	802e058 <mktime+0x14c>
 802e19a:	2a01      	cmp	r2, #1
 802e19c:	dc24      	bgt.n	802e1e8 <mktime+0x2dc>
 802e19e:	1c93      	adds	r3, r2, #2
 802e1a0:	bfd8      	it	le
 802e1a2:	2201      	movle	r2, #1
 802e1a4:	69fb      	ldr	r3, [r7, #28]
 802e1a6:	18d3      	adds	r3, r2, r3
 802e1a8:	d527      	bpl.n	802e1fa <mktime+0x2ee>
 802e1aa:	1e6b      	subs	r3, r5, #1
 802e1ac:	0798      	lsls	r0, r3, #30
 802e1ae:	d11e      	bne.n	802e1ee <mktime+0x2e2>
 802e1b0:	2164      	movs	r1, #100	@ 0x64
 802e1b2:	fb93 f0f1 	sdiv	r0, r3, r1
 802e1b6:	fb01 3310 	mls	r3, r1, r0, r3
 802e1ba:	b9db      	cbnz	r3, 802e1f4 <mktime+0x2e8>
 802e1bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802e1c0:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 802e1c4:	fb95 f1f3 	sdiv	r1, r5, r3
 802e1c8:	fb03 5511 	mls	r5, r3, r1, r5
 802e1cc:	2d00      	cmp	r5, #0
 802e1ce:	f240 136d 	movw	r3, #365	@ 0x16d
 802e1d2:	bf18      	it	ne
 802e1d4:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 802e1d8:	61fb      	str	r3, [r7, #28]
 802e1da:	4416      	add	r6, r2
 802e1dc:	e73c      	b.n	802e058 <mktime+0x14c>
 802e1de:	f04f 0b00 	mov.w	fp, #0
 802e1e2:	e7c0      	b.n	802e166 <mktime+0x25a>
 802e1e4:	1ac3      	subs	r3, r0, r3
 802e1e6:	e7c8      	b.n	802e17a <mktime+0x26e>
 802e1e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e1ec:	e7da      	b.n	802e1a4 <mktime+0x298>
 802e1ee:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 802e1f2:	e7f1      	b.n	802e1d8 <mktime+0x2cc>
 802e1f4:	f240 136d 	movw	r3, #365	@ 0x16d
 802e1f8:	e7ee      	b.n	802e1d8 <mktime+0x2cc>
 802e1fa:	07a9      	lsls	r1, r5, #30
 802e1fc:	d117      	bne.n	802e22e <mktime+0x322>
 802e1fe:	2064      	movs	r0, #100	@ 0x64
 802e200:	fb95 f1f0 	sdiv	r1, r5, r0
 802e204:	fb00 5111 	mls	r1, r0, r1, r5
 802e208:	b9a1      	cbnz	r1, 802e234 <mktime+0x328>
 802e20a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802e20e:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 802e212:	fb95 f0f1 	sdiv	r0, r5, r1
 802e216:	fb01 5510 	mls	r5, r1, r0, r5
 802e21a:	2d00      	cmp	r5, #0
 802e21c:	f240 116d 	movw	r1, #365	@ 0x16d
 802e220:	bf08      	it	eq
 802e222:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 802e226:	428b      	cmp	r3, r1
 802e228:	bfa8      	it	ge
 802e22a:	1a5b      	subge	r3, r3, r1
 802e22c:	e7d4      	b.n	802e1d8 <mktime+0x2cc>
 802e22e:	f240 116d 	movw	r1, #365	@ 0x16d
 802e232:	e7f8      	b.n	802e226 <mktime+0x31a>
 802e234:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 802e238:	e7f5      	b.n	802e226 <mktime+0x31a>
 802e23a:	3607      	adds	r6, #7
 802e23c:	e722      	b.n	802e084 <mktime+0x178>
 802e23e:	bf00      	nop
 802e240:	0803d320 	.word	0x0803d320
 802e244:	00015180 	.word	0x00015180
 802e248:	2001a100 	.word	0x2001a100
 802e24c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802e250:	46a0      	mov	r8, r4
 802e252:	e71a      	b.n	802e08a <mktime+0x17e>
 802e254:	f1ba 0f00 	cmp.w	sl, #0
 802e258:	dac1      	bge.n	802e1de <mktime+0x2d2>
 802e25a:	f04f 0b00 	mov.w	fp, #0
 802e25e:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 802e262:	191c      	adds	r4, r3, r4
 802e264:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 802e268:	e701      	b.n	802e06e <mktime+0x162>
 802e26a:	bf00      	nop

0802e26c <iso_year_adjust>:
 802e26c:	6942      	ldr	r2, [r0, #20]
 802e26e:	2a00      	cmp	r2, #0
 802e270:	f240 736c 	movw	r3, #1900	@ 0x76c
 802e274:	bfa8      	it	ge
 802e276:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802e27a:	4413      	add	r3, r2
 802e27c:	0792      	lsls	r2, r2, #30
 802e27e:	d105      	bne.n	802e28c <iso_year_adjust+0x20>
 802e280:	2164      	movs	r1, #100	@ 0x64
 802e282:	fb93 f2f1 	sdiv	r2, r3, r1
 802e286:	fb01 3212 	mls	r2, r1, r2, r3
 802e28a:	b9ca      	cbnz	r2, 802e2c0 <iso_year_adjust+0x54>
 802e28c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802e290:	fb93 f1f2 	sdiv	r1, r3, r2
 802e294:	fb02 3311 	mls	r3, r2, r1, r3
 802e298:	fab3 f383 	clz	r3, r3
 802e29c:	095b      	lsrs	r3, r3, #5
 802e29e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802e2a2:	0040      	lsls	r0, r0, #1
 802e2a4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802e2a8:	4418      	add	r0, r3
 802e2aa:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802e2ae:	4298      	cmp	r0, r3
 802e2b0:	d027      	beq.n	802e302 <iso_year_adjust+0x96>
 802e2b2:	dc11      	bgt.n	802e2d8 <iso_year_adjust+0x6c>
 802e2b4:	2801      	cmp	r0, #1
 802e2b6:	dc0a      	bgt.n	802e2ce <iso_year_adjust+0x62>
 802e2b8:	43c0      	mvns	r0, r0
 802e2ba:	0fc0      	lsrs	r0, r0, #31
 802e2bc:	4240      	negs	r0, r0
 802e2be:	4770      	bx	lr
 802e2c0:	2301      	movs	r3, #1
 802e2c2:	e7ec      	b.n	802e29e <iso_year_adjust+0x32>
 802e2c4:	4b10      	ldr	r3, [pc, #64]	@ (802e308 <iso_year_adjust+0x9c>)
 802e2c6:	40c3      	lsrs	r3, r0
 802e2c8:	f343 0000 	sbfx	r0, r3, #0, #1
 802e2cc:	4770      	bx	lr
 802e2ce:	380a      	subs	r0, #10
 802e2d0:	2817      	cmp	r0, #23
 802e2d2:	d9f7      	bls.n	802e2c4 <iso_year_adjust+0x58>
 802e2d4:	2000      	movs	r0, #0
 802e2d6:	4770      	bx	lr
 802e2d8:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802e2dc:	4298      	cmp	r0, r3
 802e2de:	dc06      	bgt.n	802e2ee <iso_year_adjust+0x82>
 802e2e0:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802e2e4:	4298      	cmp	r0, r3
 802e2e6:	bfd4      	ite	le
 802e2e8:	2000      	movle	r0, #0
 802e2ea:	2001      	movgt	r0, #1
 802e2ec:	4770      	bx	lr
 802e2ee:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802e2f2:	3802      	subs	r0, #2
 802e2f4:	2815      	cmp	r0, #21
 802e2f6:	d8ed      	bhi.n	802e2d4 <iso_year_adjust+0x68>
 802e2f8:	4b04      	ldr	r3, [pc, #16]	@ (802e30c <iso_year_adjust+0xa0>)
 802e2fa:	40c3      	lsrs	r3, r0
 802e2fc:	f003 0001 	and.w	r0, r3, #1
 802e300:	4770      	bx	lr
 802e302:	2001      	movs	r0, #1
 802e304:	4770      	bx	lr
 802e306:	bf00      	nop
 802e308:	00cc00cf 	.word	0x00cc00cf
 802e30c:	002a001f 	.word	0x002a001f

0802e310 <__strftime.isra.0>:
 802e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e314:	b08f      	sub	sp, #60	@ 0x3c
 802e316:	461e      	mov	r6, r3
 802e318:	2300      	movs	r3, #0
 802e31a:	4607      	mov	r7, r0
 802e31c:	460d      	mov	r5, r1
 802e31e:	9302      	str	r3, [sp, #8]
 802e320:	461c      	mov	r4, r3
 802e322:	7813      	ldrb	r3, [r2, #0]
 802e324:	2b00      	cmp	r3, #0
 802e326:	f000 84ae 	beq.w	802ec86 <__strftime.isra.0+0x976>
 802e32a:	2b25      	cmp	r3, #37	@ 0x25
 802e32c:	d11f      	bne.n	802e36e <__strftime.isra.0+0x5e>
 802e32e:	f892 9001 	ldrb.w	r9, [r2, #1]
 802e332:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802e336:	d024      	beq.n	802e382 <__strftime.isra.0+0x72>
 802e338:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802e33c:	d021      	beq.n	802e382 <__strftime.isra.0+0x72>
 802e33e:	f102 0801 	add.w	r8, r2, #1
 802e342:	f04f 0900 	mov.w	r9, #0
 802e346:	f898 2000 	ldrb.w	r2, [r8]
 802e34a:	3a31      	subs	r2, #49	@ 0x31
 802e34c:	2a08      	cmp	r2, #8
 802e34e:	d81b      	bhi.n	802e388 <__strftime.isra.0+0x78>
 802e350:	220a      	movs	r2, #10
 802e352:	4640      	mov	r0, r8
 802e354:	a906      	add	r1, sp, #24
 802e356:	f008 f891 	bl	803647c <strtoul>
 802e35a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802e35e:	4602      	mov	r2, r0
 802e360:	f898 1000 	ldrb.w	r1, [r8]
 802e364:	2945      	cmp	r1, #69	@ 0x45
 802e366:	d111      	bne.n	802e38c <__strftime.isra.0+0x7c>
 802e368:	f108 0801 	add.w	r8, r8, #1
 802e36c:	e010      	b.n	802e390 <__strftime.isra.0+0x80>
 802e36e:	1e69      	subs	r1, r5, #1
 802e370:	42a1      	cmp	r1, r4
 802e372:	f240 815d 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e376:	553b      	strb	r3, [r7, r4]
 802e378:	3201      	adds	r2, #1
 802e37a:	f104 0a01 	add.w	sl, r4, #1
 802e37e:	4654      	mov	r4, sl
 802e380:	e7cf      	b.n	802e322 <__strftime.isra.0+0x12>
 802e382:	f102 0802 	add.w	r8, r2, #2
 802e386:	e7de      	b.n	802e346 <__strftime.isra.0+0x36>
 802e388:	2200      	movs	r2, #0
 802e38a:	e7e9      	b.n	802e360 <__strftime.isra.0+0x50>
 802e38c:	294f      	cmp	r1, #79	@ 0x4f
 802e38e:	d0eb      	beq.n	802e368 <__strftime.isra.0+0x58>
 802e390:	f898 0000 	ldrb.w	r0, [r8]
 802e394:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802e398:	2955      	cmp	r1, #85	@ 0x55
 802e39a:	f200 8149 	bhi.w	802e630 <__strftime.isra.0+0x320>
 802e39e:	e8df f011 	tbh	[pc, r1, lsl #1]
 802e3a2:	046a      	.short	0x046a
 802e3a4:	01470147 	.word	0x01470147
 802e3a8:	01470147 	.word	0x01470147
 802e3ac:	01470147 	.word	0x01470147
 802e3b0:	01470147 	.word	0x01470147
 802e3b4:	01470147 	.word	0x01470147
 802e3b8:	01470147 	.word	0x01470147
 802e3bc:	01470147 	.word	0x01470147
 802e3c0:	01470147 	.word	0x01470147
 802e3c4:	01470147 	.word	0x01470147
 802e3c8:	01470147 	.word	0x01470147
 802e3cc:	01470147 	.word	0x01470147
 802e3d0:	01470147 	.word	0x01470147
 802e3d4:	01470147 	.word	0x01470147
 802e3d8:	00750147 	.word	0x00750147
 802e3dc:	00dc00a3 	.word	0x00dc00a3
 802e3e0:	01470128 	.word	0x01470128
 802e3e4:	01cb0159 	.word	0x01cb0159
 802e3e8:	02590252 	.word	0x02590252
 802e3ec:	01470147 	.word	0x01470147
 802e3f0:	02710147 	.word	0x02710147
 802e3f4:	01470147 	.word	0x01470147
 802e3f8:	0147027c 	.word	0x0147027c
 802e3fc:	033402ac 	.word	0x033402ac
 802e400:	036a033e 	.word	0x036a033e
 802e404:	03d80372 	.word	0x03d80372
 802e408:	03ee00d8 	.word	0x03ee00d8
 802e40c:	01470440 	.word	0x01470440
 802e410:	01470147 	.word	0x01470147
 802e414:	01470147 	.word	0x01470147
 802e418:	00560147 	.word	0x00560147
 802e41c:	00ba008d 	.word	0x00ba008d
 802e420:	011d011d 	.word	0x011d011d
 802e424:	017e0147 	.word	0x017e0147
 802e428:	0147008d 	.word	0x0147008d
 802e42c:	0252026a 	.word	0x0252026a
 802e430:	026e0259 	.word	0x026e0259
 802e434:	01470273 	.word	0x01470273
 802e438:	02a5027c 	.word	0x02a5027c
 802e43c:	02b500d0 	.word	0x02b500d0
 802e440:	035d0336 	.word	0x035d0336
 802e444:	03cf03a4 	.word	0x03cf03a4
 802e448:	03e000d4 	.word	0x03e000d4
 802e44c:	0403      	.short	0x0403
 802e44e:	69b3      	ldr	r3, [r6, #24]
 802e450:	4aad      	ldr	r2, [pc, #692]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e452:	3318      	adds	r3, #24
 802e454:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802e458:	4658      	mov	r0, fp
 802e45a:	f7e1 ff21 	bl	80102a0 <strlen>
 802e45e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e462:	eb04 0a00 	add.w	sl, r4, r0
 802e466:	1e6b      	subs	r3, r5, #1
 802e468:	45a2      	cmp	sl, r4
 802e46a:	d107      	bne.n	802e47c <__strftime.isra.0+0x16c>
 802e46c:	f898 3000 	ldrb.w	r3, [r8]
 802e470:	2b00      	cmp	r3, #0
 802e472:	f000 8409 	beq.w	802ec88 <__strftime.isra.0+0x978>
 802e476:	f108 0201 	add.w	r2, r8, #1
 802e47a:	e780      	b.n	802e37e <__strftime.isra.0+0x6e>
 802e47c:	42a3      	cmp	r3, r4
 802e47e:	f240 80d7 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e482:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802e486:	553a      	strb	r2, [r7, r4]
 802e488:	3401      	adds	r4, #1
 802e48a:	e7ed      	b.n	802e468 <__strftime.isra.0+0x158>
 802e48c:	69b2      	ldr	r2, [r6, #24]
 802e48e:	4b9e      	ldr	r3, [pc, #632]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e490:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802e494:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802e498:	4658      	mov	r0, fp
 802e49a:	f7e1 ff01 	bl	80102a0 <strlen>
 802e49e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e4a2:	eb04 0a00 	add.w	sl, r4, r0
 802e4a6:	1e6b      	subs	r3, r5, #1
 802e4a8:	4554      	cmp	r4, sl
 802e4aa:	d0df      	beq.n	802e46c <__strftime.isra.0+0x15c>
 802e4ac:	42a3      	cmp	r3, r4
 802e4ae:	f240 80bf 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e4b2:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802e4b6:	553a      	strb	r2, [r7, r4]
 802e4b8:	3401      	adds	r4, #1
 802e4ba:	e7f5      	b.n	802e4a8 <__strftime.isra.0+0x198>
 802e4bc:	4b92      	ldr	r3, [pc, #584]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e4be:	6932      	ldr	r2, [r6, #16]
 802e4c0:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802e4c4:	4658      	mov	r0, fp
 802e4c6:	f7e1 feeb 	bl	80102a0 <strlen>
 802e4ca:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e4ce:	eb04 0a00 	add.w	sl, r4, r0
 802e4d2:	1e6b      	subs	r3, r5, #1
 802e4d4:	45a2      	cmp	sl, r4
 802e4d6:	d0c9      	beq.n	802e46c <__strftime.isra.0+0x15c>
 802e4d8:	42a3      	cmp	r3, r4
 802e4da:	f240 80a9 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e4de:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802e4e2:	553a      	strb	r2, [r7, r4]
 802e4e4:	3401      	adds	r4, #1
 802e4e6:	e7f5      	b.n	802e4d4 <__strftime.isra.0+0x1c4>
 802e4e8:	6933      	ldr	r3, [r6, #16]
 802e4ea:	4a87      	ldr	r2, [pc, #540]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e4ec:	330c      	adds	r3, #12
 802e4ee:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802e4f2:	4658      	mov	r0, fp
 802e4f4:	f7e1 fed4 	bl	80102a0 <strlen>
 802e4f8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e4fc:	eb04 0a00 	add.w	sl, r4, r0
 802e500:	1e6b      	subs	r3, r5, #1
 802e502:	45a2      	cmp	sl, r4
 802e504:	d0b2      	beq.n	802e46c <__strftime.isra.0+0x15c>
 802e506:	42a3      	cmp	r3, r4
 802e508:	f240 8092 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e50c:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802e510:	553a      	strb	r2, [r7, r4]
 802e512:	3401      	adds	r4, #1
 802e514:	e7f5      	b.n	802e502 <__strftime.isra.0+0x1f2>
 802e516:	4b7c      	ldr	r3, [pc, #496]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e518:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802e51c:	4650      	mov	r0, sl
 802e51e:	f7e1 febf 	bl	80102a0 <strlen>
 802e522:	f89a 3000 	ldrb.w	r3, [sl]
 802e526:	2b00      	cmp	r3, #0
 802e528:	f000 8341 	beq.w	802ebae <__strftime.isra.0+0x89e>
 802e52c:	4633      	mov	r3, r6
 802e52e:	4652      	mov	r2, sl
 802e530:	1b29      	subs	r1, r5, r4
 802e532:	1938      	adds	r0, r7, r4
 802e534:	f7ff feec 	bl	802e310 <__strftime.isra.0>
 802e538:	2800      	cmp	r0, #0
 802e53a:	dd79      	ble.n	802e630 <__strftime.isra.0+0x320>
 802e53c:	eb04 0a00 	add.w	sl, r4, r0
 802e540:	e794      	b.n	802e46c <__strftime.isra.0+0x15c>
 802e542:	4b71      	ldr	r3, [pc, #452]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e544:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802e548:	e7e8      	b.n	802e51c <__strftime.isra.0+0x20c>
 802e54a:	4b6f      	ldr	r3, [pc, #444]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e54c:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802e550:	e7e4      	b.n	802e51c <__strftime.isra.0+0x20c>
 802e552:	4b6d      	ldr	r3, [pc, #436]	@ (802e708 <__strftime.isra.0+0x3f8>)
 802e554:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802e558:	e7e0      	b.n	802e51c <__strftime.isra.0+0x20c>
 802e55a:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802e55e:	496b      	ldr	r1, [pc, #428]	@ (802e70c <__strftime.isra.0+0x3fc>)
 802e560:	458a      	cmp	sl, r1
 802e562:	bfac      	ite	ge
 802e564:	f04f 0b00 	movge.w	fp, #0
 802e568:	f04f 0b01 	movlt.w	fp, #1
 802e56c:	f1ba 0f00 	cmp.w	sl, #0
 802e570:	db12      	blt.n	802e598 <__strftime.isra.0+0x288>
 802e572:	2064      	movs	r0, #100	@ 0x64
 802e574:	fb9a f0f0 	sdiv	r0, sl, r0
 802e578:	3013      	adds	r0, #19
 802e57a:	f1b9 0f00 	cmp.w	r9, #0
 802e57e:	d015      	beq.n	802e5ac <__strftime.isra.0+0x29c>
 802e580:	2863      	cmp	r0, #99	@ 0x63
 802e582:	dd28      	ble.n	802e5d6 <__strftime.isra.0+0x2c6>
 802e584:	4b62      	ldr	r3, [pc, #392]	@ (802e710 <__strftime.isra.0+0x400>)
 802e586:	4963      	ldr	r1, [pc, #396]	@ (802e714 <__strftime.isra.0+0x404>)
 802e588:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802e58c:	bf0c      	ite	eq
 802e58e:	469c      	moveq	ip, r3
 802e590:	468c      	movne	ip, r1
 802e592:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802e730 <__strftime.isra.0+0x420>
 802e596:	e00d      	b.n	802e5b4 <__strftime.isra.0+0x2a4>
 802e598:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802e59c:	9203      	str	r2, [sp, #12]
 802e59e:	f000 ff88 	bl	802f4b2 <abs>
 802e5a2:	2164      	movs	r1, #100	@ 0x64
 802e5a4:	9a03      	ldr	r2, [sp, #12]
 802e5a6:	fb90 f0f1 	sdiv	r0, r0, r1
 802e5aa:	e7e6      	b.n	802e57a <__strftime.isra.0+0x26a>
 802e5ac:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802e714 <__strftime.isra.0+0x404>
 802e5b0:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802e734 <__strftime.isra.0+0x424>
 802e5b4:	4b58      	ldr	r3, [pc, #352]	@ (802e718 <__strftime.isra.0+0x408>)
 802e5b6:	9001      	str	r0, [sp, #4]
 802e5b8:	2a02      	cmp	r2, #2
 802e5ba:	bf2c      	ite	cs
 802e5bc:	ebcb 0102 	rsbcs	r1, fp, r2
 802e5c0:	f1cb 0102 	rsbcc	r1, fp, #2
 802e5c4:	4a51      	ldr	r2, [pc, #324]	@ (802e70c <__strftime.isra.0+0x3fc>)
 802e5c6:	9100      	str	r1, [sp, #0]
 802e5c8:	4592      	cmp	sl, r2
 802e5ca:	bfa8      	it	ge
 802e5cc:	4663      	movge	r3, ip
 802e5ce:	4672      	mov	r2, lr
 802e5d0:	1b29      	subs	r1, r5, r4
 802e5d2:	1938      	adds	r0, r7, r4
 802e5d4:	e023      	b.n	802e61e <__strftime.isra.0+0x30e>
 802e5d6:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802e714 <__strftime.isra.0+0x404>
 802e5da:	e7da      	b.n	802e592 <__strftime.isra.0+0x282>
 802e5dc:	494f      	ldr	r1, [pc, #316]	@ (802e71c <__strftime.isra.0+0x40c>)
 802e5de:	4a50      	ldr	r2, [pc, #320]	@ (802e720 <__strftime.isra.0+0x410>)
 802e5e0:	68f3      	ldr	r3, [r6, #12]
 802e5e2:	2864      	cmp	r0, #100	@ 0x64
 802e5e4:	bf18      	it	ne
 802e5e6:	460a      	movne	r2, r1
 802e5e8:	1b29      	subs	r1, r5, r4
 802e5ea:	1938      	adds	r0, r7, r4
 802e5ec:	f002 f98c 	bl	8030908 <sniprintf>
 802e5f0:	e017      	b.n	802e622 <__strftime.isra.0+0x312>
 802e5f2:	6970      	ldr	r0, [r6, #20]
 802e5f4:	6933      	ldr	r3, [r6, #16]
 802e5f6:	2800      	cmp	r0, #0
 802e5f8:	f103 0a01 	add.w	sl, r3, #1
 802e5fc:	eb07 0b04 	add.w	fp, r7, r4
 802e600:	68f3      	ldr	r3, [r6, #12]
 802e602:	eba5 0904 	sub.w	r9, r5, r4
 802e606:	db19      	blt.n	802e63c <__strftime.isra.0+0x32c>
 802e608:	2264      	movs	r2, #100	@ 0x64
 802e60a:	fb90 fcf2 	sdiv	ip, r0, r2
 802e60e:	fb02 001c 	mls	r0, r2, ip, r0
 802e612:	4a44      	ldr	r2, [pc, #272]	@ (802e724 <__strftime.isra.0+0x414>)
 802e614:	e9cd 3000 	strd	r3, r0, [sp]
 802e618:	4649      	mov	r1, r9
 802e61a:	4653      	mov	r3, sl
 802e61c:	4658      	mov	r0, fp
 802e61e:	f002 f973 	bl	8030908 <sniprintf>
 802e622:	2800      	cmp	r0, #0
 802e624:	db04      	blt.n	802e630 <__strftime.isra.0+0x320>
 802e626:	eb00 0a04 	add.w	sl, r0, r4
 802e62a:	4555      	cmp	r5, sl
 802e62c:	f63f af1e 	bhi.w	802e46c <__strftime.isra.0+0x15c>
 802e630:	f04f 0a00 	mov.w	sl, #0
 802e634:	4650      	mov	r0, sl
 802e636:	b00f      	add	sp, #60	@ 0x3c
 802e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e63c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802e640:	9303      	str	r3, [sp, #12]
 802e642:	f000 ff36 	bl	802f4b2 <abs>
 802e646:	2264      	movs	r2, #100	@ 0x64
 802e648:	9b03      	ldr	r3, [sp, #12]
 802e64a:	fb90 fcf2 	sdiv	ip, r0, r2
 802e64e:	fb0c 0012 	mls	r0, ip, r2, r0
 802e652:	e7de      	b.n	802e612 <__strftime.isra.0+0x302>
 802e654:	2125      	movs	r1, #37	@ 0x25
 802e656:	f88d 1018 	strb.w	r1, [sp, #24]
 802e65a:	f1b9 0f00 	cmp.w	r9, #0
 802e65e:	d00b      	beq.n	802e678 <__strftime.isra.0+0x368>
 802e660:	2a05      	cmp	r2, #5
 802e662:	f88d 9019 	strb.w	r9, [sp, #25]
 802e666:	d817      	bhi.n	802e698 <__strftime.isra.0+0x388>
 802e668:	f10d 001a 	add.w	r0, sp, #26
 802e66c:	492e      	ldr	r1, [pc, #184]	@ (802e728 <__strftime.isra.0+0x418>)
 802e66e:	f000 fe83 	bl	802f378 <strcpy>
 802e672:	4633      	mov	r3, r6
 802e674:	aa06      	add	r2, sp, #24
 802e676:	e75b      	b.n	802e530 <__strftime.isra.0+0x220>
 802e678:	232b      	movs	r3, #43	@ 0x2b
 802e67a:	f88d 3019 	strb.w	r3, [sp, #25]
 802e67e:	2304      	movs	r3, #4
 802e680:	4a2a      	ldr	r2, [pc, #168]	@ (802e72c <__strftime.isra.0+0x41c>)
 802e682:	211e      	movs	r1, #30
 802e684:	f10d 001a 	add.w	r0, sp, #26
 802e688:	f002 f93e 	bl	8030908 <sniprintf>
 802e68c:	2800      	cmp	r0, #0
 802e68e:	ddeb      	ble.n	802e668 <__strftime.isra.0+0x358>
 802e690:	f10d 031a 	add.w	r3, sp, #26
 802e694:	4418      	add	r0, r3
 802e696:	e7e9      	b.n	802e66c <__strftime.isra.0+0x35c>
 802e698:	1f93      	subs	r3, r2, #6
 802e69a:	d0e5      	beq.n	802e668 <__strftime.isra.0+0x358>
 802e69c:	e7f0      	b.n	802e680 <__strftime.isra.0+0x370>
 802e69e:	4630      	mov	r0, r6
 802e6a0:	f7ff fde4 	bl	802e26c <iso_year_adjust>
 802e6a4:	4682      	mov	sl, r0
 802e6a6:	6970      	ldr	r0, [r6, #20]
 802e6a8:	2800      	cmp	r0, #0
 802e6aa:	db11      	blt.n	802e6d0 <__strftime.isra.0+0x3c0>
 802e6ac:	2364      	movs	r3, #100	@ 0x64
 802e6ae:	fb90 f2f3 	sdiv	r2, r0, r3
 802e6b2:	fb03 0012 	mls	r0, r3, r2, r0
 802e6b6:	2364      	movs	r3, #100	@ 0x64
 802e6b8:	4482      	add	sl, r0
 802e6ba:	fb9a f2f3 	sdiv	r2, sl, r3
 802e6be:	fb03 aa12 	mls	sl, r3, r2, sl
 802e6c2:	449a      	add	sl, r3
 802e6c4:	fbba f2f3 	udiv	r2, sl, r3
 802e6c8:	fb03 a312 	mls	r3, r3, r2, sl
 802e6cc:	4a14      	ldr	r2, [pc, #80]	@ (802e720 <__strftime.isra.0+0x410>)
 802e6ce:	e78b      	b.n	802e5e8 <__strftime.isra.0+0x2d8>
 802e6d0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802e6d4:	f000 feed 	bl	802f4b2 <abs>
 802e6d8:	2364      	movs	r3, #100	@ 0x64
 802e6da:	f1ba 0f00 	cmp.w	sl, #0
 802e6de:	fb90 f2f3 	sdiv	r2, r0, r3
 802e6e2:	fb02 0013 	mls	r0, r2, r3, r0
 802e6e6:	da07      	bge.n	802e6f8 <__strftime.isra.0+0x3e8>
 802e6e8:	6972      	ldr	r2, [r6, #20]
 802e6ea:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802e6ee:	429a      	cmp	r2, r3
 802e6f0:	bfb8      	it	lt
 802e6f2:	f04f 0a01 	movlt.w	sl, #1
 802e6f6:	e7de      	b.n	802e6b6 <__strftime.isra.0+0x3a6>
 802e6f8:	d0dd      	beq.n	802e6b6 <__strftime.isra.0+0x3a6>
 802e6fa:	6972      	ldr	r2, [r6, #20]
 802e6fc:	4b03      	ldr	r3, [pc, #12]	@ (802e70c <__strftime.isra.0+0x3fc>)
 802e6fe:	429a      	cmp	r2, r3
 802e700:	bfb8      	it	lt
 802e702:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802e706:	e7d6      	b.n	802e6b6 <__strftime.isra.0+0x3a6>
 802e708:	0803d5cc 	.word	0x0803d5cc
 802e70c:	fffff894 	.word	0xfffff894
 802e710:	0803d3ef 	.word	0x0803d3ef
 802e714:	0803d2aa 	.word	0x0803d2aa
 802e718:	0803d3f1 	.word	0x0803d3f1
 802e71c:	0803d3f3 	.word	0x0803d3f3
 802e720:	0803d401 	.word	0x0803d401
 802e724:	0803d3f7 	.word	0x0803d3f7
 802e728:	0803d40a 	.word	0x0803d40a
 802e72c:	0803d406 	.word	0x0803d406
 802e730:	0803d3e7 	.word	0x0803d3e7
 802e734:	0803d3e0 	.word	0x0803d3e0
 802e738:	6971      	ldr	r1, [r6, #20]
 802e73a:	48bc      	ldr	r0, [pc, #752]	@ (802ea2c <__strftime.isra.0+0x71c>)
 802e73c:	9205      	str	r2, [sp, #20]
 802e73e:	4281      	cmp	r1, r0
 802e740:	bfac      	ite	ge
 802e742:	2300      	movge	r3, #0
 802e744:	2301      	movlt	r3, #1
 802e746:	4630      	mov	r0, r6
 802e748:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802e74c:	f7ff fd8e 	bl	802e26c <iso_year_adjust>
 802e750:	9904      	ldr	r1, [sp, #16]
 802e752:	9a05      	ldr	r2, [sp, #20]
 802e754:	2900      	cmp	r1, #0
 802e756:	4682      	mov	sl, r0
 802e758:	db3a      	blt.n	802e7d0 <__strftime.isra.0+0x4c0>
 802e75a:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802e75e:	fb91 fbfb 	sdiv	fp, r1, fp
 802e762:	f10b 0b13 	add.w	fp, fp, #19
 802e766:	6970      	ldr	r0, [r6, #20]
 802e768:	2800      	cmp	r0, #0
 802e76a:	db3e      	blt.n	802e7ea <__strftime.isra.0+0x4da>
 802e76c:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802e770:	f1ba 0f00 	cmp.w	sl, #0
 802e774:	fb90 fefc 	sdiv	lr, r0, ip
 802e778:	fb0c 001e 	mls	r0, ip, lr, r0
 802e77c:	da4f      	bge.n	802e81e <__strftime.isra.0+0x50e>
 802e77e:	4482      	add	sl, r0
 802e780:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802e784:	d157      	bne.n	802e836 <__strftime.isra.0+0x526>
 802e786:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e78a:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802e78e:	9b03      	ldr	r3, [sp, #12]
 802e790:	2164      	movs	r1, #100	@ 0x64
 802e792:	fb01 aa0b 	mla	sl, r1, fp, sl
 802e796:	2b00      	cmp	r3, #0
 802e798:	f040 81f7 	bne.w	802eb8a <__strftime.isra.0+0x87a>
 802e79c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802e7a0:	d104      	bne.n	802e7ac <__strftime.isra.0+0x49c>
 802e7a2:	f242 710f 	movw	r1, #9999	@ 0x270f
 802e7a6:	458a      	cmp	sl, r1
 802e7a8:	f200 8275 	bhi.w	802ec96 <__strftime.isra.0+0x986>
 802e7ac:	a906      	add	r1, sp, #24
 802e7ae:	2025      	movs	r0, #37	@ 0x25
 802e7b0:	7008      	strb	r0, [r1, #0]
 802e7b2:	f1b9 0f00 	cmp.w	r9, #0
 802e7b6:	f040 81f3 	bne.w	802eba0 <__strftime.isra.0+0x890>
 802e7ba:	1c48      	adds	r0, r1, #1
 802e7bc:	499c      	ldr	r1, [pc, #624]	@ (802ea30 <__strftime.isra.0+0x720>)
 802e7be:	9203      	str	r2, [sp, #12]
 802e7c0:	f000 fdda 	bl	802f378 <strcpy>
 802e7c4:	9a03      	ldr	r2, [sp, #12]
 802e7c6:	f8cd a000 	str.w	sl, [sp]
 802e7ca:	4613      	mov	r3, r2
 802e7cc:	aa06      	add	r2, sp, #24
 802e7ce:	e098      	b.n	802e902 <__strftime.isra.0+0x5f2>
 802e7d0:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802e7d4:	9205      	str	r2, [sp, #20]
 802e7d6:	9104      	str	r1, [sp, #16]
 802e7d8:	f000 fe6b 	bl	802f4b2 <abs>
 802e7dc:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802e7e0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802e7e4:	fb90 fbfc 	sdiv	fp, r0, ip
 802e7e8:	e7bd      	b.n	802e766 <__strftime.isra.0+0x456>
 802e7ea:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802e7ee:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802e7f2:	f000 fe5e 	bl	802f4b2 <abs>
 802e7f6:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802e7fa:	f1ba 0f00 	cmp.w	sl, #0
 802e7fe:	fb90 fefc 	sdiv	lr, r0, ip
 802e802:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802e806:	fb0e 001c 	mls	r0, lr, ip, r0
 802e80a:	da08      	bge.n	802e81e <__strftime.isra.0+0x50e>
 802e80c:	6971      	ldr	r1, [r6, #20]
 802e80e:	4b89      	ldr	r3, [pc, #548]	@ (802ea34 <__strftime.isra.0+0x724>)
 802e810:	4299      	cmp	r1, r3
 802e812:	dab4      	bge.n	802e77e <__strftime.isra.0+0x46e>
 802e814:	f04f 0a01 	mov.w	sl, #1
 802e818:	f8cd a00c 	str.w	sl, [sp, #12]
 802e81c:	e7af      	b.n	802e77e <__strftime.isra.0+0x46e>
 802e81e:	f1ba 0f00 	cmp.w	sl, #0
 802e822:	d0ac      	beq.n	802e77e <__strftime.isra.0+0x46e>
 802e824:	4b81      	ldr	r3, [pc, #516]	@ (802ea2c <__strftime.isra.0+0x71c>)
 802e826:	4299      	cmp	r1, r3
 802e828:	9b03      	ldr	r3, [sp, #12]
 802e82a:	bfbc      	itt	lt
 802e82c:	2301      	movlt	r3, #1
 802e82e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802e832:	9303      	str	r3, [sp, #12]
 802e834:	e7a3      	b.n	802e77e <__strftime.isra.0+0x46e>
 802e836:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802e83a:	bf04      	itt	eq
 802e83c:	f10b 0b01 	addeq.w	fp, fp, #1
 802e840:	f04f 0a00 	moveq.w	sl, #0
 802e844:	e7a3      	b.n	802e78e <__strftime.isra.0+0x47e>
 802e846:	497c      	ldr	r1, [pc, #496]	@ (802ea38 <__strftime.isra.0+0x728>)
 802e848:	4a7c      	ldr	r2, [pc, #496]	@ (802ea3c <__strftime.isra.0+0x72c>)
 802e84a:	68b3      	ldr	r3, [r6, #8]
 802e84c:	286b      	cmp	r0, #107	@ 0x6b
 802e84e:	bf18      	it	ne
 802e850:	460a      	movne	r2, r1
 802e852:	e6c9      	b.n	802e5e8 <__strftime.isra.0+0x2d8>
 802e854:	68b3      	ldr	r3, [r6, #8]
 802e856:	b163      	cbz	r3, 802e872 <__strftime.isra.0+0x562>
 802e858:	2b0c      	cmp	r3, #12
 802e85a:	d004      	beq.n	802e866 <__strftime.isra.0+0x556>
 802e85c:	210c      	movs	r1, #12
 802e85e:	fb93 f2f1 	sdiv	r2, r3, r1
 802e862:	fb01 3312 	mls	r3, r1, r2, r3
 802e866:	4975      	ldr	r1, [pc, #468]	@ (802ea3c <__strftime.isra.0+0x72c>)
 802e868:	4a73      	ldr	r2, [pc, #460]	@ (802ea38 <__strftime.isra.0+0x728>)
 802e86a:	2849      	cmp	r0, #73	@ 0x49
 802e86c:	bf18      	it	ne
 802e86e:	460a      	movne	r2, r1
 802e870:	e6ba      	b.n	802e5e8 <__strftime.isra.0+0x2d8>
 802e872:	230c      	movs	r3, #12
 802e874:	e7f7      	b.n	802e866 <__strftime.isra.0+0x556>
 802e876:	69f3      	ldr	r3, [r6, #28]
 802e878:	4a71      	ldr	r2, [pc, #452]	@ (802ea40 <__strftime.isra.0+0x730>)
 802e87a:	3301      	adds	r3, #1
 802e87c:	e6b4      	b.n	802e5e8 <__strftime.isra.0+0x2d8>
 802e87e:	6933      	ldr	r3, [r6, #16]
 802e880:	3301      	adds	r3, #1
 802e882:	e723      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802e884:	6873      	ldr	r3, [r6, #4]
 802e886:	e721      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802e888:	1e6b      	subs	r3, r5, #1
 802e88a:	429c      	cmp	r4, r3
 802e88c:	f4bf aed0 	bcs.w	802e630 <__strftime.isra.0+0x320>
 802e890:	f104 0a01 	add.w	sl, r4, #1
 802e894:	230a      	movs	r3, #10
 802e896:	553b      	strb	r3, [r7, r4]
 802e898:	e5e8      	b.n	802e46c <__strftime.isra.0+0x15c>
 802e89a:	68b3      	ldr	r3, [r6, #8]
 802e89c:	2b0b      	cmp	r3, #11
 802e89e:	4b69      	ldr	r3, [pc, #420]	@ (802ea44 <__strftime.isra.0+0x734>)
 802e8a0:	bfd4      	ite	le
 802e8a2:	2200      	movle	r2, #0
 802e8a4:	2201      	movgt	r2, #1
 802e8a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802e8aa:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802e8ae:	4658      	mov	r0, fp
 802e8b0:	f7e1 fcf6 	bl	80102a0 <strlen>
 802e8b4:	eb04 0a00 	add.w	sl, r4, r0
 802e8b8:	4863      	ldr	r0, [pc, #396]	@ (802ea48 <__strftime.isra.0+0x738>)
 802e8ba:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802e8be:	1e69      	subs	r1, r5, #1
 802e8c0:	45a2      	cmp	sl, r4
 802e8c2:	f43f add3 	beq.w	802e46c <__strftime.isra.0+0x15c>
 802e8c6:	42a1      	cmp	r1, r4
 802e8c8:	f67f aeb2 	bls.w	802e630 <__strftime.isra.0+0x320>
 802e8cc:	f898 2000 	ldrb.w	r2, [r8]
 802e8d0:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802e8d4:	2a50      	cmp	r2, #80	@ 0x50
 802e8d6:	d106      	bne.n	802e8e6 <__strftime.isra.0+0x5d6>
 802e8d8:	5cc2      	ldrb	r2, [r0, r3]
 802e8da:	f002 0203 	and.w	r2, r2, #3
 802e8de:	2a01      	cmp	r2, #1
 802e8e0:	bf08      	it	eq
 802e8e2:	3320      	addeq	r3, #32
 802e8e4:	b2db      	uxtb	r3, r3
 802e8e6:	553b      	strb	r3, [r7, r4]
 802e8e8:	3401      	adds	r4, #1
 802e8ea:	e7e9      	b.n	802e8c0 <__strftime.isra.0+0x5b0>
 802e8ec:	2203      	movs	r2, #3
 802e8ee:	6933      	ldr	r3, [r6, #16]
 802e8f0:	fb93 f3f2 	sdiv	r3, r3, r2
 802e8f4:	4a55      	ldr	r2, [pc, #340]	@ (802ea4c <__strftime.isra.0+0x73c>)
 802e8f6:	3301      	adds	r3, #1
 802e8f8:	e676      	b.n	802e5e8 <__strftime.isra.0+0x2d8>
 802e8fa:	6873      	ldr	r3, [r6, #4]
 802e8fc:	9300      	str	r3, [sp, #0]
 802e8fe:	68b3      	ldr	r3, [r6, #8]
 802e900:	4a53      	ldr	r2, [pc, #332]	@ (802ea50 <__strftime.isra.0+0x740>)
 802e902:	1b29      	subs	r1, r5, r4
 802e904:	1938      	adds	r0, r7, r4
 802e906:	f001 ffff 	bl	8030908 <sniprintf>
 802e90a:	e68a      	b.n	802e622 <__strftime.isra.0+0x312>
 802e90c:	6a33      	ldr	r3, [r6, #32]
 802e90e:	2b00      	cmp	r3, #0
 802e910:	db78      	blt.n	802ea04 <__strftime.isra.0+0x6f4>
 802e912:	f000 fa7b 	bl	802ee0c <__tz_lock>
 802e916:	9b02      	ldr	r3, [sp, #8]
 802e918:	b90b      	cbnz	r3, 802e91e <__strftime.isra.0+0x60e>
 802e91a:	f000 fa83 	bl	802ee24 <_tzset_unlocked>
 802e91e:	f007 fe79 	bl	8036614 <__gettzinfo>
 802e922:	6a33      	ldr	r3, [r6, #32]
 802e924:	2b00      	cmp	r3, #0
 802e926:	bfd4      	ite	le
 802e928:	2200      	movle	r2, #0
 802e92a:	2201      	movgt	r2, #1
 802e92c:	2328      	movs	r3, #40	@ 0x28
 802e92e:	fb02 3303 	mla	r3, r2, r3, r3
 802e932:	58c3      	ldr	r3, [r0, r3]
 802e934:	f1c3 0a00 	rsb	sl, r3, #0
 802e938:	f000 fa6e 	bl	802ee18 <__tz_unlock>
 802e93c:	2301      	movs	r3, #1
 802e93e:	9302      	str	r3, [sp, #8]
 802e940:	6972      	ldr	r2, [r6, #20]
 802e942:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802e946:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802e94a:	f16c 0c00 	sbc.w	ip, ip, #0
 802e94e:	f1bc 0f00 	cmp.w	ip, #0
 802e952:	eba5 0104 	sub.w	r1, r5, r4
 802e956:	eb07 0004 	add.w	r0, r7, r4
 802e95a:	da02      	bge.n	802e962 <__strftime.isra.0+0x652>
 802e95c:	3303      	adds	r3, #3
 802e95e:	f14c 0c00 	adc.w	ip, ip, #0
 802e962:	089b      	lsrs	r3, r3, #2
 802e964:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802e968:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802e96c:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802e970:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802e974:	fb9e fefb 	sdiv	lr, lr, fp
 802e978:	ebb3 030e 	subs.w	r3, r3, lr
 802e97c:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802e980:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802e984:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802e988:	fb9e fefb 	sdiv	lr, lr, fp
 802e98c:	eb13 030e 	adds.w	r3, r3, lr
 802e990:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802e994:	3a46      	subs	r2, #70	@ 0x46
 802e996:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802e99a:	fb0e f202 	mul.w	r2, lr, r2
 802e99e:	189b      	adds	r3, r3, r2
 802e9a0:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802e9a4:	69f2      	ldr	r2, [r6, #28]
 802e9a6:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802e9aa:	189b      	adds	r3, r3, r2
 802e9ac:	f04f 0e18 	mov.w	lr, #24
 802e9b0:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802e9b4:	fba3 230e 	umull	r2, r3, r3, lr
 802e9b8:	fb0e 330c 	mla	r3, lr, ip, r3
 802e9bc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802e9c0:	eb12 020c 	adds.w	r2, r2, ip
 802e9c4:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802e9c8:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802e9cc:	fba2 2e0c 	umull	r2, lr, r2, ip
 802e9d0:	fb0c ee03 	mla	lr, ip, r3, lr
 802e9d4:	eb12 030b 	adds.w	r3, r2, fp
 802e9d8:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802e9dc:	fba3 e30c 	umull	lr, r3, r3, ip
 802e9e0:	fb0c 3302 	mla	r3, ip, r2, r3
 802e9e4:	f8d6 c000 	ldr.w	ip, [r6]
 802e9e8:	eb1e 020c 	adds.w	r2, lr, ip
 802e9ec:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802e9f0:	ebb2 020a 	subs.w	r2, r2, sl
 802e9f4:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802e9f8:	e9cd 2300 	strd	r2, r3, [sp]
 802e9fc:	4a15      	ldr	r2, [pc, #84]	@ (802ea54 <__strftime.isra.0+0x744>)
 802e9fe:	f001 ff83 	bl	8030908 <sniprintf>
 802ea02:	e60e      	b.n	802e622 <__strftime.isra.0+0x312>
 802ea04:	f04f 0a00 	mov.w	sl, #0
 802ea08:	e79a      	b.n	802e940 <__strftime.isra.0+0x630>
 802ea0a:	6833      	ldr	r3, [r6, #0]
 802ea0c:	e65e      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802ea0e:	1e6b      	subs	r3, r5, #1
 802ea10:	429c      	cmp	r4, r3
 802ea12:	f4bf ae0d 	bcs.w	802e630 <__strftime.isra.0+0x320>
 802ea16:	f104 0a01 	add.w	sl, r4, #1
 802ea1a:	2309      	movs	r3, #9
 802ea1c:	e73b      	b.n	802e896 <__strftime.isra.0+0x586>
 802ea1e:	6833      	ldr	r3, [r6, #0]
 802ea20:	9301      	str	r3, [sp, #4]
 802ea22:	6873      	ldr	r3, [r6, #4]
 802ea24:	9300      	str	r3, [sp, #0]
 802ea26:	68b3      	ldr	r3, [r6, #8]
 802ea28:	4a0b      	ldr	r2, [pc, #44]	@ (802ea58 <__strftime.isra.0+0x748>)
 802ea2a:	e5d1      	b.n	802e5d0 <__strftime.isra.0+0x2c0>
 802ea2c:	fffff894 	.word	0xfffff894
 802ea30:	0803d412 	.word	0x0803d412
 802ea34:	fffff895 	.word	0xfffff895
 802ea38:	0803d401 	.word	0x0803d401
 802ea3c:	0803d3f3 	.word	0x0803d3f3
 802ea40:	0803d416 	.word	0x0803d416
 802ea44:	0803d5cc 	.word	0x0803d5cc
 802ea48:	0803d6c9 	.word	0x0803d6c9
 802ea4c:	0803d41b 	.word	0x0803d41b
 802ea50:	0803d42a 	.word	0x0803d42a
 802ea54:	0803d420 	.word	0x0803d420
 802ea58:	0803d425 	.word	0x0803d425
 802ea5c:	1e6b      	subs	r3, r5, #1
 802ea5e:	429c      	cmp	r4, r3
 802ea60:	f4bf ade6 	bcs.w	802e630 <__strftime.isra.0+0x320>
 802ea64:	69b3      	ldr	r3, [r6, #24]
 802ea66:	b91b      	cbnz	r3, 802ea70 <__strftime.isra.0+0x760>
 802ea68:	2337      	movs	r3, #55	@ 0x37
 802ea6a:	f104 0a01 	add.w	sl, r4, #1
 802ea6e:	e712      	b.n	802e896 <__strftime.isra.0+0x586>
 802ea70:	3330      	adds	r3, #48	@ 0x30
 802ea72:	b2db      	uxtb	r3, r3
 802ea74:	e7f9      	b.n	802ea6a <__strftime.isra.0+0x75a>
 802ea76:	69f3      	ldr	r3, [r6, #28]
 802ea78:	69b2      	ldr	r2, [r6, #24]
 802ea7a:	3307      	adds	r3, #7
 802ea7c:	1a9b      	subs	r3, r3, r2
 802ea7e:	2207      	movs	r2, #7
 802ea80:	fb93 f3f2 	sdiv	r3, r3, r2
 802ea84:	e622      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802ea86:	4630      	mov	r0, r6
 802ea88:	f7ff fbf0 	bl	802e26c <iso_year_adjust>
 802ea8c:	69b2      	ldr	r2, [r6, #24]
 802ea8e:	b132      	cbz	r2, 802ea9e <__strftime.isra.0+0x78e>
 802ea90:	3a01      	subs	r2, #1
 802ea92:	2800      	cmp	r0, #0
 802ea94:	69f3      	ldr	r3, [r6, #28]
 802ea96:	dc26      	bgt.n	802eae6 <__strftime.isra.0+0x7d6>
 802ea98:	d103      	bne.n	802eaa2 <__strftime.isra.0+0x792>
 802ea9a:	330a      	adds	r3, #10
 802ea9c:	e7ee      	b.n	802ea7c <__strftime.isra.0+0x76c>
 802ea9e:	2206      	movs	r2, #6
 802eaa0:	e7f7      	b.n	802ea92 <__strftime.isra.0+0x782>
 802eaa2:	1ad2      	subs	r2, r2, r3
 802eaa4:	6973      	ldr	r3, [r6, #20]
 802eaa6:	2b00      	cmp	r3, #0
 802eaa8:	f240 716b 	movw	r1, #1899	@ 0x76b
 802eaac:	bfa8      	it	ge
 802eaae:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802eab2:	440b      	add	r3, r1
 802eab4:	0799      	lsls	r1, r3, #30
 802eab6:	d105      	bne.n	802eac4 <__strftime.isra.0+0x7b4>
 802eab8:	2064      	movs	r0, #100	@ 0x64
 802eaba:	fb93 f1f0 	sdiv	r1, r3, r0
 802eabe:	fb00 3111 	mls	r1, r0, r1, r3
 802eac2:	b971      	cbnz	r1, 802eae2 <__strftime.isra.0+0x7d2>
 802eac4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802eac8:	fb93 f0f1 	sdiv	r0, r3, r1
 802eacc:	fb01 3310 	mls	r3, r1, r0, r3
 802ead0:	fab3 f383 	clz	r3, r3
 802ead4:	095b      	lsrs	r3, r3, #5
 802ead6:	1ad2      	subs	r2, r2, r3
 802ead8:	2a04      	cmp	r2, #4
 802eada:	bfcc      	ite	gt
 802eadc:	2334      	movgt	r3, #52	@ 0x34
 802eade:	2335      	movle	r3, #53	@ 0x35
 802eae0:	e5f4      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802eae2:	2301      	movs	r3, #1
 802eae4:	e7f7      	b.n	802ead6 <__strftime.isra.0+0x7c6>
 802eae6:	2301      	movs	r3, #1
 802eae8:	e5f0      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802eaea:	496c      	ldr	r1, [pc, #432]	@ (802ec9c <__strftime.isra.0+0x98c>)
 802eaec:	9203      	str	r2, [sp, #12]
 802eaee:	a806      	add	r0, sp, #24
 802eaf0:	f000 fc42 	bl	802f378 <strcpy>
 802eaf4:	a806      	add	r0, sp, #24
 802eaf6:	f7e1 fbd3 	bl	80102a0 <strlen>
 802eafa:	ab06      	add	r3, sp, #24
 802eafc:	eb03 0a00 	add.w	sl, r3, r0
 802eb00:	f10a 0a01 	add.w	sl, sl, #1
 802eb04:	46d3      	mov	fp, sl
 802eb06:	f1b9 0f00 	cmp.w	r9, #0
 802eb0a:	d009      	beq.n	802eb20 <__strftime.isra.0+0x810>
 802eb0c:	9a03      	ldr	r2, [sp, #12]
 802eb0e:	f803 9000 	strb.w	r9, [r3, r0]
 802eb12:	2a05      	cmp	r2, #5
 802eb14:	d901      	bls.n	802eb1a <__strftime.isra.0+0x80a>
 802eb16:	1f93      	subs	r3, r2, #6
 802eb18:	d106      	bne.n	802eb28 <__strftime.isra.0+0x818>
 802eb1a:	4961      	ldr	r1, [pc, #388]	@ (802eca0 <__strftime.isra.0+0x990>)
 802eb1c:	4658      	mov	r0, fp
 802eb1e:	e5a6      	b.n	802e66e <__strftime.isra.0+0x35e>
 802eb20:	aa06      	add	r2, sp, #24
 802eb22:	232b      	movs	r3, #43	@ 0x2b
 802eb24:	5413      	strb	r3, [r2, r0]
 802eb26:	2304      	movs	r3, #4
 802eb28:	a90e      	add	r1, sp, #56	@ 0x38
 802eb2a:	4a5e      	ldr	r2, [pc, #376]	@ (802eca4 <__strftime.isra.0+0x994>)
 802eb2c:	eba1 010a 	sub.w	r1, r1, sl
 802eb30:	4650      	mov	r0, sl
 802eb32:	f001 fee9 	bl	8030908 <sniprintf>
 802eb36:	2800      	cmp	r0, #0
 802eb38:	bfc8      	it	gt
 802eb3a:	eb0a 0b00 	addgt.w	fp, sl, r0
 802eb3e:	e7ec      	b.n	802eb1a <__strftime.isra.0+0x80a>
 802eb40:	1e6b      	subs	r3, r5, #1
 802eb42:	429c      	cmp	r4, r3
 802eb44:	f4bf ad74 	bcs.w	802e630 <__strftime.isra.0+0x320>
 802eb48:	69b3      	ldr	r3, [r6, #24]
 802eb4a:	f104 0a01 	add.w	sl, r4, #1
 802eb4e:	3330      	adds	r3, #48	@ 0x30
 802eb50:	e6a1      	b.n	802e896 <__strftime.isra.0+0x586>
 802eb52:	69b2      	ldr	r2, [r6, #24]
 802eb54:	b11a      	cbz	r2, 802eb5e <__strftime.isra.0+0x84e>
 802eb56:	3a01      	subs	r2, #1
 802eb58:	69f3      	ldr	r3, [r6, #28]
 802eb5a:	3307      	adds	r3, #7
 802eb5c:	e78e      	b.n	802ea7c <__strftime.isra.0+0x76c>
 802eb5e:	2206      	movs	r2, #6
 802eb60:	e7fa      	b.n	802eb58 <__strftime.isra.0+0x848>
 802eb62:	6970      	ldr	r0, [r6, #20]
 802eb64:	2800      	cmp	r0, #0
 802eb66:	db05      	blt.n	802eb74 <__strftime.isra.0+0x864>
 802eb68:	2364      	movs	r3, #100	@ 0x64
 802eb6a:	fb90 f2f3 	sdiv	r2, r0, r3
 802eb6e:	fb02 0313 	mls	r3, r2, r3, r0
 802eb72:	e5ab      	b.n	802e6cc <__strftime.isra.0+0x3bc>
 802eb74:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802eb78:	f000 fc9b 	bl	802f4b2 <abs>
 802eb7c:	e7f4      	b.n	802eb68 <__strftime.isra.0+0x858>
 802eb7e:	6971      	ldr	r1, [r6, #20]
 802eb80:	4849      	ldr	r0, [pc, #292]	@ (802eca8 <__strftime.isra.0+0x998>)
 802eb82:	4281      	cmp	r1, r0
 802eb84:	da09      	bge.n	802eb9a <__strftime.isra.0+0x88a>
 802eb86:	eba0 0a01 	sub.w	sl, r0, r1
 802eb8a:	212d      	movs	r1, #45	@ 0x2d
 802eb8c:	f88d 1018 	strb.w	r1, [sp, #24]
 802eb90:	b102      	cbz	r2, 802eb94 <__strftime.isra.0+0x884>
 802eb92:	3a01      	subs	r2, #1
 802eb94:	f10d 0119 	add.w	r1, sp, #25
 802eb98:	e609      	b.n	802e7ae <__strftime.isra.0+0x49e>
 802eb9a:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802eb9e:	e5fd      	b.n	802e79c <__strftime.isra.0+0x48c>
 802eba0:	2330      	movs	r3, #48	@ 0x30
 802eba2:	1c88      	adds	r0, r1, #2
 802eba4:	704b      	strb	r3, [r1, #1]
 802eba6:	e609      	b.n	802e7bc <__strftime.isra.0+0x4ac>
 802eba8:	6a33      	ldr	r3, [r6, #32]
 802ebaa:	2b00      	cmp	r3, #0
 802ebac:	da01      	bge.n	802ebb2 <__strftime.isra.0+0x8a2>
 802ebae:	46a2      	mov	sl, r4
 802ebb0:	e45c      	b.n	802e46c <__strftime.isra.0+0x15c>
 802ebb2:	f000 f92b 	bl	802ee0c <__tz_lock>
 802ebb6:	9b02      	ldr	r3, [sp, #8]
 802ebb8:	b90b      	cbnz	r3, 802ebbe <__strftime.isra.0+0x8ae>
 802ebba:	f000 f933 	bl	802ee24 <_tzset_unlocked>
 802ebbe:	f007 fd29 	bl	8036614 <__gettzinfo>
 802ebc2:	6a33      	ldr	r3, [r6, #32]
 802ebc4:	2b00      	cmp	r3, #0
 802ebc6:	bfd4      	ite	le
 802ebc8:	2200      	movle	r2, #0
 802ebca:	2201      	movgt	r2, #1
 802ebcc:	2328      	movs	r3, #40	@ 0x28
 802ebce:	fb02 3303 	mla	r3, r2, r3, r3
 802ebd2:	eb07 0a04 	add.w	sl, r7, r4
 802ebd6:	58c3      	ldr	r3, [r0, r3]
 802ebd8:	f1c3 0900 	rsb	r9, r3, #0
 802ebdc:	f000 f91c 	bl	802ee18 <__tz_unlock>
 802ebe0:	233c      	movs	r3, #60	@ 0x3c
 802ebe2:	fb99 f0f3 	sdiv	r0, r9, r3
 802ebe6:	f001 fc04 	bl	80303f2 <labs>
 802ebea:	233c      	movs	r3, #60	@ 0x3c
 802ebec:	eba5 0b04 	sub.w	fp, r5, r4
 802ebf0:	fb90 f2f3 	sdiv	r2, r0, r3
 802ebf4:	fb02 0013 	mls	r0, r2, r3, r0
 802ebf8:	9000      	str	r0, [sp, #0]
 802ebfa:	4a2c      	ldr	r2, [pc, #176]	@ (802ecac <__strftime.isra.0+0x99c>)
 802ebfc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802ec00:	4659      	mov	r1, fp
 802ec02:	4650      	mov	r0, sl
 802ec04:	fb99 f3f3 	sdiv	r3, r9, r3
 802ec08:	f001 fe7e 	bl	8030908 <sniprintf>
 802ec0c:	2800      	cmp	r0, #0
 802ec0e:	f6ff ad0f 	blt.w	802e630 <__strftime.isra.0+0x320>
 802ec12:	eb00 0a04 	add.w	sl, r0, r4
 802ec16:	4555      	cmp	r5, sl
 802ec18:	f67f ad0a 	bls.w	802e630 <__strftime.isra.0+0x320>
 802ec1c:	2301      	movs	r3, #1
 802ec1e:	9302      	str	r3, [sp, #8]
 802ec20:	e424      	b.n	802e46c <__strftime.isra.0+0x15c>
 802ec22:	6a33      	ldr	r3, [r6, #32]
 802ec24:	2b00      	cmp	r3, #0
 802ec26:	dbc2      	blt.n	802ebae <__strftime.isra.0+0x89e>
 802ec28:	f000 f8f0 	bl	802ee0c <__tz_lock>
 802ec2c:	9b02      	ldr	r3, [sp, #8]
 802ec2e:	b90b      	cbnz	r3, 802ec34 <__strftime.isra.0+0x924>
 802ec30:	f000 f8f8 	bl	802ee24 <_tzset_unlocked>
 802ec34:	6a33      	ldr	r3, [r6, #32]
 802ec36:	4a1e      	ldr	r2, [pc, #120]	@ (802ecb0 <__strftime.isra.0+0x9a0>)
 802ec38:	2b00      	cmp	r3, #0
 802ec3a:	bfd4      	ite	le
 802ec3c:	2300      	movle	r3, #0
 802ec3e:	2301      	movgt	r3, #1
 802ec40:	46a2      	mov	sl, r4
 802ec42:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802ec46:	4648      	mov	r0, r9
 802ec48:	f7e1 fb2a 	bl	80102a0 <strlen>
 802ec4c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802ec50:	4420      	add	r0, r4
 802ec52:	1e6b      	subs	r3, r5, #1
 802ec54:	4550      	cmp	r0, sl
 802ec56:	d102      	bne.n	802ec5e <__strftime.isra.0+0x94e>
 802ec58:	f000 f8de 	bl	802ee18 <__tz_unlock>
 802ec5c:	e7de      	b.n	802ec1c <__strftime.isra.0+0x90c>
 802ec5e:	4553      	cmp	r3, sl
 802ec60:	d906      	bls.n	802ec70 <__strftime.isra.0+0x960>
 802ec62:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802ec66:	f807 200a 	strb.w	r2, [r7, sl]
 802ec6a:	f10a 0a01 	add.w	sl, sl, #1
 802ec6e:	e7f1      	b.n	802ec54 <__strftime.isra.0+0x944>
 802ec70:	f000 f8d2 	bl	802ee18 <__tz_unlock>
 802ec74:	e4dc      	b.n	802e630 <__strftime.isra.0+0x320>
 802ec76:	1e6b      	subs	r3, r5, #1
 802ec78:	429c      	cmp	r4, r3
 802ec7a:	f4bf acd9 	bcs.w	802e630 <__strftime.isra.0+0x320>
 802ec7e:	f104 0a01 	add.w	sl, r4, #1
 802ec82:	2325      	movs	r3, #37	@ 0x25
 802ec84:	e607      	b.n	802e896 <__strftime.isra.0+0x586>
 802ec86:	46a2      	mov	sl, r4
 802ec88:	2d00      	cmp	r5, #0
 802ec8a:	f43f acd3 	beq.w	802e634 <__strftime.isra.0+0x324>
 802ec8e:	2300      	movs	r3, #0
 802ec90:	f807 300a 	strb.w	r3, [r7, sl]
 802ec94:	e4ce      	b.n	802e634 <__strftime.isra.0+0x324>
 802ec96:	4649      	mov	r1, r9
 802ec98:	e778      	b.n	802eb8c <__strftime.isra.0+0x87c>
 802ec9a:	bf00      	nop
 802ec9c:	0803d434 	.word	0x0803d434
 802eca0:	0803d59c 	.word	0x0803d59c
 802eca4:	0803d406 	.word	0x0803d406
 802eca8:	fffff894 	.word	0xfffff894
 802ecac:	0803d43c 	.word	0x0803d43c
 802ecb0:	20000164 	.word	0x20000164

0802ecb4 <strftime>:
 802ecb4:	f7ff bb2c 	b.w	802e310 <__strftime.isra.0>

0802ecb8 <__tzcalc_limits>:
 802ecb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ecbc:	4604      	mov	r4, r0
 802ecbe:	f007 fca9 	bl	8036614 <__gettzinfo>
 802ecc2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802ecc6:	429c      	cmp	r4, r3
 802ecc8:	f340 8099 	ble.w	802edfe <__tzcalc_limits+0x146>
 802eccc:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802ecd0:	19e5      	adds	r5, r4, r7
 802ecd2:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802ecd6:	f240 126d 	movw	r2, #365	@ 0x16d
 802ecda:	10ad      	asrs	r5, r5, #2
 802ecdc:	fb02 5503 	mla	r5, r2, r3, r5
 802ece0:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802ece4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802ece8:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802ecec:	4f45      	ldr	r7, [pc, #276]	@ (802ee04 <__tzcalc_limits+0x14c>)
 802ecee:	fb93 f3f2 	sdiv	r3, r3, r2
 802ecf2:	441d      	add	r5, r3
 802ecf4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ecf8:	eb04 030c 	add.w	r3, r4, ip
 802ecfc:	6044      	str	r4, [r0, #4]
 802ecfe:	fbb3 f3f2 	udiv	r3, r3, r2
 802ed02:	4601      	mov	r1, r0
 802ed04:	441d      	add	r5, r3
 802ed06:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802ed0a:	7a0b      	ldrb	r3, [r1, #8]
 802ed0c:	694a      	ldr	r2, [r1, #20]
 802ed0e:	2b4a      	cmp	r3, #74	@ 0x4a
 802ed10:	d133      	bne.n	802ed7a <__tzcalc_limits+0xc2>
 802ed12:	07a6      	lsls	r6, r4, #30
 802ed14:	eb05 0302 	add.w	r3, r5, r2
 802ed18:	d106      	bne.n	802ed28 <__tzcalc_limits+0x70>
 802ed1a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802ed1e:	fb94 f6fe 	sdiv	r6, r4, lr
 802ed22:	fb0e 4616 	mls	r6, lr, r6, r4
 802ed26:	b936      	cbnz	r6, 802ed36 <__tzcalc_limits+0x7e>
 802ed28:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802ed2c:	fb94 f6fe 	sdiv	r6, r4, lr
 802ed30:	fb0e 4616 	mls	r6, lr, r6, r4
 802ed34:	b9fe      	cbnz	r6, 802ed76 <__tzcalc_limits+0xbe>
 802ed36:	2a3b      	cmp	r2, #59	@ 0x3b
 802ed38:	bfd4      	ite	le
 802ed3a:	2200      	movle	r2, #0
 802ed3c:	2201      	movgt	r2, #1
 802ed3e:	4413      	add	r3, r2
 802ed40:	3b01      	subs	r3, #1
 802ed42:	698a      	ldr	r2, [r1, #24]
 802ed44:	17d6      	asrs	r6, r2, #31
 802ed46:	fbc3 2607 	smlal	r2, r6, r3, r7
 802ed4a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802ed4c:	18d2      	adds	r2, r2, r3
 802ed4e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802ed52:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802ed56:	3128      	adds	r1, #40	@ 0x28
 802ed58:	458c      	cmp	ip, r1
 802ed5a:	d1d6      	bne.n	802ed0a <__tzcalc_limits+0x52>
 802ed5c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802ed60:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802ed64:	428c      	cmp	r4, r1
 802ed66:	4193      	sbcs	r3, r2
 802ed68:	bfb4      	ite	lt
 802ed6a:	2301      	movlt	r3, #1
 802ed6c:	2300      	movge	r3, #0
 802ed6e:	6003      	str	r3, [r0, #0]
 802ed70:	2001      	movs	r0, #1
 802ed72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ed76:	2200      	movs	r2, #0
 802ed78:	e7e1      	b.n	802ed3e <__tzcalc_limits+0x86>
 802ed7a:	2b44      	cmp	r3, #68	@ 0x44
 802ed7c:	d101      	bne.n	802ed82 <__tzcalc_limits+0xca>
 802ed7e:	18ab      	adds	r3, r5, r2
 802ed80:	e7df      	b.n	802ed42 <__tzcalc_limits+0x8a>
 802ed82:	07a3      	lsls	r3, r4, #30
 802ed84:	d105      	bne.n	802ed92 <__tzcalc_limits+0xda>
 802ed86:	2664      	movs	r6, #100	@ 0x64
 802ed88:	fb94 f3f6 	sdiv	r3, r4, r6
 802ed8c:	fb06 4313 	mls	r3, r6, r3, r4
 802ed90:	bb7b      	cbnz	r3, 802edf2 <__tzcalc_limits+0x13a>
 802ed92:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802ed96:	fb94 f6f3 	sdiv	r6, r4, r3
 802ed9a:	fb03 4616 	mls	r6, r3, r6, r4
 802ed9e:	fab6 f686 	clz	r6, r6
 802eda2:	0976      	lsrs	r6, r6, #5
 802eda4:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802ee08 <__tzcalc_limits+0x150>
 802eda8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802edac:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802edb0:	462b      	mov	r3, r5
 802edb2:	f04f 0800 	mov.w	r8, #0
 802edb6:	fb0a e606 	mla	r6, sl, r6, lr
 802edba:	f108 0801 	add.w	r8, r8, #1
 802edbe:	45c1      	cmp	r9, r8
 802edc0:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802edc4:	dc17      	bgt.n	802edf6 <__tzcalc_limits+0x13e>
 802edc6:	f103 0804 	add.w	r8, r3, #4
 802edca:	2607      	movs	r6, #7
 802edcc:	fb98 f6f6 	sdiv	r6, r8, r6
 802edd0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802edd4:	eba8 0606 	sub.w	r6, r8, r6
 802edd8:	1b92      	subs	r2, r2, r6
 802edda:	690e      	ldr	r6, [r1, #16]
 802eddc:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802ede0:	bf48      	it	mi
 802ede2:	3207      	addmi	r2, #7
 802ede4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802ede8:	4432      	add	r2, r6
 802edea:	4572      	cmp	r2, lr
 802edec:	da05      	bge.n	802edfa <__tzcalc_limits+0x142>
 802edee:	4413      	add	r3, r2
 802edf0:	e7a7      	b.n	802ed42 <__tzcalc_limits+0x8a>
 802edf2:	2601      	movs	r6, #1
 802edf4:	e7d6      	b.n	802eda4 <__tzcalc_limits+0xec>
 802edf6:	4473      	add	r3, lr
 802edf8:	e7df      	b.n	802edba <__tzcalc_limits+0x102>
 802edfa:	3a07      	subs	r2, #7
 802edfc:	e7f5      	b.n	802edea <__tzcalc_limits+0x132>
 802edfe:	2000      	movs	r0, #0
 802ee00:	e7b7      	b.n	802ed72 <__tzcalc_limits+0xba>
 802ee02:	bf00      	nop
 802ee04:	00015180 	.word	0x00015180
 802ee08:	0803d37c 	.word	0x0803d37c

0802ee0c <__tz_lock>:
 802ee0c:	4801      	ldr	r0, [pc, #4]	@ (802ee14 <__tz_lock+0x8>)
 802ee0e:	f000 bae1 	b.w	802f3d4 <__retarget_lock_acquire>
 802ee12:	bf00      	nop
 802ee14:	2001a108 	.word	0x2001a108

0802ee18 <__tz_unlock>:
 802ee18:	4801      	ldr	r0, [pc, #4]	@ (802ee20 <__tz_unlock+0x8>)
 802ee1a:	f000 badd 	b.w	802f3d8 <__retarget_lock_release>
 802ee1e:	bf00      	nop
 802ee20:	2001a108 	.word	0x2001a108

0802ee24 <_tzset_unlocked>:
 802ee24:	4b01      	ldr	r3, [pc, #4]	@ (802ee2c <_tzset_unlocked+0x8>)
 802ee26:	6818      	ldr	r0, [r3, #0]
 802ee28:	f000 b802 	b.w	802ee30 <_tzset_unlocked_r>
 802ee2c:	200002d8 	.word	0x200002d8

0802ee30 <_tzset_unlocked_r>:
 802ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee34:	b08d      	sub	sp, #52	@ 0x34
 802ee36:	4607      	mov	r7, r0
 802ee38:	f007 fbec 	bl	8036614 <__gettzinfo>
 802ee3c:	49bc      	ldr	r1, [pc, #752]	@ (802f130 <_tzset_unlocked_r+0x300>)
 802ee3e:	4dbd      	ldr	r5, [pc, #756]	@ (802f134 <_tzset_unlocked_r+0x304>)
 802ee40:	4604      	mov	r4, r0
 802ee42:	4638      	mov	r0, r7
 802ee44:	f001 face 	bl	80303e4 <_getenv_r>
 802ee48:	4606      	mov	r6, r0
 802ee4a:	bb10      	cbnz	r0, 802ee92 <_tzset_unlocked_r+0x62>
 802ee4c:	4bba      	ldr	r3, [pc, #744]	@ (802f138 <_tzset_unlocked_r+0x308>)
 802ee4e:	4abb      	ldr	r2, [pc, #748]	@ (802f13c <_tzset_unlocked_r+0x30c>)
 802ee50:	6018      	str	r0, [r3, #0]
 802ee52:	4bbb      	ldr	r3, [pc, #748]	@ (802f140 <_tzset_unlocked_r+0x310>)
 802ee54:	62a0      	str	r0, [r4, #40]	@ 0x28
 802ee56:	6018      	str	r0, [r3, #0]
 802ee58:	4bba      	ldr	r3, [pc, #744]	@ (802f144 <_tzset_unlocked_r+0x314>)
 802ee5a:	6520      	str	r0, [r4, #80]	@ 0x50
 802ee5c:	e9c3 2200 	strd	r2, r2, [r3]
 802ee60:	214a      	movs	r1, #74	@ 0x4a
 802ee62:	2200      	movs	r2, #0
 802ee64:	2300      	movs	r3, #0
 802ee66:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802ee6a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802ee6e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802ee72:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802ee76:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802ee7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802ee7e:	6828      	ldr	r0, [r5, #0]
 802ee80:	7221      	strb	r1, [r4, #8]
 802ee82:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802ee86:	f001 fac1 	bl	803040c <free>
 802ee8a:	602e      	str	r6, [r5, #0]
 802ee8c:	b00d      	add	sp, #52	@ 0x34
 802ee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee92:	6829      	ldr	r1, [r5, #0]
 802ee94:	2900      	cmp	r1, #0
 802ee96:	f040 808e 	bne.w	802efb6 <_tzset_unlocked_r+0x186>
 802ee9a:	6828      	ldr	r0, [r5, #0]
 802ee9c:	f001 fab6 	bl	803040c <free>
 802eea0:	4630      	mov	r0, r6
 802eea2:	f7e1 f9fd 	bl	80102a0 <strlen>
 802eea6:	1c41      	adds	r1, r0, #1
 802eea8:	4638      	mov	r0, r7
 802eeaa:	f001 fab7 	bl	803041c <_malloc_r>
 802eeae:	6028      	str	r0, [r5, #0]
 802eeb0:	2800      	cmp	r0, #0
 802eeb2:	f040 8086 	bne.w	802efc2 <_tzset_unlocked_r+0x192>
 802eeb6:	4aa2      	ldr	r2, [pc, #648]	@ (802f140 <_tzset_unlocked_r+0x310>)
 802eeb8:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802f144 <_tzset_unlocked_r+0x314>
 802eebc:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802f138 <_tzset_unlocked_r+0x308>
 802eec0:	2300      	movs	r3, #0
 802eec2:	6013      	str	r3, [r2, #0]
 802eec4:	4aa0      	ldr	r2, [pc, #640]	@ (802f148 <_tzset_unlocked_r+0x318>)
 802eec6:	f8ca 3000 	str.w	r3, [sl]
 802eeca:	2000      	movs	r0, #0
 802eecc:	2100      	movs	r1, #0
 802eece:	e9c8 2200 	strd	r2, r2, [r8]
 802eed2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802eed6:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802eeda:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802eede:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802eee2:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802eee6:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802eeea:	224a      	movs	r2, #74	@ 0x4a
 802eeec:	7222      	strb	r2, [r4, #8]
 802eeee:	62a3      	str	r3, [r4, #40]	@ 0x28
 802eef0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802eef4:	6523      	str	r3, [r4, #80]	@ 0x50
 802eef6:	7833      	ldrb	r3, [r6, #0]
 802eef8:	2b3a      	cmp	r3, #58	@ 0x3a
 802eefa:	bf08      	it	eq
 802eefc:	3601      	addeq	r6, #1
 802eefe:	7833      	ldrb	r3, [r6, #0]
 802ef00:	2b3c      	cmp	r3, #60	@ 0x3c
 802ef02:	d162      	bne.n	802efca <_tzset_unlocked_r+0x19a>
 802ef04:	1c75      	adds	r5, r6, #1
 802ef06:	4a91      	ldr	r2, [pc, #580]	@ (802f14c <_tzset_unlocked_r+0x31c>)
 802ef08:	4991      	ldr	r1, [pc, #580]	@ (802f150 <_tzset_unlocked_r+0x320>)
 802ef0a:	ab0a      	add	r3, sp, #40	@ 0x28
 802ef0c:	4628      	mov	r0, r5
 802ef0e:	f001 fcd1 	bl	80308b4 <siscanf>
 802ef12:	2800      	cmp	r0, #0
 802ef14:	ddba      	ble.n	802ee8c <_tzset_unlocked_r+0x5c>
 802ef16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ef18:	1eda      	subs	r2, r3, #3
 802ef1a:	2a07      	cmp	r2, #7
 802ef1c:	d8b6      	bhi.n	802ee8c <_tzset_unlocked_r+0x5c>
 802ef1e:	5ceb      	ldrb	r3, [r5, r3]
 802ef20:	2b3e      	cmp	r3, #62	@ 0x3e
 802ef22:	d1b3      	bne.n	802ee8c <_tzset_unlocked_r+0x5c>
 802ef24:	3602      	adds	r6, #2
 802ef26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ef28:	18f5      	adds	r5, r6, r3
 802ef2a:	5cf3      	ldrb	r3, [r6, r3]
 802ef2c:	2b2d      	cmp	r3, #45	@ 0x2d
 802ef2e:	d15a      	bne.n	802efe6 <_tzset_unlocked_r+0x1b6>
 802ef30:	3501      	adds	r5, #1
 802ef32:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802ef36:	2300      	movs	r3, #0
 802ef38:	f8ad 301e 	strh.w	r3, [sp, #30]
 802ef3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 802ef40:	af08      	add	r7, sp, #32
 802ef42:	ab0a      	add	r3, sp, #40	@ 0x28
 802ef44:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802ef48:	9303      	str	r3, [sp, #12]
 802ef4a:	f10d 031e 	add.w	r3, sp, #30
 802ef4e:	9300      	str	r3, [sp, #0]
 802ef50:	4980      	ldr	r1, [pc, #512]	@ (802f154 <_tzset_unlocked_r+0x324>)
 802ef52:	ab0a      	add	r3, sp, #40	@ 0x28
 802ef54:	aa07      	add	r2, sp, #28
 802ef56:	4628      	mov	r0, r5
 802ef58:	f001 fcac 	bl	80308b4 <siscanf>
 802ef5c:	2800      	cmp	r0, #0
 802ef5e:	dd95      	ble.n	802ee8c <_tzset_unlocked_r+0x5c>
 802ef60:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802ef64:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802ef68:	223c      	movs	r2, #60	@ 0x3c
 802ef6a:	fb02 6603 	mla	r6, r2, r3, r6
 802ef6e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802ef72:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802ef76:	fb02 6603 	mla	r6, r2, r3, r6
 802ef7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ef7c:	fb09 f606 	mul.w	r6, r9, r6
 802ef80:	eb05 0903 	add.w	r9, r5, r3
 802ef84:	5ceb      	ldrb	r3, [r5, r3]
 802ef86:	2b3c      	cmp	r3, #60	@ 0x3c
 802ef88:	f040 80ee 	bne.w	802f168 <_tzset_unlocked_r+0x338>
 802ef8c:	f109 0501 	add.w	r5, r9, #1
 802ef90:	4a71      	ldr	r2, [pc, #452]	@ (802f158 <_tzset_unlocked_r+0x328>)
 802ef92:	496f      	ldr	r1, [pc, #444]	@ (802f150 <_tzset_unlocked_r+0x320>)
 802ef94:	ab0a      	add	r3, sp, #40	@ 0x28
 802ef96:	4628      	mov	r0, r5
 802ef98:	f001 fc8c 	bl	80308b4 <siscanf>
 802ef9c:	2800      	cmp	r0, #0
 802ef9e:	dc28      	bgt.n	802eff2 <_tzset_unlocked_r+0x1c2>
 802efa0:	f899 3001 	ldrb.w	r3, [r9, #1]
 802efa4:	2b3e      	cmp	r3, #62	@ 0x3e
 802efa6:	d124      	bne.n	802eff2 <_tzset_unlocked_r+0x1c2>
 802efa8:	4b68      	ldr	r3, [pc, #416]	@ (802f14c <_tzset_unlocked_r+0x31c>)
 802efaa:	62a6      	str	r6, [r4, #40]	@ 0x28
 802efac:	e9c8 3300 	strd	r3, r3, [r8]
 802efb0:	f8ca 6000 	str.w	r6, [sl]
 802efb4:	e76a      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802efb6:	f7e1 f913 	bl	80101e0 <strcmp>
 802efba:	2800      	cmp	r0, #0
 802efbc:	f47f af6d 	bne.w	802ee9a <_tzset_unlocked_r+0x6a>
 802efc0:	e764      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802efc2:	4631      	mov	r1, r6
 802efc4:	f000 f9d8 	bl	802f378 <strcpy>
 802efc8:	e775      	b.n	802eeb6 <_tzset_unlocked_r+0x86>
 802efca:	4a60      	ldr	r2, [pc, #384]	@ (802f14c <_tzset_unlocked_r+0x31c>)
 802efcc:	4963      	ldr	r1, [pc, #396]	@ (802f15c <_tzset_unlocked_r+0x32c>)
 802efce:	ab0a      	add	r3, sp, #40	@ 0x28
 802efd0:	4630      	mov	r0, r6
 802efd2:	f001 fc6f 	bl	80308b4 <siscanf>
 802efd6:	2800      	cmp	r0, #0
 802efd8:	f77f af58 	ble.w	802ee8c <_tzset_unlocked_r+0x5c>
 802efdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802efde:	3b03      	subs	r3, #3
 802efe0:	2b07      	cmp	r3, #7
 802efe2:	d9a0      	bls.n	802ef26 <_tzset_unlocked_r+0xf6>
 802efe4:	e752      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802efe6:	2b2b      	cmp	r3, #43	@ 0x2b
 802efe8:	bf08      	it	eq
 802efea:	3501      	addeq	r5, #1
 802efec:	f04f 0901 	mov.w	r9, #1
 802eff0:	e7a1      	b.n	802ef36 <_tzset_unlocked_r+0x106>
 802eff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802eff4:	1eda      	subs	r2, r3, #3
 802eff6:	2a07      	cmp	r2, #7
 802eff8:	f63f af48 	bhi.w	802ee8c <_tzset_unlocked_r+0x5c>
 802effc:	5ceb      	ldrb	r3, [r5, r3]
 802effe:	2b3e      	cmp	r3, #62	@ 0x3e
 802f000:	f47f af44 	bne.w	802ee8c <_tzset_unlocked_r+0x5c>
 802f004:	f109 0902 	add.w	r9, r9, #2
 802f008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f00a:	eb09 0503 	add.w	r5, r9, r3
 802f00e:	f819 3003 	ldrb.w	r3, [r9, r3]
 802f012:	2b2d      	cmp	r3, #45	@ 0x2d
 802f014:	f040 80b7 	bne.w	802f186 <_tzset_unlocked_r+0x356>
 802f018:	3501      	adds	r5, #1
 802f01a:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802f01e:	2300      	movs	r3, #0
 802f020:	f8ad 301c 	strh.w	r3, [sp, #28]
 802f024:	f8ad 301e 	strh.w	r3, [sp, #30]
 802f028:	f8ad 3020 	strh.w	r3, [sp, #32]
 802f02c:	930a      	str	r3, [sp, #40]	@ 0x28
 802f02e:	ab0a      	add	r3, sp, #40	@ 0x28
 802f030:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802f034:	9301      	str	r3, [sp, #4]
 802f036:	f10d 031e 	add.w	r3, sp, #30
 802f03a:	9300      	str	r3, [sp, #0]
 802f03c:	4945      	ldr	r1, [pc, #276]	@ (802f154 <_tzset_unlocked_r+0x324>)
 802f03e:	ab0a      	add	r3, sp, #40	@ 0x28
 802f040:	aa07      	add	r2, sp, #28
 802f042:	4628      	mov	r0, r5
 802f044:	f001 fc36 	bl	80308b4 <siscanf>
 802f048:	2800      	cmp	r0, #0
 802f04a:	f300 80a2 	bgt.w	802f192 <_tzset_unlocked_r+0x362>
 802f04e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802f052:	9304      	str	r3, [sp, #16]
 802f054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f056:	4627      	mov	r7, r4
 802f058:	441d      	add	r5, r3
 802f05a:	f04f 0b00 	mov.w	fp, #0
 802f05e:	782b      	ldrb	r3, [r5, #0]
 802f060:	2b2c      	cmp	r3, #44	@ 0x2c
 802f062:	bf08      	it	eq
 802f064:	3501      	addeq	r5, #1
 802f066:	f895 9000 	ldrb.w	r9, [r5]
 802f06a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802f06e:	f040 80a3 	bne.w	802f1b8 <_tzset_unlocked_r+0x388>
 802f072:	ab0a      	add	r3, sp, #40	@ 0x28
 802f074:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802f078:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802f07c:	aa09      	add	r2, sp, #36	@ 0x24
 802f07e:	9200      	str	r2, [sp, #0]
 802f080:	4937      	ldr	r1, [pc, #220]	@ (802f160 <_tzset_unlocked_r+0x330>)
 802f082:	9303      	str	r3, [sp, #12]
 802f084:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802f088:	4628      	mov	r0, r5
 802f08a:	f001 fc13 	bl	80308b4 <siscanf>
 802f08e:	2803      	cmp	r0, #3
 802f090:	f47f aefc 	bne.w	802ee8c <_tzset_unlocked_r+0x5c>
 802f094:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802f098:	1e4b      	subs	r3, r1, #1
 802f09a:	2b0b      	cmp	r3, #11
 802f09c:	f63f aef6 	bhi.w	802ee8c <_tzset_unlocked_r+0x5c>
 802f0a0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802f0a4:	1e53      	subs	r3, r2, #1
 802f0a6:	2b04      	cmp	r3, #4
 802f0a8:	f63f aef0 	bhi.w	802ee8c <_tzset_unlocked_r+0x5c>
 802f0ac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802f0b0:	2b06      	cmp	r3, #6
 802f0b2:	f63f aeeb 	bhi.w	802ee8c <_tzset_unlocked_r+0x5c>
 802f0b6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802f0ba:	f887 9008 	strb.w	r9, [r7, #8]
 802f0be:	617b      	str	r3, [r7, #20]
 802f0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f0c2:	eb05 0903 	add.w	r9, r5, r3
 802f0c6:	2500      	movs	r5, #0
 802f0c8:	f04f 0302 	mov.w	r3, #2
 802f0cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 802f0d0:	f8ad 501e 	strh.w	r5, [sp, #30]
 802f0d4:	f8ad 5020 	strh.w	r5, [sp, #32]
 802f0d8:	950a      	str	r5, [sp, #40]	@ 0x28
 802f0da:	f899 3000 	ldrb.w	r3, [r9]
 802f0de:	2b2f      	cmp	r3, #47	@ 0x2f
 802f0e0:	f040 8096 	bne.w	802f210 <_tzset_unlocked_r+0x3e0>
 802f0e4:	ab0a      	add	r3, sp, #40	@ 0x28
 802f0e6:	aa08      	add	r2, sp, #32
 802f0e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802f0ec:	f10d 021e 	add.w	r2, sp, #30
 802f0f0:	9200      	str	r2, [sp, #0]
 802f0f2:	491c      	ldr	r1, [pc, #112]	@ (802f164 <_tzset_unlocked_r+0x334>)
 802f0f4:	9303      	str	r3, [sp, #12]
 802f0f6:	aa07      	add	r2, sp, #28
 802f0f8:	4648      	mov	r0, r9
 802f0fa:	f001 fbdb 	bl	80308b4 <siscanf>
 802f0fe:	42a8      	cmp	r0, r5
 802f100:	f300 8086 	bgt.w	802f210 <_tzset_unlocked_r+0x3e0>
 802f104:	214a      	movs	r1, #74	@ 0x4a
 802f106:	2200      	movs	r2, #0
 802f108:	2300      	movs	r3, #0
 802f10a:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802f10e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802f112:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802f116:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802f11a:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802f11e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802f122:	7221      	strb	r1, [r4, #8]
 802f124:	62a5      	str	r5, [r4, #40]	@ 0x28
 802f126:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802f12a:	6525      	str	r5, [r4, #80]	@ 0x50
 802f12c:	e6ae      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802f12e:	bf00      	nop
 802f130:	0803d448 	.word	0x0803d448
 802f134:	2001a0e0 	.word	0x2001a0e0
 802f138:	2001a0fc 	.word	0x2001a0fc
 802f13c:	0803d44b 	.word	0x0803d44b
 802f140:	2001a100 	.word	0x2001a100
 802f144:	20000164 	.word	0x20000164
 802f148:	0803d2aa 	.word	0x0803d2aa
 802f14c:	2001a0f0 	.word	0x2001a0f0
 802f150:	0803d44f 	.word	0x0803d44f
 802f154:	0803d484 	.word	0x0803d484
 802f158:	2001a0e4 	.word	0x2001a0e4
 802f15c:	0803d462 	.word	0x0803d462
 802f160:	0803d470 	.word	0x0803d470
 802f164:	0803d483 	.word	0x0803d483
 802f168:	4a3e      	ldr	r2, [pc, #248]	@ (802f264 <_tzset_unlocked_r+0x434>)
 802f16a:	493f      	ldr	r1, [pc, #252]	@ (802f268 <_tzset_unlocked_r+0x438>)
 802f16c:	ab0a      	add	r3, sp, #40	@ 0x28
 802f16e:	4648      	mov	r0, r9
 802f170:	f001 fba0 	bl	80308b4 <siscanf>
 802f174:	2800      	cmp	r0, #0
 802f176:	f77f af17 	ble.w	802efa8 <_tzset_unlocked_r+0x178>
 802f17a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f17c:	3b03      	subs	r3, #3
 802f17e:	2b07      	cmp	r3, #7
 802f180:	f67f af42 	bls.w	802f008 <_tzset_unlocked_r+0x1d8>
 802f184:	e682      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802f186:	2b2b      	cmp	r3, #43	@ 0x2b
 802f188:	bf08      	it	eq
 802f18a:	3501      	addeq	r5, #1
 802f18c:	f04f 0901 	mov.w	r9, #1
 802f190:	e745      	b.n	802f01e <_tzset_unlocked_r+0x1ee>
 802f192:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802f196:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802f19a:	213c      	movs	r1, #60	@ 0x3c
 802f19c:	fb01 3302 	mla	r3, r1, r2, r3
 802f1a0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802f1a4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802f1a8:	fb01 3302 	mla	r3, r1, r2, r3
 802f1ac:	fb09 f303 	mul.w	r3, r9, r3
 802f1b0:	e74f      	b.n	802f052 <_tzset_unlocked_r+0x222>
 802f1b2:	f04f 0b01 	mov.w	fp, #1
 802f1b6:	e752      	b.n	802f05e <_tzset_unlocked_r+0x22e>
 802f1b8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802f1bc:	bf06      	itte	eq
 802f1be:	3501      	addeq	r5, #1
 802f1c0:	464b      	moveq	r3, r9
 802f1c2:	2344      	movne	r3, #68	@ 0x44
 802f1c4:	220a      	movs	r2, #10
 802f1c6:	a90b      	add	r1, sp, #44	@ 0x2c
 802f1c8:	4628      	mov	r0, r5
 802f1ca:	9305      	str	r3, [sp, #20]
 802f1cc:	f007 f956 	bl	803647c <strtoul>
 802f1d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802f1d4:	9b05      	ldr	r3, [sp, #20]
 802f1d6:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802f1da:	45a9      	cmp	r9, r5
 802f1dc:	d114      	bne.n	802f208 <_tzset_unlocked_r+0x3d8>
 802f1de:	234d      	movs	r3, #77	@ 0x4d
 802f1e0:	f1bb 0f00 	cmp.w	fp, #0
 802f1e4:	d107      	bne.n	802f1f6 <_tzset_unlocked_r+0x3c6>
 802f1e6:	7223      	strb	r3, [r4, #8]
 802f1e8:	2103      	movs	r1, #3
 802f1ea:	2302      	movs	r3, #2
 802f1ec:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802f1f0:	f8c4 b014 	str.w	fp, [r4, #20]
 802f1f4:	e767      	b.n	802f0c6 <_tzset_unlocked_r+0x296>
 802f1f6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802f1fa:	220b      	movs	r2, #11
 802f1fc:	2301      	movs	r3, #1
 802f1fe:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802f202:	2300      	movs	r3, #0
 802f204:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802f206:	e75e      	b.n	802f0c6 <_tzset_unlocked_r+0x296>
 802f208:	b280      	uxth	r0, r0
 802f20a:	723b      	strb	r3, [r7, #8]
 802f20c:	6178      	str	r0, [r7, #20]
 802f20e:	e75a      	b.n	802f0c6 <_tzset_unlocked_r+0x296>
 802f210:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802f214:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802f218:	213c      	movs	r1, #60	@ 0x3c
 802f21a:	fb01 3302 	mla	r3, r1, r2, r3
 802f21e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802f222:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802f226:	fb01 3302 	mla	r3, r1, r2, r3
 802f22a:	61bb      	str	r3, [r7, #24]
 802f22c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802f22e:	3728      	adds	r7, #40	@ 0x28
 802f230:	444d      	add	r5, r9
 802f232:	f1bb 0f00 	cmp.w	fp, #0
 802f236:	d0bc      	beq.n	802f1b2 <_tzset_unlocked_r+0x382>
 802f238:	9b04      	ldr	r3, [sp, #16]
 802f23a:	6523      	str	r3, [r4, #80]	@ 0x50
 802f23c:	4b0b      	ldr	r3, [pc, #44]	@ (802f26c <_tzset_unlocked_r+0x43c>)
 802f23e:	f8c8 3000 	str.w	r3, [r8]
 802f242:	6860      	ldr	r0, [r4, #4]
 802f244:	4b07      	ldr	r3, [pc, #28]	@ (802f264 <_tzset_unlocked_r+0x434>)
 802f246:	62a6      	str	r6, [r4, #40]	@ 0x28
 802f248:	f8c8 3004 	str.w	r3, [r8, #4]
 802f24c:	f7ff fd34 	bl	802ecb8 <__tzcalc_limits>
 802f250:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802f252:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802f254:	f8ca 2000 	str.w	r2, [sl]
 802f258:	1a9b      	subs	r3, r3, r2
 802f25a:	4a05      	ldr	r2, [pc, #20]	@ (802f270 <_tzset_unlocked_r+0x440>)
 802f25c:	bf18      	it	ne
 802f25e:	2301      	movne	r3, #1
 802f260:	6013      	str	r3, [r2, #0]
 802f262:	e613      	b.n	802ee8c <_tzset_unlocked_r+0x5c>
 802f264:	2001a0e4 	.word	0x2001a0e4
 802f268:	0803d462 	.word	0x0803d462
 802f26c:	2001a0f0 	.word	0x2001a0f0
 802f270:	2001a100 	.word	0x2001a100

0802f274 <__locale_mb_cur_max>:
 802f274:	4b01      	ldr	r3, [pc, #4]	@ (802f27c <__locale_mb_cur_max+0x8>)
 802f276:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802f27a:	4770      	bx	lr
 802f27c:	2000016c 	.word	0x2000016c

0802f280 <_localeconv_r>:
 802f280:	4800      	ldr	r0, [pc, #0]	@ (802f284 <_localeconv_r+0x4>)
 802f282:	4770      	bx	lr
 802f284:	2000025c 	.word	0x2000025c

0802f288 <_close_r>:
 802f288:	b538      	push	{r3, r4, r5, lr}
 802f28a:	4d06      	ldr	r5, [pc, #24]	@ (802f2a4 <_close_r+0x1c>)
 802f28c:	2300      	movs	r3, #0
 802f28e:	4604      	mov	r4, r0
 802f290:	4608      	mov	r0, r1
 802f292:	602b      	str	r3, [r5, #0]
 802f294:	f7e3 fb46 	bl	8012924 <_close>
 802f298:	1c43      	adds	r3, r0, #1
 802f29a:	d102      	bne.n	802f2a2 <_close_r+0x1a>
 802f29c:	682b      	ldr	r3, [r5, #0]
 802f29e:	b103      	cbz	r3, 802f2a2 <_close_r+0x1a>
 802f2a0:	6023      	str	r3, [r4, #0]
 802f2a2:	bd38      	pop	{r3, r4, r5, pc}
 802f2a4:	2001a104 	.word	0x2001a104

0802f2a8 <_reclaim_reent>:
 802f2a8:	4b14      	ldr	r3, [pc, #80]	@ (802f2fc <_reclaim_reent+0x54>)
 802f2aa:	681b      	ldr	r3, [r3, #0]
 802f2ac:	4283      	cmp	r3, r0
 802f2ae:	b570      	push	{r4, r5, r6, lr}
 802f2b0:	4604      	mov	r4, r0
 802f2b2:	d022      	beq.n	802f2fa <_reclaim_reent+0x52>
 802f2b4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802f2b6:	b153      	cbz	r3, 802f2ce <_reclaim_reent+0x26>
 802f2b8:	2500      	movs	r5, #0
 802f2ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802f2bc:	5959      	ldr	r1, [r3, r5]
 802f2be:	b9b1      	cbnz	r1, 802f2ee <_reclaim_reent+0x46>
 802f2c0:	3504      	adds	r5, #4
 802f2c2:	2d80      	cmp	r5, #128	@ 0x80
 802f2c4:	d1f9      	bne.n	802f2ba <_reclaim_reent+0x12>
 802f2c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802f2c8:	4620      	mov	r0, r4
 802f2ca:	f000 ff8f 	bl	80301ec <_free_r>
 802f2ce:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802f2d0:	b111      	cbz	r1, 802f2d8 <_reclaim_reent+0x30>
 802f2d2:	4620      	mov	r0, r4
 802f2d4:	f000 ff8a 	bl	80301ec <_free_r>
 802f2d8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802f2da:	b111      	cbz	r1, 802f2e2 <_reclaim_reent+0x3a>
 802f2dc:	4620      	mov	r0, r4
 802f2de:	f000 ff85 	bl	80301ec <_free_r>
 802f2e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802f2e4:	b14b      	cbz	r3, 802f2fa <_reclaim_reent+0x52>
 802f2e6:	4620      	mov	r0, r4
 802f2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802f2ec:	4718      	bx	r3
 802f2ee:	680e      	ldr	r6, [r1, #0]
 802f2f0:	4620      	mov	r0, r4
 802f2f2:	f000 ff7b 	bl	80301ec <_free_r>
 802f2f6:	4631      	mov	r1, r6
 802f2f8:	e7e1      	b.n	802f2be <_reclaim_reent+0x16>
 802f2fa:	bd70      	pop	{r4, r5, r6, pc}
 802f2fc:	200002d8 	.word	0x200002d8

0802f300 <_lseek_r>:
 802f300:	b538      	push	{r3, r4, r5, lr}
 802f302:	4d07      	ldr	r5, [pc, #28]	@ (802f320 <_lseek_r+0x20>)
 802f304:	4604      	mov	r4, r0
 802f306:	4608      	mov	r0, r1
 802f308:	4611      	mov	r1, r2
 802f30a:	2200      	movs	r2, #0
 802f30c:	602a      	str	r2, [r5, #0]
 802f30e:	461a      	mov	r2, r3
 802f310:	f7e3 fb12 	bl	8012938 <_lseek>
 802f314:	1c43      	adds	r3, r0, #1
 802f316:	d102      	bne.n	802f31e <_lseek_r+0x1e>
 802f318:	682b      	ldr	r3, [r5, #0]
 802f31a:	b103      	cbz	r3, 802f31e <_lseek_r+0x1e>
 802f31c:	6023      	str	r3, [r4, #0]
 802f31e:	bd38      	pop	{r3, r4, r5, pc}
 802f320:	2001a104 	.word	0x2001a104

0802f324 <_read_r>:
 802f324:	b538      	push	{r3, r4, r5, lr}
 802f326:	4d07      	ldr	r5, [pc, #28]	@ (802f344 <_read_r+0x20>)
 802f328:	4604      	mov	r4, r0
 802f32a:	4608      	mov	r0, r1
 802f32c:	4611      	mov	r1, r2
 802f32e:	2200      	movs	r2, #0
 802f330:	602a      	str	r2, [r5, #0]
 802f332:	461a      	mov	r2, r3
 802f334:	f7e3 fad8 	bl	80128e8 <_read>
 802f338:	1c43      	adds	r3, r0, #1
 802f33a:	d102      	bne.n	802f342 <_read_r+0x1e>
 802f33c:	682b      	ldr	r3, [r5, #0]
 802f33e:	b103      	cbz	r3, 802f342 <_read_r+0x1e>
 802f340:	6023      	str	r3, [r4, #0]
 802f342:	bd38      	pop	{r3, r4, r5, pc}
 802f344:	2001a104 	.word	0x2001a104

0802f348 <_write_r>:
 802f348:	b538      	push	{r3, r4, r5, lr}
 802f34a:	4d07      	ldr	r5, [pc, #28]	@ (802f368 <_write_r+0x20>)
 802f34c:	4604      	mov	r4, r0
 802f34e:	4608      	mov	r0, r1
 802f350:	4611      	mov	r1, r2
 802f352:	2200      	movs	r2, #0
 802f354:	602a      	str	r2, [r5, #0]
 802f356:	461a      	mov	r2, r3
 802f358:	f7e3 fad6 	bl	8012908 <_write>
 802f35c:	1c43      	adds	r3, r0, #1
 802f35e:	d102      	bne.n	802f366 <_write_r+0x1e>
 802f360:	682b      	ldr	r3, [r5, #0]
 802f362:	b103      	cbz	r3, 802f366 <_write_r+0x1e>
 802f364:	6023      	str	r3, [r4, #0]
 802f366:	bd38      	pop	{r3, r4, r5, pc}
 802f368:	2001a104 	.word	0x2001a104

0802f36c <__errno>:
 802f36c:	4b01      	ldr	r3, [pc, #4]	@ (802f374 <__errno+0x8>)
 802f36e:	6818      	ldr	r0, [r3, #0]
 802f370:	4770      	bx	lr
 802f372:	bf00      	nop
 802f374:	200002d8 	.word	0x200002d8

0802f378 <strcpy>:
 802f378:	4603      	mov	r3, r0
 802f37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f37e:	f803 2b01 	strb.w	r2, [r3], #1
 802f382:	2a00      	cmp	r2, #0
 802f384:	d1f9      	bne.n	802f37a <strcpy+0x2>
 802f386:	4770      	bx	lr

0802f388 <__libc_init_array>:
 802f388:	b570      	push	{r4, r5, r6, lr}
 802f38a:	4d0d      	ldr	r5, [pc, #52]	@ (802f3c0 <__libc_init_array+0x38>)
 802f38c:	4c0d      	ldr	r4, [pc, #52]	@ (802f3c4 <__libc_init_array+0x3c>)
 802f38e:	1b64      	subs	r4, r4, r5
 802f390:	10a4      	asrs	r4, r4, #2
 802f392:	2600      	movs	r6, #0
 802f394:	42a6      	cmp	r6, r4
 802f396:	d109      	bne.n	802f3ac <__libc_init_array+0x24>
 802f398:	4d0b      	ldr	r5, [pc, #44]	@ (802f3c8 <__libc_init_array+0x40>)
 802f39a:	4c0c      	ldr	r4, [pc, #48]	@ (802f3cc <__libc_init_array+0x44>)
 802f39c:	f007 febe 	bl	803711c <_init>
 802f3a0:	1b64      	subs	r4, r4, r5
 802f3a2:	10a4      	asrs	r4, r4, #2
 802f3a4:	2600      	movs	r6, #0
 802f3a6:	42a6      	cmp	r6, r4
 802f3a8:	d105      	bne.n	802f3b6 <__libc_init_array+0x2e>
 802f3aa:	bd70      	pop	{r4, r5, r6, pc}
 802f3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 802f3b0:	4798      	blx	r3
 802f3b2:	3601      	adds	r6, #1
 802f3b4:	e7ee      	b.n	802f394 <__libc_init_array+0xc>
 802f3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 802f3ba:	4798      	blx	r3
 802f3bc:	3601      	adds	r6, #1
 802f3be:	e7f2      	b.n	802f3a6 <__libc_init_array+0x1e>
 802f3c0:	0803dad8 	.word	0x0803dad8
 802f3c4:	0803dad8 	.word	0x0803dad8
 802f3c8:	0803dad8 	.word	0x0803dad8
 802f3cc:	0803dae0 	.word	0x0803dae0

0802f3d0 <__retarget_lock_init_recursive>:
 802f3d0:	4770      	bx	lr

0802f3d2 <__retarget_lock_close_recursive>:
 802f3d2:	4770      	bx	lr

0802f3d4 <__retarget_lock_acquire>:
 802f3d4:	4770      	bx	lr

0802f3d6 <__retarget_lock_acquire_recursive>:
 802f3d6:	4770      	bx	lr

0802f3d8 <__retarget_lock_release>:
 802f3d8:	4770      	bx	lr

0802f3da <__retarget_lock_release_recursive>:
 802f3da:	4770      	bx	lr

0802f3dc <memcpy>:
 802f3dc:	440a      	add	r2, r1
 802f3de:	4291      	cmp	r1, r2
 802f3e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802f3e4:	d100      	bne.n	802f3e8 <memcpy+0xc>
 802f3e6:	4770      	bx	lr
 802f3e8:	b510      	push	{r4, lr}
 802f3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f3f2:	4291      	cmp	r1, r2
 802f3f4:	d1f9      	bne.n	802f3ea <memcpy+0xe>
 802f3f6:	bd10      	pop	{r4, pc}

0802f3f8 <_wcrtomb_r>:
 802f3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f3fa:	4c09      	ldr	r4, [pc, #36]	@ (802f420 <_wcrtomb_r+0x28>)
 802f3fc:	b085      	sub	sp, #20
 802f3fe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802f402:	4605      	mov	r5, r0
 802f404:	461e      	mov	r6, r3
 802f406:	b909      	cbnz	r1, 802f40c <_wcrtomb_r+0x14>
 802f408:	460a      	mov	r2, r1
 802f40a:	a901      	add	r1, sp, #4
 802f40c:	47b8      	blx	r7
 802f40e:	1c43      	adds	r3, r0, #1
 802f410:	bf01      	itttt	eq
 802f412:	2300      	moveq	r3, #0
 802f414:	6033      	streq	r3, [r6, #0]
 802f416:	238a      	moveq	r3, #138	@ 0x8a
 802f418:	602b      	streq	r3, [r5, #0]
 802f41a:	b005      	add	sp, #20
 802f41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f41e:	bf00      	nop
 802f420:	2000016c 	.word	0x2000016c

0802f424 <frexp>:
 802f424:	b570      	push	{r4, r5, r6, lr}
 802f426:	2100      	movs	r1, #0
 802f428:	ec55 4b10 	vmov	r4, r5, d0
 802f42c:	6001      	str	r1, [r0, #0]
 802f42e:	4915      	ldr	r1, [pc, #84]	@ (802f484 <frexp+0x60>)
 802f430:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802f434:	428a      	cmp	r2, r1
 802f436:	4606      	mov	r6, r0
 802f438:	462b      	mov	r3, r5
 802f43a:	d820      	bhi.n	802f47e <frexp+0x5a>
 802f43c:	4621      	mov	r1, r4
 802f43e:	4311      	orrs	r1, r2
 802f440:	d01d      	beq.n	802f47e <frexp+0x5a>
 802f442:	4911      	ldr	r1, [pc, #68]	@ (802f488 <frexp+0x64>)
 802f444:	4029      	ands	r1, r5
 802f446:	b961      	cbnz	r1, 802f462 <frexp+0x3e>
 802f448:	4b10      	ldr	r3, [pc, #64]	@ (802f48c <frexp+0x68>)
 802f44a:	2200      	movs	r2, #0
 802f44c:	4620      	mov	r0, r4
 802f44e:	4629      	mov	r1, r5
 802f450:	f7e1 f8ea 	bl	8010628 <__aeabi_dmul>
 802f454:	460b      	mov	r3, r1
 802f456:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802f45a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802f45e:	4604      	mov	r4, r0
 802f460:	6031      	str	r1, [r6, #0]
 802f462:	6831      	ldr	r1, [r6, #0]
 802f464:	1512      	asrs	r2, r2, #20
 802f466:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802f46a:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802f46e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802f472:	4411      	add	r1, r2
 802f474:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802f478:	6031      	str	r1, [r6, #0]
 802f47a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802f47e:	ec45 4b10 	vmov	d0, r4, r5
 802f482:	bd70      	pop	{r4, r5, r6, pc}
 802f484:	7fefffff 	.word	0x7fefffff
 802f488:	7ff00000 	.word	0x7ff00000
 802f48c:	43500000 	.word	0x43500000

0802f490 <register_fini>:
 802f490:	4b02      	ldr	r3, [pc, #8]	@ (802f49c <register_fini+0xc>)
 802f492:	b113      	cbz	r3, 802f49a <register_fini+0xa>
 802f494:	4802      	ldr	r0, [pc, #8]	@ (802f4a0 <register_fini+0x10>)
 802f496:	f000 b810 	b.w	802f4ba <atexit>
 802f49a:	4770      	bx	lr
 802f49c:	00000000 	.word	0x00000000
 802f4a0:	080367e1 	.word	0x080367e1

0802f4a4 <abort>:
 802f4a4:	b508      	push	{r3, lr}
 802f4a6:	2006      	movs	r0, #6
 802f4a8:	f007 f8ac 	bl	8036604 <raise>
 802f4ac:	2001      	movs	r0, #1
 802f4ae:	f7e3 fa15 	bl	80128dc <_exit>

0802f4b2 <abs>:
 802f4b2:	2800      	cmp	r0, #0
 802f4b4:	bfb8      	it	lt
 802f4b6:	4240      	neglt	r0, r0
 802f4b8:	4770      	bx	lr

0802f4ba <atexit>:
 802f4ba:	2300      	movs	r3, #0
 802f4bc:	4601      	mov	r1, r0
 802f4be:	461a      	mov	r2, r3
 802f4c0:	4618      	mov	r0, r3
 802f4c2:	f007 ba61 	b.w	8036988 <__register_exitproc>

0802f4c6 <div>:
 802f4c6:	b510      	push	{r4, lr}
 802f4c8:	fb91 f4f2 	sdiv	r4, r1, r2
 802f4cc:	fb02 1114 	mls	r1, r2, r4, r1
 802f4d0:	6004      	str	r4, [r0, #0]
 802f4d2:	6041      	str	r1, [r0, #4]
 802f4d4:	bd10      	pop	{r4, pc}

0802f4d6 <quorem>:
 802f4d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4da:	6903      	ldr	r3, [r0, #16]
 802f4dc:	690c      	ldr	r4, [r1, #16]
 802f4de:	42a3      	cmp	r3, r4
 802f4e0:	4607      	mov	r7, r0
 802f4e2:	db7e      	blt.n	802f5e2 <quorem+0x10c>
 802f4e4:	3c01      	subs	r4, #1
 802f4e6:	f101 0814 	add.w	r8, r1, #20
 802f4ea:	00a3      	lsls	r3, r4, #2
 802f4ec:	f100 0514 	add.w	r5, r0, #20
 802f4f0:	9300      	str	r3, [sp, #0]
 802f4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802f4f6:	9301      	str	r3, [sp, #4]
 802f4f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802f4fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802f500:	3301      	adds	r3, #1
 802f502:	429a      	cmp	r2, r3
 802f504:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802f508:	fbb2 f6f3 	udiv	r6, r2, r3
 802f50c:	d32e      	bcc.n	802f56c <quorem+0x96>
 802f50e:	f04f 0a00 	mov.w	sl, #0
 802f512:	46c4      	mov	ip, r8
 802f514:	46ae      	mov	lr, r5
 802f516:	46d3      	mov	fp, sl
 802f518:	f85c 3b04 	ldr.w	r3, [ip], #4
 802f51c:	b298      	uxth	r0, r3
 802f51e:	fb06 a000 	mla	r0, r6, r0, sl
 802f522:	0c02      	lsrs	r2, r0, #16
 802f524:	0c1b      	lsrs	r3, r3, #16
 802f526:	fb06 2303 	mla	r3, r6, r3, r2
 802f52a:	f8de 2000 	ldr.w	r2, [lr]
 802f52e:	b280      	uxth	r0, r0
 802f530:	b292      	uxth	r2, r2
 802f532:	1a12      	subs	r2, r2, r0
 802f534:	445a      	add	r2, fp
 802f536:	f8de 0000 	ldr.w	r0, [lr]
 802f53a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802f53e:	b29b      	uxth	r3, r3
 802f540:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802f544:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802f548:	b292      	uxth	r2, r2
 802f54a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802f54e:	45e1      	cmp	r9, ip
 802f550:	f84e 2b04 	str.w	r2, [lr], #4
 802f554:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802f558:	d2de      	bcs.n	802f518 <quorem+0x42>
 802f55a:	9b00      	ldr	r3, [sp, #0]
 802f55c:	58eb      	ldr	r3, [r5, r3]
 802f55e:	b92b      	cbnz	r3, 802f56c <quorem+0x96>
 802f560:	9b01      	ldr	r3, [sp, #4]
 802f562:	3b04      	subs	r3, #4
 802f564:	429d      	cmp	r5, r3
 802f566:	461a      	mov	r2, r3
 802f568:	d32f      	bcc.n	802f5ca <quorem+0xf4>
 802f56a:	613c      	str	r4, [r7, #16]
 802f56c:	4638      	mov	r0, r7
 802f56e:	f005 fce1 	bl	8034f34 <__mcmp>
 802f572:	2800      	cmp	r0, #0
 802f574:	db25      	blt.n	802f5c2 <quorem+0xec>
 802f576:	4629      	mov	r1, r5
 802f578:	2000      	movs	r0, #0
 802f57a:	f858 2b04 	ldr.w	r2, [r8], #4
 802f57e:	f8d1 c000 	ldr.w	ip, [r1]
 802f582:	fa1f fe82 	uxth.w	lr, r2
 802f586:	fa1f f38c 	uxth.w	r3, ip
 802f58a:	eba3 030e 	sub.w	r3, r3, lr
 802f58e:	4403      	add	r3, r0
 802f590:	0c12      	lsrs	r2, r2, #16
 802f592:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802f596:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802f59a:	b29b      	uxth	r3, r3
 802f59c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802f5a0:	45c1      	cmp	r9, r8
 802f5a2:	f841 3b04 	str.w	r3, [r1], #4
 802f5a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 802f5aa:	d2e6      	bcs.n	802f57a <quorem+0xa4>
 802f5ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802f5b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802f5b4:	b922      	cbnz	r2, 802f5c0 <quorem+0xea>
 802f5b6:	3b04      	subs	r3, #4
 802f5b8:	429d      	cmp	r5, r3
 802f5ba:	461a      	mov	r2, r3
 802f5bc:	d30b      	bcc.n	802f5d6 <quorem+0x100>
 802f5be:	613c      	str	r4, [r7, #16]
 802f5c0:	3601      	adds	r6, #1
 802f5c2:	4630      	mov	r0, r6
 802f5c4:	b003      	add	sp, #12
 802f5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f5ca:	6812      	ldr	r2, [r2, #0]
 802f5cc:	3b04      	subs	r3, #4
 802f5ce:	2a00      	cmp	r2, #0
 802f5d0:	d1cb      	bne.n	802f56a <quorem+0x94>
 802f5d2:	3c01      	subs	r4, #1
 802f5d4:	e7c6      	b.n	802f564 <quorem+0x8e>
 802f5d6:	6812      	ldr	r2, [r2, #0]
 802f5d8:	3b04      	subs	r3, #4
 802f5da:	2a00      	cmp	r2, #0
 802f5dc:	d1ef      	bne.n	802f5be <quorem+0xe8>
 802f5de:	3c01      	subs	r4, #1
 802f5e0:	e7ea      	b.n	802f5b8 <quorem+0xe2>
 802f5e2:	2000      	movs	r0, #0
 802f5e4:	e7ee      	b.n	802f5c4 <quorem+0xee>
	...

0802f5e8 <_dtoa_r>:
 802f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5ec:	b099      	sub	sp, #100	@ 0x64
 802f5ee:	ed8d 0b02 	vstr	d0, [sp, #8]
 802f5f2:	9109      	str	r1, [sp, #36]	@ 0x24
 802f5f4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802f5f6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802f5f8:	920e      	str	r2, [sp, #56]	@ 0x38
 802f5fa:	ec55 4b10 	vmov	r4, r5, d0
 802f5fe:	4683      	mov	fp, r0
 802f600:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f602:	b149      	cbz	r1, 802f618 <_dtoa_r+0x30>
 802f604:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802f606:	604a      	str	r2, [r1, #4]
 802f608:	2301      	movs	r3, #1
 802f60a:	4093      	lsls	r3, r2
 802f60c:	608b      	str	r3, [r1, #8]
 802f60e:	f005 fa40 	bl	8034a92 <_Bfree>
 802f612:	2300      	movs	r3, #0
 802f614:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802f618:	1e2b      	subs	r3, r5, #0
 802f61a:	bfb9      	ittee	lt
 802f61c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802f620:	9303      	strlt	r3, [sp, #12]
 802f622:	2300      	movge	r3, #0
 802f624:	6033      	strge	r3, [r6, #0]
 802f626:	9f03      	ldr	r7, [sp, #12]
 802f628:	4b97      	ldr	r3, [pc, #604]	@ (802f888 <_dtoa_r+0x2a0>)
 802f62a:	bfbc      	itt	lt
 802f62c:	2201      	movlt	r2, #1
 802f62e:	6032      	strlt	r2, [r6, #0]
 802f630:	43bb      	bics	r3, r7
 802f632:	d114      	bne.n	802f65e <_dtoa_r+0x76>
 802f634:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802f636:	f242 730f 	movw	r3, #9999	@ 0x270f
 802f63a:	6013      	str	r3, [r2, #0]
 802f63c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802f640:	4323      	orrs	r3, r4
 802f642:	f000 854c 	beq.w	80300de <_dtoa_r+0xaf6>
 802f646:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802f648:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802f8a0 <_dtoa_r+0x2b8>
 802f64c:	b11b      	cbz	r3, 802f656 <_dtoa_r+0x6e>
 802f64e:	f10a 0303 	add.w	r3, sl, #3
 802f652:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802f654:	6013      	str	r3, [r2, #0]
 802f656:	4650      	mov	r0, sl
 802f658:	b019      	add	sp, #100	@ 0x64
 802f65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f65e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802f662:	2200      	movs	r2, #0
 802f664:	ec51 0b17 	vmov	r0, r1, d7
 802f668:	2300      	movs	r3, #0
 802f66a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802f66e:	f7e1 fa43 	bl	8010af8 <__aeabi_dcmpeq>
 802f672:	4680      	mov	r8, r0
 802f674:	b150      	cbz	r0, 802f68c <_dtoa_r+0xa4>
 802f676:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802f678:	2301      	movs	r3, #1
 802f67a:	6013      	str	r3, [r2, #0]
 802f67c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802f67e:	b113      	cbz	r3, 802f686 <_dtoa_r+0x9e>
 802f680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802f682:	4b82      	ldr	r3, [pc, #520]	@ (802f88c <_dtoa_r+0x2a4>)
 802f684:	6013      	str	r3, [r2, #0]
 802f686:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802f8a4 <_dtoa_r+0x2bc>
 802f68a:	e7e4      	b.n	802f656 <_dtoa_r+0x6e>
 802f68c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802f690:	aa16      	add	r2, sp, #88	@ 0x58
 802f692:	a917      	add	r1, sp, #92	@ 0x5c
 802f694:	4658      	mov	r0, fp
 802f696:	f005 fd6d 	bl	8035174 <__d2b>
 802f69a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802f69e:	4681      	mov	r9, r0
 802f6a0:	2e00      	cmp	r6, #0
 802f6a2:	d077      	beq.n	802f794 <_dtoa_r+0x1ac>
 802f6a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802f6a6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802f6aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802f6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802f6b2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802f6b6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802f6ba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802f6be:	4619      	mov	r1, r3
 802f6c0:	2200      	movs	r2, #0
 802f6c2:	4b73      	ldr	r3, [pc, #460]	@ (802f890 <_dtoa_r+0x2a8>)
 802f6c4:	f7e0 fdf8 	bl	80102b8 <__aeabi_dsub>
 802f6c8:	a369      	add	r3, pc, #420	@ (adr r3, 802f870 <_dtoa_r+0x288>)
 802f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6ce:	f7e0 ffab 	bl	8010628 <__aeabi_dmul>
 802f6d2:	a369      	add	r3, pc, #420	@ (adr r3, 802f878 <_dtoa_r+0x290>)
 802f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6d8:	f7e0 fdf0 	bl	80102bc <__adddf3>
 802f6dc:	4604      	mov	r4, r0
 802f6de:	4630      	mov	r0, r6
 802f6e0:	460d      	mov	r5, r1
 802f6e2:	f7e0 ff37 	bl	8010554 <__aeabi_i2d>
 802f6e6:	a366      	add	r3, pc, #408	@ (adr r3, 802f880 <_dtoa_r+0x298>)
 802f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6ec:	f7e0 ff9c 	bl	8010628 <__aeabi_dmul>
 802f6f0:	4602      	mov	r2, r0
 802f6f2:	460b      	mov	r3, r1
 802f6f4:	4620      	mov	r0, r4
 802f6f6:	4629      	mov	r1, r5
 802f6f8:	f7e0 fde0 	bl	80102bc <__adddf3>
 802f6fc:	4604      	mov	r4, r0
 802f6fe:	460d      	mov	r5, r1
 802f700:	f7e1 fa42 	bl	8010b88 <__aeabi_d2iz>
 802f704:	2200      	movs	r2, #0
 802f706:	4607      	mov	r7, r0
 802f708:	2300      	movs	r3, #0
 802f70a:	4620      	mov	r0, r4
 802f70c:	4629      	mov	r1, r5
 802f70e:	f7e1 f9fd 	bl	8010b0c <__aeabi_dcmplt>
 802f712:	b140      	cbz	r0, 802f726 <_dtoa_r+0x13e>
 802f714:	4638      	mov	r0, r7
 802f716:	f7e0 ff1d 	bl	8010554 <__aeabi_i2d>
 802f71a:	4622      	mov	r2, r4
 802f71c:	462b      	mov	r3, r5
 802f71e:	f7e1 f9eb 	bl	8010af8 <__aeabi_dcmpeq>
 802f722:	b900      	cbnz	r0, 802f726 <_dtoa_r+0x13e>
 802f724:	3f01      	subs	r7, #1
 802f726:	2f16      	cmp	r7, #22
 802f728:	d851      	bhi.n	802f7ce <_dtoa_r+0x1e6>
 802f72a:	4b5a      	ldr	r3, [pc, #360]	@ (802f894 <_dtoa_r+0x2ac>)
 802f72c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802f730:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802f738:	f7e1 f9e8 	bl	8010b0c <__aeabi_dcmplt>
 802f73c:	2800      	cmp	r0, #0
 802f73e:	d048      	beq.n	802f7d2 <_dtoa_r+0x1ea>
 802f740:	3f01      	subs	r7, #1
 802f742:	2300      	movs	r3, #0
 802f744:	9312      	str	r3, [sp, #72]	@ 0x48
 802f746:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802f748:	1b9b      	subs	r3, r3, r6
 802f74a:	1e5a      	subs	r2, r3, #1
 802f74c:	bf44      	itt	mi
 802f74e:	f1c3 0801 	rsbmi	r8, r3, #1
 802f752:	2300      	movmi	r3, #0
 802f754:	9208      	str	r2, [sp, #32]
 802f756:	bf54      	ite	pl
 802f758:	f04f 0800 	movpl.w	r8, #0
 802f75c:	9308      	strmi	r3, [sp, #32]
 802f75e:	2f00      	cmp	r7, #0
 802f760:	db39      	blt.n	802f7d6 <_dtoa_r+0x1ee>
 802f762:	9b08      	ldr	r3, [sp, #32]
 802f764:	970f      	str	r7, [sp, #60]	@ 0x3c
 802f766:	443b      	add	r3, r7
 802f768:	9308      	str	r3, [sp, #32]
 802f76a:	2300      	movs	r3, #0
 802f76c:	930a      	str	r3, [sp, #40]	@ 0x28
 802f76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f770:	2b09      	cmp	r3, #9
 802f772:	d865      	bhi.n	802f840 <_dtoa_r+0x258>
 802f774:	2b05      	cmp	r3, #5
 802f776:	bfc4      	itt	gt
 802f778:	3b04      	subgt	r3, #4
 802f77a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802f77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f77e:	f1a3 0302 	sub.w	r3, r3, #2
 802f782:	bfcc      	ite	gt
 802f784:	2400      	movgt	r4, #0
 802f786:	2401      	movle	r4, #1
 802f788:	2b03      	cmp	r3, #3
 802f78a:	d864      	bhi.n	802f856 <_dtoa_r+0x26e>
 802f78c:	e8df f003 	tbb	[pc, r3]
 802f790:	5635372a 	.word	0x5635372a
 802f794:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802f798:	441e      	add	r6, r3
 802f79a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802f79e:	2b20      	cmp	r3, #32
 802f7a0:	bfc1      	itttt	gt
 802f7a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802f7a6:	409f      	lslgt	r7, r3
 802f7a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802f7ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 802f7b0:	bfd6      	itet	le
 802f7b2:	f1c3 0320 	rsble	r3, r3, #32
 802f7b6:	ea47 0003 	orrgt.w	r0, r7, r3
 802f7ba:	fa04 f003 	lslle.w	r0, r4, r3
 802f7be:	f7e0 feb9 	bl	8010534 <__aeabi_ui2d>
 802f7c2:	2201      	movs	r2, #1
 802f7c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802f7c8:	3e01      	subs	r6, #1
 802f7ca:	9214      	str	r2, [sp, #80]	@ 0x50
 802f7cc:	e777      	b.n	802f6be <_dtoa_r+0xd6>
 802f7ce:	2301      	movs	r3, #1
 802f7d0:	e7b8      	b.n	802f744 <_dtoa_r+0x15c>
 802f7d2:	9012      	str	r0, [sp, #72]	@ 0x48
 802f7d4:	e7b7      	b.n	802f746 <_dtoa_r+0x15e>
 802f7d6:	427b      	negs	r3, r7
 802f7d8:	930a      	str	r3, [sp, #40]	@ 0x28
 802f7da:	2300      	movs	r3, #0
 802f7dc:	eba8 0807 	sub.w	r8, r8, r7
 802f7e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f7e2:	e7c4      	b.n	802f76e <_dtoa_r+0x186>
 802f7e4:	2300      	movs	r3, #0
 802f7e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f7e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802f7ea:	2b00      	cmp	r3, #0
 802f7ec:	dc36      	bgt.n	802f85c <_dtoa_r+0x274>
 802f7ee:	2301      	movs	r3, #1
 802f7f0:	9300      	str	r3, [sp, #0]
 802f7f2:	9307      	str	r3, [sp, #28]
 802f7f4:	461a      	mov	r2, r3
 802f7f6:	920e      	str	r2, [sp, #56]	@ 0x38
 802f7f8:	e00b      	b.n	802f812 <_dtoa_r+0x22a>
 802f7fa:	2301      	movs	r3, #1
 802f7fc:	e7f3      	b.n	802f7e6 <_dtoa_r+0x1fe>
 802f7fe:	2300      	movs	r3, #0
 802f800:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802f804:	18fb      	adds	r3, r7, r3
 802f806:	9300      	str	r3, [sp, #0]
 802f808:	3301      	adds	r3, #1
 802f80a:	2b01      	cmp	r3, #1
 802f80c:	9307      	str	r3, [sp, #28]
 802f80e:	bfb8      	it	lt
 802f810:	2301      	movlt	r3, #1
 802f812:	2100      	movs	r1, #0
 802f814:	2204      	movs	r2, #4
 802f816:	f102 0014 	add.w	r0, r2, #20
 802f81a:	4298      	cmp	r0, r3
 802f81c:	d922      	bls.n	802f864 <_dtoa_r+0x27c>
 802f81e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802f822:	4658      	mov	r0, fp
 802f824:	f005 f910 	bl	8034a48 <_Balloc>
 802f828:	4682      	mov	sl, r0
 802f82a:	2800      	cmp	r0, #0
 802f82c:	d13c      	bne.n	802f8a8 <_dtoa_r+0x2c0>
 802f82e:	4b1a      	ldr	r3, [pc, #104]	@ (802f898 <_dtoa_r+0x2b0>)
 802f830:	4602      	mov	r2, r0
 802f832:	f240 11af 	movw	r1, #431	@ 0x1af
 802f836:	4819      	ldr	r0, [pc, #100]	@ (802f89c <_dtoa_r+0x2b4>)
 802f838:	f7fb fb18 	bl	802ae6c <__assert_func>
 802f83c:	2301      	movs	r3, #1
 802f83e:	e7df      	b.n	802f800 <_dtoa_r+0x218>
 802f840:	2401      	movs	r4, #1
 802f842:	2300      	movs	r3, #0
 802f844:	9309      	str	r3, [sp, #36]	@ 0x24
 802f846:	940b      	str	r4, [sp, #44]	@ 0x2c
 802f848:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f84c:	9300      	str	r3, [sp, #0]
 802f84e:	9307      	str	r3, [sp, #28]
 802f850:	2200      	movs	r2, #0
 802f852:	2312      	movs	r3, #18
 802f854:	e7cf      	b.n	802f7f6 <_dtoa_r+0x20e>
 802f856:	2301      	movs	r3, #1
 802f858:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f85a:	e7f5      	b.n	802f848 <_dtoa_r+0x260>
 802f85c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802f85e:	9300      	str	r3, [sp, #0]
 802f860:	9307      	str	r3, [sp, #28]
 802f862:	e7d6      	b.n	802f812 <_dtoa_r+0x22a>
 802f864:	3101      	adds	r1, #1
 802f866:	0052      	lsls	r2, r2, #1
 802f868:	e7d5      	b.n	802f816 <_dtoa_r+0x22e>
 802f86a:	bf00      	nop
 802f86c:	f3af 8000 	nop.w
 802f870:	636f4361 	.word	0x636f4361
 802f874:	3fd287a7 	.word	0x3fd287a7
 802f878:	8b60c8b3 	.word	0x8b60c8b3
 802f87c:	3fc68a28 	.word	0x3fc68a28
 802f880:	509f79fb 	.word	0x509f79fb
 802f884:	3fd34413 	.word	0x3fd34413
 802f888:	7ff00000 	.word	0x7ff00000
 802f88c:	0803d2de 	.word	0x0803d2de
 802f890:	3ff80000 	.word	0x3ff80000
 802f894:	0803d958 	.word	0x0803d958
 802f898:	0803d7d6 	.word	0x0803d7d6
 802f89c:	0803d7e7 	.word	0x0803d7e7
 802f8a0:	0803d7d2 	.word	0x0803d7d2
 802f8a4:	0803d2dd 	.word	0x0803d2dd
 802f8a8:	9b07      	ldr	r3, [sp, #28]
 802f8aa:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802f8ae:	2b0e      	cmp	r3, #14
 802f8b0:	f200 80a4 	bhi.w	802f9fc <_dtoa_r+0x414>
 802f8b4:	2c00      	cmp	r4, #0
 802f8b6:	f000 80a1 	beq.w	802f9fc <_dtoa_r+0x414>
 802f8ba:	2f00      	cmp	r7, #0
 802f8bc:	dd33      	ble.n	802f926 <_dtoa_r+0x33e>
 802f8be:	4bae      	ldr	r3, [pc, #696]	@ (802fb78 <_dtoa_r+0x590>)
 802f8c0:	f007 020f 	and.w	r2, r7, #15
 802f8c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f8c8:	ed93 7b00 	vldr	d7, [r3]
 802f8cc:	05f8      	lsls	r0, r7, #23
 802f8ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 802f8d2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802f8d6:	d516      	bpl.n	802f906 <_dtoa_r+0x31e>
 802f8d8:	4ba8      	ldr	r3, [pc, #672]	@ (802fb7c <_dtoa_r+0x594>)
 802f8da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802f8de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802f8e2:	f7e0 ffcb 	bl	801087c <__aeabi_ddiv>
 802f8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f8ea:	f004 040f 	and.w	r4, r4, #15
 802f8ee:	2603      	movs	r6, #3
 802f8f0:	4da2      	ldr	r5, [pc, #648]	@ (802fb7c <_dtoa_r+0x594>)
 802f8f2:	b954      	cbnz	r4, 802f90a <_dtoa_r+0x322>
 802f8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802f8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f8fc:	f7e0 ffbe 	bl	801087c <__aeabi_ddiv>
 802f900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f904:	e028      	b.n	802f958 <_dtoa_r+0x370>
 802f906:	2602      	movs	r6, #2
 802f908:	e7f2      	b.n	802f8f0 <_dtoa_r+0x308>
 802f90a:	07e1      	lsls	r1, r4, #31
 802f90c:	d508      	bpl.n	802f920 <_dtoa_r+0x338>
 802f90e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802f912:	e9d5 2300 	ldrd	r2, r3, [r5]
 802f916:	f7e0 fe87 	bl	8010628 <__aeabi_dmul>
 802f91a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802f91e:	3601      	adds	r6, #1
 802f920:	1064      	asrs	r4, r4, #1
 802f922:	3508      	adds	r5, #8
 802f924:	e7e5      	b.n	802f8f2 <_dtoa_r+0x30a>
 802f926:	f000 80d2 	beq.w	802face <_dtoa_r+0x4e6>
 802f92a:	427c      	negs	r4, r7
 802f92c:	4b92      	ldr	r3, [pc, #584]	@ (802fb78 <_dtoa_r+0x590>)
 802f92e:	4d93      	ldr	r5, [pc, #588]	@ (802fb7c <_dtoa_r+0x594>)
 802f930:	f004 020f 	and.w	r2, r4, #15
 802f934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802f940:	f7e0 fe72 	bl	8010628 <__aeabi_dmul>
 802f944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f948:	1124      	asrs	r4, r4, #4
 802f94a:	2300      	movs	r3, #0
 802f94c:	2602      	movs	r6, #2
 802f94e:	2c00      	cmp	r4, #0
 802f950:	f040 80b2 	bne.w	802fab8 <_dtoa_r+0x4d0>
 802f954:	2b00      	cmp	r3, #0
 802f956:	d1d3      	bne.n	802f900 <_dtoa_r+0x318>
 802f958:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802f95a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802f95e:	2b00      	cmp	r3, #0
 802f960:	f000 80b7 	beq.w	802fad2 <_dtoa_r+0x4ea>
 802f964:	4b86      	ldr	r3, [pc, #536]	@ (802fb80 <_dtoa_r+0x598>)
 802f966:	2200      	movs	r2, #0
 802f968:	4620      	mov	r0, r4
 802f96a:	4629      	mov	r1, r5
 802f96c:	f7e1 f8ce 	bl	8010b0c <__aeabi_dcmplt>
 802f970:	2800      	cmp	r0, #0
 802f972:	f000 80ae 	beq.w	802fad2 <_dtoa_r+0x4ea>
 802f976:	9b07      	ldr	r3, [sp, #28]
 802f978:	2b00      	cmp	r3, #0
 802f97a:	f000 80aa 	beq.w	802fad2 <_dtoa_r+0x4ea>
 802f97e:	9b00      	ldr	r3, [sp, #0]
 802f980:	2b00      	cmp	r3, #0
 802f982:	dd37      	ble.n	802f9f4 <_dtoa_r+0x40c>
 802f984:	1e7b      	subs	r3, r7, #1
 802f986:	9304      	str	r3, [sp, #16]
 802f988:	4620      	mov	r0, r4
 802f98a:	4b7e      	ldr	r3, [pc, #504]	@ (802fb84 <_dtoa_r+0x59c>)
 802f98c:	2200      	movs	r2, #0
 802f98e:	4629      	mov	r1, r5
 802f990:	f7e0 fe4a 	bl	8010628 <__aeabi_dmul>
 802f994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f998:	9c00      	ldr	r4, [sp, #0]
 802f99a:	3601      	adds	r6, #1
 802f99c:	4630      	mov	r0, r6
 802f99e:	f7e0 fdd9 	bl	8010554 <__aeabi_i2d>
 802f9a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802f9a6:	f7e0 fe3f 	bl	8010628 <__aeabi_dmul>
 802f9aa:	4b77      	ldr	r3, [pc, #476]	@ (802fb88 <_dtoa_r+0x5a0>)
 802f9ac:	2200      	movs	r2, #0
 802f9ae:	f7e0 fc85 	bl	80102bc <__adddf3>
 802f9b2:	4605      	mov	r5, r0
 802f9b4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802f9b8:	2c00      	cmp	r4, #0
 802f9ba:	f040 808d 	bne.w	802fad8 <_dtoa_r+0x4f0>
 802f9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f9c2:	4b72      	ldr	r3, [pc, #456]	@ (802fb8c <_dtoa_r+0x5a4>)
 802f9c4:	2200      	movs	r2, #0
 802f9c6:	f7e0 fc77 	bl	80102b8 <__aeabi_dsub>
 802f9ca:	4602      	mov	r2, r0
 802f9cc:	460b      	mov	r3, r1
 802f9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802f9d2:	462a      	mov	r2, r5
 802f9d4:	4633      	mov	r3, r6
 802f9d6:	f7e1 f8b7 	bl	8010b48 <__aeabi_dcmpgt>
 802f9da:	2800      	cmp	r0, #0
 802f9dc:	f040 828c 	bne.w	802fef8 <_dtoa_r+0x910>
 802f9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f9e4:	462a      	mov	r2, r5
 802f9e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802f9ea:	f7e1 f88f 	bl	8010b0c <__aeabi_dcmplt>
 802f9ee:	2800      	cmp	r0, #0
 802f9f0:	f040 8129 	bne.w	802fc46 <_dtoa_r+0x65e>
 802f9f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802f9f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802f9fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802f9fe:	2b00      	cmp	r3, #0
 802fa00:	f2c0 815b 	blt.w	802fcba <_dtoa_r+0x6d2>
 802fa04:	2f0e      	cmp	r7, #14
 802fa06:	f300 8158 	bgt.w	802fcba <_dtoa_r+0x6d2>
 802fa0a:	4b5b      	ldr	r3, [pc, #364]	@ (802fb78 <_dtoa_r+0x590>)
 802fa0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802fa10:	ed93 7b00 	vldr	d7, [r3]
 802fa14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802fa16:	2b00      	cmp	r3, #0
 802fa18:	ed8d 7b00 	vstr	d7, [sp]
 802fa1c:	da03      	bge.n	802fa26 <_dtoa_r+0x43e>
 802fa1e:	9b07      	ldr	r3, [sp, #28]
 802fa20:	2b00      	cmp	r3, #0
 802fa22:	f340 8102 	ble.w	802fc2a <_dtoa_r+0x642>
 802fa26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802fa2a:	4656      	mov	r6, sl
 802fa2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802fa30:	4620      	mov	r0, r4
 802fa32:	4629      	mov	r1, r5
 802fa34:	f7e0 ff22 	bl	801087c <__aeabi_ddiv>
 802fa38:	f7e1 f8a6 	bl	8010b88 <__aeabi_d2iz>
 802fa3c:	4680      	mov	r8, r0
 802fa3e:	f7e0 fd89 	bl	8010554 <__aeabi_i2d>
 802fa42:	e9dd 2300 	ldrd	r2, r3, [sp]
 802fa46:	f7e0 fdef 	bl	8010628 <__aeabi_dmul>
 802fa4a:	4602      	mov	r2, r0
 802fa4c:	460b      	mov	r3, r1
 802fa4e:	4620      	mov	r0, r4
 802fa50:	4629      	mov	r1, r5
 802fa52:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802fa56:	f7e0 fc2f 	bl	80102b8 <__aeabi_dsub>
 802fa5a:	f806 4b01 	strb.w	r4, [r6], #1
 802fa5e:	9d07      	ldr	r5, [sp, #28]
 802fa60:	eba6 040a 	sub.w	r4, r6, sl
 802fa64:	42a5      	cmp	r5, r4
 802fa66:	4602      	mov	r2, r0
 802fa68:	460b      	mov	r3, r1
 802fa6a:	f040 8118 	bne.w	802fc9e <_dtoa_r+0x6b6>
 802fa6e:	f7e0 fc25 	bl	80102bc <__adddf3>
 802fa72:	e9dd 2300 	ldrd	r2, r3, [sp]
 802fa76:	4604      	mov	r4, r0
 802fa78:	460d      	mov	r5, r1
 802fa7a:	f7e1 f865 	bl	8010b48 <__aeabi_dcmpgt>
 802fa7e:	2800      	cmp	r0, #0
 802fa80:	f040 80fa 	bne.w	802fc78 <_dtoa_r+0x690>
 802fa84:	e9dd 2300 	ldrd	r2, r3, [sp]
 802fa88:	4620      	mov	r0, r4
 802fa8a:	4629      	mov	r1, r5
 802fa8c:	f7e1 f834 	bl	8010af8 <__aeabi_dcmpeq>
 802fa90:	b118      	cbz	r0, 802fa9a <_dtoa_r+0x4b2>
 802fa92:	f018 0f01 	tst.w	r8, #1
 802fa96:	f040 80ef 	bne.w	802fc78 <_dtoa_r+0x690>
 802fa9a:	4649      	mov	r1, r9
 802fa9c:	4658      	mov	r0, fp
 802fa9e:	f004 fff8 	bl	8034a92 <_Bfree>
 802faa2:	2300      	movs	r3, #0
 802faa4:	7033      	strb	r3, [r6, #0]
 802faa6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802faa8:	3701      	adds	r7, #1
 802faaa:	601f      	str	r7, [r3, #0]
 802faac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802faae:	2b00      	cmp	r3, #0
 802fab0:	f43f add1 	beq.w	802f656 <_dtoa_r+0x6e>
 802fab4:	601e      	str	r6, [r3, #0]
 802fab6:	e5ce      	b.n	802f656 <_dtoa_r+0x6e>
 802fab8:	07e2      	lsls	r2, r4, #31
 802faba:	d505      	bpl.n	802fac8 <_dtoa_r+0x4e0>
 802fabc:	e9d5 2300 	ldrd	r2, r3, [r5]
 802fac0:	f7e0 fdb2 	bl	8010628 <__aeabi_dmul>
 802fac4:	3601      	adds	r6, #1
 802fac6:	2301      	movs	r3, #1
 802fac8:	1064      	asrs	r4, r4, #1
 802faca:	3508      	adds	r5, #8
 802facc:	e73f      	b.n	802f94e <_dtoa_r+0x366>
 802face:	2602      	movs	r6, #2
 802fad0:	e742      	b.n	802f958 <_dtoa_r+0x370>
 802fad2:	9c07      	ldr	r4, [sp, #28]
 802fad4:	9704      	str	r7, [sp, #16]
 802fad6:	e761      	b.n	802f99c <_dtoa_r+0x3b4>
 802fad8:	4b27      	ldr	r3, [pc, #156]	@ (802fb78 <_dtoa_r+0x590>)
 802fada:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802fadc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802fae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802fae4:	4454      	add	r4, sl
 802fae6:	2900      	cmp	r1, #0
 802fae8:	d054      	beq.n	802fb94 <_dtoa_r+0x5ac>
 802faea:	4929      	ldr	r1, [pc, #164]	@ (802fb90 <_dtoa_r+0x5a8>)
 802faec:	2000      	movs	r0, #0
 802faee:	f7e0 fec5 	bl	801087c <__aeabi_ddiv>
 802faf2:	4633      	mov	r3, r6
 802faf4:	462a      	mov	r2, r5
 802faf6:	f7e0 fbdf 	bl	80102b8 <__aeabi_dsub>
 802fafa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802fafe:	4656      	mov	r6, sl
 802fb00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fb04:	f7e1 f840 	bl	8010b88 <__aeabi_d2iz>
 802fb08:	4605      	mov	r5, r0
 802fb0a:	f7e0 fd23 	bl	8010554 <__aeabi_i2d>
 802fb0e:	4602      	mov	r2, r0
 802fb10:	460b      	mov	r3, r1
 802fb12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fb16:	f7e0 fbcf 	bl	80102b8 <__aeabi_dsub>
 802fb1a:	3530      	adds	r5, #48	@ 0x30
 802fb1c:	4602      	mov	r2, r0
 802fb1e:	460b      	mov	r3, r1
 802fb20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802fb24:	f806 5b01 	strb.w	r5, [r6], #1
 802fb28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802fb2c:	f7e0 ffee 	bl	8010b0c <__aeabi_dcmplt>
 802fb30:	2800      	cmp	r0, #0
 802fb32:	d172      	bne.n	802fc1a <_dtoa_r+0x632>
 802fb34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802fb38:	4911      	ldr	r1, [pc, #68]	@ (802fb80 <_dtoa_r+0x598>)
 802fb3a:	2000      	movs	r0, #0
 802fb3c:	f7e0 fbbc 	bl	80102b8 <__aeabi_dsub>
 802fb40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802fb44:	f7e0 ffe2 	bl	8010b0c <__aeabi_dcmplt>
 802fb48:	2800      	cmp	r0, #0
 802fb4a:	f040 8096 	bne.w	802fc7a <_dtoa_r+0x692>
 802fb4e:	42a6      	cmp	r6, r4
 802fb50:	f43f af50 	beq.w	802f9f4 <_dtoa_r+0x40c>
 802fb54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802fb58:	4b0a      	ldr	r3, [pc, #40]	@ (802fb84 <_dtoa_r+0x59c>)
 802fb5a:	2200      	movs	r2, #0
 802fb5c:	f7e0 fd64 	bl	8010628 <__aeabi_dmul>
 802fb60:	4b08      	ldr	r3, [pc, #32]	@ (802fb84 <_dtoa_r+0x59c>)
 802fb62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802fb66:	2200      	movs	r2, #0
 802fb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fb6c:	f7e0 fd5c 	bl	8010628 <__aeabi_dmul>
 802fb70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802fb74:	e7c4      	b.n	802fb00 <_dtoa_r+0x518>
 802fb76:	bf00      	nop
 802fb78:	0803d958 	.word	0x0803d958
 802fb7c:	0803d930 	.word	0x0803d930
 802fb80:	3ff00000 	.word	0x3ff00000
 802fb84:	40240000 	.word	0x40240000
 802fb88:	401c0000 	.word	0x401c0000
 802fb8c:	40140000 	.word	0x40140000
 802fb90:	3fe00000 	.word	0x3fe00000
 802fb94:	4631      	mov	r1, r6
 802fb96:	4628      	mov	r0, r5
 802fb98:	f7e0 fd46 	bl	8010628 <__aeabi_dmul>
 802fb9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802fba0:	9415      	str	r4, [sp, #84]	@ 0x54
 802fba2:	4656      	mov	r6, sl
 802fba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fba8:	f7e0 ffee 	bl	8010b88 <__aeabi_d2iz>
 802fbac:	4605      	mov	r5, r0
 802fbae:	f7e0 fcd1 	bl	8010554 <__aeabi_i2d>
 802fbb2:	4602      	mov	r2, r0
 802fbb4:	460b      	mov	r3, r1
 802fbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fbba:	f7e0 fb7d 	bl	80102b8 <__aeabi_dsub>
 802fbbe:	3530      	adds	r5, #48	@ 0x30
 802fbc0:	f806 5b01 	strb.w	r5, [r6], #1
 802fbc4:	4602      	mov	r2, r0
 802fbc6:	460b      	mov	r3, r1
 802fbc8:	42a6      	cmp	r6, r4
 802fbca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802fbce:	f04f 0200 	mov.w	r2, #0
 802fbd2:	d124      	bne.n	802fc1e <_dtoa_r+0x636>
 802fbd4:	4bac      	ldr	r3, [pc, #688]	@ (802fe88 <_dtoa_r+0x8a0>)
 802fbd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802fbda:	f7e0 fb6f 	bl	80102bc <__adddf3>
 802fbde:	4602      	mov	r2, r0
 802fbe0:	460b      	mov	r3, r1
 802fbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fbe6:	f7e0 ffaf 	bl	8010b48 <__aeabi_dcmpgt>
 802fbea:	2800      	cmp	r0, #0
 802fbec:	d145      	bne.n	802fc7a <_dtoa_r+0x692>
 802fbee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802fbf2:	49a5      	ldr	r1, [pc, #660]	@ (802fe88 <_dtoa_r+0x8a0>)
 802fbf4:	2000      	movs	r0, #0
 802fbf6:	f7e0 fb5f 	bl	80102b8 <__aeabi_dsub>
 802fbfa:	4602      	mov	r2, r0
 802fbfc:	460b      	mov	r3, r1
 802fbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802fc02:	f7e0 ff83 	bl	8010b0c <__aeabi_dcmplt>
 802fc06:	2800      	cmp	r0, #0
 802fc08:	f43f aef4 	beq.w	802f9f4 <_dtoa_r+0x40c>
 802fc0c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802fc0e:	1e73      	subs	r3, r6, #1
 802fc10:	9315      	str	r3, [sp, #84]	@ 0x54
 802fc12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802fc16:	2b30      	cmp	r3, #48	@ 0x30
 802fc18:	d0f8      	beq.n	802fc0c <_dtoa_r+0x624>
 802fc1a:	9f04      	ldr	r7, [sp, #16]
 802fc1c:	e73d      	b.n	802fa9a <_dtoa_r+0x4b2>
 802fc1e:	4b9b      	ldr	r3, [pc, #620]	@ (802fe8c <_dtoa_r+0x8a4>)
 802fc20:	f7e0 fd02 	bl	8010628 <__aeabi_dmul>
 802fc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802fc28:	e7bc      	b.n	802fba4 <_dtoa_r+0x5bc>
 802fc2a:	d10c      	bne.n	802fc46 <_dtoa_r+0x65e>
 802fc2c:	4b98      	ldr	r3, [pc, #608]	@ (802fe90 <_dtoa_r+0x8a8>)
 802fc2e:	2200      	movs	r2, #0
 802fc30:	e9dd 0100 	ldrd	r0, r1, [sp]
 802fc34:	f7e0 fcf8 	bl	8010628 <__aeabi_dmul>
 802fc38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802fc3c:	f7e0 ff7a 	bl	8010b34 <__aeabi_dcmpge>
 802fc40:	2800      	cmp	r0, #0
 802fc42:	f000 8157 	beq.w	802fef4 <_dtoa_r+0x90c>
 802fc46:	2400      	movs	r4, #0
 802fc48:	4625      	mov	r5, r4
 802fc4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802fc4c:	43db      	mvns	r3, r3
 802fc4e:	9304      	str	r3, [sp, #16]
 802fc50:	4656      	mov	r6, sl
 802fc52:	2700      	movs	r7, #0
 802fc54:	4621      	mov	r1, r4
 802fc56:	4658      	mov	r0, fp
 802fc58:	f004 ff1b 	bl	8034a92 <_Bfree>
 802fc5c:	2d00      	cmp	r5, #0
 802fc5e:	d0dc      	beq.n	802fc1a <_dtoa_r+0x632>
 802fc60:	b12f      	cbz	r7, 802fc6e <_dtoa_r+0x686>
 802fc62:	42af      	cmp	r7, r5
 802fc64:	d003      	beq.n	802fc6e <_dtoa_r+0x686>
 802fc66:	4639      	mov	r1, r7
 802fc68:	4658      	mov	r0, fp
 802fc6a:	f004 ff12 	bl	8034a92 <_Bfree>
 802fc6e:	4629      	mov	r1, r5
 802fc70:	4658      	mov	r0, fp
 802fc72:	f004 ff0e 	bl	8034a92 <_Bfree>
 802fc76:	e7d0      	b.n	802fc1a <_dtoa_r+0x632>
 802fc78:	9704      	str	r7, [sp, #16]
 802fc7a:	4633      	mov	r3, r6
 802fc7c:	461e      	mov	r6, r3
 802fc7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802fc82:	2a39      	cmp	r2, #57	@ 0x39
 802fc84:	d107      	bne.n	802fc96 <_dtoa_r+0x6ae>
 802fc86:	459a      	cmp	sl, r3
 802fc88:	d1f8      	bne.n	802fc7c <_dtoa_r+0x694>
 802fc8a:	9a04      	ldr	r2, [sp, #16]
 802fc8c:	3201      	adds	r2, #1
 802fc8e:	9204      	str	r2, [sp, #16]
 802fc90:	2230      	movs	r2, #48	@ 0x30
 802fc92:	f88a 2000 	strb.w	r2, [sl]
 802fc96:	781a      	ldrb	r2, [r3, #0]
 802fc98:	3201      	adds	r2, #1
 802fc9a:	701a      	strb	r2, [r3, #0]
 802fc9c:	e7bd      	b.n	802fc1a <_dtoa_r+0x632>
 802fc9e:	4b7b      	ldr	r3, [pc, #492]	@ (802fe8c <_dtoa_r+0x8a4>)
 802fca0:	2200      	movs	r2, #0
 802fca2:	f7e0 fcc1 	bl	8010628 <__aeabi_dmul>
 802fca6:	2200      	movs	r2, #0
 802fca8:	2300      	movs	r3, #0
 802fcaa:	4604      	mov	r4, r0
 802fcac:	460d      	mov	r5, r1
 802fcae:	f7e0 ff23 	bl	8010af8 <__aeabi_dcmpeq>
 802fcb2:	2800      	cmp	r0, #0
 802fcb4:	f43f aeba 	beq.w	802fa2c <_dtoa_r+0x444>
 802fcb8:	e6ef      	b.n	802fa9a <_dtoa_r+0x4b2>
 802fcba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802fcbc:	2a00      	cmp	r2, #0
 802fcbe:	f000 80db 	beq.w	802fe78 <_dtoa_r+0x890>
 802fcc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802fcc4:	2a01      	cmp	r2, #1
 802fcc6:	f300 80bf 	bgt.w	802fe48 <_dtoa_r+0x860>
 802fcca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802fccc:	2a00      	cmp	r2, #0
 802fcce:	f000 80b7 	beq.w	802fe40 <_dtoa_r+0x858>
 802fcd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802fcd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802fcd8:	4646      	mov	r6, r8
 802fcda:	9a08      	ldr	r2, [sp, #32]
 802fcdc:	2101      	movs	r1, #1
 802fcde:	441a      	add	r2, r3
 802fce0:	4658      	mov	r0, fp
 802fce2:	4498      	add	r8, r3
 802fce4:	9208      	str	r2, [sp, #32]
 802fce6:	f004 ffb9 	bl	8034c5c <__i2b>
 802fcea:	4605      	mov	r5, r0
 802fcec:	b15e      	cbz	r6, 802fd06 <_dtoa_r+0x71e>
 802fcee:	9b08      	ldr	r3, [sp, #32]
 802fcf0:	2b00      	cmp	r3, #0
 802fcf2:	dd08      	ble.n	802fd06 <_dtoa_r+0x71e>
 802fcf4:	42b3      	cmp	r3, r6
 802fcf6:	9a08      	ldr	r2, [sp, #32]
 802fcf8:	bfa8      	it	ge
 802fcfa:	4633      	movge	r3, r6
 802fcfc:	eba8 0803 	sub.w	r8, r8, r3
 802fd00:	1af6      	subs	r6, r6, r3
 802fd02:	1ad3      	subs	r3, r2, r3
 802fd04:	9308      	str	r3, [sp, #32]
 802fd06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fd08:	b1f3      	cbz	r3, 802fd48 <_dtoa_r+0x760>
 802fd0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802fd0c:	2b00      	cmp	r3, #0
 802fd0e:	f000 80b7 	beq.w	802fe80 <_dtoa_r+0x898>
 802fd12:	b18c      	cbz	r4, 802fd38 <_dtoa_r+0x750>
 802fd14:	4629      	mov	r1, r5
 802fd16:	4622      	mov	r2, r4
 802fd18:	4658      	mov	r0, fp
 802fd1a:	f005 f85f 	bl	8034ddc <__pow5mult>
 802fd1e:	464a      	mov	r2, r9
 802fd20:	4601      	mov	r1, r0
 802fd22:	4605      	mov	r5, r0
 802fd24:	4658      	mov	r0, fp
 802fd26:	f004 ffaf 	bl	8034c88 <__multiply>
 802fd2a:	4649      	mov	r1, r9
 802fd2c:	9004      	str	r0, [sp, #16]
 802fd2e:	4658      	mov	r0, fp
 802fd30:	f004 feaf 	bl	8034a92 <_Bfree>
 802fd34:	9b04      	ldr	r3, [sp, #16]
 802fd36:	4699      	mov	r9, r3
 802fd38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fd3a:	1b1a      	subs	r2, r3, r4
 802fd3c:	d004      	beq.n	802fd48 <_dtoa_r+0x760>
 802fd3e:	4649      	mov	r1, r9
 802fd40:	4658      	mov	r0, fp
 802fd42:	f005 f84b 	bl	8034ddc <__pow5mult>
 802fd46:	4681      	mov	r9, r0
 802fd48:	2101      	movs	r1, #1
 802fd4a:	4658      	mov	r0, fp
 802fd4c:	f004 ff86 	bl	8034c5c <__i2b>
 802fd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fd52:	4604      	mov	r4, r0
 802fd54:	2b00      	cmp	r3, #0
 802fd56:	f000 81cc 	beq.w	80300f2 <_dtoa_r+0xb0a>
 802fd5a:	461a      	mov	r2, r3
 802fd5c:	4601      	mov	r1, r0
 802fd5e:	4658      	mov	r0, fp
 802fd60:	f005 f83c 	bl	8034ddc <__pow5mult>
 802fd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fd66:	2b01      	cmp	r3, #1
 802fd68:	4604      	mov	r4, r0
 802fd6a:	f300 8095 	bgt.w	802fe98 <_dtoa_r+0x8b0>
 802fd6e:	9b02      	ldr	r3, [sp, #8]
 802fd70:	2b00      	cmp	r3, #0
 802fd72:	f040 8087 	bne.w	802fe84 <_dtoa_r+0x89c>
 802fd76:	9b03      	ldr	r3, [sp, #12]
 802fd78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802fd7c:	2b00      	cmp	r3, #0
 802fd7e:	f040 8089 	bne.w	802fe94 <_dtoa_r+0x8ac>
 802fd82:	9b03      	ldr	r3, [sp, #12]
 802fd84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802fd88:	0d1b      	lsrs	r3, r3, #20
 802fd8a:	051b      	lsls	r3, r3, #20
 802fd8c:	b12b      	cbz	r3, 802fd9a <_dtoa_r+0x7b2>
 802fd8e:	9b08      	ldr	r3, [sp, #32]
 802fd90:	3301      	adds	r3, #1
 802fd92:	9308      	str	r3, [sp, #32]
 802fd94:	f108 0801 	add.w	r8, r8, #1
 802fd98:	2301      	movs	r3, #1
 802fd9a:	930a      	str	r3, [sp, #40]	@ 0x28
 802fd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fd9e:	2b00      	cmp	r3, #0
 802fda0:	f000 81ad 	beq.w	80300fe <_dtoa_r+0xb16>
 802fda4:	6923      	ldr	r3, [r4, #16]
 802fda6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802fdaa:	6918      	ldr	r0, [r3, #16]
 802fdac:	f004 ff0a 	bl	8034bc4 <__hi0bits>
 802fdb0:	f1c0 0020 	rsb	r0, r0, #32
 802fdb4:	9b08      	ldr	r3, [sp, #32]
 802fdb6:	4418      	add	r0, r3
 802fdb8:	f010 001f 	ands.w	r0, r0, #31
 802fdbc:	d077      	beq.n	802feae <_dtoa_r+0x8c6>
 802fdbe:	f1c0 0320 	rsb	r3, r0, #32
 802fdc2:	2b04      	cmp	r3, #4
 802fdc4:	dd6b      	ble.n	802fe9e <_dtoa_r+0x8b6>
 802fdc6:	9b08      	ldr	r3, [sp, #32]
 802fdc8:	f1c0 001c 	rsb	r0, r0, #28
 802fdcc:	4403      	add	r3, r0
 802fdce:	4480      	add	r8, r0
 802fdd0:	4406      	add	r6, r0
 802fdd2:	9308      	str	r3, [sp, #32]
 802fdd4:	f1b8 0f00 	cmp.w	r8, #0
 802fdd8:	dd05      	ble.n	802fde6 <_dtoa_r+0x7fe>
 802fdda:	4649      	mov	r1, r9
 802fddc:	4642      	mov	r2, r8
 802fdde:	4658      	mov	r0, fp
 802fde0:	f005 f83c 	bl	8034e5c <__lshift>
 802fde4:	4681      	mov	r9, r0
 802fde6:	9b08      	ldr	r3, [sp, #32]
 802fde8:	2b00      	cmp	r3, #0
 802fdea:	dd05      	ble.n	802fdf8 <_dtoa_r+0x810>
 802fdec:	4621      	mov	r1, r4
 802fdee:	461a      	mov	r2, r3
 802fdf0:	4658      	mov	r0, fp
 802fdf2:	f005 f833 	bl	8034e5c <__lshift>
 802fdf6:	4604      	mov	r4, r0
 802fdf8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802fdfa:	2b00      	cmp	r3, #0
 802fdfc:	d059      	beq.n	802feb2 <_dtoa_r+0x8ca>
 802fdfe:	4621      	mov	r1, r4
 802fe00:	4648      	mov	r0, r9
 802fe02:	f005 f897 	bl	8034f34 <__mcmp>
 802fe06:	2800      	cmp	r0, #0
 802fe08:	da53      	bge.n	802feb2 <_dtoa_r+0x8ca>
 802fe0a:	1e7b      	subs	r3, r7, #1
 802fe0c:	9304      	str	r3, [sp, #16]
 802fe0e:	4649      	mov	r1, r9
 802fe10:	2300      	movs	r3, #0
 802fe12:	220a      	movs	r2, #10
 802fe14:	4658      	mov	r0, fp
 802fe16:	f004 fe45 	bl	8034aa4 <__multadd>
 802fe1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802fe1c:	4681      	mov	r9, r0
 802fe1e:	2b00      	cmp	r3, #0
 802fe20:	f000 816f 	beq.w	8030102 <_dtoa_r+0xb1a>
 802fe24:	2300      	movs	r3, #0
 802fe26:	4629      	mov	r1, r5
 802fe28:	220a      	movs	r2, #10
 802fe2a:	4658      	mov	r0, fp
 802fe2c:	f004 fe3a 	bl	8034aa4 <__multadd>
 802fe30:	9b00      	ldr	r3, [sp, #0]
 802fe32:	2b00      	cmp	r3, #0
 802fe34:	4605      	mov	r5, r0
 802fe36:	dc67      	bgt.n	802ff08 <_dtoa_r+0x920>
 802fe38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fe3a:	2b02      	cmp	r3, #2
 802fe3c:	dc41      	bgt.n	802fec2 <_dtoa_r+0x8da>
 802fe3e:	e063      	b.n	802ff08 <_dtoa_r+0x920>
 802fe40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802fe42:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802fe46:	e746      	b.n	802fcd6 <_dtoa_r+0x6ee>
 802fe48:	9b07      	ldr	r3, [sp, #28]
 802fe4a:	1e5c      	subs	r4, r3, #1
 802fe4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fe4e:	42a3      	cmp	r3, r4
 802fe50:	bfbf      	itttt	lt
 802fe52:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802fe54:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802fe56:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802fe58:	1ae3      	sublt	r3, r4, r3
 802fe5a:	bfb4      	ite	lt
 802fe5c:	18d2      	addlt	r2, r2, r3
 802fe5e:	1b1c      	subge	r4, r3, r4
 802fe60:	9b07      	ldr	r3, [sp, #28]
 802fe62:	bfbc      	itt	lt
 802fe64:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802fe66:	2400      	movlt	r4, #0
 802fe68:	2b00      	cmp	r3, #0
 802fe6a:	bfb5      	itete	lt
 802fe6c:	eba8 0603 	sublt.w	r6, r8, r3
 802fe70:	9b07      	ldrge	r3, [sp, #28]
 802fe72:	2300      	movlt	r3, #0
 802fe74:	4646      	movge	r6, r8
 802fe76:	e730      	b.n	802fcda <_dtoa_r+0x6f2>
 802fe78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802fe7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802fe7c:	4646      	mov	r6, r8
 802fe7e:	e735      	b.n	802fcec <_dtoa_r+0x704>
 802fe80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802fe82:	e75c      	b.n	802fd3e <_dtoa_r+0x756>
 802fe84:	2300      	movs	r3, #0
 802fe86:	e788      	b.n	802fd9a <_dtoa_r+0x7b2>
 802fe88:	3fe00000 	.word	0x3fe00000
 802fe8c:	40240000 	.word	0x40240000
 802fe90:	40140000 	.word	0x40140000
 802fe94:	9b02      	ldr	r3, [sp, #8]
 802fe96:	e780      	b.n	802fd9a <_dtoa_r+0x7b2>
 802fe98:	2300      	movs	r3, #0
 802fe9a:	930a      	str	r3, [sp, #40]	@ 0x28
 802fe9c:	e782      	b.n	802fda4 <_dtoa_r+0x7bc>
 802fe9e:	d099      	beq.n	802fdd4 <_dtoa_r+0x7ec>
 802fea0:	9a08      	ldr	r2, [sp, #32]
 802fea2:	331c      	adds	r3, #28
 802fea4:	441a      	add	r2, r3
 802fea6:	4498      	add	r8, r3
 802fea8:	441e      	add	r6, r3
 802feaa:	9208      	str	r2, [sp, #32]
 802feac:	e792      	b.n	802fdd4 <_dtoa_r+0x7ec>
 802feae:	4603      	mov	r3, r0
 802feb0:	e7f6      	b.n	802fea0 <_dtoa_r+0x8b8>
 802feb2:	9b07      	ldr	r3, [sp, #28]
 802feb4:	9704      	str	r7, [sp, #16]
 802feb6:	2b00      	cmp	r3, #0
 802feb8:	dc20      	bgt.n	802fefc <_dtoa_r+0x914>
 802feba:	9300      	str	r3, [sp, #0]
 802febc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802febe:	2b02      	cmp	r3, #2
 802fec0:	dd1e      	ble.n	802ff00 <_dtoa_r+0x918>
 802fec2:	9b00      	ldr	r3, [sp, #0]
 802fec4:	2b00      	cmp	r3, #0
 802fec6:	f47f aec0 	bne.w	802fc4a <_dtoa_r+0x662>
 802feca:	4621      	mov	r1, r4
 802fecc:	2205      	movs	r2, #5
 802fece:	4658      	mov	r0, fp
 802fed0:	f004 fde8 	bl	8034aa4 <__multadd>
 802fed4:	4601      	mov	r1, r0
 802fed6:	4604      	mov	r4, r0
 802fed8:	4648      	mov	r0, r9
 802feda:	f005 f82b 	bl	8034f34 <__mcmp>
 802fede:	2800      	cmp	r0, #0
 802fee0:	f77f aeb3 	ble.w	802fc4a <_dtoa_r+0x662>
 802fee4:	4656      	mov	r6, sl
 802fee6:	2331      	movs	r3, #49	@ 0x31
 802fee8:	f806 3b01 	strb.w	r3, [r6], #1
 802feec:	9b04      	ldr	r3, [sp, #16]
 802feee:	3301      	adds	r3, #1
 802fef0:	9304      	str	r3, [sp, #16]
 802fef2:	e6ae      	b.n	802fc52 <_dtoa_r+0x66a>
 802fef4:	9c07      	ldr	r4, [sp, #28]
 802fef6:	9704      	str	r7, [sp, #16]
 802fef8:	4625      	mov	r5, r4
 802fefa:	e7f3      	b.n	802fee4 <_dtoa_r+0x8fc>
 802fefc:	9b07      	ldr	r3, [sp, #28]
 802fefe:	9300      	str	r3, [sp, #0]
 802ff00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ff02:	2b00      	cmp	r3, #0
 802ff04:	f000 8101 	beq.w	803010a <_dtoa_r+0xb22>
 802ff08:	2e00      	cmp	r6, #0
 802ff0a:	dd05      	ble.n	802ff18 <_dtoa_r+0x930>
 802ff0c:	4629      	mov	r1, r5
 802ff0e:	4632      	mov	r2, r6
 802ff10:	4658      	mov	r0, fp
 802ff12:	f004 ffa3 	bl	8034e5c <__lshift>
 802ff16:	4605      	mov	r5, r0
 802ff18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ff1a:	2b00      	cmp	r3, #0
 802ff1c:	d059      	beq.n	802ffd2 <_dtoa_r+0x9ea>
 802ff1e:	6869      	ldr	r1, [r5, #4]
 802ff20:	4658      	mov	r0, fp
 802ff22:	f004 fd91 	bl	8034a48 <_Balloc>
 802ff26:	4606      	mov	r6, r0
 802ff28:	b920      	cbnz	r0, 802ff34 <_dtoa_r+0x94c>
 802ff2a:	4b83      	ldr	r3, [pc, #524]	@ (8030138 <_dtoa_r+0xb50>)
 802ff2c:	4602      	mov	r2, r0
 802ff2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802ff32:	e480      	b.n	802f836 <_dtoa_r+0x24e>
 802ff34:	692a      	ldr	r2, [r5, #16]
 802ff36:	3202      	adds	r2, #2
 802ff38:	0092      	lsls	r2, r2, #2
 802ff3a:	f105 010c 	add.w	r1, r5, #12
 802ff3e:	300c      	adds	r0, #12
 802ff40:	f7ff fa4c 	bl	802f3dc <memcpy>
 802ff44:	2201      	movs	r2, #1
 802ff46:	4631      	mov	r1, r6
 802ff48:	4658      	mov	r0, fp
 802ff4a:	f004 ff87 	bl	8034e5c <__lshift>
 802ff4e:	f10a 0301 	add.w	r3, sl, #1
 802ff52:	9307      	str	r3, [sp, #28]
 802ff54:	9b00      	ldr	r3, [sp, #0]
 802ff56:	4453      	add	r3, sl
 802ff58:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ff5a:	9b02      	ldr	r3, [sp, #8]
 802ff5c:	f003 0301 	and.w	r3, r3, #1
 802ff60:	462f      	mov	r7, r5
 802ff62:	930a      	str	r3, [sp, #40]	@ 0x28
 802ff64:	4605      	mov	r5, r0
 802ff66:	9b07      	ldr	r3, [sp, #28]
 802ff68:	4621      	mov	r1, r4
 802ff6a:	3b01      	subs	r3, #1
 802ff6c:	4648      	mov	r0, r9
 802ff6e:	9300      	str	r3, [sp, #0]
 802ff70:	f7ff fab1 	bl	802f4d6 <quorem>
 802ff74:	4639      	mov	r1, r7
 802ff76:	9002      	str	r0, [sp, #8]
 802ff78:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ff7c:	4648      	mov	r0, r9
 802ff7e:	f004 ffd9 	bl	8034f34 <__mcmp>
 802ff82:	462a      	mov	r2, r5
 802ff84:	9008      	str	r0, [sp, #32]
 802ff86:	4621      	mov	r1, r4
 802ff88:	4658      	mov	r0, fp
 802ff8a:	f004 ffef 	bl	8034f6c <__mdiff>
 802ff8e:	68c2      	ldr	r2, [r0, #12]
 802ff90:	4606      	mov	r6, r0
 802ff92:	bb02      	cbnz	r2, 802ffd6 <_dtoa_r+0x9ee>
 802ff94:	4601      	mov	r1, r0
 802ff96:	4648      	mov	r0, r9
 802ff98:	f004 ffcc 	bl	8034f34 <__mcmp>
 802ff9c:	4602      	mov	r2, r0
 802ff9e:	4631      	mov	r1, r6
 802ffa0:	4658      	mov	r0, fp
 802ffa2:	920e      	str	r2, [sp, #56]	@ 0x38
 802ffa4:	f004 fd75 	bl	8034a92 <_Bfree>
 802ffa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ffaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ffac:	9e07      	ldr	r6, [sp, #28]
 802ffae:	ea43 0102 	orr.w	r1, r3, r2
 802ffb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ffb4:	4319      	orrs	r1, r3
 802ffb6:	d110      	bne.n	802ffda <_dtoa_r+0x9f2>
 802ffb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ffbc:	d029      	beq.n	8030012 <_dtoa_r+0xa2a>
 802ffbe:	9b08      	ldr	r3, [sp, #32]
 802ffc0:	2b00      	cmp	r3, #0
 802ffc2:	dd02      	ble.n	802ffca <_dtoa_r+0x9e2>
 802ffc4:	9b02      	ldr	r3, [sp, #8]
 802ffc6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802ffca:	9b00      	ldr	r3, [sp, #0]
 802ffcc:	f883 8000 	strb.w	r8, [r3]
 802ffd0:	e640      	b.n	802fc54 <_dtoa_r+0x66c>
 802ffd2:	4628      	mov	r0, r5
 802ffd4:	e7bb      	b.n	802ff4e <_dtoa_r+0x966>
 802ffd6:	2201      	movs	r2, #1
 802ffd8:	e7e1      	b.n	802ff9e <_dtoa_r+0x9b6>
 802ffda:	9b08      	ldr	r3, [sp, #32]
 802ffdc:	2b00      	cmp	r3, #0
 802ffde:	db04      	blt.n	802ffea <_dtoa_r+0xa02>
 802ffe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ffe2:	430b      	orrs	r3, r1
 802ffe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ffe6:	430b      	orrs	r3, r1
 802ffe8:	d120      	bne.n	803002c <_dtoa_r+0xa44>
 802ffea:	2a00      	cmp	r2, #0
 802ffec:	dded      	ble.n	802ffca <_dtoa_r+0x9e2>
 802ffee:	4649      	mov	r1, r9
 802fff0:	2201      	movs	r2, #1
 802fff2:	4658      	mov	r0, fp
 802fff4:	f004 ff32 	bl	8034e5c <__lshift>
 802fff8:	4621      	mov	r1, r4
 802fffa:	4681      	mov	r9, r0
 802fffc:	f004 ff9a 	bl	8034f34 <__mcmp>
 8030000:	2800      	cmp	r0, #0
 8030002:	dc03      	bgt.n	803000c <_dtoa_r+0xa24>
 8030004:	d1e1      	bne.n	802ffca <_dtoa_r+0x9e2>
 8030006:	f018 0f01 	tst.w	r8, #1
 803000a:	d0de      	beq.n	802ffca <_dtoa_r+0x9e2>
 803000c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8030010:	d1d8      	bne.n	802ffc4 <_dtoa_r+0x9dc>
 8030012:	9a00      	ldr	r2, [sp, #0]
 8030014:	2339      	movs	r3, #57	@ 0x39
 8030016:	7013      	strb	r3, [r2, #0]
 8030018:	4633      	mov	r3, r6
 803001a:	461e      	mov	r6, r3
 803001c:	3b01      	subs	r3, #1
 803001e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8030022:	2a39      	cmp	r2, #57	@ 0x39
 8030024:	d052      	beq.n	80300cc <_dtoa_r+0xae4>
 8030026:	3201      	adds	r2, #1
 8030028:	701a      	strb	r2, [r3, #0]
 803002a:	e613      	b.n	802fc54 <_dtoa_r+0x66c>
 803002c:	2a00      	cmp	r2, #0
 803002e:	dd07      	ble.n	8030040 <_dtoa_r+0xa58>
 8030030:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8030034:	d0ed      	beq.n	8030012 <_dtoa_r+0xa2a>
 8030036:	9a00      	ldr	r2, [sp, #0]
 8030038:	f108 0301 	add.w	r3, r8, #1
 803003c:	7013      	strb	r3, [r2, #0]
 803003e:	e609      	b.n	802fc54 <_dtoa_r+0x66c>
 8030040:	9b07      	ldr	r3, [sp, #28]
 8030042:	9a07      	ldr	r2, [sp, #28]
 8030044:	f803 8c01 	strb.w	r8, [r3, #-1]
 8030048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803004a:	4293      	cmp	r3, r2
 803004c:	d028      	beq.n	80300a0 <_dtoa_r+0xab8>
 803004e:	4649      	mov	r1, r9
 8030050:	2300      	movs	r3, #0
 8030052:	220a      	movs	r2, #10
 8030054:	4658      	mov	r0, fp
 8030056:	f004 fd25 	bl	8034aa4 <__multadd>
 803005a:	42af      	cmp	r7, r5
 803005c:	4681      	mov	r9, r0
 803005e:	f04f 0300 	mov.w	r3, #0
 8030062:	f04f 020a 	mov.w	r2, #10
 8030066:	4639      	mov	r1, r7
 8030068:	4658      	mov	r0, fp
 803006a:	d107      	bne.n	803007c <_dtoa_r+0xa94>
 803006c:	f004 fd1a 	bl	8034aa4 <__multadd>
 8030070:	4607      	mov	r7, r0
 8030072:	4605      	mov	r5, r0
 8030074:	9b07      	ldr	r3, [sp, #28]
 8030076:	3301      	adds	r3, #1
 8030078:	9307      	str	r3, [sp, #28]
 803007a:	e774      	b.n	802ff66 <_dtoa_r+0x97e>
 803007c:	f004 fd12 	bl	8034aa4 <__multadd>
 8030080:	4629      	mov	r1, r5
 8030082:	4607      	mov	r7, r0
 8030084:	2300      	movs	r3, #0
 8030086:	220a      	movs	r2, #10
 8030088:	4658      	mov	r0, fp
 803008a:	f004 fd0b 	bl	8034aa4 <__multadd>
 803008e:	4605      	mov	r5, r0
 8030090:	e7f0      	b.n	8030074 <_dtoa_r+0xa8c>
 8030092:	9b00      	ldr	r3, [sp, #0]
 8030094:	2b00      	cmp	r3, #0
 8030096:	bfcc      	ite	gt
 8030098:	461e      	movgt	r6, r3
 803009a:	2601      	movle	r6, #1
 803009c:	4456      	add	r6, sl
 803009e:	2700      	movs	r7, #0
 80300a0:	4649      	mov	r1, r9
 80300a2:	2201      	movs	r2, #1
 80300a4:	4658      	mov	r0, fp
 80300a6:	f004 fed9 	bl	8034e5c <__lshift>
 80300aa:	4621      	mov	r1, r4
 80300ac:	4681      	mov	r9, r0
 80300ae:	f004 ff41 	bl	8034f34 <__mcmp>
 80300b2:	2800      	cmp	r0, #0
 80300b4:	dcb0      	bgt.n	8030018 <_dtoa_r+0xa30>
 80300b6:	d102      	bne.n	80300be <_dtoa_r+0xad6>
 80300b8:	f018 0f01 	tst.w	r8, #1
 80300bc:	d1ac      	bne.n	8030018 <_dtoa_r+0xa30>
 80300be:	4633      	mov	r3, r6
 80300c0:	461e      	mov	r6, r3
 80300c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80300c6:	2a30      	cmp	r2, #48	@ 0x30
 80300c8:	d0fa      	beq.n	80300c0 <_dtoa_r+0xad8>
 80300ca:	e5c3      	b.n	802fc54 <_dtoa_r+0x66c>
 80300cc:	459a      	cmp	sl, r3
 80300ce:	d1a4      	bne.n	803001a <_dtoa_r+0xa32>
 80300d0:	9b04      	ldr	r3, [sp, #16]
 80300d2:	3301      	adds	r3, #1
 80300d4:	9304      	str	r3, [sp, #16]
 80300d6:	2331      	movs	r3, #49	@ 0x31
 80300d8:	f88a 3000 	strb.w	r3, [sl]
 80300dc:	e5ba      	b.n	802fc54 <_dtoa_r+0x66c>
 80300de:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80300e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 803013c <_dtoa_r+0xb54>
 80300e4:	2b00      	cmp	r3, #0
 80300e6:	f43f aab6 	beq.w	802f656 <_dtoa_r+0x6e>
 80300ea:	f10a 0308 	add.w	r3, sl, #8
 80300ee:	f7ff bab0 	b.w	802f652 <_dtoa_r+0x6a>
 80300f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80300f4:	2b01      	cmp	r3, #1
 80300f6:	f77f ae3a 	ble.w	802fd6e <_dtoa_r+0x786>
 80300fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80300fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80300fe:	2001      	movs	r0, #1
 8030100:	e658      	b.n	802fdb4 <_dtoa_r+0x7cc>
 8030102:	9b00      	ldr	r3, [sp, #0]
 8030104:	2b00      	cmp	r3, #0
 8030106:	f77f aed9 	ble.w	802febc <_dtoa_r+0x8d4>
 803010a:	4656      	mov	r6, sl
 803010c:	4621      	mov	r1, r4
 803010e:	4648      	mov	r0, r9
 8030110:	f7ff f9e1 	bl	802f4d6 <quorem>
 8030114:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8030118:	f806 8b01 	strb.w	r8, [r6], #1
 803011c:	9b00      	ldr	r3, [sp, #0]
 803011e:	eba6 020a 	sub.w	r2, r6, sl
 8030122:	4293      	cmp	r3, r2
 8030124:	ddb5      	ble.n	8030092 <_dtoa_r+0xaaa>
 8030126:	4649      	mov	r1, r9
 8030128:	2300      	movs	r3, #0
 803012a:	220a      	movs	r2, #10
 803012c:	4658      	mov	r0, fp
 803012e:	f004 fcb9 	bl	8034aa4 <__multadd>
 8030132:	4681      	mov	r9, r0
 8030134:	e7ea      	b.n	803010c <_dtoa_r+0xb24>
 8030136:	bf00      	nop
 8030138:	0803d7d6 	.word	0x0803d7d6
 803013c:	0803d7c9 	.word	0x0803d7c9

08030140 <_malloc_trim_r>:
 8030140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030144:	4606      	mov	r6, r0
 8030146:	2008      	movs	r0, #8
 8030148:	4689      	mov	r9, r1
 803014a:	f006 faad 	bl	80366a8 <sysconf>
 803014e:	4f24      	ldr	r7, [pc, #144]	@ (80301e0 <_malloc_trim_r+0xa0>)
 8030150:	4680      	mov	r8, r0
 8030152:	4630      	mov	r0, r6
 8030154:	f004 fc6c 	bl	8034a30 <__malloc_lock>
 8030158:	68bb      	ldr	r3, [r7, #8]
 803015a:	685d      	ldr	r5, [r3, #4]
 803015c:	f025 0503 	bic.w	r5, r5, #3
 8030160:	f1a5 0411 	sub.w	r4, r5, #17
 8030164:	eba4 0409 	sub.w	r4, r4, r9
 8030168:	4444      	add	r4, r8
 803016a:	fbb4 f4f8 	udiv	r4, r4, r8
 803016e:	3c01      	subs	r4, #1
 8030170:	fb08 f404 	mul.w	r4, r8, r4
 8030174:	45a0      	cmp	r8, r4
 8030176:	dd05      	ble.n	8030184 <_malloc_trim_r+0x44>
 8030178:	4630      	mov	r0, r6
 803017a:	f004 fc5f 	bl	8034a3c <__malloc_unlock>
 803017e:	2000      	movs	r0, #0
 8030180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030184:	2100      	movs	r1, #0
 8030186:	4630      	mov	r0, r6
 8030188:	f006 fa7e 	bl	8036688 <_sbrk_r>
 803018c:	68bb      	ldr	r3, [r7, #8]
 803018e:	442b      	add	r3, r5
 8030190:	4298      	cmp	r0, r3
 8030192:	d1f1      	bne.n	8030178 <_malloc_trim_r+0x38>
 8030194:	4261      	negs	r1, r4
 8030196:	4630      	mov	r0, r6
 8030198:	f006 fa76 	bl	8036688 <_sbrk_r>
 803019c:	3001      	adds	r0, #1
 803019e:	d110      	bne.n	80301c2 <_malloc_trim_r+0x82>
 80301a0:	2100      	movs	r1, #0
 80301a2:	4630      	mov	r0, r6
 80301a4:	f006 fa70 	bl	8036688 <_sbrk_r>
 80301a8:	68ba      	ldr	r2, [r7, #8]
 80301aa:	1a83      	subs	r3, r0, r2
 80301ac:	2b0f      	cmp	r3, #15
 80301ae:	dde3      	ble.n	8030178 <_malloc_trim_r+0x38>
 80301b0:	490c      	ldr	r1, [pc, #48]	@ (80301e4 <_malloc_trim_r+0xa4>)
 80301b2:	6809      	ldr	r1, [r1, #0]
 80301b4:	1a40      	subs	r0, r0, r1
 80301b6:	490c      	ldr	r1, [pc, #48]	@ (80301e8 <_malloc_trim_r+0xa8>)
 80301b8:	f043 0301 	orr.w	r3, r3, #1
 80301bc:	6008      	str	r0, [r1, #0]
 80301be:	6053      	str	r3, [r2, #4]
 80301c0:	e7da      	b.n	8030178 <_malloc_trim_r+0x38>
 80301c2:	68bb      	ldr	r3, [r7, #8]
 80301c4:	4a08      	ldr	r2, [pc, #32]	@ (80301e8 <_malloc_trim_r+0xa8>)
 80301c6:	1b2d      	subs	r5, r5, r4
 80301c8:	f045 0501 	orr.w	r5, r5, #1
 80301cc:	605d      	str	r5, [r3, #4]
 80301ce:	6813      	ldr	r3, [r2, #0]
 80301d0:	4630      	mov	r0, r6
 80301d2:	1b1b      	subs	r3, r3, r4
 80301d4:	6013      	str	r3, [r2, #0]
 80301d6:	f004 fc31 	bl	8034a3c <__malloc_unlock>
 80301da:	2001      	movs	r0, #1
 80301dc:	e7d0      	b.n	8030180 <_malloc_trim_r+0x40>
 80301de:	bf00      	nop
 80301e0:	2000040c 	.word	0x2000040c
 80301e4:	20000404 	.word	0x20000404
 80301e8:	2001a114 	.word	0x2001a114

080301ec <_free_r>:
 80301ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80301ee:	4604      	mov	r4, r0
 80301f0:	460f      	mov	r7, r1
 80301f2:	2900      	cmp	r1, #0
 80301f4:	f000 80b1 	beq.w	803035a <_free_r+0x16e>
 80301f8:	f004 fc1a 	bl	8034a30 <__malloc_lock>
 80301fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8030200:	4d56      	ldr	r5, [pc, #344]	@ (803035c <_free_r+0x170>)
 8030202:	f022 0001 	bic.w	r0, r2, #1
 8030206:	f1a7 0308 	sub.w	r3, r7, #8
 803020a:	eb03 0c00 	add.w	ip, r3, r0
 803020e:	68a9      	ldr	r1, [r5, #8]
 8030210:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8030214:	4561      	cmp	r1, ip
 8030216:	f026 0603 	bic.w	r6, r6, #3
 803021a:	f002 0201 	and.w	r2, r2, #1
 803021e:	d11b      	bne.n	8030258 <_free_r+0x6c>
 8030220:	4406      	add	r6, r0
 8030222:	b93a      	cbnz	r2, 8030234 <_free_r+0x48>
 8030224:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8030228:	1a9b      	subs	r3, r3, r2
 803022a:	4416      	add	r6, r2
 803022c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8030230:	60ca      	str	r2, [r1, #12]
 8030232:	6091      	str	r1, [r2, #8]
 8030234:	f046 0201 	orr.w	r2, r6, #1
 8030238:	605a      	str	r2, [r3, #4]
 803023a:	60ab      	str	r3, [r5, #8]
 803023c:	4b48      	ldr	r3, [pc, #288]	@ (8030360 <_free_r+0x174>)
 803023e:	681b      	ldr	r3, [r3, #0]
 8030240:	42b3      	cmp	r3, r6
 8030242:	d804      	bhi.n	803024e <_free_r+0x62>
 8030244:	4b47      	ldr	r3, [pc, #284]	@ (8030364 <_free_r+0x178>)
 8030246:	4620      	mov	r0, r4
 8030248:	6819      	ldr	r1, [r3, #0]
 803024a:	f7ff ff79 	bl	8030140 <_malloc_trim_r>
 803024e:	4620      	mov	r0, r4
 8030250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8030254:	f004 bbf2 	b.w	8034a3c <__malloc_unlock>
 8030258:	f8cc 6004 	str.w	r6, [ip, #4]
 803025c:	2a00      	cmp	r2, #0
 803025e:	d138      	bne.n	80302d2 <_free_r+0xe6>
 8030260:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8030264:	1a5b      	subs	r3, r3, r1
 8030266:	4408      	add	r0, r1
 8030268:	6899      	ldr	r1, [r3, #8]
 803026a:	f105 0708 	add.w	r7, r5, #8
 803026e:	42b9      	cmp	r1, r7
 8030270:	d031      	beq.n	80302d6 <_free_r+0xea>
 8030272:	68df      	ldr	r7, [r3, #12]
 8030274:	60cf      	str	r7, [r1, #12]
 8030276:	60b9      	str	r1, [r7, #8]
 8030278:	eb0c 0106 	add.w	r1, ip, r6
 803027c:	6849      	ldr	r1, [r1, #4]
 803027e:	07c9      	lsls	r1, r1, #31
 8030280:	d40b      	bmi.n	803029a <_free_r+0xae>
 8030282:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8030286:	4430      	add	r0, r6
 8030288:	bb3a      	cbnz	r2, 80302da <_free_r+0xee>
 803028a:	4e37      	ldr	r6, [pc, #220]	@ (8030368 <_free_r+0x17c>)
 803028c:	42b1      	cmp	r1, r6
 803028e:	d124      	bne.n	80302da <_free_r+0xee>
 8030290:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8030294:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8030298:	2201      	movs	r2, #1
 803029a:	f040 0101 	orr.w	r1, r0, #1
 803029e:	6059      	str	r1, [r3, #4]
 80302a0:	5018      	str	r0, [r3, r0]
 80302a2:	2a00      	cmp	r2, #0
 80302a4:	d1d3      	bne.n	803024e <_free_r+0x62>
 80302a6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80302aa:	d21b      	bcs.n	80302e4 <_free_r+0xf8>
 80302ac:	08c2      	lsrs	r2, r0, #3
 80302ae:	2101      	movs	r1, #1
 80302b0:	0940      	lsrs	r0, r0, #5
 80302b2:	4081      	lsls	r1, r0
 80302b4:	6868      	ldr	r0, [r5, #4]
 80302b6:	3201      	adds	r2, #1
 80302b8:	4301      	orrs	r1, r0
 80302ba:	6069      	str	r1, [r5, #4]
 80302bc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80302c0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80302c4:	3908      	subs	r1, #8
 80302c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80302ca:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80302ce:	60c3      	str	r3, [r0, #12]
 80302d0:	e7bd      	b.n	803024e <_free_r+0x62>
 80302d2:	2200      	movs	r2, #0
 80302d4:	e7d0      	b.n	8030278 <_free_r+0x8c>
 80302d6:	2201      	movs	r2, #1
 80302d8:	e7ce      	b.n	8030278 <_free_r+0x8c>
 80302da:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80302de:	60ce      	str	r6, [r1, #12]
 80302e0:	60b1      	str	r1, [r6, #8]
 80302e2:	e7da      	b.n	803029a <_free_r+0xae>
 80302e4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80302e8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80302ec:	d214      	bcs.n	8030318 <_free_r+0x12c>
 80302ee:	0982      	lsrs	r2, r0, #6
 80302f0:	3238      	adds	r2, #56	@ 0x38
 80302f2:	1c51      	adds	r1, r2, #1
 80302f4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80302f8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80302fc:	428e      	cmp	r6, r1
 80302fe:	d125      	bne.n	803034c <_free_r+0x160>
 8030300:	2001      	movs	r0, #1
 8030302:	1092      	asrs	r2, r2, #2
 8030304:	fa00 f202 	lsl.w	r2, r0, r2
 8030308:	6868      	ldr	r0, [r5, #4]
 803030a:	4302      	orrs	r2, r0
 803030c:	606a      	str	r2, [r5, #4]
 803030e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8030312:	60b3      	str	r3, [r6, #8]
 8030314:	60cb      	str	r3, [r1, #12]
 8030316:	e79a      	b.n	803024e <_free_r+0x62>
 8030318:	2a14      	cmp	r2, #20
 803031a:	d801      	bhi.n	8030320 <_free_r+0x134>
 803031c:	325b      	adds	r2, #91	@ 0x5b
 803031e:	e7e8      	b.n	80302f2 <_free_r+0x106>
 8030320:	2a54      	cmp	r2, #84	@ 0x54
 8030322:	d802      	bhi.n	803032a <_free_r+0x13e>
 8030324:	0b02      	lsrs	r2, r0, #12
 8030326:	326e      	adds	r2, #110	@ 0x6e
 8030328:	e7e3      	b.n	80302f2 <_free_r+0x106>
 803032a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 803032e:	d802      	bhi.n	8030336 <_free_r+0x14a>
 8030330:	0bc2      	lsrs	r2, r0, #15
 8030332:	3277      	adds	r2, #119	@ 0x77
 8030334:	e7dd      	b.n	80302f2 <_free_r+0x106>
 8030336:	f240 5154 	movw	r1, #1364	@ 0x554
 803033a:	428a      	cmp	r2, r1
 803033c:	bf9a      	itte	ls
 803033e:	0c82      	lsrls	r2, r0, #18
 8030340:	327c      	addls	r2, #124	@ 0x7c
 8030342:	227e      	movhi	r2, #126	@ 0x7e
 8030344:	e7d5      	b.n	80302f2 <_free_r+0x106>
 8030346:	6889      	ldr	r1, [r1, #8]
 8030348:	428e      	cmp	r6, r1
 803034a:	d004      	beq.n	8030356 <_free_r+0x16a>
 803034c:	684a      	ldr	r2, [r1, #4]
 803034e:	f022 0203 	bic.w	r2, r2, #3
 8030352:	4282      	cmp	r2, r0
 8030354:	d8f7      	bhi.n	8030346 <_free_r+0x15a>
 8030356:	68ce      	ldr	r6, [r1, #12]
 8030358:	e7d9      	b.n	803030e <_free_r+0x122>
 803035a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803035c:	2000040c 	.word	0x2000040c
 8030360:	20000408 	.word	0x20000408
 8030364:	2001a144 	.word	0x2001a144
 8030368:	20000414 	.word	0x20000414

0803036c <_findenv_r>:
 803036c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030370:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80303e0 <_findenv_r+0x74>
 8030374:	4606      	mov	r6, r0
 8030376:	4689      	mov	r9, r1
 8030378:	4617      	mov	r7, r2
 803037a:	f006 fb89 	bl	8036a90 <__env_lock>
 803037e:	f8da 4000 	ldr.w	r4, [sl]
 8030382:	b134      	cbz	r4, 8030392 <_findenv_r+0x26>
 8030384:	464b      	mov	r3, r9
 8030386:	4698      	mov	r8, r3
 8030388:	f813 2b01 	ldrb.w	r2, [r3], #1
 803038c:	b13a      	cbz	r2, 803039e <_findenv_r+0x32>
 803038e:	2a3d      	cmp	r2, #61	@ 0x3d
 8030390:	d1f9      	bne.n	8030386 <_findenv_r+0x1a>
 8030392:	4630      	mov	r0, r6
 8030394:	f006 fb82 	bl	8036a9c <__env_unlock>
 8030398:	2000      	movs	r0, #0
 803039a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803039e:	eba8 0809 	sub.w	r8, r8, r9
 80303a2:	46a3      	mov	fp, r4
 80303a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80303a8:	2800      	cmp	r0, #0
 80303aa:	d0f2      	beq.n	8030392 <_findenv_r+0x26>
 80303ac:	4642      	mov	r2, r8
 80303ae:	4649      	mov	r1, r9
 80303b0:	f7fd fae3 	bl	802d97a <strncmp>
 80303b4:	2800      	cmp	r0, #0
 80303b6:	d1f4      	bne.n	80303a2 <_findenv_r+0x36>
 80303b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80303bc:	eb03 0508 	add.w	r5, r3, r8
 80303c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80303c4:	2b3d      	cmp	r3, #61	@ 0x3d
 80303c6:	d1ec      	bne.n	80303a2 <_findenv_r+0x36>
 80303c8:	f8da 3000 	ldr.w	r3, [sl]
 80303cc:	ebab 0303 	sub.w	r3, fp, r3
 80303d0:	109b      	asrs	r3, r3, #2
 80303d2:	4630      	mov	r0, r6
 80303d4:	603b      	str	r3, [r7, #0]
 80303d6:	f006 fb61 	bl	8036a9c <__env_unlock>
 80303da:	1c68      	adds	r0, r5, #1
 80303dc:	e7dd      	b.n	803039a <_findenv_r+0x2e>
 80303de:	bf00      	nop
 80303e0:	20000014 	.word	0x20000014

080303e4 <_getenv_r>:
 80303e4:	b507      	push	{r0, r1, r2, lr}
 80303e6:	aa01      	add	r2, sp, #4
 80303e8:	f7ff ffc0 	bl	803036c <_findenv_r>
 80303ec:	b003      	add	sp, #12
 80303ee:	f85d fb04 	ldr.w	pc, [sp], #4

080303f2 <labs>:
 80303f2:	2800      	cmp	r0, #0
 80303f4:	bfb8      	it	lt
 80303f6:	4240      	neglt	r0, r0
 80303f8:	4770      	bx	lr
	...

080303fc <malloc>:
 80303fc:	4b02      	ldr	r3, [pc, #8]	@ (8030408 <malloc+0xc>)
 80303fe:	4601      	mov	r1, r0
 8030400:	6818      	ldr	r0, [r3, #0]
 8030402:	f000 b80b 	b.w	803041c <_malloc_r>
 8030406:	bf00      	nop
 8030408:	200002d8 	.word	0x200002d8

0803040c <free>:
 803040c:	4b02      	ldr	r3, [pc, #8]	@ (8030418 <free+0xc>)
 803040e:	4601      	mov	r1, r0
 8030410:	6818      	ldr	r0, [r3, #0]
 8030412:	f7ff beeb 	b.w	80301ec <_free_r>
 8030416:	bf00      	nop
 8030418:	200002d8 	.word	0x200002d8

0803041c <_malloc_r>:
 803041c:	f101 030b 	add.w	r3, r1, #11
 8030420:	2b16      	cmp	r3, #22
 8030422:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030426:	4605      	mov	r5, r0
 8030428:	d906      	bls.n	8030438 <_malloc_r+0x1c>
 803042a:	f033 0707 	bics.w	r7, r3, #7
 803042e:	d504      	bpl.n	803043a <_malloc_r+0x1e>
 8030430:	230c      	movs	r3, #12
 8030432:	602b      	str	r3, [r5, #0]
 8030434:	2400      	movs	r4, #0
 8030436:	e1a3      	b.n	8030780 <_malloc_r+0x364>
 8030438:	2710      	movs	r7, #16
 803043a:	42b9      	cmp	r1, r7
 803043c:	d8f8      	bhi.n	8030430 <_malloc_r+0x14>
 803043e:	4628      	mov	r0, r5
 8030440:	f004 faf6 	bl	8034a30 <__malloc_lock>
 8030444:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8030448:	4eaf      	ldr	r6, [pc, #700]	@ (8030708 <_malloc_r+0x2ec>)
 803044a:	d237      	bcs.n	80304bc <_malloc_r+0xa0>
 803044c:	f107 0208 	add.w	r2, r7, #8
 8030450:	4432      	add	r2, r6
 8030452:	f1a2 0108 	sub.w	r1, r2, #8
 8030456:	6854      	ldr	r4, [r2, #4]
 8030458:	428c      	cmp	r4, r1
 803045a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 803045e:	d102      	bne.n	8030466 <_malloc_r+0x4a>
 8030460:	68d4      	ldr	r4, [r2, #12]
 8030462:	42a2      	cmp	r2, r4
 8030464:	d010      	beq.n	8030488 <_malloc_r+0x6c>
 8030466:	6863      	ldr	r3, [r4, #4]
 8030468:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 803046c:	f023 0303 	bic.w	r3, r3, #3
 8030470:	60ca      	str	r2, [r1, #12]
 8030472:	4423      	add	r3, r4
 8030474:	6091      	str	r1, [r2, #8]
 8030476:	685a      	ldr	r2, [r3, #4]
 8030478:	f042 0201 	orr.w	r2, r2, #1
 803047c:	605a      	str	r2, [r3, #4]
 803047e:	4628      	mov	r0, r5
 8030480:	f004 fadc 	bl	8034a3c <__malloc_unlock>
 8030484:	3408      	adds	r4, #8
 8030486:	e17b      	b.n	8030780 <_malloc_r+0x364>
 8030488:	3302      	adds	r3, #2
 803048a:	6934      	ldr	r4, [r6, #16]
 803048c:	499f      	ldr	r1, [pc, #636]	@ (803070c <_malloc_r+0x2f0>)
 803048e:	428c      	cmp	r4, r1
 8030490:	d077      	beq.n	8030582 <_malloc_r+0x166>
 8030492:	6862      	ldr	r2, [r4, #4]
 8030494:	f022 0c03 	bic.w	ip, r2, #3
 8030498:	ebac 0007 	sub.w	r0, ip, r7
 803049c:	280f      	cmp	r0, #15
 803049e:	dd48      	ble.n	8030532 <_malloc_r+0x116>
 80304a0:	19e2      	adds	r2, r4, r7
 80304a2:	f040 0301 	orr.w	r3, r0, #1
 80304a6:	f047 0701 	orr.w	r7, r7, #1
 80304aa:	6067      	str	r7, [r4, #4]
 80304ac:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80304b0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80304b4:	6053      	str	r3, [r2, #4]
 80304b6:	f844 000c 	str.w	r0, [r4, ip]
 80304ba:	e7e0      	b.n	803047e <_malloc_r+0x62>
 80304bc:	0a7b      	lsrs	r3, r7, #9
 80304be:	d02a      	beq.n	8030516 <_malloc_r+0xfa>
 80304c0:	2b04      	cmp	r3, #4
 80304c2:	d812      	bhi.n	80304ea <_malloc_r+0xce>
 80304c4:	09bb      	lsrs	r3, r7, #6
 80304c6:	3338      	adds	r3, #56	@ 0x38
 80304c8:	1c5a      	adds	r2, r3, #1
 80304ca:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80304ce:	f1a2 0c08 	sub.w	ip, r2, #8
 80304d2:	6854      	ldr	r4, [r2, #4]
 80304d4:	4564      	cmp	r4, ip
 80304d6:	d006      	beq.n	80304e6 <_malloc_r+0xca>
 80304d8:	6862      	ldr	r2, [r4, #4]
 80304da:	f022 0203 	bic.w	r2, r2, #3
 80304de:	1bd0      	subs	r0, r2, r7
 80304e0:	280f      	cmp	r0, #15
 80304e2:	dd1c      	ble.n	803051e <_malloc_r+0x102>
 80304e4:	3b01      	subs	r3, #1
 80304e6:	3301      	adds	r3, #1
 80304e8:	e7cf      	b.n	803048a <_malloc_r+0x6e>
 80304ea:	2b14      	cmp	r3, #20
 80304ec:	d801      	bhi.n	80304f2 <_malloc_r+0xd6>
 80304ee:	335b      	adds	r3, #91	@ 0x5b
 80304f0:	e7ea      	b.n	80304c8 <_malloc_r+0xac>
 80304f2:	2b54      	cmp	r3, #84	@ 0x54
 80304f4:	d802      	bhi.n	80304fc <_malloc_r+0xe0>
 80304f6:	0b3b      	lsrs	r3, r7, #12
 80304f8:	336e      	adds	r3, #110	@ 0x6e
 80304fa:	e7e5      	b.n	80304c8 <_malloc_r+0xac>
 80304fc:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8030500:	d802      	bhi.n	8030508 <_malloc_r+0xec>
 8030502:	0bfb      	lsrs	r3, r7, #15
 8030504:	3377      	adds	r3, #119	@ 0x77
 8030506:	e7df      	b.n	80304c8 <_malloc_r+0xac>
 8030508:	f240 5254 	movw	r2, #1364	@ 0x554
 803050c:	4293      	cmp	r3, r2
 803050e:	d804      	bhi.n	803051a <_malloc_r+0xfe>
 8030510:	0cbb      	lsrs	r3, r7, #18
 8030512:	337c      	adds	r3, #124	@ 0x7c
 8030514:	e7d8      	b.n	80304c8 <_malloc_r+0xac>
 8030516:	233f      	movs	r3, #63	@ 0x3f
 8030518:	e7d6      	b.n	80304c8 <_malloc_r+0xac>
 803051a:	237e      	movs	r3, #126	@ 0x7e
 803051c:	e7d4      	b.n	80304c8 <_malloc_r+0xac>
 803051e:	2800      	cmp	r0, #0
 8030520:	68e1      	ldr	r1, [r4, #12]
 8030522:	db04      	blt.n	803052e <_malloc_r+0x112>
 8030524:	68a3      	ldr	r3, [r4, #8]
 8030526:	60d9      	str	r1, [r3, #12]
 8030528:	608b      	str	r3, [r1, #8]
 803052a:	18a3      	adds	r3, r4, r2
 803052c:	e7a3      	b.n	8030476 <_malloc_r+0x5a>
 803052e:	460c      	mov	r4, r1
 8030530:	e7d0      	b.n	80304d4 <_malloc_r+0xb8>
 8030532:	2800      	cmp	r0, #0
 8030534:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8030538:	db07      	blt.n	803054a <_malloc_r+0x12e>
 803053a:	44a4      	add	ip, r4
 803053c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8030540:	f043 0301 	orr.w	r3, r3, #1
 8030544:	f8cc 3004 	str.w	r3, [ip, #4]
 8030548:	e799      	b.n	803047e <_malloc_r+0x62>
 803054a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 803054e:	6870      	ldr	r0, [r6, #4]
 8030550:	f080 8095 	bcs.w	803067e <_malloc_r+0x262>
 8030554:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8030558:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 803055c:	f04f 0c01 	mov.w	ip, #1
 8030560:	3201      	adds	r2, #1
 8030562:	fa0c fc0e 	lsl.w	ip, ip, lr
 8030566:	ea4c 0000 	orr.w	r0, ip, r0
 803056a:	6070      	str	r0, [r6, #4]
 803056c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8030570:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8030574:	3808      	subs	r0, #8
 8030576:	e9c4 c002 	strd	ip, r0, [r4, #8]
 803057a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 803057e:	f8cc 400c 	str.w	r4, [ip, #12]
 8030582:	1098      	asrs	r0, r3, #2
 8030584:	2201      	movs	r2, #1
 8030586:	4082      	lsls	r2, r0
 8030588:	6870      	ldr	r0, [r6, #4]
 803058a:	4290      	cmp	r0, r2
 803058c:	d326      	bcc.n	80305dc <_malloc_r+0x1c0>
 803058e:	4210      	tst	r0, r2
 8030590:	d106      	bne.n	80305a0 <_malloc_r+0x184>
 8030592:	f023 0303 	bic.w	r3, r3, #3
 8030596:	0052      	lsls	r2, r2, #1
 8030598:	4210      	tst	r0, r2
 803059a:	f103 0304 	add.w	r3, r3, #4
 803059e:	d0fa      	beq.n	8030596 <_malloc_r+0x17a>
 80305a0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80305a4:	46c1      	mov	r9, r8
 80305a6:	469e      	mov	lr, r3
 80305a8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80305ac:	454c      	cmp	r4, r9
 80305ae:	f040 80b9 	bne.w	8030724 <_malloc_r+0x308>
 80305b2:	f10e 0e01 	add.w	lr, lr, #1
 80305b6:	f01e 0f03 	tst.w	lr, #3
 80305ba:	f109 0908 	add.w	r9, r9, #8
 80305be:	d1f3      	bne.n	80305a8 <_malloc_r+0x18c>
 80305c0:	0798      	lsls	r0, r3, #30
 80305c2:	f040 80e3 	bne.w	803078c <_malloc_r+0x370>
 80305c6:	6873      	ldr	r3, [r6, #4]
 80305c8:	ea23 0302 	bic.w	r3, r3, r2
 80305cc:	6073      	str	r3, [r6, #4]
 80305ce:	6870      	ldr	r0, [r6, #4]
 80305d0:	0052      	lsls	r2, r2, #1
 80305d2:	4290      	cmp	r0, r2
 80305d4:	d302      	bcc.n	80305dc <_malloc_r+0x1c0>
 80305d6:	2a00      	cmp	r2, #0
 80305d8:	f040 80e5 	bne.w	80307a6 <_malloc_r+0x38a>
 80305dc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80305e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80305e4:	f023 0903 	bic.w	r9, r3, #3
 80305e8:	45b9      	cmp	r9, r7
 80305ea:	d304      	bcc.n	80305f6 <_malloc_r+0x1da>
 80305ec:	eba9 0207 	sub.w	r2, r9, r7
 80305f0:	2a0f      	cmp	r2, #15
 80305f2:	f300 8141 	bgt.w	8030878 <_malloc_r+0x45c>
 80305f6:	4b46      	ldr	r3, [pc, #280]	@ (8030710 <_malloc_r+0x2f4>)
 80305f8:	6819      	ldr	r1, [r3, #0]
 80305fa:	3110      	adds	r1, #16
 80305fc:	4439      	add	r1, r7
 80305fe:	2008      	movs	r0, #8
 8030600:	9101      	str	r1, [sp, #4]
 8030602:	f006 f851 	bl	80366a8 <sysconf>
 8030606:	4a43      	ldr	r2, [pc, #268]	@ (8030714 <_malloc_r+0x2f8>)
 8030608:	9901      	ldr	r1, [sp, #4]
 803060a:	6813      	ldr	r3, [r2, #0]
 803060c:	3301      	adds	r3, #1
 803060e:	bf1f      	itttt	ne
 8030610:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8030614:	1809      	addne	r1, r1, r0
 8030616:	4243      	negne	r3, r0
 8030618:	4019      	andne	r1, r3
 803061a:	4680      	mov	r8, r0
 803061c:	4628      	mov	r0, r5
 803061e:	9101      	str	r1, [sp, #4]
 8030620:	f006 f832 	bl	8036688 <_sbrk_r>
 8030624:	1c42      	adds	r2, r0, #1
 8030626:	eb0a 0b09 	add.w	fp, sl, r9
 803062a:	4604      	mov	r4, r0
 803062c:	f000 80f7 	beq.w	803081e <_malloc_r+0x402>
 8030630:	4583      	cmp	fp, r0
 8030632:	9901      	ldr	r1, [sp, #4]
 8030634:	4a37      	ldr	r2, [pc, #220]	@ (8030714 <_malloc_r+0x2f8>)
 8030636:	d902      	bls.n	803063e <_malloc_r+0x222>
 8030638:	45b2      	cmp	sl, r6
 803063a:	f040 80f0 	bne.w	803081e <_malloc_r+0x402>
 803063e:	4b36      	ldr	r3, [pc, #216]	@ (8030718 <_malloc_r+0x2fc>)
 8030640:	6818      	ldr	r0, [r3, #0]
 8030642:	45a3      	cmp	fp, r4
 8030644:	eb00 0e01 	add.w	lr, r0, r1
 8030648:	f8c3 e000 	str.w	lr, [r3]
 803064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8030650:	f040 80ab 	bne.w	80307aa <_malloc_r+0x38e>
 8030654:	ea1b 0f0c 	tst.w	fp, ip
 8030658:	f040 80a7 	bne.w	80307aa <_malloc_r+0x38e>
 803065c:	68b2      	ldr	r2, [r6, #8]
 803065e:	4449      	add	r1, r9
 8030660:	f041 0101 	orr.w	r1, r1, #1
 8030664:	6051      	str	r1, [r2, #4]
 8030666:	4a2d      	ldr	r2, [pc, #180]	@ (803071c <_malloc_r+0x300>)
 8030668:	681b      	ldr	r3, [r3, #0]
 803066a:	6811      	ldr	r1, [r2, #0]
 803066c:	428b      	cmp	r3, r1
 803066e:	bf88      	it	hi
 8030670:	6013      	strhi	r3, [r2, #0]
 8030672:	4a2b      	ldr	r2, [pc, #172]	@ (8030720 <_malloc_r+0x304>)
 8030674:	6811      	ldr	r1, [r2, #0]
 8030676:	428b      	cmp	r3, r1
 8030678:	bf88      	it	hi
 803067a:	6013      	strhi	r3, [r2, #0]
 803067c:	e0cf      	b.n	803081e <_malloc_r+0x402>
 803067e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8030682:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8030686:	d218      	bcs.n	80306ba <_malloc_r+0x29e>
 8030688:	ea4f 129c 	mov.w	r2, ip, lsr #6
 803068c:	3238      	adds	r2, #56	@ 0x38
 803068e:	f102 0e01 	add.w	lr, r2, #1
 8030692:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8030696:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 803069a:	45f0      	cmp	r8, lr
 803069c:	d12b      	bne.n	80306f6 <_malloc_r+0x2da>
 803069e:	1092      	asrs	r2, r2, #2
 80306a0:	f04f 0c01 	mov.w	ip, #1
 80306a4:	fa0c f202 	lsl.w	r2, ip, r2
 80306a8:	4302      	orrs	r2, r0
 80306aa:	6072      	str	r2, [r6, #4]
 80306ac:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80306b0:	f8c8 4008 	str.w	r4, [r8, #8]
 80306b4:	f8ce 400c 	str.w	r4, [lr, #12]
 80306b8:	e763      	b.n	8030582 <_malloc_r+0x166>
 80306ba:	2a14      	cmp	r2, #20
 80306bc:	d801      	bhi.n	80306c2 <_malloc_r+0x2a6>
 80306be:	325b      	adds	r2, #91	@ 0x5b
 80306c0:	e7e5      	b.n	803068e <_malloc_r+0x272>
 80306c2:	2a54      	cmp	r2, #84	@ 0x54
 80306c4:	d803      	bhi.n	80306ce <_malloc_r+0x2b2>
 80306c6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80306ca:	326e      	adds	r2, #110	@ 0x6e
 80306cc:	e7df      	b.n	803068e <_malloc_r+0x272>
 80306ce:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80306d2:	d803      	bhi.n	80306dc <_malloc_r+0x2c0>
 80306d4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80306d8:	3277      	adds	r2, #119	@ 0x77
 80306da:	e7d8      	b.n	803068e <_malloc_r+0x272>
 80306dc:	f240 5e54 	movw	lr, #1364	@ 0x554
 80306e0:	4572      	cmp	r2, lr
 80306e2:	bf9a      	itte	ls
 80306e4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80306e8:	327c      	addls	r2, #124	@ 0x7c
 80306ea:	227e      	movhi	r2, #126	@ 0x7e
 80306ec:	e7cf      	b.n	803068e <_malloc_r+0x272>
 80306ee:	f8de e008 	ldr.w	lr, [lr, #8]
 80306f2:	45f0      	cmp	r8, lr
 80306f4:	d005      	beq.n	8030702 <_malloc_r+0x2e6>
 80306f6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80306fa:	f022 0203 	bic.w	r2, r2, #3
 80306fe:	4562      	cmp	r2, ip
 8030700:	d8f5      	bhi.n	80306ee <_malloc_r+0x2d2>
 8030702:	f8de 800c 	ldr.w	r8, [lr, #12]
 8030706:	e7d1      	b.n	80306ac <_malloc_r+0x290>
 8030708:	2000040c 	.word	0x2000040c
 803070c:	20000414 	.word	0x20000414
 8030710:	2001a144 	.word	0x2001a144
 8030714:	20000404 	.word	0x20000404
 8030718:	2001a114 	.word	0x2001a114
 803071c:	2001a140 	.word	0x2001a140
 8030720:	2001a13c 	.word	0x2001a13c
 8030724:	6860      	ldr	r0, [r4, #4]
 8030726:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 803072a:	f020 0003 	bic.w	r0, r0, #3
 803072e:	eba0 0a07 	sub.w	sl, r0, r7
 8030732:	f1ba 0f0f 	cmp.w	sl, #15
 8030736:	dd12      	ble.n	803075e <_malloc_r+0x342>
 8030738:	68a3      	ldr	r3, [r4, #8]
 803073a:	19e2      	adds	r2, r4, r7
 803073c:	f047 0701 	orr.w	r7, r7, #1
 8030740:	6067      	str	r7, [r4, #4]
 8030742:	f8c3 c00c 	str.w	ip, [r3, #12]
 8030746:	f8cc 3008 	str.w	r3, [ip, #8]
 803074a:	f04a 0301 	orr.w	r3, sl, #1
 803074e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8030752:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8030756:	6053      	str	r3, [r2, #4]
 8030758:	f844 a000 	str.w	sl, [r4, r0]
 803075c:	e68f      	b.n	803047e <_malloc_r+0x62>
 803075e:	f1ba 0f00 	cmp.w	sl, #0
 8030762:	db11      	blt.n	8030788 <_malloc_r+0x36c>
 8030764:	4420      	add	r0, r4
 8030766:	6843      	ldr	r3, [r0, #4]
 8030768:	f043 0301 	orr.w	r3, r3, #1
 803076c:	6043      	str	r3, [r0, #4]
 803076e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8030772:	4628      	mov	r0, r5
 8030774:	f8c3 c00c 	str.w	ip, [r3, #12]
 8030778:	f8cc 3008 	str.w	r3, [ip, #8]
 803077c:	f004 f95e 	bl	8034a3c <__malloc_unlock>
 8030780:	4620      	mov	r0, r4
 8030782:	b003      	add	sp, #12
 8030784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030788:	4664      	mov	r4, ip
 803078a:	e70f      	b.n	80305ac <_malloc_r+0x190>
 803078c:	f858 0908 	ldr.w	r0, [r8], #-8
 8030790:	4540      	cmp	r0, r8
 8030792:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8030796:	f43f af13 	beq.w	80305c0 <_malloc_r+0x1a4>
 803079a:	e718      	b.n	80305ce <_malloc_r+0x1b2>
 803079c:	3304      	adds	r3, #4
 803079e:	0052      	lsls	r2, r2, #1
 80307a0:	4210      	tst	r0, r2
 80307a2:	d0fb      	beq.n	803079c <_malloc_r+0x380>
 80307a4:	e6fc      	b.n	80305a0 <_malloc_r+0x184>
 80307a6:	4673      	mov	r3, lr
 80307a8:	e7fa      	b.n	80307a0 <_malloc_r+0x384>
 80307aa:	6810      	ldr	r0, [r2, #0]
 80307ac:	3001      	adds	r0, #1
 80307ae:	bf1b      	ittet	ne
 80307b0:	eba4 0b0b 	subne.w	fp, r4, fp
 80307b4:	eb0b 020e 	addne.w	r2, fp, lr
 80307b8:	6014      	streq	r4, [r2, #0]
 80307ba:	601a      	strne	r2, [r3, #0]
 80307bc:	f014 0b07 	ands.w	fp, r4, #7
 80307c0:	bf1a      	itte	ne
 80307c2:	f1cb 0008 	rsbne	r0, fp, #8
 80307c6:	1824      	addne	r4, r4, r0
 80307c8:	4658      	moveq	r0, fp
 80307ca:	1862      	adds	r2, r4, r1
 80307cc:	ea02 010c 	and.w	r1, r2, ip
 80307d0:	4480      	add	r8, r0
 80307d2:	eba8 0801 	sub.w	r8, r8, r1
 80307d6:	ea08 080c 	and.w	r8, r8, ip
 80307da:	4641      	mov	r1, r8
 80307dc:	4628      	mov	r0, r5
 80307de:	9201      	str	r2, [sp, #4]
 80307e0:	f005 ff52 	bl	8036688 <_sbrk_r>
 80307e4:	1c43      	adds	r3, r0, #1
 80307e6:	9a01      	ldr	r2, [sp, #4]
 80307e8:	4b28      	ldr	r3, [pc, #160]	@ (803088c <_malloc_r+0x470>)
 80307ea:	d107      	bne.n	80307fc <_malloc_r+0x3e0>
 80307ec:	f1bb 0f00 	cmp.w	fp, #0
 80307f0:	d023      	beq.n	803083a <_malloc_r+0x41e>
 80307f2:	f1ab 0008 	sub.w	r0, fp, #8
 80307f6:	4410      	add	r0, r2
 80307f8:	f04f 0800 	mov.w	r8, #0
 80307fc:	681a      	ldr	r2, [r3, #0]
 80307fe:	60b4      	str	r4, [r6, #8]
 8030800:	1b00      	subs	r0, r0, r4
 8030802:	4440      	add	r0, r8
 8030804:	4442      	add	r2, r8
 8030806:	f040 0001 	orr.w	r0, r0, #1
 803080a:	45b2      	cmp	sl, r6
 803080c:	601a      	str	r2, [r3, #0]
 803080e:	6060      	str	r0, [r4, #4]
 8030810:	f43f af29 	beq.w	8030666 <_malloc_r+0x24a>
 8030814:	f1b9 0f0f 	cmp.w	r9, #15
 8030818:	d812      	bhi.n	8030840 <_malloc_r+0x424>
 803081a:	2301      	movs	r3, #1
 803081c:	6063      	str	r3, [r4, #4]
 803081e:	68b3      	ldr	r3, [r6, #8]
 8030820:	685b      	ldr	r3, [r3, #4]
 8030822:	f023 0303 	bic.w	r3, r3, #3
 8030826:	42bb      	cmp	r3, r7
 8030828:	eba3 0207 	sub.w	r2, r3, r7
 803082c:	d301      	bcc.n	8030832 <_malloc_r+0x416>
 803082e:	2a0f      	cmp	r2, #15
 8030830:	dc22      	bgt.n	8030878 <_malloc_r+0x45c>
 8030832:	4628      	mov	r0, r5
 8030834:	f004 f902 	bl	8034a3c <__malloc_unlock>
 8030838:	e5fc      	b.n	8030434 <_malloc_r+0x18>
 803083a:	4610      	mov	r0, r2
 803083c:	46d8      	mov	r8, fp
 803083e:	e7dd      	b.n	80307fc <_malloc_r+0x3e0>
 8030840:	f8da 2004 	ldr.w	r2, [sl, #4]
 8030844:	f1a9 090c 	sub.w	r9, r9, #12
 8030848:	f029 0907 	bic.w	r9, r9, #7
 803084c:	f002 0201 	and.w	r2, r2, #1
 8030850:	ea42 0209 	orr.w	r2, r2, r9
 8030854:	f8ca 2004 	str.w	r2, [sl, #4]
 8030858:	2105      	movs	r1, #5
 803085a:	eb0a 0209 	add.w	r2, sl, r9
 803085e:	f1b9 0f0f 	cmp.w	r9, #15
 8030862:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8030866:	f67f aefe 	bls.w	8030666 <_malloc_r+0x24a>
 803086a:	f10a 0108 	add.w	r1, sl, #8
 803086e:	4628      	mov	r0, r5
 8030870:	f7ff fcbc 	bl	80301ec <_free_r>
 8030874:	4b05      	ldr	r3, [pc, #20]	@ (803088c <_malloc_r+0x470>)
 8030876:	e6f6      	b.n	8030666 <_malloc_r+0x24a>
 8030878:	68b4      	ldr	r4, [r6, #8]
 803087a:	f047 0301 	orr.w	r3, r7, #1
 803087e:	4427      	add	r7, r4
 8030880:	f042 0201 	orr.w	r2, r2, #1
 8030884:	6063      	str	r3, [r4, #4]
 8030886:	60b7      	str	r7, [r6, #8]
 8030888:	607a      	str	r2, [r7, #4]
 803088a:	e5f8      	b.n	803047e <_malloc_r+0x62>
 803088c:	2001a114 	.word	0x2001a114

08030890 <__ascii_mbtowc>:
 8030890:	b082      	sub	sp, #8
 8030892:	b901      	cbnz	r1, 8030896 <__ascii_mbtowc+0x6>
 8030894:	a901      	add	r1, sp, #4
 8030896:	b142      	cbz	r2, 80308aa <__ascii_mbtowc+0x1a>
 8030898:	b14b      	cbz	r3, 80308ae <__ascii_mbtowc+0x1e>
 803089a:	7813      	ldrb	r3, [r2, #0]
 803089c:	600b      	str	r3, [r1, #0]
 803089e:	7812      	ldrb	r2, [r2, #0]
 80308a0:	1e10      	subs	r0, r2, #0
 80308a2:	bf18      	it	ne
 80308a4:	2001      	movne	r0, #1
 80308a6:	b002      	add	sp, #8
 80308a8:	4770      	bx	lr
 80308aa:	4610      	mov	r0, r2
 80308ac:	e7fb      	b.n	80308a6 <__ascii_mbtowc+0x16>
 80308ae:	f06f 0001 	mvn.w	r0, #1
 80308b2:	e7f8      	b.n	80308a6 <__ascii_mbtowc+0x16>

080308b4 <siscanf>:
 80308b4:	b40e      	push	{r1, r2, r3}
 80308b6:	b530      	push	{r4, r5, lr}
 80308b8:	b09c      	sub	sp, #112	@ 0x70
 80308ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 80308bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80308c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80308c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80308c8:	9002      	str	r0, [sp, #8]
 80308ca:	9006      	str	r0, [sp, #24]
 80308cc:	f7df fce8 	bl	80102a0 <strlen>
 80308d0:	4b0b      	ldr	r3, [pc, #44]	@ (8030900 <siscanf+0x4c>)
 80308d2:	9003      	str	r0, [sp, #12]
 80308d4:	9007      	str	r0, [sp, #28]
 80308d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80308d8:	480a      	ldr	r0, [pc, #40]	@ (8030904 <siscanf+0x50>)
 80308da:	9401      	str	r4, [sp, #4]
 80308dc:	2300      	movs	r3, #0
 80308de:	930e      	str	r3, [sp, #56]	@ 0x38
 80308e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80308e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80308e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80308ea:	462a      	mov	r2, r5
 80308ec:	4623      	mov	r3, r4
 80308ee:	a902      	add	r1, sp, #8
 80308f0:	6800      	ldr	r0, [r0, #0]
 80308f2:	f000 fd99 	bl	8031428 <__ssvfiscanf_r>
 80308f6:	b01c      	add	sp, #112	@ 0x70
 80308f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80308fc:	b003      	add	sp, #12
 80308fe:	4770      	bx	lr
 8030900:	0802d243 	.word	0x0802d243
 8030904:	200002d8 	.word	0x200002d8

08030908 <sniprintf>:
 8030908:	b40c      	push	{r2, r3}
 803090a:	b530      	push	{r4, r5, lr}
 803090c:	4b17      	ldr	r3, [pc, #92]	@ (803096c <sniprintf+0x64>)
 803090e:	1e0c      	subs	r4, r1, #0
 8030910:	681d      	ldr	r5, [r3, #0]
 8030912:	b09d      	sub	sp, #116	@ 0x74
 8030914:	da08      	bge.n	8030928 <sniprintf+0x20>
 8030916:	238b      	movs	r3, #139	@ 0x8b
 8030918:	602b      	str	r3, [r5, #0]
 803091a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803091e:	b01d      	add	sp, #116	@ 0x74
 8030920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8030924:	b002      	add	sp, #8
 8030926:	4770      	bx	lr
 8030928:	f44f 7302 	mov.w	r3, #520	@ 0x208
 803092c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8030930:	bf14      	ite	ne
 8030932:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8030936:	4623      	moveq	r3, r4
 8030938:	9304      	str	r3, [sp, #16]
 803093a:	9307      	str	r3, [sp, #28]
 803093c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8030940:	9002      	str	r0, [sp, #8]
 8030942:	9006      	str	r0, [sp, #24]
 8030944:	f8ad 3016 	strh.w	r3, [sp, #22]
 8030948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 803094a:	ab21      	add	r3, sp, #132	@ 0x84
 803094c:	a902      	add	r1, sp, #8
 803094e:	4628      	mov	r0, r5
 8030950:	9301      	str	r3, [sp, #4]
 8030952:	f000 f88b 	bl	8030a6c <_svfiprintf_r>
 8030956:	1c43      	adds	r3, r0, #1
 8030958:	bfbc      	itt	lt
 803095a:	238b      	movlt	r3, #139	@ 0x8b
 803095c:	602b      	strlt	r3, [r5, #0]
 803095e:	2c00      	cmp	r4, #0
 8030960:	d0dd      	beq.n	803091e <sniprintf+0x16>
 8030962:	9b02      	ldr	r3, [sp, #8]
 8030964:	2200      	movs	r2, #0
 8030966:	701a      	strb	r2, [r3, #0]
 8030968:	e7d9      	b.n	803091e <sniprintf+0x16>
 803096a:	bf00      	nop
 803096c:	200002d8 	.word	0x200002d8

08030970 <__ssprint_r>:
 8030970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030974:	6893      	ldr	r3, [r2, #8]
 8030976:	f8d2 b000 	ldr.w	fp, [r2]
 803097a:	9001      	str	r0, [sp, #4]
 803097c:	460c      	mov	r4, r1
 803097e:	4617      	mov	r7, r2
 8030980:	2b00      	cmp	r3, #0
 8030982:	d157      	bne.n	8030a34 <__ssprint_r+0xc4>
 8030984:	2000      	movs	r0, #0
 8030986:	2300      	movs	r3, #0
 8030988:	607b      	str	r3, [r7, #4]
 803098a:	b003      	add	sp, #12
 803098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030990:	e9db a800 	ldrd	sl, r8, [fp]
 8030994:	f10b 0b08 	add.w	fp, fp, #8
 8030998:	68a6      	ldr	r6, [r4, #8]
 803099a:	6820      	ldr	r0, [r4, #0]
 803099c:	f1b8 0f00 	cmp.w	r8, #0
 80309a0:	d0f6      	beq.n	8030990 <__ssprint_r+0x20>
 80309a2:	45b0      	cmp	r8, r6
 80309a4:	d32e      	bcc.n	8030a04 <__ssprint_r+0x94>
 80309a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80309aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80309ae:	d029      	beq.n	8030a04 <__ssprint_r+0x94>
 80309b0:	6921      	ldr	r1, [r4, #16]
 80309b2:	6965      	ldr	r5, [r4, #20]
 80309b4:	eba0 0901 	sub.w	r9, r0, r1
 80309b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80309bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80309c0:	f109 0001 	add.w	r0, r9, #1
 80309c4:	106d      	asrs	r5, r5, #1
 80309c6:	4440      	add	r0, r8
 80309c8:	4285      	cmp	r5, r0
 80309ca:	bf38      	it	cc
 80309cc:	4605      	movcc	r5, r0
 80309ce:	0553      	lsls	r3, r2, #21
 80309d0:	d534      	bpl.n	8030a3c <__ssprint_r+0xcc>
 80309d2:	9801      	ldr	r0, [sp, #4]
 80309d4:	4629      	mov	r1, r5
 80309d6:	f7ff fd21 	bl	803041c <_malloc_r>
 80309da:	4606      	mov	r6, r0
 80309dc:	2800      	cmp	r0, #0
 80309de:	d038      	beq.n	8030a52 <__ssprint_r+0xe2>
 80309e0:	464a      	mov	r2, r9
 80309e2:	6921      	ldr	r1, [r4, #16]
 80309e4:	f7fe fcfa 	bl	802f3dc <memcpy>
 80309e8:	89a2      	ldrh	r2, [r4, #12]
 80309ea:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80309ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80309f2:	81a2      	strh	r2, [r4, #12]
 80309f4:	6126      	str	r6, [r4, #16]
 80309f6:	6165      	str	r5, [r4, #20]
 80309f8:	444e      	add	r6, r9
 80309fa:	eba5 0509 	sub.w	r5, r5, r9
 80309fe:	6026      	str	r6, [r4, #0]
 8030a00:	60a5      	str	r5, [r4, #8]
 8030a02:	4646      	mov	r6, r8
 8030a04:	4546      	cmp	r6, r8
 8030a06:	bf28      	it	cs
 8030a08:	4646      	movcs	r6, r8
 8030a0a:	4632      	mov	r2, r6
 8030a0c:	4651      	mov	r1, sl
 8030a0e:	6820      	ldr	r0, [r4, #0]
 8030a10:	f7fc ff64 	bl	802d8dc <memmove>
 8030a14:	68a2      	ldr	r2, [r4, #8]
 8030a16:	1b92      	subs	r2, r2, r6
 8030a18:	60a2      	str	r2, [r4, #8]
 8030a1a:	6822      	ldr	r2, [r4, #0]
 8030a1c:	4432      	add	r2, r6
 8030a1e:	6022      	str	r2, [r4, #0]
 8030a20:	68ba      	ldr	r2, [r7, #8]
 8030a22:	eba2 0308 	sub.w	r3, r2, r8
 8030a26:	44c2      	add	sl, r8
 8030a28:	60bb      	str	r3, [r7, #8]
 8030a2a:	2b00      	cmp	r3, #0
 8030a2c:	d0aa      	beq.n	8030984 <__ssprint_r+0x14>
 8030a2e:	f04f 0800 	mov.w	r8, #0
 8030a32:	e7b1      	b.n	8030998 <__ssprint_r+0x28>
 8030a34:	f04f 0a00 	mov.w	sl, #0
 8030a38:	46d0      	mov	r8, sl
 8030a3a:	e7ad      	b.n	8030998 <__ssprint_r+0x28>
 8030a3c:	9801      	ldr	r0, [sp, #4]
 8030a3e:	462a      	mov	r2, r5
 8030a40:	f004 fcfc 	bl	803543c <_realloc_r>
 8030a44:	4606      	mov	r6, r0
 8030a46:	2800      	cmp	r0, #0
 8030a48:	d1d4      	bne.n	80309f4 <__ssprint_r+0x84>
 8030a4a:	6921      	ldr	r1, [r4, #16]
 8030a4c:	9801      	ldr	r0, [sp, #4]
 8030a4e:	f7ff fbcd 	bl	80301ec <_free_r>
 8030a52:	9a01      	ldr	r2, [sp, #4]
 8030a54:	230c      	movs	r3, #12
 8030a56:	6013      	str	r3, [r2, #0]
 8030a58:	89a3      	ldrh	r3, [r4, #12]
 8030a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030a5e:	81a3      	strh	r3, [r4, #12]
 8030a60:	2300      	movs	r3, #0
 8030a62:	60bb      	str	r3, [r7, #8]
 8030a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030a68:	e78d      	b.n	8030986 <__ssprint_r+0x16>
	...

08030a6c <_svfiprintf_r>:
 8030a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030a70:	461d      	mov	r5, r3
 8030a72:	898b      	ldrh	r3, [r1, #12]
 8030a74:	b0bb      	sub	sp, #236	@ 0xec
 8030a76:	468b      	mov	fp, r1
 8030a78:	0619      	lsls	r1, r3, #24
 8030a7a:	9001      	str	r0, [sp, #4]
 8030a7c:	9202      	str	r2, [sp, #8]
 8030a7e:	d514      	bpl.n	8030aaa <_svfiprintf_r+0x3e>
 8030a80:	f8db 3010 	ldr.w	r3, [fp, #16]
 8030a84:	b98b      	cbnz	r3, 8030aaa <_svfiprintf_r+0x3e>
 8030a86:	2140      	movs	r1, #64	@ 0x40
 8030a88:	f7ff fcc8 	bl	803041c <_malloc_r>
 8030a8c:	f8cb 0000 	str.w	r0, [fp]
 8030a90:	f8cb 0010 	str.w	r0, [fp, #16]
 8030a94:	b930      	cbnz	r0, 8030aa4 <_svfiprintf_r+0x38>
 8030a96:	9a01      	ldr	r2, [sp, #4]
 8030a98:	230c      	movs	r3, #12
 8030a9a:	6013      	str	r3, [r2, #0]
 8030a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030aa0:	9304      	str	r3, [sp, #16]
 8030aa2:	e3df      	b.n	8031264 <_svfiprintf_r+0x7f8>
 8030aa4:	2340      	movs	r3, #64	@ 0x40
 8030aa6:	f8cb 3014 	str.w	r3, [fp, #20]
 8030aaa:	2300      	movs	r3, #0
 8030aac:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8030ab0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8030ab4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8030ab8:	ae11      	add	r6, sp, #68	@ 0x44
 8030aba:	960e      	str	r6, [sp, #56]	@ 0x38
 8030abc:	9304      	str	r3, [sp, #16]
 8030abe:	9b02      	ldr	r3, [sp, #8]
 8030ac0:	461c      	mov	r4, r3
 8030ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030ac6:	b10a      	cbz	r2, 8030acc <_svfiprintf_r+0x60>
 8030ac8:	2a25      	cmp	r2, #37	@ 0x25
 8030aca:	d1f9      	bne.n	8030ac0 <_svfiprintf_r+0x54>
 8030acc:	9a02      	ldr	r2, [sp, #8]
 8030ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030ad0:	1aa7      	subs	r7, r4, r2
 8030ad2:	d00c      	beq.n	8030aee <_svfiprintf_r+0x82>
 8030ad4:	443b      	add	r3, r7
 8030ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8030ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030ada:	3301      	adds	r3, #1
 8030adc:	2b07      	cmp	r3, #7
 8030ade:	e9c6 2700 	strd	r2, r7, [r6]
 8030ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030ae4:	dc76      	bgt.n	8030bd4 <_svfiprintf_r+0x168>
 8030ae6:	3608      	adds	r6, #8
 8030ae8:	9b04      	ldr	r3, [sp, #16]
 8030aea:	443b      	add	r3, r7
 8030aec:	9304      	str	r3, [sp, #16]
 8030aee:	7823      	ldrb	r3, [r4, #0]
 8030af0:	2b00      	cmp	r3, #0
 8030af2:	f000 83ce 	beq.w	8031292 <_svfiprintf_r+0x826>
 8030af6:	2300      	movs	r3, #0
 8030af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030afc:	3401      	adds	r4, #1
 8030afe:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8030b02:	9200      	str	r2, [sp, #0]
 8030b04:	9303      	str	r3, [sp, #12]
 8030b06:	4699      	mov	r9, r3
 8030b08:	4622      	mov	r2, r4
 8030b0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8030b0e:	9202      	str	r2, [sp, #8]
 8030b10:	f1a3 0220 	sub.w	r2, r3, #32
 8030b14:	2a5a      	cmp	r2, #90	@ 0x5a
 8030b16:	f200 8318 	bhi.w	803114a <_svfiprintf_r+0x6de>
 8030b1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8030b1e:	009a      	.short	0x009a
 8030b20:	03160316 	.word	0x03160316
 8030b24:	031600a2 	.word	0x031600a2
 8030b28:	03160316 	.word	0x03160316
 8030b2c:	03160082 	.word	0x03160082
 8030b30:	00a50316 	.word	0x00a50316
 8030b34:	031600af 	.word	0x031600af
 8030b38:	00b100ac 	.word	0x00b100ac
 8030b3c:	00cc0316 	.word	0x00cc0316
 8030b40:	00cf00cf 	.word	0x00cf00cf
 8030b44:	00cf00cf 	.word	0x00cf00cf
 8030b48:	00cf00cf 	.word	0x00cf00cf
 8030b4c:	00cf00cf 	.word	0x00cf00cf
 8030b50:	031600cf 	.word	0x031600cf
 8030b54:	03160316 	.word	0x03160316
 8030b58:	03160316 	.word	0x03160316
 8030b5c:	03160316 	.word	0x03160316
 8030b60:	03160316 	.word	0x03160316
 8030b64:	010600f9 	.word	0x010600f9
 8030b68:	03160316 	.word	0x03160316
 8030b6c:	03160316 	.word	0x03160316
 8030b70:	03160316 	.word	0x03160316
 8030b74:	03160316 	.word	0x03160316
 8030b78:	03160316 	.word	0x03160316
 8030b7c:	03160154 	.word	0x03160154
 8030b80:	03160316 	.word	0x03160316
 8030b84:	0316019b 	.word	0x0316019b
 8030b88:	0316027d 	.word	0x0316027d
 8030b8c:	029d0316 	.word	0x029d0316
 8030b90:	03160316 	.word	0x03160316
 8030b94:	03160316 	.word	0x03160316
 8030b98:	03160316 	.word	0x03160316
 8030b9c:	03160316 	.word	0x03160316
 8030ba0:	03160316 	.word	0x03160316
 8030ba4:	010800f9 	.word	0x010800f9
 8030ba8:	03160316 	.word	0x03160316
 8030bac:	00df0316 	.word	0x00df0316
 8030bb0:	00f30108 	.word	0x00f30108
 8030bb4:	00ec0316 	.word	0x00ec0316
 8030bb8:	01340316 	.word	0x01340316
 8030bbc:	018a0156 	.word	0x018a0156
 8030bc0:	031600f3 	.word	0x031600f3
 8030bc4:	0098019b 	.word	0x0098019b
 8030bc8:	0316027f 	.word	0x0316027f
 8030bcc:	00650316 	.word	0x00650316
 8030bd0:	00980316 	.word	0x00980316
 8030bd4:	9801      	ldr	r0, [sp, #4]
 8030bd6:	aa0e      	add	r2, sp, #56	@ 0x38
 8030bd8:	4659      	mov	r1, fp
 8030bda:	f7ff fec9 	bl	8030970 <__ssprint_r>
 8030bde:	2800      	cmp	r0, #0
 8030be0:	f040 833b 	bne.w	803125a <_svfiprintf_r+0x7ee>
 8030be4:	ae11      	add	r6, sp, #68	@ 0x44
 8030be6:	e77f      	b.n	8030ae8 <_svfiprintf_r+0x7c>
 8030be8:	4a99      	ldr	r2, [pc, #612]	@ (8030e50 <_svfiprintf_r+0x3e4>)
 8030bea:	9205      	str	r2, [sp, #20]
 8030bec:	f019 0220 	ands.w	r2, r9, #32
 8030bf0:	f000 8234 	beq.w	803105c <_svfiprintf_r+0x5f0>
 8030bf4:	3507      	adds	r5, #7
 8030bf6:	f025 0507 	bic.w	r5, r5, #7
 8030bfa:	462f      	mov	r7, r5
 8030bfc:	686d      	ldr	r5, [r5, #4]
 8030bfe:	f857 4b08 	ldr.w	r4, [r7], #8
 8030c02:	f019 0f01 	tst.w	r9, #1
 8030c06:	d009      	beq.n	8030c1c <_svfiprintf_r+0x1b0>
 8030c08:	ea54 0205 	orrs.w	r2, r4, r5
 8030c0c:	bf1f      	itttt	ne
 8030c0e:	2230      	movne	r2, #48	@ 0x30
 8030c10:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8030c14:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8030c18:	f049 0902 	orrne.w	r9, r9, #2
 8030c1c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8030c20:	e113      	b.n	8030e4a <_svfiprintf_r+0x3de>
 8030c22:	9801      	ldr	r0, [sp, #4]
 8030c24:	f7fe fb2c 	bl	802f280 <_localeconv_r>
 8030c28:	6843      	ldr	r3, [r0, #4]
 8030c2a:	9308      	str	r3, [sp, #32]
 8030c2c:	4618      	mov	r0, r3
 8030c2e:	f7df fb37 	bl	80102a0 <strlen>
 8030c32:	9007      	str	r0, [sp, #28]
 8030c34:	9801      	ldr	r0, [sp, #4]
 8030c36:	f7fe fb23 	bl	802f280 <_localeconv_r>
 8030c3a:	6883      	ldr	r3, [r0, #8]
 8030c3c:	9306      	str	r3, [sp, #24]
 8030c3e:	9b07      	ldr	r3, [sp, #28]
 8030c40:	b12b      	cbz	r3, 8030c4e <_svfiprintf_r+0x1e2>
 8030c42:	9b06      	ldr	r3, [sp, #24]
 8030c44:	b11b      	cbz	r3, 8030c4e <_svfiprintf_r+0x1e2>
 8030c46:	781b      	ldrb	r3, [r3, #0]
 8030c48:	b10b      	cbz	r3, 8030c4e <_svfiprintf_r+0x1e2>
 8030c4a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 8030c4e:	9c02      	ldr	r4, [sp, #8]
 8030c50:	e75a      	b.n	8030b08 <_svfiprintf_r+0x9c>
 8030c52:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8030c56:	2b00      	cmp	r3, #0
 8030c58:	d1f9      	bne.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c5a:	2320      	movs	r3, #32
 8030c5c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8030c60:	e7f5      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c62:	f049 0901 	orr.w	r9, r9, #1
 8030c66:	e7f2      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8030c6c:	9303      	str	r3, [sp, #12]
 8030c6e:	2b00      	cmp	r3, #0
 8030c70:	daed      	bge.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c72:	425b      	negs	r3, r3
 8030c74:	9303      	str	r3, [sp, #12]
 8030c76:	f049 0904 	orr.w	r9, r9, #4
 8030c7a:	e7e8      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c7c:	232b      	movs	r3, #43	@ 0x2b
 8030c7e:	e7ed      	b.n	8030c5c <_svfiprintf_r+0x1f0>
 8030c80:	9a02      	ldr	r2, [sp, #8]
 8030c82:	f812 3b01 	ldrb.w	r3, [r2], #1
 8030c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8030c88:	d111      	bne.n	8030cae <_svfiprintf_r+0x242>
 8030c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8030c8e:	9202      	str	r2, [sp, #8]
 8030c90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8030c94:	9300      	str	r3, [sp, #0]
 8030c96:	e7da      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030c98:	9b00      	ldr	r3, [sp, #0]
 8030c9a:	fb00 1303 	mla	r3, r0, r3, r1
 8030c9e:	9300      	str	r3, [sp, #0]
 8030ca0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8030ca4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8030ca8:	2909      	cmp	r1, #9
 8030caa:	d9f5      	bls.n	8030c98 <_svfiprintf_r+0x22c>
 8030cac:	e72f      	b.n	8030b0e <_svfiprintf_r+0xa2>
 8030cae:	2100      	movs	r1, #0
 8030cb0:	9100      	str	r1, [sp, #0]
 8030cb2:	200a      	movs	r0, #10
 8030cb4:	e7f6      	b.n	8030ca4 <_svfiprintf_r+0x238>
 8030cb6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8030cba:	e7c8      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030cbc:	2100      	movs	r1, #0
 8030cbe:	9a02      	ldr	r2, [sp, #8]
 8030cc0:	9103      	str	r1, [sp, #12]
 8030cc2:	200a      	movs	r0, #10
 8030cc4:	9903      	ldr	r1, [sp, #12]
 8030cc6:	3b30      	subs	r3, #48	@ 0x30
 8030cc8:	fb00 3301 	mla	r3, r0, r1, r3
 8030ccc:	9303      	str	r3, [sp, #12]
 8030cce:	f812 3b01 	ldrb.w	r3, [r2], #1
 8030cd2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8030cd6:	2909      	cmp	r1, #9
 8030cd8:	d9f4      	bls.n	8030cc4 <_svfiprintf_r+0x258>
 8030cda:	e718      	b.n	8030b0e <_svfiprintf_r+0xa2>
 8030cdc:	9b02      	ldr	r3, [sp, #8]
 8030cde:	781b      	ldrb	r3, [r3, #0]
 8030ce0:	2b68      	cmp	r3, #104	@ 0x68
 8030ce2:	bf01      	itttt	eq
 8030ce4:	9b02      	ldreq	r3, [sp, #8]
 8030ce6:	3301      	addeq	r3, #1
 8030ce8:	9302      	streq	r3, [sp, #8]
 8030cea:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8030cee:	bf18      	it	ne
 8030cf0:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8030cf4:	e7ab      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030cf6:	9b02      	ldr	r3, [sp, #8]
 8030cf8:	781b      	ldrb	r3, [r3, #0]
 8030cfa:	2b6c      	cmp	r3, #108	@ 0x6c
 8030cfc:	d105      	bne.n	8030d0a <_svfiprintf_r+0x29e>
 8030cfe:	9b02      	ldr	r3, [sp, #8]
 8030d00:	3301      	adds	r3, #1
 8030d02:	9302      	str	r3, [sp, #8]
 8030d04:	f049 0920 	orr.w	r9, r9, #32
 8030d08:	e7a1      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030d0a:	f049 0910 	orr.w	r9, r9, #16
 8030d0e:	e79e      	b.n	8030c4e <_svfiprintf_r+0x1e2>
 8030d10:	462f      	mov	r7, r5
 8030d12:	2400      	movs	r4, #0
 8030d14:	f857 3b04 	ldr.w	r3, [r7], #4
 8030d18:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8030d1c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8030d20:	2301      	movs	r3, #1
 8030d22:	9300      	str	r3, [sp, #0]
 8030d24:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8030d28:	e0aa      	b.n	8030e80 <_svfiprintf_r+0x414>
 8030d2a:	f049 0910 	orr.w	r9, r9, #16
 8030d2e:	f019 0f20 	tst.w	r9, #32
 8030d32:	d011      	beq.n	8030d58 <_svfiprintf_r+0x2ec>
 8030d34:	3507      	adds	r5, #7
 8030d36:	f025 0507 	bic.w	r5, r5, #7
 8030d3a:	462f      	mov	r7, r5
 8030d3c:	686d      	ldr	r5, [r5, #4]
 8030d3e:	f857 4b08 	ldr.w	r4, [r7], #8
 8030d42:	2d00      	cmp	r5, #0
 8030d44:	da06      	bge.n	8030d54 <_svfiprintf_r+0x2e8>
 8030d46:	4264      	negs	r4, r4
 8030d48:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030d4c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8030d50:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8030d54:	2301      	movs	r3, #1
 8030d56:	e048      	b.n	8030dea <_svfiprintf_r+0x37e>
 8030d58:	462f      	mov	r7, r5
 8030d5a:	f019 0f10 	tst.w	r9, #16
 8030d5e:	f857 5b04 	ldr.w	r5, [r7], #4
 8030d62:	d002      	beq.n	8030d6a <_svfiprintf_r+0x2fe>
 8030d64:	462c      	mov	r4, r5
 8030d66:	17ed      	asrs	r5, r5, #31
 8030d68:	e7eb      	b.n	8030d42 <_svfiprintf_r+0x2d6>
 8030d6a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8030d6e:	d003      	beq.n	8030d78 <_svfiprintf_r+0x30c>
 8030d70:	b22c      	sxth	r4, r5
 8030d72:	f345 35c0 	sbfx	r5, r5, #15, #1
 8030d76:	e7e4      	b.n	8030d42 <_svfiprintf_r+0x2d6>
 8030d78:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8030d7c:	d0f2      	beq.n	8030d64 <_svfiprintf_r+0x2f8>
 8030d7e:	b26c      	sxtb	r4, r5
 8030d80:	f345 15c0 	sbfx	r5, r5, #7, #1
 8030d84:	e7dd      	b.n	8030d42 <_svfiprintf_r+0x2d6>
 8030d86:	f019 0f20 	tst.w	r9, #32
 8030d8a:	d007      	beq.n	8030d9c <_svfiprintf_r+0x330>
 8030d8c:	9a04      	ldr	r2, [sp, #16]
 8030d8e:	682b      	ldr	r3, [r5, #0]
 8030d90:	9904      	ldr	r1, [sp, #16]
 8030d92:	17d2      	asrs	r2, r2, #31
 8030d94:	e9c3 1200 	strd	r1, r2, [r3]
 8030d98:	3504      	adds	r5, #4
 8030d9a:	e690      	b.n	8030abe <_svfiprintf_r+0x52>
 8030d9c:	f019 0f10 	tst.w	r9, #16
 8030da0:	d003      	beq.n	8030daa <_svfiprintf_r+0x33e>
 8030da2:	682b      	ldr	r3, [r5, #0]
 8030da4:	9a04      	ldr	r2, [sp, #16]
 8030da6:	601a      	str	r2, [r3, #0]
 8030da8:	e7f6      	b.n	8030d98 <_svfiprintf_r+0x32c>
 8030daa:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8030dae:	d003      	beq.n	8030db8 <_svfiprintf_r+0x34c>
 8030db0:	682b      	ldr	r3, [r5, #0]
 8030db2:	9a04      	ldr	r2, [sp, #16]
 8030db4:	801a      	strh	r2, [r3, #0]
 8030db6:	e7ef      	b.n	8030d98 <_svfiprintf_r+0x32c>
 8030db8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8030dbc:	d0f1      	beq.n	8030da2 <_svfiprintf_r+0x336>
 8030dbe:	682b      	ldr	r3, [r5, #0]
 8030dc0:	9a04      	ldr	r2, [sp, #16]
 8030dc2:	701a      	strb	r2, [r3, #0]
 8030dc4:	e7e8      	b.n	8030d98 <_svfiprintf_r+0x32c>
 8030dc6:	f049 0910 	orr.w	r9, r9, #16
 8030dca:	f019 0320 	ands.w	r3, r9, #32
 8030dce:	d01e      	beq.n	8030e0e <_svfiprintf_r+0x3a2>
 8030dd0:	3507      	adds	r5, #7
 8030dd2:	f025 0507 	bic.w	r5, r5, #7
 8030dd6:	462f      	mov	r7, r5
 8030dd8:	686d      	ldr	r5, [r5, #4]
 8030dda:	f857 4b08 	ldr.w	r4, [r7], #8
 8030dde:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8030de2:	2300      	movs	r3, #0
 8030de4:	2200      	movs	r2, #0
 8030de6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8030dea:	9a00      	ldr	r2, [sp, #0]
 8030dec:	3201      	adds	r2, #1
 8030dee:	f000 8259 	beq.w	80312a4 <_svfiprintf_r+0x838>
 8030df2:	ea54 0205 	orrs.w	r2, r4, r5
 8030df6:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8030dfa:	f040 8258 	bne.w	80312ae <_svfiprintf_r+0x842>
 8030dfe:	9a00      	ldr	r2, [sp, #0]
 8030e00:	2a00      	cmp	r2, #0
 8030e02:	f000 8199 	beq.w	8031138 <_svfiprintf_r+0x6cc>
 8030e06:	2b01      	cmp	r3, #1
 8030e08:	f040 8254 	bne.w	80312b4 <_svfiprintf_r+0x848>
 8030e0c:	e13d      	b.n	803108a <_svfiprintf_r+0x61e>
 8030e0e:	462f      	mov	r7, r5
 8030e10:	f019 0510 	ands.w	r5, r9, #16
 8030e14:	f857 4b04 	ldr.w	r4, [r7], #4
 8030e18:	d001      	beq.n	8030e1e <_svfiprintf_r+0x3b2>
 8030e1a:	461d      	mov	r5, r3
 8030e1c:	e7df      	b.n	8030dde <_svfiprintf_r+0x372>
 8030e1e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8030e22:	d001      	beq.n	8030e28 <_svfiprintf_r+0x3bc>
 8030e24:	b2a4      	uxth	r4, r4
 8030e26:	e7da      	b.n	8030dde <_svfiprintf_r+0x372>
 8030e28:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8030e2c:	d0d7      	beq.n	8030dde <_svfiprintf_r+0x372>
 8030e2e:	b2e4      	uxtb	r4, r4
 8030e30:	e7f3      	b.n	8030e1a <_svfiprintf_r+0x3ae>
 8030e32:	462f      	mov	r7, r5
 8030e34:	f647 0330 	movw	r3, #30768	@ 0x7830
 8030e38:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8030e3c:	f857 4b04 	ldr.w	r4, [r7], #4
 8030e40:	4b03      	ldr	r3, [pc, #12]	@ (8030e50 <_svfiprintf_r+0x3e4>)
 8030e42:	9305      	str	r3, [sp, #20]
 8030e44:	2500      	movs	r5, #0
 8030e46:	f049 0902 	orr.w	r9, r9, #2
 8030e4a:	2302      	movs	r3, #2
 8030e4c:	e7ca      	b.n	8030de4 <_svfiprintf_r+0x378>
 8030e4e:	bf00      	nop
 8030e50:	0803d2bb 	.word	0x0803d2bb
 8030e54:	9b00      	ldr	r3, [sp, #0]
 8030e56:	462f      	mov	r7, r5
 8030e58:	1c5a      	adds	r2, r3, #1
 8030e5a:	f04f 0500 	mov.w	r5, #0
 8030e5e:	f857 8b04 	ldr.w	r8, [r7], #4
 8030e62:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8030e66:	f000 80d2 	beq.w	803100e <_svfiprintf_r+0x5a2>
 8030e6a:	461a      	mov	r2, r3
 8030e6c:	4629      	mov	r1, r5
 8030e6e:	4640      	mov	r0, r8
 8030e70:	f7df f9c6 	bl	8010200 <memchr>
 8030e74:	4604      	mov	r4, r0
 8030e76:	b118      	cbz	r0, 8030e80 <_svfiprintf_r+0x414>
 8030e78:	eba0 0308 	sub.w	r3, r0, r8
 8030e7c:	9300      	str	r3, [sp, #0]
 8030e7e:	462c      	mov	r4, r5
 8030e80:	9d00      	ldr	r5, [sp, #0]
 8030e82:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8030e86:	42a5      	cmp	r5, r4
 8030e88:	bfb8      	it	lt
 8030e8a:	4625      	movlt	r5, r4
 8030e8c:	b103      	cbz	r3, 8030e90 <_svfiprintf_r+0x424>
 8030e8e:	3501      	adds	r5, #1
 8030e90:	f019 0302 	ands.w	r3, r9, #2
 8030e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8030e96:	bf18      	it	ne
 8030e98:	3502      	addne	r5, #2
 8030e9a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8030e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8030ea0:	d123      	bne.n	8030eea <_svfiprintf_r+0x47e>
 8030ea2:	9b03      	ldr	r3, [sp, #12]
 8030ea4:	eba3 0a05 	sub.w	sl, r3, r5
 8030ea8:	f1ba 0f00 	cmp.w	sl, #0
 8030eac:	dd1d      	ble.n	8030eea <_svfiprintf_r+0x47e>
 8030eae:	4bac      	ldr	r3, [pc, #688]	@ (8031160 <_svfiprintf_r+0x6f4>)
 8030eb0:	6033      	str	r3, [r6, #0]
 8030eb2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8030eb6:	f1ba 0f10 	cmp.w	sl, #16
 8030eba:	f102 0201 	add.w	r2, r2, #1
 8030ebe:	f106 0008 	add.w	r0, r6, #8
 8030ec2:	f300 8153 	bgt.w	803116c <_svfiprintf_r+0x700>
 8030ec6:	eb0c 010a 	add.w	r1, ip, sl
 8030eca:	2a07      	cmp	r2, #7
 8030ecc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030ed0:	f8c6 a004 	str.w	sl, [r6, #4]
 8030ed4:	f340 815e 	ble.w	8031194 <_svfiprintf_r+0x728>
 8030ed8:	9801      	ldr	r0, [sp, #4]
 8030eda:	aa0e      	add	r2, sp, #56	@ 0x38
 8030edc:	4659      	mov	r1, fp
 8030ede:	f7ff fd47 	bl	8030970 <__ssprint_r>
 8030ee2:	2800      	cmp	r0, #0
 8030ee4:	f040 81b9 	bne.w	803125a <_svfiprintf_r+0x7ee>
 8030ee8:	ae11      	add	r6, sp, #68	@ 0x44
 8030eea:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8030eee:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030ef2:	b161      	cbz	r1, 8030f0e <_svfiprintf_r+0x4a2>
 8030ef4:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8030ef8:	3301      	adds	r3, #1
 8030efa:	6031      	str	r1, [r6, #0]
 8030efc:	2101      	movs	r1, #1
 8030efe:	440a      	add	r2, r1
 8030f00:	2b07      	cmp	r3, #7
 8030f02:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8030f06:	6071      	str	r1, [r6, #4]
 8030f08:	f300 8146 	bgt.w	8031198 <_svfiprintf_r+0x72c>
 8030f0c:	3608      	adds	r6, #8
 8030f0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8030f10:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030f14:	b159      	cbz	r1, 8030f2e <_svfiprintf_r+0x4c2>
 8030f16:	a90d      	add	r1, sp, #52	@ 0x34
 8030f18:	3301      	adds	r3, #1
 8030f1a:	6031      	str	r1, [r6, #0]
 8030f1c:	2102      	movs	r1, #2
 8030f1e:	440a      	add	r2, r1
 8030f20:	2b07      	cmp	r3, #7
 8030f22:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8030f26:	6071      	str	r1, [r6, #4]
 8030f28:	f300 813f 	bgt.w	80311aa <_svfiprintf_r+0x73e>
 8030f2c:	3608      	adds	r6, #8
 8030f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030f30:	2b80      	cmp	r3, #128	@ 0x80
 8030f32:	d123      	bne.n	8030f7c <_svfiprintf_r+0x510>
 8030f34:	9b03      	ldr	r3, [sp, #12]
 8030f36:	eba3 0a05 	sub.w	sl, r3, r5
 8030f3a:	f1ba 0f00 	cmp.w	sl, #0
 8030f3e:	dd1d      	ble.n	8030f7c <_svfiprintf_r+0x510>
 8030f40:	4b88      	ldr	r3, [pc, #544]	@ (8031164 <_svfiprintf_r+0x6f8>)
 8030f42:	6033      	str	r3, [r6, #0]
 8030f44:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8030f48:	f1ba 0f10 	cmp.w	sl, #16
 8030f4c:	f102 0201 	add.w	r2, r2, #1
 8030f50:	f106 0008 	add.w	r0, r6, #8
 8030f54:	f300 8132 	bgt.w	80311bc <_svfiprintf_r+0x750>
 8030f58:	eb0c 010a 	add.w	r1, ip, sl
 8030f5c:	2a07      	cmp	r2, #7
 8030f5e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030f62:	f8c6 a004 	str.w	sl, [r6, #4]
 8030f66:	f340 813d 	ble.w	80311e4 <_svfiprintf_r+0x778>
 8030f6a:	9801      	ldr	r0, [sp, #4]
 8030f6c:	aa0e      	add	r2, sp, #56	@ 0x38
 8030f6e:	4659      	mov	r1, fp
 8030f70:	f7ff fcfe 	bl	8030970 <__ssprint_r>
 8030f74:	2800      	cmp	r0, #0
 8030f76:	f040 8170 	bne.w	803125a <_svfiprintf_r+0x7ee>
 8030f7a:	ae11      	add	r6, sp, #68	@ 0x44
 8030f7c:	9b00      	ldr	r3, [sp, #0]
 8030f7e:	1ae4      	subs	r4, r4, r3
 8030f80:	2c00      	cmp	r4, #0
 8030f82:	dd1a      	ble.n	8030fba <_svfiprintf_r+0x54e>
 8030f84:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030f88:	4876      	ldr	r0, [pc, #472]	@ (8031164 <_svfiprintf_r+0x6f8>)
 8030f8a:	6030      	str	r0, [r6, #0]
 8030f8c:	2c10      	cmp	r4, #16
 8030f8e:	f103 0301 	add.w	r3, r3, #1
 8030f92:	f106 0108 	add.w	r1, r6, #8
 8030f96:	f300 8127 	bgt.w	80311e8 <_svfiprintf_r+0x77c>
 8030f9a:	6074      	str	r4, [r6, #4]
 8030f9c:	2b07      	cmp	r3, #7
 8030f9e:	4414      	add	r4, r2
 8030fa0:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8030fa4:	f340 8131 	ble.w	803120a <_svfiprintf_r+0x79e>
 8030fa8:	9801      	ldr	r0, [sp, #4]
 8030faa:	aa0e      	add	r2, sp, #56	@ 0x38
 8030fac:	4659      	mov	r1, fp
 8030fae:	f7ff fcdf 	bl	8030970 <__ssprint_r>
 8030fb2:	2800      	cmp	r0, #0
 8030fb4:	f040 8151 	bne.w	803125a <_svfiprintf_r+0x7ee>
 8030fb8:	ae11      	add	r6, sp, #68	@ 0x44
 8030fba:	9b00      	ldr	r3, [sp, #0]
 8030fbc:	9a00      	ldr	r2, [sp, #0]
 8030fbe:	6073      	str	r3, [r6, #4]
 8030fc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030fc2:	f8c6 8000 	str.w	r8, [r6]
 8030fc6:	4413      	add	r3, r2
 8030fc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8030fca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030fcc:	3301      	adds	r3, #1
 8030fce:	2b07      	cmp	r3, #7
 8030fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030fd2:	f300 811c 	bgt.w	803120e <_svfiprintf_r+0x7a2>
 8030fd6:	f106 0308 	add.w	r3, r6, #8
 8030fda:	f019 0f04 	tst.w	r9, #4
 8030fde:	f040 811e 	bne.w	803121e <_svfiprintf_r+0x7b2>
 8030fe2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8030fe6:	42aa      	cmp	r2, r5
 8030fe8:	bfac      	ite	ge
 8030fea:	189b      	addge	r3, r3, r2
 8030fec:	195b      	addlt	r3, r3, r5
 8030fee:	9304      	str	r3, [sp, #16]
 8030ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030ff2:	b13b      	cbz	r3, 8031004 <_svfiprintf_r+0x598>
 8030ff4:	9801      	ldr	r0, [sp, #4]
 8030ff6:	aa0e      	add	r2, sp, #56	@ 0x38
 8030ff8:	4659      	mov	r1, fp
 8030ffa:	f7ff fcb9 	bl	8030970 <__ssprint_r>
 8030ffe:	2800      	cmp	r0, #0
 8031000:	f040 812b 	bne.w	803125a <_svfiprintf_r+0x7ee>
 8031004:	2300      	movs	r3, #0
 8031006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031008:	463d      	mov	r5, r7
 803100a:	ae11      	add	r6, sp, #68	@ 0x44
 803100c:	e557      	b.n	8030abe <_svfiprintf_r+0x52>
 803100e:	4640      	mov	r0, r8
 8031010:	f7df f946 	bl	80102a0 <strlen>
 8031014:	9000      	str	r0, [sp, #0]
 8031016:	e732      	b.n	8030e7e <_svfiprintf_r+0x412>
 8031018:	f049 0910 	orr.w	r9, r9, #16
 803101c:	f019 0320 	ands.w	r3, r9, #32
 8031020:	d008      	beq.n	8031034 <_svfiprintf_r+0x5c8>
 8031022:	3507      	adds	r5, #7
 8031024:	f025 0507 	bic.w	r5, r5, #7
 8031028:	462f      	mov	r7, r5
 803102a:	686d      	ldr	r5, [r5, #4]
 803102c:	f857 4b08 	ldr.w	r4, [r7], #8
 8031030:	2301      	movs	r3, #1
 8031032:	e6d7      	b.n	8030de4 <_svfiprintf_r+0x378>
 8031034:	462f      	mov	r7, r5
 8031036:	f019 0510 	ands.w	r5, r9, #16
 803103a:	f857 4b04 	ldr.w	r4, [r7], #4
 803103e:	d001      	beq.n	8031044 <_svfiprintf_r+0x5d8>
 8031040:	461d      	mov	r5, r3
 8031042:	e7f5      	b.n	8031030 <_svfiprintf_r+0x5c4>
 8031044:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8031048:	d001      	beq.n	803104e <_svfiprintf_r+0x5e2>
 803104a:	b2a4      	uxth	r4, r4
 803104c:	e7f0      	b.n	8031030 <_svfiprintf_r+0x5c4>
 803104e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8031052:	d0ed      	beq.n	8031030 <_svfiprintf_r+0x5c4>
 8031054:	b2e4      	uxtb	r4, r4
 8031056:	e7f3      	b.n	8031040 <_svfiprintf_r+0x5d4>
 8031058:	4a43      	ldr	r2, [pc, #268]	@ (8031168 <_svfiprintf_r+0x6fc>)
 803105a:	e5c6      	b.n	8030bea <_svfiprintf_r+0x17e>
 803105c:	462f      	mov	r7, r5
 803105e:	f019 0510 	ands.w	r5, r9, #16
 8031062:	f857 4b04 	ldr.w	r4, [r7], #4
 8031066:	d001      	beq.n	803106c <_svfiprintf_r+0x600>
 8031068:	4615      	mov	r5, r2
 803106a:	e5ca      	b.n	8030c02 <_svfiprintf_r+0x196>
 803106c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8031070:	d001      	beq.n	8031076 <_svfiprintf_r+0x60a>
 8031072:	b2a4      	uxth	r4, r4
 8031074:	e5c5      	b.n	8030c02 <_svfiprintf_r+0x196>
 8031076:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 803107a:	f43f adc2 	beq.w	8030c02 <_svfiprintf_r+0x196>
 803107e:	b2e4      	uxtb	r4, r4
 8031080:	e7f2      	b.n	8031068 <_svfiprintf_r+0x5fc>
 8031082:	2c0a      	cmp	r4, #10
 8031084:	f175 0300 	sbcs.w	r3, r5, #0
 8031088:	d206      	bcs.n	8031098 <_svfiprintf_r+0x62c>
 803108a:	3430      	adds	r4, #48	@ 0x30
 803108c:	b2e4      	uxtb	r4, r4
 803108e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8031092:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8031096:	e129      	b.n	80312ec <_svfiprintf_r+0x880>
 8031098:	ab3a      	add	r3, sp, #232	@ 0xe8
 803109a:	9309      	str	r3, [sp, #36]	@ 0x24
 803109c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 80310a0:	f04f 0900 	mov.w	r9, #0
 80310a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80310a6:	220a      	movs	r2, #10
 80310a8:	2300      	movs	r3, #0
 80310aa:	4620      	mov	r0, r4
 80310ac:	4629      	mov	r1, r5
 80310ae:	f7df fe53 	bl	8010d58 <__aeabi_uldivmod>
 80310b2:	460b      	mov	r3, r1
 80310b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80310b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80310b8:	3230      	adds	r2, #48	@ 0x30
 80310ba:	f801 2c01 	strb.w	r2, [r1, #-1]
 80310be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80310c0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 80310c4:	f109 0901 	add.w	r9, r9, #1
 80310c8:	b1e2      	cbz	r2, 8031104 <_svfiprintf_r+0x698>
 80310ca:	9a06      	ldr	r2, [sp, #24]
 80310cc:	7812      	ldrb	r2, [r2, #0]
 80310ce:	454a      	cmp	r2, r9
 80310d0:	d118      	bne.n	8031104 <_svfiprintf_r+0x698>
 80310d2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80310d6:	d015      	beq.n	8031104 <_svfiprintf_r+0x698>
 80310d8:	2c0a      	cmp	r4, #10
 80310da:	f175 0200 	sbcs.w	r2, r5, #0
 80310de:	d311      	bcc.n	8031104 <_svfiprintf_r+0x698>
 80310e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80310e2:	9b07      	ldr	r3, [sp, #28]
 80310e4:	9908      	ldr	r1, [sp, #32]
 80310e6:	eba8 0803 	sub.w	r8, r8, r3
 80310ea:	461a      	mov	r2, r3
 80310ec:	4640      	mov	r0, r8
 80310ee:	f7fc fc56 	bl	802d99e <strncpy>
 80310f2:	9b06      	ldr	r3, [sp, #24]
 80310f4:	785a      	ldrb	r2, [r3, #1]
 80310f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80310f8:	b172      	cbz	r2, 8031118 <_svfiprintf_r+0x6ac>
 80310fa:	9a06      	ldr	r2, [sp, #24]
 80310fc:	3201      	adds	r2, #1
 80310fe:	9206      	str	r2, [sp, #24]
 8031100:	f04f 0900 	mov.w	r9, #0
 8031104:	2c0a      	cmp	r4, #10
 8031106:	f175 0500 	sbcs.w	r5, r5, #0
 803110a:	f0c0 80ef 	bcc.w	80312ec <_svfiprintf_r+0x880>
 803110e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8031110:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8031114:	461d      	mov	r5, r3
 8031116:	e7c6      	b.n	80310a6 <_svfiprintf_r+0x63a>
 8031118:	4691      	mov	r9, r2
 803111a:	e7f3      	b.n	8031104 <_svfiprintf_r+0x698>
 803111c:	f004 030f 	and.w	r3, r4, #15
 8031120:	9a05      	ldr	r2, [sp, #20]
 8031122:	0924      	lsrs	r4, r4, #4
 8031124:	5cd3      	ldrb	r3, [r2, r3]
 8031126:	f808 3d01 	strb.w	r3, [r8, #-1]!
 803112a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 803112e:	092d      	lsrs	r5, r5, #4
 8031130:	ea54 0305 	orrs.w	r3, r4, r5
 8031134:	d1f2      	bne.n	803111c <_svfiprintf_r+0x6b0>
 8031136:	e0d9      	b.n	80312ec <_svfiprintf_r+0x880>
 8031138:	b923      	cbnz	r3, 8031144 <_svfiprintf_r+0x6d8>
 803113a:	f019 0f01 	tst.w	r9, #1
 803113e:	d001      	beq.n	8031144 <_svfiprintf_r+0x6d8>
 8031140:	2430      	movs	r4, #48	@ 0x30
 8031142:	e7a4      	b.n	803108e <_svfiprintf_r+0x622>
 8031144:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8031148:	e0d0      	b.n	80312ec <_svfiprintf_r+0x880>
 803114a:	2b00      	cmp	r3, #0
 803114c:	f000 80a1 	beq.w	8031292 <_svfiprintf_r+0x826>
 8031150:	2400      	movs	r4, #0
 8031152:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8031156:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 803115a:	462f      	mov	r7, r5
 803115c:	e5e0      	b.n	8030d20 <_svfiprintf_r+0x2b4>
 803115e:	bf00      	nop
 8031160:	0803d84f 	.word	0x0803d84f
 8031164:	0803d83f 	.word	0x0803d83f
 8031168:	0803d2cc 	.word	0x0803d2cc
 803116c:	2110      	movs	r1, #16
 803116e:	6071      	str	r1, [r6, #4]
 8031170:	2a07      	cmp	r2, #7
 8031172:	4461      	add	r1, ip
 8031174:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8031178:	dd08      	ble.n	803118c <_svfiprintf_r+0x720>
 803117a:	9801      	ldr	r0, [sp, #4]
 803117c:	aa0e      	add	r2, sp, #56	@ 0x38
 803117e:	4659      	mov	r1, fp
 8031180:	f7ff fbf6 	bl	8030970 <__ssprint_r>
 8031184:	2800      	cmp	r0, #0
 8031186:	d168      	bne.n	803125a <_svfiprintf_r+0x7ee>
 8031188:	4b5c      	ldr	r3, [pc, #368]	@ (80312fc <_svfiprintf_r+0x890>)
 803118a:	a811      	add	r0, sp, #68	@ 0x44
 803118c:	f1aa 0a10 	sub.w	sl, sl, #16
 8031190:	4606      	mov	r6, r0
 8031192:	e68d      	b.n	8030eb0 <_svfiprintf_r+0x444>
 8031194:	4606      	mov	r6, r0
 8031196:	e6a8      	b.n	8030eea <_svfiprintf_r+0x47e>
 8031198:	9801      	ldr	r0, [sp, #4]
 803119a:	aa0e      	add	r2, sp, #56	@ 0x38
 803119c:	4659      	mov	r1, fp
 803119e:	f7ff fbe7 	bl	8030970 <__ssprint_r>
 80311a2:	2800      	cmp	r0, #0
 80311a4:	d159      	bne.n	803125a <_svfiprintf_r+0x7ee>
 80311a6:	ae11      	add	r6, sp, #68	@ 0x44
 80311a8:	e6b1      	b.n	8030f0e <_svfiprintf_r+0x4a2>
 80311aa:	9801      	ldr	r0, [sp, #4]
 80311ac:	aa0e      	add	r2, sp, #56	@ 0x38
 80311ae:	4659      	mov	r1, fp
 80311b0:	f7ff fbde 	bl	8030970 <__ssprint_r>
 80311b4:	2800      	cmp	r0, #0
 80311b6:	d150      	bne.n	803125a <_svfiprintf_r+0x7ee>
 80311b8:	ae11      	add	r6, sp, #68	@ 0x44
 80311ba:	e6b8      	b.n	8030f2e <_svfiprintf_r+0x4c2>
 80311bc:	2110      	movs	r1, #16
 80311be:	6071      	str	r1, [r6, #4]
 80311c0:	2a07      	cmp	r2, #7
 80311c2:	4461      	add	r1, ip
 80311c4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80311c8:	dd08      	ble.n	80311dc <_svfiprintf_r+0x770>
 80311ca:	9801      	ldr	r0, [sp, #4]
 80311cc:	aa0e      	add	r2, sp, #56	@ 0x38
 80311ce:	4659      	mov	r1, fp
 80311d0:	f7ff fbce 	bl	8030970 <__ssprint_r>
 80311d4:	2800      	cmp	r0, #0
 80311d6:	d140      	bne.n	803125a <_svfiprintf_r+0x7ee>
 80311d8:	4b49      	ldr	r3, [pc, #292]	@ (8031300 <_svfiprintf_r+0x894>)
 80311da:	a811      	add	r0, sp, #68	@ 0x44
 80311dc:	f1aa 0a10 	sub.w	sl, sl, #16
 80311e0:	4606      	mov	r6, r0
 80311e2:	e6ae      	b.n	8030f42 <_svfiprintf_r+0x4d6>
 80311e4:	4606      	mov	r6, r0
 80311e6:	e6c9      	b.n	8030f7c <_svfiprintf_r+0x510>
 80311e8:	2010      	movs	r0, #16
 80311ea:	4402      	add	r2, r0
 80311ec:	2b07      	cmp	r3, #7
 80311ee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80311f2:	6070      	str	r0, [r6, #4]
 80311f4:	dd06      	ble.n	8031204 <_svfiprintf_r+0x798>
 80311f6:	9801      	ldr	r0, [sp, #4]
 80311f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80311fa:	4659      	mov	r1, fp
 80311fc:	f7ff fbb8 	bl	8030970 <__ssprint_r>
 8031200:	bb58      	cbnz	r0, 803125a <_svfiprintf_r+0x7ee>
 8031202:	a911      	add	r1, sp, #68	@ 0x44
 8031204:	3c10      	subs	r4, #16
 8031206:	460e      	mov	r6, r1
 8031208:	e6bc      	b.n	8030f84 <_svfiprintf_r+0x518>
 803120a:	460e      	mov	r6, r1
 803120c:	e6d5      	b.n	8030fba <_svfiprintf_r+0x54e>
 803120e:	9801      	ldr	r0, [sp, #4]
 8031210:	aa0e      	add	r2, sp, #56	@ 0x38
 8031212:	4659      	mov	r1, fp
 8031214:	f7ff fbac 	bl	8030970 <__ssprint_r>
 8031218:	b9f8      	cbnz	r0, 803125a <_svfiprintf_r+0x7ee>
 803121a:	ab11      	add	r3, sp, #68	@ 0x44
 803121c:	e6dd      	b.n	8030fda <_svfiprintf_r+0x56e>
 803121e:	9a03      	ldr	r2, [sp, #12]
 8031220:	1b54      	subs	r4, r2, r5
 8031222:	2c00      	cmp	r4, #0
 8031224:	f77f aedd 	ble.w	8030fe2 <_svfiprintf_r+0x576>
 8031228:	4e34      	ldr	r6, [pc, #208]	@ (80312fc <_svfiprintf_r+0x890>)
 803122a:	f04f 0810 	mov.w	r8, #16
 803122e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8031232:	2c10      	cmp	r4, #16
 8031234:	f102 0201 	add.w	r2, r2, #1
 8031238:	601e      	str	r6, [r3, #0]
 803123a:	dc17      	bgt.n	803126c <_svfiprintf_r+0x800>
 803123c:	605c      	str	r4, [r3, #4]
 803123e:	2a07      	cmp	r2, #7
 8031240:	440c      	add	r4, r1
 8031242:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8031246:	f77f aecc 	ble.w	8030fe2 <_svfiprintf_r+0x576>
 803124a:	9801      	ldr	r0, [sp, #4]
 803124c:	aa0e      	add	r2, sp, #56	@ 0x38
 803124e:	4659      	mov	r1, fp
 8031250:	f7ff fb8e 	bl	8030970 <__ssprint_r>
 8031254:	2800      	cmp	r0, #0
 8031256:	f43f aec4 	beq.w	8030fe2 <_svfiprintf_r+0x576>
 803125a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803125e:	065b      	lsls	r3, r3, #25
 8031260:	f53f ac1c 	bmi.w	8030a9c <_svfiprintf_r+0x30>
 8031264:	9804      	ldr	r0, [sp, #16]
 8031266:	b03b      	add	sp, #236	@ 0xec
 8031268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803126c:	3110      	adds	r1, #16
 803126e:	2a07      	cmp	r2, #7
 8031270:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8031274:	f8c3 8004 	str.w	r8, [r3, #4]
 8031278:	dc02      	bgt.n	8031280 <_svfiprintf_r+0x814>
 803127a:	3308      	adds	r3, #8
 803127c:	3c10      	subs	r4, #16
 803127e:	e7d6      	b.n	803122e <_svfiprintf_r+0x7c2>
 8031280:	9801      	ldr	r0, [sp, #4]
 8031282:	aa0e      	add	r2, sp, #56	@ 0x38
 8031284:	4659      	mov	r1, fp
 8031286:	f7ff fb73 	bl	8030970 <__ssprint_r>
 803128a:	2800      	cmp	r0, #0
 803128c:	d1e5      	bne.n	803125a <_svfiprintf_r+0x7ee>
 803128e:	ab11      	add	r3, sp, #68	@ 0x44
 8031290:	e7f4      	b.n	803127c <_svfiprintf_r+0x810>
 8031292:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031294:	2b00      	cmp	r3, #0
 8031296:	d0e0      	beq.n	803125a <_svfiprintf_r+0x7ee>
 8031298:	9801      	ldr	r0, [sp, #4]
 803129a:	aa0e      	add	r2, sp, #56	@ 0x38
 803129c:	4659      	mov	r1, fp
 803129e:	f7ff fb67 	bl	8030970 <__ssprint_r>
 80312a2:	e7da      	b.n	803125a <_svfiprintf_r+0x7ee>
 80312a4:	ea54 0205 	orrs.w	r2, r4, r5
 80312a8:	46ca      	mov	sl, r9
 80312aa:	f43f adac 	beq.w	8030e06 <_svfiprintf_r+0x39a>
 80312ae:	2b01      	cmp	r3, #1
 80312b0:	f43f aee7 	beq.w	8031082 <_svfiprintf_r+0x616>
 80312b4:	2b02      	cmp	r3, #2
 80312b6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 80312ba:	f43f af2f 	beq.w	803111c <_svfiprintf_r+0x6b0>
 80312be:	f004 0307 	and.w	r3, r4, #7
 80312c2:	08e4      	lsrs	r4, r4, #3
 80312c4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80312c8:	08ed      	lsrs	r5, r5, #3
 80312ca:	3330      	adds	r3, #48	@ 0x30
 80312cc:	ea54 0105 	orrs.w	r1, r4, r5
 80312d0:	4642      	mov	r2, r8
 80312d2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80312d6:	d1f2      	bne.n	80312be <_svfiprintf_r+0x852>
 80312d8:	f01a 0f01 	tst.w	sl, #1
 80312dc:	d006      	beq.n	80312ec <_svfiprintf_r+0x880>
 80312de:	2b30      	cmp	r3, #48	@ 0x30
 80312e0:	d004      	beq.n	80312ec <_svfiprintf_r+0x880>
 80312e2:	2330      	movs	r3, #48	@ 0x30
 80312e4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80312e8:	f1a2 0802 	sub.w	r8, r2, #2
 80312ec:	ab3a      	add	r3, sp, #232	@ 0xe8
 80312ee:	eba3 0308 	sub.w	r3, r3, r8
 80312f2:	9c00      	ldr	r4, [sp, #0]
 80312f4:	9300      	str	r3, [sp, #0]
 80312f6:	46d1      	mov	r9, sl
 80312f8:	e5c2      	b.n	8030e80 <_svfiprintf_r+0x414>
 80312fa:	bf00      	nop
 80312fc:	0803d84f 	.word	0x0803d84f
 8031300:	0803d83f 	.word	0x0803d83f

08031304 <_sungetc_r>:
 8031304:	b538      	push	{r3, r4, r5, lr}
 8031306:	1c4b      	adds	r3, r1, #1
 8031308:	4614      	mov	r4, r2
 803130a:	d103      	bne.n	8031314 <_sungetc_r+0x10>
 803130c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8031310:	4628      	mov	r0, r5
 8031312:	bd38      	pop	{r3, r4, r5, pc}
 8031314:	8993      	ldrh	r3, [r2, #12]
 8031316:	f023 0320 	bic.w	r3, r3, #32
 803131a:	8193      	strh	r3, [r2, #12]
 803131c:	6853      	ldr	r3, [r2, #4]
 803131e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8031320:	b2cd      	uxtb	r5, r1
 8031322:	b18a      	cbz	r2, 8031348 <_sungetc_r+0x44>
 8031324:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8031326:	429a      	cmp	r2, r3
 8031328:	dd08      	ble.n	803133c <_sungetc_r+0x38>
 803132a:	6823      	ldr	r3, [r4, #0]
 803132c:	1e5a      	subs	r2, r3, #1
 803132e:	6022      	str	r2, [r4, #0]
 8031330:	f803 5c01 	strb.w	r5, [r3, #-1]
 8031334:	6863      	ldr	r3, [r4, #4]
 8031336:	3301      	adds	r3, #1
 8031338:	6063      	str	r3, [r4, #4]
 803133a:	e7e9      	b.n	8031310 <_sungetc_r+0xc>
 803133c:	4621      	mov	r1, r4
 803133e:	f005 f8a7 	bl	8036490 <__submore>
 8031342:	2800      	cmp	r0, #0
 8031344:	d0f1      	beq.n	803132a <_sungetc_r+0x26>
 8031346:	e7e1      	b.n	803130c <_sungetc_r+0x8>
 8031348:	6921      	ldr	r1, [r4, #16]
 803134a:	6822      	ldr	r2, [r4, #0]
 803134c:	b141      	cbz	r1, 8031360 <_sungetc_r+0x5c>
 803134e:	4291      	cmp	r1, r2
 8031350:	d206      	bcs.n	8031360 <_sungetc_r+0x5c>
 8031352:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8031356:	42a9      	cmp	r1, r5
 8031358:	d102      	bne.n	8031360 <_sungetc_r+0x5c>
 803135a:	3a01      	subs	r2, #1
 803135c:	6022      	str	r2, [r4, #0]
 803135e:	e7ea      	b.n	8031336 <_sungetc_r+0x32>
 8031360:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8031364:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8031368:	6323      	str	r3, [r4, #48]	@ 0x30
 803136a:	2303      	movs	r3, #3
 803136c:	6363      	str	r3, [r4, #52]	@ 0x34
 803136e:	4623      	mov	r3, r4
 8031370:	f803 5f42 	strb.w	r5, [r3, #66]!
 8031374:	6023      	str	r3, [r4, #0]
 8031376:	2301      	movs	r3, #1
 8031378:	e7de      	b.n	8031338 <_sungetc_r+0x34>

0803137a <__ssrefill_r>:
 803137a:	b510      	push	{r4, lr}
 803137c:	460c      	mov	r4, r1
 803137e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8031380:	b169      	cbz	r1, 803139e <__ssrefill_r+0x24>
 8031382:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8031386:	4299      	cmp	r1, r3
 8031388:	d001      	beq.n	803138e <__ssrefill_r+0x14>
 803138a:	f7fe ff2f 	bl	80301ec <_free_r>
 803138e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8031390:	6063      	str	r3, [r4, #4]
 8031392:	2000      	movs	r0, #0
 8031394:	6320      	str	r0, [r4, #48]	@ 0x30
 8031396:	b113      	cbz	r3, 803139e <__ssrefill_r+0x24>
 8031398:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803139a:	6023      	str	r3, [r4, #0]
 803139c:	bd10      	pop	{r4, pc}
 803139e:	6923      	ldr	r3, [r4, #16]
 80313a0:	6023      	str	r3, [r4, #0]
 80313a2:	2300      	movs	r3, #0
 80313a4:	6063      	str	r3, [r4, #4]
 80313a6:	89a3      	ldrh	r3, [r4, #12]
 80313a8:	f043 0320 	orr.w	r3, r3, #32
 80313ac:	81a3      	strh	r3, [r4, #12]
 80313ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80313b2:	e7f3      	b.n	803139c <__ssrefill_r+0x22>

080313b4 <_sfread_r>:
 80313b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80313b8:	461f      	mov	r7, r3
 80313ba:	4613      	mov	r3, r2
 80313bc:	437b      	muls	r3, r7
 80313be:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80313c0:	9000      	str	r0, [sp, #0]
 80313c2:	4688      	mov	r8, r1
 80313c4:	4691      	mov	r9, r2
 80313c6:	d028      	beq.n	803141a <_sfread_r+0x66>
 80313c8:	461e      	mov	r6, r3
 80313ca:	f04f 0b00 	mov.w	fp, #0
 80313ce:	e9d4 1500 	ldrd	r1, r5, [r4]
 80313d2:	42b5      	cmp	r5, r6
 80313d4:	d30b      	bcc.n	80313ee <_sfread_r+0x3a>
 80313d6:	4632      	mov	r2, r6
 80313d8:	4640      	mov	r0, r8
 80313da:	f7fd ffff 	bl	802f3dc <memcpy>
 80313de:	6862      	ldr	r2, [r4, #4]
 80313e0:	6821      	ldr	r1, [r4, #0]
 80313e2:	1b92      	subs	r2, r2, r6
 80313e4:	4431      	add	r1, r6
 80313e6:	6062      	str	r2, [r4, #4]
 80313e8:	6021      	str	r1, [r4, #0]
 80313ea:	463b      	mov	r3, r7
 80313ec:	e015      	b.n	803141a <_sfread_r+0x66>
 80313ee:	462a      	mov	r2, r5
 80313f0:	4640      	mov	r0, r8
 80313f2:	9301      	str	r3, [sp, #4]
 80313f4:	f7fd fff2 	bl	802f3dc <memcpy>
 80313f8:	6822      	ldr	r2, [r4, #0]
 80313fa:	9800      	ldr	r0, [sp, #0]
 80313fc:	442a      	add	r2, r5
 80313fe:	e9c4 2b00 	strd	r2, fp, [r4]
 8031402:	4621      	mov	r1, r4
 8031404:	f7ff ffb9 	bl	803137a <__ssrefill_r>
 8031408:	44a8      	add	r8, r5
 803140a:	9b01      	ldr	r3, [sp, #4]
 803140c:	eba6 0a05 	sub.w	sl, r6, r5
 8031410:	b138      	cbz	r0, 8031422 <_sfread_r+0x6e>
 8031412:	441d      	add	r5, r3
 8031414:	1bad      	subs	r5, r5, r6
 8031416:	fbb5 f3f9 	udiv	r3, r5, r9
 803141a:	4618      	mov	r0, r3
 803141c:	b003      	add	sp, #12
 803141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031422:	4656      	mov	r6, sl
 8031424:	e7d3      	b.n	80313ce <_sfread_r+0x1a>
	...

08031428 <__ssvfiscanf_r>:
 8031428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803142c:	b0df      	sub	sp, #380	@ 0x17c
 803142e:	af02      	add	r7, sp, #8
 8031430:	460c      	mov	r4, r1
 8031432:	623b      	str	r3, [r7, #32]
 8031434:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8031438:	6278      	str	r0, [r7, #36]	@ 0x24
 803143a:	049d      	lsls	r5, r3, #18
 803143c:	60ba      	str	r2, [r7, #8]
 803143e:	d406      	bmi.n	803144e <__ssvfiscanf_r+0x26>
 8031440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8031444:	818b      	strh	r3, [r1, #12]
 8031446:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8031448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803144c:	664b      	str	r3, [r1, #100]	@ 0x64
 803144e:	2300      	movs	r3, #0
 8031450:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8031454:	60fb      	str	r3, [r7, #12]
 8031456:	469b      	mov	fp, r3
 8031458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803145a:	61fb      	str	r3, [r7, #28]
 803145c:	e005      	b.n	803146a <__ssvfiscanf_r+0x42>
 803145e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031460:	4621      	mov	r1, r4
 8031462:	f7ff ff8a 	bl	803137a <__ssrefill_r>
 8031466:	b168      	cbz	r0, 8031484 <__ssvfiscanf_r+0x5c>
 8031468:	60bd      	str	r5, [r7, #8]
 803146a:	68bd      	ldr	r5, [r7, #8]
 803146c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8031470:	637b      	str	r3, [r7, #52]	@ 0x34
 8031472:	b333      	cbz	r3, 80314c2 <__ssvfiscanf_r+0x9a>
 8031474:	4a75      	ldr	r2, [pc, #468]	@ (803164c <__ssvfiscanf_r+0x224>)
 8031476:	5cd6      	ldrb	r6, [r2, r3]
 8031478:	f016 0608 	ands.w	r6, r6, #8
 803147c:	d011      	beq.n	80314a2 <__ssvfiscanf_r+0x7a>
 803147e:	6863      	ldr	r3, [r4, #4]
 8031480:	2b00      	cmp	r3, #0
 8031482:	ddec      	ble.n	803145e <__ssvfiscanf_r+0x36>
 8031484:	6823      	ldr	r3, [r4, #0]
 8031486:	4971      	ldr	r1, [pc, #452]	@ (803164c <__ssvfiscanf_r+0x224>)
 8031488:	781a      	ldrb	r2, [r3, #0]
 803148a:	5c8a      	ldrb	r2, [r1, r2]
 803148c:	0710      	lsls	r0, r2, #28
 803148e:	d5eb      	bpl.n	8031468 <__ssvfiscanf_r+0x40>
 8031490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031492:	3201      	adds	r2, #1
 8031494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031496:	6862      	ldr	r2, [r4, #4]
 8031498:	3301      	adds	r3, #1
 803149a:	3a01      	subs	r2, #1
 803149c:	6062      	str	r2, [r4, #4]
 803149e:	6023      	str	r3, [r4, #0]
 80314a0:	e7ed      	b.n	803147e <__ssvfiscanf_r+0x56>
 80314a2:	2b25      	cmp	r3, #37	@ 0x25
 80314a4:	d15f      	bne.n	8031566 <__ssvfiscanf_r+0x13e>
 80314a6:	62be      	str	r6, [r7, #40]	@ 0x28
 80314a8:	462a      	mov	r2, r5
 80314aa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80314ae:	60ba      	str	r2, [r7, #8]
 80314b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80314b2:	d806      	bhi.n	80314c2 <__ssvfiscanf_r+0x9a>
 80314b4:	2b42      	cmp	r3, #66	@ 0x42
 80314b6:	d809      	bhi.n	80314cc <__ssvfiscanf_r+0xa4>
 80314b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80314ba:	d079      	beq.n	80315b0 <__ssvfiscanf_r+0x188>
 80314bc:	d844      	bhi.n	8031548 <__ssvfiscanf_r+0x120>
 80314be:	2b25      	cmp	r3, #37	@ 0x25
 80314c0:	d050      	beq.n	8031564 <__ssvfiscanf_r+0x13c>
 80314c2:	f1bb 0f00 	cmp.w	fp, #0
 80314c6:	f000 810e 	beq.w	80316e6 <__ssvfiscanf_r+0x2be>
 80314ca:	e107      	b.n	80316dc <__ssvfiscanf_r+0x2b4>
 80314cc:	3b43      	subs	r3, #67	@ 0x43
 80314ce:	2b37      	cmp	r3, #55	@ 0x37
 80314d0:	f200 80fd 	bhi.w	80316ce <__ssvfiscanf_r+0x2a6>
 80314d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80314d8:	00a40117 	.word	0x00a40117
 80314dc:	00fb00fb 	.word	0x00fb00fb
 80314e0:	00fb00fb 	.word	0x00fb00fb
 80314e4:	00fb00fb 	.word	0x00fb00fb
 80314e8:	008e00fb 	.word	0x008e00fb
 80314ec:	00fb00fb 	.word	0x00fb00fb
 80314f0:	00fb00a8 	.word	0x00fb00a8
 80314f4:	00fb00fb 	.word	0x00fb00fb
 80314f8:	00fb00c0 	.word	0x00fb00c0
 80314fc:	00fb00fb 	.word	0x00fb00fb
 8031500:	00b400fb 	.word	0x00b400fb
 8031504:	00fb00fb 	.word	0x00fb00fb
 8031508:	00fb010d 	.word	0x00fb010d
 803150c:	00fb00fb 	.word	0x00fb00fb
 8031510:	00fb00fb 	.word	0x00fb00fb
 8031514:	00fb00fb 	.word	0x00fb00fb
 8031518:	00a60119 	.word	0x00a60119
 803151c:	00fb00fb 	.word	0x00fb00fb
 8031520:	008100fb 	.word	0x008100fb
 8031524:	008e013e 	.word	0x008e013e
 8031528:	007300fb 	.word	0x007300fb
 803152c:	01200095 	.word	0x01200095
 8031530:	011d00aa 	.word	0x011d00aa
 8031534:	00fb00fb 	.word	0x00fb00fb
 8031538:	009200c2 	.word	0x009200c2
 803153c:	00fb00b0 	.word	0x00fb00b0
 8031540:	00b400fb 	.word	0x00b400fb
 8031544:	009200fb 	.word	0x009200fb
 8031548:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 803154c:	2a09      	cmp	r2, #9
 803154e:	d8b8      	bhi.n	80314c2 <__ssvfiscanf_r+0x9a>
 8031550:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8031554:	d1b5      	bne.n	80314c2 <__ssvfiscanf_r+0x9a>
 8031556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8031558:	220a      	movs	r2, #10
 803155a:	fb02 3301 	mla	r3, r2, r1, r3
 803155e:	3b30      	subs	r3, #48	@ 0x30
 8031560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031562:	e02a      	b.n	80315ba <__ssvfiscanf_r+0x192>
 8031564:	68bd      	ldr	r5, [r7, #8]
 8031566:	6863      	ldr	r3, [r4, #4]
 8031568:	2b00      	cmp	r3, #0
 803156a:	dd0e      	ble.n	803158a <__ssvfiscanf_r+0x162>
 803156c:	6823      	ldr	r3, [r4, #0]
 803156e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8031572:	7819      	ldrb	r1, [r3, #0]
 8031574:	4291      	cmp	r1, r2
 8031576:	d1a4      	bne.n	80314c2 <__ssvfiscanf_r+0x9a>
 8031578:	3301      	adds	r3, #1
 803157a:	6862      	ldr	r2, [r4, #4]
 803157c:	6023      	str	r3, [r4, #0]
 803157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031580:	3a01      	subs	r2, #1
 8031582:	3301      	adds	r3, #1
 8031584:	6062      	str	r2, [r4, #4]
 8031586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031588:	e76e      	b.n	8031468 <__ssvfiscanf_r+0x40>
 803158a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803158c:	4621      	mov	r1, r4
 803158e:	f7ff fef4 	bl	803137a <__ssrefill_r>
 8031592:	2800      	cmp	r0, #0
 8031594:	d0ea      	beq.n	803156c <__ssvfiscanf_r+0x144>
 8031596:	69fb      	ldr	r3, [r7, #28]
 8031598:	b113      	cbz	r3, 80315a0 <__ssvfiscanf_r+0x178>
 803159a:	89a3      	ldrh	r3, [r4, #12]
 803159c:	065b      	lsls	r3, r3, #25
 803159e:	d590      	bpl.n	80314c2 <__ssvfiscanf_r+0x9a>
 80315a0:	f1bb 0f00 	cmp.w	fp, #0
 80315a4:	f040 8654 	bne.w	8032250 <__ssvfiscanf_r+0xe28>
 80315a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80315ac:	61fb      	str	r3, [r7, #28]
 80315ae:	e09a      	b.n	80316e6 <__ssvfiscanf_r+0x2be>
 80315b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80315b2:	4333      	orrs	r3, r6
 80315b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80315b6:	d184      	bne.n	80314c2 <__ssvfiscanf_r+0x9a>
 80315b8:	2610      	movs	r6, #16
 80315ba:	68bd      	ldr	r5, [r7, #8]
 80315bc:	e774      	b.n	80314a8 <__ssvfiscanf_r+0x80>
 80315be:	0731      	lsls	r1, r6, #28
 80315c0:	f47f af7f 	bne.w	80314c2 <__ssvfiscanf_r+0x9a>
 80315c4:	786b      	ldrb	r3, [r5, #1]
 80315c6:	2b6c      	cmp	r3, #108	@ 0x6c
 80315c8:	d104      	bne.n	80315d4 <__ssvfiscanf_r+0x1ac>
 80315ca:	1cab      	adds	r3, r5, #2
 80315cc:	60bb      	str	r3, [r7, #8]
 80315ce:	f046 0602 	orr.w	r6, r6, #2
 80315d2:	e7f2      	b.n	80315ba <__ssvfiscanf_r+0x192>
 80315d4:	f046 0601 	orr.w	r6, r6, #1
 80315d8:	e7ef      	b.n	80315ba <__ssvfiscanf_r+0x192>
 80315da:	0732      	lsls	r2, r6, #28
 80315dc:	f47f af71 	bne.w	80314c2 <__ssvfiscanf_r+0x9a>
 80315e0:	786b      	ldrb	r3, [r5, #1]
 80315e2:	2b68      	cmp	r3, #104	@ 0x68
 80315e4:	bf03      	ittte	eq
 80315e6:	1cab      	addeq	r3, r5, #2
 80315e8:	60bb      	streq	r3, [r7, #8]
 80315ea:	f046 0608 	orreq.w	r6, r6, #8
 80315ee:	f046 0604 	orrne.w	r6, r6, #4
 80315f2:	e7e2      	b.n	80315ba <__ssvfiscanf_r+0x192>
 80315f4:	0733      	lsls	r3, r6, #28
 80315f6:	f47f af64 	bne.w	80314c2 <__ssvfiscanf_r+0x9a>
 80315fa:	e7e8      	b.n	80315ce <__ssvfiscanf_r+0x1a6>
 80315fc:	0735      	lsls	r5, r6, #28
 80315fe:	d0dc      	beq.n	80315ba <__ssvfiscanf_r+0x192>
 8031600:	e75f      	b.n	80314c2 <__ssvfiscanf_r+0x9a>
 8031602:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8031606:	f47f af5c 	bne.w	80314c2 <__ssvfiscanf_r+0x9a>
 803160a:	f1bb 0f00 	cmp.w	fp, #0
 803160e:	d104      	bne.n	803161a <__ssvfiscanf_r+0x1f2>
 8031610:	b082      	sub	sp, #8
 8031612:	f10d 0b08 	add.w	fp, sp, #8
 8031616:	e9cb 3300 	strd	r3, r3, [fp]
 803161a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803161e:	e7cc      	b.n	80315ba <__ssvfiscanf_r+0x192>
 8031620:	f046 0601 	orr.w	r6, r6, #1
 8031624:	4b0a      	ldr	r3, [pc, #40]	@ (8031650 <__ssvfiscanf_r+0x228>)
 8031626:	e008      	b.n	803163a <__ssvfiscanf_r+0x212>
 8031628:	f046 0601 	orr.w	r6, r6, #1
 803162c:	4b09      	ldr	r3, [pc, #36]	@ (8031654 <__ssvfiscanf_r+0x22c>)
 803162e:	60fb      	str	r3, [r7, #12]
 8031630:	2308      	movs	r3, #8
 8031632:	617b      	str	r3, [r7, #20]
 8031634:	2503      	movs	r5, #3
 8031636:	e012      	b.n	803165e <__ssvfiscanf_r+0x236>
 8031638:	4b06      	ldr	r3, [pc, #24]	@ (8031654 <__ssvfiscanf_r+0x22c>)
 803163a:	60fb      	str	r3, [r7, #12]
 803163c:	230a      	movs	r3, #10
 803163e:	e7f8      	b.n	8031632 <__ssvfiscanf_r+0x20a>
 8031640:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8031644:	4b03      	ldr	r3, [pc, #12]	@ (8031654 <__ssvfiscanf_r+0x22c>)
 8031646:	60fb      	str	r3, [r7, #12]
 8031648:	2310      	movs	r3, #16
 803164a:	e7f2      	b.n	8031632 <__ssvfiscanf_r+0x20a>
 803164c:	0803d6c9 	.word	0x0803d6c9
 8031650:	0802d019 	.word	0x0802d019
 8031654:	08036479 	.word	0x08036479
 8031658:	f046 0601 	orr.w	r6, r6, #1
 803165c:	2502      	movs	r5, #2
 803165e:	6863      	ldr	r3, [r4, #4]
 8031660:	2b00      	cmp	r3, #0
 8031662:	dd7b      	ble.n	803175c <__ssvfiscanf_r+0x334>
 8031664:	0671      	lsls	r1, r6, #25
 8031666:	d407      	bmi.n	8031678 <__ssvfiscanf_r+0x250>
 8031668:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 80319f4 <__ssvfiscanf_r+0x5cc>
 803166c:	6823      	ldr	r3, [r4, #0]
 803166e:	781a      	ldrb	r2, [r3, #0]
 8031670:	f818 2002 	ldrb.w	r2, [r8, r2]
 8031674:	0712      	lsls	r2, r2, #28
 8031676:	d479      	bmi.n	803176c <__ssvfiscanf_r+0x344>
 8031678:	2d02      	cmp	r5, #2
 803167a:	f000 836f 	beq.w	8031d5c <__ssvfiscanf_r+0x934>
 803167e:	2d03      	cmp	r5, #3
 8031680:	f000 84f6 	beq.w	8032070 <__ssvfiscanf_r+0xc48>
 8031684:	f006 0310 	and.w	r3, r6, #16
 8031688:	2d01      	cmp	r5, #1
 803168a:	613b      	str	r3, [r7, #16]
 803168c:	f006 0501 	and.w	r5, r6, #1
 8031690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031692:	f000 81b1 	beq.w	80319f8 <__ssvfiscanf_r+0x5d0>
 8031696:	2b01      	cmp	r3, #1
 8031698:	bf38      	it	cc
 803169a:	2301      	movcc	r3, #1
 803169c:	4698      	mov	r8, r3
 803169e:	693b      	ldr	r3, [r7, #16]
 80316a0:	2d00      	cmp	r5, #0
 80316a2:	f000 813b 	beq.w	803191c <__ssvfiscanf_r+0x4f4>
 80316a6:	2b00      	cmp	r3, #0
 80316a8:	f040 80d8 	bne.w	803185c <__ssvfiscanf_r+0x434>
 80316ac:	6a3b      	ldr	r3, [r7, #32]
 80316ae:	0636      	lsls	r6, r6, #24
 80316b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80316b4:	623b      	str	r3, [r7, #32]
 80316b6:	f140 80d7 	bpl.w	8031868 <__ssvfiscanf_r+0x440>
 80316ba:	b145      	cbz	r5, 80316ce <__ssvfiscanf_r+0x2a6>
 80316bc:	2080      	movs	r0, #128	@ 0x80
 80316be:	f7fe fe9d 	bl	80303fc <malloc>
 80316c2:	4606      	mov	r6, r0
 80316c4:	2800      	cmp	r0, #0
 80316c6:	d164      	bne.n	8031792 <__ssvfiscanf_r+0x36a>
 80316c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80316cc:	61fb      	str	r3, [r7, #28]
 80316ce:	f1bb 0f00 	cmp.w	fp, #0
 80316d2:	d008      	beq.n	80316e6 <__ssvfiscanf_r+0x2be>
 80316d4:	69fb      	ldr	r3, [r7, #28]
 80316d6:	3301      	adds	r3, #1
 80316d8:	f000 85ba 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 80316dc:	f8db 0000 	ldr.w	r0, [fp]
 80316e0:	b108      	cbz	r0, 80316e6 <__ssvfiscanf_r+0x2be>
 80316e2:	f7fe fe93 	bl	803040c <free>
 80316e6:	69f8      	ldr	r0, [r7, #28]
 80316e8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80316ec:	46bd      	mov	sp, r7
 80316ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80316f2:	68b9      	ldr	r1, [r7, #8]
 80316f4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80316f8:	f003 fe67 	bl	80353ca <__sccl>
 80316fc:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031700:	60b8      	str	r0, [r7, #8]
 8031702:	2501      	movs	r5, #1
 8031704:	e7ab      	b.n	803165e <__ssvfiscanf_r+0x236>
 8031706:	f046 0601 	orr.w	r6, r6, #1
 803170a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803170e:	2500      	movs	r5, #0
 8031710:	e7a5      	b.n	803165e <__ssvfiscanf_r+0x236>
 8031712:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8031716:	e795      	b.n	8031644 <__ssvfiscanf_r+0x21c>
 8031718:	06f0      	lsls	r0, r6, #27
 803171a:	f53f aea6 	bmi.w	803146a <__ssvfiscanf_r+0x42>
 803171e:	6a3a      	ldr	r2, [r7, #32]
 8031720:	0731      	lsls	r1, r6, #28
 8031722:	f852 3b04 	ldr.w	r3, [r2], #4
 8031726:	623a      	str	r2, [r7, #32]
 8031728:	d502      	bpl.n	8031730 <__ssvfiscanf_r+0x308>
 803172a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803172c:	701a      	strb	r2, [r3, #0]
 803172e:	e69c      	b.n	803146a <__ssvfiscanf_r+0x42>
 8031730:	0772      	lsls	r2, r6, #29
 8031732:	d502      	bpl.n	803173a <__ssvfiscanf_r+0x312>
 8031734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031736:	801a      	strh	r2, [r3, #0]
 8031738:	e697      	b.n	803146a <__ssvfiscanf_r+0x42>
 803173a:	07f5      	lsls	r5, r6, #31
 803173c:	d502      	bpl.n	8031744 <__ssvfiscanf_r+0x31c>
 803173e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031740:	601a      	str	r2, [r3, #0]
 8031742:	e692      	b.n	803146a <__ssvfiscanf_r+0x42>
 8031744:	07b0      	lsls	r0, r6, #30
 8031746:	d5fa      	bpl.n	803173e <__ssvfiscanf_r+0x316>
 8031748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803174a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803174c:	17d2      	asrs	r2, r2, #31
 803174e:	e9c3 1200 	strd	r1, r2, [r3]
 8031752:	e68a      	b.n	803146a <__ssvfiscanf_r+0x42>
 8031754:	4ba6      	ldr	r3, [pc, #664]	@ (80319f0 <__ssvfiscanf_r+0x5c8>)
 8031756:	60fb      	str	r3, [r7, #12]
 8031758:	2300      	movs	r3, #0
 803175a:	e76a      	b.n	8031632 <__ssvfiscanf_r+0x20a>
 803175c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803175e:	4621      	mov	r1, r4
 8031760:	f7ff fe0b 	bl	803137a <__ssrefill_r>
 8031764:	2800      	cmp	r0, #0
 8031766:	f43f af7d 	beq.w	8031664 <__ssvfiscanf_r+0x23c>
 803176a:	e714      	b.n	8031596 <__ssvfiscanf_r+0x16e>
 803176c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803176e:	3201      	adds	r2, #1
 8031770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031772:	6862      	ldr	r2, [r4, #4]
 8031774:	3a01      	subs	r2, #1
 8031776:	2a00      	cmp	r2, #0
 8031778:	6062      	str	r2, [r4, #4]
 803177a:	dd02      	ble.n	8031782 <__ssvfiscanf_r+0x35a>
 803177c:	3301      	adds	r3, #1
 803177e:	6023      	str	r3, [r4, #0]
 8031780:	e774      	b.n	803166c <__ssvfiscanf_r+0x244>
 8031782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031784:	4621      	mov	r1, r4
 8031786:	f7ff fdf8 	bl	803137a <__ssrefill_r>
 803178a:	2800      	cmp	r0, #0
 803178c:	f43f af6e 	beq.w	803166c <__ssvfiscanf_r+0x244>
 8031790:	e701      	b.n	8031596 <__ssvfiscanf_r+0x16e>
 8031792:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031796:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803179a:	6028      	str	r0, [r5, #0]
 803179c:	4599      	cmp	r9, r3
 803179e:	d314      	bcc.n	80317ca <__ssvfiscanf_r+0x3a2>
 80317a0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80317a4:	4293      	cmp	r3, r2
 80317a6:	f200 8553 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 80317aa:	3308      	adds	r3, #8
 80317ac:	fa1f fa83 	uxth.w	sl, r3
 80317b0:	f8db 0000 	ldr.w	r0, [fp]
 80317b4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80317b8:	f003 fdaa 	bl	8035310 <realloc>
 80317bc:	2800      	cmp	r0, #0
 80317be:	f000 8547 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 80317c2:	f8cb 0000 	str.w	r0, [fp]
 80317c6:	f8ab a004 	strh.w	sl, [fp, #4]
 80317ca:	f8db 3000 	ldr.w	r3, [fp]
 80317ce:	f109 0201 	add.w	r2, r9, #1
 80317d2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80317d6:	46aa      	mov	sl, r5
 80317d8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80317dc:	4635      	mov	r5, r6
 80317de:	f04f 0920 	mov.w	r9, #32
 80317e2:	2200      	movs	r2, #0
 80317e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80317e6:	f7fd fd45 	bl	802f274 <__locale_mb_cur_max>
 80317ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80317ec:	4290      	cmp	r0, r2
 80317ee:	f43f aed2 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 80317f2:	6821      	ldr	r1, [r4, #0]
 80317f4:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 80317f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80317fc:	f80c 0002 	strb.w	r0, [ip, r2]
 8031800:	1c53      	adds	r3, r2, #1
 8031802:	6862      	ldr	r2, [r4, #4]
 8031804:	3a01      	subs	r2, #1
 8031806:	e9c4 1200 	strd	r1, r2, [r4]
 803180a:	69ba      	ldr	r2, [r7, #24]
 803180c:	2a03      	cmp	r2, #3
 803180e:	d102      	bne.n	8031816 <__ssvfiscanf_r+0x3ee>
 8031810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8031812:	2a04      	cmp	r2, #4
 8031814:	d007      	beq.n	8031826 <__ssvfiscanf_r+0x3fe>
 8031816:	2208      	movs	r2, #8
 8031818:	2100      	movs	r1, #0
 803181a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803181e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031820:	f7fc f876 	bl	802d910 <memset>
 8031824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031826:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803182a:	9200      	str	r2, [sp, #0]
 803182c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803182e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031830:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031834:	4629      	mov	r1, r5
 8031836:	f005 f87f 	bl	8036938 <_mbrtowc_r>
 803183a:	4603      	mov	r3, r0
 803183c:	61b8      	str	r0, [r7, #24]
 803183e:	1c58      	adds	r0, r3, #1
 8031840:	f43f aea9 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031844:	461a      	mov	r2, r3
 8031846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031848:	b9b2      	cbnz	r2, 8031878 <__ssvfiscanf_r+0x450>
 803184a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803184c:	441a      	add	r2, r3
 803184e:	4613      	mov	r3, r2
 8031850:	693a      	ldr	r2, [r7, #16]
 8031852:	b172      	cbz	r2, 8031872 <__ssvfiscanf_r+0x44a>
 8031854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031856:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803185a:	e019      	b.n	8031890 <__ssvfiscanf_r+0x468>
 803185c:	f04f 0900 	mov.w	r9, #0
 8031860:	464e      	mov	r6, r9
 8031862:	46ca      	mov	sl, r9
 8031864:	464d      	mov	r5, r9
 8031866:	e7bc      	b.n	80317e2 <__ssvfiscanf_r+0x3ba>
 8031868:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803186c:	464e      	mov	r6, r9
 803186e:	46ca      	mov	sl, r9
 8031870:	e7b7      	b.n	80317e2 <__ssvfiscanf_r+0x3ba>
 8031872:	693a      	ldr	r2, [r7, #16]
 8031874:	602a      	str	r2, [r5, #0]
 8031876:	e7ed      	b.n	8031854 <__ssvfiscanf_r+0x42c>
 8031878:	69ba      	ldr	r2, [r7, #24]
 803187a:	3202      	adds	r2, #2
 803187c:	d024      	beq.n	80318c8 <__ssvfiscanf_r+0x4a0>
 803187e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031880:	441a      	add	r2, r3
 8031882:	69bb      	ldr	r3, [r7, #24]
 8031884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031886:	2b03      	cmp	r3, #3
 8031888:	d1e5      	bne.n	8031856 <__ssvfiscanf_r+0x42e>
 803188a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803188c:	2b04      	cmp	r3, #4
 803188e:	d1e2      	bne.n	8031856 <__ssvfiscanf_r+0x42e>
 8031890:	693b      	ldr	r3, [r7, #16]
 8031892:	b9bb      	cbnz	r3, 80318c4 <__ssvfiscanf_r+0x49c>
 8031894:	f1ba 0f00 	cmp.w	sl, #0
 8031898:	d013      	beq.n	80318c2 <__ssvfiscanf_r+0x49a>
 803189a:	1bab      	subs	r3, r5, r6
 803189c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80318a0:	d80f      	bhi.n	80318c2 <__ssvfiscanf_r+0x49a>
 80318a2:	4630      	mov	r0, r6
 80318a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80318a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80318aa:	f003 fd31 	bl	8035310 <realloc>
 80318ae:	4606      	mov	r6, r0
 80318b0:	2800      	cmp	r0, #0
 80318b2:	f43f af09 	beq.w	80316c8 <__ssvfiscanf_r+0x2a0>
 80318b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80318b8:	f8ca 0000 	str.w	r0, [sl]
 80318bc:	18c5      	adds	r5, r0, r3
 80318be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80318c2:	3504      	adds	r5, #4
 80318c4:	2200      	movs	r2, #0
 80318c6:	e000      	b.n	80318ca <__ssvfiscanf_r+0x4a2>
 80318c8:	461a      	mov	r2, r3
 80318ca:	6863      	ldr	r3, [r4, #4]
 80318cc:	2b00      	cmp	r3, #0
 80318ce:	dc13      	bgt.n	80318f8 <__ssvfiscanf_r+0x4d0>
 80318d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80318d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80318d4:	4621      	mov	r1, r4
 80318d6:	f7ff fd50 	bl	803137a <__ssrefill_r>
 80318da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80318dc:	b160      	cbz	r0, 80318f8 <__ssvfiscanf_r+0x4d0>
 80318de:	2a00      	cmp	r2, #0
 80318e0:	f47f ae59 	bne.w	8031596 <__ssvfiscanf_r+0x16e>
 80318e4:	f1ba 0f00 	cmp.w	sl, #0
 80318e8:	d10b      	bne.n	8031902 <__ssvfiscanf_r+0x4da>
 80318ea:	693b      	ldr	r3, [r7, #16]
 80318ec:	2b00      	cmp	r3, #0
 80318ee:	f47f adbc 	bne.w	803146a <__ssvfiscanf_r+0x42>
 80318f2:	69fb      	ldr	r3, [r7, #28]
 80318f4:	3301      	adds	r3, #1
 80318f6:	e5b0      	b.n	803145a <__ssvfiscanf_r+0x32>
 80318f8:	f1b8 0f00 	cmp.w	r8, #0
 80318fc:	f47f af72 	bne.w	80317e4 <__ssvfiscanf_r+0x3bc>
 8031900:	e7f0      	b.n	80318e4 <__ssvfiscanf_r+0x4bc>
 8031902:	1ba9      	subs	r1, r5, r6
 8031904:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8031908:	d9ef      	bls.n	80318ea <__ssvfiscanf_r+0x4c2>
 803190a:	f8da 0000 	ldr.w	r0, [sl]
 803190e:	f003 fcff 	bl	8035310 <realloc>
 8031912:	2800      	cmp	r0, #0
 8031914:	d0e9      	beq.n	80318ea <__ssvfiscanf_r+0x4c2>
 8031916:	f8ca 0000 	str.w	r0, [sl]
 803191a:	e7e6      	b.n	80318ea <__ssvfiscanf_r+0x4c2>
 803191c:	b1db      	cbz	r3, 8031956 <__ssvfiscanf_r+0x52e>
 803191e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8031922:	4598      	cmp	r8, r3
 8031924:	dd10      	ble.n	8031948 <__ssvfiscanf_r+0x520>
 8031926:	441a      	add	r2, r3
 8031928:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803192a:	6022      	str	r2, [r4, #0]
 803192c:	4621      	mov	r1, r4
 803192e:	441d      	add	r5, r3
 8031930:	eba8 0803 	sub.w	r8, r8, r3
 8031934:	f7ff fd21 	bl	803137a <__ssrefill_r>
 8031938:	2800      	cmp	r0, #0
 803193a:	d0f0      	beq.n	803191e <__ssvfiscanf_r+0x4f6>
 803193c:	2d00      	cmp	r5, #0
 803193e:	f43f ae2a 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031944:	442b      	add	r3, r5
 8031946:	e201      	b.n	8031d4c <__ssvfiscanf_r+0x924>
 8031948:	eba3 0308 	sub.w	r3, r3, r8
 803194c:	4442      	add	r2, r8
 803194e:	4445      	add	r5, r8
 8031950:	6063      	str	r3, [r4, #4]
 8031952:	6022      	str	r2, [r4, #0]
 8031954:	e7f5      	b.n	8031942 <__ssvfiscanf_r+0x51a>
 8031956:	6a3b      	ldr	r3, [r7, #32]
 8031958:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803195c:	f853 5b04 	ldr.w	r5, [r3], #4
 8031960:	623b      	str	r3, [r7, #32]
 8031962:	d02d      	beq.n	80319c0 <__ssvfiscanf_r+0x598>
 8031964:	2d00      	cmp	r5, #0
 8031966:	f43f adac 	beq.w	80314c2 <__ssvfiscanf_r+0x9a>
 803196a:	4640      	mov	r0, r8
 803196c:	f7fe fd46 	bl	80303fc <malloc>
 8031970:	4681      	mov	r9, r0
 8031972:	2800      	cmp	r0, #0
 8031974:	f43f ae14 	beq.w	80315a0 <__ssvfiscanf_r+0x178>
 8031978:	f8bb a006 	ldrh.w	sl, [fp, #6]
 803197c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8031980:	6028      	str	r0, [r5, #0]
 8031982:	45b2      	cmp	sl, r6
 8031984:	d312      	bcc.n	80319ac <__ssvfiscanf_r+0x584>
 8031986:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803198a:	429e      	cmp	r6, r3
 803198c:	f200 8460 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 8031990:	3608      	adds	r6, #8
 8031992:	b2b6      	uxth	r6, r6
 8031994:	f8db 0000 	ldr.w	r0, [fp]
 8031998:	00b1      	lsls	r1, r6, #2
 803199a:	f003 fcb9 	bl	8035310 <realloc>
 803199e:	2800      	cmp	r0, #0
 80319a0:	f000 8456 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 80319a4:	f8cb 0000 	str.w	r0, [fp]
 80319a8:	f8ab 6004 	strh.w	r6, [fp, #4]
 80319ac:	f8db 3000 	ldr.w	r3, [fp]
 80319b0:	f10a 0201 	add.w	r2, sl, #1
 80319b4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80319b8:	462e      	mov	r6, r5
 80319ba:	f8ab 2006 	strh.w	r2, [fp, #6]
 80319be:	464d      	mov	r5, r9
 80319c0:	9400      	str	r4, [sp, #0]
 80319c2:	4629      	mov	r1, r5
 80319c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80319c6:	4643      	mov	r3, r8
 80319c8:	2201      	movs	r2, #1
 80319ca:	f7ff fcf3 	bl	80313b4 <_sfread_r>
 80319ce:	4605      	mov	r5, r0
 80319d0:	2800      	cmp	r0, #0
 80319d2:	f43f ade0 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 80319d6:	b13e      	cbz	r6, 80319e8 <__ssvfiscanf_r+0x5c0>
 80319d8:	4580      	cmp	r8, r0
 80319da:	d905      	bls.n	80319e8 <__ssvfiscanf_r+0x5c0>
 80319dc:	4601      	mov	r1, r0
 80319de:	6830      	ldr	r0, [r6, #0]
 80319e0:	f003 fc96 	bl	8035310 <realloc>
 80319e4:	b100      	cbz	r0, 80319e8 <__ssvfiscanf_r+0x5c0>
 80319e6:	6030      	str	r0, [r6, #0]
 80319e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80319ea:	442b      	add	r3, r5
 80319ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80319ee:	e780      	b.n	80318f2 <__ssvfiscanf_r+0x4ca>
 80319f0:	0802d019 	.word	0x0802d019
 80319f4:	0803d6c9 	.word	0x0803d6c9
 80319f8:	2b00      	cmp	r3, #0
 80319fa:	bf08      	it	eq
 80319fc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031a02:	693b      	ldr	r3, [r7, #16]
 8031a04:	2d00      	cmp	r5, #0
 8031a06:	f000 8100 	beq.w	8031c0a <__ssvfiscanf_r+0x7e2>
 8031a0a:	2b00      	cmp	r3, #0
 8031a0c:	f040 80a5 	bne.w	8031b5a <__ssvfiscanf_r+0x732>
 8031a10:	6a3b      	ldr	r3, [r7, #32]
 8031a12:	0631      	lsls	r1, r6, #24
 8031a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8031a18:	623b      	str	r3, [r7, #32]
 8031a1a:	f140 80a5 	bpl.w	8031b68 <__ssvfiscanf_r+0x740>
 8031a1e:	2d00      	cmp	r5, #0
 8031a20:	f43f ae55 	beq.w	80316ce <__ssvfiscanf_r+0x2a6>
 8031a24:	2080      	movs	r0, #128	@ 0x80
 8031a26:	f7fe fce9 	bl	80303fc <malloc>
 8031a2a:	4680      	mov	r8, r0
 8031a2c:	2800      	cmp	r0, #0
 8031a2e:	f43f ae4b 	beq.w	80316c8 <__ssvfiscanf_r+0x2a0>
 8031a32:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8031a36:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8031a3a:	6028      	str	r0, [r5, #0]
 8031a3c:	429e      	cmp	r6, r3
 8031a3e:	d314      	bcc.n	8031a6a <__ssvfiscanf_r+0x642>
 8031a40:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031a44:	4293      	cmp	r3, r2
 8031a46:	f200 8403 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 8031a4a:	3308      	adds	r3, #8
 8031a4c:	fa1f f983 	uxth.w	r9, r3
 8031a50:	f8db 0000 	ldr.w	r0, [fp]
 8031a54:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8031a58:	f003 fc5a 	bl	8035310 <realloc>
 8031a5c:	2800      	cmp	r0, #0
 8031a5e:	f000 83f7 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 8031a62:	f8cb 0000 	str.w	r0, [fp]
 8031a66:	f8ab 9004 	strh.w	r9, [fp, #4]
 8031a6a:	f8db 3000 	ldr.w	r3, [fp]
 8031a6e:	1c72      	adds	r2, r6, #1
 8031a70:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8031a74:	46aa      	mov	sl, r5
 8031a76:	f8ab 2006 	strh.w	r2, [fp, #6]
 8031a7a:	4645      	mov	r5, r8
 8031a7c:	f04f 0920 	mov.w	r9, #32
 8031a80:	2600      	movs	r6, #0
 8031a82:	f7fd fbf7 	bl	802f274 <__locale_mb_cur_max>
 8031a86:	4286      	cmp	r6, r0
 8031a88:	f43f ad85 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031a8c:	1c73      	adds	r3, r6, #1
 8031a8e:	607b      	str	r3, [r7, #4]
 8031a90:	6823      	ldr	r3, [r4, #0]
 8031a92:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031a9a:	558a      	strb	r2, [r1, r6]
 8031a9c:	6862      	ldr	r2, [r4, #4]
 8031a9e:	3a01      	subs	r2, #1
 8031aa0:	e9c4 3200 	strd	r3, r2, [r4]
 8031aa4:	69bb      	ldr	r3, [r7, #24]
 8031aa6:	2b03      	cmp	r3, #3
 8031aa8:	d102      	bne.n	8031ab0 <__ssvfiscanf_r+0x688>
 8031aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8031aac:	2b04      	cmp	r3, #4
 8031aae:	d005      	beq.n	8031abc <__ssvfiscanf_r+0x694>
 8031ab0:	2208      	movs	r2, #8
 8031ab2:	2100      	movs	r1, #0
 8031ab4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8031ab8:	f7fb ff2a 	bl	802d910 <memset>
 8031abc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8031ac0:	9300      	str	r3, [sp, #0]
 8031ac2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031ac6:	687b      	ldr	r3, [r7, #4]
 8031ac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031aca:	4629      	mov	r1, r5
 8031acc:	f004 ff34 	bl	8036938 <_mbrtowc_r>
 8031ad0:	1c42      	adds	r2, r0, #1
 8031ad2:	61b8      	str	r0, [r7, #24]
 8031ad4:	f43f ad5f 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031ad8:	2800      	cmp	r0, #0
 8031ada:	d14a      	bne.n	8031b72 <__ssvfiscanf_r+0x74a>
 8031adc:	6028      	str	r0, [r5, #0]
 8031ade:	682e      	ldr	r6, [r5, #0]
 8031ae0:	1c73      	adds	r3, r6, #1
 8031ae2:	d056      	beq.n	8031b92 <__ssvfiscanf_r+0x76a>
 8031ae4:	2208      	movs	r2, #8
 8031ae6:	2100      	movs	r1, #0
 8031ae8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8031aec:	f7fb ff10 	bl	802d910 <memset>
 8031af0:	4b99      	ldr	r3, [pc, #612]	@ (8031d58 <__ssvfiscanf_r+0x930>)
 8031af2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8031af8:	603b      	str	r3, [r7, #0]
 8031afa:	4632      	mov	r2, r6
 8031afc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8031b00:	683e      	ldr	r6, [r7, #0]
 8031b02:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8031b06:	47b0      	blx	r6
 8031b08:	2801      	cmp	r0, #1
 8031b0a:	d144      	bne.n	8031b96 <__ssvfiscanf_r+0x76e>
 8031b0c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8031b10:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8031b14:	5c9b      	ldrb	r3, [r3, r2]
 8031b16:	2b00      	cmp	r3, #0
 8031b18:	d148      	bne.n	8031bac <__ssvfiscanf_r+0x784>
 8031b1a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 8031b1e:	687b      	ldr	r3, [r7, #4]
 8031b20:	2b00      	cmp	r3, #0
 8031b22:	d13a      	bne.n	8031b9a <__ssvfiscanf_r+0x772>
 8031b24:	693b      	ldr	r3, [r7, #16]
 8031b26:	2b00      	cmp	r3, #0
 8031b28:	f47f ac9f 	bne.w	803146a <__ssvfiscanf_r+0x42>
 8031b2c:	602b      	str	r3, [r5, #0]
 8031b2e:	f1ba 0f00 	cmp.w	sl, #0
 8031b32:	f43f aede 	beq.w	80318f2 <__ssvfiscanf_r+0x4ca>
 8031b36:	eba5 0108 	sub.w	r1, r5, r8
 8031b3a:	108b      	asrs	r3, r1, #2
 8031b3c:	3301      	adds	r3, #1
 8031b3e:	4599      	cmp	r9, r3
 8031b40:	f67f aed7 	bls.w	80318f2 <__ssvfiscanf_r+0x4ca>
 8031b44:	f8da 0000 	ldr.w	r0, [sl]
 8031b48:	3104      	adds	r1, #4
 8031b4a:	f003 fbe1 	bl	8035310 <realloc>
 8031b4e:	2800      	cmp	r0, #0
 8031b50:	f43f aecf 	beq.w	80318f2 <__ssvfiscanf_r+0x4ca>
 8031b54:	f8ca 0000 	str.w	r0, [sl]
 8031b58:	e6cb      	b.n	80318f2 <__ssvfiscanf_r+0x4ca>
 8031b5a:	f04f 0900 	mov.w	r9, #0
 8031b5e:	46c8      	mov	r8, r9
 8031b60:	46ca      	mov	sl, r9
 8031b62:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8031b66:	e78b      	b.n	8031a80 <__ssvfiscanf_r+0x658>
 8031b68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8031b6c:	46c8      	mov	r8, r9
 8031b6e:	46ca      	mov	sl, r9
 8031b70:	e786      	b.n	8031a80 <__ssvfiscanf_r+0x658>
 8031b72:	69bb      	ldr	r3, [r7, #24]
 8031b74:	3302      	adds	r3, #2
 8031b76:	d1b2      	bne.n	8031ade <__ssvfiscanf_r+0x6b6>
 8031b78:	687e      	ldr	r6, [r7, #4]
 8031b7a:	6863      	ldr	r3, [r4, #4]
 8031b7c:	2b00      	cmp	r3, #0
 8031b7e:	dc3f      	bgt.n	8031c00 <__ssvfiscanf_r+0x7d8>
 8031b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031b82:	4621      	mov	r1, r4
 8031b84:	f7ff fbf9 	bl	803137a <__ssrefill_r>
 8031b88:	2800      	cmp	r0, #0
 8031b8a:	d039      	beq.n	8031c00 <__ssvfiscanf_r+0x7d8>
 8031b8c:	2e00      	cmp	r6, #0
 8031b8e:	d0c9      	beq.n	8031b24 <__ssvfiscanf_r+0x6fc>
 8031b90:	e501      	b.n	8031596 <__ssvfiscanf_r+0x16e>
 8031b92:	4632      	mov	r2, r6
 8031b94:	e7bc      	b.n	8031b10 <__ssvfiscanf_r+0x6e8>
 8031b96:	2200      	movs	r2, #0
 8031b98:	e7ba      	b.n	8031b10 <__ssvfiscanf_r+0x6e8>
 8031b9a:	687b      	ldr	r3, [r7, #4]
 8031b9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031b9e:	3b01      	subs	r3, #1
 8031ba0:	4622      	mov	r2, r4
 8031ba2:	5cf1      	ldrb	r1, [r6, r3]
 8031ba4:	607b      	str	r3, [r7, #4]
 8031ba6:	f7ff fbad 	bl	8031304 <_sungetc_r>
 8031baa:	e7b8      	b.n	8031b1e <__ssvfiscanf_r+0x6f6>
 8031bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031bae:	687a      	ldr	r2, [r7, #4]
 8031bb0:	4413      	add	r3, r2
 8031bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031bb4:	69bb      	ldr	r3, [r7, #24]
 8031bb6:	2b03      	cmp	r3, #3
 8031bb8:	d102      	bne.n	8031bc0 <__ssvfiscanf_r+0x798>
 8031bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8031bbc:	2b04      	cmp	r3, #4
 8031bbe:	d002      	beq.n	8031bc6 <__ssvfiscanf_r+0x79e>
 8031bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031bc2:	3b01      	subs	r3, #1
 8031bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031bc6:	693b      	ldr	r3, [r7, #16]
 8031bc8:	b9c3      	cbnz	r3, 8031bfc <__ssvfiscanf_r+0x7d4>
 8031bca:	3504      	adds	r5, #4
 8031bcc:	f1ba 0f00 	cmp.w	sl, #0
 8031bd0:	d014      	beq.n	8031bfc <__ssvfiscanf_r+0x7d4>
 8031bd2:	eba5 0608 	sub.w	r6, r5, r8
 8031bd6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8031bda:	d80d      	bhi.n	8031bf8 <__ssvfiscanf_r+0x7d0>
 8031bdc:	4640      	mov	r0, r8
 8031bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031be2:	f003 fb95 	bl	8035310 <realloc>
 8031be6:	4680      	mov	r8, r0
 8031be8:	2800      	cmp	r0, #0
 8031bea:	f43f ad6d 	beq.w	80316c8 <__ssvfiscanf_r+0x2a0>
 8031bee:	1985      	adds	r5, r0, r6
 8031bf0:	f8ca 0000 	str.w	r0, [sl]
 8031bf4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031bf8:	693e      	ldr	r6, [r7, #16]
 8031bfa:	e7be      	b.n	8031b7a <__ssvfiscanf_r+0x752>
 8031bfc:	2600      	movs	r6, #0
 8031bfe:	e7bc      	b.n	8031b7a <__ssvfiscanf_r+0x752>
 8031c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031c02:	2b00      	cmp	r3, #0
 8031c04:	f47f af3d 	bne.w	8031a82 <__ssvfiscanf_r+0x65a>
 8031c08:	e78c      	b.n	8031b24 <__ssvfiscanf_r+0x6fc>
 8031c0a:	b1e3      	cbz	r3, 8031c46 <__ssvfiscanf_r+0x81e>
 8031c0c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8031c10:	6823      	ldr	r3, [r4, #0]
 8031c12:	781a      	ldrb	r2, [r3, #0]
 8031c14:	5cb2      	ldrb	r2, [r6, r2]
 8031c16:	b91a      	cbnz	r2, 8031c20 <__ssvfiscanf_r+0x7f8>
 8031c18:	2d00      	cmp	r5, #0
 8031c1a:	f47f ae92 	bne.w	8031942 <__ssvfiscanf_r+0x51a>
 8031c1e:	e450      	b.n	80314c2 <__ssvfiscanf_r+0x9a>
 8031c20:	3301      	adds	r3, #1
 8031c22:	6862      	ldr	r2, [r4, #4]
 8031c24:	6023      	str	r3, [r4, #0]
 8031c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031c28:	3501      	adds	r5, #1
 8031c2a:	3a01      	subs	r2, #1
 8031c2c:	42ab      	cmp	r3, r5
 8031c2e:	6062      	str	r2, [r4, #4]
 8031c30:	f43f ae87 	beq.w	8031942 <__ssvfiscanf_r+0x51a>
 8031c34:	2a00      	cmp	r2, #0
 8031c36:	dceb      	bgt.n	8031c10 <__ssvfiscanf_r+0x7e8>
 8031c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031c3a:	4621      	mov	r1, r4
 8031c3c:	f7ff fb9d 	bl	803137a <__ssrefill_r>
 8031c40:	2800      	cmp	r0, #0
 8031c42:	d0e5      	beq.n	8031c10 <__ssvfiscanf_r+0x7e8>
 8031c44:	e67d      	b.n	8031942 <__ssvfiscanf_r+0x51a>
 8031c46:	6a3b      	ldr	r3, [r7, #32]
 8031c48:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8031c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8031c50:	623b      	str	r3, [r7, #32]
 8031c52:	d07e      	beq.n	8031d52 <__ssvfiscanf_r+0x92a>
 8031c54:	2d00      	cmp	r5, #0
 8031c56:	f43f ac34 	beq.w	80314c2 <__ssvfiscanf_r+0x9a>
 8031c5a:	2020      	movs	r0, #32
 8031c5c:	f7fe fbce 	bl	80303fc <malloc>
 8031c60:	4680      	mov	r8, r0
 8031c62:	2800      	cmp	r0, #0
 8031c64:	f43f ac9c 	beq.w	80315a0 <__ssvfiscanf_r+0x178>
 8031c68:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031c6c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8031c70:	6028      	str	r0, [r5, #0]
 8031c72:	45b1      	cmp	r9, r6
 8031c74:	d312      	bcc.n	8031c9c <__ssvfiscanf_r+0x874>
 8031c76:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031c7a:	429e      	cmp	r6, r3
 8031c7c:	f200 82e8 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 8031c80:	3608      	adds	r6, #8
 8031c82:	b2b6      	uxth	r6, r6
 8031c84:	f8db 0000 	ldr.w	r0, [fp]
 8031c88:	00b1      	lsls	r1, r6, #2
 8031c8a:	f003 fb41 	bl	8035310 <realloc>
 8031c8e:	2800      	cmp	r0, #0
 8031c90:	f000 82de 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 8031c94:	f8cb 0000 	str.w	r0, [fp]
 8031c98:	f8ab 6004 	strh.w	r6, [fp, #4]
 8031c9c:	f8db 3000 	ldr.w	r3, [fp]
 8031ca0:	f109 0201 	add.w	r2, r9, #1
 8031ca4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031ca8:	46aa      	mov	sl, r5
 8031caa:	f8ab 2006 	strh.w	r2, [fp, #6]
 8031cae:	4645      	mov	r5, r8
 8031cb0:	f04f 0920 	mov.w	r9, #32
 8031cb4:	462e      	mov	r6, r5
 8031cb6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8031cba:	6823      	ldr	r3, [r4, #0]
 8031cbc:	781a      	ldrb	r2, [r3, #0]
 8031cbe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8031cc2:	b362      	cbz	r2, 8031d1e <__ssvfiscanf_r+0x8f6>
 8031cc4:	6862      	ldr	r2, [r4, #4]
 8031cc6:	3a01      	subs	r2, #1
 8031cc8:	6062      	str	r2, [r4, #4]
 8031cca:	1c5a      	adds	r2, r3, #1
 8031ccc:	6022      	str	r2, [r4, #0]
 8031cce:	781b      	ldrb	r3, [r3, #0]
 8031cd0:	f805 3b01 	strb.w	r3, [r5], #1
 8031cd4:	f1ba 0f00 	cmp.w	sl, #0
 8031cd8:	d011      	beq.n	8031cfe <__ssvfiscanf_r+0x8d6>
 8031cda:	1bab      	subs	r3, r5, r6
 8031cdc:	454b      	cmp	r3, r9
 8031cde:	d30e      	bcc.n	8031cfe <__ssvfiscanf_r+0x8d6>
 8031ce0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031ce4:	4630      	mov	r0, r6
 8031ce6:	4649      	mov	r1, r9
 8031ce8:	613b      	str	r3, [r7, #16]
 8031cea:	f003 fb11 	bl	8035310 <realloc>
 8031cee:	4606      	mov	r6, r0
 8031cf0:	2800      	cmp	r0, #0
 8031cf2:	f43f ac55 	beq.w	80315a0 <__ssvfiscanf_r+0x178>
 8031cf6:	693b      	ldr	r3, [r7, #16]
 8031cf8:	f8ca 0000 	str.w	r0, [sl]
 8031cfc:	18c5      	adds	r5, r0, r3
 8031cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031d00:	3b01      	subs	r3, #1
 8031d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031d04:	d00b      	beq.n	8031d1e <__ssvfiscanf_r+0x8f6>
 8031d06:	6863      	ldr	r3, [r4, #4]
 8031d08:	2b00      	cmp	r3, #0
 8031d0a:	dcd6      	bgt.n	8031cba <__ssvfiscanf_r+0x892>
 8031d0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031d0e:	4621      	mov	r1, r4
 8031d10:	f7ff fb33 	bl	803137a <__ssrefill_r>
 8031d14:	2800      	cmp	r0, #0
 8031d16:	d0d0      	beq.n	8031cba <__ssvfiscanf_r+0x892>
 8031d18:	42b5      	cmp	r5, r6
 8031d1a:	f43f ac3c 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031d1e:	1bae      	subs	r6, r5, r6
 8031d20:	f43f abcf 	beq.w	80314c2 <__ssvfiscanf_r+0x9a>
 8031d24:	2300      	movs	r3, #0
 8031d26:	702b      	strb	r3, [r5, #0]
 8031d28:	f1ba 0f00 	cmp.w	sl, #0
 8031d2c:	d009      	beq.n	8031d42 <__ssvfiscanf_r+0x91a>
 8031d2e:	1c71      	adds	r1, r6, #1
 8031d30:	4589      	cmp	r9, r1
 8031d32:	d906      	bls.n	8031d42 <__ssvfiscanf_r+0x91a>
 8031d34:	f8da 0000 	ldr.w	r0, [sl]
 8031d38:	f003 faea 	bl	8035310 <realloc>
 8031d3c:	b108      	cbz	r0, 8031d42 <__ssvfiscanf_r+0x91a>
 8031d3e:	f8ca 0000 	str.w	r0, [sl]
 8031d42:	69fb      	ldr	r3, [r7, #28]
 8031d44:	3301      	adds	r3, #1
 8031d46:	61fb      	str	r3, [r7, #28]
 8031d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031d4a:	4433      	add	r3, r6
 8031d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031d4e:	f7ff bb8c 	b.w	803146a <__ssvfiscanf_r+0x42>
 8031d52:	46ca      	mov	sl, r9
 8031d54:	e7ae      	b.n	8031cb4 <__ssvfiscanf_r+0x88c>
 8031d56:	bf00      	nop
 8031d58:	2000016c 	.word	0x2000016c
 8031d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031d5e:	2b00      	cmp	r3, #0
 8031d60:	bf08      	it	eq
 8031d62:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031d66:	f016 0501 	ands.w	r5, r6, #1
 8031d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031d6c:	f006 0810 	and.w	r8, r6, #16
 8031d70:	f000 80e1 	beq.w	8031f36 <__ssvfiscanf_r+0xb0e>
 8031d74:	f1b8 0f00 	cmp.w	r8, #0
 8031d78:	f040 8089 	bne.w	8031e8e <__ssvfiscanf_r+0xa66>
 8031d7c:	6a3b      	ldr	r3, [r7, #32]
 8031d7e:	0636      	lsls	r6, r6, #24
 8031d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8031d84:	623b      	str	r3, [r7, #32]
 8031d86:	f140 8089 	bpl.w	8031e9c <__ssvfiscanf_r+0xa74>
 8031d8a:	2d00      	cmp	r5, #0
 8031d8c:	f43f ac9f 	beq.w	80316ce <__ssvfiscanf_r+0x2a6>
 8031d90:	2080      	movs	r0, #128	@ 0x80
 8031d92:	f7fe fb33 	bl	80303fc <malloc>
 8031d96:	4606      	mov	r6, r0
 8031d98:	2800      	cmp	r0, #0
 8031d9a:	f43f ac95 	beq.w	80316c8 <__ssvfiscanf_r+0x2a0>
 8031d9e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031da2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8031da6:	6028      	str	r0, [r5, #0]
 8031da8:	4599      	cmp	r9, r3
 8031daa:	d314      	bcc.n	8031dd6 <__ssvfiscanf_r+0x9ae>
 8031dac:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031db0:	4293      	cmp	r3, r2
 8031db2:	f200 824d 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 8031db6:	3308      	adds	r3, #8
 8031db8:	fa1f fa83 	uxth.w	sl, r3
 8031dbc:	f8db 0000 	ldr.w	r0, [fp]
 8031dc0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8031dc4:	f003 faa4 	bl	8035310 <realloc>
 8031dc8:	2800      	cmp	r0, #0
 8031dca:	f000 8241 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 8031dce:	f8cb 0000 	str.w	r0, [fp]
 8031dd2:	f8ab a004 	strh.w	sl, [fp, #4]
 8031dd6:	f8db 3000 	ldr.w	r3, [fp]
 8031dda:	f109 0201 	add.w	r2, r9, #1
 8031dde:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031de2:	46aa      	mov	sl, r5
 8031de4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8031de8:	4635      	mov	r5, r6
 8031dea:	f04f 0920 	mov.w	r9, #32
 8031dee:	2300      	movs	r3, #0
 8031df0:	6822      	ldr	r2, [r4, #0]
 8031df2:	499e      	ldr	r1, [pc, #632]	@ (803206c <__ssvfiscanf_r+0xc44>)
 8031df4:	7812      	ldrb	r2, [r2, #0]
 8031df6:	5c8a      	ldrb	r2, [r1, r2]
 8031df8:	0711      	lsls	r1, r2, #28
 8031dfa:	d43c      	bmi.n	8031e76 <__ssvfiscanf_r+0xa4e>
 8031dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8031dfe:	2a00      	cmp	r2, #0
 8031e00:	d039      	beq.n	8031e76 <__ssvfiscanf_r+0xa4e>
 8031e02:	613b      	str	r3, [r7, #16]
 8031e04:	f7fd fa36 	bl	802f274 <__locale_mb_cur_max>
 8031e08:	693b      	ldr	r3, [r7, #16]
 8031e0a:	4298      	cmp	r0, r3
 8031e0c:	f43f abc3 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031e10:	1c5a      	adds	r2, r3, #1
 8031e12:	613a      	str	r2, [r7, #16]
 8031e14:	6822      	ldr	r2, [r4, #0]
 8031e16:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031e1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8031e1e:	54c8      	strb	r0, [r1, r3]
 8031e20:	6863      	ldr	r3, [r4, #4]
 8031e22:	3b01      	subs	r3, #1
 8031e24:	e9c4 2300 	strd	r2, r3, [r4]
 8031e28:	69bb      	ldr	r3, [r7, #24]
 8031e2a:	2b03      	cmp	r3, #3
 8031e2c:	d102      	bne.n	8031e34 <__ssvfiscanf_r+0xa0c>
 8031e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031e30:	2b04      	cmp	r3, #4
 8031e32:	d005      	beq.n	8031e40 <__ssvfiscanf_r+0xa18>
 8031e34:	2208      	movs	r2, #8
 8031e36:	2100      	movs	r1, #0
 8031e38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8031e3c:	f7fb fd68 	bl	802d910 <memset>
 8031e40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8031e44:	9300      	str	r3, [sp, #0]
 8031e46:	693b      	ldr	r3, [r7, #16]
 8031e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031e4a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031e4e:	4629      	mov	r1, r5
 8031e50:	f004 fd72 	bl	8036938 <_mbrtowc_r>
 8031e54:	4603      	mov	r3, r0
 8031e56:	61b8      	str	r0, [r7, #24]
 8031e58:	1c58      	adds	r0, r3, #1
 8031e5a:	f43f ab9c 	beq.w	8031596 <__ssvfiscanf_r+0x16e>
 8031e5e:	bb0b      	cbnz	r3, 8031ea4 <__ssvfiscanf_r+0xa7c>
 8031e60:	602b      	str	r3, [r5, #0]
 8031e62:	6828      	ldr	r0, [r5, #0]
 8031e64:	f004 fd82 	bl	803696c <iswspace>
 8031e68:	4603      	mov	r3, r0
 8031e6a:	2800      	cmp	r0, #0
 8031e6c:	d037      	beq.n	8031ede <__ssvfiscanf_r+0xab6>
 8031e6e:	693a      	ldr	r2, [r7, #16]
 8031e70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031e74:	bb4a      	cbnz	r2, 8031eca <__ssvfiscanf_r+0xaa2>
 8031e76:	f1b8 0f00 	cmp.w	r8, #0
 8031e7a:	f47f aaf6 	bne.w	803146a <__ssvfiscanf_r+0x42>
 8031e7e:	f8c5 8000 	str.w	r8, [r5]
 8031e82:	f1ba 0f00 	cmp.w	sl, #0
 8031e86:	f43f ad34 	beq.w	80318f2 <__ssvfiscanf_r+0x4ca>
 8031e8a:	1ba9      	subs	r1, r5, r6
 8031e8c:	e655      	b.n	8031b3a <__ssvfiscanf_r+0x712>
 8031e8e:	f04f 0900 	mov.w	r9, #0
 8031e92:	464e      	mov	r6, r9
 8031e94:	46ca      	mov	sl, r9
 8031e96:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8031e9a:	e7a8      	b.n	8031dee <__ssvfiscanf_r+0x9c6>
 8031e9c:	46c1      	mov	r9, r8
 8031e9e:	4646      	mov	r6, r8
 8031ea0:	46c2      	mov	sl, r8
 8031ea2:	e7a4      	b.n	8031dee <__ssvfiscanf_r+0x9c6>
 8031ea4:	69bb      	ldr	r3, [r7, #24]
 8031ea6:	3302      	adds	r3, #2
 8031ea8:	d1db      	bne.n	8031e62 <__ssvfiscanf_r+0xa3a>
 8031eaa:	693b      	ldr	r3, [r7, #16]
 8031eac:	6862      	ldr	r2, [r4, #4]
 8031eae:	2a00      	cmp	r2, #0
 8031eb0:	dc9e      	bgt.n	8031df0 <__ssvfiscanf_r+0x9c8>
 8031eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031eb4:	613b      	str	r3, [r7, #16]
 8031eb6:	4621      	mov	r1, r4
 8031eb8:	f7ff fa5f 	bl	803137a <__ssrefill_r>
 8031ebc:	693b      	ldr	r3, [r7, #16]
 8031ebe:	2800      	cmp	r0, #0
 8031ec0:	d096      	beq.n	8031df0 <__ssvfiscanf_r+0x9c8>
 8031ec2:	2b00      	cmp	r3, #0
 8031ec4:	f47f ab67 	bne.w	8031596 <__ssvfiscanf_r+0x16e>
 8031ec8:	e7d5      	b.n	8031e76 <__ssvfiscanf_r+0xa4e>
 8031eca:	693a      	ldr	r2, [r7, #16]
 8031ecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031ece:	3a01      	subs	r2, #1
 8031ed0:	613a      	str	r2, [r7, #16]
 8031ed2:	6939      	ldr	r1, [r7, #16]
 8031ed4:	4622      	mov	r2, r4
 8031ed6:	5c59      	ldrb	r1, [r3, r1]
 8031ed8:	f7ff fa14 	bl	8031304 <_sungetc_r>
 8031edc:	e7c7      	b.n	8031e6e <__ssvfiscanf_r+0xa46>
 8031ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031ee0:	6939      	ldr	r1, [r7, #16]
 8031ee2:	440a      	add	r2, r1
 8031ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031ee6:	69ba      	ldr	r2, [r7, #24]
 8031ee8:	2a03      	cmp	r2, #3
 8031eea:	d102      	bne.n	8031ef2 <__ssvfiscanf_r+0xaca>
 8031eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8031eee:	2a04      	cmp	r2, #4
 8031ef0:	d002      	beq.n	8031ef8 <__ssvfiscanf_r+0xad0>
 8031ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8031ef4:	3a01      	subs	r2, #1
 8031ef6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8031ef8:	f1b8 0f00 	cmp.w	r8, #0
 8031efc:	d1d6      	bne.n	8031eac <__ssvfiscanf_r+0xa84>
 8031efe:	3504      	adds	r5, #4
 8031f00:	f1ba 0f00 	cmp.w	sl, #0
 8031f04:	d015      	beq.n	8031f32 <__ssvfiscanf_r+0xb0a>
 8031f06:	1bab      	subs	r3, r5, r6
 8031f08:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8031f0c:	d80f      	bhi.n	8031f2e <__ssvfiscanf_r+0xb06>
 8031f0e:	4630      	mov	r0, r6
 8031f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031f14:	613b      	str	r3, [r7, #16]
 8031f16:	f003 f9fb 	bl	8035310 <realloc>
 8031f1a:	4606      	mov	r6, r0
 8031f1c:	2800      	cmp	r0, #0
 8031f1e:	f43f abd3 	beq.w	80316c8 <__ssvfiscanf_r+0x2a0>
 8031f22:	693b      	ldr	r3, [r7, #16]
 8031f24:	f8ca 0000 	str.w	r0, [sl]
 8031f28:	18c5      	adds	r5, r0, r3
 8031f2a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031f2e:	4643      	mov	r3, r8
 8031f30:	e7bc      	b.n	8031eac <__ssvfiscanf_r+0xa84>
 8031f32:	4653      	mov	r3, sl
 8031f34:	e7ba      	b.n	8031eac <__ssvfiscanf_r+0xa84>
 8031f36:	f1b8 0f00 	cmp.w	r8, #0
 8031f3a:	d019      	beq.n	8031f70 <__ssvfiscanf_r+0xb48>
 8031f3c:	4e4b      	ldr	r6, [pc, #300]	@ (803206c <__ssvfiscanf_r+0xc44>)
 8031f3e:	6823      	ldr	r3, [r4, #0]
 8031f40:	781a      	ldrb	r2, [r3, #0]
 8031f42:	5cb2      	ldrb	r2, [r6, r2]
 8031f44:	0712      	lsls	r2, r2, #28
 8031f46:	f53f acfc 	bmi.w	8031942 <__ssvfiscanf_r+0x51a>
 8031f4a:	3301      	adds	r3, #1
 8031f4c:	6862      	ldr	r2, [r4, #4]
 8031f4e:	6023      	str	r3, [r4, #0]
 8031f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f52:	3501      	adds	r5, #1
 8031f54:	3a01      	subs	r2, #1
 8031f56:	429d      	cmp	r5, r3
 8031f58:	6062      	str	r2, [r4, #4]
 8031f5a:	f43f acf2 	beq.w	8031942 <__ssvfiscanf_r+0x51a>
 8031f5e:	2a00      	cmp	r2, #0
 8031f60:	dced      	bgt.n	8031f3e <__ssvfiscanf_r+0xb16>
 8031f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031f64:	4621      	mov	r1, r4
 8031f66:	f7ff fa08 	bl	803137a <__ssrefill_r>
 8031f6a:	2800      	cmp	r0, #0
 8031f6c:	d0e7      	beq.n	8031f3e <__ssvfiscanf_r+0xb16>
 8031f6e:	e4e8      	b.n	8031942 <__ssvfiscanf_r+0x51a>
 8031f70:	6a3b      	ldr	r3, [r7, #32]
 8031f72:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031f76:	f853 5b04 	ldr.w	r5, [r3], #4
 8031f7a:	623b      	str	r3, [r7, #32]
 8031f7c:	d074      	beq.n	8032068 <__ssvfiscanf_r+0xc40>
 8031f7e:	2d00      	cmp	r5, #0
 8031f80:	f43f aa9f 	beq.w	80314c2 <__ssvfiscanf_r+0x9a>
 8031f84:	2020      	movs	r0, #32
 8031f86:	f7fe fa39 	bl	80303fc <malloc>
 8031f8a:	4680      	mov	r8, r0
 8031f8c:	2800      	cmp	r0, #0
 8031f8e:	f43f ab07 	beq.w	80315a0 <__ssvfiscanf_r+0x178>
 8031f92:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031f96:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8031f9a:	6028      	str	r0, [r5, #0]
 8031f9c:	45b1      	cmp	r9, r6
 8031f9e:	d312      	bcc.n	8031fc6 <__ssvfiscanf_r+0xb9e>
 8031fa0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031fa4:	429e      	cmp	r6, r3
 8031fa6:	f200 8153 	bhi.w	8032250 <__ssvfiscanf_r+0xe28>
 8031faa:	3608      	adds	r6, #8
 8031fac:	b2b6      	uxth	r6, r6
 8031fae:	f8db 0000 	ldr.w	r0, [fp]
 8031fb2:	00b1      	lsls	r1, r6, #2
 8031fb4:	f003 f9ac 	bl	8035310 <realloc>
 8031fb8:	2800      	cmp	r0, #0
 8031fba:	f000 8149 	beq.w	8032250 <__ssvfiscanf_r+0xe28>
 8031fbe:	f8cb 0000 	str.w	r0, [fp]
 8031fc2:	f8ab 6004 	strh.w	r6, [fp, #4]
 8031fc6:	f8db 3000 	ldr.w	r3, [fp]
 8031fca:	f109 0201 	add.w	r2, r9, #1
 8031fce:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031fd2:	46aa      	mov	sl, r5
 8031fd4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8031fd8:	4645      	mov	r5, r8
 8031fda:	2620      	movs	r6, #32
 8031fdc:	46a9      	mov	r9, r5
 8031fde:	6823      	ldr	r3, [r4, #0]
 8031fe0:	4922      	ldr	r1, [pc, #136]	@ (803206c <__ssvfiscanf_r+0xc44>)
 8031fe2:	781a      	ldrb	r2, [r3, #0]
 8031fe4:	5c8a      	ldrb	r2, [r1, r2]
 8031fe6:	0710      	lsls	r0, r2, #28
 8031fe8:	d428      	bmi.n	803203c <__ssvfiscanf_r+0xc14>
 8031fea:	6862      	ldr	r2, [r4, #4]
 8031fec:	3a01      	subs	r2, #1
 8031fee:	6062      	str	r2, [r4, #4]
 8031ff0:	1c5a      	adds	r2, r3, #1
 8031ff2:	6022      	str	r2, [r4, #0]
 8031ff4:	781b      	ldrb	r3, [r3, #0]
 8031ff6:	f805 3b01 	strb.w	r3, [r5], #1
 8031ffa:	f1ba 0f00 	cmp.w	sl, #0
 8031ffe:	d010      	beq.n	8032022 <__ssvfiscanf_r+0xbfa>
 8032000:	eba5 0809 	sub.w	r8, r5, r9
 8032004:	45b0      	cmp	r8, r6
 8032006:	d30c      	bcc.n	8032022 <__ssvfiscanf_r+0xbfa>
 8032008:	0076      	lsls	r6, r6, #1
 803200a:	4648      	mov	r0, r9
 803200c:	4631      	mov	r1, r6
 803200e:	f003 f97f 	bl	8035310 <realloc>
 8032012:	4681      	mov	r9, r0
 8032014:	2800      	cmp	r0, #0
 8032016:	f43f aac3 	beq.w	80315a0 <__ssvfiscanf_r+0x178>
 803201a:	eb00 0508 	add.w	r5, r0, r8
 803201e:	f8ca 0000 	str.w	r0, [sl]
 8032022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032024:	3b01      	subs	r3, #1
 8032026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8032028:	d008      	beq.n	803203c <__ssvfiscanf_r+0xc14>
 803202a:	6863      	ldr	r3, [r4, #4]
 803202c:	2b00      	cmp	r3, #0
 803202e:	dcd6      	bgt.n	8031fde <__ssvfiscanf_r+0xbb6>
 8032030:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8032032:	4621      	mov	r1, r4
 8032034:	f7ff f9a1 	bl	803137a <__ssrefill_r>
 8032038:	2800      	cmp	r0, #0
 803203a:	d0d0      	beq.n	8031fde <__ssvfiscanf_r+0xbb6>
 803203c:	2300      	movs	r3, #0
 803203e:	702b      	strb	r3, [r5, #0]
 8032040:	eba5 0509 	sub.w	r5, r5, r9
 8032044:	f1ba 0f00 	cmp.w	sl, #0
 8032048:	f43f acce 	beq.w	80319e8 <__ssvfiscanf_r+0x5c0>
 803204c:	1c69      	adds	r1, r5, #1
 803204e:	428e      	cmp	r6, r1
 8032050:	f67f acca 	bls.w	80319e8 <__ssvfiscanf_r+0x5c0>
 8032054:	f8da 0000 	ldr.w	r0, [sl]
 8032058:	f003 f95a 	bl	8035310 <realloc>
 803205c:	2800      	cmp	r0, #0
 803205e:	f43f acc3 	beq.w	80319e8 <__ssvfiscanf_r+0x5c0>
 8032062:	f8ca 0000 	str.w	r0, [sl]
 8032066:	e4bf      	b.n	80319e8 <__ssvfiscanf_r+0x5c0>
 8032068:	46b2      	mov	sl, r6
 803206a:	e7b7      	b.n	8031fdc <__ssvfiscanf_r+0xbb4>
 803206c:	0803d6c9 	.word	0x0803d6c9
 8032070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032072:	3b01      	subs	r3, #1
 8032074:	2b26      	cmp	r3, #38	@ 0x26
 8032076:	bf81      	itttt	hi
 8032078:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 803207a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 803207e:	2327      	movhi	r3, #39	@ 0x27
 8032080:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8032082:	bf98      	it	ls
 8032084:	f04f 0800 	movls.w	r8, #0
 8032088:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803208c:	f04f 0900 	mov.w	r9, #0
 8032090:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8032094:	6822      	ldr	r2, [r4, #0]
 8032096:	7813      	ldrb	r3, [r2, #0]
 8032098:	2b39      	cmp	r3, #57	@ 0x39
 803209a:	d80f      	bhi.n	80320bc <__ssvfiscanf_r+0xc94>
 803209c:	2b2a      	cmp	r3, #42	@ 0x2a
 803209e:	d91a      	bls.n	80320d6 <__ssvfiscanf_r+0xcae>
 80320a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80320a4:	290e      	cmp	r1, #14
 80320a6:	d816      	bhi.n	80320d6 <__ssvfiscanf_r+0xcae>
 80320a8:	e8df f001 	tbb	[pc, r1]
 80320ac:	15771577 	.word	0x15771577
 80320b0:	67673e15 	.word	0x67673e15
 80320b4:	67676767 	.word	0x67676767
 80320b8:	6f67      	.short	0x6f67
 80320ba:	6f          	.byte	0x6f
 80320bb:	00          	.byte	0x00
 80320bc:	2b66      	cmp	r3, #102	@ 0x66
 80320be:	d831      	bhi.n	8032124 <__ssvfiscanf_r+0xcfc>
 80320c0:	2b60      	cmp	r3, #96	@ 0x60
 80320c2:	d803      	bhi.n	80320cc <__ssvfiscanf_r+0xca4>
 80320c4:	2b46      	cmp	r3, #70	@ 0x46
 80320c6:	d804      	bhi.n	80320d2 <__ssvfiscanf_r+0xcaa>
 80320c8:	2b40      	cmp	r3, #64	@ 0x40
 80320ca:	d904      	bls.n	80320d6 <__ssvfiscanf_r+0xcae>
 80320cc:	6979      	ldr	r1, [r7, #20]
 80320ce:	290a      	cmp	r1, #10
 80320d0:	e061      	b.n	8032196 <__ssvfiscanf_r+0xd6e>
 80320d2:	2b58      	cmp	r3, #88	@ 0x58
 80320d4:	d066      	beq.n	80321a4 <__ssvfiscanf_r+0xd7c>
 80320d6:	05f1      	lsls	r1, r6, #23
 80320d8:	d511      	bpl.n	80320fe <__ssvfiscanf_r+0xcd6>
 80320da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80320de:	459a      	cmp	sl, r3
 80320e0:	d908      	bls.n	80320f4 <__ssvfiscanf_r+0xccc>
 80320e2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 80320e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80320e8:	4622      	mov	r2, r4
 80320ea:	f7ff f90b 	bl	8031304 <_sungetc_r>
 80320ee:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 80320f2:	46c2      	mov	sl, r8
 80320f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80320f8:	459a      	cmp	sl, r3
 80320fa:	f43f a9e2 	beq.w	80314c2 <__ssvfiscanf_r+0x9a>
 80320fe:	f016 0210 	ands.w	r2, r6, #16
 8032102:	d16b      	bne.n	80321dc <__ssvfiscanf_r+0xdb4>
 8032104:	697b      	ldr	r3, [r7, #20]
 8032106:	f88a 2000 	strb.w	r2, [sl]
 803210a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803210c:	68fd      	ldr	r5, [r7, #12]
 803210e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8032112:	47a8      	blx	r5
 8032114:	6a3b      	ldr	r3, [r7, #32]
 8032116:	06b2      	lsls	r2, r6, #26
 8032118:	f103 0804 	add.w	r8, r3, #4
 803211c:	d555      	bpl.n	80321ca <__ssvfiscanf_r+0xda2>
 803211e:	681b      	ldr	r3, [r3, #0]
 8032120:	6018      	str	r0, [r3, #0]
 8032122:	e057      	b.n	80321d4 <__ssvfiscanf_r+0xdac>
 8032124:	2b78      	cmp	r3, #120	@ 0x78
 8032126:	e7d5      	b.n	80320d4 <__ssvfiscanf_r+0xcac>
 8032128:	0531      	lsls	r1, r6, #20
 803212a:	d509      	bpl.n	8032140 <__ssvfiscanf_r+0xd18>
 803212c:	6979      	ldr	r1, [r7, #20]
 803212e:	b919      	cbnz	r1, 8032138 <__ssvfiscanf_r+0xd10>
 8032130:	2108      	movs	r1, #8
 8032132:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032136:	6179      	str	r1, [r7, #20]
 8032138:	0575      	lsls	r5, r6, #21
 803213a:	d506      	bpl.n	803214a <__ssvfiscanf_r+0xd22>
 803213c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8032140:	4655      	mov	r5, sl
 8032142:	f805 3b01 	strb.w	r3, [r5], #1
 8032146:	46aa      	mov	sl, r5
 8032148:	e00b      	b.n	8032162 <__ssvfiscanf_r+0xd3a>
 803214a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 803214e:	f1b8 0f00 	cmp.w	r8, #0
 8032152:	d004      	beq.n	803215e <__ssvfiscanf_r+0xd36>
 8032154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032156:	3301      	adds	r3, #1
 8032158:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803215c:	62bb      	str	r3, [r7, #40]	@ 0x28
 803215e:	f109 0901 	add.w	r9, r9, #1
 8032162:	6863      	ldr	r3, [r4, #4]
 8032164:	3b01      	subs	r3, #1
 8032166:	2b00      	cmp	r3, #0
 8032168:	6063      	str	r3, [r4, #4]
 803216a:	dd27      	ble.n	80321bc <__ssvfiscanf_r+0xd94>
 803216c:	3201      	adds	r2, #1
 803216e:	6022      	str	r2, [r4, #0]
 8032170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032172:	3b01      	subs	r3, #1
 8032174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8032176:	d18d      	bne.n	8032094 <__ssvfiscanf_r+0xc6c>
 8032178:	e7ad      	b.n	80320d6 <__ssvfiscanf_r+0xcae>
 803217a:	6978      	ldr	r0, [r7, #20]
 803217c:	4936      	ldr	r1, [pc, #216]	@ (8032258 <__ssvfiscanf_r+0xe30>)
 803217e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032182:	6179      	str	r1, [r7, #20]
 8032184:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8032188:	e7da      	b.n	8032140 <__ssvfiscanf_r+0xd18>
 803218a:	6978      	ldr	r0, [r7, #20]
 803218c:	4932      	ldr	r1, [pc, #200]	@ (8032258 <__ssvfiscanf_r+0xe30>)
 803218e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032192:	6179      	str	r1, [r7, #20]
 8032194:	2908      	cmp	r1, #8
 8032196:	dcf5      	bgt.n	8032184 <__ssvfiscanf_r+0xd5c>
 8032198:	e79d      	b.n	80320d6 <__ssvfiscanf_r+0xcae>
 803219a:	0630      	lsls	r0, r6, #24
 803219c:	d59b      	bpl.n	80320d6 <__ssvfiscanf_r+0xcae>
 803219e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80321a2:	e7cd      	b.n	8032140 <__ssvfiscanf_r+0xd18>
 80321a4:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 80321a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80321ac:	d193      	bne.n	80320d6 <__ssvfiscanf_r+0xcae>
 80321ae:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 80321b2:	2110      	movs	r1, #16
 80321b4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 80321b8:	6179      	str	r1, [r7, #20]
 80321ba:	e7c1      	b.n	8032140 <__ssvfiscanf_r+0xd18>
 80321bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80321be:	4621      	mov	r1, r4
 80321c0:	f7ff f8db 	bl	803137a <__ssrefill_r>
 80321c4:	2800      	cmp	r0, #0
 80321c6:	d0d3      	beq.n	8032170 <__ssvfiscanf_r+0xd48>
 80321c8:	e785      	b.n	80320d6 <__ssvfiscanf_r+0xcae>
 80321ca:	0733      	lsls	r3, r6, #28
 80321cc:	d50d      	bpl.n	80321ea <__ssvfiscanf_r+0xdc2>
 80321ce:	6a3b      	ldr	r3, [r7, #32]
 80321d0:	681b      	ldr	r3, [r3, #0]
 80321d2:	7018      	strb	r0, [r3, #0]
 80321d4:	69fb      	ldr	r3, [r7, #28]
 80321d6:	3301      	adds	r3, #1
 80321d8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 80321dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80321e0:	ebaa 0503 	sub.w	r5, sl, r3
 80321e4:	444d      	add	r5, r9
 80321e6:	f7ff bbac 	b.w	8031942 <__ssvfiscanf_r+0x51a>
 80321ea:	0775      	lsls	r5, r6, #29
 80321ec:	d503      	bpl.n	80321f6 <__ssvfiscanf_r+0xdce>
 80321ee:	6a3b      	ldr	r3, [r7, #32]
 80321f0:	681b      	ldr	r3, [r3, #0]
 80321f2:	8018      	strh	r0, [r3, #0]
 80321f4:	e7ee      	b.n	80321d4 <__ssvfiscanf_r+0xdac>
 80321f6:	f016 0201 	ands.w	r2, r6, #1
 80321fa:	d001      	beq.n	8032200 <__ssvfiscanf_r+0xdd8>
 80321fc:	6a3b      	ldr	r3, [r7, #32]
 80321fe:	e78e      	b.n	803211e <__ssvfiscanf_r+0xcf6>
 8032200:	07b1      	lsls	r1, r6, #30
 8032202:	d5fb      	bpl.n	80321fc <__ssvfiscanf_r+0xdd4>
 8032204:	4b15      	ldr	r3, [pc, #84]	@ (803225c <__ssvfiscanf_r+0xe34>)
 8032206:	68f9      	ldr	r1, [r7, #12]
 8032208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803220a:	4299      	cmp	r1, r3
 803220c:	697b      	ldr	r3, [r7, #20]
 803220e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8032212:	d106      	bne.n	8032222 <__ssvfiscanf_r+0xdfa>
 8032214:	f004 fb8e 	bl	8036934 <_strtoull_r>
 8032218:	6a3b      	ldr	r3, [r7, #32]
 803221a:	681b      	ldr	r3, [r3, #0]
 803221c:	e9c3 0100 	strd	r0, r1, [r3]
 8032220:	e7d8      	b.n	80321d4 <__ssvfiscanf_r+0xdac>
 8032222:	f004 fadb 	bl	80367dc <_strtoll_r>
 8032226:	e7f7      	b.n	8032218 <__ssvfiscanf_r+0xdf0>
 8032228:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803222c:	6818      	ldr	r0, [r3, #0]
 803222e:	f7fe f8ed 	bl	803040c <free>
 8032232:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032236:	3401      	adds	r4, #1
 8032238:	601e      	str	r6, [r3, #0]
 803223a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 803223e:	f8db 5000 	ldr.w	r5, [fp]
 8032242:	42a3      	cmp	r3, r4
 8032244:	dcf0      	bgt.n	8032228 <__ssvfiscanf_r+0xe00>
 8032246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803224a:	61fb      	str	r3, [r7, #28]
 803224c:	f7ff ba46 	b.w	80316dc <__ssvfiscanf_r+0x2b4>
 8032250:	2400      	movs	r4, #0
 8032252:	4626      	mov	r6, r4
 8032254:	e7f1      	b.n	803223a <__ssvfiscanf_r+0xe12>
 8032256:	bf00      	nop
 8032258:	0803d860 	.word	0x0803d860
 803225c:	08036479 	.word	0x08036479

08032260 <_svfprintf_r>:
 8032260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032264:	b0d3      	sub	sp, #332	@ 0x14c
 8032266:	468b      	mov	fp, r1
 8032268:	4691      	mov	r9, r2
 803226a:	461e      	mov	r6, r3
 803226c:	9003      	str	r0, [sp, #12]
 803226e:	f7fd f807 	bl	802f280 <_localeconv_r>
 8032272:	6803      	ldr	r3, [r0, #0]
 8032274:	9316      	str	r3, [sp, #88]	@ 0x58
 8032276:	4618      	mov	r0, r3
 8032278:	f7de f812 	bl	80102a0 <strlen>
 803227c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032280:	900d      	str	r0, [sp, #52]	@ 0x34
 8032282:	061b      	lsls	r3, r3, #24
 8032284:	d515      	bpl.n	80322b2 <_svfprintf_r+0x52>
 8032286:	f8db 3010 	ldr.w	r3, [fp, #16]
 803228a:	b993      	cbnz	r3, 80322b2 <_svfprintf_r+0x52>
 803228c:	9803      	ldr	r0, [sp, #12]
 803228e:	2140      	movs	r1, #64	@ 0x40
 8032290:	f7fe f8c4 	bl	803041c <_malloc_r>
 8032294:	f8cb 0000 	str.w	r0, [fp]
 8032298:	f8cb 0010 	str.w	r0, [fp, #16]
 803229c:	b930      	cbnz	r0, 80322ac <_svfprintf_r+0x4c>
 803229e:	9a03      	ldr	r2, [sp, #12]
 80322a0:	230c      	movs	r3, #12
 80322a2:	6013      	str	r3, [r2, #0]
 80322a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80322a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80322aa:	e1f7      	b.n	803269c <_svfprintf_r+0x43c>
 80322ac:	2340      	movs	r3, #64	@ 0x40
 80322ae:	f8cb 3014 	str.w	r3, [fp, #20]
 80322b2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8032500 <_svfprintf_r+0x2a0>
 80322b6:	2300      	movs	r3, #0
 80322b8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80322bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80322c0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80322c4:	ac29      	add	r4, sp, #164	@ 0xa4
 80322c6:	9426      	str	r4, [sp, #152]	@ 0x98
 80322c8:	9304      	str	r3, [sp, #16]
 80322ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80322cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80322ce:	9317      	str	r3, [sp, #92]	@ 0x5c
 80322d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80322d2:	464b      	mov	r3, r9
 80322d4:	461d      	mov	r5, r3
 80322d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80322da:	b10a      	cbz	r2, 80322e0 <_svfprintf_r+0x80>
 80322dc:	2a25      	cmp	r2, #37	@ 0x25
 80322de:	d1f9      	bne.n	80322d4 <_svfprintf_r+0x74>
 80322e0:	ebb5 0709 	subs.w	r7, r5, r9
 80322e4:	d00d      	beq.n	8032302 <_svfprintf_r+0xa2>
 80322e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80322e8:	443b      	add	r3, r7
 80322ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 80322ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80322ee:	3301      	adds	r3, #1
 80322f0:	2b07      	cmp	r3, #7
 80322f2:	e9c4 9700 	strd	r9, r7, [r4]
 80322f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80322f8:	dc75      	bgt.n	80323e6 <_svfprintf_r+0x186>
 80322fa:	3408      	adds	r4, #8
 80322fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80322fe:	443b      	add	r3, r7
 8032300:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032302:	782b      	ldrb	r3, [r5, #0]
 8032304:	2b00      	cmp	r3, #0
 8032306:	f001 8148 	beq.w	803359a <_svfprintf_r+0x133a>
 803230a:	2200      	movs	r2, #0
 803230c:	1c6b      	adds	r3, r5, #1
 803230e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8032312:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8032316:	920e      	str	r2, [sp, #56]	@ 0x38
 8032318:	4615      	mov	r5, r2
 803231a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803231e:	9206      	str	r2, [sp, #24]
 8032320:	930c      	str	r3, [sp, #48]	@ 0x30
 8032322:	9b06      	ldr	r3, [sp, #24]
 8032324:	3b20      	subs	r3, #32
 8032326:	2b5a      	cmp	r3, #90	@ 0x5a
 8032328:	f200 85a4 	bhi.w	8032e74 <_svfprintf_r+0xc14>
 803232c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8032330:	05a2009d 	.word	0x05a2009d
 8032334:	00a505a2 	.word	0x00a505a2
 8032338:	05a205a2 	.word	0x05a205a2
 803233c:	008505a2 	.word	0x008505a2
 8032340:	05a205a2 	.word	0x05a205a2
 8032344:	00b200a8 	.word	0x00b200a8
 8032348:	00af05a2 	.word	0x00af05a2
 803234c:	05a200b4 	.word	0x05a200b4
 8032350:	00d100ce 	.word	0x00d100ce
 8032354:	00d100d1 	.word	0x00d100d1
 8032358:	00d100d1 	.word	0x00d100d1
 803235c:	00d100d1 	.word	0x00d100d1
 8032360:	00d100d1 	.word	0x00d100d1
 8032364:	05a205a2 	.word	0x05a205a2
 8032368:	05a205a2 	.word	0x05a205a2
 803236c:	05a205a2 	.word	0x05a205a2
 8032370:	014705a2 	.word	0x014705a2
 8032374:	010805a2 	.word	0x010805a2
 8032378:	0147011b 	.word	0x0147011b
 803237c:	01470147 	.word	0x01470147
 8032380:	05a205a2 	.word	0x05a205a2
 8032384:	05a205a2 	.word	0x05a205a2
 8032388:	05a200e2 	.word	0x05a200e2
 803238c:	049d05a2 	.word	0x049d05a2
 8032390:	05a205a2 	.word	0x05a205a2
 8032394:	04e705a2 	.word	0x04e705a2
 8032398:	050805a2 	.word	0x050805a2
 803239c:	05a205a2 	.word	0x05a205a2
 80323a0:	05a2052a 	.word	0x05a2052a
 80323a4:	05a205a2 	.word	0x05a205a2
 80323a8:	05a205a2 	.word	0x05a205a2
 80323ac:	05a205a2 	.word	0x05a205a2
 80323b0:	014705a2 	.word	0x014705a2
 80323b4:	010805a2 	.word	0x010805a2
 80323b8:	0147011d 	.word	0x0147011d
 80323bc:	01470147 	.word	0x01470147
 80323c0:	011d00ee 	.word	0x011d00ee
 80323c4:	05a20102 	.word	0x05a20102
 80323c8:	05a200fb 	.word	0x05a200fb
 80323cc:	049f047e 	.word	0x049f047e
 80323d0:	010204d6 	.word	0x010204d6
 80323d4:	04e705a2 	.word	0x04e705a2
 80323d8:	050a009b 	.word	0x050a009b
 80323dc:	05a205a2 	.word	0x05a205a2
 80323e0:	05a20065 	.word	0x05a20065
 80323e4:	009b      	.short	0x009b
 80323e6:	9803      	ldr	r0, [sp, #12]
 80323e8:	aa26      	add	r2, sp, #152	@ 0x98
 80323ea:	4659      	mov	r1, fp
 80323ec:	f7fe fac0 	bl	8030970 <__ssprint_r>
 80323f0:	2800      	cmp	r0, #0
 80323f2:	f040 814e 	bne.w	8032692 <_svfprintf_r+0x432>
 80323f6:	ac29      	add	r4, sp, #164	@ 0xa4
 80323f8:	e780      	b.n	80322fc <_svfprintf_r+0x9c>
 80323fa:	4b43      	ldr	r3, [pc, #268]	@ (8032508 <_svfprintf_r+0x2a8>)
 80323fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80323fe:	f015 0320 	ands.w	r3, r5, #32
 8032402:	f000 84c2 	beq.w	8032d8a <_svfprintf_r+0xb2a>
 8032406:	3607      	adds	r6, #7
 8032408:	f026 0307 	bic.w	r3, r6, #7
 803240c:	461a      	mov	r2, r3
 803240e:	685f      	ldr	r7, [r3, #4]
 8032410:	f852 6b08 	ldr.w	r6, [r2], #8
 8032414:	9207      	str	r2, [sp, #28]
 8032416:	07eb      	lsls	r3, r5, #31
 8032418:	d50a      	bpl.n	8032430 <_svfprintf_r+0x1d0>
 803241a:	ea56 0307 	orrs.w	r3, r6, r7
 803241e:	d007      	beq.n	8032430 <_svfprintf_r+0x1d0>
 8032420:	2330      	movs	r3, #48	@ 0x30
 8032422:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8032426:	9b06      	ldr	r3, [sp, #24]
 8032428:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803242c:	f045 0502 	orr.w	r5, r5, #2
 8032430:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8032434:	2302      	movs	r3, #2
 8032436:	f000 bc28 	b.w	8032c8a <_svfprintf_r+0xa2a>
 803243a:	9803      	ldr	r0, [sp, #12]
 803243c:	f7fc ff20 	bl	802f280 <_localeconv_r>
 8032440:	6843      	ldr	r3, [r0, #4]
 8032442:	9317      	str	r3, [sp, #92]	@ 0x5c
 8032444:	4618      	mov	r0, r3
 8032446:	f7dd ff2b 	bl	80102a0 <strlen>
 803244a:	9012      	str	r0, [sp, #72]	@ 0x48
 803244c:	9803      	ldr	r0, [sp, #12]
 803244e:	f7fc ff17 	bl	802f280 <_localeconv_r>
 8032452:	6883      	ldr	r3, [r0, #8]
 8032454:	9309      	str	r3, [sp, #36]	@ 0x24
 8032456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8032458:	b12b      	cbz	r3, 8032466 <_svfprintf_r+0x206>
 803245a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803245c:	b11b      	cbz	r3, 8032466 <_svfprintf_r+0x206>
 803245e:	781b      	ldrb	r3, [r3, #0]
 8032460:	b10b      	cbz	r3, 8032466 <_svfprintf_r+0x206>
 8032462:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8032466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032468:	e757      	b.n	803231a <_svfprintf_r+0xba>
 803246a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803246e:	2b00      	cmp	r3, #0
 8032470:	d1f9      	bne.n	8032466 <_svfprintf_r+0x206>
 8032472:	2320      	movs	r3, #32
 8032474:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032478:	e7f5      	b.n	8032466 <_svfprintf_r+0x206>
 803247a:	f045 0501 	orr.w	r5, r5, #1
 803247e:	e7f2      	b.n	8032466 <_svfprintf_r+0x206>
 8032480:	f856 3b04 	ldr.w	r3, [r6], #4
 8032484:	930e      	str	r3, [sp, #56]	@ 0x38
 8032486:	2b00      	cmp	r3, #0
 8032488:	daed      	bge.n	8032466 <_svfprintf_r+0x206>
 803248a:	425b      	negs	r3, r3
 803248c:	930e      	str	r3, [sp, #56]	@ 0x38
 803248e:	f045 0504 	orr.w	r5, r5, #4
 8032492:	e7e8      	b.n	8032466 <_svfprintf_r+0x206>
 8032494:	232b      	movs	r3, #43	@ 0x2b
 8032496:	e7ed      	b.n	8032474 <_svfprintf_r+0x214>
 8032498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803249a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803249e:	9206      	str	r2, [sp, #24]
 80324a0:	2a2a      	cmp	r2, #42	@ 0x2a
 80324a2:	d10f      	bne.n	80324c4 <_svfprintf_r+0x264>
 80324a4:	f856 2b04 	ldr.w	r2, [r6], #4
 80324a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80324aa:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80324ae:	e7da      	b.n	8032466 <_svfprintf_r+0x206>
 80324b0:	fb01 2808 	mla	r8, r1, r8, r2
 80324b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80324b8:	9206      	str	r2, [sp, #24]
 80324ba:	9a06      	ldr	r2, [sp, #24]
 80324bc:	3a30      	subs	r2, #48	@ 0x30
 80324be:	2a09      	cmp	r2, #9
 80324c0:	d9f6      	bls.n	80324b0 <_svfprintf_r+0x250>
 80324c2:	e72d      	b.n	8032320 <_svfprintf_r+0xc0>
 80324c4:	f04f 0800 	mov.w	r8, #0
 80324c8:	210a      	movs	r1, #10
 80324ca:	e7f6      	b.n	80324ba <_svfprintf_r+0x25a>
 80324cc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80324d0:	e7c9      	b.n	8032466 <_svfprintf_r+0x206>
 80324d2:	2200      	movs	r2, #0
 80324d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80324d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80324d8:	210a      	movs	r1, #10
 80324da:	9a06      	ldr	r2, [sp, #24]
 80324dc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80324de:	3a30      	subs	r2, #48	@ 0x30
 80324e0:	fb01 2200 	mla	r2, r1, r0, r2
 80324e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80324e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80324ea:	9206      	str	r2, [sp, #24]
 80324ec:	3a30      	subs	r2, #48	@ 0x30
 80324ee:	2a09      	cmp	r2, #9
 80324f0:	d9f3      	bls.n	80324da <_svfprintf_r+0x27a>
 80324f2:	e715      	b.n	8032320 <_svfprintf_r+0xc0>
 80324f4:	f045 0508 	orr.w	r5, r5, #8
 80324f8:	e7b5      	b.n	8032466 <_svfprintf_r+0x206>
 80324fa:	bf00      	nop
 80324fc:	f3af 8000 	nop.w
	...
 8032508:	0803d2bb 	.word	0x0803d2bb
 803250c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803250e:	781b      	ldrb	r3, [r3, #0]
 8032510:	2b68      	cmp	r3, #104	@ 0x68
 8032512:	bf01      	itttt	eq
 8032514:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8032516:	3301      	addeq	r3, #1
 8032518:	930c      	streq	r3, [sp, #48]	@ 0x30
 803251a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803251e:	bf18      	it	ne
 8032520:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8032524:	e79f      	b.n	8032466 <_svfprintf_r+0x206>
 8032526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032528:	781b      	ldrb	r3, [r3, #0]
 803252a:	2b6c      	cmp	r3, #108	@ 0x6c
 803252c:	d105      	bne.n	803253a <_svfprintf_r+0x2da>
 803252e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032530:	3301      	adds	r3, #1
 8032532:	930c      	str	r3, [sp, #48]	@ 0x30
 8032534:	f045 0520 	orr.w	r5, r5, #32
 8032538:	e795      	b.n	8032466 <_svfprintf_r+0x206>
 803253a:	f045 0510 	orr.w	r5, r5, #16
 803253e:	e792      	b.n	8032466 <_svfprintf_r+0x206>
 8032540:	4632      	mov	r2, r6
 8032542:	f852 3b04 	ldr.w	r3, [r2], #4
 8032546:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803254a:	2300      	movs	r3, #0
 803254c:	9207      	str	r2, [sp, #28]
 803254e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032552:	469a      	mov	sl, r3
 8032554:	f04f 0801 	mov.w	r8, #1
 8032558:	9310      	str	r3, [sp, #64]	@ 0x40
 803255a:	461f      	mov	r7, r3
 803255c:	9308      	str	r3, [sp, #32]
 803255e:	461e      	mov	r6, r3
 8032560:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8032564:	e1d2      	b.n	803290c <_svfprintf_r+0x6ac>
 8032566:	f045 0510 	orr.w	r5, r5, #16
 803256a:	06af      	lsls	r7, r5, #26
 803256c:	d512      	bpl.n	8032594 <_svfprintf_r+0x334>
 803256e:	3607      	adds	r6, #7
 8032570:	f026 0307 	bic.w	r3, r6, #7
 8032574:	461a      	mov	r2, r3
 8032576:	685f      	ldr	r7, [r3, #4]
 8032578:	f852 6b08 	ldr.w	r6, [r2], #8
 803257c:	9207      	str	r2, [sp, #28]
 803257e:	2f00      	cmp	r7, #0
 8032580:	da06      	bge.n	8032590 <_svfprintf_r+0x330>
 8032582:	4276      	negs	r6, r6
 8032584:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8032588:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803258c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032590:	2301      	movs	r3, #1
 8032592:	e37d      	b.n	8032c90 <_svfprintf_r+0xa30>
 8032594:	4633      	mov	r3, r6
 8032596:	06ee      	lsls	r6, r5, #27
 8032598:	f853 7b04 	ldr.w	r7, [r3], #4
 803259c:	9307      	str	r3, [sp, #28]
 803259e:	d502      	bpl.n	80325a6 <_svfprintf_r+0x346>
 80325a0:	463e      	mov	r6, r7
 80325a2:	17ff      	asrs	r7, r7, #31
 80325a4:	e7eb      	b.n	803257e <_svfprintf_r+0x31e>
 80325a6:	0668      	lsls	r0, r5, #25
 80325a8:	d503      	bpl.n	80325b2 <_svfprintf_r+0x352>
 80325aa:	b23e      	sxth	r6, r7
 80325ac:	f347 37c0 	sbfx	r7, r7, #15, #1
 80325b0:	e7e5      	b.n	803257e <_svfprintf_r+0x31e>
 80325b2:	05a9      	lsls	r1, r5, #22
 80325b4:	d5f4      	bpl.n	80325a0 <_svfprintf_r+0x340>
 80325b6:	b27e      	sxtb	r6, r7
 80325b8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80325bc:	e7df      	b.n	803257e <_svfprintf_r+0x31e>
 80325be:	3607      	adds	r6, #7
 80325c0:	f026 0307 	bic.w	r3, r6, #7
 80325c4:	ecb3 7b02 	vldmia	r3!, {d7}
 80325c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80325cc:	9307      	str	r3, [sp, #28]
 80325ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80325d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80325d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80325d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80325d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80325da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80325de:	4b81      	ldr	r3, [pc, #516]	@ (80327e4 <_svfprintf_r+0x584>)
 80325e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80325e4:	f7de faba 	bl	8010b5c <__aeabi_dcmpun>
 80325e8:	bb10      	cbnz	r0, 8032630 <_svfprintf_r+0x3d0>
 80325ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80325ee:	4b7d      	ldr	r3, [pc, #500]	@ (80327e4 <_svfprintf_r+0x584>)
 80325f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80325f4:	f7de fa94 	bl	8010b20 <__aeabi_dcmple>
 80325f8:	b9d0      	cbnz	r0, 8032630 <_svfprintf_r+0x3d0>
 80325fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80325fe:	2200      	movs	r2, #0
 8032600:	2300      	movs	r3, #0
 8032602:	f7de fa83 	bl	8010b0c <__aeabi_dcmplt>
 8032606:	b110      	cbz	r0, 803260e <_svfprintf_r+0x3ae>
 8032608:	232d      	movs	r3, #45	@ 0x2d
 803260a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803260e:	4a76      	ldr	r2, [pc, #472]	@ (80327e8 <_svfprintf_r+0x588>)
 8032610:	4b76      	ldr	r3, [pc, #472]	@ (80327ec <_svfprintf_r+0x58c>)
 8032612:	9906      	ldr	r1, [sp, #24]
 8032614:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8032618:	2947      	cmp	r1, #71	@ 0x47
 803261a:	bfd4      	ite	le
 803261c:	4691      	movle	r9, r2
 803261e:	4699      	movgt	r9, r3
 8032620:	f04f 0a00 	mov.w	sl, #0
 8032624:	f04f 0803 	mov.w	r8, #3
 8032628:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803262c:	f000 bfec 	b.w	8033608 <_svfprintf_r+0x13a8>
 8032630:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8032634:	4610      	mov	r0, r2
 8032636:	4619      	mov	r1, r3
 8032638:	f7de fa90 	bl	8010b5c <__aeabi_dcmpun>
 803263c:	4682      	mov	sl, r0
 803263e:	b140      	cbz	r0, 8032652 <_svfprintf_r+0x3f2>
 8032640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8032642:	4a6b      	ldr	r2, [pc, #428]	@ (80327f0 <_svfprintf_r+0x590>)
 8032644:	2b00      	cmp	r3, #0
 8032646:	bfbc      	itt	lt
 8032648:	232d      	movlt	r3, #45	@ 0x2d
 803264a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803264e:	4b69      	ldr	r3, [pc, #420]	@ (80327f4 <_svfprintf_r+0x594>)
 8032650:	e7df      	b.n	8032612 <_svfprintf_r+0x3b2>
 8032652:	9b06      	ldr	r3, [sp, #24]
 8032654:	2b61      	cmp	r3, #97	@ 0x61
 8032656:	d025      	beq.n	80326a4 <_svfprintf_r+0x444>
 8032658:	2b41      	cmp	r3, #65	@ 0x41
 803265a:	d125      	bne.n	80326a8 <_svfprintf_r+0x448>
 803265c:	2358      	movs	r3, #88	@ 0x58
 803265e:	2230      	movs	r2, #48	@ 0x30
 8032660:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8032664:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8032668:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803266c:	f045 0502 	orr.w	r5, r5, #2
 8032670:	f340 80a5 	ble.w	80327be <_svfprintf_r+0x55e>
 8032674:	9803      	ldr	r0, [sp, #12]
 8032676:	f108 0101 	add.w	r1, r8, #1
 803267a:	f7fd fecf 	bl	803041c <_malloc_r>
 803267e:	4681      	mov	r9, r0
 8032680:	2800      	cmp	r0, #0
 8032682:	f040 80a1 	bne.w	80327c8 <_svfprintf_r+0x568>
 8032686:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803268a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803268e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8032692:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032696:	065b      	lsls	r3, r3, #25
 8032698:	f53f ae04 	bmi.w	80322a4 <_svfprintf_r+0x44>
 803269c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803269e:	b053      	add	sp, #332	@ 0x14c
 80326a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80326a4:	2378      	movs	r3, #120	@ 0x78
 80326a6:	e7da      	b.n	803265e <_svfprintf_r+0x3fe>
 80326a8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80326ac:	f000 808e 	beq.w	80327cc <_svfprintf_r+0x56c>
 80326b0:	9b06      	ldr	r3, [sp, #24]
 80326b2:	f023 0320 	bic.w	r3, r3, #32
 80326b6:	2b47      	cmp	r3, #71	@ 0x47
 80326b8:	d105      	bne.n	80326c6 <_svfprintf_r+0x466>
 80326ba:	f1b8 0f00 	cmp.w	r8, #0
 80326be:	d102      	bne.n	80326c6 <_svfprintf_r+0x466>
 80326c0:	46c2      	mov	sl, r8
 80326c2:	f04f 0801 	mov.w	r8, #1
 80326c6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80326ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80326cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80326ce:	2b00      	cmp	r3, #0
 80326d0:	da7f      	bge.n	80327d2 <_svfprintf_r+0x572>
 80326d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80326d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80326d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80326d8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80326dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80326de:	232d      	movs	r3, #45	@ 0x2d
 80326e0:	931c      	str	r3, [sp, #112]	@ 0x70
 80326e2:	9b06      	ldr	r3, [sp, #24]
 80326e4:	f023 0320 	bic.w	r3, r3, #32
 80326e8:	2b41      	cmp	r3, #65	@ 0x41
 80326ea:	9308      	str	r3, [sp, #32]
 80326ec:	f040 81e6 	bne.w	8032abc <_svfprintf_r+0x85c>
 80326f0:	a820      	add	r0, sp, #128	@ 0x80
 80326f2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80326f6:	f7fc fe95 	bl	802f424 <frexp>
 80326fa:	2200      	movs	r2, #0
 80326fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8032700:	ec51 0b10 	vmov	r0, r1, d0
 8032704:	f7dd ff90 	bl	8010628 <__aeabi_dmul>
 8032708:	4602      	mov	r2, r0
 803270a:	460b      	mov	r3, r1
 803270c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8032710:	2200      	movs	r2, #0
 8032712:	2300      	movs	r3, #0
 8032714:	f7de f9f0 	bl	8010af8 <__aeabi_dcmpeq>
 8032718:	b108      	cbz	r0, 803271e <_svfprintf_r+0x4be>
 803271a:	2301      	movs	r3, #1
 803271c:	9320      	str	r3, [sp, #128]	@ 0x80
 803271e:	4a36      	ldr	r2, [pc, #216]	@ (80327f8 <_svfprintf_r+0x598>)
 8032720:	4b36      	ldr	r3, [pc, #216]	@ (80327fc <_svfprintf_r+0x59c>)
 8032722:	9906      	ldr	r1, [sp, #24]
 8032724:	2961      	cmp	r1, #97	@ 0x61
 8032726:	bf18      	it	ne
 8032728:	461a      	movne	r2, r3
 803272a:	9210      	str	r2, [sp, #64]	@ 0x40
 803272c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8032730:	464e      	mov	r6, r9
 8032732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8032736:	4b32      	ldr	r3, [pc, #200]	@ (8032800 <_svfprintf_r+0x5a0>)
 8032738:	2200      	movs	r2, #0
 803273a:	f7dd ff75 	bl	8010628 <__aeabi_dmul>
 803273e:	4602      	mov	r2, r0
 8032740:	460b      	mov	r3, r1
 8032742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8032746:	f7de fa1f 	bl	8010b88 <__aeabi_d2iz>
 803274a:	9013      	str	r0, [sp, #76]	@ 0x4c
 803274c:	f7dd ff02 	bl	8010554 <__aeabi_i2d>
 8032750:	4602      	mov	r2, r0
 8032752:	460b      	mov	r3, r1
 8032754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8032758:	f7dd fdae 	bl	80102b8 <__aeabi_dsub>
 803275c:	4602      	mov	r2, r0
 803275e:	460b      	mov	r3, r1
 8032760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8032764:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8032766:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032768:	5c9b      	ldrb	r3, [r3, r2]
 803276a:	f806 3b01 	strb.w	r3, [r6], #1
 803276e:	1c7a      	adds	r2, r7, #1
 8032770:	d006      	beq.n	8032780 <_svfprintf_r+0x520>
 8032772:	1e7b      	subs	r3, r7, #1
 8032774:	931d      	str	r3, [sp, #116]	@ 0x74
 8032776:	2200      	movs	r2, #0
 8032778:	2300      	movs	r3, #0
 803277a:	f7de f9bd 	bl	8010af8 <__aeabi_dcmpeq>
 803277e:	b370      	cbz	r0, 80327de <_svfprintf_r+0x57e>
 8032780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8032784:	4b1f      	ldr	r3, [pc, #124]	@ (8032804 <_svfprintf_r+0x5a4>)
 8032786:	2200      	movs	r2, #0
 8032788:	f7de f9de 	bl	8010b48 <__aeabi_dcmpgt>
 803278c:	2800      	cmp	r0, #0
 803278e:	d13b      	bne.n	8032808 <_svfprintf_r+0x5a8>
 8032790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8032794:	4b1b      	ldr	r3, [pc, #108]	@ (8032804 <_svfprintf_r+0x5a4>)
 8032796:	2200      	movs	r2, #0
 8032798:	f7de f9ae 	bl	8010af8 <__aeabi_dcmpeq>
 803279c:	b110      	cbz	r0, 80327a4 <_svfprintf_r+0x544>
 803279e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80327a0:	07db      	lsls	r3, r3, #31
 80327a2:	d431      	bmi.n	8032808 <_svfprintf_r+0x5a8>
 80327a4:	4633      	mov	r3, r6
 80327a6:	19f1      	adds	r1, r6, r7
 80327a8:	2030      	movs	r0, #48	@ 0x30
 80327aa:	1aca      	subs	r2, r1, r3
 80327ac:	2a00      	cmp	r2, #0
 80327ae:	f280 8182 	bge.w	8032ab6 <_svfprintf_r+0x856>
 80327b2:	1c7b      	adds	r3, r7, #1
 80327b4:	3701      	adds	r7, #1
 80327b6:	bfb8      	it	lt
 80327b8:	2300      	movlt	r3, #0
 80327ba:	441e      	add	r6, r3
 80327bc:	e038      	b.n	8032830 <_svfprintf_r+0x5d0>
 80327be:	f04f 0a00 	mov.w	sl, #0
 80327c2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80327c6:	e77e      	b.n	80326c6 <_svfprintf_r+0x466>
 80327c8:	4682      	mov	sl, r0
 80327ca:	e77c      	b.n	80326c6 <_svfprintf_r+0x466>
 80327cc:	f04f 0806 	mov.w	r8, #6
 80327d0:	e779      	b.n	80326c6 <_svfprintf_r+0x466>
 80327d2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80327d6:	2300      	movs	r3, #0
 80327d8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80327dc:	e780      	b.n	80326e0 <_svfprintf_r+0x480>
 80327de:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80327e0:	e7a7      	b.n	8032732 <_svfprintf_r+0x4d2>
 80327e2:	bf00      	nop
 80327e4:	7fefffff 	.word	0x7fefffff
 80327e8:	0803d2ab 	.word	0x0803d2ab
 80327ec:	0803d2af 	.word	0x0803d2af
 80327f0:	0803d2b3 	.word	0x0803d2b3
 80327f4:	0803d2b7 	.word	0x0803d2b7
 80327f8:	0803d2bb 	.word	0x0803d2bb
 80327fc:	0803d2cc 	.word	0x0803d2cc
 8032800:	40300000 	.word	0x40300000
 8032804:	3fe00000 	.word	0x3fe00000
 8032808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803280a:	9624      	str	r6, [sp, #144]	@ 0x90
 803280c:	7bd9      	ldrb	r1, [r3, #15]
 803280e:	2030      	movs	r0, #48	@ 0x30
 8032810:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8032812:	1e53      	subs	r3, r2, #1
 8032814:	9324      	str	r3, [sp, #144]	@ 0x90
 8032816:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803281a:	428b      	cmp	r3, r1
 803281c:	f000 8148 	beq.w	8032ab0 <_svfprintf_r+0x850>
 8032820:	2b39      	cmp	r3, #57	@ 0x39
 8032822:	bf0b      	itete	eq
 8032824:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8032826:	3301      	addne	r3, #1
 8032828:	7a9b      	ldrbeq	r3, [r3, #10]
 803282a:	b2db      	uxtbne	r3, r3
 803282c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8032830:	eba6 0309 	sub.w	r3, r6, r9
 8032834:	9304      	str	r3, [sp, #16]
 8032836:	9b08      	ldr	r3, [sp, #32]
 8032838:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803283a:	2b47      	cmp	r3, #71	@ 0x47
 803283c:	f040 8187 	bne.w	8032b4e <_svfprintf_r+0x8ee>
 8032840:	1cf1      	adds	r1, r6, #3
 8032842:	db02      	blt.n	803284a <_svfprintf_r+0x5ea>
 8032844:	4546      	cmp	r6, r8
 8032846:	f340 81a5 	ble.w	8032b94 <_svfprintf_r+0x934>
 803284a:	9b06      	ldr	r3, [sp, #24]
 803284c:	3b02      	subs	r3, #2
 803284e:	9306      	str	r3, [sp, #24]
 8032850:	9906      	ldr	r1, [sp, #24]
 8032852:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8032856:	f021 0120 	bic.w	r1, r1, #32
 803285a:	2941      	cmp	r1, #65	@ 0x41
 803285c:	bf08      	it	eq
 803285e:	320f      	addeq	r2, #15
 8032860:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8032864:	bf06      	itte	eq
 8032866:	b2d2      	uxtbeq	r2, r2
 8032868:	2101      	moveq	r1, #1
 803286a:	2100      	movne	r1, #0
 803286c:	2b00      	cmp	r3, #0
 803286e:	9320      	str	r3, [sp, #128]	@ 0x80
 8032870:	bfb8      	it	lt
 8032872:	f1c6 0301 	rsblt	r3, r6, #1
 8032876:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803287a:	bfb4      	ite	lt
 803287c:	222d      	movlt	r2, #45	@ 0x2d
 803287e:	222b      	movge	r2, #43	@ 0x2b
 8032880:	2b09      	cmp	r3, #9
 8032882:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8032886:	f340 8178 	ble.w	8032b7a <_svfprintf_r+0x91a>
 803288a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803288e:	270a      	movs	r7, #10
 8032890:	4602      	mov	r2, r0
 8032892:	fbb3 f6f7 	udiv	r6, r3, r7
 8032896:	fb07 3116 	mls	r1, r7, r6, r3
 803289a:	3130      	adds	r1, #48	@ 0x30
 803289c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80328a0:	4619      	mov	r1, r3
 80328a2:	2963      	cmp	r1, #99	@ 0x63
 80328a4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80328a8:	4633      	mov	r3, r6
 80328aa:	dcf1      	bgt.n	8032890 <_svfprintf_r+0x630>
 80328ac:	3330      	adds	r3, #48	@ 0x30
 80328ae:	1e91      	subs	r1, r2, #2
 80328b0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80328b4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80328b8:	460b      	mov	r3, r1
 80328ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80328be:	4283      	cmp	r3, r0
 80328c0:	f0c0 8156 	bcc.w	8032b70 <_svfprintf_r+0x910>
 80328c4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80328c8:	1a9b      	subs	r3, r3, r2
 80328ca:	4281      	cmp	r1, r0
 80328cc:	bf88      	it	hi
 80328ce:	2300      	movhi	r3, #0
 80328d0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80328d4:	441a      	add	r2, r3
 80328d6:	ab22      	add	r3, sp, #136	@ 0x88
 80328d8:	1ad3      	subs	r3, r2, r3
 80328da:	9a04      	ldr	r2, [sp, #16]
 80328dc:	9318      	str	r3, [sp, #96]	@ 0x60
 80328de:	2a01      	cmp	r2, #1
 80328e0:	eb03 0802 	add.w	r8, r3, r2
 80328e4:	dc01      	bgt.n	80328ea <_svfprintf_r+0x68a>
 80328e6:	07ea      	lsls	r2, r5, #31
 80328e8:	d501      	bpl.n	80328ee <_svfprintf_r+0x68e>
 80328ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80328ec:	4498      	add	r8, r3
 80328ee:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80328f2:	2700      	movs	r7, #0
 80328f4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80328f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80328fa:	9708      	str	r7, [sp, #32]
 80328fc:	463e      	mov	r6, r7
 80328fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8032900:	2b00      	cmp	r3, #0
 8032902:	f040 818f 	bne.w	8032c24 <_svfprintf_r+0x9c4>
 8032906:	2300      	movs	r3, #0
 8032908:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803290a:	9310      	str	r3, [sp, #64]	@ 0x40
 803290c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803290e:	4543      	cmp	r3, r8
 8032910:	bfb8      	it	lt
 8032912:	4643      	movlt	r3, r8
 8032914:	9311      	str	r3, [sp, #68]	@ 0x44
 8032916:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803291a:	b113      	cbz	r3, 8032922 <_svfprintf_r+0x6c2>
 803291c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803291e:	3301      	adds	r3, #1
 8032920:	9311      	str	r3, [sp, #68]	@ 0x44
 8032922:	f015 0302 	ands.w	r3, r5, #2
 8032926:	931c      	str	r3, [sp, #112]	@ 0x70
 8032928:	bf1e      	ittt	ne
 803292a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803292c:	3302      	addne	r3, #2
 803292e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8032930:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8032934:	931d      	str	r3, [sp, #116]	@ 0x74
 8032936:	d122      	bne.n	803297e <_svfprintf_r+0x71e>
 8032938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803293a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803293c:	1a9b      	subs	r3, r3, r2
 803293e:	2b00      	cmp	r3, #0
 8032940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032942:	dd1c      	ble.n	803297e <_svfprintf_r+0x71e>
 8032944:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8032946:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803294a:	2810      	cmp	r0, #16
 803294c:	489e      	ldr	r0, [pc, #632]	@ (8032bc8 <_svfprintf_r+0x968>)
 803294e:	6020      	str	r0, [r4, #0]
 8032950:	f102 0201 	add.w	r2, r2, #1
 8032954:	f104 0108 	add.w	r1, r4, #8
 8032958:	f300 8298 	bgt.w	8032e8c <_svfprintf_r+0xc2c>
 803295c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803295e:	6060      	str	r0, [r4, #4]
 8032960:	4403      	add	r3, r0
 8032962:	2a07      	cmp	r2, #7
 8032964:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032968:	f340 82a5 	ble.w	8032eb6 <_svfprintf_r+0xc56>
 803296c:	9803      	ldr	r0, [sp, #12]
 803296e:	aa26      	add	r2, sp, #152	@ 0x98
 8032970:	4659      	mov	r1, fp
 8032972:	f7fd fffd 	bl	8030970 <__ssprint_r>
 8032976:	2800      	cmp	r0, #0
 8032978:	f040 85ed 	bne.w	8033556 <_svfprintf_r+0x12f6>
 803297c:	ac29      	add	r4, sp, #164	@ 0xa4
 803297e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8032982:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032984:	b16a      	cbz	r2, 80329a2 <_svfprintf_r+0x742>
 8032986:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803298a:	6022      	str	r2, [r4, #0]
 803298c:	2201      	movs	r2, #1
 803298e:	4413      	add	r3, r2
 8032990:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032994:	6062      	str	r2, [r4, #4]
 8032996:	4413      	add	r3, r2
 8032998:	2b07      	cmp	r3, #7
 803299a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803299c:	f300 828d 	bgt.w	8032eba <_svfprintf_r+0xc5a>
 80329a0:	3408      	adds	r4, #8
 80329a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80329a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80329a6:	b162      	cbz	r2, 80329c2 <_svfprintf_r+0x762>
 80329a8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80329aa:	6022      	str	r2, [r4, #0]
 80329ac:	2202      	movs	r2, #2
 80329ae:	4413      	add	r3, r2
 80329b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80329b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80329b4:	6062      	str	r2, [r4, #4]
 80329b6:	3301      	adds	r3, #1
 80329b8:	2b07      	cmp	r3, #7
 80329ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80329bc:	f300 8287 	bgt.w	8032ece <_svfprintf_r+0xc6e>
 80329c0:	3408      	adds	r4, #8
 80329c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80329c4:	2b80      	cmp	r3, #128	@ 0x80
 80329c6:	d122      	bne.n	8032a0e <_svfprintf_r+0x7ae>
 80329c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80329ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80329cc:	1a9b      	subs	r3, r3, r2
 80329ce:	2b00      	cmp	r3, #0
 80329d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80329d2:	dd1c      	ble.n	8032a0e <_svfprintf_r+0x7ae>
 80329d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80329d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80329da:	2810      	cmp	r0, #16
 80329dc:	487b      	ldr	r0, [pc, #492]	@ (8032bcc <_svfprintf_r+0x96c>)
 80329de:	6020      	str	r0, [r4, #0]
 80329e0:	f102 0201 	add.w	r2, r2, #1
 80329e4:	f104 0108 	add.w	r1, r4, #8
 80329e8:	f300 827b 	bgt.w	8032ee2 <_svfprintf_r+0xc82>
 80329ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80329ee:	6060      	str	r0, [r4, #4]
 80329f0:	4403      	add	r3, r0
 80329f2:	2a07      	cmp	r2, #7
 80329f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80329f8:	f340 8288 	ble.w	8032f0c <_svfprintf_r+0xcac>
 80329fc:	9803      	ldr	r0, [sp, #12]
 80329fe:	aa26      	add	r2, sp, #152	@ 0x98
 8032a00:	4659      	mov	r1, fp
 8032a02:	f7fd ffb5 	bl	8030970 <__ssprint_r>
 8032a06:	2800      	cmp	r0, #0
 8032a08:	f040 85a5 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032a0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8032a0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032a10:	eba3 0308 	sub.w	r3, r3, r8
 8032a14:	2b00      	cmp	r3, #0
 8032a16:	9310      	str	r3, [sp, #64]	@ 0x40
 8032a18:	dd1c      	ble.n	8032a54 <_svfprintf_r+0x7f4>
 8032a1a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8032a1c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8032a20:	2810      	cmp	r0, #16
 8032a22:	486a      	ldr	r0, [pc, #424]	@ (8032bcc <_svfprintf_r+0x96c>)
 8032a24:	6020      	str	r0, [r4, #0]
 8032a26:	f102 0201 	add.w	r2, r2, #1
 8032a2a:	f104 0108 	add.w	r1, r4, #8
 8032a2e:	f300 826f 	bgt.w	8032f10 <_svfprintf_r+0xcb0>
 8032a32:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8032a34:	6060      	str	r0, [r4, #4]
 8032a36:	4403      	add	r3, r0
 8032a38:	2a07      	cmp	r2, #7
 8032a3a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032a3e:	f340 827c 	ble.w	8032f3a <_svfprintf_r+0xcda>
 8032a42:	9803      	ldr	r0, [sp, #12]
 8032a44:	aa26      	add	r2, sp, #152	@ 0x98
 8032a46:	4659      	mov	r1, fp
 8032a48:	f7fd ff92 	bl	8030970 <__ssprint_r>
 8032a4c:	2800      	cmp	r0, #0
 8032a4e:	f040 8582 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032a52:	ac29      	add	r4, sp, #164	@ 0xa4
 8032a54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032a56:	9310      	str	r3, [sp, #64]	@ 0x40
 8032a58:	05ea      	lsls	r2, r5, #23
 8032a5a:	f100 8275 	bmi.w	8032f48 <_svfprintf_r+0xce8>
 8032a5e:	4443      	add	r3, r8
 8032a60:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032a62:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032a64:	3301      	adds	r3, #1
 8032a66:	2b07      	cmp	r3, #7
 8032a68:	e9c4 9800 	strd	r9, r8, [r4]
 8032a6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032a6e:	f300 82b1 	bgt.w	8032fd4 <_svfprintf_r+0xd74>
 8032a72:	3408      	adds	r4, #8
 8032a74:	076a      	lsls	r2, r5, #29
 8032a76:	f100 8550 	bmi.w	803351a <_svfprintf_r+0x12ba>
 8032a7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8032a7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8032a80:	428a      	cmp	r2, r1
 8032a82:	bfac      	ite	ge
 8032a84:	189b      	addge	r3, r3, r2
 8032a86:	185b      	addlt	r3, r3, r1
 8032a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032a8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032a8c:	b13b      	cbz	r3, 8032a9e <_svfprintf_r+0x83e>
 8032a8e:	9803      	ldr	r0, [sp, #12]
 8032a90:	aa26      	add	r2, sp, #152	@ 0x98
 8032a92:	4659      	mov	r1, fp
 8032a94:	f7fd ff6c 	bl	8030970 <__ssprint_r>
 8032a98:	2800      	cmp	r0, #0
 8032a9a:	f040 855c 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032a9e:	2300      	movs	r3, #0
 8032aa0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032aa2:	f1ba 0f00 	cmp.w	sl, #0
 8032aa6:	f040 8572 	bne.w	803358e <_svfprintf_r+0x132e>
 8032aaa:	9e07      	ldr	r6, [sp, #28]
 8032aac:	ac29      	add	r4, sp, #164	@ 0xa4
 8032aae:	e0c6      	b.n	8032c3e <_svfprintf_r+0x9de>
 8032ab0:	f802 0c01 	strb.w	r0, [r2, #-1]
 8032ab4:	e6ac      	b.n	8032810 <_svfprintf_r+0x5b0>
 8032ab6:	f803 0b01 	strb.w	r0, [r3], #1
 8032aba:	e676      	b.n	80327aa <_svfprintf_r+0x54a>
 8032abc:	9b08      	ldr	r3, [sp, #32]
 8032abe:	2b46      	cmp	r3, #70	@ 0x46
 8032ac0:	d005      	beq.n	8032ace <_svfprintf_r+0x86e>
 8032ac2:	2b45      	cmp	r3, #69	@ 0x45
 8032ac4:	d11a      	bne.n	8032afc <_svfprintf_r+0x89c>
 8032ac6:	f108 0601 	add.w	r6, r8, #1
 8032aca:	2102      	movs	r1, #2
 8032acc:	e001      	b.n	8032ad2 <_svfprintf_r+0x872>
 8032ace:	4646      	mov	r6, r8
 8032ad0:	2103      	movs	r1, #3
 8032ad2:	ab24      	add	r3, sp, #144	@ 0x90
 8032ad4:	9301      	str	r3, [sp, #4]
 8032ad6:	ab21      	add	r3, sp, #132	@ 0x84
 8032ad8:	9300      	str	r3, [sp, #0]
 8032ada:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8032ade:	ab20      	add	r3, sp, #128	@ 0x80
 8032ae0:	9803      	ldr	r0, [sp, #12]
 8032ae2:	4632      	mov	r2, r6
 8032ae4:	f7fc fd80 	bl	802f5e8 <_dtoa_r>
 8032ae8:	9b08      	ldr	r3, [sp, #32]
 8032aea:	2b47      	cmp	r3, #71	@ 0x47
 8032aec:	4681      	mov	r9, r0
 8032aee:	d119      	bne.n	8032b24 <_svfprintf_r+0x8c4>
 8032af0:	07e8      	lsls	r0, r5, #31
 8032af2:	d405      	bmi.n	8032b00 <_svfprintf_r+0x8a0>
 8032af4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8032af6:	eba3 0309 	sub.w	r3, r3, r9
 8032afa:	e69b      	b.n	8032834 <_svfprintf_r+0x5d4>
 8032afc:	4646      	mov	r6, r8
 8032afe:	e7e4      	b.n	8032aca <_svfprintf_r+0x86a>
 8032b00:	eb09 0706 	add.w	r7, r9, r6
 8032b04:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8032b08:	2200      	movs	r2, #0
 8032b0a:	2300      	movs	r3, #0
 8032b0c:	f7dd fff4 	bl	8010af8 <__aeabi_dcmpeq>
 8032b10:	b100      	cbz	r0, 8032b14 <_svfprintf_r+0x8b4>
 8032b12:	9724      	str	r7, [sp, #144]	@ 0x90
 8032b14:	2230      	movs	r2, #48	@ 0x30
 8032b16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8032b18:	429f      	cmp	r7, r3
 8032b1a:	d9eb      	bls.n	8032af4 <_svfprintf_r+0x894>
 8032b1c:	1c59      	adds	r1, r3, #1
 8032b1e:	9124      	str	r1, [sp, #144]	@ 0x90
 8032b20:	701a      	strb	r2, [r3, #0]
 8032b22:	e7f8      	b.n	8032b16 <_svfprintf_r+0x8b6>
 8032b24:	9b08      	ldr	r3, [sp, #32]
 8032b26:	2b46      	cmp	r3, #70	@ 0x46
 8032b28:	eb00 0706 	add.w	r7, r0, r6
 8032b2c:	d1ea      	bne.n	8032b04 <_svfprintf_r+0x8a4>
 8032b2e:	7803      	ldrb	r3, [r0, #0]
 8032b30:	2b30      	cmp	r3, #48	@ 0x30
 8032b32:	d109      	bne.n	8032b48 <_svfprintf_r+0x8e8>
 8032b34:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8032b38:	2200      	movs	r2, #0
 8032b3a:	2300      	movs	r3, #0
 8032b3c:	f7dd ffdc 	bl	8010af8 <__aeabi_dcmpeq>
 8032b40:	b910      	cbnz	r0, 8032b48 <_svfprintf_r+0x8e8>
 8032b42:	f1c6 0601 	rsb	r6, r6, #1
 8032b46:	9620      	str	r6, [sp, #128]	@ 0x80
 8032b48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8032b4a:	441f      	add	r7, r3
 8032b4c:	e7da      	b.n	8032b04 <_svfprintf_r+0x8a4>
 8032b4e:	9b08      	ldr	r3, [sp, #32]
 8032b50:	2b46      	cmp	r3, #70	@ 0x46
 8032b52:	f47f ae7d 	bne.w	8032850 <_svfprintf_r+0x5f0>
 8032b56:	f005 0301 	and.w	r3, r5, #1
 8032b5a:	2e00      	cmp	r6, #0
 8032b5c:	ea43 0308 	orr.w	r3, r3, r8
 8032b60:	dd25      	ble.n	8032bae <_svfprintf_r+0x94e>
 8032b62:	b37b      	cbz	r3, 8032bc4 <_svfprintf_r+0x964>
 8032b64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032b66:	18f3      	adds	r3, r6, r3
 8032b68:	4498      	add	r8, r3
 8032b6a:	2366      	movs	r3, #102	@ 0x66
 8032b6c:	9306      	str	r3, [sp, #24]
 8032b6e:	e033      	b.n	8032bd8 <_svfprintf_r+0x978>
 8032b70:	f813 7b01 	ldrb.w	r7, [r3], #1
 8032b74:	f806 7f01 	strb.w	r7, [r6, #1]!
 8032b78:	e6a1      	b.n	80328be <_svfprintf_r+0x65e>
 8032b7a:	b941      	cbnz	r1, 8032b8e <_svfprintf_r+0x92e>
 8032b7c:	2230      	movs	r2, #48	@ 0x30
 8032b7e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8032b82:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8032b86:	3330      	adds	r3, #48	@ 0x30
 8032b88:	f802 3b01 	strb.w	r3, [r2], #1
 8032b8c:	e6a3      	b.n	80328d6 <_svfprintf_r+0x676>
 8032b8e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8032b92:	e7f8      	b.n	8032b86 <_svfprintf_r+0x926>
 8032b94:	9b04      	ldr	r3, [sp, #16]
 8032b96:	429e      	cmp	r6, r3
 8032b98:	da0d      	bge.n	8032bb6 <_svfprintf_r+0x956>
 8032b9a:	9b04      	ldr	r3, [sp, #16]
 8032b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032b9e:	2e00      	cmp	r6, #0
 8032ba0:	eb03 0802 	add.w	r8, r3, r2
 8032ba4:	dc0c      	bgt.n	8032bc0 <_svfprintf_r+0x960>
 8032ba6:	f1c6 0301 	rsb	r3, r6, #1
 8032baa:	4498      	add	r8, r3
 8032bac:	e008      	b.n	8032bc0 <_svfprintf_r+0x960>
 8032bae:	b17b      	cbz	r3, 8032bd0 <_svfprintf_r+0x970>
 8032bb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032bb2:	3301      	adds	r3, #1
 8032bb4:	e7d8      	b.n	8032b68 <_svfprintf_r+0x908>
 8032bb6:	07eb      	lsls	r3, r5, #31
 8032bb8:	d521      	bpl.n	8032bfe <_svfprintf_r+0x99e>
 8032bba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032bbc:	eb06 0803 	add.w	r8, r6, r3
 8032bc0:	2367      	movs	r3, #103	@ 0x67
 8032bc2:	e7d3      	b.n	8032b6c <_svfprintf_r+0x90c>
 8032bc4:	46b0      	mov	r8, r6
 8032bc6:	e7d0      	b.n	8032b6a <_svfprintf_r+0x90a>
 8032bc8:	0803d892 	.word	0x0803d892
 8032bcc:	0803d882 	.word	0x0803d882
 8032bd0:	2366      	movs	r3, #102	@ 0x66
 8032bd2:	9306      	str	r3, [sp, #24]
 8032bd4:	f04f 0801 	mov.w	r8, #1
 8032bd8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8032bdc:	9308      	str	r3, [sp, #32]
 8032bde:	d01f      	beq.n	8032c20 <_svfprintf_r+0x9c0>
 8032be0:	2700      	movs	r7, #0
 8032be2:	2e00      	cmp	r6, #0
 8032be4:	9708      	str	r7, [sp, #32]
 8032be6:	f77f ae8a 	ble.w	80328fe <_svfprintf_r+0x69e>
 8032bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032bec:	781b      	ldrb	r3, [r3, #0]
 8032bee:	2bff      	cmp	r3, #255	@ 0xff
 8032bf0:	d107      	bne.n	8032c02 <_svfprintf_r+0x9a2>
 8032bf2:	9b08      	ldr	r3, [sp, #32]
 8032bf4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8032bf6:	443b      	add	r3, r7
 8032bf8:	fb02 8803 	mla	r8, r2, r3, r8
 8032bfc:	e67f      	b.n	80328fe <_svfprintf_r+0x69e>
 8032bfe:	46b0      	mov	r8, r6
 8032c00:	e7de      	b.n	8032bc0 <_svfprintf_r+0x960>
 8032c02:	42b3      	cmp	r3, r6
 8032c04:	daf5      	bge.n	8032bf2 <_svfprintf_r+0x992>
 8032c06:	1af6      	subs	r6, r6, r3
 8032c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032c0a:	785b      	ldrb	r3, [r3, #1]
 8032c0c:	b133      	cbz	r3, 8032c1c <_svfprintf_r+0x9bc>
 8032c0e:	9b08      	ldr	r3, [sp, #32]
 8032c10:	3301      	adds	r3, #1
 8032c12:	9308      	str	r3, [sp, #32]
 8032c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032c16:	3301      	adds	r3, #1
 8032c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8032c1a:	e7e6      	b.n	8032bea <_svfprintf_r+0x98a>
 8032c1c:	3701      	adds	r7, #1
 8032c1e:	e7e4      	b.n	8032bea <_svfprintf_r+0x98a>
 8032c20:	9f08      	ldr	r7, [sp, #32]
 8032c22:	e66c      	b.n	80328fe <_svfprintf_r+0x69e>
 8032c24:	232d      	movs	r3, #45	@ 0x2d
 8032c26:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032c2a:	e66c      	b.n	8032906 <_svfprintf_r+0x6a6>
 8032c2c:	06af      	lsls	r7, r5, #26
 8032c2e:	d50a      	bpl.n	8032c46 <_svfprintf_r+0x9e6>
 8032c30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8032c32:	6833      	ldr	r3, [r6, #0]
 8032c34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8032c36:	17d2      	asrs	r2, r2, #31
 8032c38:	e9c3 1200 	strd	r1, r2, [r3]
 8032c3c:	3604      	adds	r6, #4
 8032c3e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8032c42:	f7ff bb46 	b.w	80322d2 <_svfprintf_r+0x72>
 8032c46:	06e8      	lsls	r0, r5, #27
 8032c48:	d503      	bpl.n	8032c52 <_svfprintf_r+0x9f2>
 8032c4a:	6833      	ldr	r3, [r6, #0]
 8032c4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8032c4e:	601a      	str	r2, [r3, #0]
 8032c50:	e7f4      	b.n	8032c3c <_svfprintf_r+0x9dc>
 8032c52:	0669      	lsls	r1, r5, #25
 8032c54:	d503      	bpl.n	8032c5e <_svfprintf_r+0x9fe>
 8032c56:	6833      	ldr	r3, [r6, #0]
 8032c58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8032c5a:	801a      	strh	r2, [r3, #0]
 8032c5c:	e7ee      	b.n	8032c3c <_svfprintf_r+0x9dc>
 8032c5e:	05aa      	lsls	r2, r5, #22
 8032c60:	d5f3      	bpl.n	8032c4a <_svfprintf_r+0x9ea>
 8032c62:	6833      	ldr	r3, [r6, #0]
 8032c64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8032c66:	701a      	strb	r2, [r3, #0]
 8032c68:	e7e8      	b.n	8032c3c <_svfprintf_r+0x9dc>
 8032c6a:	f045 0510 	orr.w	r5, r5, #16
 8032c6e:	f015 0320 	ands.w	r3, r5, #32
 8032c72:	d020      	beq.n	8032cb6 <_svfprintf_r+0xa56>
 8032c74:	3607      	adds	r6, #7
 8032c76:	f026 0307 	bic.w	r3, r6, #7
 8032c7a:	461a      	mov	r2, r3
 8032c7c:	685f      	ldr	r7, [r3, #4]
 8032c7e:	f852 6b08 	ldr.w	r6, [r2], #8
 8032c82:	9207      	str	r2, [sp, #28]
 8032c84:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8032c88:	2300      	movs	r3, #0
 8032c8a:	2200      	movs	r2, #0
 8032c8c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8032c90:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8032c94:	f000 848c 	beq.w	80335b0 <_svfprintf_r+0x1350>
 8032c98:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8032c9c:	9208      	str	r2, [sp, #32]
 8032c9e:	ea56 0207 	orrs.w	r2, r6, r7
 8032ca2:	f040 848a 	bne.w	80335ba <_svfprintf_r+0x135a>
 8032ca6:	f1b8 0f00 	cmp.w	r8, #0
 8032caa:	f000 80db 	beq.w	8032e64 <_svfprintf_r+0xc04>
 8032cae:	2b01      	cmp	r3, #1
 8032cb0:	f040 8486 	bne.w	80335c0 <_svfprintf_r+0x1360>
 8032cb4:	e083      	b.n	8032dbe <_svfprintf_r+0xb5e>
 8032cb6:	4632      	mov	r2, r6
 8032cb8:	f015 0710 	ands.w	r7, r5, #16
 8032cbc:	f852 6b04 	ldr.w	r6, [r2], #4
 8032cc0:	9207      	str	r2, [sp, #28]
 8032cc2:	d001      	beq.n	8032cc8 <_svfprintf_r+0xa68>
 8032cc4:	461f      	mov	r7, r3
 8032cc6:	e7dd      	b.n	8032c84 <_svfprintf_r+0xa24>
 8032cc8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8032ccc:	d001      	beq.n	8032cd2 <_svfprintf_r+0xa72>
 8032cce:	b2b6      	uxth	r6, r6
 8032cd0:	e7d8      	b.n	8032c84 <_svfprintf_r+0xa24>
 8032cd2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8032cd6:	d0d5      	beq.n	8032c84 <_svfprintf_r+0xa24>
 8032cd8:	b2f6      	uxtb	r6, r6
 8032cda:	e7f3      	b.n	8032cc4 <_svfprintf_r+0xa64>
 8032cdc:	4633      	mov	r3, r6
 8032cde:	2278      	movs	r2, #120	@ 0x78
 8032ce0:	f853 6b04 	ldr.w	r6, [r3], #4
 8032ce4:	9307      	str	r3, [sp, #28]
 8032ce6:	f647 0330 	movw	r3, #30768	@ 0x7830
 8032cea:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8032cee:	4b94      	ldr	r3, [pc, #592]	@ (8032f40 <_svfprintf_r+0xce0>)
 8032cf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8032cf2:	2700      	movs	r7, #0
 8032cf4:	f045 0502 	orr.w	r5, r5, #2
 8032cf8:	2302      	movs	r3, #2
 8032cfa:	9206      	str	r2, [sp, #24]
 8032cfc:	e7c5      	b.n	8032c8a <_svfprintf_r+0xa2a>
 8032cfe:	4633      	mov	r3, r6
 8032d00:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8032d04:	f853 9b04 	ldr.w	r9, [r3], #4
 8032d08:	9307      	str	r3, [sp, #28]
 8032d0a:	f04f 0600 	mov.w	r6, #0
 8032d0e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8032d12:	d00f      	beq.n	8032d34 <_svfprintf_r+0xad4>
 8032d14:	4642      	mov	r2, r8
 8032d16:	4631      	mov	r1, r6
 8032d18:	4648      	mov	r0, r9
 8032d1a:	f7dd fa71 	bl	8010200 <memchr>
 8032d1e:	4682      	mov	sl, r0
 8032d20:	2800      	cmp	r0, #0
 8032d22:	f43f ac81 	beq.w	8032628 <_svfprintf_r+0x3c8>
 8032d26:	eba0 0809 	sub.w	r8, r0, r9
 8032d2a:	46b2      	mov	sl, r6
 8032d2c:	9610      	str	r6, [sp, #64]	@ 0x40
 8032d2e:	4637      	mov	r7, r6
 8032d30:	9608      	str	r6, [sp, #32]
 8032d32:	e5eb      	b.n	803290c <_svfprintf_r+0x6ac>
 8032d34:	4648      	mov	r0, r9
 8032d36:	f7dd fab3 	bl	80102a0 <strlen>
 8032d3a:	46b2      	mov	sl, r6
 8032d3c:	4680      	mov	r8, r0
 8032d3e:	e473      	b.n	8032628 <_svfprintf_r+0x3c8>
 8032d40:	f045 0510 	orr.w	r5, r5, #16
 8032d44:	f015 0320 	ands.w	r3, r5, #32
 8032d48:	d009      	beq.n	8032d5e <_svfprintf_r+0xafe>
 8032d4a:	3607      	adds	r6, #7
 8032d4c:	f026 0307 	bic.w	r3, r6, #7
 8032d50:	461a      	mov	r2, r3
 8032d52:	685f      	ldr	r7, [r3, #4]
 8032d54:	f852 6b08 	ldr.w	r6, [r2], #8
 8032d58:	9207      	str	r2, [sp, #28]
 8032d5a:	2301      	movs	r3, #1
 8032d5c:	e795      	b.n	8032c8a <_svfprintf_r+0xa2a>
 8032d5e:	4632      	mov	r2, r6
 8032d60:	f015 0710 	ands.w	r7, r5, #16
 8032d64:	f852 6b04 	ldr.w	r6, [r2], #4
 8032d68:	9207      	str	r2, [sp, #28]
 8032d6a:	d001      	beq.n	8032d70 <_svfprintf_r+0xb10>
 8032d6c:	461f      	mov	r7, r3
 8032d6e:	e7f4      	b.n	8032d5a <_svfprintf_r+0xafa>
 8032d70:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8032d74:	d001      	beq.n	8032d7a <_svfprintf_r+0xb1a>
 8032d76:	b2b6      	uxth	r6, r6
 8032d78:	e7ef      	b.n	8032d5a <_svfprintf_r+0xafa>
 8032d7a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8032d7e:	d0ec      	beq.n	8032d5a <_svfprintf_r+0xafa>
 8032d80:	b2f6      	uxtb	r6, r6
 8032d82:	e7f3      	b.n	8032d6c <_svfprintf_r+0xb0c>
 8032d84:	4b6f      	ldr	r3, [pc, #444]	@ (8032f44 <_svfprintf_r+0xce4>)
 8032d86:	f7ff bb39 	b.w	80323fc <_svfprintf_r+0x19c>
 8032d8a:	4632      	mov	r2, r6
 8032d8c:	f015 0710 	ands.w	r7, r5, #16
 8032d90:	f852 6b04 	ldr.w	r6, [r2], #4
 8032d94:	9207      	str	r2, [sp, #28]
 8032d96:	d002      	beq.n	8032d9e <_svfprintf_r+0xb3e>
 8032d98:	461f      	mov	r7, r3
 8032d9a:	f7ff bb3c 	b.w	8032416 <_svfprintf_r+0x1b6>
 8032d9e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8032da2:	d002      	beq.n	8032daa <_svfprintf_r+0xb4a>
 8032da4:	b2b6      	uxth	r6, r6
 8032da6:	f7ff bb36 	b.w	8032416 <_svfprintf_r+0x1b6>
 8032daa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8032dae:	f43f ab32 	beq.w	8032416 <_svfprintf_r+0x1b6>
 8032db2:	b2f6      	uxtb	r6, r6
 8032db4:	e7f0      	b.n	8032d98 <_svfprintf_r+0xb38>
 8032db6:	2e0a      	cmp	r6, #10
 8032db8:	f177 0300 	sbcs.w	r3, r7, #0
 8032dbc:	d207      	bcs.n	8032dce <_svfprintf_r+0xb6e>
 8032dbe:	3630      	adds	r6, #48	@ 0x30
 8032dc0:	b2f6      	uxtb	r6, r6
 8032dc2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8032dc6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8032dca:	f000 bc15 	b.w	80335f8 <_svfprintf_r+0x1398>
 8032dce:	2300      	movs	r3, #0
 8032dd0:	9304      	str	r3, [sp, #16]
 8032dd2:	9b08      	ldr	r3, [sp, #32]
 8032dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8032dd8:	ad52      	add	r5, sp, #328	@ 0x148
 8032dda:	9310      	str	r3, [sp, #64]	@ 0x40
 8032ddc:	220a      	movs	r2, #10
 8032dde:	2300      	movs	r3, #0
 8032de0:	4630      	mov	r0, r6
 8032de2:	4639      	mov	r1, r7
 8032de4:	f7dd ffb8 	bl	8010d58 <__aeabi_uldivmod>
 8032de8:	9b04      	ldr	r3, [sp, #16]
 8032dea:	9011      	str	r0, [sp, #68]	@ 0x44
 8032dec:	3301      	adds	r3, #1
 8032dee:	9304      	str	r3, [sp, #16]
 8032df0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032df2:	3230      	adds	r2, #48	@ 0x30
 8032df4:	468a      	mov	sl, r1
 8032df6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8032dfa:	f805 2c01 	strb.w	r2, [r5, #-1]
 8032dfe:	b1d3      	cbz	r3, 8032e36 <_svfprintf_r+0xbd6>
 8032e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032e02:	9a04      	ldr	r2, [sp, #16]
 8032e04:	781b      	ldrb	r3, [r3, #0]
 8032e06:	429a      	cmp	r2, r3
 8032e08:	d115      	bne.n	8032e36 <_svfprintf_r+0xbd6>
 8032e0a:	2aff      	cmp	r2, #255	@ 0xff
 8032e0c:	d013      	beq.n	8032e36 <_svfprintf_r+0xbd6>
 8032e0e:	2e0a      	cmp	r6, #10
 8032e10:	f177 0300 	sbcs.w	r3, r7, #0
 8032e14:	d30f      	bcc.n	8032e36 <_svfprintf_r+0xbd6>
 8032e16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8032e18:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8032e1a:	eba9 0903 	sub.w	r9, r9, r3
 8032e1e:	461a      	mov	r2, r3
 8032e20:	4648      	mov	r0, r9
 8032e22:	f7fa fdbc 	bl	802d99e <strncpy>
 8032e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032e28:	785b      	ldrb	r3, [r3, #1]
 8032e2a:	b11b      	cbz	r3, 8032e34 <_svfprintf_r+0xbd4>
 8032e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032e2e:	3301      	adds	r3, #1
 8032e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8032e32:	2300      	movs	r3, #0
 8032e34:	9304      	str	r3, [sp, #16]
 8032e36:	2e0a      	cmp	r6, #10
 8032e38:	f177 0700 	sbcs.w	r7, r7, #0
 8032e3c:	f0c0 83dc 	bcc.w	80335f8 <_svfprintf_r+0x1398>
 8032e40:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8032e42:	4657      	mov	r7, sl
 8032e44:	464d      	mov	r5, r9
 8032e46:	e7c9      	b.n	8032ddc <_svfprintf_r+0xb7c>
 8032e48:	f006 030f 	and.w	r3, r6, #15
 8032e4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8032e4e:	0936      	lsrs	r6, r6, #4
 8032e50:	5cd3      	ldrb	r3, [r2, r3]
 8032e52:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8032e56:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8032e5a:	093f      	lsrs	r7, r7, #4
 8032e5c:	ea56 0307 	orrs.w	r3, r6, r7
 8032e60:	d1f2      	bne.n	8032e48 <_svfprintf_r+0xbe8>
 8032e62:	e3c9      	b.n	80335f8 <_svfprintf_r+0x1398>
 8032e64:	b91b      	cbnz	r3, 8032e6e <_svfprintf_r+0xc0e>
 8032e66:	07e9      	lsls	r1, r5, #31
 8032e68:	d501      	bpl.n	8032e6e <_svfprintf_r+0xc0e>
 8032e6a:	2630      	movs	r6, #48	@ 0x30
 8032e6c:	e7a9      	b.n	8032dc2 <_svfprintf_r+0xb62>
 8032e6e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8032e72:	e3c1      	b.n	80335f8 <_svfprintf_r+0x1398>
 8032e74:	9b06      	ldr	r3, [sp, #24]
 8032e76:	2b00      	cmp	r3, #0
 8032e78:	f000 838f 	beq.w	803359a <_svfprintf_r+0x133a>
 8032e7c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8032e80:	2300      	movs	r3, #0
 8032e82:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032e86:	9607      	str	r6, [sp, #28]
 8032e88:	f7ff bb63 	b.w	8032552 <_svfprintf_r+0x2f2>
 8032e8c:	2010      	movs	r0, #16
 8032e8e:	4403      	add	r3, r0
 8032e90:	2a07      	cmp	r2, #7
 8032e92:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032e96:	6060      	str	r0, [r4, #4]
 8032e98:	dd08      	ble.n	8032eac <_svfprintf_r+0xc4c>
 8032e9a:	9803      	ldr	r0, [sp, #12]
 8032e9c:	aa26      	add	r2, sp, #152	@ 0x98
 8032e9e:	4659      	mov	r1, fp
 8032ea0:	f7fd fd66 	bl	8030970 <__ssprint_r>
 8032ea4:	2800      	cmp	r0, #0
 8032ea6:	f040 8356 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032eaa:	a929      	add	r1, sp, #164	@ 0xa4
 8032eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032eae:	3b10      	subs	r3, #16
 8032eb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032eb2:	460c      	mov	r4, r1
 8032eb4:	e546      	b.n	8032944 <_svfprintf_r+0x6e4>
 8032eb6:	460c      	mov	r4, r1
 8032eb8:	e561      	b.n	803297e <_svfprintf_r+0x71e>
 8032eba:	9803      	ldr	r0, [sp, #12]
 8032ebc:	aa26      	add	r2, sp, #152	@ 0x98
 8032ebe:	4659      	mov	r1, fp
 8032ec0:	f7fd fd56 	bl	8030970 <__ssprint_r>
 8032ec4:	2800      	cmp	r0, #0
 8032ec6:	f040 8346 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032eca:	ac29      	add	r4, sp, #164	@ 0xa4
 8032ecc:	e569      	b.n	80329a2 <_svfprintf_r+0x742>
 8032ece:	9803      	ldr	r0, [sp, #12]
 8032ed0:	aa26      	add	r2, sp, #152	@ 0x98
 8032ed2:	4659      	mov	r1, fp
 8032ed4:	f7fd fd4c 	bl	8030970 <__ssprint_r>
 8032ed8:	2800      	cmp	r0, #0
 8032eda:	f040 833c 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032ede:	ac29      	add	r4, sp, #164	@ 0xa4
 8032ee0:	e56f      	b.n	80329c2 <_svfprintf_r+0x762>
 8032ee2:	2010      	movs	r0, #16
 8032ee4:	4403      	add	r3, r0
 8032ee6:	2a07      	cmp	r2, #7
 8032ee8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032eec:	6060      	str	r0, [r4, #4]
 8032eee:	dd08      	ble.n	8032f02 <_svfprintf_r+0xca2>
 8032ef0:	9803      	ldr	r0, [sp, #12]
 8032ef2:	aa26      	add	r2, sp, #152	@ 0x98
 8032ef4:	4659      	mov	r1, fp
 8032ef6:	f7fd fd3b 	bl	8030970 <__ssprint_r>
 8032efa:	2800      	cmp	r0, #0
 8032efc:	f040 832b 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032f00:	a929      	add	r1, sp, #164	@ 0xa4
 8032f02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032f04:	3b10      	subs	r3, #16
 8032f06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032f08:	460c      	mov	r4, r1
 8032f0a:	e563      	b.n	80329d4 <_svfprintf_r+0x774>
 8032f0c:	460c      	mov	r4, r1
 8032f0e:	e57e      	b.n	8032a0e <_svfprintf_r+0x7ae>
 8032f10:	2010      	movs	r0, #16
 8032f12:	4403      	add	r3, r0
 8032f14:	2a07      	cmp	r2, #7
 8032f16:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032f1a:	6060      	str	r0, [r4, #4]
 8032f1c:	dd08      	ble.n	8032f30 <_svfprintf_r+0xcd0>
 8032f1e:	9803      	ldr	r0, [sp, #12]
 8032f20:	aa26      	add	r2, sp, #152	@ 0x98
 8032f22:	4659      	mov	r1, fp
 8032f24:	f7fd fd24 	bl	8030970 <__ssprint_r>
 8032f28:	2800      	cmp	r0, #0
 8032f2a:	f040 8314 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032f2e:	a929      	add	r1, sp, #164	@ 0xa4
 8032f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032f32:	3b10      	subs	r3, #16
 8032f34:	9310      	str	r3, [sp, #64]	@ 0x40
 8032f36:	460c      	mov	r4, r1
 8032f38:	e56f      	b.n	8032a1a <_svfprintf_r+0x7ba>
 8032f3a:	460c      	mov	r4, r1
 8032f3c:	e58a      	b.n	8032a54 <_svfprintf_r+0x7f4>
 8032f3e:	bf00      	nop
 8032f40:	0803d2bb 	.word	0x0803d2bb
 8032f44:	0803d2cc 	.word	0x0803d2cc
 8032f48:	9b06      	ldr	r3, [sp, #24]
 8032f4a:	2b65      	cmp	r3, #101	@ 0x65
 8032f4c:	f340 8246 	ble.w	80333dc <_svfprintf_r+0x117c>
 8032f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8032f54:	2200      	movs	r2, #0
 8032f56:	2300      	movs	r3, #0
 8032f58:	f7dd fdce 	bl	8010af8 <__aeabi_dcmpeq>
 8032f5c:	2800      	cmp	r0, #0
 8032f5e:	d06a      	beq.n	8033036 <_svfprintf_r+0xdd6>
 8032f60:	4b73      	ldr	r3, [pc, #460]	@ (8033130 <_svfprintf_r+0xed0>)
 8032f62:	6023      	str	r3, [r4, #0]
 8032f64:	2301      	movs	r3, #1
 8032f66:	6063      	str	r3, [r4, #4]
 8032f68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032f6a:	3301      	adds	r3, #1
 8032f6c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032f6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032f70:	3301      	adds	r3, #1
 8032f72:	2b07      	cmp	r3, #7
 8032f74:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032f76:	dc37      	bgt.n	8032fe8 <_svfprintf_r+0xd88>
 8032f78:	3408      	adds	r4, #8
 8032f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8032f7c:	9a04      	ldr	r2, [sp, #16]
 8032f7e:	4293      	cmp	r3, r2
 8032f80:	db02      	blt.n	8032f88 <_svfprintf_r+0xd28>
 8032f82:	07ef      	lsls	r7, r5, #31
 8032f84:	f57f ad76 	bpl.w	8032a74 <_svfprintf_r+0x814>
 8032f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8032f8a:	6023      	str	r3, [r4, #0]
 8032f8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032f8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032f90:	6063      	str	r3, [r4, #4]
 8032f92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032f94:	4413      	add	r3, r2
 8032f96:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032f98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032f9a:	3301      	adds	r3, #1
 8032f9c:	2b07      	cmp	r3, #7
 8032f9e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032fa0:	dc2c      	bgt.n	8032ffc <_svfprintf_r+0xd9c>
 8032fa2:	3408      	adds	r4, #8
 8032fa4:	9b04      	ldr	r3, [sp, #16]
 8032fa6:	1e5e      	subs	r6, r3, #1
 8032fa8:	2e00      	cmp	r6, #0
 8032faa:	f77f ad63 	ble.w	8032a74 <_svfprintf_r+0x814>
 8032fae:	4f61      	ldr	r7, [pc, #388]	@ (8033134 <_svfprintf_r+0xed4>)
 8032fb0:	f04f 0810 	mov.w	r8, #16
 8032fb4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8032fb8:	2e10      	cmp	r6, #16
 8032fba:	f103 0301 	add.w	r3, r3, #1
 8032fbe:	f104 0108 	add.w	r1, r4, #8
 8032fc2:	6027      	str	r7, [r4, #0]
 8032fc4:	dc24      	bgt.n	8033010 <_svfprintf_r+0xdb0>
 8032fc6:	6066      	str	r6, [r4, #4]
 8032fc8:	2b07      	cmp	r3, #7
 8032fca:	4416      	add	r6, r2
 8032fcc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8032fd0:	f340 82a0 	ble.w	8033514 <_svfprintf_r+0x12b4>
 8032fd4:	9803      	ldr	r0, [sp, #12]
 8032fd6:	aa26      	add	r2, sp, #152	@ 0x98
 8032fd8:	4659      	mov	r1, fp
 8032fda:	f7fd fcc9 	bl	8030970 <__ssprint_r>
 8032fde:	2800      	cmp	r0, #0
 8032fe0:	f040 82b9 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032fe4:	ac29      	add	r4, sp, #164	@ 0xa4
 8032fe6:	e545      	b.n	8032a74 <_svfprintf_r+0x814>
 8032fe8:	9803      	ldr	r0, [sp, #12]
 8032fea:	aa26      	add	r2, sp, #152	@ 0x98
 8032fec:	4659      	mov	r1, fp
 8032fee:	f7fd fcbf 	bl	8030970 <__ssprint_r>
 8032ff2:	2800      	cmp	r0, #0
 8032ff4:	f040 82af 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8032ff8:	ac29      	add	r4, sp, #164	@ 0xa4
 8032ffa:	e7be      	b.n	8032f7a <_svfprintf_r+0xd1a>
 8032ffc:	9803      	ldr	r0, [sp, #12]
 8032ffe:	aa26      	add	r2, sp, #152	@ 0x98
 8033000:	4659      	mov	r1, fp
 8033002:	f7fd fcb5 	bl	8030970 <__ssprint_r>
 8033006:	2800      	cmp	r0, #0
 8033008:	f040 82a5 	bne.w	8033556 <_svfprintf_r+0x12f6>
 803300c:	ac29      	add	r4, sp, #164	@ 0xa4
 803300e:	e7c9      	b.n	8032fa4 <_svfprintf_r+0xd44>
 8033010:	3210      	adds	r2, #16
 8033012:	2b07      	cmp	r3, #7
 8033014:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033018:	f8c4 8004 	str.w	r8, [r4, #4]
 803301c:	dd08      	ble.n	8033030 <_svfprintf_r+0xdd0>
 803301e:	9803      	ldr	r0, [sp, #12]
 8033020:	aa26      	add	r2, sp, #152	@ 0x98
 8033022:	4659      	mov	r1, fp
 8033024:	f7fd fca4 	bl	8030970 <__ssprint_r>
 8033028:	2800      	cmp	r0, #0
 803302a:	f040 8294 	bne.w	8033556 <_svfprintf_r+0x12f6>
 803302e:	a929      	add	r1, sp, #164	@ 0xa4
 8033030:	3e10      	subs	r6, #16
 8033032:	460c      	mov	r4, r1
 8033034:	e7be      	b.n	8032fb4 <_svfprintf_r+0xd54>
 8033036:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033038:	2b00      	cmp	r3, #0
 803303a:	dc7d      	bgt.n	8033138 <_svfprintf_r+0xed8>
 803303c:	4b3c      	ldr	r3, [pc, #240]	@ (8033130 <_svfprintf_r+0xed0>)
 803303e:	6023      	str	r3, [r4, #0]
 8033040:	2301      	movs	r3, #1
 8033042:	6063      	str	r3, [r4, #4]
 8033044:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033046:	3301      	adds	r3, #1
 8033048:	9328      	str	r3, [sp, #160]	@ 0xa0
 803304a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803304c:	3301      	adds	r3, #1
 803304e:	2b07      	cmp	r3, #7
 8033050:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033052:	dc46      	bgt.n	80330e2 <_svfprintf_r+0xe82>
 8033054:	3408      	adds	r4, #8
 8033056:	9904      	ldr	r1, [sp, #16]
 8033058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803305a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803305c:	430b      	orrs	r3, r1
 803305e:	f005 0101 	and.w	r1, r5, #1
 8033062:	430b      	orrs	r3, r1
 8033064:	f43f ad06 	beq.w	8032a74 <_svfprintf_r+0x814>
 8033068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803306a:	6023      	str	r3, [r4, #0]
 803306c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803306e:	6063      	str	r3, [r4, #4]
 8033070:	441a      	add	r2, r3
 8033072:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033074:	9228      	str	r2, [sp, #160]	@ 0xa0
 8033076:	3301      	adds	r3, #1
 8033078:	2b07      	cmp	r3, #7
 803307a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803307c:	dc3b      	bgt.n	80330f6 <_svfprintf_r+0xe96>
 803307e:	f104 0308 	add.w	r3, r4, #8
 8033082:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033084:	2e00      	cmp	r6, #0
 8033086:	da1b      	bge.n	80330c0 <_svfprintf_r+0xe60>
 8033088:	4f2a      	ldr	r7, [pc, #168]	@ (8033134 <_svfprintf_r+0xed4>)
 803308a:	4276      	negs	r6, r6
 803308c:	461a      	mov	r2, r3
 803308e:	2410      	movs	r4, #16
 8033090:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8033094:	2e10      	cmp	r6, #16
 8033096:	f101 0101 	add.w	r1, r1, #1
 803309a:	f103 0308 	add.w	r3, r3, #8
 803309e:	6017      	str	r7, [r2, #0]
 80330a0:	dc33      	bgt.n	803310a <_svfprintf_r+0xeaa>
 80330a2:	6056      	str	r6, [r2, #4]
 80330a4:	2907      	cmp	r1, #7
 80330a6:	4406      	add	r6, r0
 80330a8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80330ac:	dd08      	ble.n	80330c0 <_svfprintf_r+0xe60>
 80330ae:	9803      	ldr	r0, [sp, #12]
 80330b0:	aa26      	add	r2, sp, #152	@ 0x98
 80330b2:	4659      	mov	r1, fp
 80330b4:	f7fd fc5c 	bl	8030970 <__ssprint_r>
 80330b8:	2800      	cmp	r0, #0
 80330ba:	f040 824c 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80330be:	ab29      	add	r3, sp, #164	@ 0xa4
 80330c0:	9a04      	ldr	r2, [sp, #16]
 80330c2:	9904      	ldr	r1, [sp, #16]
 80330c4:	605a      	str	r2, [r3, #4]
 80330c6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80330c8:	f8c3 9000 	str.w	r9, [r3]
 80330cc:	440a      	add	r2, r1
 80330ce:	9228      	str	r2, [sp, #160]	@ 0xa0
 80330d0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80330d2:	3201      	adds	r2, #1
 80330d4:	2a07      	cmp	r2, #7
 80330d6:	9227      	str	r2, [sp, #156]	@ 0x9c
 80330d8:	f73f af7c 	bgt.w	8032fd4 <_svfprintf_r+0xd74>
 80330dc:	f103 0408 	add.w	r4, r3, #8
 80330e0:	e4c8      	b.n	8032a74 <_svfprintf_r+0x814>
 80330e2:	9803      	ldr	r0, [sp, #12]
 80330e4:	aa26      	add	r2, sp, #152	@ 0x98
 80330e6:	4659      	mov	r1, fp
 80330e8:	f7fd fc42 	bl	8030970 <__ssprint_r>
 80330ec:	2800      	cmp	r0, #0
 80330ee:	f040 8232 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80330f2:	ac29      	add	r4, sp, #164	@ 0xa4
 80330f4:	e7af      	b.n	8033056 <_svfprintf_r+0xdf6>
 80330f6:	9803      	ldr	r0, [sp, #12]
 80330f8:	aa26      	add	r2, sp, #152	@ 0x98
 80330fa:	4659      	mov	r1, fp
 80330fc:	f7fd fc38 	bl	8030970 <__ssprint_r>
 8033100:	2800      	cmp	r0, #0
 8033102:	f040 8228 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033106:	ab29      	add	r3, sp, #164	@ 0xa4
 8033108:	e7bb      	b.n	8033082 <_svfprintf_r+0xe22>
 803310a:	3010      	adds	r0, #16
 803310c:	2907      	cmp	r1, #7
 803310e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8033112:	6054      	str	r4, [r2, #4]
 8033114:	dd08      	ble.n	8033128 <_svfprintf_r+0xec8>
 8033116:	9803      	ldr	r0, [sp, #12]
 8033118:	aa26      	add	r2, sp, #152	@ 0x98
 803311a:	4659      	mov	r1, fp
 803311c:	f7fd fc28 	bl	8030970 <__ssprint_r>
 8033120:	2800      	cmp	r0, #0
 8033122:	f040 8218 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033126:	ab29      	add	r3, sp, #164	@ 0xa4
 8033128:	3e10      	subs	r6, #16
 803312a:	461a      	mov	r2, r3
 803312c:	e7b0      	b.n	8033090 <_svfprintf_r+0xe30>
 803312e:	bf00      	nop
 8033130:	0803d2dd 	.word	0x0803d2dd
 8033134:	0803d882 	.word	0x0803d882
 8033138:	9b04      	ldr	r3, [sp, #16]
 803313a:	444b      	add	r3, r9
 803313c:	9306      	str	r3, [sp, #24]
 803313e:	9b04      	ldr	r3, [sp, #16]
 8033140:	42b3      	cmp	r3, r6
 8033142:	bfa8      	it	ge
 8033144:	4633      	movge	r3, r6
 8033146:	2b00      	cmp	r3, #0
 8033148:	4698      	mov	r8, r3
 803314a:	dd0b      	ble.n	8033164 <_svfprintf_r+0xf04>
 803314c:	e9c4 9300 	strd	r9, r3, [r4]
 8033150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033152:	4443      	add	r3, r8
 8033154:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033156:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033158:	3301      	adds	r3, #1
 803315a:	2b07      	cmp	r3, #7
 803315c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803315e:	f300 8089 	bgt.w	8033274 <_svfprintf_r+0x1014>
 8033162:	3408      	adds	r4, #8
 8033164:	4643      	mov	r3, r8
 8033166:	2b00      	cmp	r3, #0
 8033168:	bfac      	ite	ge
 803316a:	eba6 0808 	subge.w	r8, r6, r8
 803316e:	46b0      	movlt	r8, r6
 8033170:	f1b8 0f00 	cmp.w	r8, #0
 8033174:	dd1b      	ble.n	80331ae <_svfprintf_r+0xf4e>
 8033176:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803317a:	4897      	ldr	r0, [pc, #604]	@ (80333d8 <_svfprintf_r+0x1178>)
 803317c:	6020      	str	r0, [r4, #0]
 803317e:	f1b8 0f10 	cmp.w	r8, #16
 8033182:	f102 0201 	add.w	r2, r2, #1
 8033186:	f104 0108 	add.w	r1, r4, #8
 803318a:	dc7d      	bgt.n	8033288 <_svfprintf_r+0x1028>
 803318c:	4443      	add	r3, r8
 803318e:	2a07      	cmp	r2, #7
 8033190:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033194:	f8c4 8004 	str.w	r8, [r4, #4]
 8033198:	f340 808a 	ble.w	80332b0 <_svfprintf_r+0x1050>
 803319c:	9803      	ldr	r0, [sp, #12]
 803319e:	aa26      	add	r2, sp, #152	@ 0x98
 80331a0:	4659      	mov	r1, fp
 80331a2:	f7fd fbe5 	bl	8030970 <__ssprint_r>
 80331a6:	2800      	cmp	r0, #0
 80331a8:	f040 81d5 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80331ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80331ae:	eb09 0806 	add.w	r8, r9, r6
 80331b2:	056e      	lsls	r6, r5, #21
 80331b4:	d508      	bpl.n	80331c8 <_svfprintf_r+0xf68>
 80331b6:	9b08      	ldr	r3, [sp, #32]
 80331b8:	2b00      	cmp	r3, #0
 80331ba:	d17b      	bne.n	80332b4 <_svfprintf_r+0x1054>
 80331bc:	2f00      	cmp	r7, #0
 80331be:	d17b      	bne.n	80332b8 <_svfprintf_r+0x1058>
 80331c0:	9b06      	ldr	r3, [sp, #24]
 80331c2:	4598      	cmp	r8, r3
 80331c4:	bf28      	it	cs
 80331c6:	4698      	movcs	r8, r3
 80331c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80331ca:	9a04      	ldr	r2, [sp, #16]
 80331cc:	4293      	cmp	r3, r2
 80331ce:	db01      	blt.n	80331d4 <_svfprintf_r+0xf74>
 80331d0:	07e8      	lsls	r0, r5, #31
 80331d2:	d50e      	bpl.n	80331f2 <_svfprintf_r+0xf92>
 80331d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80331d6:	6023      	str	r3, [r4, #0]
 80331d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80331da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80331dc:	6063      	str	r3, [r4, #4]
 80331de:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80331e0:	4413      	add	r3, r2
 80331e2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80331e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80331e6:	3301      	adds	r3, #1
 80331e8:	2b07      	cmp	r3, #7
 80331ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80331ec:	f300 80df 	bgt.w	80333ae <_svfprintf_r+0x114e>
 80331f0:	3408      	adds	r4, #8
 80331f2:	9b04      	ldr	r3, [sp, #16]
 80331f4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80331f6:	1bdf      	subs	r7, r3, r7
 80331f8:	9b06      	ldr	r3, [sp, #24]
 80331fa:	eba3 0308 	sub.w	r3, r3, r8
 80331fe:	429f      	cmp	r7, r3
 8033200:	bfa8      	it	ge
 8033202:	461f      	movge	r7, r3
 8033204:	2f00      	cmp	r7, #0
 8033206:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033208:	dd0a      	ble.n	8033220 <_svfprintf_r+0xfc0>
 803320a:	443b      	add	r3, r7
 803320c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803320e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033210:	3301      	adds	r3, #1
 8033212:	2b07      	cmp	r3, #7
 8033214:	e9c4 8700 	strd	r8, r7, [r4]
 8033218:	9327      	str	r3, [sp, #156]	@ 0x9c
 803321a:	f300 80d2 	bgt.w	80333c2 <_svfprintf_r+0x1162>
 803321e:	3408      	adds	r4, #8
 8033220:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033222:	9b04      	ldr	r3, [sp, #16]
 8033224:	2f00      	cmp	r7, #0
 8033226:	eba3 0606 	sub.w	r6, r3, r6
 803322a:	bfa8      	it	ge
 803322c:	1bf6      	subge	r6, r6, r7
 803322e:	2e00      	cmp	r6, #0
 8033230:	f77f ac20 	ble.w	8032a74 <_svfprintf_r+0x814>
 8033234:	4f68      	ldr	r7, [pc, #416]	@ (80333d8 <_svfprintf_r+0x1178>)
 8033236:	f04f 0810 	mov.w	r8, #16
 803323a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803323e:	2e10      	cmp	r6, #16
 8033240:	f103 0301 	add.w	r3, r3, #1
 8033244:	f104 0108 	add.w	r1, r4, #8
 8033248:	6027      	str	r7, [r4, #0]
 803324a:	f77f aebc 	ble.w	8032fc6 <_svfprintf_r+0xd66>
 803324e:	3210      	adds	r2, #16
 8033250:	2b07      	cmp	r3, #7
 8033252:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033256:	f8c4 8004 	str.w	r8, [r4, #4]
 803325a:	dd08      	ble.n	803326e <_svfprintf_r+0x100e>
 803325c:	9803      	ldr	r0, [sp, #12]
 803325e:	aa26      	add	r2, sp, #152	@ 0x98
 8033260:	4659      	mov	r1, fp
 8033262:	f7fd fb85 	bl	8030970 <__ssprint_r>
 8033266:	2800      	cmp	r0, #0
 8033268:	f040 8175 	bne.w	8033556 <_svfprintf_r+0x12f6>
 803326c:	a929      	add	r1, sp, #164	@ 0xa4
 803326e:	3e10      	subs	r6, #16
 8033270:	460c      	mov	r4, r1
 8033272:	e7e2      	b.n	803323a <_svfprintf_r+0xfda>
 8033274:	9803      	ldr	r0, [sp, #12]
 8033276:	aa26      	add	r2, sp, #152	@ 0x98
 8033278:	4659      	mov	r1, fp
 803327a:	f7fd fb79 	bl	8030970 <__ssprint_r>
 803327e:	2800      	cmp	r0, #0
 8033280:	f040 8169 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033284:	ac29      	add	r4, sp, #164	@ 0xa4
 8033286:	e76d      	b.n	8033164 <_svfprintf_r+0xf04>
 8033288:	2010      	movs	r0, #16
 803328a:	4403      	add	r3, r0
 803328c:	2a07      	cmp	r2, #7
 803328e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033292:	6060      	str	r0, [r4, #4]
 8033294:	dd08      	ble.n	80332a8 <_svfprintf_r+0x1048>
 8033296:	9803      	ldr	r0, [sp, #12]
 8033298:	aa26      	add	r2, sp, #152	@ 0x98
 803329a:	4659      	mov	r1, fp
 803329c:	f7fd fb68 	bl	8030970 <__ssprint_r>
 80332a0:	2800      	cmp	r0, #0
 80332a2:	f040 8158 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80332a6:	a929      	add	r1, sp, #164	@ 0xa4
 80332a8:	f1a8 0810 	sub.w	r8, r8, #16
 80332ac:	460c      	mov	r4, r1
 80332ae:	e762      	b.n	8033176 <_svfprintf_r+0xf16>
 80332b0:	460c      	mov	r4, r1
 80332b2:	e77c      	b.n	80331ae <_svfprintf_r+0xf4e>
 80332b4:	2f00      	cmp	r7, #0
 80332b6:	d04a      	beq.n	803334e <_svfprintf_r+0x10ee>
 80332b8:	3f01      	subs	r7, #1
 80332ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80332bc:	6023      	str	r3, [r4, #0]
 80332be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80332c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80332c2:	6063      	str	r3, [r4, #4]
 80332c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80332c6:	4413      	add	r3, r2
 80332c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80332ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80332cc:	3301      	adds	r3, #1
 80332ce:	2b07      	cmp	r3, #7
 80332d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80332d2:	dc43      	bgt.n	803335c <_svfprintf_r+0x10fc>
 80332d4:	3408      	adds	r4, #8
 80332d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80332d8:	781a      	ldrb	r2, [r3, #0]
 80332da:	9b06      	ldr	r3, [sp, #24]
 80332dc:	eba3 0308 	sub.w	r3, r3, r8
 80332e0:	429a      	cmp	r2, r3
 80332e2:	bfa8      	it	ge
 80332e4:	461a      	movge	r2, r3
 80332e6:	2a00      	cmp	r2, #0
 80332e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80332ea:	4691      	mov	r9, r2
 80332ec:	dd09      	ble.n	8033302 <_svfprintf_r+0x10a2>
 80332ee:	4413      	add	r3, r2
 80332f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80332f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80332f4:	3301      	adds	r3, #1
 80332f6:	2b07      	cmp	r3, #7
 80332f8:	e9c4 8200 	strd	r8, r2, [r4]
 80332fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80332fe:	dc37      	bgt.n	8033370 <_svfprintf_r+0x1110>
 8033300:	3408      	adds	r4, #8
 8033302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033304:	781e      	ldrb	r6, [r3, #0]
 8033306:	f1b9 0f00 	cmp.w	r9, #0
 803330a:	bfa8      	it	ge
 803330c:	eba6 0609 	subge.w	r6, r6, r9
 8033310:	2e00      	cmp	r6, #0
 8033312:	dd18      	ble.n	8033346 <_svfprintf_r+0x10e6>
 8033314:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8033318:	482f      	ldr	r0, [pc, #188]	@ (80333d8 <_svfprintf_r+0x1178>)
 803331a:	6020      	str	r0, [r4, #0]
 803331c:	2e10      	cmp	r6, #16
 803331e:	f103 0301 	add.w	r3, r3, #1
 8033322:	f104 0108 	add.w	r1, r4, #8
 8033326:	dc2d      	bgt.n	8033384 <_svfprintf_r+0x1124>
 8033328:	6066      	str	r6, [r4, #4]
 803332a:	2b07      	cmp	r3, #7
 803332c:	4416      	add	r6, r2
 803332e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8033332:	dd3a      	ble.n	80333aa <_svfprintf_r+0x114a>
 8033334:	9803      	ldr	r0, [sp, #12]
 8033336:	aa26      	add	r2, sp, #152	@ 0x98
 8033338:	4659      	mov	r1, fp
 803333a:	f7fd fb19 	bl	8030970 <__ssprint_r>
 803333e:	2800      	cmp	r0, #0
 8033340:	f040 8109 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033344:	ac29      	add	r4, sp, #164	@ 0xa4
 8033346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033348:	781b      	ldrb	r3, [r3, #0]
 803334a:	4498      	add	r8, r3
 803334c:	e733      	b.n	80331b6 <_svfprintf_r+0xf56>
 803334e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033350:	3b01      	subs	r3, #1
 8033352:	9309      	str	r3, [sp, #36]	@ 0x24
 8033354:	9b08      	ldr	r3, [sp, #32]
 8033356:	3b01      	subs	r3, #1
 8033358:	9308      	str	r3, [sp, #32]
 803335a:	e7ae      	b.n	80332ba <_svfprintf_r+0x105a>
 803335c:	9803      	ldr	r0, [sp, #12]
 803335e:	aa26      	add	r2, sp, #152	@ 0x98
 8033360:	4659      	mov	r1, fp
 8033362:	f7fd fb05 	bl	8030970 <__ssprint_r>
 8033366:	2800      	cmp	r0, #0
 8033368:	f040 80f5 	bne.w	8033556 <_svfprintf_r+0x12f6>
 803336c:	ac29      	add	r4, sp, #164	@ 0xa4
 803336e:	e7b2      	b.n	80332d6 <_svfprintf_r+0x1076>
 8033370:	9803      	ldr	r0, [sp, #12]
 8033372:	aa26      	add	r2, sp, #152	@ 0x98
 8033374:	4659      	mov	r1, fp
 8033376:	f7fd fafb 	bl	8030970 <__ssprint_r>
 803337a:	2800      	cmp	r0, #0
 803337c:	f040 80eb 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033380:	ac29      	add	r4, sp, #164	@ 0xa4
 8033382:	e7be      	b.n	8033302 <_svfprintf_r+0x10a2>
 8033384:	2010      	movs	r0, #16
 8033386:	4402      	add	r2, r0
 8033388:	2b07      	cmp	r3, #7
 803338a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803338e:	6060      	str	r0, [r4, #4]
 8033390:	dd08      	ble.n	80333a4 <_svfprintf_r+0x1144>
 8033392:	9803      	ldr	r0, [sp, #12]
 8033394:	aa26      	add	r2, sp, #152	@ 0x98
 8033396:	4659      	mov	r1, fp
 8033398:	f7fd faea 	bl	8030970 <__ssprint_r>
 803339c:	2800      	cmp	r0, #0
 803339e:	f040 80da 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80333a2:	a929      	add	r1, sp, #164	@ 0xa4
 80333a4:	3e10      	subs	r6, #16
 80333a6:	460c      	mov	r4, r1
 80333a8:	e7b4      	b.n	8033314 <_svfprintf_r+0x10b4>
 80333aa:	460c      	mov	r4, r1
 80333ac:	e7cb      	b.n	8033346 <_svfprintf_r+0x10e6>
 80333ae:	9803      	ldr	r0, [sp, #12]
 80333b0:	aa26      	add	r2, sp, #152	@ 0x98
 80333b2:	4659      	mov	r1, fp
 80333b4:	f7fd fadc 	bl	8030970 <__ssprint_r>
 80333b8:	2800      	cmp	r0, #0
 80333ba:	f040 80cc 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80333be:	ac29      	add	r4, sp, #164	@ 0xa4
 80333c0:	e717      	b.n	80331f2 <_svfprintf_r+0xf92>
 80333c2:	9803      	ldr	r0, [sp, #12]
 80333c4:	aa26      	add	r2, sp, #152	@ 0x98
 80333c6:	4659      	mov	r1, fp
 80333c8:	f7fd fad2 	bl	8030970 <__ssprint_r>
 80333cc:	2800      	cmp	r0, #0
 80333ce:	f040 80c2 	bne.w	8033556 <_svfprintf_r+0x12f6>
 80333d2:	ac29      	add	r4, sp, #164	@ 0xa4
 80333d4:	e724      	b.n	8033220 <_svfprintf_r+0xfc0>
 80333d6:	bf00      	nop
 80333d8:	0803d882 	.word	0x0803d882
 80333dc:	9904      	ldr	r1, [sp, #16]
 80333de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80333e0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80333e2:	2901      	cmp	r1, #1
 80333e4:	f103 0301 	add.w	r3, r3, #1
 80333e8:	f102 0201 	add.w	r2, r2, #1
 80333ec:	f104 0608 	add.w	r6, r4, #8
 80333f0:	dc02      	bgt.n	80333f8 <_svfprintf_r+0x1198>
 80333f2:	07e9      	lsls	r1, r5, #31
 80333f4:	f140 8083 	bpl.w	80334fe <_svfprintf_r+0x129e>
 80333f8:	2101      	movs	r1, #1
 80333fa:	2a07      	cmp	r2, #7
 80333fc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033400:	f8c4 9000 	str.w	r9, [r4]
 8033404:	6061      	str	r1, [r4, #4]
 8033406:	dd08      	ble.n	803341a <_svfprintf_r+0x11ba>
 8033408:	9803      	ldr	r0, [sp, #12]
 803340a:	aa26      	add	r2, sp, #152	@ 0x98
 803340c:	4659      	mov	r1, fp
 803340e:	f7fd faaf 	bl	8030970 <__ssprint_r>
 8033412:	2800      	cmp	r0, #0
 8033414:	f040 809f 	bne.w	8033556 <_svfprintf_r+0x12f6>
 8033418:	ae29      	add	r6, sp, #164	@ 0xa4
 803341a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803341c:	6033      	str	r3, [r6, #0]
 803341e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033422:	6073      	str	r3, [r6, #4]
 8033424:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033426:	4413      	add	r3, r2
 8033428:	9328      	str	r3, [sp, #160]	@ 0xa0
 803342a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803342c:	3301      	adds	r3, #1
 803342e:	2b07      	cmp	r3, #7
 8033430:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033432:	dc33      	bgt.n	803349c <_svfprintf_r+0x123c>
 8033434:	3608      	adds	r6, #8
 8033436:	9b04      	ldr	r3, [sp, #16]
 8033438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803343c:	1e5c      	subs	r4, r3, #1
 803343e:	2200      	movs	r2, #0
 8033440:	2300      	movs	r3, #0
 8033442:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8033446:	f7dd fb57 	bl	8010af8 <__aeabi_dcmpeq>
 803344a:	2800      	cmp	r0, #0
 803344c:	d12f      	bne.n	80334ae <_svfprintf_r+0x124e>
 803344e:	f109 0201 	add.w	r2, r9, #1
 8033452:	e9c6 2400 	strd	r2, r4, [r6]
 8033456:	9a04      	ldr	r2, [sp, #16]
 8033458:	f108 0301 	add.w	r3, r8, #1
 803345c:	3f01      	subs	r7, #1
 803345e:	4417      	add	r7, r2
 8033460:	2b07      	cmp	r3, #7
 8033462:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8033466:	dd53      	ble.n	8033510 <_svfprintf_r+0x12b0>
 8033468:	9803      	ldr	r0, [sp, #12]
 803346a:	aa26      	add	r2, sp, #152	@ 0x98
 803346c:	4659      	mov	r1, fp
 803346e:	f7fd fa7f 	bl	8030970 <__ssprint_r>
 8033472:	2800      	cmp	r0, #0
 8033474:	d16f      	bne.n	8033556 <_svfprintf_r+0x12f6>
 8033476:	ae29      	add	r6, sp, #164	@ 0xa4
 8033478:	ab22      	add	r3, sp, #136	@ 0x88
 803347a:	6033      	str	r3, [r6, #0]
 803347c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803347e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8033480:	6073      	str	r3, [r6, #4]
 8033482:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033484:	4413      	add	r3, r2
 8033486:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033488:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803348a:	3301      	adds	r3, #1
 803348c:	2b07      	cmp	r3, #7
 803348e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033490:	f73f ada0 	bgt.w	8032fd4 <_svfprintf_r+0xd74>
 8033494:	f106 0408 	add.w	r4, r6, #8
 8033498:	f7ff baec 	b.w	8032a74 <_svfprintf_r+0x814>
 803349c:	9803      	ldr	r0, [sp, #12]
 803349e:	aa26      	add	r2, sp, #152	@ 0x98
 80334a0:	4659      	mov	r1, fp
 80334a2:	f7fd fa65 	bl	8030970 <__ssprint_r>
 80334a6:	2800      	cmp	r0, #0
 80334a8:	d155      	bne.n	8033556 <_svfprintf_r+0x12f6>
 80334aa:	ae29      	add	r6, sp, #164	@ 0xa4
 80334ac:	e7c3      	b.n	8033436 <_svfprintf_r+0x11d6>
 80334ae:	9b04      	ldr	r3, [sp, #16]
 80334b0:	2b01      	cmp	r3, #1
 80334b2:	dde1      	ble.n	8033478 <_svfprintf_r+0x1218>
 80334b4:	4f57      	ldr	r7, [pc, #348]	@ (8033614 <_svfprintf_r+0x13b4>)
 80334b6:	f04f 0810 	mov.w	r8, #16
 80334ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80334be:	2c10      	cmp	r4, #16
 80334c0:	f103 0301 	add.w	r3, r3, #1
 80334c4:	f106 0108 	add.w	r1, r6, #8
 80334c8:	6037      	str	r7, [r6, #0]
 80334ca:	dc07      	bgt.n	80334dc <_svfprintf_r+0x127c>
 80334cc:	6074      	str	r4, [r6, #4]
 80334ce:	2b07      	cmp	r3, #7
 80334d0:	4414      	add	r4, r2
 80334d2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80334d6:	dcc7      	bgt.n	8033468 <_svfprintf_r+0x1208>
 80334d8:	460e      	mov	r6, r1
 80334da:	e7cd      	b.n	8033478 <_svfprintf_r+0x1218>
 80334dc:	3210      	adds	r2, #16
 80334de:	2b07      	cmp	r3, #7
 80334e0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80334e4:	f8c6 8004 	str.w	r8, [r6, #4]
 80334e8:	dd06      	ble.n	80334f8 <_svfprintf_r+0x1298>
 80334ea:	9803      	ldr	r0, [sp, #12]
 80334ec:	aa26      	add	r2, sp, #152	@ 0x98
 80334ee:	4659      	mov	r1, fp
 80334f0:	f7fd fa3e 	bl	8030970 <__ssprint_r>
 80334f4:	bb78      	cbnz	r0, 8033556 <_svfprintf_r+0x12f6>
 80334f6:	a929      	add	r1, sp, #164	@ 0xa4
 80334f8:	3c10      	subs	r4, #16
 80334fa:	460e      	mov	r6, r1
 80334fc:	e7dd      	b.n	80334ba <_svfprintf_r+0x125a>
 80334fe:	2101      	movs	r1, #1
 8033500:	2a07      	cmp	r2, #7
 8033502:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033506:	f8c4 9000 	str.w	r9, [r4]
 803350a:	6061      	str	r1, [r4, #4]
 803350c:	ddb4      	ble.n	8033478 <_svfprintf_r+0x1218>
 803350e:	e7ab      	b.n	8033468 <_svfprintf_r+0x1208>
 8033510:	3608      	adds	r6, #8
 8033512:	e7b1      	b.n	8033478 <_svfprintf_r+0x1218>
 8033514:	460c      	mov	r4, r1
 8033516:	f7ff baad 	b.w	8032a74 <_svfprintf_r+0x814>
 803351a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803351c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803351e:	1a9d      	subs	r5, r3, r2
 8033520:	2d00      	cmp	r5, #0
 8033522:	f77f aaaa 	ble.w	8032a7a <_svfprintf_r+0x81a>
 8033526:	4e3c      	ldr	r6, [pc, #240]	@ (8033618 <_svfprintf_r+0x13b8>)
 8033528:	2710      	movs	r7, #16
 803352a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803352e:	2d10      	cmp	r5, #16
 8033530:	f103 0301 	add.w	r3, r3, #1
 8033534:	6026      	str	r6, [r4, #0]
 8033536:	dc18      	bgt.n	803356a <_svfprintf_r+0x130a>
 8033538:	442a      	add	r2, r5
 803353a:	2b07      	cmp	r3, #7
 803353c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033540:	6065      	str	r5, [r4, #4]
 8033542:	f77f aa9a 	ble.w	8032a7a <_svfprintf_r+0x81a>
 8033546:	9803      	ldr	r0, [sp, #12]
 8033548:	aa26      	add	r2, sp, #152	@ 0x98
 803354a:	4659      	mov	r1, fp
 803354c:	f7fd fa10 	bl	8030970 <__ssprint_r>
 8033550:	2800      	cmp	r0, #0
 8033552:	f43f aa92 	beq.w	8032a7a <_svfprintf_r+0x81a>
 8033556:	f1ba 0f00 	cmp.w	sl, #0
 803355a:	f43f a89a 	beq.w	8032692 <_svfprintf_r+0x432>
 803355e:	9803      	ldr	r0, [sp, #12]
 8033560:	4651      	mov	r1, sl
 8033562:	f7fc fe43 	bl	80301ec <_free_r>
 8033566:	f7ff b894 	b.w	8032692 <_svfprintf_r+0x432>
 803356a:	3210      	adds	r2, #16
 803356c:	2b07      	cmp	r3, #7
 803356e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8033572:	6067      	str	r7, [r4, #4]
 8033574:	dc02      	bgt.n	803357c <_svfprintf_r+0x131c>
 8033576:	3408      	adds	r4, #8
 8033578:	3d10      	subs	r5, #16
 803357a:	e7d6      	b.n	803352a <_svfprintf_r+0x12ca>
 803357c:	9803      	ldr	r0, [sp, #12]
 803357e:	aa26      	add	r2, sp, #152	@ 0x98
 8033580:	4659      	mov	r1, fp
 8033582:	f7fd f9f5 	bl	8030970 <__ssprint_r>
 8033586:	2800      	cmp	r0, #0
 8033588:	d1e5      	bne.n	8033556 <_svfprintf_r+0x12f6>
 803358a:	ac29      	add	r4, sp, #164	@ 0xa4
 803358c:	e7f4      	b.n	8033578 <_svfprintf_r+0x1318>
 803358e:	9803      	ldr	r0, [sp, #12]
 8033590:	4651      	mov	r1, sl
 8033592:	f7fc fe2b 	bl	80301ec <_free_r>
 8033596:	f7ff ba88 	b.w	8032aaa <_svfprintf_r+0x84a>
 803359a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803359c:	2b00      	cmp	r3, #0
 803359e:	f43f a878 	beq.w	8032692 <_svfprintf_r+0x432>
 80335a2:	9803      	ldr	r0, [sp, #12]
 80335a4:	aa26      	add	r2, sp, #152	@ 0x98
 80335a6:	4659      	mov	r1, fp
 80335a8:	f7fd f9e2 	bl	8030970 <__ssprint_r>
 80335ac:	f7ff b871 	b.w	8032692 <_svfprintf_r+0x432>
 80335b0:	ea56 0207 	orrs.w	r2, r6, r7
 80335b4:	9508      	str	r5, [sp, #32]
 80335b6:	f43f ab7a 	beq.w	8032cae <_svfprintf_r+0xa4e>
 80335ba:	2b01      	cmp	r3, #1
 80335bc:	f43f abfb 	beq.w	8032db6 <_svfprintf_r+0xb56>
 80335c0:	2b02      	cmp	r3, #2
 80335c2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80335c6:	f43f ac3f 	beq.w	8032e48 <_svfprintf_r+0xbe8>
 80335ca:	f006 0307 	and.w	r3, r6, #7
 80335ce:	08f6      	lsrs	r6, r6, #3
 80335d0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80335d4:	08ff      	lsrs	r7, r7, #3
 80335d6:	3330      	adds	r3, #48	@ 0x30
 80335d8:	ea56 0107 	orrs.w	r1, r6, r7
 80335dc:	464a      	mov	r2, r9
 80335de:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80335e2:	d1f2      	bne.n	80335ca <_svfprintf_r+0x136a>
 80335e4:	9908      	ldr	r1, [sp, #32]
 80335e6:	07c8      	lsls	r0, r1, #31
 80335e8:	d506      	bpl.n	80335f8 <_svfprintf_r+0x1398>
 80335ea:	2b30      	cmp	r3, #48	@ 0x30
 80335ec:	d004      	beq.n	80335f8 <_svfprintf_r+0x1398>
 80335ee:	2330      	movs	r3, #48	@ 0x30
 80335f0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80335f4:	f1a2 0902 	sub.w	r9, r2, #2
 80335f8:	ab52      	add	r3, sp, #328	@ 0x148
 80335fa:	9d08      	ldr	r5, [sp, #32]
 80335fc:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8033600:	f04f 0a00 	mov.w	sl, #0
 8033604:	eba3 0809 	sub.w	r8, r3, r9
 8033608:	4657      	mov	r7, sl
 803360a:	f8cd a020 	str.w	sl, [sp, #32]
 803360e:	4656      	mov	r6, sl
 8033610:	f7ff b97c 	b.w	803290c <_svfprintf_r+0x6ac>
 8033614:	0803d882 	.word	0x0803d882
 8033618:	0803d892 	.word	0x0803d892

0803361c <__swhatbuf_r>:
 803361c:	b570      	push	{r4, r5, r6, lr}
 803361e:	460c      	mov	r4, r1
 8033620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033624:	2900      	cmp	r1, #0
 8033626:	b096      	sub	sp, #88	@ 0x58
 8033628:	4615      	mov	r5, r2
 803362a:	461e      	mov	r6, r3
 803362c:	da07      	bge.n	803363e <__swhatbuf_r+0x22>
 803362e:	89a1      	ldrh	r1, [r4, #12]
 8033630:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8033634:	d117      	bne.n	8033666 <__swhatbuf_r+0x4a>
 8033636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803363a:	4608      	mov	r0, r1
 803363c:	e00f      	b.n	803365e <__swhatbuf_r+0x42>
 803363e:	466a      	mov	r2, sp
 8033640:	f002 ffec 	bl	803661c <_fstat_r>
 8033644:	2800      	cmp	r0, #0
 8033646:	dbf2      	blt.n	803362e <__swhatbuf_r+0x12>
 8033648:	9901      	ldr	r1, [sp, #4]
 803364a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803364e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8033652:	4259      	negs	r1, r3
 8033654:	4159      	adcs	r1, r3
 8033656:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803365a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803365e:	6031      	str	r1, [r6, #0]
 8033660:	602b      	str	r3, [r5, #0]
 8033662:	b016      	add	sp, #88	@ 0x58
 8033664:	bd70      	pop	{r4, r5, r6, pc}
 8033666:	2100      	movs	r1, #0
 8033668:	2340      	movs	r3, #64	@ 0x40
 803366a:	e7e6      	b.n	803363a <__swhatbuf_r+0x1e>

0803366c <__smakebuf_r>:
 803366c:	898b      	ldrh	r3, [r1, #12]
 803366e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8033670:	079d      	lsls	r5, r3, #30
 8033672:	4606      	mov	r6, r0
 8033674:	460c      	mov	r4, r1
 8033676:	d507      	bpl.n	8033688 <__smakebuf_r+0x1c>
 8033678:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803367c:	6023      	str	r3, [r4, #0]
 803367e:	6123      	str	r3, [r4, #16]
 8033680:	2301      	movs	r3, #1
 8033682:	6163      	str	r3, [r4, #20]
 8033684:	b003      	add	sp, #12
 8033686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033688:	ab01      	add	r3, sp, #4
 803368a:	466a      	mov	r2, sp
 803368c:	f7ff ffc6 	bl	803361c <__swhatbuf_r>
 8033690:	9f00      	ldr	r7, [sp, #0]
 8033692:	4605      	mov	r5, r0
 8033694:	4639      	mov	r1, r7
 8033696:	4630      	mov	r0, r6
 8033698:	f7fc fec0 	bl	803041c <_malloc_r>
 803369c:	b948      	cbnz	r0, 80336b2 <__smakebuf_r+0x46>
 803369e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80336a2:	059a      	lsls	r2, r3, #22
 80336a4:	d4ee      	bmi.n	8033684 <__smakebuf_r+0x18>
 80336a6:	f023 0303 	bic.w	r3, r3, #3
 80336aa:	f043 0302 	orr.w	r3, r3, #2
 80336ae:	81a3      	strh	r3, [r4, #12]
 80336b0:	e7e2      	b.n	8033678 <__smakebuf_r+0xc>
 80336b2:	89a3      	ldrh	r3, [r4, #12]
 80336b4:	6020      	str	r0, [r4, #0]
 80336b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80336ba:	81a3      	strh	r3, [r4, #12]
 80336bc:	9b01      	ldr	r3, [sp, #4]
 80336be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80336c2:	b15b      	cbz	r3, 80336dc <__smakebuf_r+0x70>
 80336c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80336c8:	4630      	mov	r0, r6
 80336ca:	f002 ffb9 	bl	8036640 <_isatty_r>
 80336ce:	b128      	cbz	r0, 80336dc <__smakebuf_r+0x70>
 80336d0:	89a3      	ldrh	r3, [r4, #12]
 80336d2:	f023 0303 	bic.w	r3, r3, #3
 80336d6:	f043 0301 	orr.w	r3, r3, #1
 80336da:	81a3      	strh	r3, [r4, #12]
 80336dc:	89a3      	ldrh	r3, [r4, #12]
 80336de:	431d      	orrs	r5, r3
 80336e0:	81a5      	strh	r5, [r4, #12]
 80336e2:	e7cf      	b.n	8033684 <__smakebuf_r+0x18>

080336e4 <__ssvfscanf_r>:
 80336e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80336e8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80336ec:	461d      	mov	r5, r3
 80336ee:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80336f2:	af02      	add	r7, sp, #8
 80336f4:	049e      	lsls	r6, r3, #18
 80336f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80336f8:	460c      	mov	r4, r1
 80336fa:	617a      	str	r2, [r7, #20]
 80336fc:	d406      	bmi.n	803370c <__ssvfscanf_r+0x28>
 80336fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8033702:	818b      	strh	r3, [r1, #12]
 8033704:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8033706:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803370a:	664b      	str	r3, [r1, #100]	@ 0x64
 803370c:	2300      	movs	r3, #0
 803370e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8033712:	61bb      	str	r3, [r7, #24]
 8033714:	637b      	str	r3, [r7, #52]	@ 0x34
 8033716:	633b      	str	r3, [r7, #48]	@ 0x30
 8033718:	627b      	str	r3, [r7, #36]	@ 0x24
 803371a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803371e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8033722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8033724:	2b00      	cmp	r3, #0
 8033726:	f000 80d3 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 803372a:	4a84      	ldr	r2, [pc, #528]	@ (803393c <__ssvfscanf_r+0x258>)
 803372c:	5cd6      	ldrb	r6, [r2, r3]
 803372e:	f016 0608 	ands.w	r6, r6, #8
 8033732:	d01b      	beq.n	803376c <__ssvfscanf_r+0x88>
 8033734:	6863      	ldr	r3, [r4, #4]
 8033736:	2b00      	cmp	r3, #0
 8033738:	dd08      	ble.n	803374c <__ssvfscanf_r+0x68>
 803373a:	6823      	ldr	r3, [r4, #0]
 803373c:	497f      	ldr	r1, [pc, #508]	@ (803393c <__ssvfscanf_r+0x258>)
 803373e:	781a      	ldrb	r2, [r3, #0]
 8033740:	5c8a      	ldrb	r2, [r1, r2]
 8033742:	0710      	lsls	r0, r2, #28
 8033744:	d409      	bmi.n	803375a <__ssvfscanf_r+0x76>
 8033746:	f8c7 8014 	str.w	r8, [r7, #20]
 803374a:	e7e6      	b.n	803371a <__ssvfscanf_r+0x36>
 803374c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803374e:	4621      	mov	r1, r4
 8033750:	f7fd fe13 	bl	803137a <__ssrefill_r>
 8033754:	2800      	cmp	r0, #0
 8033756:	d0f0      	beq.n	803373a <__ssvfscanf_r+0x56>
 8033758:	e7f5      	b.n	8033746 <__ssvfscanf_r+0x62>
 803375a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803375c:	3201      	adds	r2, #1
 803375e:	633a      	str	r2, [r7, #48]	@ 0x30
 8033760:	6862      	ldr	r2, [r4, #4]
 8033762:	3301      	adds	r3, #1
 8033764:	3a01      	subs	r2, #1
 8033766:	6062      	str	r2, [r4, #4]
 8033768:	6023      	str	r3, [r4, #0]
 803376a:	e7e3      	b.n	8033734 <__ssvfscanf_r+0x50>
 803376c:	2b25      	cmp	r3, #37	@ 0x25
 803376e:	d163      	bne.n	8033838 <__ssvfscanf_r+0x154>
 8033770:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8033772:	4642      	mov	r2, r8
 8033774:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033778:	617a      	str	r2, [r7, #20]
 803377a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803377e:	2a55      	cmp	r2, #85	@ 0x55
 8033780:	f200 816e 	bhi.w	8033a60 <__ssvfscanf_r+0x37c>
 8033784:	e8df f012 	tbh	[pc, r2, lsl #1]
 8033788:	016c0056 	.word	0x016c0056
 803378c:	016c016c 	.word	0x016c016c
 8033790:	007d016c 	.word	0x007d016c
 8033794:	016c016c 	.word	0x016c016c
 8033798:	016c016c 	.word	0x016c016c
 803379c:	00b9016c 	.word	0x00b9016c
 80337a0:	00b900b9 	.word	0x00b900b9
 80337a4:	00b900b9 	.word	0x00b900b9
 80337a8:	00b900b9 	.word	0x00b900b9
 80337ac:	00b900b9 	.word	0x00b900b9
 80337b0:	016c00b9 	.word	0x016c00b9
 80337b4:	016c016c 	.word	0x016c016c
 80337b8:	016c016c 	.word	0x016c016c
 80337bc:	016c016c 	.word	0x016c016c
 80337c0:	016c00e0 	.word	0x016c00e0
 80337c4:	00c3010a 	.word	0x00c3010a
 80337c8:	00e000e0 	.word	0x00e000e0
 80337cc:	016c00e0 	.word	0x016c00e0
 80337d0:	016c016c 	.word	0x016c016c
 80337d4:	00a2016c 	.word	0x00a2016c
 80337d8:	016c016c 	.word	0x016c016c
 80337dc:	016c00c7 	.word	0x016c00c7
 80337e0:	016c016c 	.word	0x016c016c
 80337e4:	016c00fa 	.word	0x016c00fa
 80337e8:	016c016c 	.word	0x016c016c
 80337ec:	00d4016c 	.word	0x00d4016c
 80337f0:	016c016c 	.word	0x016c016c
 80337f4:	016c00ff 	.word	0x016c00ff
 80337f8:	016c016c 	.word	0x016c016c
 80337fc:	016c016c 	.word	0x016c016c
 8033800:	016c00e0 	.word	0x016c00e0
 8033804:	00c5010c 	.word	0x00c5010c
 8033808:	00e000e0 	.word	0x00e000e0
 803380c:	009400e0 	.word	0x009400e0
 8033810:	00a20130 	.word	0x00a20130
 8033814:	0085016c 	.word	0x0085016c
 8033818:	011400ac 	.word	0x011400ac
 803381c:	011100c9 	.word	0x011100c9
 8033820:	016c016c 	.word	0x016c016c
 8033824:	00a900fc 	.word	0x00a900fc
 8033828:	016c00d0 	.word	0x016c00d0
 803382c:	00d4016c 	.word	0x00d4016c
 8033830:	00a9016c 	.word	0x00a9016c
 8033834:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8033838:	6863      	ldr	r3, [r4, #4]
 803383a:	2b00      	cmp	r3, #0
 803383c:	dd0e      	ble.n	803385c <__ssvfscanf_r+0x178>
 803383e:	6823      	ldr	r3, [r4, #0]
 8033840:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8033844:	7819      	ldrb	r1, [r3, #0]
 8033846:	4291      	cmp	r1, r2
 8033848:	d142      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 803384a:	3301      	adds	r3, #1
 803384c:	6862      	ldr	r2, [r4, #4]
 803384e:	6023      	str	r3, [r4, #0]
 8033850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033852:	3a01      	subs	r2, #1
 8033854:	3301      	adds	r3, #1
 8033856:	6062      	str	r2, [r4, #4]
 8033858:	633b      	str	r3, [r7, #48]	@ 0x30
 803385a:	e774      	b.n	8033746 <__ssvfscanf_r+0x62>
 803385c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803385e:	4621      	mov	r1, r4
 8033860:	f7fd fd8b 	bl	803137a <__ssrefill_r>
 8033864:	2800      	cmp	r0, #0
 8033866:	d0ea      	beq.n	803383e <__ssvfscanf_r+0x15a>
 8033868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803386a:	b113      	cbz	r3, 8033872 <__ssvfscanf_r+0x18e>
 803386c:	89a3      	ldrh	r3, [r4, #12]
 803386e:	065b      	lsls	r3, r3, #25
 8033870:	d52e      	bpl.n	80338d0 <__ssvfscanf_r+0x1ec>
 8033872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033874:	2b00      	cmp	r3, #0
 8033876:	f041 809d 	bne.w	80349b4 <__ssvfscanf_r+0x12d0>
 803387a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033880:	e0f9      	b.n	8033a76 <__ssvfscanf_r+0x392>
 8033882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033884:	4333      	orrs	r3, r6
 8033886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033888:	d122      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 803388a:	2610      	movs	r6, #16
 803388c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8033890:	e76f      	b.n	8033772 <__ssvfscanf_r+0x8e>
 8033892:	0731      	lsls	r1, r6, #28
 8033894:	d11c      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 8033896:	f898 3001 	ldrb.w	r3, [r8, #1]
 803389a:	2b6c      	cmp	r3, #108	@ 0x6c
 803389c:	d105      	bne.n	80338aa <__ssvfscanf_r+0x1c6>
 803389e:	f108 0302 	add.w	r3, r8, #2
 80338a2:	617b      	str	r3, [r7, #20]
 80338a4:	f046 0602 	orr.w	r6, r6, #2
 80338a8:	e7f0      	b.n	803388c <__ssvfscanf_r+0x1a8>
 80338aa:	f046 0601 	orr.w	r6, r6, #1
 80338ae:	e7ed      	b.n	803388c <__ssvfscanf_r+0x1a8>
 80338b0:	0732      	lsls	r2, r6, #28
 80338b2:	d10d      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 80338b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80338b8:	2b68      	cmp	r3, #104	@ 0x68
 80338ba:	bf03      	ittte	eq
 80338bc:	f108 0302 	addeq.w	r3, r8, #2
 80338c0:	617b      	streq	r3, [r7, #20]
 80338c2:	f046 0608 	orreq.w	r6, r6, #8
 80338c6:	f046 0604 	orrne.w	r6, r6, #4
 80338ca:	e7df      	b.n	803388c <__ssvfscanf_r+0x1a8>
 80338cc:	0733      	lsls	r3, r6, #28
 80338ce:	d0e9      	beq.n	80338a4 <__ssvfscanf_r+0x1c0>
 80338d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80338d2:	2b00      	cmp	r3, #0
 80338d4:	f000 80cf 	beq.w	8033a76 <__ssvfscanf_r+0x392>
 80338d8:	e0c8      	b.n	8033a6c <__ssvfscanf_r+0x388>
 80338da:	0730      	lsls	r0, r6, #28
 80338dc:	d0d6      	beq.n	803388c <__ssvfscanf_r+0x1a8>
 80338de:	e7f7      	b.n	80338d0 <__ssvfscanf_r+0x1ec>
 80338e0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80338e4:	d1f4      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 80338e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80338e8:	b922      	cbnz	r2, 80338f4 <__ssvfscanf_r+0x210>
 80338ea:	b082      	sub	sp, #8
 80338ec:	aa02      	add	r2, sp, #8
 80338ee:	e9c2 3300 	strd	r3, r3, [r2]
 80338f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80338f4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80338f8:	e7c8      	b.n	803388c <__ssvfscanf_r+0x1a8>
 80338fa:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80338fe:	d1e7      	bne.n	80338d0 <__ssvfscanf_r+0x1ec>
 8033900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033902:	220a      	movs	r2, #10
 8033904:	fb02 3301 	mla	r3, r2, r1, r3
 8033908:	3b30      	subs	r3, #48	@ 0x30
 803390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803390c:	e7be      	b.n	803388c <__ssvfscanf_r+0x1a8>
 803390e:	f046 0601 	orr.w	r6, r6, #1
 8033912:	4b0b      	ldr	r3, [pc, #44]	@ (8033940 <__ssvfscanf_r+0x25c>)
 8033914:	e009      	b.n	803392a <__ssvfscanf_r+0x246>
 8033916:	f046 0601 	orr.w	r6, r6, #1
 803391a:	4b0a      	ldr	r3, [pc, #40]	@ (8033944 <__ssvfscanf_r+0x260>)
 803391c:	61bb      	str	r3, [r7, #24]
 803391e:	2308      	movs	r3, #8
 8033920:	61fb      	str	r3, [r7, #28]
 8033922:	f04f 0803 	mov.w	r8, #3
 8033926:	e011      	b.n	803394c <__ssvfscanf_r+0x268>
 8033928:	4b06      	ldr	r3, [pc, #24]	@ (8033944 <__ssvfscanf_r+0x260>)
 803392a:	61bb      	str	r3, [r7, #24]
 803392c:	230a      	movs	r3, #10
 803392e:	e7f7      	b.n	8033920 <__ssvfscanf_r+0x23c>
 8033930:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8033934:	4b03      	ldr	r3, [pc, #12]	@ (8033944 <__ssvfscanf_r+0x260>)
 8033936:	61bb      	str	r3, [r7, #24]
 8033938:	2310      	movs	r3, #16
 803393a:	e7f1      	b.n	8033920 <__ssvfscanf_r+0x23c>
 803393c:	0803d6c9 	.word	0x0803d6c9
 8033940:	0802d019 	.word	0x0802d019
 8033944:	08036479 	.word	0x08036479
 8033948:	f04f 0804 	mov.w	r8, #4
 803394c:	6863      	ldr	r3, [r4, #4]
 803394e:	2b00      	cmp	r3, #0
 8033950:	dd4e      	ble.n	80339f0 <__ssvfscanf_r+0x30c>
 8033952:	0673      	lsls	r3, r6, #25
 8033954:	d407      	bmi.n	8033966 <__ssvfscanf_r+0x282>
 8033956:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8033c54 <__ssvfscanf_r+0x570>
 803395a:	6823      	ldr	r3, [r4, #0]
 803395c:	781a      	ldrb	r2, [r3, #0]
 803395e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8033962:	0710      	lsls	r0, r2, #28
 8033964:	d44b      	bmi.n	80339fe <__ssvfscanf_r+0x31a>
 8033966:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803396a:	f1b8 0f03 	cmp.w	r8, #3
 803396e:	d858      	bhi.n	8033a22 <__ssvfscanf_r+0x33e>
 8033970:	e8df f018 	tbh	[pc, r8, lsl #1]
 8033974:	037801c1 	.word	0x037801c1
 8033978:	05f30514 	.word	0x05f30514
 803397c:	f046 0601 	orr.w	r6, r6, #1
 8033980:	f04f 0802 	mov.w	r8, #2
 8033984:	e7e2      	b.n	803394c <__ssvfscanf_r+0x268>
 8033986:	6979      	ldr	r1, [r7, #20]
 8033988:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803398c:	f001 fd1d 	bl	80353ca <__sccl>
 8033990:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8033994:	6178      	str	r0, [r7, #20]
 8033996:	f04f 0801 	mov.w	r8, #1
 803399a:	e7d7      	b.n	803394c <__ssvfscanf_r+0x268>
 803399c:	f046 0601 	orr.w	r6, r6, #1
 80339a0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80339a4:	f04f 0800 	mov.w	r8, #0
 80339a8:	e7d0      	b.n	803394c <__ssvfscanf_r+0x268>
 80339aa:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80339ae:	e7c1      	b.n	8033934 <__ssvfscanf_r+0x250>
 80339b0:	06f1      	lsls	r1, r6, #27
 80339b2:	f53f aeb2 	bmi.w	803371a <__ssvfscanf_r+0x36>
 80339b6:	0732      	lsls	r2, r6, #28
 80339b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80339bc:	d502      	bpl.n	80339c4 <__ssvfscanf_r+0x2e0>
 80339be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80339c0:	701a      	strb	r2, [r3, #0]
 80339c2:	e6aa      	b.n	803371a <__ssvfscanf_r+0x36>
 80339c4:	0770      	lsls	r0, r6, #29
 80339c6:	d502      	bpl.n	80339ce <__ssvfscanf_r+0x2ea>
 80339c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80339ca:	801a      	strh	r2, [r3, #0]
 80339cc:	e6a5      	b.n	803371a <__ssvfscanf_r+0x36>
 80339ce:	07f1      	lsls	r1, r6, #31
 80339d0:	d502      	bpl.n	80339d8 <__ssvfscanf_r+0x2f4>
 80339d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80339d4:	601a      	str	r2, [r3, #0]
 80339d6:	e6a0      	b.n	803371a <__ssvfscanf_r+0x36>
 80339d8:	07b2      	lsls	r2, r6, #30
 80339da:	d5fa      	bpl.n	80339d2 <__ssvfscanf_r+0x2ee>
 80339dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80339de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80339e0:	17d2      	asrs	r2, r2, #31
 80339e2:	e9c3 1200 	strd	r1, r2, [r3]
 80339e6:	e698      	b.n	803371a <__ssvfscanf_r+0x36>
 80339e8:	4b99      	ldr	r3, [pc, #612]	@ (8033c50 <__ssvfscanf_r+0x56c>)
 80339ea:	61bb      	str	r3, [r7, #24]
 80339ec:	2300      	movs	r3, #0
 80339ee:	e797      	b.n	8033920 <__ssvfscanf_r+0x23c>
 80339f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339f2:	4621      	mov	r1, r4
 80339f4:	f7fd fcc1 	bl	803137a <__ssrefill_r>
 80339f8:	2800      	cmp	r0, #0
 80339fa:	d0aa      	beq.n	8033952 <__ssvfscanf_r+0x26e>
 80339fc:	e734      	b.n	8033868 <__ssvfscanf_r+0x184>
 80339fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8033a00:	3201      	adds	r2, #1
 8033a02:	633a      	str	r2, [r7, #48]	@ 0x30
 8033a04:	6862      	ldr	r2, [r4, #4]
 8033a06:	3a01      	subs	r2, #1
 8033a08:	2a00      	cmp	r2, #0
 8033a0a:	6062      	str	r2, [r4, #4]
 8033a0c:	dd02      	ble.n	8033a14 <__ssvfscanf_r+0x330>
 8033a0e:	3301      	adds	r3, #1
 8033a10:	6023      	str	r3, [r4, #0]
 8033a12:	e7a2      	b.n	803395a <__ssvfscanf_r+0x276>
 8033a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a16:	4621      	mov	r1, r4
 8033a18:	f7fd fcaf 	bl	803137a <__ssrefill_r>
 8033a1c:	2800      	cmp	r0, #0
 8033a1e:	d09c      	beq.n	803395a <__ssvfscanf_r+0x276>
 8033a20:	e722      	b.n	8033868 <__ssvfscanf_r+0x184>
 8033a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033a24:	2b01      	cmp	r3, #1
 8033a26:	bf38      	it	cc
 8033a28:	2301      	movcc	r3, #1
 8033a2a:	4698      	mov	r8, r3
 8033a2c:	f016 0301 	ands.w	r3, r6, #1
 8033a30:	f006 0b10 	and.w	fp, r6, #16
 8033a34:	f000 80eb 	beq.w	8033c0e <__ssvfscanf_r+0x52a>
 8033a38:	f1bb 0f00 	cmp.w	fp, #0
 8033a3c:	f040 8085 	bne.w	8033b4a <__ssvfscanf_r+0x466>
 8033a40:	462b      	mov	r3, r5
 8033a42:	0631      	lsls	r1, r6, #24
 8033a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8033a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033a4a:	f140 8085 	bpl.w	8033b58 <__ssvfscanf_r+0x474>
 8033a4e:	b13d      	cbz	r5, 8033a60 <__ssvfscanf_r+0x37c>
 8033a50:	2080      	movs	r0, #128	@ 0x80
 8033a52:	f7fc fcd3 	bl	80303fc <malloc>
 8033a56:	4606      	mov	r6, r0
 8033a58:	b998      	cbnz	r0, 8033a82 <__ssvfscanf_r+0x39e>
 8033a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033a62:	b143      	cbz	r3, 8033a76 <__ssvfscanf_r+0x392>
 8033a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033a66:	3301      	adds	r3, #1
 8033a68:	f000 87a4 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033a6e:	6818      	ldr	r0, [r3, #0]
 8033a70:	b108      	cbz	r0, 8033a76 <__ssvfscanf_r+0x392>
 8033a72:	f7fc fccb 	bl	803040c <free>
 8033a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8033a78:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8033a7c:	46bd      	mov	sp, r7
 8033a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033a84:	6028      	str	r0, [r5, #0]
 8033a86:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8033a8a:	889b      	ldrh	r3, [r3, #4]
 8033a8c:	4599      	cmp	r9, r3
 8033a8e:	d314      	bcc.n	8033aba <__ssvfscanf_r+0x3d6>
 8033a90:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8033a94:	4293      	cmp	r3, r2
 8033a96:	f200 878d 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033a9a:	3308      	adds	r3, #8
 8033a9c:	fa1f fa83 	uxth.w	sl, r3
 8033aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033aa2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8033aa6:	6818      	ldr	r0, [r3, #0]
 8033aa8:	f001 fc32 	bl	8035310 <realloc>
 8033aac:	2800      	cmp	r0, #0
 8033aae:	f000 8781 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033ab4:	6018      	str	r0, [r3, #0]
 8033ab6:	f8a3 a004 	strh.w	sl, [r3, #4]
 8033aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033abc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8033abe:	681b      	ldr	r3, [r3, #0]
 8033ac0:	f109 0201 	add.w	r2, r9, #1
 8033ac4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8033ac8:	46aa      	mov	sl, r5
 8033aca:	80ca      	strh	r2, [r1, #6]
 8033acc:	4635      	mov	r5, r6
 8033ace:	f04f 0920 	mov.w	r9, #32
 8033ad2:	2200      	movs	r2, #0
 8033ad4:	613a      	str	r2, [r7, #16]
 8033ad6:	f7fb fbcd 	bl	802f274 <__locale_mb_cur_max>
 8033ada:	693a      	ldr	r2, [r7, #16]
 8033adc:	4290      	cmp	r0, r2
 8033ade:	f43f aec3 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033ae2:	6821      	ldr	r1, [r4, #0]
 8033ae4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8033ae8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8033aec:	f80c 0002 	strb.w	r0, [ip, r2]
 8033af0:	1c53      	adds	r3, r2, #1
 8033af2:	6862      	ldr	r2, [r4, #4]
 8033af4:	3a01      	subs	r2, #1
 8033af6:	e9c4 1200 	strd	r1, r2, [r4]
 8033afa:	6a3a      	ldr	r2, [r7, #32]
 8033afc:	2a03      	cmp	r2, #3
 8033afe:	d102      	bne.n	8033b06 <__ssvfscanf_r+0x422>
 8033b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8033b02:	2a04      	cmp	r2, #4
 8033b04:	d007      	beq.n	8033b16 <__ssvfscanf_r+0x432>
 8033b06:	2208      	movs	r2, #8
 8033b08:	2100      	movs	r1, #0
 8033b0a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8033b0e:	623b      	str	r3, [r7, #32]
 8033b10:	f7f9 fefe 	bl	802d910 <memset>
 8033b14:	6a3b      	ldr	r3, [r7, #32]
 8033b16:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8033b1a:	9200      	str	r2, [sp, #0]
 8033b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033b1e:	613b      	str	r3, [r7, #16]
 8033b20:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8033b24:	4629      	mov	r1, r5
 8033b26:	f002 ff07 	bl	8036938 <_mbrtowc_r>
 8033b2a:	1c42      	adds	r2, r0, #1
 8033b2c:	6238      	str	r0, [r7, #32]
 8033b2e:	f43f ae9b 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033b32:	693b      	ldr	r3, [r7, #16]
 8033b34:	b9b8      	cbnz	r0, 8033b66 <__ssvfscanf_r+0x482>
 8033b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8033b38:	441a      	add	r2, r3
 8033b3a:	4613      	mov	r3, r2
 8033b3c:	f1bb 0f00 	cmp.w	fp, #0
 8033b40:	d00e      	beq.n	8033b60 <__ssvfscanf_r+0x47c>
 8033b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8033b44:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8033b48:	e019      	b.n	8033b7e <__ssvfscanf_r+0x49a>
 8033b4a:	f04f 0900 	mov.w	r9, #0
 8033b4e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8033b50:	464e      	mov	r6, r9
 8033b52:	46ca      	mov	sl, r9
 8033b54:	464d      	mov	r5, r9
 8033b56:	e7bc      	b.n	8033ad2 <__ssvfscanf_r+0x3ee>
 8033b58:	46d9      	mov	r9, fp
 8033b5a:	465e      	mov	r6, fp
 8033b5c:	46da      	mov	sl, fp
 8033b5e:	e7b8      	b.n	8033ad2 <__ssvfscanf_r+0x3ee>
 8033b60:	f8c5 b000 	str.w	fp, [r5]
 8033b64:	e7ed      	b.n	8033b42 <__ssvfscanf_r+0x45e>
 8033b66:	6a3a      	ldr	r2, [r7, #32]
 8033b68:	3202      	adds	r2, #2
 8033b6a:	d025      	beq.n	8033bb8 <__ssvfscanf_r+0x4d4>
 8033b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8033b6e:	441a      	add	r2, r3
 8033b70:	6a3b      	ldr	r3, [r7, #32]
 8033b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8033b74:	2b03      	cmp	r3, #3
 8033b76:	d1e5      	bne.n	8033b44 <__ssvfscanf_r+0x460>
 8033b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8033b7a:	2b04      	cmp	r3, #4
 8033b7c:	d1e2      	bne.n	8033b44 <__ssvfscanf_r+0x460>
 8033b7e:	f1bb 0f00 	cmp.w	fp, #0
 8033b82:	d117      	bne.n	8033bb4 <__ssvfscanf_r+0x4d0>
 8033b84:	f1ba 0f00 	cmp.w	sl, #0
 8033b88:	d013      	beq.n	8033bb2 <__ssvfscanf_r+0x4ce>
 8033b8a:	1bab      	subs	r3, r5, r6
 8033b8c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8033b90:	d80f      	bhi.n	8033bb2 <__ssvfscanf_r+0x4ce>
 8033b92:	4630      	mov	r0, r6
 8033b94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8033b98:	613b      	str	r3, [r7, #16]
 8033b9a:	f001 fbb9 	bl	8035310 <realloc>
 8033b9e:	4606      	mov	r6, r0
 8033ba0:	2800      	cmp	r0, #0
 8033ba2:	f43f af5a 	beq.w	8033a5a <__ssvfscanf_r+0x376>
 8033ba6:	693b      	ldr	r3, [r7, #16]
 8033ba8:	f8ca 0000 	str.w	r0, [sl]
 8033bac:	18c5      	adds	r5, r0, r3
 8033bae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8033bb2:	3504      	adds	r5, #4
 8033bb4:	2200      	movs	r2, #0
 8033bb6:	e000      	b.n	8033bba <__ssvfscanf_r+0x4d6>
 8033bb8:	461a      	mov	r2, r3
 8033bba:	6863      	ldr	r3, [r4, #4]
 8033bbc:	2b00      	cmp	r3, #0
 8033bbe:	dc14      	bgt.n	8033bea <__ssvfscanf_r+0x506>
 8033bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033bc2:	613a      	str	r2, [r7, #16]
 8033bc4:	4621      	mov	r1, r4
 8033bc6:	f7fd fbd8 	bl	803137a <__ssrefill_r>
 8033bca:	693a      	ldr	r2, [r7, #16]
 8033bcc:	b168      	cbz	r0, 8033bea <__ssvfscanf_r+0x506>
 8033bce:	2a00      	cmp	r2, #0
 8033bd0:	f47f ae4a 	bne.w	8033868 <__ssvfscanf_r+0x184>
 8033bd4:	f1ba 0f00 	cmp.w	sl, #0
 8033bd8:	d10c      	bne.n	8033bf4 <__ssvfscanf_r+0x510>
 8033bda:	f1bb 0f00 	cmp.w	fp, #0
 8033bde:	d102      	bne.n	8033be6 <__ssvfscanf_r+0x502>
 8033be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033be2:	3301      	adds	r3, #1
 8033be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8033be6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8033be8:	e597      	b.n	803371a <__ssvfscanf_r+0x36>
 8033bea:	f1b8 0f00 	cmp.w	r8, #0
 8033bee:	f47f af71 	bne.w	8033ad4 <__ssvfscanf_r+0x3f0>
 8033bf2:	e7ef      	b.n	8033bd4 <__ssvfscanf_r+0x4f0>
 8033bf4:	1ba9      	subs	r1, r5, r6
 8033bf6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8033bfa:	d9ee      	bls.n	8033bda <__ssvfscanf_r+0x4f6>
 8033bfc:	f8da 0000 	ldr.w	r0, [sl]
 8033c00:	f001 fb86 	bl	8035310 <realloc>
 8033c04:	2800      	cmp	r0, #0
 8033c06:	d0e8      	beq.n	8033bda <__ssvfscanf_r+0x4f6>
 8033c08:	f8ca 0000 	str.w	r0, [sl]
 8033c0c:	e7e5      	b.n	8033bda <__ssvfscanf_r+0x4f6>
 8033c0e:	f1bb 0f00 	cmp.w	fp, #0
 8033c12:	d021      	beq.n	8033c58 <__ssvfscanf_r+0x574>
 8033c14:	461e      	mov	r6, r3
 8033c16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8033c1a:	4598      	cmp	r8, r3
 8033c1c:	dd11      	ble.n	8033c42 <__ssvfscanf_r+0x55e>
 8033c1e:	441a      	add	r2, r3
 8033c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033c22:	6022      	str	r2, [r4, #0]
 8033c24:	4621      	mov	r1, r4
 8033c26:	441e      	add	r6, r3
 8033c28:	eba8 0803 	sub.w	r8, r8, r3
 8033c2c:	f7fd fba5 	bl	803137a <__ssrefill_r>
 8033c30:	2800      	cmp	r0, #0
 8033c32:	d0f0      	beq.n	8033c16 <__ssvfscanf_r+0x532>
 8033c34:	2e00      	cmp	r6, #0
 8033c36:	f43f ae17 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033c3c:	4433      	add	r3, r6
 8033c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8033c40:	e56b      	b.n	803371a <__ssvfscanf_r+0x36>
 8033c42:	eba3 0308 	sub.w	r3, r3, r8
 8033c46:	4442      	add	r2, r8
 8033c48:	4446      	add	r6, r8
 8033c4a:	6063      	str	r3, [r4, #4]
 8033c4c:	6022      	str	r2, [r4, #0]
 8033c4e:	e7f4      	b.n	8033c3a <__ssvfscanf_r+0x556>
 8033c50:	0802d019 	.word	0x0802d019
 8033c54:	0803d6c9 	.word	0x0803d6c9
 8033c58:	46a9      	mov	r9, r5
 8033c5a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8033c5e:	f859 5b04 	ldr.w	r5, [r9], #4
 8033c62:	d02c      	beq.n	8033cbe <__ssvfscanf_r+0x5da>
 8033c64:	2d00      	cmp	r5, #0
 8033c66:	f43f ae33 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 8033c6a:	4640      	mov	r0, r8
 8033c6c:	f7fc fbc6 	bl	80303fc <malloc>
 8033c70:	4682      	mov	sl, r0
 8033c72:	2800      	cmp	r0, #0
 8033c74:	f43f adfd 	beq.w	8033872 <__ssvfscanf_r+0x18e>
 8033c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033c7a:	6028      	str	r0, [r5, #0]
 8033c7c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8033c80:	889e      	ldrh	r6, [r3, #4]
 8033c82:	45b3      	cmp	fp, r6
 8033c84:	d311      	bcc.n	8033caa <__ssvfscanf_r+0x5c6>
 8033c86:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8033c8a:	429e      	cmp	r6, r3
 8033c8c:	f200 8692 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033c92:	3608      	adds	r6, #8
 8033c94:	b2b6      	uxth	r6, r6
 8033c96:	6818      	ldr	r0, [r3, #0]
 8033c98:	00b1      	lsls	r1, r6, #2
 8033c9a:	f001 fb39 	bl	8035310 <realloc>
 8033c9e:	2800      	cmp	r0, #0
 8033ca0:	f000 8688 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033ca6:	6018      	str	r0, [r3, #0]
 8033ca8:	809e      	strh	r6, [r3, #4]
 8033caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033cac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8033cae:	681b      	ldr	r3, [r3, #0]
 8033cb0:	f10b 0201 	add.w	r2, fp, #1
 8033cb4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8033cb8:	462e      	mov	r6, r5
 8033cba:	80ca      	strh	r2, [r1, #6]
 8033cbc:	4655      	mov	r5, sl
 8033cbe:	9400      	str	r4, [sp, #0]
 8033cc0:	4629      	mov	r1, r5
 8033cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033cc4:	4643      	mov	r3, r8
 8033cc6:	2201      	movs	r2, #1
 8033cc8:	f7fd fb74 	bl	80313b4 <_sfread_r>
 8033ccc:	4605      	mov	r5, r0
 8033cce:	2800      	cmp	r0, #0
 8033cd0:	f43f adca 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033cd4:	b13e      	cbz	r6, 8033ce6 <__ssvfscanf_r+0x602>
 8033cd6:	4580      	cmp	r8, r0
 8033cd8:	d905      	bls.n	8033ce6 <__ssvfscanf_r+0x602>
 8033cda:	4601      	mov	r1, r0
 8033cdc:	6830      	ldr	r0, [r6, #0]
 8033cde:	f001 fb17 	bl	8035310 <realloc>
 8033ce2:	b100      	cbz	r0, 8033ce6 <__ssvfscanf_r+0x602>
 8033ce4:	6030      	str	r0, [r6, #0]
 8033ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033ce8:	442b      	add	r3, r5
 8033cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8033cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033cee:	3301      	adds	r3, #1
 8033cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8033cf2:	464d      	mov	r5, r9
 8033cf4:	e511      	b.n	803371a <__ssvfscanf_r+0x36>
 8033cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033cf8:	2b00      	cmp	r3, #0
 8033cfa:	bf08      	it	eq
 8033cfc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8033d00:	f016 0801 	ands.w	r8, r6, #1
 8033d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033d06:	f006 0a10 	and.w	sl, r6, #16
 8033d0a:	f000 8101 	beq.w	8033f10 <__ssvfscanf_r+0x82c>
 8033d0e:	f1ba 0f00 	cmp.w	sl, #0
 8033d12:	f040 80a4 	bne.w	8033e5e <__ssvfscanf_r+0x77a>
 8033d16:	462b      	mov	r3, r5
 8033d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8033d1c:	60fb      	str	r3, [r7, #12]
 8033d1e:	0633      	lsls	r3, r6, #24
 8033d20:	f140 80a5 	bpl.w	8033e6e <__ssvfscanf_r+0x78a>
 8033d24:	2d00      	cmp	r5, #0
 8033d26:	f43f ae9b 	beq.w	8033a60 <__ssvfscanf_r+0x37c>
 8033d2a:	2080      	movs	r0, #128	@ 0x80
 8033d2c:	f7fc fb66 	bl	80303fc <malloc>
 8033d30:	4680      	mov	r8, r0
 8033d32:	2800      	cmp	r0, #0
 8033d34:	f43f ae91 	beq.w	8033a5a <__ssvfscanf_r+0x376>
 8033d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033d3a:	6028      	str	r0, [r5, #0]
 8033d3c:	88de      	ldrh	r6, [r3, #6]
 8033d3e:	889b      	ldrh	r3, [r3, #4]
 8033d40:	429e      	cmp	r6, r3
 8033d42:	d314      	bcc.n	8033d6e <__ssvfscanf_r+0x68a>
 8033d44:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8033d48:	4293      	cmp	r3, r2
 8033d4a:	f200 8633 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033d4e:	3308      	adds	r3, #8
 8033d50:	fa1f f983 	uxth.w	r9, r3
 8033d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033d56:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8033d5a:	6818      	ldr	r0, [r3, #0]
 8033d5c:	f001 fad8 	bl	8035310 <realloc>
 8033d60:	2800      	cmp	r0, #0
 8033d62:	f000 8627 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033d68:	6018      	str	r0, [r3, #0]
 8033d6a:	f8a3 9004 	strh.w	r9, [r3, #4]
 8033d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033d70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8033d72:	681b      	ldr	r3, [r3, #0]
 8033d74:	1c72      	adds	r2, r6, #1
 8033d76:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8033d7a:	46ab      	mov	fp, r5
 8033d7c:	80ca      	strh	r2, [r1, #6]
 8033d7e:	4645      	mov	r5, r8
 8033d80:	f04f 0920 	mov.w	r9, #32
 8033d84:	2600      	movs	r6, #0
 8033d86:	f7fb fa75 	bl	802f274 <__locale_mb_cur_max>
 8033d8a:	42b0      	cmp	r0, r6
 8033d8c:	f43f ad6c 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033d90:	1c73      	adds	r3, r6, #1
 8033d92:	613b      	str	r3, [r7, #16]
 8033d94:	6823      	ldr	r3, [r4, #0]
 8033d96:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8033d9e:	558a      	strb	r2, [r1, r6]
 8033da0:	6862      	ldr	r2, [r4, #4]
 8033da2:	3a01      	subs	r2, #1
 8033da4:	e9c4 3200 	strd	r3, r2, [r4]
 8033da8:	6a3b      	ldr	r3, [r7, #32]
 8033daa:	2b03      	cmp	r3, #3
 8033dac:	d102      	bne.n	8033db4 <__ssvfscanf_r+0x6d0>
 8033dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8033db0:	2b04      	cmp	r3, #4
 8033db2:	d005      	beq.n	8033dc0 <__ssvfscanf_r+0x6dc>
 8033db4:	2208      	movs	r2, #8
 8033db6:	2100      	movs	r1, #0
 8033db8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8033dbc:	f7f9 fda8 	bl	802d910 <memset>
 8033dc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8033dc4:	9300      	str	r3, [sp, #0]
 8033dc6:	693b      	ldr	r3, [r7, #16]
 8033dc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033dca:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8033dce:	4629      	mov	r1, r5
 8033dd0:	f002 fdb2 	bl	8036938 <_mbrtowc_r>
 8033dd4:	1c46      	adds	r6, r0, #1
 8033dd6:	6238      	str	r0, [r7, #32]
 8033dd8:	f43f ad46 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8033ddc:	2800      	cmp	r0, #0
 8033dde:	d14a      	bne.n	8033e76 <__ssvfscanf_r+0x792>
 8033de0:	6028      	str	r0, [r5, #0]
 8033de2:	682e      	ldr	r6, [r5, #0]
 8033de4:	1c70      	adds	r0, r6, #1
 8033de6:	d056      	beq.n	8033e96 <__ssvfscanf_r+0x7b2>
 8033de8:	2208      	movs	r2, #8
 8033dea:	2100      	movs	r1, #0
 8033dec:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8033df0:	f7f9 fd8e 	bl	802d910 <memset>
 8033df4:	4b9a      	ldr	r3, [pc, #616]	@ (8034060 <__ssvfscanf_r+0x97c>)
 8033df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8033dfc:	60bb      	str	r3, [r7, #8]
 8033dfe:	4632      	mov	r2, r6
 8033e00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8033e04:	68be      	ldr	r6, [r7, #8]
 8033e06:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8033e0a:	47b0      	blx	r6
 8033e0c:	2801      	cmp	r0, #1
 8033e0e:	d144      	bne.n	8033e9a <__ssvfscanf_r+0x7b6>
 8033e10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8033e14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8033e18:	5c9b      	ldrb	r3, [r3, r2]
 8033e1a:	2b00      	cmp	r3, #0
 8033e1c:	d148      	bne.n	8033eb0 <__ssvfscanf_r+0x7cc>
 8033e1e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8033e22:	693b      	ldr	r3, [r7, #16]
 8033e24:	2b00      	cmp	r3, #0
 8033e26:	d13a      	bne.n	8033e9e <__ssvfscanf_r+0x7ba>
 8033e28:	f1ba 0f00 	cmp.w	sl, #0
 8033e2c:	d115      	bne.n	8033e5a <__ssvfscanf_r+0x776>
 8033e2e:	f8c5 a000 	str.w	sl, [r5]
 8033e32:	f1bb 0f00 	cmp.w	fp, #0
 8033e36:	d00d      	beq.n	8033e54 <__ssvfscanf_r+0x770>
 8033e38:	eba5 0108 	sub.w	r1, r5, r8
 8033e3c:	108b      	asrs	r3, r1, #2
 8033e3e:	3301      	adds	r3, #1
 8033e40:	4599      	cmp	r9, r3
 8033e42:	d907      	bls.n	8033e54 <__ssvfscanf_r+0x770>
 8033e44:	f8db 0000 	ldr.w	r0, [fp]
 8033e48:	3104      	adds	r1, #4
 8033e4a:	f001 fa61 	bl	8035310 <realloc>
 8033e4e:	b108      	cbz	r0, 8033e54 <__ssvfscanf_r+0x770>
 8033e50:	f8cb 0000 	str.w	r0, [fp]
 8033e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033e56:	3301      	adds	r3, #1
 8033e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8033e5a:	68fd      	ldr	r5, [r7, #12]
 8033e5c:	e45d      	b.n	803371a <__ssvfscanf_r+0x36>
 8033e5e:	f04f 0900 	mov.w	r9, #0
 8033e62:	60fd      	str	r5, [r7, #12]
 8033e64:	46c8      	mov	r8, r9
 8033e66:	46cb      	mov	fp, r9
 8033e68:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8033e6c:	e78a      	b.n	8033d84 <__ssvfscanf_r+0x6a0>
 8033e6e:	46d1      	mov	r9, sl
 8033e70:	46d0      	mov	r8, sl
 8033e72:	46d3      	mov	fp, sl
 8033e74:	e786      	b.n	8033d84 <__ssvfscanf_r+0x6a0>
 8033e76:	6a3b      	ldr	r3, [r7, #32]
 8033e78:	3302      	adds	r3, #2
 8033e7a:	d1b2      	bne.n	8033de2 <__ssvfscanf_r+0x6fe>
 8033e7c:	693e      	ldr	r6, [r7, #16]
 8033e7e:	6863      	ldr	r3, [r4, #4]
 8033e80:	2b00      	cmp	r3, #0
 8033e82:	dc40      	bgt.n	8033f06 <__ssvfscanf_r+0x822>
 8033e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033e86:	4621      	mov	r1, r4
 8033e88:	f7fd fa77 	bl	803137a <__ssrefill_r>
 8033e8c:	2800      	cmp	r0, #0
 8033e8e:	d03a      	beq.n	8033f06 <__ssvfscanf_r+0x822>
 8033e90:	2e00      	cmp	r6, #0
 8033e92:	d0c9      	beq.n	8033e28 <__ssvfscanf_r+0x744>
 8033e94:	e4e8      	b.n	8033868 <__ssvfscanf_r+0x184>
 8033e96:	4632      	mov	r2, r6
 8033e98:	e7bc      	b.n	8033e14 <__ssvfscanf_r+0x730>
 8033e9a:	2200      	movs	r2, #0
 8033e9c:	e7ba      	b.n	8033e14 <__ssvfscanf_r+0x730>
 8033e9e:	693b      	ldr	r3, [r7, #16]
 8033ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033ea2:	3b01      	subs	r3, #1
 8033ea4:	4622      	mov	r2, r4
 8033ea6:	5cf1      	ldrb	r1, [r6, r3]
 8033ea8:	613b      	str	r3, [r7, #16]
 8033eaa:	f7fd fa2b 	bl	8031304 <_sungetc_r>
 8033eae:	e7b8      	b.n	8033e22 <__ssvfscanf_r+0x73e>
 8033eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033eb2:	693a      	ldr	r2, [r7, #16]
 8033eb4:	4413      	add	r3, r2
 8033eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8033eb8:	6a3b      	ldr	r3, [r7, #32]
 8033eba:	2b03      	cmp	r3, #3
 8033ebc:	d102      	bne.n	8033ec4 <__ssvfscanf_r+0x7e0>
 8033ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8033ec0:	2b04      	cmp	r3, #4
 8033ec2:	d002      	beq.n	8033eca <__ssvfscanf_r+0x7e6>
 8033ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033ec6:	3b01      	subs	r3, #1
 8033ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033eca:	f1ba 0f00 	cmp.w	sl, #0
 8033ece:	d118      	bne.n	8033f02 <__ssvfscanf_r+0x81e>
 8033ed0:	3504      	adds	r5, #4
 8033ed2:	f1bb 0f00 	cmp.w	fp, #0
 8033ed6:	d014      	beq.n	8033f02 <__ssvfscanf_r+0x81e>
 8033ed8:	eba5 0608 	sub.w	r6, r5, r8
 8033edc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8033ee0:	d80d      	bhi.n	8033efe <__ssvfscanf_r+0x81a>
 8033ee2:	4640      	mov	r0, r8
 8033ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8033ee8:	f001 fa12 	bl	8035310 <realloc>
 8033eec:	4680      	mov	r8, r0
 8033eee:	2800      	cmp	r0, #0
 8033ef0:	f43f adb3 	beq.w	8033a5a <__ssvfscanf_r+0x376>
 8033ef4:	1985      	adds	r5, r0, r6
 8033ef6:	f8cb 0000 	str.w	r0, [fp]
 8033efa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8033efe:	4656      	mov	r6, sl
 8033f00:	e7bd      	b.n	8033e7e <__ssvfscanf_r+0x79a>
 8033f02:	2600      	movs	r6, #0
 8033f04:	e7bb      	b.n	8033e7e <__ssvfscanf_r+0x79a>
 8033f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033f08:	2b00      	cmp	r3, #0
 8033f0a:	f47f af3c 	bne.w	8033d86 <__ssvfscanf_r+0x6a2>
 8033f0e:	e78b      	b.n	8033e28 <__ssvfscanf_r+0x744>
 8033f10:	f1ba 0f00 	cmp.w	sl, #0
 8033f14:	d01e      	beq.n	8033f54 <__ssvfscanf_r+0x870>
 8033f16:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8033f1a:	6823      	ldr	r3, [r4, #0]
 8033f1c:	781a      	ldrb	r2, [r3, #0]
 8033f1e:	5cb2      	ldrb	r2, [r6, r2]
 8033f20:	b91a      	cbnz	r2, 8033f2a <__ssvfscanf_r+0x846>
 8033f22:	f1b8 0f00 	cmp.w	r8, #0
 8033f26:	d112      	bne.n	8033f4e <__ssvfscanf_r+0x86a>
 8033f28:	e4d2      	b.n	80338d0 <__ssvfscanf_r+0x1ec>
 8033f2a:	3301      	adds	r3, #1
 8033f2c:	6862      	ldr	r2, [r4, #4]
 8033f2e:	6023      	str	r3, [r4, #0]
 8033f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033f32:	f108 0801 	add.w	r8, r8, #1
 8033f36:	3a01      	subs	r2, #1
 8033f38:	4543      	cmp	r3, r8
 8033f3a:	6062      	str	r2, [r4, #4]
 8033f3c:	d007      	beq.n	8033f4e <__ssvfscanf_r+0x86a>
 8033f3e:	2a00      	cmp	r2, #0
 8033f40:	dceb      	bgt.n	8033f1a <__ssvfscanf_r+0x836>
 8033f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033f44:	4621      	mov	r1, r4
 8033f46:	f7fd fa18 	bl	803137a <__ssrefill_r>
 8033f4a:	2800      	cmp	r0, #0
 8033f4c:	d0e5      	beq.n	8033f1a <__ssvfscanf_r+0x836>
 8033f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033f50:	4443      	add	r3, r8
 8033f52:	e674      	b.n	8033c3e <__ssvfscanf_r+0x55a>
 8033f54:	46a9      	mov	r9, r5
 8033f56:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8033f5a:	f859 8b04 	ldr.w	r8, [r9], #4
 8033f5e:	d07d      	beq.n	803405c <__ssvfscanf_r+0x978>
 8033f60:	f1b8 0f00 	cmp.w	r8, #0
 8033f64:	f43f acb4 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 8033f68:	2020      	movs	r0, #32
 8033f6a:	f7fc fa47 	bl	80303fc <malloc>
 8033f6e:	4606      	mov	r6, r0
 8033f70:	2800      	cmp	r0, #0
 8033f72:	f43f ac7e 	beq.w	8033872 <__ssvfscanf_r+0x18e>
 8033f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033f78:	f8c8 0000 	str.w	r0, [r8]
 8033f7c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8033f80:	889d      	ldrh	r5, [r3, #4]
 8033f82:	45aa      	cmp	sl, r5
 8033f84:	d311      	bcc.n	8033faa <__ssvfscanf_r+0x8c6>
 8033f86:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8033f8a:	429d      	cmp	r5, r3
 8033f8c:	f200 8512 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033f92:	3508      	adds	r5, #8
 8033f94:	b2ad      	uxth	r5, r5
 8033f96:	6818      	ldr	r0, [r3, #0]
 8033f98:	00a9      	lsls	r1, r5, #2
 8033f9a:	f001 f9b9 	bl	8035310 <realloc>
 8033f9e:	2800      	cmp	r0, #0
 8033fa0:	f000 8508 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 8033fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033fa6:	6018      	str	r0, [r3, #0]
 8033fa8:	809d      	strh	r5, [r3, #4]
 8033faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033fac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8033fae:	681b      	ldr	r3, [r3, #0]
 8033fb0:	f10a 0201 	add.w	r2, sl, #1
 8033fb4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8033fb8:	80ca      	strh	r2, [r1, #6]
 8033fba:	46c2      	mov	sl, r8
 8033fbc:	46b0      	mov	r8, r6
 8033fbe:	2620      	movs	r6, #32
 8033fc0:	4645      	mov	r5, r8
 8033fc2:	6823      	ldr	r3, [r4, #0]
 8033fc4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8033fc8:	781a      	ldrb	r2, [r3, #0]
 8033fca:	5c8a      	ldrb	r2, [r1, r2]
 8033fcc:	b35a      	cbz	r2, 8034026 <__ssvfscanf_r+0x942>
 8033fce:	6862      	ldr	r2, [r4, #4]
 8033fd0:	3a01      	subs	r2, #1
 8033fd2:	6062      	str	r2, [r4, #4]
 8033fd4:	1c5a      	adds	r2, r3, #1
 8033fd6:	6022      	str	r2, [r4, #0]
 8033fd8:	781b      	ldrb	r3, [r3, #0]
 8033fda:	f808 3b01 	strb.w	r3, [r8], #1
 8033fde:	f1ba 0f00 	cmp.w	sl, #0
 8033fe2:	d010      	beq.n	8034006 <__ssvfscanf_r+0x922>
 8033fe4:	eba8 0b05 	sub.w	fp, r8, r5
 8033fe8:	45b3      	cmp	fp, r6
 8033fea:	d30c      	bcc.n	8034006 <__ssvfscanf_r+0x922>
 8033fec:	0076      	lsls	r6, r6, #1
 8033fee:	4628      	mov	r0, r5
 8033ff0:	4631      	mov	r1, r6
 8033ff2:	f001 f98d 	bl	8035310 <realloc>
 8033ff6:	4605      	mov	r5, r0
 8033ff8:	2800      	cmp	r0, #0
 8033ffa:	f43f ac3a 	beq.w	8033872 <__ssvfscanf_r+0x18e>
 8033ffe:	eb00 080b 	add.w	r8, r0, fp
 8034002:	f8ca 0000 	str.w	r0, [sl]
 8034006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034008:	3b01      	subs	r3, #1
 803400a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803400c:	d00b      	beq.n	8034026 <__ssvfscanf_r+0x942>
 803400e:	6863      	ldr	r3, [r4, #4]
 8034010:	2b00      	cmp	r3, #0
 8034012:	dcd6      	bgt.n	8033fc2 <__ssvfscanf_r+0x8de>
 8034014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034016:	4621      	mov	r1, r4
 8034018:	f7fd f9af 	bl	803137a <__ssrefill_r>
 803401c:	2800      	cmp	r0, #0
 803401e:	d0d0      	beq.n	8033fc2 <__ssvfscanf_r+0x8de>
 8034020:	45a8      	cmp	r8, r5
 8034022:	f43f ac21 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8034026:	ebb8 0505 	subs.w	r5, r8, r5
 803402a:	f43f ac51 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 803402e:	2300      	movs	r3, #0
 8034030:	f888 3000 	strb.w	r3, [r8]
 8034034:	f1ba 0f00 	cmp.w	sl, #0
 8034038:	d009      	beq.n	803404e <__ssvfscanf_r+0x96a>
 803403a:	1c69      	adds	r1, r5, #1
 803403c:	428e      	cmp	r6, r1
 803403e:	d906      	bls.n	803404e <__ssvfscanf_r+0x96a>
 8034040:	f8da 0000 	ldr.w	r0, [sl]
 8034044:	f001 f964 	bl	8035310 <realloc>
 8034048:	b108      	cbz	r0, 803404e <__ssvfscanf_r+0x96a>
 803404a:	f8ca 0000 	str.w	r0, [sl]
 803404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034050:	3301      	adds	r3, #1
 8034052:	627b      	str	r3, [r7, #36]	@ 0x24
 8034054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8034056:	442b      	add	r3, r5
 8034058:	633b      	str	r3, [r7, #48]	@ 0x30
 803405a:	e64a      	b.n	8033cf2 <__ssvfscanf_r+0x60e>
 803405c:	46b2      	mov	sl, r6
 803405e:	e7af      	b.n	8033fc0 <__ssvfscanf_r+0x8dc>
 8034060:	2000016c 	.word	0x2000016c
 8034064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034066:	2b00      	cmp	r3, #0
 8034068:	bf08      	it	eq
 803406a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803406e:	f016 0901 	ands.w	r9, r6, #1
 8034072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8034074:	f006 0810 	and.w	r8, r6, #16
 8034078:	f000 80ef 	beq.w	803425a <__ssvfscanf_r+0xb76>
 803407c:	f1b8 0f00 	cmp.w	r8, #0
 8034080:	f040 8098 	bne.w	80341b4 <__ssvfscanf_r+0xad0>
 8034084:	462b      	mov	r3, r5
 8034086:	0631      	lsls	r1, r6, #24
 8034088:	f853 5b04 	ldr.w	r5, [r3], #4
 803408c:	613b      	str	r3, [r7, #16]
 803408e:	f140 8099 	bpl.w	80341c4 <__ssvfscanf_r+0xae0>
 8034092:	2d00      	cmp	r5, #0
 8034094:	f43f ace4 	beq.w	8033a60 <__ssvfscanf_r+0x37c>
 8034098:	2080      	movs	r0, #128	@ 0x80
 803409a:	f7fc f9af 	bl	80303fc <malloc>
 803409e:	4606      	mov	r6, r0
 80340a0:	2800      	cmp	r0, #0
 80340a2:	f43f acda 	beq.w	8033a5a <__ssvfscanf_r+0x376>
 80340a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80340a8:	6028      	str	r0, [r5, #0]
 80340aa:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80340ae:	889b      	ldrh	r3, [r3, #4]
 80340b0:	4599      	cmp	r9, r3
 80340b2:	d314      	bcc.n	80340de <__ssvfscanf_r+0x9fa>
 80340b4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80340b8:	4293      	cmp	r3, r2
 80340ba:	f200 847b 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 80340be:	3308      	adds	r3, #8
 80340c0:	fa1f fa83 	uxth.w	sl, r3
 80340c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80340c6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80340ca:	6818      	ldr	r0, [r3, #0]
 80340cc:	f001 f920 	bl	8035310 <realloc>
 80340d0:	2800      	cmp	r0, #0
 80340d2:	f000 846f 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 80340d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80340d8:	6018      	str	r0, [r3, #0]
 80340da:	f8a3 a004 	strh.w	sl, [r3, #4]
 80340de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80340e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80340e2:	681b      	ldr	r3, [r3, #0]
 80340e4:	f109 0201 	add.w	r2, r9, #1
 80340e8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80340ec:	46aa      	mov	sl, r5
 80340ee:	80ca      	strh	r2, [r1, #6]
 80340f0:	4635      	mov	r5, r6
 80340f2:	f04f 0920 	mov.w	r9, #32
 80340f6:	2300      	movs	r3, #0
 80340f8:	6822      	ldr	r2, [r4, #0]
 80340fa:	49a7      	ldr	r1, [pc, #668]	@ (8034398 <__ssvfscanf_r+0xcb4>)
 80340fc:	7812      	ldrb	r2, [r2, #0]
 80340fe:	5c8a      	ldrb	r2, [r1, r2]
 8034100:	0710      	lsls	r0, r2, #28
 8034102:	d43c      	bmi.n	803417e <__ssvfscanf_r+0xa9a>
 8034104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8034106:	2a00      	cmp	r2, #0
 8034108:	d039      	beq.n	803417e <__ssvfscanf_r+0xa9a>
 803410a:	60fb      	str	r3, [r7, #12]
 803410c:	f7fb f8b2 	bl	802f274 <__locale_mb_cur_max>
 8034110:	68fb      	ldr	r3, [r7, #12]
 8034112:	4298      	cmp	r0, r3
 8034114:	f43f aba8 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8034118:	6822      	ldr	r2, [r4, #0]
 803411a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803411e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8034122:	54c8      	strb	r0, [r1, r3]
 8034124:	f103 0b01 	add.w	fp, r3, #1
 8034128:	6863      	ldr	r3, [r4, #4]
 803412a:	3b01      	subs	r3, #1
 803412c:	e9c4 2300 	strd	r2, r3, [r4]
 8034130:	6a3b      	ldr	r3, [r7, #32]
 8034132:	2b03      	cmp	r3, #3
 8034134:	d102      	bne.n	803413c <__ssvfscanf_r+0xa58>
 8034136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8034138:	2b04      	cmp	r3, #4
 803413a:	d005      	beq.n	8034148 <__ssvfscanf_r+0xa64>
 803413c:	2208      	movs	r2, #8
 803413e:	2100      	movs	r1, #0
 8034140:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8034144:	f7f9 fbe4 	bl	802d910 <memset>
 8034148:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803414c:	9300      	str	r3, [sp, #0]
 803414e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8034152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034154:	465b      	mov	r3, fp
 8034156:	4629      	mov	r1, r5
 8034158:	f002 fbee 	bl	8036938 <_mbrtowc_r>
 803415c:	1c42      	adds	r2, r0, #1
 803415e:	6238      	str	r0, [r7, #32]
 8034160:	f43f ab82 	beq.w	8033868 <__ssvfscanf_r+0x184>
 8034164:	bb90      	cbnz	r0, 80341cc <__ssvfscanf_r+0xae8>
 8034166:	6028      	str	r0, [r5, #0]
 8034168:	6828      	ldr	r0, [r5, #0]
 803416a:	f002 fbff 	bl	803696c <iswspace>
 803416e:	4603      	mov	r3, r0
 8034170:	2800      	cmp	r0, #0
 8034172:	d047      	beq.n	8034204 <__ssvfscanf_r+0xb20>
 8034174:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8034178:	f1bb 0f00 	cmp.w	fp, #0
 803417c:	d139      	bne.n	80341f2 <__ssvfscanf_r+0xb0e>
 803417e:	f1b8 0f00 	cmp.w	r8, #0
 8034182:	d114      	bne.n	80341ae <__ssvfscanf_r+0xaca>
 8034184:	f8c5 8000 	str.w	r8, [r5]
 8034188:	f1ba 0f00 	cmp.w	sl, #0
 803418c:	d00c      	beq.n	80341a8 <__ssvfscanf_r+0xac4>
 803418e:	1ba9      	subs	r1, r5, r6
 8034190:	108b      	asrs	r3, r1, #2
 8034192:	3301      	adds	r3, #1
 8034194:	4599      	cmp	r9, r3
 8034196:	d907      	bls.n	80341a8 <__ssvfscanf_r+0xac4>
 8034198:	f8da 0000 	ldr.w	r0, [sl]
 803419c:	3104      	adds	r1, #4
 803419e:	f001 f8b7 	bl	8035310 <realloc>
 80341a2:	b108      	cbz	r0, 80341a8 <__ssvfscanf_r+0xac4>
 80341a4:	f8ca 0000 	str.w	r0, [sl]
 80341a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80341aa:	3301      	adds	r3, #1
 80341ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80341ae:	693d      	ldr	r5, [r7, #16]
 80341b0:	f7ff bab3 	b.w	803371a <__ssvfscanf_r+0x36>
 80341b4:	f04f 0900 	mov.w	r9, #0
 80341b8:	613d      	str	r5, [r7, #16]
 80341ba:	464e      	mov	r6, r9
 80341bc:	46ca      	mov	sl, r9
 80341be:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80341c2:	e798      	b.n	80340f6 <__ssvfscanf_r+0xa12>
 80341c4:	46c1      	mov	r9, r8
 80341c6:	4646      	mov	r6, r8
 80341c8:	46c2      	mov	sl, r8
 80341ca:	e794      	b.n	80340f6 <__ssvfscanf_r+0xa12>
 80341cc:	6a3b      	ldr	r3, [r7, #32]
 80341ce:	3302      	adds	r3, #2
 80341d0:	d1ca      	bne.n	8034168 <__ssvfscanf_r+0xa84>
 80341d2:	465b      	mov	r3, fp
 80341d4:	6862      	ldr	r2, [r4, #4]
 80341d6:	2a00      	cmp	r2, #0
 80341d8:	dc8e      	bgt.n	80340f8 <__ssvfscanf_r+0xa14>
 80341da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80341dc:	60fb      	str	r3, [r7, #12]
 80341de:	4621      	mov	r1, r4
 80341e0:	f7fd f8cb 	bl	803137a <__ssrefill_r>
 80341e4:	68fb      	ldr	r3, [r7, #12]
 80341e6:	2800      	cmp	r0, #0
 80341e8:	d086      	beq.n	80340f8 <__ssvfscanf_r+0xa14>
 80341ea:	2b00      	cmp	r3, #0
 80341ec:	f47f ab3c 	bne.w	8033868 <__ssvfscanf_r+0x184>
 80341f0:	e7c5      	b.n	803417e <__ssvfscanf_r+0xa9a>
 80341f2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80341f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80341f8:	f813 100b 	ldrb.w	r1, [r3, fp]
 80341fc:	4622      	mov	r2, r4
 80341fe:	f7fd f881 	bl	8031304 <_sungetc_r>
 8034202:	e7b7      	b.n	8034174 <__ssvfscanf_r+0xa90>
 8034204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8034206:	445a      	add	r2, fp
 8034208:	633a      	str	r2, [r7, #48]	@ 0x30
 803420a:	6a3a      	ldr	r2, [r7, #32]
 803420c:	2a03      	cmp	r2, #3
 803420e:	d102      	bne.n	8034216 <__ssvfscanf_r+0xb32>
 8034210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8034212:	2a04      	cmp	r2, #4
 8034214:	d002      	beq.n	803421c <__ssvfscanf_r+0xb38>
 8034216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8034218:	3a01      	subs	r2, #1
 803421a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803421c:	f1b8 0f00 	cmp.w	r8, #0
 8034220:	d1d8      	bne.n	80341d4 <__ssvfscanf_r+0xaf0>
 8034222:	3504      	adds	r5, #4
 8034224:	f1ba 0f00 	cmp.w	sl, #0
 8034228:	d015      	beq.n	8034256 <__ssvfscanf_r+0xb72>
 803422a:	eba5 0b06 	sub.w	fp, r5, r6
 803422e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8034232:	d80e      	bhi.n	8034252 <__ssvfscanf_r+0xb6e>
 8034234:	4630      	mov	r0, r6
 8034236:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803423a:	f001 f869 	bl	8035310 <realloc>
 803423e:	4606      	mov	r6, r0
 8034240:	2800      	cmp	r0, #0
 8034242:	f43f ac0a 	beq.w	8033a5a <__ssvfscanf_r+0x376>
 8034246:	eb00 050b 	add.w	r5, r0, fp
 803424a:	f8ca 0000 	str.w	r0, [sl]
 803424e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8034252:	4643      	mov	r3, r8
 8034254:	e7be      	b.n	80341d4 <__ssvfscanf_r+0xaf0>
 8034256:	4653      	mov	r3, sl
 8034258:	e7bc      	b.n	80341d4 <__ssvfscanf_r+0xaf0>
 803425a:	f1b8 0f00 	cmp.w	r8, #0
 803425e:	d01a      	beq.n	8034296 <__ssvfscanf_r+0xbb2>
 8034260:	4e4d      	ldr	r6, [pc, #308]	@ (8034398 <__ssvfscanf_r+0xcb4>)
 8034262:	6823      	ldr	r3, [r4, #0]
 8034264:	781a      	ldrb	r2, [r3, #0]
 8034266:	5cb2      	ldrb	r2, [r6, r2]
 8034268:	0711      	lsls	r1, r2, #28
 803426a:	d411      	bmi.n	8034290 <__ssvfscanf_r+0xbac>
 803426c:	3301      	adds	r3, #1
 803426e:	6862      	ldr	r2, [r4, #4]
 8034270:	6023      	str	r3, [r4, #0]
 8034272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034274:	f109 0901 	add.w	r9, r9, #1
 8034278:	3a01      	subs	r2, #1
 803427a:	454b      	cmp	r3, r9
 803427c:	6062      	str	r2, [r4, #4]
 803427e:	d007      	beq.n	8034290 <__ssvfscanf_r+0xbac>
 8034280:	2a00      	cmp	r2, #0
 8034282:	dcee      	bgt.n	8034262 <__ssvfscanf_r+0xb7e>
 8034284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034286:	4621      	mov	r1, r4
 8034288:	f7fd f877 	bl	803137a <__ssrefill_r>
 803428c:	2800      	cmp	r0, #0
 803428e:	d0e8      	beq.n	8034262 <__ssvfscanf_r+0xb7e>
 8034290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8034292:	444b      	add	r3, r9
 8034294:	e4d3      	b.n	8033c3e <__ssvfscanf_r+0x55a>
 8034296:	46a8      	mov	r8, r5
 8034298:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803429c:	f858 5b04 	ldr.w	r5, [r8], #4
 80342a0:	d077      	beq.n	8034392 <__ssvfscanf_r+0xcae>
 80342a2:	2d00      	cmp	r5, #0
 80342a4:	f43f ab14 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 80342a8:	2020      	movs	r0, #32
 80342aa:	f7fc f8a7 	bl	80303fc <malloc>
 80342ae:	4681      	mov	r9, r0
 80342b0:	2800      	cmp	r0, #0
 80342b2:	f43f aade 	beq.w	8033872 <__ssvfscanf_r+0x18e>
 80342b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80342b8:	6028      	str	r0, [r5, #0]
 80342ba:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80342be:	889e      	ldrh	r6, [r3, #4]
 80342c0:	45b2      	cmp	sl, r6
 80342c2:	d311      	bcc.n	80342e8 <__ssvfscanf_r+0xc04>
 80342c4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80342c8:	429e      	cmp	r6, r3
 80342ca:	f200 8373 	bhi.w	80349b4 <__ssvfscanf_r+0x12d0>
 80342ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80342d0:	3608      	adds	r6, #8
 80342d2:	b2b6      	uxth	r6, r6
 80342d4:	6818      	ldr	r0, [r3, #0]
 80342d6:	00b1      	lsls	r1, r6, #2
 80342d8:	f001 f81a 	bl	8035310 <realloc>
 80342dc:	2800      	cmp	r0, #0
 80342de:	f000 8369 	beq.w	80349b4 <__ssvfscanf_r+0x12d0>
 80342e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80342e4:	6018      	str	r0, [r3, #0]
 80342e6:	809e      	strh	r6, [r3, #4]
 80342e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80342ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80342ec:	681b      	ldr	r3, [r3, #0]
 80342ee:	f10a 0201 	add.w	r2, sl, #1
 80342f2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80342f6:	80ca      	strh	r2, [r1, #6]
 80342f8:	46aa      	mov	sl, r5
 80342fa:	2620      	movs	r6, #32
 80342fc:	464d      	mov	r5, r9
 80342fe:	46a9      	mov	r9, r5
 8034300:	6823      	ldr	r3, [r4, #0]
 8034302:	4925      	ldr	r1, [pc, #148]	@ (8034398 <__ssvfscanf_r+0xcb4>)
 8034304:	781a      	ldrb	r2, [r3, #0]
 8034306:	5c8a      	ldrb	r2, [r1, r2]
 8034308:	0712      	lsls	r2, r2, #28
 803430a:	d428      	bmi.n	803435e <__ssvfscanf_r+0xc7a>
 803430c:	6862      	ldr	r2, [r4, #4]
 803430e:	3a01      	subs	r2, #1
 8034310:	6062      	str	r2, [r4, #4]
 8034312:	1c5a      	adds	r2, r3, #1
 8034314:	6022      	str	r2, [r4, #0]
 8034316:	781b      	ldrb	r3, [r3, #0]
 8034318:	f805 3b01 	strb.w	r3, [r5], #1
 803431c:	f1ba 0f00 	cmp.w	sl, #0
 8034320:	d010      	beq.n	8034344 <__ssvfscanf_r+0xc60>
 8034322:	eba5 0b09 	sub.w	fp, r5, r9
 8034326:	45b3      	cmp	fp, r6
 8034328:	d30c      	bcc.n	8034344 <__ssvfscanf_r+0xc60>
 803432a:	0076      	lsls	r6, r6, #1
 803432c:	4648      	mov	r0, r9
 803432e:	4631      	mov	r1, r6
 8034330:	f000 ffee 	bl	8035310 <realloc>
 8034334:	4681      	mov	r9, r0
 8034336:	2800      	cmp	r0, #0
 8034338:	f43f aa9b 	beq.w	8033872 <__ssvfscanf_r+0x18e>
 803433c:	eb00 050b 	add.w	r5, r0, fp
 8034340:	f8ca 0000 	str.w	r0, [sl]
 8034344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034346:	3b01      	subs	r3, #1
 8034348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803434a:	d008      	beq.n	803435e <__ssvfscanf_r+0xc7a>
 803434c:	6863      	ldr	r3, [r4, #4]
 803434e:	2b00      	cmp	r3, #0
 8034350:	dcd6      	bgt.n	8034300 <__ssvfscanf_r+0xc1c>
 8034352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034354:	4621      	mov	r1, r4
 8034356:	f7fd f810 	bl	803137a <__ssrefill_r>
 803435a:	2800      	cmp	r0, #0
 803435c:	d0d0      	beq.n	8034300 <__ssvfscanf_r+0xc1c>
 803435e:	2300      	movs	r3, #0
 8034360:	702b      	strb	r3, [r5, #0]
 8034362:	eba5 0509 	sub.w	r5, r5, r9
 8034366:	f1ba 0f00 	cmp.w	sl, #0
 803436a:	d009      	beq.n	8034380 <__ssvfscanf_r+0xc9c>
 803436c:	1c69      	adds	r1, r5, #1
 803436e:	428e      	cmp	r6, r1
 8034370:	d906      	bls.n	8034380 <__ssvfscanf_r+0xc9c>
 8034372:	f8da 0000 	ldr.w	r0, [sl]
 8034376:	f000 ffcb 	bl	8035310 <realloc>
 803437a:	b108      	cbz	r0, 8034380 <__ssvfscanf_r+0xc9c>
 803437c:	f8ca 0000 	str.w	r0, [sl]
 8034380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8034382:	442b      	add	r3, r5
 8034384:	633b      	str	r3, [r7, #48]	@ 0x30
 8034386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034388:	3301      	adds	r3, #1
 803438a:	627b      	str	r3, [r7, #36]	@ 0x24
 803438c:	4645      	mov	r5, r8
 803438e:	f7ff b9c4 	b.w	803371a <__ssvfscanf_r+0x36>
 8034392:	46b2      	mov	sl, r6
 8034394:	e7b3      	b.n	80342fe <__ssvfscanf_r+0xc1a>
 8034396:	bf00      	nop
 8034398:	0803d6c9 	.word	0x0803d6c9
 803439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803439e:	3b01      	subs	r3, #1
 80343a0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80343a4:	bf81      	itttt	hi
 80343a6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80343a8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 80343ac:	eb03 090c 	addhi.w	r9, r3, ip
 80343b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80343b4:	bf8c      	ite	hi
 80343b6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 80343b8:	f04f 0900 	movls.w	r9, #0
 80343bc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 80343c0:	f04f 0a00 	mov.w	sl, #0
 80343c4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 80343c8:	6822      	ldr	r2, [r4, #0]
 80343ca:	7813      	ldrb	r3, [r2, #0]
 80343cc:	2b39      	cmp	r3, #57	@ 0x39
 80343ce:	d80f      	bhi.n	80343f0 <__ssvfscanf_r+0xd0c>
 80343d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80343d2:	d91a      	bls.n	803440a <__ssvfscanf_r+0xd26>
 80343d4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80343d8:	290e      	cmp	r1, #14
 80343da:	d816      	bhi.n	803440a <__ssvfscanf_r+0xd26>
 80343dc:	e8df f001 	tbb	[pc, r1]
 80343e0:	15781578 	.word	0x15781578
 80343e4:	68683f15 	.word	0x68683f15
 80343e8:	68686868 	.word	0x68686868
 80343ec:	7068      	.short	0x7068
 80343ee:	70          	.byte	0x70
 80343ef:	00          	.byte	0x00
 80343f0:	2b66      	cmp	r3, #102	@ 0x66
 80343f2:	d832      	bhi.n	803445a <__ssvfscanf_r+0xd76>
 80343f4:	2b60      	cmp	r3, #96	@ 0x60
 80343f6:	d803      	bhi.n	8034400 <__ssvfscanf_r+0xd1c>
 80343f8:	2b46      	cmp	r3, #70	@ 0x46
 80343fa:	d804      	bhi.n	8034406 <__ssvfscanf_r+0xd22>
 80343fc:	2b40      	cmp	r3, #64	@ 0x40
 80343fe:	d904      	bls.n	803440a <__ssvfscanf_r+0xd26>
 8034400:	69f9      	ldr	r1, [r7, #28]
 8034402:	290a      	cmp	r1, #10
 8034404:	e062      	b.n	80344cc <__ssvfscanf_r+0xde8>
 8034406:	2b58      	cmp	r3, #88	@ 0x58
 8034408:	d068      	beq.n	80344dc <__ssvfscanf_r+0xdf8>
 803440a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803440e:	d011      	beq.n	8034434 <__ssvfscanf_r+0xd50>
 8034410:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8034414:	4598      	cmp	r8, r3
 8034416:	d908      	bls.n	803442a <__ssvfscanf_r+0xd46>
 8034418:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803441c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803441e:	4622      	mov	r2, r4
 8034420:	f7fc ff70 	bl	8031304 <_sungetc_r>
 8034424:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8034428:	46c8      	mov	r8, r9
 803442a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803442e:	4598      	cmp	r8, r3
 8034430:	f43f aa4e 	beq.w	80338d0 <__ssvfscanf_r+0x1ec>
 8034434:	f01b 0210 	ands.w	r2, fp, #16
 8034438:	d16c      	bne.n	8034514 <__ssvfscanf_r+0xe30>
 803443a:	69fb      	ldr	r3, [r7, #28]
 803443c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803443e:	69be      	ldr	r6, [r7, #24]
 8034440:	f888 2000 	strb.w	r2, [r8]
 8034444:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8034448:	47b0      	blx	r6
 803444a:	f01b 0f20 	tst.w	fp, #32
 803444e:	f105 0904 	add.w	r9, r5, #4
 8034452:	d056      	beq.n	8034502 <__ssvfscanf_r+0xe1e>
 8034454:	682b      	ldr	r3, [r5, #0]
 8034456:	6018      	str	r0, [r3, #0]
 8034458:	e058      	b.n	803450c <__ssvfscanf_r+0xe28>
 803445a:	2b78      	cmp	r3, #120	@ 0x78
 803445c:	e7d4      	b.n	8034408 <__ssvfscanf_r+0xd24>
 803445e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8034462:	d00a      	beq.n	803447a <__ssvfscanf_r+0xd96>
 8034464:	69f9      	ldr	r1, [r7, #28]
 8034466:	b919      	cbnz	r1, 8034470 <__ssvfscanf_r+0xd8c>
 8034468:	2108      	movs	r1, #8
 803446a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803446e:	61f9      	str	r1, [r7, #28]
 8034470:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8034474:	d004      	beq.n	8034480 <__ssvfscanf_r+0xd9c>
 8034476:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803447a:	f808 3b01 	strb.w	r3, [r8], #1
 803447e:	e00b      	b.n	8034498 <__ssvfscanf_r+0xdb4>
 8034480:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8034484:	f1b9 0f00 	cmp.w	r9, #0
 8034488:	d004      	beq.n	8034494 <__ssvfscanf_r+0xdb0>
 803448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803448c:	3301      	adds	r3, #1
 803448e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8034492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8034494:	f10a 0a01 	add.w	sl, sl, #1
 8034498:	6863      	ldr	r3, [r4, #4]
 803449a:	3b01      	subs	r3, #1
 803449c:	2b00      	cmp	r3, #0
 803449e:	6063      	str	r3, [r4, #4]
 80344a0:	dd28      	ble.n	80344f4 <__ssvfscanf_r+0xe10>
 80344a2:	3201      	adds	r2, #1
 80344a4:	6022      	str	r2, [r4, #0]
 80344a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80344a8:	3b01      	subs	r3, #1
 80344aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80344ac:	d18c      	bne.n	80343c8 <__ssvfscanf_r+0xce4>
 80344ae:	e7ac      	b.n	803440a <__ssvfscanf_r+0xd26>
 80344b0:	69f8      	ldr	r0, [r7, #28]
 80344b2:	499b      	ldr	r1, [pc, #620]	@ (8034720 <__ssvfscanf_r+0x103c>)
 80344b4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80344b8:	61f9      	str	r1, [r7, #28]
 80344ba:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 80344be:	e7dc      	b.n	803447a <__ssvfscanf_r+0xd96>
 80344c0:	69f8      	ldr	r0, [r7, #28]
 80344c2:	4997      	ldr	r1, [pc, #604]	@ (8034720 <__ssvfscanf_r+0x103c>)
 80344c4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80344c8:	61f9      	str	r1, [r7, #28]
 80344ca:	2908      	cmp	r1, #8
 80344cc:	dcf5      	bgt.n	80344ba <__ssvfscanf_r+0xdd6>
 80344ce:	e79c      	b.n	803440a <__ssvfscanf_r+0xd26>
 80344d0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80344d4:	d099      	beq.n	803440a <__ssvfscanf_r+0xd26>
 80344d6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 80344da:	e7ce      	b.n	803447a <__ssvfscanf_r+0xd96>
 80344dc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 80344e0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80344e4:	d191      	bne.n	803440a <__ssvfscanf_r+0xd26>
 80344e6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 80344ea:	2110      	movs	r1, #16
 80344ec:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 80344f0:	61f9      	str	r1, [r7, #28]
 80344f2:	e7c2      	b.n	803447a <__ssvfscanf_r+0xd96>
 80344f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80344f6:	4621      	mov	r1, r4
 80344f8:	f7fc ff3f 	bl	803137a <__ssrefill_r>
 80344fc:	2800      	cmp	r0, #0
 80344fe:	d0d2      	beq.n	80344a6 <__ssvfscanf_r+0xdc2>
 8034500:	e783      	b.n	803440a <__ssvfscanf_r+0xd26>
 8034502:	f01b 0f08 	tst.w	fp, #8
 8034506:	d00b      	beq.n	8034520 <__ssvfscanf_r+0xe3c>
 8034508:	682b      	ldr	r3, [r5, #0]
 803450a:	7018      	strb	r0, [r3, #0]
 803450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803450e:	3301      	adds	r3, #1
 8034510:	627b      	str	r3, [r7, #36]	@ 0x24
 8034512:	464d      	mov	r5, r9
 8034514:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8034518:	eba8 0803 	sub.w	r8, r8, r3
 803451c:	44d0      	add	r8, sl
 803451e:	e516      	b.n	8033f4e <__ssvfscanf_r+0x86a>
 8034520:	f01b 0f04 	tst.w	fp, #4
 8034524:	d002      	beq.n	803452c <__ssvfscanf_r+0xe48>
 8034526:	682b      	ldr	r3, [r5, #0]
 8034528:	8018      	strh	r0, [r3, #0]
 803452a:	e7ef      	b.n	803450c <__ssvfscanf_r+0xe28>
 803452c:	f01b 0201 	ands.w	r2, fp, #1
 8034530:	d190      	bne.n	8034454 <__ssvfscanf_r+0xd70>
 8034532:	f01b 0f02 	tst.w	fp, #2
 8034536:	d08d      	beq.n	8034454 <__ssvfscanf_r+0xd70>
 8034538:	4b7a      	ldr	r3, [pc, #488]	@ (8034724 <__ssvfscanf_r+0x1040>)
 803453a:	69b9      	ldr	r1, [r7, #24]
 803453c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803453e:	4299      	cmp	r1, r3
 8034540:	69fb      	ldr	r3, [r7, #28]
 8034542:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8034546:	d105      	bne.n	8034554 <__ssvfscanf_r+0xe70>
 8034548:	f002 f9f4 	bl	8036934 <_strtoull_r>
 803454c:	682b      	ldr	r3, [r5, #0]
 803454e:	e9c3 0100 	strd	r0, r1, [r3]
 8034552:	e7db      	b.n	803450c <__ssvfscanf_r+0xe28>
 8034554:	f002 f942 	bl	80367dc <_strtoll_r>
 8034558:	e7f8      	b.n	803454c <__ssvfscanf_r+0xe68>
 803455a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803455c:	f7fa fe90 	bl	802f280 <_localeconv_r>
 8034560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034562:	6802      	ldr	r2, [r0, #0]
 8034564:	3b01      	subs	r3, #1
 8034566:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803456a:	f04f 0800 	mov.w	r8, #0
 803456e:	bf88      	it	hi
 8034570:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8034572:	f8c7 8010 	str.w	r8, [r7, #16]
 8034576:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803457a:	bf81      	itttt	hi
 803457c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8034580:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8034584:	181b      	addhi	r3, r3, r0
 8034586:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8034588:	bf98      	it	ls
 803458a:	2300      	movls	r3, #0
 803458c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8034590:	46c3      	mov	fp, r8
 8034592:	46c2      	mov	sl, r8
 8034594:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8034598:	6821      	ldr	r1, [r4, #0]
 803459a:	6079      	str	r1, [r7, #4]
 803459c:	7808      	ldrb	r0, [r1, #0]
 803459e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 80345a2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 80345a6:	f200 8123 	bhi.w	80347f0 <__ssvfscanf_r+0x110c>
 80345aa:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80345ae:	0089      	.short	0x0089
 80345b0:	00890121 	.word	0x00890121
 80345b4:	01210121 	.word	0x01210121
 80345b8:	006f004f 	.word	0x006f004f
 80345bc:	006f006f 	.word	0x006f006f
 80345c0:	006f006f 	.word	0x006f006f
 80345c4:	006f006f 	.word	0x006f006f
 80345c8:	006f006f 	.word	0x006f006f
 80345cc:	01210121 	.word	0x01210121
 80345d0:	01210121 	.word	0x01210121
 80345d4:	01210121 	.word	0x01210121
 80345d8:	00af0121 	.word	0x00af0121
 80345dc:	006d006d 	.word	0x006d006d
 80345e0:	011e006d 	.word	0x011e006d
 80345e4:	012100ed 	.word	0x012100ed
 80345e8:	00d60121 	.word	0x00d60121
 80345ec:	01210121 	.word	0x01210121
 80345f0:	01210121 	.word	0x01210121
 80345f4:	01210090 	.word	0x01210090
 80345f8:	01210104 	.word	0x01210104
 80345fc:	01210121 	.word	0x01210121
 8034600:	012100f8 	.word	0x012100f8
 8034604:	01210121 	.word	0x01210121
 8034608:	00fe0073 	.word	0x00fe0073
 803460c:	01210121 	.word	0x01210121
 8034610:	01210121 	.word	0x01210121
 8034614:	01210121 	.word	0x01210121
 8034618:	00af0121 	.word	0x00af0121
 803461c:	006d006d 	.word	0x006d006d
 8034620:	011e006d 	.word	0x011e006d
 8034624:	012100ed 	.word	0x012100ed
 8034628:	00d60121 	.word	0x00d60121
 803462c:	01210121 	.word	0x01210121
 8034630:	01210121 	.word	0x01210121
 8034634:	01210090 	.word	0x01210090
 8034638:	01210104 	.word	0x01210104
 803463c:	01210121 	.word	0x01210121
 8034640:	012100f8 	.word	0x012100f8
 8034644:	01210121 	.word	0x01210121
 8034648:	00fe0073 	.word	0x00fe0073
 803464c:	05f1      	lsls	r1, r6, #23
 803464e:	d51d      	bpl.n	803468c <__ssvfscanf_r+0xfa8>
 8034650:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8034654:	f10a 0a01 	add.w	sl, sl, #1
 8034658:	b11b      	cbz	r3, 8034662 <__ssvfscanf_r+0xf7e>
 803465a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803465c:	3001      	adds	r0, #1
 803465e:	3b01      	subs	r3, #1
 8034660:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8034662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8034664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8034666:	3001      	adds	r0, #1
 8034668:	6338      	str	r0, [r7, #48]	@ 0x30
 803466a:	6860      	ldr	r0, [r4, #4]
 803466c:	3801      	subs	r0, #1
 803466e:	3901      	subs	r1, #1
 8034670:	2800      	cmp	r0, #0
 8034672:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8034674:	6060      	str	r0, [r4, #4]
 8034676:	f340 80cc 	ble.w	8034812 <__ssvfscanf_r+0x112e>
 803467a:	6879      	ldr	r1, [r7, #4]
 803467c:	3101      	adds	r1, #1
 803467e:	6021      	str	r1, [r4, #0]
 8034680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8034682:	2900      	cmp	r1, #0
 8034684:	d188      	bne.n	8034598 <__ssvfscanf_r+0xeb4>
 8034686:	e052      	b.n	803472e <__ssvfscanf_r+0x104a>
 8034688:	0531      	lsls	r1, r6, #20
 803468a:	d550      	bpl.n	803472e <__ssvfscanf_r+0x104a>
 803468c:	eb1b 0c08 	adds.w	ip, fp, r8
 8034690:	d041      	beq.n	8034716 <__ssvfscanf_r+0x1032>
 8034692:	e04c      	b.n	803472e <__ssvfscanf_r+0x104a>
 8034694:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8034698:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803469c:	d147      	bne.n	803472e <__ssvfscanf_r+0x104a>
 803469e:	f1ba 0f01 	cmp.w	sl, #1
 80346a2:	d144      	bne.n	803472e <__ssvfscanf_r+0x104a>
 80346a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80346a6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80346aa:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80346ae:	3901      	subs	r1, #1
 80346b0:	f809 cb01 	strb.w	ip, [r9], #1
 80346b4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 80346b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80346ba:	f04f 0a00 	mov.w	sl, #0
 80346be:	e003      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 80346c0:	0631      	lsls	r1, r6, #24
 80346c2:	d534      	bpl.n	803472e <__ssvfscanf_r+0x104a>
 80346c4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80346c8:	f809 0b01 	strb.w	r0, [r9], #1
 80346cc:	e7c9      	b.n	8034662 <__ssvfscanf_r+0xf7e>
 80346ce:	f1bb 0f00 	cmp.w	fp, #0
 80346d2:	d10c      	bne.n	80346ee <__ssvfscanf_r+0x100a>
 80346d4:	f1ba 0f00 	cmp.w	sl, #0
 80346d8:	d10d      	bne.n	80346f6 <__ssvfscanf_r+0x1012>
 80346da:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80346de:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80346e2:	d108      	bne.n	80346f6 <__ssvfscanf_r+0x1012>
 80346e4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80346e8:	f04f 0b01 	mov.w	fp, #1
 80346ec:	e7ec      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 80346ee:	f1bb 0f02 	cmp.w	fp, #2
 80346f2:	f000 8088 	beq.w	8034806 <__ssvfscanf_r+0x1122>
 80346f6:	f1b8 0f01 	cmp.w	r8, #1
 80346fa:	d002      	beq.n	8034702 <__ssvfscanf_r+0x101e>
 80346fc:	f1b8 0f04 	cmp.w	r8, #4
 8034700:	d115      	bne.n	803472e <__ssvfscanf_r+0x104a>
 8034702:	f108 0801 	add.w	r8, r8, #1
 8034706:	fa5f f888 	uxtb.w	r8, r8
 803470a:	e7dd      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 803470c:	0531      	lsls	r1, r6, #20
 803470e:	d50b      	bpl.n	8034728 <__ssvfscanf_r+0x1044>
 8034710:	eb1b 0c08 	adds.w	ip, fp, r8
 8034714:	d108      	bne.n	8034728 <__ssvfscanf_r+0x1044>
 8034716:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803471a:	46e0      	mov	r8, ip
 803471c:	46e3      	mov	fp, ip
 803471e:	e7d3      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 8034720:	0803d8a8 	.word	0x0803d8a8
 8034724:	08036479 	.word	0x08036479
 8034728:	f1bb 0f01 	cmp.w	fp, #1
 803472c:	d06e      	beq.n	803480c <__ssvfscanf_r+0x1128>
 803472e:	f1ba 0f00 	cmp.w	sl, #0
 8034732:	d001      	beq.n	8034738 <__ssvfscanf_r+0x1054>
 8034734:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8034738:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803473c:	f1bb 0f01 	cmp.w	fp, #1
 8034740:	d873      	bhi.n	803482a <__ssvfscanf_r+0x1146>
 8034742:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8034746:	45a9      	cmp	r9, r5
 8034748:	f67f a8c2 	bls.w	80338d0 <__ssvfscanf_r+0x1ec>
 803474c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8034750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034752:	4622      	mov	r2, r4
 8034754:	f7fc fdd6 	bl	8031304 <_sungetc_r>
 8034758:	e7f5      	b.n	8034746 <__ssvfscanf_r+0x1062>
 803475a:	f1b8 0f00 	cmp.w	r8, #0
 803475e:	d10d      	bne.n	803477c <__ssvfscanf_r+0x1098>
 8034760:	f1ba 0f00 	cmp.w	sl, #0
 8034764:	d1e6      	bne.n	8034734 <__ssvfscanf_r+0x1050>
 8034766:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803476a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803476e:	f040 8124 	bne.w	80349ba <__ssvfscanf_r+0x12d6>
 8034772:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8034776:	f04f 0801 	mov.w	r8, #1
 803477a:	e7a5      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 803477c:	f1b8 0f03 	cmp.w	r8, #3
 8034780:	d0bf      	beq.n	8034702 <__ssvfscanf_r+0x101e>
 8034782:	f1b8 0f05 	cmp.w	r8, #5
 8034786:	e7bb      	b.n	8034700 <__ssvfscanf_r+0x101c>
 8034788:	0531      	lsls	r1, r6, #20
 803478a:	d502      	bpl.n	8034792 <__ssvfscanf_r+0x10ae>
 803478c:	eb1b 0c08 	adds.w	ip, fp, r8
 8034790:	d0c1      	beq.n	8034716 <__ssvfscanf_r+0x1032>
 8034792:	f1b8 0f02 	cmp.w	r8, #2
 8034796:	d1ca      	bne.n	803472e <__ssvfscanf_r+0x104a>
 8034798:	f04f 0803 	mov.w	r8, #3
 803479c:	e794      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 803479e:	f1b8 0f06 	cmp.w	r8, #6
 80347a2:	d1c4      	bne.n	803472e <__ssvfscanf_r+0x104a>
 80347a4:	f04f 0807 	mov.w	r8, #7
 80347a8:	e78e      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 80347aa:	f1b8 0f07 	cmp.w	r8, #7
 80347ae:	d1be      	bne.n	803472e <__ssvfscanf_r+0x104a>
 80347b0:	f04f 0808 	mov.w	r8, #8
 80347b4:	e788      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 80347b6:	0531      	lsls	r1, r6, #20
 80347b8:	d5b9      	bpl.n	803472e <__ssvfscanf_r+0x104a>
 80347ba:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 80347be:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80347c2:	d005      	beq.n	80347d0 <__ssvfscanf_r+0x10ec>
 80347c4:	0571      	lsls	r1, r6, #21
 80347c6:	d5b2      	bpl.n	803472e <__ssvfscanf_r+0x104a>
 80347c8:	f1ba 0f00 	cmp.w	sl, #0
 80347cc:	f000 80f5 	beq.w	80349ba <__ssvfscanf_r+0x12d6>
 80347d0:	05b1      	lsls	r1, r6, #22
 80347d2:	bf58      	it	pl
 80347d4:	6939      	ldrpl	r1, [r7, #16]
 80347d6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 80347da:	bf5c      	itt	pl
 80347dc:	ebaa 0101 	subpl.w	r1, sl, r1
 80347e0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 80347e4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 80347e8:	e767      	b.n	80346ba <__ssvfscanf_r+0xfd6>
 80347ea:	0531      	lsls	r1, r6, #20
 80347ec:	d5e5      	bpl.n	80347ba <__ssvfscanf_r+0x10d6>
 80347ee:	e74d      	b.n	803468c <__ssvfscanf_r+0xfa8>
 80347f0:	f892 c000 	ldrb.w	ip, [r2]
 80347f4:	4584      	cmp	ip, r0
 80347f6:	d19a      	bne.n	803472e <__ssvfscanf_r+0x104a>
 80347f8:	05b1      	lsls	r1, r6, #22
 80347fa:	d598      	bpl.n	803472e <__ssvfscanf_r+0x104a>
 80347fc:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8034800:	f8c7 a010 	str.w	sl, [r7, #16]
 8034804:	e760      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 8034806:	f04f 0b03 	mov.w	fp, #3
 803480a:	e75d      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 803480c:	f04f 0b02 	mov.w	fp, #2
 8034810:	e75a      	b.n	80346c8 <__ssvfscanf_r+0xfe4>
 8034812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034814:	4621      	mov	r1, r4
 8034816:	e9c7 2300 	strd	r2, r3, [r7]
 803481a:	f7fc fdae 	bl	803137a <__ssrefill_r>
 803481e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034822:	2800      	cmp	r0, #0
 8034824:	f43f af2c 	beq.w	8034680 <__ssvfscanf_r+0xf9c>
 8034828:	e781      	b.n	803472e <__ssvfscanf_r+0x104a>
 803482a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803482e:	2b06      	cmp	r3, #6
 8034830:	d827      	bhi.n	8034882 <__ssvfscanf_r+0x119e>
 8034832:	f1b8 0f02 	cmp.w	r8, #2
 8034836:	d834      	bhi.n	80348a2 <__ssvfscanf_r+0x11be>
 8034838:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803483c:	45a9      	cmp	r9, r5
 803483e:	f67f a847 	bls.w	80338d0 <__ssvfscanf_r+0x1ec>
 8034842:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8034846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034848:	4622      	mov	r2, r4
 803484a:	f7fc fd5b 	bl	8031304 <_sungetc_r>
 803484e:	e7f5      	b.n	803483c <__ssvfscanf_r+0x1158>
 8034850:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8034854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8034858:	4622      	mov	r2, r4
 803485a:	f7fc fd53 	bl	8031304 <_sungetc_r>
 803485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8034860:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8034864:	fa5f fb8b 	uxtb.w	fp, fp
 8034868:	f1bb 0f02 	cmp.w	fp, #2
 803486c:	d1f0      	bne.n	8034850 <__ssvfscanf_r+0x116c>
 803486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8034870:	f1a8 0803 	sub.w	r8, r8, #3
 8034874:	fa5f f888 	uxtb.w	r8, r8
 8034878:	eba3 0308 	sub.w	r3, r3, r8
 803487c:	eba9 0908 	sub.w	r9, r9, r8
 8034880:	633b      	str	r3, [r7, #48]	@ 0x30
 8034882:	05f3      	lsls	r3, r6, #23
 8034884:	d52d      	bpl.n	80348e2 <__ssvfscanf_r+0x11fe>
 8034886:	0570      	lsls	r0, r6, #21
 8034888:	d50e      	bpl.n	80348a8 <__ssvfscanf_r+0x11c4>
 803488a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803488e:	45a9      	cmp	r9, r5
 8034890:	f67f a81e 	bls.w	80338d0 <__ssvfscanf_r+0x1ec>
 8034894:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8034898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803489a:	4622      	mov	r2, r4
 803489c:	f7fc fd32 	bl	8031304 <_sungetc_r>
 80348a0:	e7f5      	b.n	803488e <__ssvfscanf_r+0x11aa>
 80348a2:	46c3      	mov	fp, r8
 80348a4:	464b      	mov	r3, r9
 80348a6:	e7db      	b.n	8034860 <__ssvfscanf_r+0x117c>
 80348a8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80348ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80348ae:	2965      	cmp	r1, #101	@ 0x65
 80348b0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 80348b4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80348b8:	d00c      	beq.n	80348d4 <__ssvfscanf_r+0x11f0>
 80348ba:	2945      	cmp	r1, #69	@ 0x45
 80348bc:	d00a      	beq.n	80348d4 <__ssvfscanf_r+0x11f0>
 80348be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80348c0:	4622      	mov	r2, r4
 80348c2:	f7fc fd1f 	bl	8031304 <_sungetc_r>
 80348c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80348c8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80348cc:	f1a9 0802 	sub.w	r8, r9, #2
 80348d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80348d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80348d6:	4622      	mov	r2, r4
 80348d8:	f7fc fd14 	bl	8031304 <_sungetc_r>
 80348dc:	46c1      	mov	r9, r8
 80348de:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 80348e2:	f016 0210 	ands.w	r2, r6, #16
 80348e6:	f47e af18 	bne.w	803371a <__ssvfscanf_r+0x36>
 80348ea:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 80348ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80348f2:	f889 2000 	strb.w	r2, [r9]
 80348f6:	d119      	bne.n	803492c <__ssvfscanf_r+0x1248>
 80348f8:	693b      	ldr	r3, [r7, #16]
 80348fa:	4553      	cmp	r3, sl
 80348fc:	eba3 020a 	sub.w	r2, r3, sl
 8034900:	d121      	bne.n	8034946 <__ssvfscanf_r+0x1262>
 8034902:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8034906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034908:	2200      	movs	r2, #0
 803490a:	f001 fd41 	bl	8036390 <_strtod_r>
 803490e:	07f1      	lsls	r1, r6, #31
 8034910:	ec59 8b10 	vmov	r8, r9, d0
 8034914:	f105 0a04 	add.w	sl, r5, #4
 8034918:	d520      	bpl.n	803495c <__ssvfscanf_r+0x1278>
 803491a:	682b      	ldr	r3, [r5, #0]
 803491c:	ed83 0b00 	vstr	d0, [r3]
 8034920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034922:	3301      	adds	r3, #1
 8034924:	627b      	str	r3, [r7, #36]	@ 0x24
 8034926:	4655      	mov	r5, sl
 8034928:	f7fe bef7 	b.w	803371a <__ssvfscanf_r+0x36>
 803492c:	68fb      	ldr	r3, [r7, #12]
 803492e:	2b00      	cmp	r3, #0
 8034930:	d0e7      	beq.n	8034902 <__ssvfscanf_r+0x121e>
 8034932:	68b9      	ldr	r1, [r7, #8]
 8034934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8034936:	230a      	movs	r3, #10
 8034938:	3101      	adds	r1, #1
 803493a:	f7f8 fb6d 	bl	802d018 <_strtol_r>
 803493e:	68fb      	ldr	r3, [r7, #12]
 8034940:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8034944:	1ac2      	subs	r2, r0, r3
 8034946:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803494a:	4599      	cmp	r9, r3
 803494c:	bf28      	it	cs
 803494e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8034952:	491b      	ldr	r1, [pc, #108]	@ (80349c0 <__ssvfscanf_r+0x12dc>)
 8034954:	4648      	mov	r0, r9
 8034956:	f7f8 fc19 	bl	802d18c <sprintf>
 803495a:	e7d2      	b.n	8034902 <__ssvfscanf_r+0x121e>
 803495c:	07b2      	lsls	r2, r6, #30
 803495e:	682d      	ldr	r5, [r5, #0]
 8034960:	d502      	bpl.n	8034968 <__ssvfscanf_r+0x1284>
 8034962:	ed85 0b00 	vstr	d0, [r5]
 8034966:	e7db      	b.n	8034920 <__ssvfscanf_r+0x123c>
 8034968:	4642      	mov	r2, r8
 803496a:	464b      	mov	r3, r9
 803496c:	4640      	mov	r0, r8
 803496e:	4649      	mov	r1, r9
 8034970:	f7dc f8f4 	bl	8010b5c <__aeabi_dcmpun>
 8034974:	b128      	cbz	r0, 8034982 <__ssvfscanf_r+0x129e>
 8034976:	4813      	ldr	r0, [pc, #76]	@ (80349c4 <__ssvfscanf_r+0x12e0>)
 8034978:	f002 f84e 	bl	8036a18 <nanf>
 803497c:	ed85 0a00 	vstr	s0, [r5]
 8034980:	e7ce      	b.n	8034920 <__ssvfscanf_r+0x123c>
 8034982:	4640      	mov	r0, r8
 8034984:	4649      	mov	r1, r9
 8034986:	f7dc f947 	bl	8010c18 <__aeabi_d2f>
 803498a:	6028      	str	r0, [r5, #0]
 803498c:	e7c8      	b.n	8034920 <__ssvfscanf_r+0x123c>
 803498e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8034992:	6818      	ldr	r0, [r3, #0]
 8034994:	f7fb fd3a 	bl	803040c <free>
 8034998:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803499c:	3401      	adds	r4, #1
 803499e:	601e      	str	r6, [r3, #0]
 80349a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80349a2:	681d      	ldr	r5, [r3, #0]
 80349a4:	88db      	ldrh	r3, [r3, #6]
 80349a6:	42a3      	cmp	r3, r4
 80349a8:	dcf1      	bgt.n	803498e <__ssvfscanf_r+0x12aa>
 80349aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80349ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80349b0:	f7ff b85c 	b.w	8033a6c <__ssvfscanf_r+0x388>
 80349b4:	2400      	movs	r4, #0
 80349b6:	4626      	mov	r6, r4
 80349b8:	e7f2      	b.n	80349a0 <__ssvfscanf_r+0x12bc>
 80349ba:	f04f 0a00 	mov.w	sl, #0
 80349be:	e6bb      	b.n	8034738 <__ssvfscanf_r+0x1054>
 80349c0:	0803d8a2 	.word	0x0803d8a2
 80349c4:	0803d2aa 	.word	0x0803d2aa

080349c8 <_putc_r>:
 80349c8:	b570      	push	{r4, r5, r6, lr}
 80349ca:	460d      	mov	r5, r1
 80349cc:	4614      	mov	r4, r2
 80349ce:	4606      	mov	r6, r0
 80349d0:	b118      	cbz	r0, 80349da <_putc_r+0x12>
 80349d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80349d4:	b90b      	cbnz	r3, 80349da <_putc_r+0x12>
 80349d6:	f7f8 fcf5 	bl	802d3c4 <__sinit>
 80349da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80349dc:	07d8      	lsls	r0, r3, #31
 80349de:	d405      	bmi.n	80349ec <_putc_r+0x24>
 80349e0:	89a3      	ldrh	r3, [r4, #12]
 80349e2:	0599      	lsls	r1, r3, #22
 80349e4:	d402      	bmi.n	80349ec <_putc_r+0x24>
 80349e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80349e8:	f7fa fcf5 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 80349ec:	68a3      	ldr	r3, [r4, #8]
 80349ee:	3b01      	subs	r3, #1
 80349f0:	2b00      	cmp	r3, #0
 80349f2:	60a3      	str	r3, [r4, #8]
 80349f4:	da05      	bge.n	8034a02 <_putc_r+0x3a>
 80349f6:	69a2      	ldr	r2, [r4, #24]
 80349f8:	4293      	cmp	r3, r2
 80349fa:	db12      	blt.n	8034a22 <_putc_r+0x5a>
 80349fc:	b2eb      	uxtb	r3, r5
 80349fe:	2b0a      	cmp	r3, #10
 8034a00:	d00f      	beq.n	8034a22 <_putc_r+0x5a>
 8034a02:	6823      	ldr	r3, [r4, #0]
 8034a04:	1c5a      	adds	r2, r3, #1
 8034a06:	6022      	str	r2, [r4, #0]
 8034a08:	701d      	strb	r5, [r3, #0]
 8034a0a:	b2ed      	uxtb	r5, r5
 8034a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034a0e:	07da      	lsls	r2, r3, #31
 8034a10:	d405      	bmi.n	8034a1e <_putc_r+0x56>
 8034a12:	89a3      	ldrh	r3, [r4, #12]
 8034a14:	059b      	lsls	r3, r3, #22
 8034a16:	d402      	bmi.n	8034a1e <_putc_r+0x56>
 8034a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034a1a:	f7fa fcde 	bl	802f3da <__retarget_lock_release_recursive>
 8034a1e:	4628      	mov	r0, r5
 8034a20:	bd70      	pop	{r4, r5, r6, pc}
 8034a22:	4629      	mov	r1, r5
 8034a24:	4622      	mov	r2, r4
 8034a26:	4630      	mov	r0, r6
 8034a28:	f001 fd79 	bl	803651e <__swbuf_r>
 8034a2c:	4605      	mov	r5, r0
 8034a2e:	e7ed      	b.n	8034a0c <_putc_r+0x44>

08034a30 <__malloc_lock>:
 8034a30:	4801      	ldr	r0, [pc, #4]	@ (8034a38 <__malloc_lock+0x8>)
 8034a32:	f7fa bcd0 	b.w	802f3d6 <__retarget_lock_acquire_recursive>
 8034a36:	bf00      	nop
 8034a38:	2001a10a 	.word	0x2001a10a

08034a3c <__malloc_unlock>:
 8034a3c:	4801      	ldr	r0, [pc, #4]	@ (8034a44 <__malloc_unlock+0x8>)
 8034a3e:	f7fa bccc 	b.w	802f3da <__retarget_lock_release_recursive>
 8034a42:	bf00      	nop
 8034a44:	2001a10a 	.word	0x2001a10a

08034a48 <_Balloc>:
 8034a48:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8034a4a:	b570      	push	{r4, r5, r6, lr}
 8034a4c:	4605      	mov	r5, r0
 8034a4e:	460c      	mov	r4, r1
 8034a50:	b17b      	cbz	r3, 8034a72 <_Balloc+0x2a>
 8034a52:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8034a54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8034a58:	b9a0      	cbnz	r0, 8034a84 <_Balloc+0x3c>
 8034a5a:	2101      	movs	r1, #1
 8034a5c:	fa01 f604 	lsl.w	r6, r1, r4
 8034a60:	1d72      	adds	r2, r6, #5
 8034a62:	0092      	lsls	r2, r2, #2
 8034a64:	4628      	mov	r0, r5
 8034a66:	f001 ffdd 	bl	8036a24 <_calloc_r>
 8034a6a:	b148      	cbz	r0, 8034a80 <_Balloc+0x38>
 8034a6c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8034a70:	e00b      	b.n	8034a8a <_Balloc+0x42>
 8034a72:	2221      	movs	r2, #33	@ 0x21
 8034a74:	2104      	movs	r1, #4
 8034a76:	f001 ffd5 	bl	8036a24 <_calloc_r>
 8034a7a:	6468      	str	r0, [r5, #68]	@ 0x44
 8034a7c:	2800      	cmp	r0, #0
 8034a7e:	d1e8      	bne.n	8034a52 <_Balloc+0xa>
 8034a80:	2000      	movs	r0, #0
 8034a82:	bd70      	pop	{r4, r5, r6, pc}
 8034a84:	6802      	ldr	r2, [r0, #0]
 8034a86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8034a8a:	2300      	movs	r3, #0
 8034a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8034a90:	e7f7      	b.n	8034a82 <_Balloc+0x3a>

08034a92 <_Bfree>:
 8034a92:	b131      	cbz	r1, 8034aa2 <_Bfree+0x10>
 8034a94:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8034a96:	684a      	ldr	r2, [r1, #4]
 8034a98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8034a9c:	6008      	str	r0, [r1, #0]
 8034a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8034aa2:	4770      	bx	lr

08034aa4 <__multadd>:
 8034aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034aa8:	690d      	ldr	r5, [r1, #16]
 8034aaa:	4607      	mov	r7, r0
 8034aac:	460c      	mov	r4, r1
 8034aae:	461e      	mov	r6, r3
 8034ab0:	f101 0c14 	add.w	ip, r1, #20
 8034ab4:	2000      	movs	r0, #0
 8034ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8034aba:	b299      	uxth	r1, r3
 8034abc:	fb02 6101 	mla	r1, r2, r1, r6
 8034ac0:	0c1e      	lsrs	r6, r3, #16
 8034ac2:	0c0b      	lsrs	r3, r1, #16
 8034ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8034ac8:	b289      	uxth	r1, r1
 8034aca:	3001      	adds	r0, #1
 8034acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8034ad0:	4285      	cmp	r5, r0
 8034ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8034ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8034ada:	dcec      	bgt.n	8034ab6 <__multadd+0x12>
 8034adc:	b30e      	cbz	r6, 8034b22 <__multadd+0x7e>
 8034ade:	68a3      	ldr	r3, [r4, #8]
 8034ae0:	42ab      	cmp	r3, r5
 8034ae2:	dc19      	bgt.n	8034b18 <__multadd+0x74>
 8034ae4:	6861      	ldr	r1, [r4, #4]
 8034ae6:	4638      	mov	r0, r7
 8034ae8:	3101      	adds	r1, #1
 8034aea:	f7ff ffad 	bl	8034a48 <_Balloc>
 8034aee:	4680      	mov	r8, r0
 8034af0:	b928      	cbnz	r0, 8034afe <__multadd+0x5a>
 8034af2:	4602      	mov	r2, r0
 8034af4:	4b0c      	ldr	r3, [pc, #48]	@ (8034b28 <__multadd+0x84>)
 8034af6:	480d      	ldr	r0, [pc, #52]	@ (8034b2c <__multadd+0x88>)
 8034af8:	21ba      	movs	r1, #186	@ 0xba
 8034afa:	f7f6 f9b7 	bl	802ae6c <__assert_func>
 8034afe:	6922      	ldr	r2, [r4, #16]
 8034b00:	3202      	adds	r2, #2
 8034b02:	f104 010c 	add.w	r1, r4, #12
 8034b06:	0092      	lsls	r2, r2, #2
 8034b08:	300c      	adds	r0, #12
 8034b0a:	f7fa fc67 	bl	802f3dc <memcpy>
 8034b0e:	4621      	mov	r1, r4
 8034b10:	4638      	mov	r0, r7
 8034b12:	f7ff ffbe 	bl	8034a92 <_Bfree>
 8034b16:	4644      	mov	r4, r8
 8034b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8034b1c:	3501      	adds	r5, #1
 8034b1e:	615e      	str	r6, [r3, #20]
 8034b20:	6125      	str	r5, [r4, #16]
 8034b22:	4620      	mov	r0, r4
 8034b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034b28:	0803d7d6 	.word	0x0803d7d6
 8034b2c:	0803d8ca 	.word	0x0803d8ca

08034b30 <__s2b>:
 8034b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034b34:	460c      	mov	r4, r1
 8034b36:	4615      	mov	r5, r2
 8034b38:	461f      	mov	r7, r3
 8034b3a:	2209      	movs	r2, #9
 8034b3c:	3308      	adds	r3, #8
 8034b3e:	4606      	mov	r6, r0
 8034b40:	fb93 f3f2 	sdiv	r3, r3, r2
 8034b44:	2100      	movs	r1, #0
 8034b46:	2201      	movs	r2, #1
 8034b48:	429a      	cmp	r2, r3
 8034b4a:	db09      	blt.n	8034b60 <__s2b+0x30>
 8034b4c:	4630      	mov	r0, r6
 8034b4e:	f7ff ff7b 	bl	8034a48 <_Balloc>
 8034b52:	b940      	cbnz	r0, 8034b66 <__s2b+0x36>
 8034b54:	4602      	mov	r2, r0
 8034b56:	4b19      	ldr	r3, [pc, #100]	@ (8034bbc <__s2b+0x8c>)
 8034b58:	4819      	ldr	r0, [pc, #100]	@ (8034bc0 <__s2b+0x90>)
 8034b5a:	21d3      	movs	r1, #211	@ 0xd3
 8034b5c:	f7f6 f986 	bl	802ae6c <__assert_func>
 8034b60:	0052      	lsls	r2, r2, #1
 8034b62:	3101      	adds	r1, #1
 8034b64:	e7f0      	b.n	8034b48 <__s2b+0x18>
 8034b66:	9b08      	ldr	r3, [sp, #32]
 8034b68:	6143      	str	r3, [r0, #20]
 8034b6a:	2d09      	cmp	r5, #9
 8034b6c:	f04f 0301 	mov.w	r3, #1
 8034b70:	6103      	str	r3, [r0, #16]
 8034b72:	dd16      	ble.n	8034ba2 <__s2b+0x72>
 8034b74:	f104 0909 	add.w	r9, r4, #9
 8034b78:	46c8      	mov	r8, r9
 8034b7a:	442c      	add	r4, r5
 8034b7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8034b80:	4601      	mov	r1, r0
 8034b82:	3b30      	subs	r3, #48	@ 0x30
 8034b84:	220a      	movs	r2, #10
 8034b86:	4630      	mov	r0, r6
 8034b88:	f7ff ff8c 	bl	8034aa4 <__multadd>
 8034b8c:	45a0      	cmp	r8, r4
 8034b8e:	d1f5      	bne.n	8034b7c <__s2b+0x4c>
 8034b90:	f1a5 0408 	sub.w	r4, r5, #8
 8034b94:	444c      	add	r4, r9
 8034b96:	1b2d      	subs	r5, r5, r4
 8034b98:	1963      	adds	r3, r4, r5
 8034b9a:	42bb      	cmp	r3, r7
 8034b9c:	db04      	blt.n	8034ba8 <__s2b+0x78>
 8034b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8034ba2:	340a      	adds	r4, #10
 8034ba4:	2509      	movs	r5, #9
 8034ba6:	e7f6      	b.n	8034b96 <__s2b+0x66>
 8034ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8034bac:	4601      	mov	r1, r0
 8034bae:	3b30      	subs	r3, #48	@ 0x30
 8034bb0:	220a      	movs	r2, #10
 8034bb2:	4630      	mov	r0, r6
 8034bb4:	f7ff ff76 	bl	8034aa4 <__multadd>
 8034bb8:	e7ee      	b.n	8034b98 <__s2b+0x68>
 8034bba:	bf00      	nop
 8034bbc:	0803d7d6 	.word	0x0803d7d6
 8034bc0:	0803d8ca 	.word	0x0803d8ca

08034bc4 <__hi0bits>:
 8034bc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8034bc8:	4603      	mov	r3, r0
 8034bca:	bf36      	itet	cc
 8034bcc:	0403      	lslcc	r3, r0, #16
 8034bce:	2000      	movcs	r0, #0
 8034bd0:	2010      	movcc	r0, #16
 8034bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8034bd6:	bf3c      	itt	cc
 8034bd8:	021b      	lslcc	r3, r3, #8
 8034bda:	3008      	addcc	r0, #8
 8034bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8034be0:	bf3c      	itt	cc
 8034be2:	011b      	lslcc	r3, r3, #4
 8034be4:	3004      	addcc	r0, #4
 8034be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8034bea:	bf3c      	itt	cc
 8034bec:	009b      	lslcc	r3, r3, #2
 8034bee:	3002      	addcc	r0, #2
 8034bf0:	2b00      	cmp	r3, #0
 8034bf2:	db05      	blt.n	8034c00 <__hi0bits+0x3c>
 8034bf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8034bf8:	f100 0001 	add.w	r0, r0, #1
 8034bfc:	bf08      	it	eq
 8034bfe:	2020      	moveq	r0, #32
 8034c00:	4770      	bx	lr

08034c02 <__lo0bits>:
 8034c02:	6803      	ldr	r3, [r0, #0]
 8034c04:	4602      	mov	r2, r0
 8034c06:	f013 0007 	ands.w	r0, r3, #7
 8034c0a:	d00b      	beq.n	8034c24 <__lo0bits+0x22>
 8034c0c:	07d9      	lsls	r1, r3, #31
 8034c0e:	d421      	bmi.n	8034c54 <__lo0bits+0x52>
 8034c10:	0798      	lsls	r0, r3, #30
 8034c12:	bf49      	itett	mi
 8034c14:	085b      	lsrmi	r3, r3, #1
 8034c16:	089b      	lsrpl	r3, r3, #2
 8034c18:	2001      	movmi	r0, #1
 8034c1a:	6013      	strmi	r3, [r2, #0]
 8034c1c:	bf5c      	itt	pl
 8034c1e:	6013      	strpl	r3, [r2, #0]
 8034c20:	2002      	movpl	r0, #2
 8034c22:	4770      	bx	lr
 8034c24:	b299      	uxth	r1, r3
 8034c26:	b909      	cbnz	r1, 8034c2c <__lo0bits+0x2a>
 8034c28:	0c1b      	lsrs	r3, r3, #16
 8034c2a:	2010      	movs	r0, #16
 8034c2c:	b2d9      	uxtb	r1, r3
 8034c2e:	b909      	cbnz	r1, 8034c34 <__lo0bits+0x32>
 8034c30:	3008      	adds	r0, #8
 8034c32:	0a1b      	lsrs	r3, r3, #8
 8034c34:	0719      	lsls	r1, r3, #28
 8034c36:	bf04      	itt	eq
 8034c38:	091b      	lsreq	r3, r3, #4
 8034c3a:	3004      	addeq	r0, #4
 8034c3c:	0799      	lsls	r1, r3, #30
 8034c3e:	bf04      	itt	eq
 8034c40:	089b      	lsreq	r3, r3, #2
 8034c42:	3002      	addeq	r0, #2
 8034c44:	07d9      	lsls	r1, r3, #31
 8034c46:	d403      	bmi.n	8034c50 <__lo0bits+0x4e>
 8034c48:	085b      	lsrs	r3, r3, #1
 8034c4a:	f100 0001 	add.w	r0, r0, #1
 8034c4e:	d003      	beq.n	8034c58 <__lo0bits+0x56>
 8034c50:	6013      	str	r3, [r2, #0]
 8034c52:	4770      	bx	lr
 8034c54:	2000      	movs	r0, #0
 8034c56:	4770      	bx	lr
 8034c58:	2020      	movs	r0, #32
 8034c5a:	4770      	bx	lr

08034c5c <__i2b>:
 8034c5c:	b510      	push	{r4, lr}
 8034c5e:	460c      	mov	r4, r1
 8034c60:	2101      	movs	r1, #1
 8034c62:	f7ff fef1 	bl	8034a48 <_Balloc>
 8034c66:	4602      	mov	r2, r0
 8034c68:	b928      	cbnz	r0, 8034c76 <__i2b+0x1a>
 8034c6a:	4b05      	ldr	r3, [pc, #20]	@ (8034c80 <__i2b+0x24>)
 8034c6c:	4805      	ldr	r0, [pc, #20]	@ (8034c84 <__i2b+0x28>)
 8034c6e:	f240 1145 	movw	r1, #325	@ 0x145
 8034c72:	f7f6 f8fb 	bl	802ae6c <__assert_func>
 8034c76:	2301      	movs	r3, #1
 8034c78:	6144      	str	r4, [r0, #20]
 8034c7a:	6103      	str	r3, [r0, #16]
 8034c7c:	bd10      	pop	{r4, pc}
 8034c7e:	bf00      	nop
 8034c80:	0803d7d6 	.word	0x0803d7d6
 8034c84:	0803d8ca 	.word	0x0803d8ca

08034c88 <__multiply>:
 8034c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034c8c:	4614      	mov	r4, r2
 8034c8e:	690a      	ldr	r2, [r1, #16]
 8034c90:	6923      	ldr	r3, [r4, #16]
 8034c92:	429a      	cmp	r2, r3
 8034c94:	bfa8      	it	ge
 8034c96:	4623      	movge	r3, r4
 8034c98:	460f      	mov	r7, r1
 8034c9a:	bfa4      	itt	ge
 8034c9c:	460c      	movge	r4, r1
 8034c9e:	461f      	movge	r7, r3
 8034ca0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8034ca4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8034ca8:	68a3      	ldr	r3, [r4, #8]
 8034caa:	6861      	ldr	r1, [r4, #4]
 8034cac:	eb0a 0609 	add.w	r6, sl, r9
 8034cb0:	42b3      	cmp	r3, r6
 8034cb2:	b085      	sub	sp, #20
 8034cb4:	bfb8      	it	lt
 8034cb6:	3101      	addlt	r1, #1
 8034cb8:	f7ff fec6 	bl	8034a48 <_Balloc>
 8034cbc:	b930      	cbnz	r0, 8034ccc <__multiply+0x44>
 8034cbe:	4602      	mov	r2, r0
 8034cc0:	4b44      	ldr	r3, [pc, #272]	@ (8034dd4 <__multiply+0x14c>)
 8034cc2:	4845      	ldr	r0, [pc, #276]	@ (8034dd8 <__multiply+0x150>)
 8034cc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8034cc8:	f7f6 f8d0 	bl	802ae6c <__assert_func>
 8034ccc:	f100 0514 	add.w	r5, r0, #20
 8034cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8034cd4:	462b      	mov	r3, r5
 8034cd6:	2200      	movs	r2, #0
 8034cd8:	4543      	cmp	r3, r8
 8034cda:	d321      	bcc.n	8034d20 <__multiply+0x98>
 8034cdc:	f107 0114 	add.w	r1, r7, #20
 8034ce0:	f104 0214 	add.w	r2, r4, #20
 8034ce4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8034ce8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8034cec:	9302      	str	r3, [sp, #8]
 8034cee:	1b13      	subs	r3, r2, r4
 8034cf0:	3b15      	subs	r3, #21
 8034cf2:	f023 0303 	bic.w	r3, r3, #3
 8034cf6:	3304      	adds	r3, #4
 8034cf8:	f104 0715 	add.w	r7, r4, #21
 8034cfc:	42ba      	cmp	r2, r7
 8034cfe:	bf38      	it	cc
 8034d00:	2304      	movcc	r3, #4
 8034d02:	9301      	str	r3, [sp, #4]
 8034d04:	9b02      	ldr	r3, [sp, #8]
 8034d06:	9103      	str	r1, [sp, #12]
 8034d08:	428b      	cmp	r3, r1
 8034d0a:	d80c      	bhi.n	8034d26 <__multiply+0x9e>
 8034d0c:	2e00      	cmp	r6, #0
 8034d0e:	dd03      	ble.n	8034d18 <__multiply+0x90>
 8034d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8034d14:	2b00      	cmp	r3, #0
 8034d16:	d05b      	beq.n	8034dd0 <__multiply+0x148>
 8034d18:	6106      	str	r6, [r0, #16]
 8034d1a:	b005      	add	sp, #20
 8034d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034d20:	f843 2b04 	str.w	r2, [r3], #4
 8034d24:	e7d8      	b.n	8034cd8 <__multiply+0x50>
 8034d26:	f8b1 a000 	ldrh.w	sl, [r1]
 8034d2a:	f1ba 0f00 	cmp.w	sl, #0
 8034d2e:	d024      	beq.n	8034d7a <__multiply+0xf2>
 8034d30:	f104 0e14 	add.w	lr, r4, #20
 8034d34:	46a9      	mov	r9, r5
 8034d36:	f04f 0c00 	mov.w	ip, #0
 8034d3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8034d3e:	f8d9 3000 	ldr.w	r3, [r9]
 8034d42:	fa1f fb87 	uxth.w	fp, r7
 8034d46:	b29b      	uxth	r3, r3
 8034d48:	fb0a 330b 	mla	r3, sl, fp, r3
 8034d4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8034d50:	f8d9 7000 	ldr.w	r7, [r9]
 8034d54:	4463      	add	r3, ip
 8034d56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8034d5a:	fb0a c70b 	mla	r7, sl, fp, ip
 8034d5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8034d62:	b29b      	uxth	r3, r3
 8034d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8034d68:	4572      	cmp	r2, lr
 8034d6a:	f849 3b04 	str.w	r3, [r9], #4
 8034d6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8034d72:	d8e2      	bhi.n	8034d3a <__multiply+0xb2>
 8034d74:	9b01      	ldr	r3, [sp, #4]
 8034d76:	f845 c003 	str.w	ip, [r5, r3]
 8034d7a:	9b03      	ldr	r3, [sp, #12]
 8034d7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8034d80:	3104      	adds	r1, #4
 8034d82:	f1b9 0f00 	cmp.w	r9, #0
 8034d86:	d021      	beq.n	8034dcc <__multiply+0x144>
 8034d88:	682b      	ldr	r3, [r5, #0]
 8034d8a:	f104 0c14 	add.w	ip, r4, #20
 8034d8e:	46ae      	mov	lr, r5
 8034d90:	f04f 0a00 	mov.w	sl, #0
 8034d94:	f8bc b000 	ldrh.w	fp, [ip]
 8034d98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8034d9c:	fb09 770b 	mla	r7, r9, fp, r7
 8034da0:	4457      	add	r7, sl
 8034da2:	b29b      	uxth	r3, r3
 8034da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8034da8:	f84e 3b04 	str.w	r3, [lr], #4
 8034dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8034db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034db4:	f8be 3000 	ldrh.w	r3, [lr]
 8034db8:	fb09 330a 	mla	r3, r9, sl, r3
 8034dbc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8034dc0:	4562      	cmp	r2, ip
 8034dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034dc6:	d8e5      	bhi.n	8034d94 <__multiply+0x10c>
 8034dc8:	9f01      	ldr	r7, [sp, #4]
 8034dca:	51eb      	str	r3, [r5, r7]
 8034dcc:	3504      	adds	r5, #4
 8034dce:	e799      	b.n	8034d04 <__multiply+0x7c>
 8034dd0:	3e01      	subs	r6, #1
 8034dd2:	e79b      	b.n	8034d0c <__multiply+0x84>
 8034dd4:	0803d7d6 	.word	0x0803d7d6
 8034dd8:	0803d8ca 	.word	0x0803d8ca

08034ddc <__pow5mult>:
 8034ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034de0:	4615      	mov	r5, r2
 8034de2:	f012 0203 	ands.w	r2, r2, #3
 8034de6:	4607      	mov	r7, r0
 8034de8:	460e      	mov	r6, r1
 8034dea:	d007      	beq.n	8034dfc <__pow5mult+0x20>
 8034dec:	4c1a      	ldr	r4, [pc, #104]	@ (8034e58 <__pow5mult+0x7c>)
 8034dee:	3a01      	subs	r2, #1
 8034df0:	2300      	movs	r3, #0
 8034df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8034df6:	f7ff fe55 	bl	8034aa4 <__multadd>
 8034dfa:	4606      	mov	r6, r0
 8034dfc:	10ad      	asrs	r5, r5, #2
 8034dfe:	d027      	beq.n	8034e50 <__pow5mult+0x74>
 8034e00:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8034e02:	b944      	cbnz	r4, 8034e16 <__pow5mult+0x3a>
 8034e04:	f240 2171 	movw	r1, #625	@ 0x271
 8034e08:	4638      	mov	r0, r7
 8034e0a:	f7ff ff27 	bl	8034c5c <__i2b>
 8034e0e:	2300      	movs	r3, #0
 8034e10:	6438      	str	r0, [r7, #64]	@ 0x40
 8034e12:	4604      	mov	r4, r0
 8034e14:	6003      	str	r3, [r0, #0]
 8034e16:	f04f 0900 	mov.w	r9, #0
 8034e1a:	07eb      	lsls	r3, r5, #31
 8034e1c:	d50a      	bpl.n	8034e34 <__pow5mult+0x58>
 8034e1e:	4631      	mov	r1, r6
 8034e20:	4622      	mov	r2, r4
 8034e22:	4638      	mov	r0, r7
 8034e24:	f7ff ff30 	bl	8034c88 <__multiply>
 8034e28:	4631      	mov	r1, r6
 8034e2a:	4680      	mov	r8, r0
 8034e2c:	4638      	mov	r0, r7
 8034e2e:	f7ff fe30 	bl	8034a92 <_Bfree>
 8034e32:	4646      	mov	r6, r8
 8034e34:	106d      	asrs	r5, r5, #1
 8034e36:	d00b      	beq.n	8034e50 <__pow5mult+0x74>
 8034e38:	6820      	ldr	r0, [r4, #0]
 8034e3a:	b938      	cbnz	r0, 8034e4c <__pow5mult+0x70>
 8034e3c:	4622      	mov	r2, r4
 8034e3e:	4621      	mov	r1, r4
 8034e40:	4638      	mov	r0, r7
 8034e42:	f7ff ff21 	bl	8034c88 <__multiply>
 8034e46:	6020      	str	r0, [r4, #0]
 8034e48:	f8c0 9000 	str.w	r9, [r0]
 8034e4c:	4604      	mov	r4, r0
 8034e4e:	e7e4      	b.n	8034e1a <__pow5mult+0x3e>
 8034e50:	4630      	mov	r0, r6
 8034e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8034e56:	bf00      	nop
 8034e58:	0803d924 	.word	0x0803d924

08034e5c <__lshift>:
 8034e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034e60:	460c      	mov	r4, r1
 8034e62:	6849      	ldr	r1, [r1, #4]
 8034e64:	6923      	ldr	r3, [r4, #16]
 8034e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8034e6a:	68a3      	ldr	r3, [r4, #8]
 8034e6c:	4607      	mov	r7, r0
 8034e6e:	4691      	mov	r9, r2
 8034e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8034e74:	f108 0601 	add.w	r6, r8, #1
 8034e78:	42b3      	cmp	r3, r6
 8034e7a:	db0b      	blt.n	8034e94 <__lshift+0x38>
 8034e7c:	4638      	mov	r0, r7
 8034e7e:	f7ff fde3 	bl	8034a48 <_Balloc>
 8034e82:	4605      	mov	r5, r0
 8034e84:	b948      	cbnz	r0, 8034e9a <__lshift+0x3e>
 8034e86:	4602      	mov	r2, r0
 8034e88:	4b28      	ldr	r3, [pc, #160]	@ (8034f2c <__lshift+0xd0>)
 8034e8a:	4829      	ldr	r0, [pc, #164]	@ (8034f30 <__lshift+0xd4>)
 8034e8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8034e90:	f7f5 ffec 	bl	802ae6c <__assert_func>
 8034e94:	3101      	adds	r1, #1
 8034e96:	005b      	lsls	r3, r3, #1
 8034e98:	e7ee      	b.n	8034e78 <__lshift+0x1c>
 8034e9a:	2300      	movs	r3, #0
 8034e9c:	f100 0114 	add.w	r1, r0, #20
 8034ea0:	f100 0210 	add.w	r2, r0, #16
 8034ea4:	4618      	mov	r0, r3
 8034ea6:	4553      	cmp	r3, sl
 8034ea8:	db33      	blt.n	8034f12 <__lshift+0xb6>
 8034eaa:	6920      	ldr	r0, [r4, #16]
 8034eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8034eb0:	f104 0314 	add.w	r3, r4, #20
 8034eb4:	f019 091f 	ands.w	r9, r9, #31
 8034eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8034ebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8034ec0:	d02b      	beq.n	8034f1a <__lshift+0xbe>
 8034ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8034ec6:	468a      	mov	sl, r1
 8034ec8:	2200      	movs	r2, #0
 8034eca:	6818      	ldr	r0, [r3, #0]
 8034ecc:	fa00 f009 	lsl.w	r0, r0, r9
 8034ed0:	4310      	orrs	r0, r2
 8034ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8034ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8034eda:	459c      	cmp	ip, r3
 8034edc:	fa22 f20e 	lsr.w	r2, r2, lr
 8034ee0:	d8f3      	bhi.n	8034eca <__lshift+0x6e>
 8034ee2:	ebac 0304 	sub.w	r3, ip, r4
 8034ee6:	3b15      	subs	r3, #21
 8034ee8:	f023 0303 	bic.w	r3, r3, #3
 8034eec:	3304      	adds	r3, #4
 8034eee:	f104 0015 	add.w	r0, r4, #21
 8034ef2:	4584      	cmp	ip, r0
 8034ef4:	bf38      	it	cc
 8034ef6:	2304      	movcc	r3, #4
 8034ef8:	50ca      	str	r2, [r1, r3]
 8034efa:	b10a      	cbz	r2, 8034f00 <__lshift+0xa4>
 8034efc:	f108 0602 	add.w	r6, r8, #2
 8034f00:	3e01      	subs	r6, #1
 8034f02:	4638      	mov	r0, r7
 8034f04:	612e      	str	r6, [r5, #16]
 8034f06:	4621      	mov	r1, r4
 8034f08:	f7ff fdc3 	bl	8034a92 <_Bfree>
 8034f0c:	4628      	mov	r0, r5
 8034f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8034f16:	3301      	adds	r3, #1
 8034f18:	e7c5      	b.n	8034ea6 <__lshift+0x4a>
 8034f1a:	3904      	subs	r1, #4
 8034f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8034f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8034f24:	459c      	cmp	ip, r3
 8034f26:	d8f9      	bhi.n	8034f1c <__lshift+0xc0>
 8034f28:	e7ea      	b.n	8034f00 <__lshift+0xa4>
 8034f2a:	bf00      	nop
 8034f2c:	0803d7d6 	.word	0x0803d7d6
 8034f30:	0803d8ca 	.word	0x0803d8ca

08034f34 <__mcmp>:
 8034f34:	690a      	ldr	r2, [r1, #16]
 8034f36:	4603      	mov	r3, r0
 8034f38:	6900      	ldr	r0, [r0, #16]
 8034f3a:	1a80      	subs	r0, r0, r2
 8034f3c:	b530      	push	{r4, r5, lr}
 8034f3e:	d10e      	bne.n	8034f5e <__mcmp+0x2a>
 8034f40:	3314      	adds	r3, #20
 8034f42:	3114      	adds	r1, #20
 8034f44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8034f48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8034f4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8034f50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8034f54:	4295      	cmp	r5, r2
 8034f56:	d003      	beq.n	8034f60 <__mcmp+0x2c>
 8034f58:	d205      	bcs.n	8034f66 <__mcmp+0x32>
 8034f5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034f5e:	bd30      	pop	{r4, r5, pc}
 8034f60:	42a3      	cmp	r3, r4
 8034f62:	d3f3      	bcc.n	8034f4c <__mcmp+0x18>
 8034f64:	e7fb      	b.n	8034f5e <__mcmp+0x2a>
 8034f66:	2001      	movs	r0, #1
 8034f68:	e7f9      	b.n	8034f5e <__mcmp+0x2a>
	...

08034f6c <__mdiff>:
 8034f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034f70:	4689      	mov	r9, r1
 8034f72:	4606      	mov	r6, r0
 8034f74:	4611      	mov	r1, r2
 8034f76:	4648      	mov	r0, r9
 8034f78:	4614      	mov	r4, r2
 8034f7a:	f7ff ffdb 	bl	8034f34 <__mcmp>
 8034f7e:	1e05      	subs	r5, r0, #0
 8034f80:	d112      	bne.n	8034fa8 <__mdiff+0x3c>
 8034f82:	4629      	mov	r1, r5
 8034f84:	4630      	mov	r0, r6
 8034f86:	f7ff fd5f 	bl	8034a48 <_Balloc>
 8034f8a:	4602      	mov	r2, r0
 8034f8c:	b928      	cbnz	r0, 8034f9a <__mdiff+0x2e>
 8034f8e:	4b3f      	ldr	r3, [pc, #252]	@ (803508c <__mdiff+0x120>)
 8034f90:	f240 2137 	movw	r1, #567	@ 0x237
 8034f94:	483e      	ldr	r0, [pc, #248]	@ (8035090 <__mdiff+0x124>)
 8034f96:	f7f5 ff69 	bl	802ae6c <__assert_func>
 8034f9a:	2301      	movs	r3, #1
 8034f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8034fa0:	4610      	mov	r0, r2
 8034fa2:	b003      	add	sp, #12
 8034fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034fa8:	bfbc      	itt	lt
 8034faa:	464b      	movlt	r3, r9
 8034fac:	46a1      	movlt	r9, r4
 8034fae:	4630      	mov	r0, r6
 8034fb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8034fb4:	bfba      	itte	lt
 8034fb6:	461c      	movlt	r4, r3
 8034fb8:	2501      	movlt	r5, #1
 8034fba:	2500      	movge	r5, #0
 8034fbc:	f7ff fd44 	bl	8034a48 <_Balloc>
 8034fc0:	4602      	mov	r2, r0
 8034fc2:	b918      	cbnz	r0, 8034fcc <__mdiff+0x60>
 8034fc4:	4b31      	ldr	r3, [pc, #196]	@ (803508c <__mdiff+0x120>)
 8034fc6:	f240 2145 	movw	r1, #581	@ 0x245
 8034fca:	e7e3      	b.n	8034f94 <__mdiff+0x28>
 8034fcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8034fd0:	6926      	ldr	r6, [r4, #16]
 8034fd2:	60c5      	str	r5, [r0, #12]
 8034fd4:	f109 0310 	add.w	r3, r9, #16
 8034fd8:	f109 0514 	add.w	r5, r9, #20
 8034fdc:	f104 0e14 	add.w	lr, r4, #20
 8034fe0:	f100 0b14 	add.w	fp, r0, #20
 8034fe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8034fe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8034fec:	9301      	str	r3, [sp, #4]
 8034fee:	46d9      	mov	r9, fp
 8034ff0:	f04f 0c00 	mov.w	ip, #0
 8034ff4:	9b01      	ldr	r3, [sp, #4]
 8034ff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8034ffa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8034ffe:	9301      	str	r3, [sp, #4]
 8035000:	fa1f f38a 	uxth.w	r3, sl
 8035004:	4619      	mov	r1, r3
 8035006:	b283      	uxth	r3, r0
 8035008:	1acb      	subs	r3, r1, r3
 803500a:	0c00      	lsrs	r0, r0, #16
 803500c:	4463      	add	r3, ip
 803500e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8035012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8035016:	b29b      	uxth	r3, r3
 8035018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803501c:	4576      	cmp	r6, lr
 803501e:	f849 3b04 	str.w	r3, [r9], #4
 8035022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8035026:	d8e5      	bhi.n	8034ff4 <__mdiff+0x88>
 8035028:	1b33      	subs	r3, r6, r4
 803502a:	3b15      	subs	r3, #21
 803502c:	f023 0303 	bic.w	r3, r3, #3
 8035030:	3415      	adds	r4, #21
 8035032:	3304      	adds	r3, #4
 8035034:	42a6      	cmp	r6, r4
 8035036:	bf38      	it	cc
 8035038:	2304      	movcc	r3, #4
 803503a:	441d      	add	r5, r3
 803503c:	445b      	add	r3, fp
 803503e:	461e      	mov	r6, r3
 8035040:	462c      	mov	r4, r5
 8035042:	4544      	cmp	r4, r8
 8035044:	d30e      	bcc.n	8035064 <__mdiff+0xf8>
 8035046:	f108 0103 	add.w	r1, r8, #3
 803504a:	1b49      	subs	r1, r1, r5
 803504c:	f021 0103 	bic.w	r1, r1, #3
 8035050:	3d03      	subs	r5, #3
 8035052:	45a8      	cmp	r8, r5
 8035054:	bf38      	it	cc
 8035056:	2100      	movcc	r1, #0
 8035058:	440b      	add	r3, r1
 803505a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803505e:	b191      	cbz	r1, 8035086 <__mdiff+0x11a>
 8035060:	6117      	str	r7, [r2, #16]
 8035062:	e79d      	b.n	8034fa0 <__mdiff+0x34>
 8035064:	f854 1b04 	ldr.w	r1, [r4], #4
 8035068:	46e6      	mov	lr, ip
 803506a:	0c08      	lsrs	r0, r1, #16
 803506c:	fa1c fc81 	uxtah	ip, ip, r1
 8035070:	4471      	add	r1, lr
 8035072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8035076:	b289      	uxth	r1, r1
 8035078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803507c:	f846 1b04 	str.w	r1, [r6], #4
 8035080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8035084:	e7dd      	b.n	8035042 <__mdiff+0xd6>
 8035086:	3f01      	subs	r7, #1
 8035088:	e7e7      	b.n	803505a <__mdiff+0xee>
 803508a:	bf00      	nop
 803508c:	0803d7d6 	.word	0x0803d7d6
 8035090:	0803d8ca 	.word	0x0803d8ca

08035094 <__ulp>:
 8035094:	b082      	sub	sp, #8
 8035096:	ed8d 0b00 	vstr	d0, [sp]
 803509a:	9a01      	ldr	r2, [sp, #4]
 803509c:	4b0f      	ldr	r3, [pc, #60]	@ (80350dc <__ulp+0x48>)
 803509e:	4013      	ands	r3, r2
 80350a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80350a4:	2b00      	cmp	r3, #0
 80350a6:	dc08      	bgt.n	80350ba <__ulp+0x26>
 80350a8:	425b      	negs	r3, r3
 80350aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80350ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80350b2:	da04      	bge.n	80350be <__ulp+0x2a>
 80350b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80350b8:	4113      	asrs	r3, r2
 80350ba:	2200      	movs	r2, #0
 80350bc:	e008      	b.n	80350d0 <__ulp+0x3c>
 80350be:	f1a2 0314 	sub.w	r3, r2, #20
 80350c2:	2b1e      	cmp	r3, #30
 80350c4:	bfda      	itte	le
 80350c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80350ca:	40da      	lsrle	r2, r3
 80350cc:	2201      	movgt	r2, #1
 80350ce:	2300      	movs	r3, #0
 80350d0:	4619      	mov	r1, r3
 80350d2:	4610      	mov	r0, r2
 80350d4:	ec41 0b10 	vmov	d0, r0, r1
 80350d8:	b002      	add	sp, #8
 80350da:	4770      	bx	lr
 80350dc:	7ff00000 	.word	0x7ff00000

080350e0 <__b2d>:
 80350e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80350e4:	6906      	ldr	r6, [r0, #16]
 80350e6:	f100 0814 	add.w	r8, r0, #20
 80350ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80350ee:	1f37      	subs	r7, r6, #4
 80350f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80350f4:	4610      	mov	r0, r2
 80350f6:	f7ff fd65 	bl	8034bc4 <__hi0bits>
 80350fa:	f1c0 0320 	rsb	r3, r0, #32
 80350fe:	280a      	cmp	r0, #10
 8035100:	600b      	str	r3, [r1, #0]
 8035102:	491b      	ldr	r1, [pc, #108]	@ (8035170 <__b2d+0x90>)
 8035104:	dc15      	bgt.n	8035132 <__b2d+0x52>
 8035106:	f1c0 0c0b 	rsb	ip, r0, #11
 803510a:	fa22 f30c 	lsr.w	r3, r2, ip
 803510e:	45b8      	cmp	r8, r7
 8035110:	ea43 0501 	orr.w	r5, r3, r1
 8035114:	bf34      	ite	cc
 8035116:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803511a:	2300      	movcs	r3, #0
 803511c:	3015      	adds	r0, #21
 803511e:	fa02 f000 	lsl.w	r0, r2, r0
 8035122:	fa23 f30c 	lsr.w	r3, r3, ip
 8035126:	4303      	orrs	r3, r0
 8035128:	461c      	mov	r4, r3
 803512a:	ec45 4b10 	vmov	d0, r4, r5
 803512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035132:	45b8      	cmp	r8, r7
 8035134:	bf3a      	itte	cc
 8035136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803513a:	f1a6 0708 	subcc.w	r7, r6, #8
 803513e:	2300      	movcs	r3, #0
 8035140:	380b      	subs	r0, #11
 8035142:	d012      	beq.n	803516a <__b2d+0x8a>
 8035144:	f1c0 0120 	rsb	r1, r0, #32
 8035148:	fa23 f401 	lsr.w	r4, r3, r1
 803514c:	4082      	lsls	r2, r0
 803514e:	4322      	orrs	r2, r4
 8035150:	4547      	cmp	r7, r8
 8035152:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8035156:	bf8c      	ite	hi
 8035158:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 803515c:	2200      	movls	r2, #0
 803515e:	4083      	lsls	r3, r0
 8035160:	40ca      	lsrs	r2, r1
 8035162:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8035166:	4313      	orrs	r3, r2
 8035168:	e7de      	b.n	8035128 <__b2d+0x48>
 803516a:	ea42 0501 	orr.w	r5, r2, r1
 803516e:	e7db      	b.n	8035128 <__b2d+0x48>
 8035170:	3ff00000 	.word	0x3ff00000

08035174 <__d2b>:
 8035174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8035178:	460f      	mov	r7, r1
 803517a:	2101      	movs	r1, #1
 803517c:	ec59 8b10 	vmov	r8, r9, d0
 8035180:	4616      	mov	r6, r2
 8035182:	f7ff fc61 	bl	8034a48 <_Balloc>
 8035186:	4604      	mov	r4, r0
 8035188:	b930      	cbnz	r0, 8035198 <__d2b+0x24>
 803518a:	4602      	mov	r2, r0
 803518c:	4b23      	ldr	r3, [pc, #140]	@ (803521c <__d2b+0xa8>)
 803518e:	4824      	ldr	r0, [pc, #144]	@ (8035220 <__d2b+0xac>)
 8035190:	f240 310f 	movw	r1, #783	@ 0x30f
 8035194:	f7f5 fe6a 	bl	802ae6c <__assert_func>
 8035198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803519c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80351a0:	b10d      	cbz	r5, 80351a6 <__d2b+0x32>
 80351a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80351a6:	9301      	str	r3, [sp, #4]
 80351a8:	f1b8 0300 	subs.w	r3, r8, #0
 80351ac:	d023      	beq.n	80351f6 <__d2b+0x82>
 80351ae:	4668      	mov	r0, sp
 80351b0:	9300      	str	r3, [sp, #0]
 80351b2:	f7ff fd26 	bl	8034c02 <__lo0bits>
 80351b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80351ba:	b1d0      	cbz	r0, 80351f2 <__d2b+0x7e>
 80351bc:	f1c0 0320 	rsb	r3, r0, #32
 80351c0:	fa02 f303 	lsl.w	r3, r2, r3
 80351c4:	430b      	orrs	r3, r1
 80351c6:	40c2      	lsrs	r2, r0
 80351c8:	6163      	str	r3, [r4, #20]
 80351ca:	9201      	str	r2, [sp, #4]
 80351cc:	9b01      	ldr	r3, [sp, #4]
 80351ce:	61a3      	str	r3, [r4, #24]
 80351d0:	2b00      	cmp	r3, #0
 80351d2:	bf0c      	ite	eq
 80351d4:	2201      	moveq	r2, #1
 80351d6:	2202      	movne	r2, #2
 80351d8:	6122      	str	r2, [r4, #16]
 80351da:	b1a5      	cbz	r5, 8035206 <__d2b+0x92>
 80351dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80351e0:	4405      	add	r5, r0
 80351e2:	603d      	str	r5, [r7, #0]
 80351e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80351e8:	6030      	str	r0, [r6, #0]
 80351ea:	4620      	mov	r0, r4
 80351ec:	b003      	add	sp, #12
 80351ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80351f2:	6161      	str	r1, [r4, #20]
 80351f4:	e7ea      	b.n	80351cc <__d2b+0x58>
 80351f6:	a801      	add	r0, sp, #4
 80351f8:	f7ff fd03 	bl	8034c02 <__lo0bits>
 80351fc:	9b01      	ldr	r3, [sp, #4]
 80351fe:	6163      	str	r3, [r4, #20]
 8035200:	3020      	adds	r0, #32
 8035202:	2201      	movs	r2, #1
 8035204:	e7e8      	b.n	80351d8 <__d2b+0x64>
 8035206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803520a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803520e:	6038      	str	r0, [r7, #0]
 8035210:	6918      	ldr	r0, [r3, #16]
 8035212:	f7ff fcd7 	bl	8034bc4 <__hi0bits>
 8035216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803521a:	e7e5      	b.n	80351e8 <__d2b+0x74>
 803521c:	0803d7d6 	.word	0x0803d7d6
 8035220:	0803d8ca 	.word	0x0803d8ca

08035224 <__ratio>:
 8035224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035228:	b085      	sub	sp, #20
 803522a:	e9cd 1000 	strd	r1, r0, [sp]
 803522e:	a902      	add	r1, sp, #8
 8035230:	f7ff ff56 	bl	80350e0 <__b2d>
 8035234:	9800      	ldr	r0, [sp, #0]
 8035236:	a903      	add	r1, sp, #12
 8035238:	ec55 4b10 	vmov	r4, r5, d0
 803523c:	f7ff ff50 	bl	80350e0 <__b2d>
 8035240:	9b01      	ldr	r3, [sp, #4]
 8035242:	6919      	ldr	r1, [r3, #16]
 8035244:	9b00      	ldr	r3, [sp, #0]
 8035246:	691b      	ldr	r3, [r3, #16]
 8035248:	1ac9      	subs	r1, r1, r3
 803524a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803524e:	1a9b      	subs	r3, r3, r2
 8035250:	ec5b ab10 	vmov	sl, fp, d0
 8035254:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8035258:	2b00      	cmp	r3, #0
 803525a:	bfce      	itee	gt
 803525c:	462a      	movgt	r2, r5
 803525e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8035262:	465a      	movle	r2, fp
 8035264:	462f      	mov	r7, r5
 8035266:	46d9      	mov	r9, fp
 8035268:	bfcc      	ite	gt
 803526a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803526e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8035272:	464b      	mov	r3, r9
 8035274:	4652      	mov	r2, sl
 8035276:	4620      	mov	r0, r4
 8035278:	4639      	mov	r1, r7
 803527a:	f7db faff 	bl	801087c <__aeabi_ddiv>
 803527e:	ec41 0b10 	vmov	d0, r0, r1
 8035282:	b005      	add	sp, #20
 8035284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08035288 <__copybits>:
 8035288:	3901      	subs	r1, #1
 803528a:	b570      	push	{r4, r5, r6, lr}
 803528c:	1149      	asrs	r1, r1, #5
 803528e:	6914      	ldr	r4, [r2, #16]
 8035290:	3101      	adds	r1, #1
 8035292:	f102 0314 	add.w	r3, r2, #20
 8035296:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803529a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803529e:	1f05      	subs	r5, r0, #4
 80352a0:	42a3      	cmp	r3, r4
 80352a2:	d30c      	bcc.n	80352be <__copybits+0x36>
 80352a4:	1aa3      	subs	r3, r4, r2
 80352a6:	3b11      	subs	r3, #17
 80352a8:	f023 0303 	bic.w	r3, r3, #3
 80352ac:	3211      	adds	r2, #17
 80352ae:	42a2      	cmp	r2, r4
 80352b0:	bf88      	it	hi
 80352b2:	2300      	movhi	r3, #0
 80352b4:	4418      	add	r0, r3
 80352b6:	2300      	movs	r3, #0
 80352b8:	4288      	cmp	r0, r1
 80352ba:	d305      	bcc.n	80352c8 <__copybits+0x40>
 80352bc:	bd70      	pop	{r4, r5, r6, pc}
 80352be:	f853 6b04 	ldr.w	r6, [r3], #4
 80352c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80352c6:	e7eb      	b.n	80352a0 <__copybits+0x18>
 80352c8:	f840 3b04 	str.w	r3, [r0], #4
 80352cc:	e7f4      	b.n	80352b8 <__copybits+0x30>

080352ce <__any_on>:
 80352ce:	f100 0214 	add.w	r2, r0, #20
 80352d2:	6900      	ldr	r0, [r0, #16]
 80352d4:	114b      	asrs	r3, r1, #5
 80352d6:	4298      	cmp	r0, r3
 80352d8:	b510      	push	{r4, lr}
 80352da:	db11      	blt.n	8035300 <__any_on+0x32>
 80352dc:	dd0a      	ble.n	80352f4 <__any_on+0x26>
 80352de:	f011 011f 	ands.w	r1, r1, #31
 80352e2:	d007      	beq.n	80352f4 <__any_on+0x26>
 80352e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80352e8:	fa24 f001 	lsr.w	r0, r4, r1
 80352ec:	fa00 f101 	lsl.w	r1, r0, r1
 80352f0:	428c      	cmp	r4, r1
 80352f2:	d10b      	bne.n	803530c <__any_on+0x3e>
 80352f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80352f8:	4293      	cmp	r3, r2
 80352fa:	d803      	bhi.n	8035304 <__any_on+0x36>
 80352fc:	2000      	movs	r0, #0
 80352fe:	bd10      	pop	{r4, pc}
 8035300:	4603      	mov	r3, r0
 8035302:	e7f7      	b.n	80352f4 <__any_on+0x26>
 8035304:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8035308:	2900      	cmp	r1, #0
 803530a:	d0f5      	beq.n	80352f8 <__any_on+0x2a>
 803530c:	2001      	movs	r0, #1
 803530e:	e7f6      	b.n	80352fe <__any_on+0x30>

08035310 <realloc>:
 8035310:	4b02      	ldr	r3, [pc, #8]	@ (803531c <realloc+0xc>)
 8035312:	460a      	mov	r2, r1
 8035314:	4601      	mov	r1, r0
 8035316:	6818      	ldr	r0, [r3, #0]
 8035318:	f000 b890 	b.w	803543c <_realloc_r>
 803531c:	200002d8 	.word	0x200002d8

08035320 <_fclose_r>:
 8035320:	b570      	push	{r4, r5, r6, lr}
 8035322:	4605      	mov	r5, r0
 8035324:	460c      	mov	r4, r1
 8035326:	b1b1      	cbz	r1, 8035356 <_fclose_r+0x36>
 8035328:	b118      	cbz	r0, 8035332 <_fclose_r+0x12>
 803532a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803532c:	b90b      	cbnz	r3, 8035332 <_fclose_r+0x12>
 803532e:	f7f8 f849 	bl	802d3c4 <__sinit>
 8035332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035334:	07de      	lsls	r6, r3, #31
 8035336:	d405      	bmi.n	8035344 <_fclose_r+0x24>
 8035338:	89a3      	ldrh	r3, [r4, #12]
 803533a:	0598      	lsls	r0, r3, #22
 803533c:	d402      	bmi.n	8035344 <_fclose_r+0x24>
 803533e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035340:	f7fa f849 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 8035344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035348:	b943      	cbnz	r3, 803535c <_fclose_r+0x3c>
 803534a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803534c:	07d9      	lsls	r1, r3, #31
 803534e:	d402      	bmi.n	8035356 <_fclose_r+0x36>
 8035350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035352:	f7fa f842 	bl	802f3da <__retarget_lock_release_recursive>
 8035356:	2600      	movs	r6, #0
 8035358:	4630      	mov	r0, r6
 803535a:	bd70      	pop	{r4, r5, r6, pc}
 803535c:	4621      	mov	r1, r4
 803535e:	4628      	mov	r0, r5
 8035360:	f7f7 fe66 	bl	802d030 <__sflush_r>
 8035364:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8035366:	4606      	mov	r6, r0
 8035368:	b133      	cbz	r3, 8035378 <_fclose_r+0x58>
 803536a:	69e1      	ldr	r1, [r4, #28]
 803536c:	4628      	mov	r0, r5
 803536e:	4798      	blx	r3
 8035370:	2800      	cmp	r0, #0
 8035372:	bfb8      	it	lt
 8035374:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8035378:	89a3      	ldrh	r3, [r4, #12]
 803537a:	061a      	lsls	r2, r3, #24
 803537c:	d503      	bpl.n	8035386 <_fclose_r+0x66>
 803537e:	6921      	ldr	r1, [r4, #16]
 8035380:	4628      	mov	r0, r5
 8035382:	f7fa ff33 	bl	80301ec <_free_r>
 8035386:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8035388:	b141      	cbz	r1, 803539c <_fclose_r+0x7c>
 803538a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803538e:	4299      	cmp	r1, r3
 8035390:	d002      	beq.n	8035398 <_fclose_r+0x78>
 8035392:	4628      	mov	r0, r5
 8035394:	f7fa ff2a 	bl	80301ec <_free_r>
 8035398:	2300      	movs	r3, #0
 803539a:	6323      	str	r3, [r4, #48]	@ 0x30
 803539c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803539e:	b121      	cbz	r1, 80353aa <_fclose_r+0x8a>
 80353a0:	4628      	mov	r0, r5
 80353a2:	f7fa ff23 	bl	80301ec <_free_r>
 80353a6:	2300      	movs	r3, #0
 80353a8:	6463      	str	r3, [r4, #68]	@ 0x44
 80353aa:	f7f7 ffff 	bl	802d3ac <__sfp_lock_acquire>
 80353ae:	2300      	movs	r3, #0
 80353b0:	81a3      	strh	r3, [r4, #12]
 80353b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80353b4:	07db      	lsls	r3, r3, #31
 80353b6:	d402      	bmi.n	80353be <_fclose_r+0x9e>
 80353b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80353ba:	f7fa f80e 	bl	802f3da <__retarget_lock_release_recursive>
 80353be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80353c0:	f7fa f807 	bl	802f3d2 <__retarget_lock_close_recursive>
 80353c4:	f7f7 fff8 	bl	802d3b8 <__sfp_lock_release>
 80353c8:	e7c6      	b.n	8035358 <_fclose_r+0x38>

080353ca <__sccl>:
 80353ca:	b570      	push	{r4, r5, r6, lr}
 80353cc:	780b      	ldrb	r3, [r1, #0]
 80353ce:	4604      	mov	r4, r0
 80353d0:	2b5e      	cmp	r3, #94	@ 0x5e
 80353d2:	bf0b      	itete	eq
 80353d4:	784b      	ldrbeq	r3, [r1, #1]
 80353d6:	1c4a      	addne	r2, r1, #1
 80353d8:	1c8a      	addeq	r2, r1, #2
 80353da:	2100      	movne	r1, #0
 80353dc:	bf08      	it	eq
 80353de:	2101      	moveq	r1, #1
 80353e0:	3801      	subs	r0, #1
 80353e2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80353e6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80353ea:	42a8      	cmp	r0, r5
 80353ec:	d1fb      	bne.n	80353e6 <__sccl+0x1c>
 80353ee:	b90b      	cbnz	r3, 80353f4 <__sccl+0x2a>
 80353f0:	1e50      	subs	r0, r2, #1
 80353f2:	bd70      	pop	{r4, r5, r6, pc}
 80353f4:	f081 0101 	eor.w	r1, r1, #1
 80353f8:	54e1      	strb	r1, [r4, r3]
 80353fa:	4610      	mov	r0, r2
 80353fc:	4602      	mov	r2, r0
 80353fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8035402:	2d2d      	cmp	r5, #45	@ 0x2d
 8035404:	d005      	beq.n	8035412 <__sccl+0x48>
 8035406:	2d5d      	cmp	r5, #93	@ 0x5d
 8035408:	d016      	beq.n	8035438 <__sccl+0x6e>
 803540a:	2d00      	cmp	r5, #0
 803540c:	d0f1      	beq.n	80353f2 <__sccl+0x28>
 803540e:	462b      	mov	r3, r5
 8035410:	e7f2      	b.n	80353f8 <__sccl+0x2e>
 8035412:	7846      	ldrb	r6, [r0, #1]
 8035414:	2e5d      	cmp	r6, #93	@ 0x5d
 8035416:	d0fa      	beq.n	803540e <__sccl+0x44>
 8035418:	42b3      	cmp	r3, r6
 803541a:	dcf8      	bgt.n	803540e <__sccl+0x44>
 803541c:	3002      	adds	r0, #2
 803541e:	461a      	mov	r2, r3
 8035420:	3201      	adds	r2, #1
 8035422:	4296      	cmp	r6, r2
 8035424:	54a1      	strb	r1, [r4, r2]
 8035426:	dcfb      	bgt.n	8035420 <__sccl+0x56>
 8035428:	1af2      	subs	r2, r6, r3
 803542a:	3a01      	subs	r2, #1
 803542c:	1c5d      	adds	r5, r3, #1
 803542e:	42b3      	cmp	r3, r6
 8035430:	bfa8      	it	ge
 8035432:	2200      	movge	r2, #0
 8035434:	18ab      	adds	r3, r5, r2
 8035436:	e7e1      	b.n	80353fc <__sccl+0x32>
 8035438:	4610      	mov	r0, r2
 803543a:	e7da      	b.n	80353f2 <__sccl+0x28>

0803543c <_realloc_r>:
 803543c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035440:	4682      	mov	sl, r0
 8035442:	4693      	mov	fp, r2
 8035444:	460c      	mov	r4, r1
 8035446:	b929      	cbnz	r1, 8035454 <_realloc_r+0x18>
 8035448:	4611      	mov	r1, r2
 803544a:	b003      	add	sp, #12
 803544c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035450:	f7fa bfe4 	b.w	803041c <_malloc_r>
 8035454:	f7ff faec 	bl	8034a30 <__malloc_lock>
 8035458:	f10b 080b 	add.w	r8, fp, #11
 803545c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8035460:	f1b8 0f16 	cmp.w	r8, #22
 8035464:	f1a4 0908 	sub.w	r9, r4, #8
 8035468:	f025 0603 	bic.w	r6, r5, #3
 803546c:	d908      	bls.n	8035480 <_realloc_r+0x44>
 803546e:	f038 0807 	bics.w	r8, r8, #7
 8035472:	d507      	bpl.n	8035484 <_realloc_r+0x48>
 8035474:	230c      	movs	r3, #12
 8035476:	f8ca 3000 	str.w	r3, [sl]
 803547a:	f04f 0b00 	mov.w	fp, #0
 803547e:	e032      	b.n	80354e6 <_realloc_r+0xaa>
 8035480:	f04f 0810 	mov.w	r8, #16
 8035484:	45c3      	cmp	fp, r8
 8035486:	d8f5      	bhi.n	8035474 <_realloc_r+0x38>
 8035488:	4546      	cmp	r6, r8
 803548a:	f280 8174 	bge.w	8035776 <_realloc_r+0x33a>
 803548e:	4b9e      	ldr	r3, [pc, #632]	@ (8035708 <_realloc_r+0x2cc>)
 8035490:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8035494:	eb09 0106 	add.w	r1, r9, r6
 8035498:	458c      	cmp	ip, r1
 803549a:	6848      	ldr	r0, [r1, #4]
 803549c:	d005      	beq.n	80354aa <_realloc_r+0x6e>
 803549e:	f020 0201 	bic.w	r2, r0, #1
 80354a2:	440a      	add	r2, r1
 80354a4:	6852      	ldr	r2, [r2, #4]
 80354a6:	07d7      	lsls	r7, r2, #31
 80354a8:	d449      	bmi.n	803553e <_realloc_r+0x102>
 80354aa:	f020 0003 	bic.w	r0, r0, #3
 80354ae:	458c      	cmp	ip, r1
 80354b0:	eb06 0700 	add.w	r7, r6, r0
 80354b4:	d11b      	bne.n	80354ee <_realloc_r+0xb2>
 80354b6:	f108 0210 	add.w	r2, r8, #16
 80354ba:	42ba      	cmp	r2, r7
 80354bc:	dc41      	bgt.n	8035542 <_realloc_r+0x106>
 80354be:	eb09 0208 	add.w	r2, r9, r8
 80354c2:	eba7 0708 	sub.w	r7, r7, r8
 80354c6:	f047 0701 	orr.w	r7, r7, #1
 80354ca:	609a      	str	r2, [r3, #8]
 80354cc:	6057      	str	r7, [r2, #4]
 80354ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80354d2:	f003 0301 	and.w	r3, r3, #1
 80354d6:	ea43 0308 	orr.w	r3, r3, r8
 80354da:	f844 3c04 	str.w	r3, [r4, #-4]
 80354de:	4650      	mov	r0, sl
 80354e0:	f7ff faac 	bl	8034a3c <__malloc_unlock>
 80354e4:	46a3      	mov	fp, r4
 80354e6:	4658      	mov	r0, fp
 80354e8:	b003      	add	sp, #12
 80354ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80354ee:	45b8      	cmp	r8, r7
 80354f0:	dc27      	bgt.n	8035542 <_realloc_r+0x106>
 80354f2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80354f6:	60d3      	str	r3, [r2, #12]
 80354f8:	609a      	str	r2, [r3, #8]
 80354fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80354fe:	eba7 0008 	sub.w	r0, r7, r8
 8035502:	280f      	cmp	r0, #15
 8035504:	f003 0301 	and.w	r3, r3, #1
 8035508:	eb09 0207 	add.w	r2, r9, r7
 803550c:	f240 8135 	bls.w	803577a <_realloc_r+0x33e>
 8035510:	eb09 0108 	add.w	r1, r9, r8
 8035514:	ea48 0303 	orr.w	r3, r8, r3
 8035518:	f040 0001 	orr.w	r0, r0, #1
 803551c:	f8c9 3004 	str.w	r3, [r9, #4]
 8035520:	6048      	str	r0, [r1, #4]
 8035522:	6853      	ldr	r3, [r2, #4]
 8035524:	f043 0301 	orr.w	r3, r3, #1
 8035528:	6053      	str	r3, [r2, #4]
 803552a:	3108      	adds	r1, #8
 803552c:	4650      	mov	r0, sl
 803552e:	f7fa fe5d 	bl	80301ec <_free_r>
 8035532:	4650      	mov	r0, sl
 8035534:	f7ff fa82 	bl	8034a3c <__malloc_unlock>
 8035538:	f109 0b08 	add.w	fp, r9, #8
 803553c:	e7d3      	b.n	80354e6 <_realloc_r+0xaa>
 803553e:	2000      	movs	r0, #0
 8035540:	4601      	mov	r1, r0
 8035542:	07ea      	lsls	r2, r5, #31
 8035544:	f100 80c7 	bmi.w	80356d6 <_realloc_r+0x29a>
 8035548:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803554c:	eba9 0505 	sub.w	r5, r9, r5
 8035550:	686a      	ldr	r2, [r5, #4]
 8035552:	f022 0203 	bic.w	r2, r2, #3
 8035556:	4432      	add	r2, r6
 8035558:	9201      	str	r2, [sp, #4]
 803555a:	2900      	cmp	r1, #0
 803555c:	f000 8086 	beq.w	803566c <_realloc_r+0x230>
 8035560:	458c      	cmp	ip, r1
 8035562:	eb00 0702 	add.w	r7, r0, r2
 8035566:	d149      	bne.n	80355fc <_realloc_r+0x1c0>
 8035568:	f108 0210 	add.w	r2, r8, #16
 803556c:	42ba      	cmp	r2, r7
 803556e:	dc7d      	bgt.n	803566c <_realloc_r+0x230>
 8035570:	46ab      	mov	fp, r5
 8035572:	68ea      	ldr	r2, [r5, #12]
 8035574:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8035578:	60ca      	str	r2, [r1, #12]
 803557a:	6091      	str	r1, [r2, #8]
 803557c:	1f32      	subs	r2, r6, #4
 803557e:	2a24      	cmp	r2, #36	@ 0x24
 8035580:	d836      	bhi.n	80355f0 <_realloc_r+0x1b4>
 8035582:	2a13      	cmp	r2, #19
 8035584:	d932      	bls.n	80355ec <_realloc_r+0x1b0>
 8035586:	6821      	ldr	r1, [r4, #0]
 8035588:	60a9      	str	r1, [r5, #8]
 803558a:	6861      	ldr	r1, [r4, #4]
 803558c:	60e9      	str	r1, [r5, #12]
 803558e:	2a1b      	cmp	r2, #27
 8035590:	d81a      	bhi.n	80355c8 <_realloc_r+0x18c>
 8035592:	3408      	adds	r4, #8
 8035594:	f105 0210 	add.w	r2, r5, #16
 8035598:	6821      	ldr	r1, [r4, #0]
 803559a:	6011      	str	r1, [r2, #0]
 803559c:	6861      	ldr	r1, [r4, #4]
 803559e:	6051      	str	r1, [r2, #4]
 80355a0:	68a1      	ldr	r1, [r4, #8]
 80355a2:	6091      	str	r1, [r2, #8]
 80355a4:	eb05 0208 	add.w	r2, r5, r8
 80355a8:	eba7 0708 	sub.w	r7, r7, r8
 80355ac:	f047 0701 	orr.w	r7, r7, #1
 80355b0:	609a      	str	r2, [r3, #8]
 80355b2:	6057      	str	r7, [r2, #4]
 80355b4:	686b      	ldr	r3, [r5, #4]
 80355b6:	f003 0301 	and.w	r3, r3, #1
 80355ba:	ea43 0308 	orr.w	r3, r3, r8
 80355be:	606b      	str	r3, [r5, #4]
 80355c0:	4650      	mov	r0, sl
 80355c2:	f7ff fa3b 	bl	8034a3c <__malloc_unlock>
 80355c6:	e78e      	b.n	80354e6 <_realloc_r+0xaa>
 80355c8:	68a1      	ldr	r1, [r4, #8]
 80355ca:	6129      	str	r1, [r5, #16]
 80355cc:	68e1      	ldr	r1, [r4, #12]
 80355ce:	6169      	str	r1, [r5, #20]
 80355d0:	2a24      	cmp	r2, #36	@ 0x24
 80355d2:	bf01      	itttt	eq
 80355d4:	6922      	ldreq	r2, [r4, #16]
 80355d6:	61aa      	streq	r2, [r5, #24]
 80355d8:	6961      	ldreq	r1, [r4, #20]
 80355da:	61e9      	streq	r1, [r5, #28]
 80355dc:	bf19      	ittee	ne
 80355de:	3410      	addne	r4, #16
 80355e0:	f105 0218 	addne.w	r2, r5, #24
 80355e4:	f105 0220 	addeq.w	r2, r5, #32
 80355e8:	3418      	addeq	r4, #24
 80355ea:	e7d5      	b.n	8035598 <_realloc_r+0x15c>
 80355ec:	465a      	mov	r2, fp
 80355ee:	e7d3      	b.n	8035598 <_realloc_r+0x15c>
 80355f0:	4621      	mov	r1, r4
 80355f2:	4658      	mov	r0, fp
 80355f4:	f7f8 f972 	bl	802d8dc <memmove>
 80355f8:	4b43      	ldr	r3, [pc, #268]	@ (8035708 <_realloc_r+0x2cc>)
 80355fa:	e7d3      	b.n	80355a4 <_realloc_r+0x168>
 80355fc:	45b8      	cmp	r8, r7
 80355fe:	dc35      	bgt.n	803566c <_realloc_r+0x230>
 8035600:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8035604:	4628      	mov	r0, r5
 8035606:	60d3      	str	r3, [r2, #12]
 8035608:	609a      	str	r2, [r3, #8]
 803560a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803560e:	68eb      	ldr	r3, [r5, #12]
 8035610:	60d3      	str	r3, [r2, #12]
 8035612:	609a      	str	r2, [r3, #8]
 8035614:	1f32      	subs	r2, r6, #4
 8035616:	2a24      	cmp	r2, #36	@ 0x24
 8035618:	d824      	bhi.n	8035664 <_realloc_r+0x228>
 803561a:	2a13      	cmp	r2, #19
 803561c:	d908      	bls.n	8035630 <_realloc_r+0x1f4>
 803561e:	6823      	ldr	r3, [r4, #0]
 8035620:	60ab      	str	r3, [r5, #8]
 8035622:	6863      	ldr	r3, [r4, #4]
 8035624:	60eb      	str	r3, [r5, #12]
 8035626:	2a1b      	cmp	r2, #27
 8035628:	d80a      	bhi.n	8035640 <_realloc_r+0x204>
 803562a:	3408      	adds	r4, #8
 803562c:	f105 0010 	add.w	r0, r5, #16
 8035630:	6823      	ldr	r3, [r4, #0]
 8035632:	6003      	str	r3, [r0, #0]
 8035634:	6863      	ldr	r3, [r4, #4]
 8035636:	6043      	str	r3, [r0, #4]
 8035638:	68a3      	ldr	r3, [r4, #8]
 803563a:	6083      	str	r3, [r0, #8]
 803563c:	46a9      	mov	r9, r5
 803563e:	e75c      	b.n	80354fa <_realloc_r+0xbe>
 8035640:	68a3      	ldr	r3, [r4, #8]
 8035642:	612b      	str	r3, [r5, #16]
 8035644:	68e3      	ldr	r3, [r4, #12]
 8035646:	616b      	str	r3, [r5, #20]
 8035648:	2a24      	cmp	r2, #36	@ 0x24
 803564a:	bf01      	itttt	eq
 803564c:	6923      	ldreq	r3, [r4, #16]
 803564e:	61ab      	streq	r3, [r5, #24]
 8035650:	6963      	ldreq	r3, [r4, #20]
 8035652:	61eb      	streq	r3, [r5, #28]
 8035654:	bf19      	ittee	ne
 8035656:	3410      	addne	r4, #16
 8035658:	f105 0018 	addne.w	r0, r5, #24
 803565c:	f105 0020 	addeq.w	r0, r5, #32
 8035660:	3418      	addeq	r4, #24
 8035662:	e7e5      	b.n	8035630 <_realloc_r+0x1f4>
 8035664:	4621      	mov	r1, r4
 8035666:	f7f8 f939 	bl	802d8dc <memmove>
 803566a:	e7e7      	b.n	803563c <_realloc_r+0x200>
 803566c:	9b01      	ldr	r3, [sp, #4]
 803566e:	4598      	cmp	r8, r3
 8035670:	dc31      	bgt.n	80356d6 <_realloc_r+0x29a>
 8035672:	4628      	mov	r0, r5
 8035674:	68eb      	ldr	r3, [r5, #12]
 8035676:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803567a:	60d3      	str	r3, [r2, #12]
 803567c:	609a      	str	r2, [r3, #8]
 803567e:	1f32      	subs	r2, r6, #4
 8035680:	2a24      	cmp	r2, #36	@ 0x24
 8035682:	d824      	bhi.n	80356ce <_realloc_r+0x292>
 8035684:	2a13      	cmp	r2, #19
 8035686:	d908      	bls.n	803569a <_realloc_r+0x25e>
 8035688:	6823      	ldr	r3, [r4, #0]
 803568a:	60ab      	str	r3, [r5, #8]
 803568c:	6863      	ldr	r3, [r4, #4]
 803568e:	60eb      	str	r3, [r5, #12]
 8035690:	2a1b      	cmp	r2, #27
 8035692:	d80a      	bhi.n	80356aa <_realloc_r+0x26e>
 8035694:	3408      	adds	r4, #8
 8035696:	f105 0010 	add.w	r0, r5, #16
 803569a:	6823      	ldr	r3, [r4, #0]
 803569c:	6003      	str	r3, [r0, #0]
 803569e:	6863      	ldr	r3, [r4, #4]
 80356a0:	6043      	str	r3, [r0, #4]
 80356a2:	68a3      	ldr	r3, [r4, #8]
 80356a4:	6083      	str	r3, [r0, #8]
 80356a6:	9f01      	ldr	r7, [sp, #4]
 80356a8:	e7c8      	b.n	803563c <_realloc_r+0x200>
 80356aa:	68a3      	ldr	r3, [r4, #8]
 80356ac:	612b      	str	r3, [r5, #16]
 80356ae:	68e3      	ldr	r3, [r4, #12]
 80356b0:	616b      	str	r3, [r5, #20]
 80356b2:	2a24      	cmp	r2, #36	@ 0x24
 80356b4:	bf01      	itttt	eq
 80356b6:	6923      	ldreq	r3, [r4, #16]
 80356b8:	61ab      	streq	r3, [r5, #24]
 80356ba:	6963      	ldreq	r3, [r4, #20]
 80356bc:	61eb      	streq	r3, [r5, #28]
 80356be:	bf19      	ittee	ne
 80356c0:	3410      	addne	r4, #16
 80356c2:	f105 0018 	addne.w	r0, r5, #24
 80356c6:	f105 0020 	addeq.w	r0, r5, #32
 80356ca:	3418      	addeq	r4, #24
 80356cc:	e7e5      	b.n	803569a <_realloc_r+0x25e>
 80356ce:	4621      	mov	r1, r4
 80356d0:	f7f8 f904 	bl	802d8dc <memmove>
 80356d4:	e7e7      	b.n	80356a6 <_realloc_r+0x26a>
 80356d6:	4659      	mov	r1, fp
 80356d8:	4650      	mov	r0, sl
 80356da:	f7fa fe9f 	bl	803041c <_malloc_r>
 80356de:	4683      	mov	fp, r0
 80356e0:	b918      	cbnz	r0, 80356ea <_realloc_r+0x2ae>
 80356e2:	4650      	mov	r0, sl
 80356e4:	f7ff f9aa 	bl	8034a3c <__malloc_unlock>
 80356e8:	e6c7      	b.n	803547a <_realloc_r+0x3e>
 80356ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80356ee:	f023 0301 	bic.w	r3, r3, #1
 80356f2:	444b      	add	r3, r9
 80356f4:	f1a0 0208 	sub.w	r2, r0, #8
 80356f8:	4293      	cmp	r3, r2
 80356fa:	d107      	bne.n	803570c <_realloc_r+0x2d0>
 80356fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8035700:	f027 0703 	bic.w	r7, r7, #3
 8035704:	4437      	add	r7, r6
 8035706:	e6f8      	b.n	80354fa <_realloc_r+0xbe>
 8035708:	2000040c 	.word	0x2000040c
 803570c:	1f32      	subs	r2, r6, #4
 803570e:	2a24      	cmp	r2, #36	@ 0x24
 8035710:	d82d      	bhi.n	803576e <_realloc_r+0x332>
 8035712:	2a13      	cmp	r2, #19
 8035714:	d928      	bls.n	8035768 <_realloc_r+0x32c>
 8035716:	6823      	ldr	r3, [r4, #0]
 8035718:	6003      	str	r3, [r0, #0]
 803571a:	6863      	ldr	r3, [r4, #4]
 803571c:	6043      	str	r3, [r0, #4]
 803571e:	2a1b      	cmp	r2, #27
 8035720:	d80e      	bhi.n	8035740 <_realloc_r+0x304>
 8035722:	f104 0208 	add.w	r2, r4, #8
 8035726:	f100 0308 	add.w	r3, r0, #8
 803572a:	6811      	ldr	r1, [r2, #0]
 803572c:	6019      	str	r1, [r3, #0]
 803572e:	6851      	ldr	r1, [r2, #4]
 8035730:	6059      	str	r1, [r3, #4]
 8035732:	6892      	ldr	r2, [r2, #8]
 8035734:	609a      	str	r2, [r3, #8]
 8035736:	4621      	mov	r1, r4
 8035738:	4650      	mov	r0, sl
 803573a:	f7fa fd57 	bl	80301ec <_free_r>
 803573e:	e73f      	b.n	80355c0 <_realloc_r+0x184>
 8035740:	68a3      	ldr	r3, [r4, #8]
 8035742:	6083      	str	r3, [r0, #8]
 8035744:	68e3      	ldr	r3, [r4, #12]
 8035746:	60c3      	str	r3, [r0, #12]
 8035748:	2a24      	cmp	r2, #36	@ 0x24
 803574a:	bf01      	itttt	eq
 803574c:	6923      	ldreq	r3, [r4, #16]
 803574e:	6103      	streq	r3, [r0, #16]
 8035750:	6961      	ldreq	r1, [r4, #20]
 8035752:	6141      	streq	r1, [r0, #20]
 8035754:	bf19      	ittee	ne
 8035756:	f104 0210 	addne.w	r2, r4, #16
 803575a:	f100 0310 	addne.w	r3, r0, #16
 803575e:	f104 0218 	addeq.w	r2, r4, #24
 8035762:	f100 0318 	addeq.w	r3, r0, #24
 8035766:	e7e0      	b.n	803572a <_realloc_r+0x2ee>
 8035768:	4603      	mov	r3, r0
 803576a:	4622      	mov	r2, r4
 803576c:	e7dd      	b.n	803572a <_realloc_r+0x2ee>
 803576e:	4621      	mov	r1, r4
 8035770:	f7f8 f8b4 	bl	802d8dc <memmove>
 8035774:	e7df      	b.n	8035736 <_realloc_r+0x2fa>
 8035776:	4637      	mov	r7, r6
 8035778:	e6bf      	b.n	80354fa <_realloc_r+0xbe>
 803577a:	431f      	orrs	r7, r3
 803577c:	f8c9 7004 	str.w	r7, [r9, #4]
 8035780:	6853      	ldr	r3, [r2, #4]
 8035782:	f043 0301 	orr.w	r3, r3, #1
 8035786:	6053      	str	r3, [r2, #4]
 8035788:	e6d3      	b.n	8035532 <_realloc_r+0xf6>
 803578a:	bf00      	nop

0803578c <sulp>:
 803578c:	b570      	push	{r4, r5, r6, lr}
 803578e:	4604      	mov	r4, r0
 8035790:	460d      	mov	r5, r1
 8035792:	ec45 4b10 	vmov	d0, r4, r5
 8035796:	4616      	mov	r6, r2
 8035798:	f7ff fc7c 	bl	8035094 <__ulp>
 803579c:	ec51 0b10 	vmov	r0, r1, d0
 80357a0:	b17e      	cbz	r6, 80357c2 <sulp+0x36>
 80357a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80357a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80357aa:	2b00      	cmp	r3, #0
 80357ac:	dd09      	ble.n	80357c2 <sulp+0x36>
 80357ae:	051b      	lsls	r3, r3, #20
 80357b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80357b4:	2400      	movs	r4, #0
 80357b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80357ba:	4622      	mov	r2, r4
 80357bc:	462b      	mov	r3, r5
 80357be:	f7da ff33 	bl	8010628 <__aeabi_dmul>
 80357c2:	ec41 0b10 	vmov	d0, r0, r1
 80357c6:	bd70      	pop	{r4, r5, r6, pc}

080357c8 <_strtod_l>:
 80357c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80357cc:	b09f      	sub	sp, #124	@ 0x7c
 80357ce:	460c      	mov	r4, r1
 80357d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80357d2:	2200      	movs	r2, #0
 80357d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80357d6:	9005      	str	r0, [sp, #20]
 80357d8:	f04f 0a00 	mov.w	sl, #0
 80357dc:	f04f 0b00 	mov.w	fp, #0
 80357e0:	460a      	mov	r2, r1
 80357e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80357e4:	7811      	ldrb	r1, [r2, #0]
 80357e6:	292b      	cmp	r1, #43	@ 0x2b
 80357e8:	d04a      	beq.n	8035880 <_strtod_l+0xb8>
 80357ea:	d838      	bhi.n	803585e <_strtod_l+0x96>
 80357ec:	290d      	cmp	r1, #13
 80357ee:	d832      	bhi.n	8035856 <_strtod_l+0x8e>
 80357f0:	2908      	cmp	r1, #8
 80357f2:	d832      	bhi.n	803585a <_strtod_l+0x92>
 80357f4:	2900      	cmp	r1, #0
 80357f6:	d03b      	beq.n	8035870 <_strtod_l+0xa8>
 80357f8:	2200      	movs	r2, #0
 80357fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80357fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80357fe:	782a      	ldrb	r2, [r5, #0]
 8035800:	2a30      	cmp	r2, #48	@ 0x30
 8035802:	f040 80b3 	bne.w	803596c <_strtod_l+0x1a4>
 8035806:	786a      	ldrb	r2, [r5, #1]
 8035808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803580c:	2a58      	cmp	r2, #88	@ 0x58
 803580e:	d16e      	bne.n	80358ee <_strtod_l+0x126>
 8035810:	9302      	str	r3, [sp, #8]
 8035812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035814:	9301      	str	r3, [sp, #4]
 8035816:	ab1a      	add	r3, sp, #104	@ 0x68
 8035818:	9300      	str	r3, [sp, #0]
 803581a:	4a8e      	ldr	r2, [pc, #568]	@ (8035a54 <_strtod_l+0x28c>)
 803581c:	9805      	ldr	r0, [sp, #20]
 803581e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8035820:	a919      	add	r1, sp, #100	@ 0x64
 8035822:	f001 f9a9 	bl	8036b78 <__gethex>
 8035826:	f010 060f 	ands.w	r6, r0, #15
 803582a:	4604      	mov	r4, r0
 803582c:	d005      	beq.n	803583a <_strtod_l+0x72>
 803582e:	2e06      	cmp	r6, #6
 8035830:	d128      	bne.n	8035884 <_strtod_l+0xbc>
 8035832:	3501      	adds	r5, #1
 8035834:	2300      	movs	r3, #0
 8035836:	9519      	str	r5, [sp, #100]	@ 0x64
 8035838:	930b      	str	r3, [sp, #44]	@ 0x2c
 803583a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803583c:	2b00      	cmp	r3, #0
 803583e:	f040 858e 	bne.w	803635e <_strtod_l+0xb96>
 8035842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035844:	b1cb      	cbz	r3, 803587a <_strtod_l+0xb2>
 8035846:	4652      	mov	r2, sl
 8035848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803584c:	ec43 2b10 	vmov	d0, r2, r3
 8035850:	b01f      	add	sp, #124	@ 0x7c
 8035852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035856:	2920      	cmp	r1, #32
 8035858:	d1ce      	bne.n	80357f8 <_strtod_l+0x30>
 803585a:	3201      	adds	r2, #1
 803585c:	e7c1      	b.n	80357e2 <_strtod_l+0x1a>
 803585e:	292d      	cmp	r1, #45	@ 0x2d
 8035860:	d1ca      	bne.n	80357f8 <_strtod_l+0x30>
 8035862:	2101      	movs	r1, #1
 8035864:	910b      	str	r1, [sp, #44]	@ 0x2c
 8035866:	1c51      	adds	r1, r2, #1
 8035868:	9119      	str	r1, [sp, #100]	@ 0x64
 803586a:	7852      	ldrb	r2, [r2, #1]
 803586c:	2a00      	cmp	r2, #0
 803586e:	d1c5      	bne.n	80357fc <_strtod_l+0x34>
 8035870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8035872:	9419      	str	r4, [sp, #100]	@ 0x64
 8035874:	2b00      	cmp	r3, #0
 8035876:	f040 8570 	bne.w	803635a <_strtod_l+0xb92>
 803587a:	4652      	mov	r2, sl
 803587c:	465b      	mov	r3, fp
 803587e:	e7e5      	b.n	803584c <_strtod_l+0x84>
 8035880:	2100      	movs	r1, #0
 8035882:	e7ef      	b.n	8035864 <_strtod_l+0x9c>
 8035884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8035886:	b13a      	cbz	r2, 8035898 <_strtod_l+0xd0>
 8035888:	2135      	movs	r1, #53	@ 0x35
 803588a:	a81c      	add	r0, sp, #112	@ 0x70
 803588c:	f7ff fcfc 	bl	8035288 <__copybits>
 8035890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035892:	9805      	ldr	r0, [sp, #20]
 8035894:	f7ff f8fd 	bl	8034a92 <_Bfree>
 8035898:	3e01      	subs	r6, #1
 803589a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803589c:	2e04      	cmp	r6, #4
 803589e:	d806      	bhi.n	80358ae <_strtod_l+0xe6>
 80358a0:	e8df f006 	tbb	[pc, r6]
 80358a4:	201d0314 	.word	0x201d0314
 80358a8:	14          	.byte	0x14
 80358a9:	00          	.byte	0x00
 80358aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80358ae:	05e1      	lsls	r1, r4, #23
 80358b0:	bf48      	it	mi
 80358b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80358b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80358ba:	0d1b      	lsrs	r3, r3, #20
 80358bc:	051b      	lsls	r3, r3, #20
 80358be:	2b00      	cmp	r3, #0
 80358c0:	d1bb      	bne.n	803583a <_strtod_l+0x72>
 80358c2:	f7f9 fd53 	bl	802f36c <__errno>
 80358c6:	2322      	movs	r3, #34	@ 0x22
 80358c8:	6003      	str	r3, [r0, #0]
 80358ca:	e7b6      	b.n	803583a <_strtod_l+0x72>
 80358cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80358d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80358d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80358d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80358dc:	e7e7      	b.n	80358ae <_strtod_l+0xe6>
 80358de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8035a5c <_strtod_l+0x294>
 80358e2:	e7e4      	b.n	80358ae <_strtod_l+0xe6>
 80358e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80358e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80358ec:	e7df      	b.n	80358ae <_strtod_l+0xe6>
 80358ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80358f0:	1c5a      	adds	r2, r3, #1
 80358f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80358f4:	785b      	ldrb	r3, [r3, #1]
 80358f6:	2b30      	cmp	r3, #48	@ 0x30
 80358f8:	d0f9      	beq.n	80358ee <_strtod_l+0x126>
 80358fa:	2b00      	cmp	r3, #0
 80358fc:	d09d      	beq.n	803583a <_strtod_l+0x72>
 80358fe:	2301      	movs	r3, #1
 8035900:	9309      	str	r3, [sp, #36]	@ 0x24
 8035902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035904:	930c      	str	r3, [sp, #48]	@ 0x30
 8035906:	2300      	movs	r3, #0
 8035908:	9308      	str	r3, [sp, #32]
 803590a:	930a      	str	r3, [sp, #40]	@ 0x28
 803590c:	461f      	mov	r7, r3
 803590e:	220a      	movs	r2, #10
 8035910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8035912:	7805      	ldrb	r5, [r0, #0]
 8035914:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8035918:	b2d9      	uxtb	r1, r3
 803591a:	2909      	cmp	r1, #9
 803591c:	d928      	bls.n	8035970 <_strtod_l+0x1a8>
 803591e:	494e      	ldr	r1, [pc, #312]	@ (8035a58 <_strtod_l+0x290>)
 8035920:	2201      	movs	r2, #1
 8035922:	f7f8 f82a 	bl	802d97a <strncmp>
 8035926:	2800      	cmp	r0, #0
 8035928:	d032      	beq.n	8035990 <_strtod_l+0x1c8>
 803592a:	2000      	movs	r0, #0
 803592c:	462a      	mov	r2, r5
 803592e:	4681      	mov	r9, r0
 8035930:	463d      	mov	r5, r7
 8035932:	4603      	mov	r3, r0
 8035934:	2a65      	cmp	r2, #101	@ 0x65
 8035936:	d001      	beq.n	803593c <_strtod_l+0x174>
 8035938:	2a45      	cmp	r2, #69	@ 0x45
 803593a:	d114      	bne.n	8035966 <_strtod_l+0x19e>
 803593c:	b91d      	cbnz	r5, 8035946 <_strtod_l+0x17e>
 803593e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035940:	4302      	orrs	r2, r0
 8035942:	d095      	beq.n	8035870 <_strtod_l+0xa8>
 8035944:	2500      	movs	r5, #0
 8035946:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8035948:	1c62      	adds	r2, r4, #1
 803594a:	9219      	str	r2, [sp, #100]	@ 0x64
 803594c:	7862      	ldrb	r2, [r4, #1]
 803594e:	2a2b      	cmp	r2, #43	@ 0x2b
 8035950:	d077      	beq.n	8035a42 <_strtod_l+0x27a>
 8035952:	2a2d      	cmp	r2, #45	@ 0x2d
 8035954:	d07b      	beq.n	8035a4e <_strtod_l+0x286>
 8035956:	f04f 0c00 	mov.w	ip, #0
 803595a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803595e:	2909      	cmp	r1, #9
 8035960:	f240 8082 	bls.w	8035a68 <_strtod_l+0x2a0>
 8035964:	9419      	str	r4, [sp, #100]	@ 0x64
 8035966:	f04f 0800 	mov.w	r8, #0
 803596a:	e0a2      	b.n	8035ab2 <_strtod_l+0x2ea>
 803596c:	2300      	movs	r3, #0
 803596e:	e7c7      	b.n	8035900 <_strtod_l+0x138>
 8035970:	2f08      	cmp	r7, #8
 8035972:	bfd5      	itete	le
 8035974:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8035976:	9908      	ldrgt	r1, [sp, #32]
 8035978:	fb02 3301 	mlale	r3, r2, r1, r3
 803597c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8035980:	f100 0001 	add.w	r0, r0, #1
 8035984:	bfd4      	ite	le
 8035986:	930a      	strle	r3, [sp, #40]	@ 0x28
 8035988:	9308      	strgt	r3, [sp, #32]
 803598a:	3701      	adds	r7, #1
 803598c:	9019      	str	r0, [sp, #100]	@ 0x64
 803598e:	e7bf      	b.n	8035910 <_strtod_l+0x148>
 8035990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035992:	1c5a      	adds	r2, r3, #1
 8035994:	9219      	str	r2, [sp, #100]	@ 0x64
 8035996:	785a      	ldrb	r2, [r3, #1]
 8035998:	b37f      	cbz	r7, 80359fa <_strtod_l+0x232>
 803599a:	4681      	mov	r9, r0
 803599c:	463d      	mov	r5, r7
 803599e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80359a2:	2b09      	cmp	r3, #9
 80359a4:	d912      	bls.n	80359cc <_strtod_l+0x204>
 80359a6:	2301      	movs	r3, #1
 80359a8:	e7c4      	b.n	8035934 <_strtod_l+0x16c>
 80359aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80359ac:	1c5a      	adds	r2, r3, #1
 80359ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80359b0:	785a      	ldrb	r2, [r3, #1]
 80359b2:	3001      	adds	r0, #1
 80359b4:	2a30      	cmp	r2, #48	@ 0x30
 80359b6:	d0f8      	beq.n	80359aa <_strtod_l+0x1e2>
 80359b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80359bc:	2b08      	cmp	r3, #8
 80359be:	f200 84d3 	bhi.w	8036368 <_strtod_l+0xba0>
 80359c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80359c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80359c6:	4681      	mov	r9, r0
 80359c8:	2000      	movs	r0, #0
 80359ca:	4605      	mov	r5, r0
 80359cc:	3a30      	subs	r2, #48	@ 0x30
 80359ce:	f100 0301 	add.w	r3, r0, #1
 80359d2:	d02a      	beq.n	8035a2a <_strtod_l+0x262>
 80359d4:	4499      	add	r9, r3
 80359d6:	eb00 0c05 	add.w	ip, r0, r5
 80359da:	462b      	mov	r3, r5
 80359dc:	210a      	movs	r1, #10
 80359de:	4563      	cmp	r3, ip
 80359e0:	d10d      	bne.n	80359fe <_strtod_l+0x236>
 80359e2:	1c69      	adds	r1, r5, #1
 80359e4:	4401      	add	r1, r0
 80359e6:	4428      	add	r0, r5
 80359e8:	2808      	cmp	r0, #8
 80359ea:	dc16      	bgt.n	8035a1a <_strtod_l+0x252>
 80359ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80359ee:	230a      	movs	r3, #10
 80359f0:	fb03 2300 	mla	r3, r3, r0, r2
 80359f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80359f6:	2300      	movs	r3, #0
 80359f8:	e018      	b.n	8035a2c <_strtod_l+0x264>
 80359fa:	4638      	mov	r0, r7
 80359fc:	e7da      	b.n	80359b4 <_strtod_l+0x1ec>
 80359fe:	2b08      	cmp	r3, #8
 8035a00:	f103 0301 	add.w	r3, r3, #1
 8035a04:	dc03      	bgt.n	8035a0e <_strtod_l+0x246>
 8035a06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8035a08:	434e      	muls	r6, r1
 8035a0a:	960a      	str	r6, [sp, #40]	@ 0x28
 8035a0c:	e7e7      	b.n	80359de <_strtod_l+0x216>
 8035a0e:	2b10      	cmp	r3, #16
 8035a10:	bfde      	ittt	le
 8035a12:	9e08      	ldrle	r6, [sp, #32]
 8035a14:	434e      	mulle	r6, r1
 8035a16:	9608      	strle	r6, [sp, #32]
 8035a18:	e7e1      	b.n	80359de <_strtod_l+0x216>
 8035a1a:	280f      	cmp	r0, #15
 8035a1c:	dceb      	bgt.n	80359f6 <_strtod_l+0x22e>
 8035a1e:	9808      	ldr	r0, [sp, #32]
 8035a20:	230a      	movs	r3, #10
 8035a22:	fb03 2300 	mla	r3, r3, r0, r2
 8035a26:	9308      	str	r3, [sp, #32]
 8035a28:	e7e5      	b.n	80359f6 <_strtod_l+0x22e>
 8035a2a:	4629      	mov	r1, r5
 8035a2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8035a2e:	1c50      	adds	r0, r2, #1
 8035a30:	9019      	str	r0, [sp, #100]	@ 0x64
 8035a32:	7852      	ldrb	r2, [r2, #1]
 8035a34:	4618      	mov	r0, r3
 8035a36:	460d      	mov	r5, r1
 8035a38:	e7b1      	b.n	803599e <_strtod_l+0x1d6>
 8035a3a:	f04f 0900 	mov.w	r9, #0
 8035a3e:	2301      	movs	r3, #1
 8035a40:	e77d      	b.n	803593e <_strtod_l+0x176>
 8035a42:	f04f 0c00 	mov.w	ip, #0
 8035a46:	1ca2      	adds	r2, r4, #2
 8035a48:	9219      	str	r2, [sp, #100]	@ 0x64
 8035a4a:	78a2      	ldrb	r2, [r4, #2]
 8035a4c:	e785      	b.n	803595a <_strtod_l+0x192>
 8035a4e:	f04f 0c01 	mov.w	ip, #1
 8035a52:	e7f8      	b.n	8035a46 <_strtod_l+0x27e>
 8035a54:	0803da34 	.word	0x0803da34
 8035a58:	0803d49e 	.word	0x0803d49e
 8035a5c:	7ff00000 	.word	0x7ff00000
 8035a60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8035a62:	1c51      	adds	r1, r2, #1
 8035a64:	9119      	str	r1, [sp, #100]	@ 0x64
 8035a66:	7852      	ldrb	r2, [r2, #1]
 8035a68:	2a30      	cmp	r2, #48	@ 0x30
 8035a6a:	d0f9      	beq.n	8035a60 <_strtod_l+0x298>
 8035a6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8035a70:	2908      	cmp	r1, #8
 8035a72:	f63f af78 	bhi.w	8035966 <_strtod_l+0x19e>
 8035a76:	3a30      	subs	r2, #48	@ 0x30
 8035a78:	920e      	str	r2, [sp, #56]	@ 0x38
 8035a7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8035a7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8035a7e:	f04f 080a 	mov.w	r8, #10
 8035a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8035a84:	1c56      	adds	r6, r2, #1
 8035a86:	9619      	str	r6, [sp, #100]	@ 0x64
 8035a88:	7852      	ldrb	r2, [r2, #1]
 8035a8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8035a8e:	f1be 0f09 	cmp.w	lr, #9
 8035a92:	d939      	bls.n	8035b08 <_strtod_l+0x340>
 8035a94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8035a96:	1a76      	subs	r6, r6, r1
 8035a98:	2e08      	cmp	r6, #8
 8035a9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8035a9e:	dc03      	bgt.n	8035aa8 <_strtod_l+0x2e0>
 8035aa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8035aa2:	4588      	cmp	r8, r1
 8035aa4:	bfa8      	it	ge
 8035aa6:	4688      	movge	r8, r1
 8035aa8:	f1bc 0f00 	cmp.w	ip, #0
 8035aac:	d001      	beq.n	8035ab2 <_strtod_l+0x2ea>
 8035aae:	f1c8 0800 	rsb	r8, r8, #0
 8035ab2:	2d00      	cmp	r5, #0
 8035ab4:	d14e      	bne.n	8035b54 <_strtod_l+0x38c>
 8035ab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8035ab8:	4308      	orrs	r0, r1
 8035aba:	f47f aebe 	bne.w	803583a <_strtod_l+0x72>
 8035abe:	2b00      	cmp	r3, #0
 8035ac0:	f47f aed6 	bne.w	8035870 <_strtod_l+0xa8>
 8035ac4:	2a69      	cmp	r2, #105	@ 0x69
 8035ac6:	d028      	beq.n	8035b1a <_strtod_l+0x352>
 8035ac8:	dc25      	bgt.n	8035b16 <_strtod_l+0x34e>
 8035aca:	2a49      	cmp	r2, #73	@ 0x49
 8035acc:	d025      	beq.n	8035b1a <_strtod_l+0x352>
 8035ace:	2a4e      	cmp	r2, #78	@ 0x4e
 8035ad0:	f47f aece 	bne.w	8035870 <_strtod_l+0xa8>
 8035ad4:	499b      	ldr	r1, [pc, #620]	@ (8035d44 <_strtod_l+0x57c>)
 8035ad6:	a819      	add	r0, sp, #100	@ 0x64
 8035ad8:	f001 fa70 	bl	8036fbc <__match>
 8035adc:	2800      	cmp	r0, #0
 8035ade:	f43f aec7 	beq.w	8035870 <_strtod_l+0xa8>
 8035ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035ae4:	781b      	ldrb	r3, [r3, #0]
 8035ae6:	2b28      	cmp	r3, #40	@ 0x28
 8035ae8:	d12e      	bne.n	8035b48 <_strtod_l+0x380>
 8035aea:	4997      	ldr	r1, [pc, #604]	@ (8035d48 <_strtod_l+0x580>)
 8035aec:	aa1c      	add	r2, sp, #112	@ 0x70
 8035aee:	a819      	add	r0, sp, #100	@ 0x64
 8035af0:	f001 fa78 	bl	8036fe4 <__hexnan>
 8035af4:	2805      	cmp	r0, #5
 8035af6:	d127      	bne.n	8035b48 <_strtod_l+0x380>
 8035af8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8035afa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8035afe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8035b02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8035b06:	e698      	b.n	803583a <_strtod_l+0x72>
 8035b08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8035b0a:	fb08 2101 	mla	r1, r8, r1, r2
 8035b0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8035b12:	920e      	str	r2, [sp, #56]	@ 0x38
 8035b14:	e7b5      	b.n	8035a82 <_strtod_l+0x2ba>
 8035b16:	2a6e      	cmp	r2, #110	@ 0x6e
 8035b18:	e7da      	b.n	8035ad0 <_strtod_l+0x308>
 8035b1a:	498c      	ldr	r1, [pc, #560]	@ (8035d4c <_strtod_l+0x584>)
 8035b1c:	a819      	add	r0, sp, #100	@ 0x64
 8035b1e:	f001 fa4d 	bl	8036fbc <__match>
 8035b22:	2800      	cmp	r0, #0
 8035b24:	f43f aea4 	beq.w	8035870 <_strtod_l+0xa8>
 8035b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035b2a:	4989      	ldr	r1, [pc, #548]	@ (8035d50 <_strtod_l+0x588>)
 8035b2c:	3b01      	subs	r3, #1
 8035b2e:	a819      	add	r0, sp, #100	@ 0x64
 8035b30:	9319      	str	r3, [sp, #100]	@ 0x64
 8035b32:	f001 fa43 	bl	8036fbc <__match>
 8035b36:	b910      	cbnz	r0, 8035b3e <_strtod_l+0x376>
 8035b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035b3a:	3301      	adds	r3, #1
 8035b3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8035b3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8035d60 <_strtod_l+0x598>
 8035b42:	f04f 0a00 	mov.w	sl, #0
 8035b46:	e678      	b.n	803583a <_strtod_l+0x72>
 8035b48:	4882      	ldr	r0, [pc, #520]	@ (8035d54 <_strtod_l+0x58c>)
 8035b4a:	f000 ff5d 	bl	8036a08 <nan>
 8035b4e:	ec5b ab10 	vmov	sl, fp, d0
 8035b52:	e672      	b.n	803583a <_strtod_l+0x72>
 8035b54:	eba8 0309 	sub.w	r3, r8, r9
 8035b58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8035b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8035b5c:	2f00      	cmp	r7, #0
 8035b5e:	bf08      	it	eq
 8035b60:	462f      	moveq	r7, r5
 8035b62:	2d10      	cmp	r5, #16
 8035b64:	462c      	mov	r4, r5
 8035b66:	bfa8      	it	ge
 8035b68:	2410      	movge	r4, #16
 8035b6a:	f7da fce3 	bl	8010534 <__aeabi_ui2d>
 8035b6e:	2d09      	cmp	r5, #9
 8035b70:	4682      	mov	sl, r0
 8035b72:	468b      	mov	fp, r1
 8035b74:	dc13      	bgt.n	8035b9e <_strtod_l+0x3d6>
 8035b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035b78:	2b00      	cmp	r3, #0
 8035b7a:	f43f ae5e 	beq.w	803583a <_strtod_l+0x72>
 8035b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035b80:	dd78      	ble.n	8035c74 <_strtod_l+0x4ac>
 8035b82:	2b16      	cmp	r3, #22
 8035b84:	dc5f      	bgt.n	8035c46 <_strtod_l+0x47e>
 8035b86:	4974      	ldr	r1, [pc, #464]	@ (8035d58 <_strtod_l+0x590>)
 8035b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8035b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035b90:	4652      	mov	r2, sl
 8035b92:	465b      	mov	r3, fp
 8035b94:	f7da fd48 	bl	8010628 <__aeabi_dmul>
 8035b98:	4682      	mov	sl, r0
 8035b9a:	468b      	mov	fp, r1
 8035b9c:	e64d      	b.n	803583a <_strtod_l+0x72>
 8035b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8035d58 <_strtod_l+0x590>)
 8035ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8035ba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8035ba8:	f7da fd3e 	bl	8010628 <__aeabi_dmul>
 8035bac:	4682      	mov	sl, r0
 8035bae:	9808      	ldr	r0, [sp, #32]
 8035bb0:	468b      	mov	fp, r1
 8035bb2:	f7da fcbf 	bl	8010534 <__aeabi_ui2d>
 8035bb6:	4602      	mov	r2, r0
 8035bb8:	460b      	mov	r3, r1
 8035bba:	4650      	mov	r0, sl
 8035bbc:	4659      	mov	r1, fp
 8035bbe:	f7da fb7d 	bl	80102bc <__adddf3>
 8035bc2:	2d0f      	cmp	r5, #15
 8035bc4:	4682      	mov	sl, r0
 8035bc6:	468b      	mov	fp, r1
 8035bc8:	ddd5      	ble.n	8035b76 <_strtod_l+0x3ae>
 8035bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035bcc:	1b2c      	subs	r4, r5, r4
 8035bce:	441c      	add	r4, r3
 8035bd0:	2c00      	cmp	r4, #0
 8035bd2:	f340 8096 	ble.w	8035d02 <_strtod_l+0x53a>
 8035bd6:	f014 030f 	ands.w	r3, r4, #15
 8035bda:	d00a      	beq.n	8035bf2 <_strtod_l+0x42a>
 8035bdc:	495e      	ldr	r1, [pc, #376]	@ (8035d58 <_strtod_l+0x590>)
 8035bde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8035be2:	4652      	mov	r2, sl
 8035be4:	465b      	mov	r3, fp
 8035be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035bea:	f7da fd1d 	bl	8010628 <__aeabi_dmul>
 8035bee:	4682      	mov	sl, r0
 8035bf0:	468b      	mov	fp, r1
 8035bf2:	f034 040f 	bics.w	r4, r4, #15
 8035bf6:	d073      	beq.n	8035ce0 <_strtod_l+0x518>
 8035bf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8035bfc:	dd48      	ble.n	8035c90 <_strtod_l+0x4c8>
 8035bfe:	2400      	movs	r4, #0
 8035c00:	46a0      	mov	r8, r4
 8035c02:	940a      	str	r4, [sp, #40]	@ 0x28
 8035c04:	46a1      	mov	r9, r4
 8035c06:	9a05      	ldr	r2, [sp, #20]
 8035c08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8035d60 <_strtod_l+0x598>
 8035c0c:	2322      	movs	r3, #34	@ 0x22
 8035c0e:	6013      	str	r3, [r2, #0]
 8035c10:	f04f 0a00 	mov.w	sl, #0
 8035c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035c16:	2b00      	cmp	r3, #0
 8035c18:	f43f ae0f 	beq.w	803583a <_strtod_l+0x72>
 8035c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035c1e:	9805      	ldr	r0, [sp, #20]
 8035c20:	f7fe ff37 	bl	8034a92 <_Bfree>
 8035c24:	9805      	ldr	r0, [sp, #20]
 8035c26:	4649      	mov	r1, r9
 8035c28:	f7fe ff33 	bl	8034a92 <_Bfree>
 8035c2c:	9805      	ldr	r0, [sp, #20]
 8035c2e:	4641      	mov	r1, r8
 8035c30:	f7fe ff2f 	bl	8034a92 <_Bfree>
 8035c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8035c36:	9805      	ldr	r0, [sp, #20]
 8035c38:	f7fe ff2b 	bl	8034a92 <_Bfree>
 8035c3c:	9805      	ldr	r0, [sp, #20]
 8035c3e:	4621      	mov	r1, r4
 8035c40:	f7fe ff27 	bl	8034a92 <_Bfree>
 8035c44:	e5f9      	b.n	803583a <_strtod_l+0x72>
 8035c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035c48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8035c4c:	4293      	cmp	r3, r2
 8035c4e:	dbbc      	blt.n	8035bca <_strtod_l+0x402>
 8035c50:	4c41      	ldr	r4, [pc, #260]	@ (8035d58 <_strtod_l+0x590>)
 8035c52:	f1c5 050f 	rsb	r5, r5, #15
 8035c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8035c5a:	4652      	mov	r2, sl
 8035c5c:	465b      	mov	r3, fp
 8035c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035c62:	f7da fce1 	bl	8010628 <__aeabi_dmul>
 8035c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035c68:	1b5d      	subs	r5, r3, r5
 8035c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8035c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8035c72:	e78f      	b.n	8035b94 <_strtod_l+0x3cc>
 8035c74:	3316      	adds	r3, #22
 8035c76:	dba8      	blt.n	8035bca <_strtod_l+0x402>
 8035c78:	4b37      	ldr	r3, [pc, #220]	@ (8035d58 <_strtod_l+0x590>)
 8035c7a:	eba9 0808 	sub.w	r8, r9, r8
 8035c7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8035c82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8035c86:	4650      	mov	r0, sl
 8035c88:	4659      	mov	r1, fp
 8035c8a:	f7da fdf7 	bl	801087c <__aeabi_ddiv>
 8035c8e:	e783      	b.n	8035b98 <_strtod_l+0x3d0>
 8035c90:	4b32      	ldr	r3, [pc, #200]	@ (8035d5c <_strtod_l+0x594>)
 8035c92:	9308      	str	r3, [sp, #32]
 8035c94:	2300      	movs	r3, #0
 8035c96:	1124      	asrs	r4, r4, #4
 8035c98:	4650      	mov	r0, sl
 8035c9a:	4659      	mov	r1, fp
 8035c9c:	461e      	mov	r6, r3
 8035c9e:	2c01      	cmp	r4, #1
 8035ca0:	dc21      	bgt.n	8035ce6 <_strtod_l+0x51e>
 8035ca2:	b10b      	cbz	r3, 8035ca8 <_strtod_l+0x4e0>
 8035ca4:	4682      	mov	sl, r0
 8035ca6:	468b      	mov	fp, r1
 8035ca8:	492c      	ldr	r1, [pc, #176]	@ (8035d5c <_strtod_l+0x594>)
 8035caa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8035cae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8035cb2:	4652      	mov	r2, sl
 8035cb4:	465b      	mov	r3, fp
 8035cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035cba:	f7da fcb5 	bl	8010628 <__aeabi_dmul>
 8035cbe:	4b28      	ldr	r3, [pc, #160]	@ (8035d60 <_strtod_l+0x598>)
 8035cc0:	460a      	mov	r2, r1
 8035cc2:	400b      	ands	r3, r1
 8035cc4:	4927      	ldr	r1, [pc, #156]	@ (8035d64 <_strtod_l+0x59c>)
 8035cc6:	428b      	cmp	r3, r1
 8035cc8:	4682      	mov	sl, r0
 8035cca:	d898      	bhi.n	8035bfe <_strtod_l+0x436>
 8035ccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8035cd0:	428b      	cmp	r3, r1
 8035cd2:	bf86      	itte	hi
 8035cd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8035d68 <_strtod_l+0x5a0>
 8035cd8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8035cdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8035ce0:	2300      	movs	r3, #0
 8035ce2:	9308      	str	r3, [sp, #32]
 8035ce4:	e07a      	b.n	8035ddc <_strtod_l+0x614>
 8035ce6:	07e2      	lsls	r2, r4, #31
 8035ce8:	d505      	bpl.n	8035cf6 <_strtod_l+0x52e>
 8035cea:	9b08      	ldr	r3, [sp, #32]
 8035cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035cf0:	f7da fc9a 	bl	8010628 <__aeabi_dmul>
 8035cf4:	2301      	movs	r3, #1
 8035cf6:	9a08      	ldr	r2, [sp, #32]
 8035cf8:	3208      	adds	r2, #8
 8035cfa:	3601      	adds	r6, #1
 8035cfc:	1064      	asrs	r4, r4, #1
 8035cfe:	9208      	str	r2, [sp, #32]
 8035d00:	e7cd      	b.n	8035c9e <_strtod_l+0x4d6>
 8035d02:	d0ed      	beq.n	8035ce0 <_strtod_l+0x518>
 8035d04:	4264      	negs	r4, r4
 8035d06:	f014 020f 	ands.w	r2, r4, #15
 8035d0a:	d00a      	beq.n	8035d22 <_strtod_l+0x55a>
 8035d0c:	4b12      	ldr	r3, [pc, #72]	@ (8035d58 <_strtod_l+0x590>)
 8035d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8035d12:	4650      	mov	r0, sl
 8035d14:	4659      	mov	r1, fp
 8035d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035d1a:	f7da fdaf 	bl	801087c <__aeabi_ddiv>
 8035d1e:	4682      	mov	sl, r0
 8035d20:	468b      	mov	fp, r1
 8035d22:	1124      	asrs	r4, r4, #4
 8035d24:	d0dc      	beq.n	8035ce0 <_strtod_l+0x518>
 8035d26:	2c1f      	cmp	r4, #31
 8035d28:	dd20      	ble.n	8035d6c <_strtod_l+0x5a4>
 8035d2a:	2400      	movs	r4, #0
 8035d2c:	46a0      	mov	r8, r4
 8035d2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8035d30:	46a1      	mov	r9, r4
 8035d32:	9a05      	ldr	r2, [sp, #20]
 8035d34:	2322      	movs	r3, #34	@ 0x22
 8035d36:	f04f 0a00 	mov.w	sl, #0
 8035d3a:	f04f 0b00 	mov.w	fp, #0
 8035d3e:	6013      	str	r3, [r2, #0]
 8035d40:	e768      	b.n	8035c14 <_strtod_l+0x44c>
 8035d42:	bf00      	nop
 8035d44:	0803d4a1 	.word	0x0803d4a1
 8035d48:	0803da20 	.word	0x0803da20
 8035d4c:	0803d2b0 	.word	0x0803d2b0
 8035d50:	0803d7cc 	.word	0x0803d7cc
 8035d54:	0803d2aa 	.word	0x0803d2aa
 8035d58:	0803d958 	.word	0x0803d958
 8035d5c:	0803d930 	.word	0x0803d930
 8035d60:	7ff00000 	.word	0x7ff00000
 8035d64:	7ca00000 	.word	0x7ca00000
 8035d68:	7fefffff 	.word	0x7fefffff
 8035d6c:	f014 0310 	ands.w	r3, r4, #16
 8035d70:	bf18      	it	ne
 8035d72:	236a      	movne	r3, #106	@ 0x6a
 8035d74:	4ea9      	ldr	r6, [pc, #676]	@ (803601c <_strtod_l+0x854>)
 8035d76:	9308      	str	r3, [sp, #32]
 8035d78:	4650      	mov	r0, sl
 8035d7a:	4659      	mov	r1, fp
 8035d7c:	2300      	movs	r3, #0
 8035d7e:	07e2      	lsls	r2, r4, #31
 8035d80:	d504      	bpl.n	8035d8c <_strtod_l+0x5c4>
 8035d82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8035d86:	f7da fc4f 	bl	8010628 <__aeabi_dmul>
 8035d8a:	2301      	movs	r3, #1
 8035d8c:	1064      	asrs	r4, r4, #1
 8035d8e:	f106 0608 	add.w	r6, r6, #8
 8035d92:	d1f4      	bne.n	8035d7e <_strtod_l+0x5b6>
 8035d94:	b10b      	cbz	r3, 8035d9a <_strtod_l+0x5d2>
 8035d96:	4682      	mov	sl, r0
 8035d98:	468b      	mov	fp, r1
 8035d9a:	9b08      	ldr	r3, [sp, #32]
 8035d9c:	b1b3      	cbz	r3, 8035dcc <_strtod_l+0x604>
 8035d9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8035da2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8035da6:	2b00      	cmp	r3, #0
 8035da8:	4659      	mov	r1, fp
 8035daa:	dd0f      	ble.n	8035dcc <_strtod_l+0x604>
 8035dac:	2b1f      	cmp	r3, #31
 8035dae:	dd55      	ble.n	8035e5c <_strtod_l+0x694>
 8035db0:	2b34      	cmp	r3, #52	@ 0x34
 8035db2:	bfde      	ittt	le
 8035db4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8035db8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8035dbc:	4093      	lslle	r3, r2
 8035dbe:	f04f 0a00 	mov.w	sl, #0
 8035dc2:	bfcc      	ite	gt
 8035dc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8035dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8035dcc:	2200      	movs	r2, #0
 8035dce:	2300      	movs	r3, #0
 8035dd0:	4650      	mov	r0, sl
 8035dd2:	4659      	mov	r1, fp
 8035dd4:	f7da fe90 	bl	8010af8 <__aeabi_dcmpeq>
 8035dd8:	2800      	cmp	r0, #0
 8035dda:	d1a6      	bne.n	8035d2a <_strtod_l+0x562>
 8035ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035dde:	9300      	str	r3, [sp, #0]
 8035de0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8035de2:	9805      	ldr	r0, [sp, #20]
 8035de4:	462b      	mov	r3, r5
 8035de6:	463a      	mov	r2, r7
 8035de8:	f7fe fea2 	bl	8034b30 <__s2b>
 8035dec:	900a      	str	r0, [sp, #40]	@ 0x28
 8035dee:	2800      	cmp	r0, #0
 8035df0:	f43f af05 	beq.w	8035bfe <_strtod_l+0x436>
 8035df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035df6:	2a00      	cmp	r2, #0
 8035df8:	eba9 0308 	sub.w	r3, r9, r8
 8035dfc:	bfa8      	it	ge
 8035dfe:	2300      	movge	r3, #0
 8035e00:	9312      	str	r3, [sp, #72]	@ 0x48
 8035e02:	2400      	movs	r4, #0
 8035e04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8035e08:	9316      	str	r3, [sp, #88]	@ 0x58
 8035e0a:	46a0      	mov	r8, r4
 8035e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035e0e:	9805      	ldr	r0, [sp, #20]
 8035e10:	6859      	ldr	r1, [r3, #4]
 8035e12:	f7fe fe19 	bl	8034a48 <_Balloc>
 8035e16:	4681      	mov	r9, r0
 8035e18:	2800      	cmp	r0, #0
 8035e1a:	f43f aef4 	beq.w	8035c06 <_strtod_l+0x43e>
 8035e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035e20:	691a      	ldr	r2, [r3, #16]
 8035e22:	3202      	adds	r2, #2
 8035e24:	f103 010c 	add.w	r1, r3, #12
 8035e28:	0092      	lsls	r2, r2, #2
 8035e2a:	300c      	adds	r0, #12
 8035e2c:	f7f9 fad6 	bl	802f3dc <memcpy>
 8035e30:	ec4b ab10 	vmov	d0, sl, fp
 8035e34:	9805      	ldr	r0, [sp, #20]
 8035e36:	aa1c      	add	r2, sp, #112	@ 0x70
 8035e38:	a91b      	add	r1, sp, #108	@ 0x6c
 8035e3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8035e3e:	f7ff f999 	bl	8035174 <__d2b>
 8035e42:	901a      	str	r0, [sp, #104]	@ 0x68
 8035e44:	2800      	cmp	r0, #0
 8035e46:	f43f aede 	beq.w	8035c06 <_strtod_l+0x43e>
 8035e4a:	9805      	ldr	r0, [sp, #20]
 8035e4c:	2101      	movs	r1, #1
 8035e4e:	f7fe ff05 	bl	8034c5c <__i2b>
 8035e52:	4680      	mov	r8, r0
 8035e54:	b948      	cbnz	r0, 8035e6a <_strtod_l+0x6a2>
 8035e56:	f04f 0800 	mov.w	r8, #0
 8035e5a:	e6d4      	b.n	8035c06 <_strtod_l+0x43e>
 8035e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035e60:	fa02 f303 	lsl.w	r3, r2, r3
 8035e64:	ea03 0a0a 	and.w	sl, r3, sl
 8035e68:	e7b0      	b.n	8035dcc <_strtod_l+0x604>
 8035e6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8035e6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8035e6e:	2d00      	cmp	r5, #0
 8035e70:	bfab      	itete	ge
 8035e72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8035e74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8035e76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8035e78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8035e7a:	bfac      	ite	ge
 8035e7c:	18ef      	addge	r7, r5, r3
 8035e7e:	1b5e      	sublt	r6, r3, r5
 8035e80:	9b08      	ldr	r3, [sp, #32]
 8035e82:	1aed      	subs	r5, r5, r3
 8035e84:	4415      	add	r5, r2
 8035e86:	4b66      	ldr	r3, [pc, #408]	@ (8036020 <_strtod_l+0x858>)
 8035e88:	3d01      	subs	r5, #1
 8035e8a:	429d      	cmp	r5, r3
 8035e8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8035e90:	da50      	bge.n	8035f34 <_strtod_l+0x76c>
 8035e92:	1b5b      	subs	r3, r3, r5
 8035e94:	2b1f      	cmp	r3, #31
 8035e96:	eba2 0203 	sub.w	r2, r2, r3
 8035e9a:	f04f 0101 	mov.w	r1, #1
 8035e9e:	dc3d      	bgt.n	8035f1c <_strtod_l+0x754>
 8035ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8035ea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8035ea6:	2300      	movs	r3, #0
 8035ea8:	9310      	str	r3, [sp, #64]	@ 0x40
 8035eaa:	18bd      	adds	r5, r7, r2
 8035eac:	9b08      	ldr	r3, [sp, #32]
 8035eae:	42af      	cmp	r7, r5
 8035eb0:	4416      	add	r6, r2
 8035eb2:	441e      	add	r6, r3
 8035eb4:	463b      	mov	r3, r7
 8035eb6:	bfa8      	it	ge
 8035eb8:	462b      	movge	r3, r5
 8035eba:	42b3      	cmp	r3, r6
 8035ebc:	bfa8      	it	ge
 8035ebe:	4633      	movge	r3, r6
 8035ec0:	2b00      	cmp	r3, #0
 8035ec2:	bfc2      	ittt	gt
 8035ec4:	1aed      	subgt	r5, r5, r3
 8035ec6:	1af6      	subgt	r6, r6, r3
 8035ec8:	1aff      	subgt	r7, r7, r3
 8035eca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8035ecc:	2b00      	cmp	r3, #0
 8035ece:	dd16      	ble.n	8035efe <_strtod_l+0x736>
 8035ed0:	4641      	mov	r1, r8
 8035ed2:	9805      	ldr	r0, [sp, #20]
 8035ed4:	461a      	mov	r2, r3
 8035ed6:	f7fe ff81 	bl	8034ddc <__pow5mult>
 8035eda:	4680      	mov	r8, r0
 8035edc:	2800      	cmp	r0, #0
 8035ede:	d0ba      	beq.n	8035e56 <_strtod_l+0x68e>
 8035ee0:	4601      	mov	r1, r0
 8035ee2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8035ee4:	9805      	ldr	r0, [sp, #20]
 8035ee6:	f7fe fecf 	bl	8034c88 <__multiply>
 8035eea:	900e      	str	r0, [sp, #56]	@ 0x38
 8035eec:	2800      	cmp	r0, #0
 8035eee:	f43f ae8a 	beq.w	8035c06 <_strtod_l+0x43e>
 8035ef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035ef4:	9805      	ldr	r0, [sp, #20]
 8035ef6:	f7fe fdcc 	bl	8034a92 <_Bfree>
 8035efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8035efe:	2d00      	cmp	r5, #0
 8035f00:	dc1d      	bgt.n	8035f3e <_strtod_l+0x776>
 8035f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035f04:	2b00      	cmp	r3, #0
 8035f06:	dd23      	ble.n	8035f50 <_strtod_l+0x788>
 8035f08:	4649      	mov	r1, r9
 8035f0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8035f0c:	9805      	ldr	r0, [sp, #20]
 8035f0e:	f7fe ff65 	bl	8034ddc <__pow5mult>
 8035f12:	4681      	mov	r9, r0
 8035f14:	b9e0      	cbnz	r0, 8035f50 <_strtod_l+0x788>
 8035f16:	f04f 0900 	mov.w	r9, #0
 8035f1a:	e674      	b.n	8035c06 <_strtod_l+0x43e>
 8035f1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8035f20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8035f24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8035f28:	35e2      	adds	r5, #226	@ 0xe2
 8035f2a:	fa01 f305 	lsl.w	r3, r1, r5
 8035f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8035f30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8035f32:	e7ba      	b.n	8035eaa <_strtod_l+0x6e2>
 8035f34:	2300      	movs	r3, #0
 8035f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8035f38:	2301      	movs	r3, #1
 8035f3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8035f3c:	e7b5      	b.n	8035eaa <_strtod_l+0x6e2>
 8035f3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035f40:	9805      	ldr	r0, [sp, #20]
 8035f42:	462a      	mov	r2, r5
 8035f44:	f7fe ff8a 	bl	8034e5c <__lshift>
 8035f48:	901a      	str	r0, [sp, #104]	@ 0x68
 8035f4a:	2800      	cmp	r0, #0
 8035f4c:	d1d9      	bne.n	8035f02 <_strtod_l+0x73a>
 8035f4e:	e65a      	b.n	8035c06 <_strtod_l+0x43e>
 8035f50:	2e00      	cmp	r6, #0
 8035f52:	dd07      	ble.n	8035f64 <_strtod_l+0x79c>
 8035f54:	4649      	mov	r1, r9
 8035f56:	9805      	ldr	r0, [sp, #20]
 8035f58:	4632      	mov	r2, r6
 8035f5a:	f7fe ff7f 	bl	8034e5c <__lshift>
 8035f5e:	4681      	mov	r9, r0
 8035f60:	2800      	cmp	r0, #0
 8035f62:	d0d8      	beq.n	8035f16 <_strtod_l+0x74e>
 8035f64:	2f00      	cmp	r7, #0
 8035f66:	dd08      	ble.n	8035f7a <_strtod_l+0x7b2>
 8035f68:	4641      	mov	r1, r8
 8035f6a:	9805      	ldr	r0, [sp, #20]
 8035f6c:	463a      	mov	r2, r7
 8035f6e:	f7fe ff75 	bl	8034e5c <__lshift>
 8035f72:	4680      	mov	r8, r0
 8035f74:	2800      	cmp	r0, #0
 8035f76:	f43f ae46 	beq.w	8035c06 <_strtod_l+0x43e>
 8035f7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035f7c:	9805      	ldr	r0, [sp, #20]
 8035f7e:	464a      	mov	r2, r9
 8035f80:	f7fe fff4 	bl	8034f6c <__mdiff>
 8035f84:	4604      	mov	r4, r0
 8035f86:	2800      	cmp	r0, #0
 8035f88:	f43f ae3d 	beq.w	8035c06 <_strtod_l+0x43e>
 8035f8c:	68c3      	ldr	r3, [r0, #12]
 8035f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035f90:	2300      	movs	r3, #0
 8035f92:	60c3      	str	r3, [r0, #12]
 8035f94:	4641      	mov	r1, r8
 8035f96:	f7fe ffcd 	bl	8034f34 <__mcmp>
 8035f9a:	2800      	cmp	r0, #0
 8035f9c:	da46      	bge.n	803602c <_strtod_l+0x864>
 8035f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035fa0:	ea53 030a 	orrs.w	r3, r3, sl
 8035fa4:	d16c      	bne.n	8036080 <_strtod_l+0x8b8>
 8035fa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8035faa:	2b00      	cmp	r3, #0
 8035fac:	d168      	bne.n	8036080 <_strtod_l+0x8b8>
 8035fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035fb2:	0d1b      	lsrs	r3, r3, #20
 8035fb4:	051b      	lsls	r3, r3, #20
 8035fb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8035fba:	d961      	bls.n	8036080 <_strtod_l+0x8b8>
 8035fbc:	6963      	ldr	r3, [r4, #20]
 8035fbe:	b913      	cbnz	r3, 8035fc6 <_strtod_l+0x7fe>
 8035fc0:	6923      	ldr	r3, [r4, #16]
 8035fc2:	2b01      	cmp	r3, #1
 8035fc4:	dd5c      	ble.n	8036080 <_strtod_l+0x8b8>
 8035fc6:	4621      	mov	r1, r4
 8035fc8:	2201      	movs	r2, #1
 8035fca:	9805      	ldr	r0, [sp, #20]
 8035fcc:	f7fe ff46 	bl	8034e5c <__lshift>
 8035fd0:	4641      	mov	r1, r8
 8035fd2:	4604      	mov	r4, r0
 8035fd4:	f7fe ffae 	bl	8034f34 <__mcmp>
 8035fd8:	2800      	cmp	r0, #0
 8035fda:	dd51      	ble.n	8036080 <_strtod_l+0x8b8>
 8035fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035fe0:	9a08      	ldr	r2, [sp, #32]
 8035fe2:	0d1b      	lsrs	r3, r3, #20
 8035fe4:	051b      	lsls	r3, r3, #20
 8035fe6:	2a00      	cmp	r2, #0
 8035fe8:	d06b      	beq.n	80360c2 <_strtod_l+0x8fa>
 8035fea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8035fee:	d868      	bhi.n	80360c2 <_strtod_l+0x8fa>
 8035ff0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8035ff4:	f67f ae9d 	bls.w	8035d32 <_strtod_l+0x56a>
 8035ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8036024 <_strtod_l+0x85c>)
 8035ffa:	4650      	mov	r0, sl
 8035ffc:	4659      	mov	r1, fp
 8035ffe:	2200      	movs	r2, #0
 8036000:	f7da fb12 	bl	8010628 <__aeabi_dmul>
 8036004:	4b08      	ldr	r3, [pc, #32]	@ (8036028 <_strtod_l+0x860>)
 8036006:	400b      	ands	r3, r1
 8036008:	4682      	mov	sl, r0
 803600a:	468b      	mov	fp, r1
 803600c:	2b00      	cmp	r3, #0
 803600e:	f47f ae05 	bne.w	8035c1c <_strtod_l+0x454>
 8036012:	9a05      	ldr	r2, [sp, #20]
 8036014:	2322      	movs	r3, #34	@ 0x22
 8036016:	6013      	str	r3, [r2, #0]
 8036018:	e600      	b.n	8035c1c <_strtod_l+0x454>
 803601a:	bf00      	nop
 803601c:	0803da48 	.word	0x0803da48
 8036020:	fffffc02 	.word	0xfffffc02
 8036024:	39500000 	.word	0x39500000
 8036028:	7ff00000 	.word	0x7ff00000
 803602c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8036030:	d165      	bne.n	80360fe <_strtod_l+0x936>
 8036032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8036034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8036038:	b35a      	cbz	r2, 8036092 <_strtod_l+0x8ca>
 803603a:	4a9f      	ldr	r2, [pc, #636]	@ (80362b8 <_strtod_l+0xaf0>)
 803603c:	4293      	cmp	r3, r2
 803603e:	d12b      	bne.n	8036098 <_strtod_l+0x8d0>
 8036040:	9b08      	ldr	r3, [sp, #32]
 8036042:	4651      	mov	r1, sl
 8036044:	b303      	cbz	r3, 8036088 <_strtod_l+0x8c0>
 8036046:	4b9d      	ldr	r3, [pc, #628]	@ (80362bc <_strtod_l+0xaf4>)
 8036048:	465a      	mov	r2, fp
 803604a:	4013      	ands	r3, r2
 803604c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8036050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8036054:	d81b      	bhi.n	803608e <_strtod_l+0x8c6>
 8036056:	0d1b      	lsrs	r3, r3, #20
 8036058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803605c:	fa02 f303 	lsl.w	r3, r2, r3
 8036060:	4299      	cmp	r1, r3
 8036062:	d119      	bne.n	8036098 <_strtod_l+0x8d0>
 8036064:	4b96      	ldr	r3, [pc, #600]	@ (80362c0 <_strtod_l+0xaf8>)
 8036066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036068:	429a      	cmp	r2, r3
 803606a:	d102      	bne.n	8036072 <_strtod_l+0x8aa>
 803606c:	3101      	adds	r1, #1
 803606e:	f43f adca 	beq.w	8035c06 <_strtod_l+0x43e>
 8036072:	4b92      	ldr	r3, [pc, #584]	@ (80362bc <_strtod_l+0xaf4>)
 8036074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036076:	401a      	ands	r2, r3
 8036078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803607c:	f04f 0a00 	mov.w	sl, #0
 8036080:	9b08      	ldr	r3, [sp, #32]
 8036082:	2b00      	cmp	r3, #0
 8036084:	d1b8      	bne.n	8035ff8 <_strtod_l+0x830>
 8036086:	e5c9      	b.n	8035c1c <_strtod_l+0x454>
 8036088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803608c:	e7e8      	b.n	8036060 <_strtod_l+0x898>
 803608e:	4613      	mov	r3, r2
 8036090:	e7e6      	b.n	8036060 <_strtod_l+0x898>
 8036092:	ea53 030a 	orrs.w	r3, r3, sl
 8036096:	d0a1      	beq.n	8035fdc <_strtod_l+0x814>
 8036098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803609a:	b1db      	cbz	r3, 80360d4 <_strtod_l+0x90c>
 803609c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803609e:	4213      	tst	r3, r2
 80360a0:	d0ee      	beq.n	8036080 <_strtod_l+0x8b8>
 80360a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80360a4:	9a08      	ldr	r2, [sp, #32]
 80360a6:	4650      	mov	r0, sl
 80360a8:	4659      	mov	r1, fp
 80360aa:	b1bb      	cbz	r3, 80360dc <_strtod_l+0x914>
 80360ac:	f7ff fb6e 	bl	803578c <sulp>
 80360b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80360b4:	ec53 2b10 	vmov	r2, r3, d0
 80360b8:	f7da f900 	bl	80102bc <__adddf3>
 80360bc:	4682      	mov	sl, r0
 80360be:	468b      	mov	fp, r1
 80360c0:	e7de      	b.n	8036080 <_strtod_l+0x8b8>
 80360c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80360c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80360ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80360ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80360d2:	e7d5      	b.n	8036080 <_strtod_l+0x8b8>
 80360d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80360d6:	ea13 0f0a 	tst.w	r3, sl
 80360da:	e7e1      	b.n	80360a0 <_strtod_l+0x8d8>
 80360dc:	f7ff fb56 	bl	803578c <sulp>
 80360e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80360e4:	ec53 2b10 	vmov	r2, r3, d0
 80360e8:	f7da f8e6 	bl	80102b8 <__aeabi_dsub>
 80360ec:	2200      	movs	r2, #0
 80360ee:	2300      	movs	r3, #0
 80360f0:	4682      	mov	sl, r0
 80360f2:	468b      	mov	fp, r1
 80360f4:	f7da fd00 	bl	8010af8 <__aeabi_dcmpeq>
 80360f8:	2800      	cmp	r0, #0
 80360fa:	d0c1      	beq.n	8036080 <_strtod_l+0x8b8>
 80360fc:	e619      	b.n	8035d32 <_strtod_l+0x56a>
 80360fe:	4641      	mov	r1, r8
 8036100:	4620      	mov	r0, r4
 8036102:	f7ff f88f 	bl	8035224 <__ratio>
 8036106:	ec57 6b10 	vmov	r6, r7, d0
 803610a:	2200      	movs	r2, #0
 803610c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8036110:	4630      	mov	r0, r6
 8036112:	4639      	mov	r1, r7
 8036114:	f7da fd04 	bl	8010b20 <__aeabi_dcmple>
 8036118:	2800      	cmp	r0, #0
 803611a:	d06f      	beq.n	80361fc <_strtod_l+0xa34>
 803611c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803611e:	2b00      	cmp	r3, #0
 8036120:	d17a      	bne.n	8036218 <_strtod_l+0xa50>
 8036122:	f1ba 0f00 	cmp.w	sl, #0
 8036126:	d158      	bne.n	80361da <_strtod_l+0xa12>
 8036128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803612a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803612e:	2b00      	cmp	r3, #0
 8036130:	d15a      	bne.n	80361e8 <_strtod_l+0xa20>
 8036132:	4b64      	ldr	r3, [pc, #400]	@ (80362c4 <_strtod_l+0xafc>)
 8036134:	2200      	movs	r2, #0
 8036136:	4630      	mov	r0, r6
 8036138:	4639      	mov	r1, r7
 803613a:	f7da fce7 	bl	8010b0c <__aeabi_dcmplt>
 803613e:	2800      	cmp	r0, #0
 8036140:	d159      	bne.n	80361f6 <_strtod_l+0xa2e>
 8036142:	4630      	mov	r0, r6
 8036144:	4639      	mov	r1, r7
 8036146:	4b60      	ldr	r3, [pc, #384]	@ (80362c8 <_strtod_l+0xb00>)
 8036148:	2200      	movs	r2, #0
 803614a:	f7da fa6d 	bl	8010628 <__aeabi_dmul>
 803614e:	4606      	mov	r6, r0
 8036150:	460f      	mov	r7, r1
 8036152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8036156:	9606      	str	r6, [sp, #24]
 8036158:	9307      	str	r3, [sp, #28]
 803615a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803615e:	4d57      	ldr	r5, [pc, #348]	@ (80362bc <_strtod_l+0xaf4>)
 8036160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8036164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036166:	401d      	ands	r5, r3
 8036168:	4b58      	ldr	r3, [pc, #352]	@ (80362cc <_strtod_l+0xb04>)
 803616a:	429d      	cmp	r5, r3
 803616c:	f040 80b2 	bne.w	80362d4 <_strtod_l+0xb0c>
 8036170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8036176:	ec4b ab10 	vmov	d0, sl, fp
 803617a:	f7fe ff8b 	bl	8035094 <__ulp>
 803617e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8036182:	ec51 0b10 	vmov	r0, r1, d0
 8036186:	f7da fa4f 	bl	8010628 <__aeabi_dmul>
 803618a:	4652      	mov	r2, sl
 803618c:	465b      	mov	r3, fp
 803618e:	f7da f895 	bl	80102bc <__adddf3>
 8036192:	460b      	mov	r3, r1
 8036194:	4949      	ldr	r1, [pc, #292]	@ (80362bc <_strtod_l+0xaf4>)
 8036196:	4a4e      	ldr	r2, [pc, #312]	@ (80362d0 <_strtod_l+0xb08>)
 8036198:	4019      	ands	r1, r3
 803619a:	4291      	cmp	r1, r2
 803619c:	4682      	mov	sl, r0
 803619e:	d942      	bls.n	8036226 <_strtod_l+0xa5e>
 80361a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80361a2:	4b47      	ldr	r3, [pc, #284]	@ (80362c0 <_strtod_l+0xaf8>)
 80361a4:	429a      	cmp	r2, r3
 80361a6:	d103      	bne.n	80361b0 <_strtod_l+0x9e8>
 80361a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80361aa:	3301      	adds	r3, #1
 80361ac:	f43f ad2b 	beq.w	8035c06 <_strtod_l+0x43e>
 80361b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80362c0 <_strtod_l+0xaf8>
 80361b4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80361b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80361ba:	9805      	ldr	r0, [sp, #20]
 80361bc:	f7fe fc69 	bl	8034a92 <_Bfree>
 80361c0:	9805      	ldr	r0, [sp, #20]
 80361c2:	4649      	mov	r1, r9
 80361c4:	f7fe fc65 	bl	8034a92 <_Bfree>
 80361c8:	9805      	ldr	r0, [sp, #20]
 80361ca:	4641      	mov	r1, r8
 80361cc:	f7fe fc61 	bl	8034a92 <_Bfree>
 80361d0:	9805      	ldr	r0, [sp, #20]
 80361d2:	4621      	mov	r1, r4
 80361d4:	f7fe fc5d 	bl	8034a92 <_Bfree>
 80361d8:	e618      	b.n	8035e0c <_strtod_l+0x644>
 80361da:	f1ba 0f01 	cmp.w	sl, #1
 80361de:	d103      	bne.n	80361e8 <_strtod_l+0xa20>
 80361e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80361e2:	2b00      	cmp	r3, #0
 80361e4:	f43f ada5 	beq.w	8035d32 <_strtod_l+0x56a>
 80361e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8036298 <_strtod_l+0xad0>
 80361ec:	4f35      	ldr	r7, [pc, #212]	@ (80362c4 <_strtod_l+0xafc>)
 80361ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80361f2:	2600      	movs	r6, #0
 80361f4:	e7b1      	b.n	803615a <_strtod_l+0x992>
 80361f6:	4f34      	ldr	r7, [pc, #208]	@ (80362c8 <_strtod_l+0xb00>)
 80361f8:	2600      	movs	r6, #0
 80361fa:	e7aa      	b.n	8036152 <_strtod_l+0x98a>
 80361fc:	4b32      	ldr	r3, [pc, #200]	@ (80362c8 <_strtod_l+0xb00>)
 80361fe:	4630      	mov	r0, r6
 8036200:	4639      	mov	r1, r7
 8036202:	2200      	movs	r2, #0
 8036204:	f7da fa10 	bl	8010628 <__aeabi_dmul>
 8036208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803620a:	4606      	mov	r6, r0
 803620c:	460f      	mov	r7, r1
 803620e:	2b00      	cmp	r3, #0
 8036210:	d09f      	beq.n	8036152 <_strtod_l+0x98a>
 8036212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8036216:	e7a0      	b.n	803615a <_strtod_l+0x992>
 8036218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80362a0 <_strtod_l+0xad8>
 803621c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8036220:	ec57 6b17 	vmov	r6, r7, d7
 8036224:	e799      	b.n	803615a <_strtod_l+0x992>
 8036226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803622a:	9b08      	ldr	r3, [sp, #32]
 803622c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8036230:	2b00      	cmp	r3, #0
 8036232:	d1c1      	bne.n	80361b8 <_strtod_l+0x9f0>
 8036234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8036238:	0d1b      	lsrs	r3, r3, #20
 803623a:	051b      	lsls	r3, r3, #20
 803623c:	429d      	cmp	r5, r3
 803623e:	d1bb      	bne.n	80361b8 <_strtod_l+0x9f0>
 8036240:	4630      	mov	r0, r6
 8036242:	4639      	mov	r1, r7
 8036244:	f7da fdb4 	bl	8010db0 <__aeabi_d2lz>
 8036248:	f7da f9c0 	bl	80105cc <__aeabi_l2d>
 803624c:	4602      	mov	r2, r0
 803624e:	460b      	mov	r3, r1
 8036250:	4630      	mov	r0, r6
 8036252:	4639      	mov	r1, r7
 8036254:	f7da f830 	bl	80102b8 <__aeabi_dsub>
 8036258:	460b      	mov	r3, r1
 803625a:	4602      	mov	r2, r0
 803625c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8036260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8036264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036266:	ea46 060a 	orr.w	r6, r6, sl
 803626a:	431e      	orrs	r6, r3
 803626c:	d06f      	beq.n	803634e <_strtod_l+0xb86>
 803626e:	a30e      	add	r3, pc, #56	@ (adr r3, 80362a8 <_strtod_l+0xae0>)
 8036270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036274:	f7da fc4a 	bl	8010b0c <__aeabi_dcmplt>
 8036278:	2800      	cmp	r0, #0
 803627a:	f47f accf 	bne.w	8035c1c <_strtod_l+0x454>
 803627e:	a30c      	add	r3, pc, #48	@ (adr r3, 80362b0 <_strtod_l+0xae8>)
 8036280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8036288:	f7da fc5e 	bl	8010b48 <__aeabi_dcmpgt>
 803628c:	2800      	cmp	r0, #0
 803628e:	d093      	beq.n	80361b8 <_strtod_l+0x9f0>
 8036290:	e4c4      	b.n	8035c1c <_strtod_l+0x454>
 8036292:	bf00      	nop
 8036294:	f3af 8000 	nop.w
 8036298:	00000000 	.word	0x00000000
 803629c:	bff00000 	.word	0xbff00000
 80362a0:	00000000 	.word	0x00000000
 80362a4:	3ff00000 	.word	0x3ff00000
 80362a8:	94a03595 	.word	0x94a03595
 80362ac:	3fdfffff 	.word	0x3fdfffff
 80362b0:	35afe535 	.word	0x35afe535
 80362b4:	3fe00000 	.word	0x3fe00000
 80362b8:	000fffff 	.word	0x000fffff
 80362bc:	7ff00000 	.word	0x7ff00000
 80362c0:	7fefffff 	.word	0x7fefffff
 80362c4:	3ff00000 	.word	0x3ff00000
 80362c8:	3fe00000 	.word	0x3fe00000
 80362cc:	7fe00000 	.word	0x7fe00000
 80362d0:	7c9fffff 	.word	0x7c9fffff
 80362d4:	9b08      	ldr	r3, [sp, #32]
 80362d6:	b323      	cbz	r3, 8036322 <_strtod_l+0xb5a>
 80362d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80362dc:	d821      	bhi.n	8036322 <_strtod_l+0xb5a>
 80362de:	a328      	add	r3, pc, #160	@ (adr r3, 8036380 <_strtod_l+0xbb8>)
 80362e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80362e4:	4630      	mov	r0, r6
 80362e6:	4639      	mov	r1, r7
 80362e8:	f7da fc1a 	bl	8010b20 <__aeabi_dcmple>
 80362ec:	b1a0      	cbz	r0, 8036318 <_strtod_l+0xb50>
 80362ee:	4639      	mov	r1, r7
 80362f0:	4630      	mov	r0, r6
 80362f2:	f7da fc71 	bl	8010bd8 <__aeabi_d2uiz>
 80362f6:	2801      	cmp	r0, #1
 80362f8:	bf38      	it	cc
 80362fa:	2001      	movcc	r0, #1
 80362fc:	f7da f91a 	bl	8010534 <__aeabi_ui2d>
 8036300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036302:	4606      	mov	r6, r0
 8036304:	460f      	mov	r7, r1
 8036306:	b9fb      	cbnz	r3, 8036348 <_strtod_l+0xb80>
 8036308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803630c:	9014      	str	r0, [sp, #80]	@ 0x50
 803630e:	9315      	str	r3, [sp, #84]	@ 0x54
 8036310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8036314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8036318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803631a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803631e:	1b5b      	subs	r3, r3, r5
 8036320:	9311      	str	r3, [sp, #68]	@ 0x44
 8036322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8036326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803632a:	f7fe feb3 	bl	8035094 <__ulp>
 803632e:	4650      	mov	r0, sl
 8036330:	ec53 2b10 	vmov	r2, r3, d0
 8036334:	4659      	mov	r1, fp
 8036336:	f7da f977 	bl	8010628 <__aeabi_dmul>
 803633a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803633e:	f7d9 ffbd 	bl	80102bc <__adddf3>
 8036342:	4682      	mov	sl, r0
 8036344:	468b      	mov	fp, r1
 8036346:	e770      	b.n	803622a <_strtod_l+0xa62>
 8036348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803634c:	e7e0      	b.n	8036310 <_strtod_l+0xb48>
 803634e:	a30e      	add	r3, pc, #56	@ (adr r3, 8036388 <_strtod_l+0xbc0>)
 8036350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036354:	f7da fbda 	bl	8010b0c <__aeabi_dcmplt>
 8036358:	e798      	b.n	803628c <_strtod_l+0xac4>
 803635a:	2300      	movs	r3, #0
 803635c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803635e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8036360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8036362:	6013      	str	r3, [r2, #0]
 8036364:	f7ff ba6d 	b.w	8035842 <_strtod_l+0x7a>
 8036368:	2a65      	cmp	r2, #101	@ 0x65
 803636a:	f43f ab66 	beq.w	8035a3a <_strtod_l+0x272>
 803636e:	2a45      	cmp	r2, #69	@ 0x45
 8036370:	f43f ab63 	beq.w	8035a3a <_strtod_l+0x272>
 8036374:	2301      	movs	r3, #1
 8036376:	f7ff bb9e 	b.w	8035ab6 <_strtod_l+0x2ee>
 803637a:	bf00      	nop
 803637c:	f3af 8000 	nop.w
 8036380:	ffc00000 	.word	0xffc00000
 8036384:	41dfffff 	.word	0x41dfffff
 8036388:	94a03595 	.word	0x94a03595
 803638c:	3fcfffff 	.word	0x3fcfffff

08036390 <_strtod_r>:
 8036390:	4b01      	ldr	r3, [pc, #4]	@ (8036398 <_strtod_r+0x8>)
 8036392:	f7ff ba19 	b.w	80357c8 <_strtod_l>
 8036396:	bf00      	nop
 8036398:	2000016c 	.word	0x2000016c

0803639c <_strtoul_l.constprop.0>:
 803639c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80363a0:	4e34      	ldr	r6, [pc, #208]	@ (8036474 <_strtoul_l.constprop.0+0xd8>)
 80363a2:	4686      	mov	lr, r0
 80363a4:	460d      	mov	r5, r1
 80363a6:	4628      	mov	r0, r5
 80363a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80363ac:	5d37      	ldrb	r7, [r6, r4]
 80363ae:	f017 0708 	ands.w	r7, r7, #8
 80363b2:	d1f8      	bne.n	80363a6 <_strtoul_l.constprop.0+0xa>
 80363b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80363b6:	d12f      	bne.n	8036418 <_strtoul_l.constprop.0+0x7c>
 80363b8:	782c      	ldrb	r4, [r5, #0]
 80363ba:	2701      	movs	r7, #1
 80363bc:	1c85      	adds	r5, r0, #2
 80363be:	f033 0010 	bics.w	r0, r3, #16
 80363c2:	d109      	bne.n	80363d8 <_strtoul_l.constprop.0+0x3c>
 80363c4:	2c30      	cmp	r4, #48	@ 0x30
 80363c6:	d12c      	bne.n	8036422 <_strtoul_l.constprop.0+0x86>
 80363c8:	7828      	ldrb	r0, [r5, #0]
 80363ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80363ce:	2858      	cmp	r0, #88	@ 0x58
 80363d0:	d127      	bne.n	8036422 <_strtoul_l.constprop.0+0x86>
 80363d2:	786c      	ldrb	r4, [r5, #1]
 80363d4:	2310      	movs	r3, #16
 80363d6:	3502      	adds	r5, #2
 80363d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80363dc:	2600      	movs	r6, #0
 80363de:	fbb8 f8f3 	udiv	r8, r8, r3
 80363e2:	fb03 f908 	mul.w	r9, r3, r8
 80363e6:	ea6f 0909 	mvn.w	r9, r9
 80363ea:	4630      	mov	r0, r6
 80363ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80363f0:	f1bc 0f09 	cmp.w	ip, #9
 80363f4:	d81c      	bhi.n	8036430 <_strtoul_l.constprop.0+0x94>
 80363f6:	4664      	mov	r4, ip
 80363f8:	42a3      	cmp	r3, r4
 80363fa:	dd2a      	ble.n	8036452 <_strtoul_l.constprop.0+0xb6>
 80363fc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8036400:	d007      	beq.n	8036412 <_strtoul_l.constprop.0+0x76>
 8036402:	4580      	cmp	r8, r0
 8036404:	d322      	bcc.n	803644c <_strtoul_l.constprop.0+0xb0>
 8036406:	d101      	bne.n	803640c <_strtoul_l.constprop.0+0x70>
 8036408:	45a1      	cmp	r9, r4
 803640a:	db1f      	blt.n	803644c <_strtoul_l.constprop.0+0xb0>
 803640c:	fb00 4003 	mla	r0, r0, r3, r4
 8036410:	2601      	movs	r6, #1
 8036412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8036416:	e7e9      	b.n	80363ec <_strtoul_l.constprop.0+0x50>
 8036418:	2c2b      	cmp	r4, #43	@ 0x2b
 803641a:	bf04      	itt	eq
 803641c:	782c      	ldrbeq	r4, [r5, #0]
 803641e:	1c85      	addeq	r5, r0, #2
 8036420:	e7cd      	b.n	80363be <_strtoul_l.constprop.0+0x22>
 8036422:	2b00      	cmp	r3, #0
 8036424:	d1d8      	bne.n	80363d8 <_strtoul_l.constprop.0+0x3c>
 8036426:	2c30      	cmp	r4, #48	@ 0x30
 8036428:	bf0c      	ite	eq
 803642a:	2308      	moveq	r3, #8
 803642c:	230a      	movne	r3, #10
 803642e:	e7d3      	b.n	80363d8 <_strtoul_l.constprop.0+0x3c>
 8036430:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8036434:	f1bc 0f19 	cmp.w	ip, #25
 8036438:	d801      	bhi.n	803643e <_strtoul_l.constprop.0+0xa2>
 803643a:	3c37      	subs	r4, #55	@ 0x37
 803643c:	e7dc      	b.n	80363f8 <_strtoul_l.constprop.0+0x5c>
 803643e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8036442:	f1bc 0f19 	cmp.w	ip, #25
 8036446:	d804      	bhi.n	8036452 <_strtoul_l.constprop.0+0xb6>
 8036448:	3c57      	subs	r4, #87	@ 0x57
 803644a:	e7d5      	b.n	80363f8 <_strtoul_l.constprop.0+0x5c>
 803644c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8036450:	e7df      	b.n	8036412 <_strtoul_l.constprop.0+0x76>
 8036452:	1c73      	adds	r3, r6, #1
 8036454:	d106      	bne.n	8036464 <_strtoul_l.constprop.0+0xc8>
 8036456:	2322      	movs	r3, #34	@ 0x22
 8036458:	f8ce 3000 	str.w	r3, [lr]
 803645c:	4630      	mov	r0, r6
 803645e:	b932      	cbnz	r2, 803646e <_strtoul_l.constprop.0+0xd2>
 8036460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8036464:	b107      	cbz	r7, 8036468 <_strtoul_l.constprop.0+0xcc>
 8036466:	4240      	negs	r0, r0
 8036468:	2a00      	cmp	r2, #0
 803646a:	d0f9      	beq.n	8036460 <_strtoul_l.constprop.0+0xc4>
 803646c:	b106      	cbz	r6, 8036470 <_strtoul_l.constprop.0+0xd4>
 803646e:	1e69      	subs	r1, r5, #1
 8036470:	6011      	str	r1, [r2, #0]
 8036472:	e7f5      	b.n	8036460 <_strtoul_l.constprop.0+0xc4>
 8036474:	0803d6c9 	.word	0x0803d6c9

08036478 <_strtoul_r>:
 8036478:	f7ff bf90 	b.w	803639c <_strtoul_l.constprop.0>

0803647c <strtoul>:
 803647c:	4613      	mov	r3, r2
 803647e:	460a      	mov	r2, r1
 8036480:	4601      	mov	r1, r0
 8036482:	4802      	ldr	r0, [pc, #8]	@ (803648c <strtoul+0x10>)
 8036484:	6800      	ldr	r0, [r0, #0]
 8036486:	f7ff bf89 	b.w	803639c <_strtoul_l.constprop.0>
 803648a:	bf00      	nop
 803648c:	200002d8 	.word	0x200002d8

08036490 <__submore>:
 8036490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036494:	460c      	mov	r4, r1
 8036496:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8036498:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803649c:	4299      	cmp	r1, r3
 803649e:	d11d      	bne.n	80364dc <__submore+0x4c>
 80364a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80364a4:	f7f9 ffba 	bl	803041c <_malloc_r>
 80364a8:	b918      	cbnz	r0, 80364b2 <__submore+0x22>
 80364aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80364ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80364b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80364b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80364b8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80364bc:	6320      	str	r0, [r4, #48]	@ 0x30
 80364be:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80364c2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80364c6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80364ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80364ce:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80364d2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80364d6:	6020      	str	r0, [r4, #0]
 80364d8:	2000      	movs	r0, #0
 80364da:	e7e8      	b.n	80364ae <__submore+0x1e>
 80364dc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80364de:	0077      	lsls	r7, r6, #1
 80364e0:	463a      	mov	r2, r7
 80364e2:	f7fe ffab 	bl	803543c <_realloc_r>
 80364e6:	4605      	mov	r5, r0
 80364e8:	2800      	cmp	r0, #0
 80364ea:	d0de      	beq.n	80364aa <__submore+0x1a>
 80364ec:	eb00 0806 	add.w	r8, r0, r6
 80364f0:	4601      	mov	r1, r0
 80364f2:	4632      	mov	r2, r6
 80364f4:	4640      	mov	r0, r8
 80364f6:	f7f8 ff71 	bl	802f3dc <memcpy>
 80364fa:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 80364fe:	f8c4 8000 	str.w	r8, [r4]
 8036502:	e7e9      	b.n	80364d8 <__submore+0x48>

08036504 <__ascii_wctomb>:
 8036504:	4603      	mov	r3, r0
 8036506:	4608      	mov	r0, r1
 8036508:	b141      	cbz	r1, 803651c <__ascii_wctomb+0x18>
 803650a:	2aff      	cmp	r2, #255	@ 0xff
 803650c:	d904      	bls.n	8036518 <__ascii_wctomb+0x14>
 803650e:	228a      	movs	r2, #138	@ 0x8a
 8036510:	601a      	str	r2, [r3, #0]
 8036512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8036516:	4770      	bx	lr
 8036518:	700a      	strb	r2, [r1, #0]
 803651a:	2001      	movs	r0, #1
 803651c:	4770      	bx	lr

0803651e <__swbuf_r>:
 803651e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036520:	460e      	mov	r6, r1
 8036522:	4614      	mov	r4, r2
 8036524:	4605      	mov	r5, r0
 8036526:	b118      	cbz	r0, 8036530 <__swbuf_r+0x12>
 8036528:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803652a:	b90b      	cbnz	r3, 8036530 <__swbuf_r+0x12>
 803652c:	f7f6 ff4a 	bl	802d3c4 <__sinit>
 8036530:	69a3      	ldr	r3, [r4, #24]
 8036532:	60a3      	str	r3, [r4, #8]
 8036534:	89a3      	ldrh	r3, [r4, #12]
 8036536:	0719      	lsls	r1, r3, #28
 8036538:	d501      	bpl.n	803653e <__swbuf_r+0x20>
 803653a:	6923      	ldr	r3, [r4, #16]
 803653c:	b943      	cbnz	r3, 8036550 <__swbuf_r+0x32>
 803653e:	4621      	mov	r1, r4
 8036540:	4628      	mov	r0, r5
 8036542:	f7f7 f8fb 	bl	802d73c <__swsetup_r>
 8036546:	b118      	cbz	r0, 8036550 <__swbuf_r+0x32>
 8036548:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803654c:	4638      	mov	r0, r7
 803654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8036550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036554:	b2f6      	uxtb	r6, r6
 8036556:	049a      	lsls	r2, r3, #18
 8036558:	4637      	mov	r7, r6
 803655a:	d406      	bmi.n	803656a <__swbuf_r+0x4c>
 803655c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8036560:	81a3      	strh	r3, [r4, #12]
 8036562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8036564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8036568:	6663      	str	r3, [r4, #100]	@ 0x64
 803656a:	6823      	ldr	r3, [r4, #0]
 803656c:	6922      	ldr	r2, [r4, #16]
 803656e:	1a98      	subs	r0, r3, r2
 8036570:	6963      	ldr	r3, [r4, #20]
 8036572:	4283      	cmp	r3, r0
 8036574:	dc05      	bgt.n	8036582 <__swbuf_r+0x64>
 8036576:	4621      	mov	r1, r4
 8036578:	4628      	mov	r0, r5
 803657a:	f7f6 fde1 	bl	802d140 <_fflush_r>
 803657e:	2800      	cmp	r0, #0
 8036580:	d1e2      	bne.n	8036548 <__swbuf_r+0x2a>
 8036582:	68a3      	ldr	r3, [r4, #8]
 8036584:	3b01      	subs	r3, #1
 8036586:	60a3      	str	r3, [r4, #8]
 8036588:	6823      	ldr	r3, [r4, #0]
 803658a:	1c5a      	adds	r2, r3, #1
 803658c:	6022      	str	r2, [r4, #0]
 803658e:	701e      	strb	r6, [r3, #0]
 8036590:	6962      	ldr	r2, [r4, #20]
 8036592:	1c43      	adds	r3, r0, #1
 8036594:	429a      	cmp	r2, r3
 8036596:	d004      	beq.n	80365a2 <__swbuf_r+0x84>
 8036598:	89a3      	ldrh	r3, [r4, #12]
 803659a:	07db      	lsls	r3, r3, #31
 803659c:	d5d6      	bpl.n	803654c <__swbuf_r+0x2e>
 803659e:	2e0a      	cmp	r6, #10
 80365a0:	d1d4      	bne.n	803654c <__swbuf_r+0x2e>
 80365a2:	4621      	mov	r1, r4
 80365a4:	4628      	mov	r0, r5
 80365a6:	f7f6 fdcb 	bl	802d140 <_fflush_r>
 80365aa:	2800      	cmp	r0, #0
 80365ac:	d0ce      	beq.n	803654c <__swbuf_r+0x2e>
 80365ae:	e7cb      	b.n	8036548 <__swbuf_r+0x2a>

080365b0 <_raise_r>:
 80365b0:	291f      	cmp	r1, #31
 80365b2:	b538      	push	{r3, r4, r5, lr}
 80365b4:	4605      	mov	r5, r0
 80365b6:	460c      	mov	r4, r1
 80365b8:	d904      	bls.n	80365c4 <_raise_r+0x14>
 80365ba:	2316      	movs	r3, #22
 80365bc:	6003      	str	r3, [r0, #0]
 80365be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80365c2:	bd38      	pop	{r3, r4, r5, pc}
 80365c4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80365c8:	b112      	cbz	r2, 80365d0 <_raise_r+0x20>
 80365ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80365ce:	b94b      	cbnz	r3, 80365e4 <_raise_r+0x34>
 80365d0:	4628      	mov	r0, r5
 80365d2:	f000 f857 	bl	8036684 <_getpid_r>
 80365d6:	4622      	mov	r2, r4
 80365d8:	4601      	mov	r1, r0
 80365da:	4628      	mov	r0, r5
 80365dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80365e0:	f000 b83e 	b.w	8036660 <_kill_r>
 80365e4:	2b01      	cmp	r3, #1
 80365e6:	d00a      	beq.n	80365fe <_raise_r+0x4e>
 80365e8:	1c59      	adds	r1, r3, #1
 80365ea:	d103      	bne.n	80365f4 <_raise_r+0x44>
 80365ec:	2316      	movs	r3, #22
 80365ee:	6003      	str	r3, [r0, #0]
 80365f0:	2001      	movs	r0, #1
 80365f2:	e7e6      	b.n	80365c2 <_raise_r+0x12>
 80365f4:	2100      	movs	r1, #0
 80365f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80365fa:	4620      	mov	r0, r4
 80365fc:	4798      	blx	r3
 80365fe:	2000      	movs	r0, #0
 8036600:	e7df      	b.n	80365c2 <_raise_r+0x12>
	...

08036604 <raise>:
 8036604:	4b02      	ldr	r3, [pc, #8]	@ (8036610 <raise+0xc>)
 8036606:	4601      	mov	r1, r0
 8036608:	6818      	ldr	r0, [r3, #0]
 803660a:	f7ff bfd1 	b.w	80365b0 <_raise_r>
 803660e:	bf00      	nop
 8036610:	200002d8 	.word	0x200002d8

08036614 <__gettzinfo>:
 8036614:	4800      	ldr	r0, [pc, #0]	@ (8036618 <__gettzinfo+0x4>)
 8036616:	4770      	bx	lr
 8036618:	20000818 	.word	0x20000818

0803661c <_fstat_r>:
 803661c:	b538      	push	{r3, r4, r5, lr}
 803661e:	4d07      	ldr	r5, [pc, #28]	@ (803663c <_fstat_r+0x20>)
 8036620:	2300      	movs	r3, #0
 8036622:	4604      	mov	r4, r0
 8036624:	4608      	mov	r0, r1
 8036626:	4611      	mov	r1, r2
 8036628:	602b      	str	r3, [r5, #0]
 803662a:	f7dc f97e 	bl	801292a <_fstat>
 803662e:	1c43      	adds	r3, r0, #1
 8036630:	d102      	bne.n	8036638 <_fstat_r+0x1c>
 8036632:	682b      	ldr	r3, [r5, #0]
 8036634:	b103      	cbz	r3, 8036638 <_fstat_r+0x1c>
 8036636:	6023      	str	r3, [r4, #0]
 8036638:	bd38      	pop	{r3, r4, r5, pc}
 803663a:	bf00      	nop
 803663c:	2001a104 	.word	0x2001a104

08036640 <_isatty_r>:
 8036640:	b538      	push	{r3, r4, r5, lr}
 8036642:	4d06      	ldr	r5, [pc, #24]	@ (803665c <_isatty_r+0x1c>)
 8036644:	2300      	movs	r3, #0
 8036646:	4604      	mov	r4, r0
 8036648:	4608      	mov	r0, r1
 803664a:	602b      	str	r3, [r5, #0]
 803664c:	f7dc f972 	bl	8012934 <_isatty>
 8036650:	1c43      	adds	r3, r0, #1
 8036652:	d102      	bne.n	803665a <_isatty_r+0x1a>
 8036654:	682b      	ldr	r3, [r5, #0]
 8036656:	b103      	cbz	r3, 803665a <_isatty_r+0x1a>
 8036658:	6023      	str	r3, [r4, #0]
 803665a:	bd38      	pop	{r3, r4, r5, pc}
 803665c:	2001a104 	.word	0x2001a104

08036660 <_kill_r>:
 8036660:	b538      	push	{r3, r4, r5, lr}
 8036662:	4d07      	ldr	r5, [pc, #28]	@ (8036680 <_kill_r+0x20>)
 8036664:	2300      	movs	r3, #0
 8036666:	4604      	mov	r4, r0
 8036668:	4608      	mov	r0, r1
 803666a:	4611      	mov	r1, r2
 803666c:	602b      	str	r3, [r5, #0]
 803666e:	f7dc f92d 	bl	80128cc <_kill>
 8036672:	1c43      	adds	r3, r0, #1
 8036674:	d102      	bne.n	803667c <_kill_r+0x1c>
 8036676:	682b      	ldr	r3, [r5, #0]
 8036678:	b103      	cbz	r3, 803667c <_kill_r+0x1c>
 803667a:	6023      	str	r3, [r4, #0]
 803667c:	bd38      	pop	{r3, r4, r5, pc}
 803667e:	bf00      	nop
 8036680:	2001a104 	.word	0x2001a104

08036684 <_getpid_r>:
 8036684:	f7dc b920 	b.w	80128c8 <_getpid>

08036688 <_sbrk_r>:
 8036688:	b538      	push	{r3, r4, r5, lr}
 803668a:	4d06      	ldr	r5, [pc, #24]	@ (80366a4 <_sbrk_r+0x1c>)
 803668c:	2300      	movs	r3, #0
 803668e:	4604      	mov	r4, r0
 8036690:	4608      	mov	r0, r1
 8036692:	602b      	str	r3, [r5, #0]
 8036694:	f7dc f952 	bl	801293c <_sbrk>
 8036698:	1c43      	adds	r3, r0, #1
 803669a:	d102      	bne.n	80366a2 <_sbrk_r+0x1a>
 803669c:	682b      	ldr	r3, [r5, #0]
 803669e:	b103      	cbz	r3, 80366a2 <_sbrk_r+0x1a>
 80366a0:	6023      	str	r3, [r4, #0]
 80366a2:	bd38      	pop	{r3, r4, r5, pc}
 80366a4:	2001a104 	.word	0x2001a104

080366a8 <sysconf>:
 80366a8:	2808      	cmp	r0, #8
 80366aa:	b508      	push	{r3, lr}
 80366ac:	d006      	beq.n	80366bc <sysconf+0x14>
 80366ae:	f7f8 fe5d 	bl	802f36c <__errno>
 80366b2:	2316      	movs	r3, #22
 80366b4:	6003      	str	r3, [r0, #0]
 80366b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80366ba:	bd08      	pop	{r3, pc}
 80366bc:	2080      	movs	r0, #128	@ 0x80
 80366be:	e7fc      	b.n	80366ba <sysconf+0x12>

080366c0 <_strtoll_l.constprop.0>:
 80366c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80366c4:	b085      	sub	sp, #20
 80366c6:	4690      	mov	r8, r2
 80366c8:	4a43      	ldr	r2, [pc, #268]	@ (80367d8 <_strtoll_l.constprop.0+0x118>)
 80366ca:	9002      	str	r0, [sp, #8]
 80366cc:	4689      	mov	r9, r1
 80366ce:	461e      	mov	r6, r3
 80366d0:	460d      	mov	r5, r1
 80366d2:	462b      	mov	r3, r5
 80366d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80366d8:	5d17      	ldrb	r7, [r2, r4]
 80366da:	f017 0708 	ands.w	r7, r7, #8
 80366de:	d1f8      	bne.n	80366d2 <_strtoll_l.constprop.0+0x12>
 80366e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80366e2:	d149      	bne.n	8036778 <_strtoll_l.constprop.0+0xb8>
 80366e4:	782c      	ldrb	r4, [r5, #0]
 80366e6:	2701      	movs	r7, #1
 80366e8:	1c9d      	adds	r5, r3, #2
 80366ea:	f036 0310 	bics.w	r3, r6, #16
 80366ee:	d109      	bne.n	8036704 <_strtoll_l.constprop.0+0x44>
 80366f0:	2c30      	cmp	r4, #48	@ 0x30
 80366f2:	d146      	bne.n	8036782 <_strtoll_l.constprop.0+0xc2>
 80366f4:	782b      	ldrb	r3, [r5, #0]
 80366f6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80366fa:	2b58      	cmp	r3, #88	@ 0x58
 80366fc:	d141      	bne.n	8036782 <_strtoll_l.constprop.0+0xc2>
 80366fe:	786c      	ldrb	r4, [r5, #1]
 8036700:	2610      	movs	r6, #16
 8036702:	3502      	adds	r5, #2
 8036704:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8036708:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 803670c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8036710:	17f3      	asrs	r3, r6, #31
 8036712:	4632      	mov	r2, r6
 8036714:	4658      	mov	r0, fp
 8036716:	4651      	mov	r1, sl
 8036718:	9303      	str	r3, [sp, #12]
 803671a:	f7da fb1d 	bl	8010d58 <__aeabi_uldivmod>
 803671e:	9201      	str	r2, [sp, #4]
 8036720:	2200      	movs	r2, #0
 8036722:	468e      	mov	lr, r1
 8036724:	4684      	mov	ip, r0
 8036726:	4611      	mov	r1, r2
 8036728:	4610      	mov	r0, r2
 803672a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803672e:	2b09      	cmp	r3, #9
 8036730:	d905      	bls.n	803673e <_strtoll_l.constprop.0+0x7e>
 8036732:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8036736:	2b19      	cmp	r3, #25
 8036738:	d82a      	bhi.n	8036790 <_strtoll_l.constprop.0+0xd0>
 803673a:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803673e:	429e      	cmp	r6, r3
 8036740:	dd30      	ble.n	80367a4 <_strtoll_l.constprop.0+0xe4>
 8036742:	1c54      	adds	r4, r2, #1
 8036744:	d015      	beq.n	8036772 <_strtoll_l.constprop.0+0xb2>
 8036746:	4584      	cmp	ip, r0
 8036748:	eb7e 0201 	sbcs.w	r2, lr, r1
 803674c:	d327      	bcc.n	803679e <_strtoll_l.constprop.0+0xde>
 803674e:	458e      	cmp	lr, r1
 8036750:	bf08      	it	eq
 8036752:	4584      	cmpeq	ip, r0
 8036754:	d102      	bne.n	803675c <_strtoll_l.constprop.0+0x9c>
 8036756:	9a01      	ldr	r2, [sp, #4]
 8036758:	429a      	cmp	r2, r3
 803675a:	db20      	blt.n	803679e <_strtoll_l.constprop.0+0xde>
 803675c:	9a03      	ldr	r2, [sp, #12]
 803675e:	4371      	muls	r1, r6
 8036760:	fb00 1102 	mla	r1, r0, r2, r1
 8036764:	fba6 0200 	umull	r0, r2, r6, r0
 8036768:	440a      	add	r2, r1
 803676a:	1818      	adds	r0, r3, r0
 803676c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8036770:	2201      	movs	r2, #1
 8036772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8036776:	e7d8      	b.n	803672a <_strtoll_l.constprop.0+0x6a>
 8036778:	2c2b      	cmp	r4, #43	@ 0x2b
 803677a:	bf04      	itt	eq
 803677c:	782c      	ldrbeq	r4, [r5, #0]
 803677e:	1c9d      	addeq	r5, r3, #2
 8036780:	e7b3      	b.n	80366ea <_strtoll_l.constprop.0+0x2a>
 8036782:	2e00      	cmp	r6, #0
 8036784:	d1be      	bne.n	8036704 <_strtoll_l.constprop.0+0x44>
 8036786:	2c30      	cmp	r4, #48	@ 0x30
 8036788:	bf0c      	ite	eq
 803678a:	2608      	moveq	r6, #8
 803678c:	260a      	movne	r6, #10
 803678e:	e7b9      	b.n	8036704 <_strtoll_l.constprop.0+0x44>
 8036790:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8036794:	2b19      	cmp	r3, #25
 8036796:	d805      	bhi.n	80367a4 <_strtoll_l.constprop.0+0xe4>
 8036798:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 803679c:	e7cf      	b.n	803673e <_strtoll_l.constprop.0+0x7e>
 803679e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80367a2:	e7e6      	b.n	8036772 <_strtoll_l.constprop.0+0xb2>
 80367a4:	1c53      	adds	r3, r2, #1
 80367a6:	d10a      	bne.n	80367be <_strtoll_l.constprop.0+0xfe>
 80367a8:	9a02      	ldr	r2, [sp, #8]
 80367aa:	2322      	movs	r3, #34	@ 0x22
 80367ac:	6013      	str	r3, [r2, #0]
 80367ae:	4658      	mov	r0, fp
 80367b0:	4651      	mov	r1, sl
 80367b2:	f1b8 0f00 	cmp.w	r8, #0
 80367b6:	d10a      	bne.n	80367ce <_strtoll_l.constprop.0+0x10e>
 80367b8:	b005      	add	sp, #20
 80367ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80367be:	b117      	cbz	r7, 80367c6 <_strtoll_l.constprop.0+0x106>
 80367c0:	4240      	negs	r0, r0
 80367c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80367c6:	f1b8 0f00 	cmp.w	r8, #0
 80367ca:	d0f5      	beq.n	80367b8 <_strtoll_l.constprop.0+0xf8>
 80367cc:	b10a      	cbz	r2, 80367d2 <_strtoll_l.constprop.0+0x112>
 80367ce:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80367d2:	f8c8 9000 	str.w	r9, [r8]
 80367d6:	e7ef      	b.n	80367b8 <_strtoll_l.constprop.0+0xf8>
 80367d8:	0803d6c9 	.word	0x0803d6c9

080367dc <_strtoll_r>:
 80367dc:	f7ff bf70 	b.w	80366c0 <_strtoll_l.constprop.0>

080367e0 <__libc_fini_array>:
 80367e0:	b538      	push	{r3, r4, r5, lr}
 80367e2:	4d07      	ldr	r5, [pc, #28]	@ (8036800 <__libc_fini_array+0x20>)
 80367e4:	4c07      	ldr	r4, [pc, #28]	@ (8036804 <__libc_fini_array+0x24>)
 80367e6:	1b64      	subs	r4, r4, r5
 80367e8:	10a4      	asrs	r4, r4, #2
 80367ea:	b91c      	cbnz	r4, 80367f4 <__libc_fini_array+0x14>
 80367ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80367f0:	f000 bc9a 	b.w	8037128 <_fini>
 80367f4:	3c01      	subs	r4, #1
 80367f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80367fa:	4798      	blx	r3
 80367fc:	e7f5      	b.n	80367ea <__libc_fini_array+0xa>
 80367fe:	bf00      	nop
 8036800:	0803dae0 	.word	0x0803dae0
 8036804:	0803dae4 	.word	0x0803dae4

08036808 <_strtoull_l.constprop.0>:
 8036808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803680c:	4691      	mov	r9, r2
 803680e:	4a48      	ldr	r2, [pc, #288]	@ (8036930 <_strtoull_l.constprop.0+0x128>)
 8036810:	9001      	str	r0, [sp, #4]
 8036812:	468a      	mov	sl, r1
 8036814:	461e      	mov	r6, r3
 8036816:	460d      	mov	r5, r1
 8036818:	462b      	mov	r3, r5
 803681a:	f815 4b01 	ldrb.w	r4, [r5], #1
 803681e:	5d17      	ldrb	r7, [r2, r4]
 8036820:	f017 0708 	ands.w	r7, r7, #8
 8036824:	d1f8      	bne.n	8036818 <_strtoull_l.constprop.0+0x10>
 8036826:	2c2d      	cmp	r4, #45	@ 0x2d
 8036828:	d14a      	bne.n	80368c0 <_strtoull_l.constprop.0+0xb8>
 803682a:	782c      	ldrb	r4, [r5, #0]
 803682c:	2701      	movs	r7, #1
 803682e:	1c9d      	adds	r5, r3, #2
 8036830:	f036 0310 	bics.w	r3, r6, #16
 8036834:	d109      	bne.n	803684a <_strtoull_l.constprop.0+0x42>
 8036836:	2c30      	cmp	r4, #48	@ 0x30
 8036838:	d147      	bne.n	80368ca <_strtoull_l.constprop.0+0xc2>
 803683a:	782b      	ldrb	r3, [r5, #0]
 803683c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8036840:	2b58      	cmp	r3, #88	@ 0x58
 8036842:	d142      	bne.n	80368ca <_strtoull_l.constprop.0+0xc2>
 8036844:	786c      	ldrb	r4, [r5, #1]
 8036846:	2610      	movs	r6, #16
 8036848:	3502      	adds	r5, #2
 803684a:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803684e:	4632      	mov	r2, r6
 8036850:	465b      	mov	r3, fp
 8036852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8036856:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803685a:	f7da fa7d 	bl	8010d58 <__aeabi_uldivmod>
 803685e:	4632      	mov	r2, r6
 8036860:	9000      	str	r0, [sp, #0]
 8036862:	4688      	mov	r8, r1
 8036864:	465b      	mov	r3, fp
 8036866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803686a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803686e:	f7da fa73 	bl	8010d58 <__aeabi_uldivmod>
 8036872:	2300      	movs	r3, #0
 8036874:	4618      	mov	r0, r3
 8036876:	4619      	mov	r1, r3
 8036878:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 803687c:	f1bc 0f09 	cmp.w	ip, #9
 8036880:	d82a      	bhi.n	80368d8 <_strtoull_l.constprop.0+0xd0>
 8036882:	4664      	mov	r4, ip
 8036884:	42a6      	cmp	r6, r4
 8036886:	dd38      	ble.n	80368fa <_strtoull_l.constprop.0+0xf2>
 8036888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 803688c:	d015      	beq.n	80368ba <_strtoull_l.constprop.0+0xb2>
 803688e:	9b00      	ldr	r3, [sp, #0]
 8036890:	4283      	cmp	r3, r0
 8036892:	eb78 0301 	sbcs.w	r3, r8, r1
 8036896:	d32d      	bcc.n	80368f4 <_strtoull_l.constprop.0+0xec>
 8036898:	9b00      	ldr	r3, [sp, #0]
 803689a:	4588      	cmp	r8, r1
 803689c:	bf08      	it	eq
 803689e:	4283      	cmpeq	r3, r0
 80368a0:	d101      	bne.n	80368a6 <_strtoull_l.constprop.0+0x9e>
 80368a2:	42a2      	cmp	r2, r4
 80368a4:	db26      	blt.n	80368f4 <_strtoull_l.constprop.0+0xec>
 80368a6:	4371      	muls	r1, r6
 80368a8:	fb00 110b 	mla	r1, r0, fp, r1
 80368ac:	fba6 0300 	umull	r0, r3, r6, r0
 80368b0:	4419      	add	r1, r3
 80368b2:	1820      	adds	r0, r4, r0
 80368b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80368b8:	2301      	movs	r3, #1
 80368ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80368be:	e7db      	b.n	8036878 <_strtoull_l.constprop.0+0x70>
 80368c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80368c2:	bf04      	itt	eq
 80368c4:	782c      	ldrbeq	r4, [r5, #0]
 80368c6:	1c9d      	addeq	r5, r3, #2
 80368c8:	e7b2      	b.n	8036830 <_strtoull_l.constprop.0+0x28>
 80368ca:	2e00      	cmp	r6, #0
 80368cc:	d1bd      	bne.n	803684a <_strtoull_l.constprop.0+0x42>
 80368ce:	2c30      	cmp	r4, #48	@ 0x30
 80368d0:	bf0c      	ite	eq
 80368d2:	2608      	moveq	r6, #8
 80368d4:	260a      	movne	r6, #10
 80368d6:	e7b8      	b.n	803684a <_strtoull_l.constprop.0+0x42>
 80368d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80368dc:	f1bc 0f19 	cmp.w	ip, #25
 80368e0:	d801      	bhi.n	80368e6 <_strtoull_l.constprop.0+0xde>
 80368e2:	3c37      	subs	r4, #55	@ 0x37
 80368e4:	e7ce      	b.n	8036884 <_strtoull_l.constprop.0+0x7c>
 80368e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80368ea:	f1bc 0f19 	cmp.w	ip, #25
 80368ee:	d804      	bhi.n	80368fa <_strtoull_l.constprop.0+0xf2>
 80368f0:	3c57      	subs	r4, #87	@ 0x57
 80368f2:	e7c7      	b.n	8036884 <_strtoull_l.constprop.0+0x7c>
 80368f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80368f8:	e7df      	b.n	80368ba <_strtoull_l.constprop.0+0xb2>
 80368fa:	1c5a      	adds	r2, r3, #1
 80368fc:	d10a      	bne.n	8036914 <_strtoull_l.constprop.0+0x10c>
 80368fe:	9901      	ldr	r1, [sp, #4]
 8036900:	2222      	movs	r2, #34	@ 0x22
 8036902:	600a      	str	r2, [r1, #0]
 8036904:	4618      	mov	r0, r3
 8036906:	4619      	mov	r1, r3
 8036908:	f1b9 0f00 	cmp.w	r9, #0
 803690c:	d10a      	bne.n	8036924 <_strtoull_l.constprop.0+0x11c>
 803690e:	b003      	add	sp, #12
 8036910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036914:	b117      	cbz	r7, 803691c <_strtoull_l.constprop.0+0x114>
 8036916:	4240      	negs	r0, r0
 8036918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803691c:	f1b9 0f00 	cmp.w	r9, #0
 8036920:	d0f5      	beq.n	803690e <_strtoull_l.constprop.0+0x106>
 8036922:	b10b      	cbz	r3, 8036928 <_strtoull_l.constprop.0+0x120>
 8036924:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8036928:	f8c9 a000 	str.w	sl, [r9]
 803692c:	e7ef      	b.n	803690e <_strtoull_l.constprop.0+0x106>
 803692e:	bf00      	nop
 8036930:	0803d6c9 	.word	0x0803d6c9

08036934 <_strtoull_r>:
 8036934:	f7ff bf68 	b.w	8036808 <_strtoull_l.constprop.0>

08036938 <_mbrtowc_r>:
 8036938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803693a:	4c0a      	ldr	r4, [pc, #40]	@ (8036964 <_mbrtowc_r+0x2c>)
 803693c:	9e08      	ldr	r6, [sp, #32]
 803693e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8036942:	9600      	str	r6, [sp, #0]
 8036944:	4605      	mov	r5, r0
 8036946:	4614      	mov	r4, r2
 8036948:	b912      	cbnz	r2, 8036950 <_mbrtowc_r+0x18>
 803694a:	4a07      	ldr	r2, [pc, #28]	@ (8036968 <_mbrtowc_r+0x30>)
 803694c:	2301      	movs	r3, #1
 803694e:	4621      	mov	r1, r4
 8036950:	47b8      	blx	r7
 8036952:	1c43      	adds	r3, r0, #1
 8036954:	bf01      	itttt	eq
 8036956:	2300      	moveq	r3, #0
 8036958:	6033      	streq	r3, [r6, #0]
 803695a:	238a      	moveq	r3, #138	@ 0x8a
 803695c:	602b      	streq	r3, [r5, #0]
 803695e:	b003      	add	sp, #12
 8036960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8036962:	bf00      	nop
 8036964:	2000016c 	.word	0x2000016c
 8036968:	0803d2aa 	.word	0x0803d2aa

0803696c <iswspace>:
 803696c:	2100      	movs	r1, #0
 803696e:	f000 b801 	b.w	8036974 <iswspace_l>
	...

08036974 <iswspace_l>:
 8036974:	28ff      	cmp	r0, #255	@ 0xff
 8036976:	bf9d      	ittte	ls
 8036978:	4b02      	ldrls	r3, [pc, #8]	@ (8036984 <iswspace_l+0x10>)
 803697a:	5c18      	ldrbls	r0, [r3, r0]
 803697c:	f000 0008 	andls.w	r0, r0, #8
 8036980:	2000      	movhi	r0, #0
 8036982:	4770      	bx	lr
 8036984:	0803d6c9 	.word	0x0803d6c9

08036988 <__register_exitproc>:
 8036988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803698c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8036a04 <__register_exitproc+0x7c>
 8036990:	4606      	mov	r6, r0
 8036992:	f8da 0000 	ldr.w	r0, [sl]
 8036996:	4698      	mov	r8, r3
 8036998:	460f      	mov	r7, r1
 803699a:	4691      	mov	r9, r2
 803699c:	f7f8 fd1b 	bl	802f3d6 <__retarget_lock_acquire_recursive>
 80369a0:	4b16      	ldr	r3, [pc, #88]	@ (80369fc <__register_exitproc+0x74>)
 80369a2:	681c      	ldr	r4, [r3, #0]
 80369a4:	b90c      	cbnz	r4, 80369aa <__register_exitproc+0x22>
 80369a6:	4c16      	ldr	r4, [pc, #88]	@ (8036a00 <__register_exitproc+0x78>)
 80369a8:	601c      	str	r4, [r3, #0]
 80369aa:	6865      	ldr	r5, [r4, #4]
 80369ac:	f8da 0000 	ldr.w	r0, [sl]
 80369b0:	2d1f      	cmp	r5, #31
 80369b2:	dd05      	ble.n	80369c0 <__register_exitproc+0x38>
 80369b4:	f7f8 fd11 	bl	802f3da <__retarget_lock_release_recursive>
 80369b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80369bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80369c0:	b19e      	cbz	r6, 80369ea <__register_exitproc+0x62>
 80369c2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80369c6:	2201      	movs	r2, #1
 80369c8:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80369cc:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80369d0:	40aa      	lsls	r2, r5
 80369d2:	4313      	orrs	r3, r2
 80369d4:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80369d8:	2e02      	cmp	r6, #2
 80369da:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80369de:	bf02      	ittt	eq
 80369e0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80369e4:	4313      	orreq	r3, r2
 80369e6:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80369ea:	1c6b      	adds	r3, r5, #1
 80369ec:	3502      	adds	r5, #2
 80369ee:	6063      	str	r3, [r4, #4]
 80369f0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80369f4:	f7f8 fcf1 	bl	802f3da <__retarget_lock_release_recursive>
 80369f8:	2000      	movs	r0, #0
 80369fa:	e7df      	b.n	80369bc <__register_exitproc+0x34>
 80369fc:	2001a110 	.word	0x2001a110
 8036a00:	2001a148 	.word	0x2001a148
 8036a04:	20000400 	.word	0x20000400

08036a08 <nan>:
 8036a08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8036a10 <nan+0x8>
 8036a0c:	4770      	bx	lr
 8036a0e:	bf00      	nop
 8036a10:	00000000 	.word	0x00000000
 8036a14:	7ff80000 	.word	0x7ff80000

08036a18 <nanf>:
 8036a18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8036a20 <nanf+0x8>
 8036a1c:	4770      	bx	lr
 8036a1e:	bf00      	nop
 8036a20:	7fc00000 	.word	0x7fc00000

08036a24 <_calloc_r>:
 8036a24:	b538      	push	{r3, r4, r5, lr}
 8036a26:	fba1 1502 	umull	r1, r5, r1, r2
 8036a2a:	b935      	cbnz	r5, 8036a3a <_calloc_r+0x16>
 8036a2c:	f7f9 fcf6 	bl	803041c <_malloc_r>
 8036a30:	4604      	mov	r4, r0
 8036a32:	b938      	cbnz	r0, 8036a44 <_calloc_r+0x20>
 8036a34:	2400      	movs	r4, #0
 8036a36:	4620      	mov	r0, r4
 8036a38:	bd38      	pop	{r3, r4, r5, pc}
 8036a3a:	f7f8 fc97 	bl	802f36c <__errno>
 8036a3e:	230c      	movs	r3, #12
 8036a40:	6003      	str	r3, [r0, #0]
 8036a42:	e7f7      	b.n	8036a34 <_calloc_r+0x10>
 8036a44:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8036a48:	f022 0203 	bic.w	r2, r2, #3
 8036a4c:	3a04      	subs	r2, #4
 8036a4e:	2a24      	cmp	r2, #36	@ 0x24
 8036a50:	d819      	bhi.n	8036a86 <_calloc_r+0x62>
 8036a52:	2a13      	cmp	r2, #19
 8036a54:	d915      	bls.n	8036a82 <_calloc_r+0x5e>
 8036a56:	2a1b      	cmp	r2, #27
 8036a58:	e9c0 5500 	strd	r5, r5, [r0]
 8036a5c:	d806      	bhi.n	8036a6c <_calloc_r+0x48>
 8036a5e:	f100 0308 	add.w	r3, r0, #8
 8036a62:	2200      	movs	r2, #0
 8036a64:	e9c3 2200 	strd	r2, r2, [r3]
 8036a68:	609a      	str	r2, [r3, #8]
 8036a6a:	e7e4      	b.n	8036a36 <_calloc_r+0x12>
 8036a6c:	2a24      	cmp	r2, #36	@ 0x24
 8036a6e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8036a72:	bf11      	iteee	ne
 8036a74:	f100 0310 	addne.w	r3, r0, #16
 8036a78:	6105      	streq	r5, [r0, #16]
 8036a7a:	f100 0318 	addeq.w	r3, r0, #24
 8036a7e:	6145      	streq	r5, [r0, #20]
 8036a80:	e7ef      	b.n	8036a62 <_calloc_r+0x3e>
 8036a82:	4603      	mov	r3, r0
 8036a84:	e7ed      	b.n	8036a62 <_calloc_r+0x3e>
 8036a86:	4629      	mov	r1, r5
 8036a88:	f7f6 ff42 	bl	802d910 <memset>
 8036a8c:	e7d3      	b.n	8036a36 <_calloc_r+0x12>
	...

08036a90 <__env_lock>:
 8036a90:	4801      	ldr	r0, [pc, #4]	@ (8036a98 <__env_lock+0x8>)
 8036a92:	f7f8 bca0 	b.w	802f3d6 <__retarget_lock_acquire_recursive>
 8036a96:	bf00      	nop
 8036a98:	2001a109 	.word	0x2001a109

08036a9c <__env_unlock>:
 8036a9c:	4801      	ldr	r0, [pc, #4]	@ (8036aa4 <__env_unlock+0x8>)
 8036a9e:	f7f8 bc9c 	b.w	802f3da <__retarget_lock_release_recursive>
 8036aa2:	bf00      	nop
 8036aa4:	2001a109 	.word	0x2001a109

08036aa8 <rshift>:
 8036aa8:	6903      	ldr	r3, [r0, #16]
 8036aaa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8036aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8036ab2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8036ab6:	f100 0414 	add.w	r4, r0, #20
 8036aba:	dd45      	ble.n	8036b48 <rshift+0xa0>
 8036abc:	f011 011f 	ands.w	r1, r1, #31
 8036ac0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8036ac4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8036ac8:	d10c      	bne.n	8036ae4 <rshift+0x3c>
 8036aca:	f100 0710 	add.w	r7, r0, #16
 8036ace:	4629      	mov	r1, r5
 8036ad0:	42b1      	cmp	r1, r6
 8036ad2:	d334      	bcc.n	8036b3e <rshift+0x96>
 8036ad4:	1a9b      	subs	r3, r3, r2
 8036ad6:	009b      	lsls	r3, r3, #2
 8036ad8:	1eea      	subs	r2, r5, #3
 8036ada:	4296      	cmp	r6, r2
 8036adc:	bf38      	it	cc
 8036ade:	2300      	movcc	r3, #0
 8036ae0:	4423      	add	r3, r4
 8036ae2:	e015      	b.n	8036b10 <rshift+0x68>
 8036ae4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8036ae8:	f1c1 0820 	rsb	r8, r1, #32
 8036aec:	40cf      	lsrs	r7, r1
 8036aee:	f105 0e04 	add.w	lr, r5, #4
 8036af2:	46a1      	mov	r9, r4
 8036af4:	4576      	cmp	r6, lr
 8036af6:	46f4      	mov	ip, lr
 8036af8:	d815      	bhi.n	8036b26 <rshift+0x7e>
 8036afa:	1a9a      	subs	r2, r3, r2
 8036afc:	0092      	lsls	r2, r2, #2
 8036afe:	3a04      	subs	r2, #4
 8036b00:	3501      	adds	r5, #1
 8036b02:	42ae      	cmp	r6, r5
 8036b04:	bf38      	it	cc
 8036b06:	2200      	movcc	r2, #0
 8036b08:	18a3      	adds	r3, r4, r2
 8036b0a:	50a7      	str	r7, [r4, r2]
 8036b0c:	b107      	cbz	r7, 8036b10 <rshift+0x68>
 8036b0e:	3304      	adds	r3, #4
 8036b10:	1b1a      	subs	r2, r3, r4
 8036b12:	42a3      	cmp	r3, r4
 8036b14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8036b18:	bf08      	it	eq
 8036b1a:	2300      	moveq	r3, #0
 8036b1c:	6102      	str	r2, [r0, #16]
 8036b1e:	bf08      	it	eq
 8036b20:	6143      	streq	r3, [r0, #20]
 8036b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8036b26:	f8dc c000 	ldr.w	ip, [ip]
 8036b2a:	fa0c fc08 	lsl.w	ip, ip, r8
 8036b2e:	ea4c 0707 	orr.w	r7, ip, r7
 8036b32:	f849 7b04 	str.w	r7, [r9], #4
 8036b36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8036b3a:	40cf      	lsrs	r7, r1
 8036b3c:	e7da      	b.n	8036af4 <rshift+0x4c>
 8036b3e:	f851 cb04 	ldr.w	ip, [r1], #4
 8036b42:	f847 cf04 	str.w	ip, [r7, #4]!
 8036b46:	e7c3      	b.n	8036ad0 <rshift+0x28>
 8036b48:	4623      	mov	r3, r4
 8036b4a:	e7e1      	b.n	8036b10 <rshift+0x68>

08036b4c <__hexdig_fun>:
 8036b4c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8036b50:	2b09      	cmp	r3, #9
 8036b52:	d802      	bhi.n	8036b5a <__hexdig_fun+0xe>
 8036b54:	3820      	subs	r0, #32
 8036b56:	b2c0      	uxtb	r0, r0
 8036b58:	4770      	bx	lr
 8036b5a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8036b5e:	2b05      	cmp	r3, #5
 8036b60:	d801      	bhi.n	8036b66 <__hexdig_fun+0x1a>
 8036b62:	3847      	subs	r0, #71	@ 0x47
 8036b64:	e7f7      	b.n	8036b56 <__hexdig_fun+0xa>
 8036b66:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8036b6a:	2b05      	cmp	r3, #5
 8036b6c:	d801      	bhi.n	8036b72 <__hexdig_fun+0x26>
 8036b6e:	3827      	subs	r0, #39	@ 0x27
 8036b70:	e7f1      	b.n	8036b56 <__hexdig_fun+0xa>
 8036b72:	2000      	movs	r0, #0
 8036b74:	4770      	bx	lr
	...

08036b78 <__gethex>:
 8036b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036b7c:	b085      	sub	sp, #20
 8036b7e:	468a      	mov	sl, r1
 8036b80:	9302      	str	r3, [sp, #8]
 8036b82:	680b      	ldr	r3, [r1, #0]
 8036b84:	9001      	str	r0, [sp, #4]
 8036b86:	4690      	mov	r8, r2
 8036b88:	1c9c      	adds	r4, r3, #2
 8036b8a:	46a1      	mov	r9, r4
 8036b8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8036b90:	2830      	cmp	r0, #48	@ 0x30
 8036b92:	d0fa      	beq.n	8036b8a <__gethex+0x12>
 8036b94:	eba9 0303 	sub.w	r3, r9, r3
 8036b98:	f1a3 0b02 	sub.w	fp, r3, #2
 8036b9c:	f7ff ffd6 	bl	8036b4c <__hexdig_fun>
 8036ba0:	4605      	mov	r5, r0
 8036ba2:	2800      	cmp	r0, #0
 8036ba4:	d168      	bne.n	8036c78 <__gethex+0x100>
 8036ba6:	49a0      	ldr	r1, [pc, #640]	@ (8036e28 <__gethex+0x2b0>)
 8036ba8:	2201      	movs	r2, #1
 8036baa:	4648      	mov	r0, r9
 8036bac:	f7f6 fee5 	bl	802d97a <strncmp>
 8036bb0:	4607      	mov	r7, r0
 8036bb2:	2800      	cmp	r0, #0
 8036bb4:	d167      	bne.n	8036c86 <__gethex+0x10e>
 8036bb6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8036bba:	4626      	mov	r6, r4
 8036bbc:	f7ff ffc6 	bl	8036b4c <__hexdig_fun>
 8036bc0:	2800      	cmp	r0, #0
 8036bc2:	d062      	beq.n	8036c8a <__gethex+0x112>
 8036bc4:	4623      	mov	r3, r4
 8036bc6:	7818      	ldrb	r0, [r3, #0]
 8036bc8:	2830      	cmp	r0, #48	@ 0x30
 8036bca:	4699      	mov	r9, r3
 8036bcc:	f103 0301 	add.w	r3, r3, #1
 8036bd0:	d0f9      	beq.n	8036bc6 <__gethex+0x4e>
 8036bd2:	f7ff ffbb 	bl	8036b4c <__hexdig_fun>
 8036bd6:	fab0 f580 	clz	r5, r0
 8036bda:	096d      	lsrs	r5, r5, #5
 8036bdc:	f04f 0b01 	mov.w	fp, #1
 8036be0:	464a      	mov	r2, r9
 8036be2:	4616      	mov	r6, r2
 8036be4:	3201      	adds	r2, #1
 8036be6:	7830      	ldrb	r0, [r6, #0]
 8036be8:	f7ff ffb0 	bl	8036b4c <__hexdig_fun>
 8036bec:	2800      	cmp	r0, #0
 8036bee:	d1f8      	bne.n	8036be2 <__gethex+0x6a>
 8036bf0:	498d      	ldr	r1, [pc, #564]	@ (8036e28 <__gethex+0x2b0>)
 8036bf2:	2201      	movs	r2, #1
 8036bf4:	4630      	mov	r0, r6
 8036bf6:	f7f6 fec0 	bl	802d97a <strncmp>
 8036bfa:	2800      	cmp	r0, #0
 8036bfc:	d13f      	bne.n	8036c7e <__gethex+0x106>
 8036bfe:	b944      	cbnz	r4, 8036c12 <__gethex+0x9a>
 8036c00:	1c74      	adds	r4, r6, #1
 8036c02:	4622      	mov	r2, r4
 8036c04:	4616      	mov	r6, r2
 8036c06:	3201      	adds	r2, #1
 8036c08:	7830      	ldrb	r0, [r6, #0]
 8036c0a:	f7ff ff9f 	bl	8036b4c <__hexdig_fun>
 8036c0e:	2800      	cmp	r0, #0
 8036c10:	d1f8      	bne.n	8036c04 <__gethex+0x8c>
 8036c12:	1ba4      	subs	r4, r4, r6
 8036c14:	00a7      	lsls	r7, r4, #2
 8036c16:	7833      	ldrb	r3, [r6, #0]
 8036c18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8036c1c:	2b50      	cmp	r3, #80	@ 0x50
 8036c1e:	d13e      	bne.n	8036c9e <__gethex+0x126>
 8036c20:	7873      	ldrb	r3, [r6, #1]
 8036c22:	2b2b      	cmp	r3, #43	@ 0x2b
 8036c24:	d033      	beq.n	8036c8e <__gethex+0x116>
 8036c26:	2b2d      	cmp	r3, #45	@ 0x2d
 8036c28:	d034      	beq.n	8036c94 <__gethex+0x11c>
 8036c2a:	1c71      	adds	r1, r6, #1
 8036c2c:	2400      	movs	r4, #0
 8036c2e:	7808      	ldrb	r0, [r1, #0]
 8036c30:	f7ff ff8c 	bl	8036b4c <__hexdig_fun>
 8036c34:	1e43      	subs	r3, r0, #1
 8036c36:	b2db      	uxtb	r3, r3
 8036c38:	2b18      	cmp	r3, #24
 8036c3a:	d830      	bhi.n	8036c9e <__gethex+0x126>
 8036c3c:	f1a0 0210 	sub.w	r2, r0, #16
 8036c40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8036c44:	f7ff ff82 	bl	8036b4c <__hexdig_fun>
 8036c48:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8036c4c:	fa5f fc8c 	uxtb.w	ip, ip
 8036c50:	f1bc 0f18 	cmp.w	ip, #24
 8036c54:	f04f 030a 	mov.w	r3, #10
 8036c58:	d91e      	bls.n	8036c98 <__gethex+0x120>
 8036c5a:	b104      	cbz	r4, 8036c5e <__gethex+0xe6>
 8036c5c:	4252      	negs	r2, r2
 8036c5e:	4417      	add	r7, r2
 8036c60:	f8ca 1000 	str.w	r1, [sl]
 8036c64:	b1ed      	cbz	r5, 8036ca2 <__gethex+0x12a>
 8036c66:	f1bb 0f00 	cmp.w	fp, #0
 8036c6a:	bf0c      	ite	eq
 8036c6c:	2506      	moveq	r5, #6
 8036c6e:	2500      	movne	r5, #0
 8036c70:	4628      	mov	r0, r5
 8036c72:	b005      	add	sp, #20
 8036c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036c78:	2500      	movs	r5, #0
 8036c7a:	462c      	mov	r4, r5
 8036c7c:	e7b0      	b.n	8036be0 <__gethex+0x68>
 8036c7e:	2c00      	cmp	r4, #0
 8036c80:	d1c7      	bne.n	8036c12 <__gethex+0x9a>
 8036c82:	4627      	mov	r7, r4
 8036c84:	e7c7      	b.n	8036c16 <__gethex+0x9e>
 8036c86:	464e      	mov	r6, r9
 8036c88:	462f      	mov	r7, r5
 8036c8a:	2501      	movs	r5, #1
 8036c8c:	e7c3      	b.n	8036c16 <__gethex+0x9e>
 8036c8e:	2400      	movs	r4, #0
 8036c90:	1cb1      	adds	r1, r6, #2
 8036c92:	e7cc      	b.n	8036c2e <__gethex+0xb6>
 8036c94:	2401      	movs	r4, #1
 8036c96:	e7fb      	b.n	8036c90 <__gethex+0x118>
 8036c98:	fb03 0002 	mla	r0, r3, r2, r0
 8036c9c:	e7ce      	b.n	8036c3c <__gethex+0xc4>
 8036c9e:	4631      	mov	r1, r6
 8036ca0:	e7de      	b.n	8036c60 <__gethex+0xe8>
 8036ca2:	eba6 0309 	sub.w	r3, r6, r9
 8036ca6:	3b01      	subs	r3, #1
 8036ca8:	4629      	mov	r1, r5
 8036caa:	2b07      	cmp	r3, #7
 8036cac:	dc0a      	bgt.n	8036cc4 <__gethex+0x14c>
 8036cae:	9801      	ldr	r0, [sp, #4]
 8036cb0:	f7fd feca 	bl	8034a48 <_Balloc>
 8036cb4:	4604      	mov	r4, r0
 8036cb6:	b940      	cbnz	r0, 8036cca <__gethex+0x152>
 8036cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8036e2c <__gethex+0x2b4>)
 8036cba:	4602      	mov	r2, r0
 8036cbc:	21e4      	movs	r1, #228	@ 0xe4
 8036cbe:	485c      	ldr	r0, [pc, #368]	@ (8036e30 <__gethex+0x2b8>)
 8036cc0:	f7f4 f8d4 	bl	802ae6c <__assert_func>
 8036cc4:	3101      	adds	r1, #1
 8036cc6:	105b      	asrs	r3, r3, #1
 8036cc8:	e7ef      	b.n	8036caa <__gethex+0x132>
 8036cca:	f100 0a14 	add.w	sl, r0, #20
 8036cce:	2300      	movs	r3, #0
 8036cd0:	4655      	mov	r5, sl
 8036cd2:	469b      	mov	fp, r3
 8036cd4:	45b1      	cmp	r9, r6
 8036cd6:	d337      	bcc.n	8036d48 <__gethex+0x1d0>
 8036cd8:	f845 bb04 	str.w	fp, [r5], #4
 8036cdc:	eba5 050a 	sub.w	r5, r5, sl
 8036ce0:	10ad      	asrs	r5, r5, #2
 8036ce2:	6125      	str	r5, [r4, #16]
 8036ce4:	4658      	mov	r0, fp
 8036ce6:	f7fd ff6d 	bl	8034bc4 <__hi0bits>
 8036cea:	016d      	lsls	r5, r5, #5
 8036cec:	f8d8 6000 	ldr.w	r6, [r8]
 8036cf0:	1a2d      	subs	r5, r5, r0
 8036cf2:	42b5      	cmp	r5, r6
 8036cf4:	dd54      	ble.n	8036da0 <__gethex+0x228>
 8036cf6:	1bad      	subs	r5, r5, r6
 8036cf8:	4629      	mov	r1, r5
 8036cfa:	4620      	mov	r0, r4
 8036cfc:	f7fe fae7 	bl	80352ce <__any_on>
 8036d00:	4681      	mov	r9, r0
 8036d02:	b178      	cbz	r0, 8036d24 <__gethex+0x1ac>
 8036d04:	1e6b      	subs	r3, r5, #1
 8036d06:	1159      	asrs	r1, r3, #5
 8036d08:	f003 021f 	and.w	r2, r3, #31
 8036d0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8036d10:	f04f 0901 	mov.w	r9, #1
 8036d14:	fa09 f202 	lsl.w	r2, r9, r2
 8036d18:	420a      	tst	r2, r1
 8036d1a:	d003      	beq.n	8036d24 <__gethex+0x1ac>
 8036d1c:	454b      	cmp	r3, r9
 8036d1e:	dc36      	bgt.n	8036d8e <__gethex+0x216>
 8036d20:	f04f 0902 	mov.w	r9, #2
 8036d24:	4629      	mov	r1, r5
 8036d26:	4620      	mov	r0, r4
 8036d28:	f7ff febe 	bl	8036aa8 <rshift>
 8036d2c:	442f      	add	r7, r5
 8036d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036d32:	42bb      	cmp	r3, r7
 8036d34:	da42      	bge.n	8036dbc <__gethex+0x244>
 8036d36:	9801      	ldr	r0, [sp, #4]
 8036d38:	4621      	mov	r1, r4
 8036d3a:	f7fd feaa 	bl	8034a92 <_Bfree>
 8036d3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036d40:	2300      	movs	r3, #0
 8036d42:	6013      	str	r3, [r2, #0]
 8036d44:	25a3      	movs	r5, #163	@ 0xa3
 8036d46:	e793      	b.n	8036c70 <__gethex+0xf8>
 8036d48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8036d4c:	2a2e      	cmp	r2, #46	@ 0x2e
 8036d4e:	d012      	beq.n	8036d76 <__gethex+0x1fe>
 8036d50:	2b20      	cmp	r3, #32
 8036d52:	d104      	bne.n	8036d5e <__gethex+0x1e6>
 8036d54:	f845 bb04 	str.w	fp, [r5], #4
 8036d58:	f04f 0b00 	mov.w	fp, #0
 8036d5c:	465b      	mov	r3, fp
 8036d5e:	7830      	ldrb	r0, [r6, #0]
 8036d60:	9303      	str	r3, [sp, #12]
 8036d62:	f7ff fef3 	bl	8036b4c <__hexdig_fun>
 8036d66:	9b03      	ldr	r3, [sp, #12]
 8036d68:	f000 000f 	and.w	r0, r0, #15
 8036d6c:	4098      	lsls	r0, r3
 8036d6e:	ea4b 0b00 	orr.w	fp, fp, r0
 8036d72:	3304      	adds	r3, #4
 8036d74:	e7ae      	b.n	8036cd4 <__gethex+0x15c>
 8036d76:	45b1      	cmp	r9, r6
 8036d78:	d8ea      	bhi.n	8036d50 <__gethex+0x1d8>
 8036d7a:	492b      	ldr	r1, [pc, #172]	@ (8036e28 <__gethex+0x2b0>)
 8036d7c:	9303      	str	r3, [sp, #12]
 8036d7e:	2201      	movs	r2, #1
 8036d80:	4630      	mov	r0, r6
 8036d82:	f7f6 fdfa 	bl	802d97a <strncmp>
 8036d86:	9b03      	ldr	r3, [sp, #12]
 8036d88:	2800      	cmp	r0, #0
 8036d8a:	d1e1      	bne.n	8036d50 <__gethex+0x1d8>
 8036d8c:	e7a2      	b.n	8036cd4 <__gethex+0x15c>
 8036d8e:	1ea9      	subs	r1, r5, #2
 8036d90:	4620      	mov	r0, r4
 8036d92:	f7fe fa9c 	bl	80352ce <__any_on>
 8036d96:	2800      	cmp	r0, #0
 8036d98:	d0c2      	beq.n	8036d20 <__gethex+0x1a8>
 8036d9a:	f04f 0903 	mov.w	r9, #3
 8036d9e:	e7c1      	b.n	8036d24 <__gethex+0x1ac>
 8036da0:	da09      	bge.n	8036db6 <__gethex+0x23e>
 8036da2:	1b75      	subs	r5, r6, r5
 8036da4:	4621      	mov	r1, r4
 8036da6:	9801      	ldr	r0, [sp, #4]
 8036da8:	462a      	mov	r2, r5
 8036daa:	f7fe f857 	bl	8034e5c <__lshift>
 8036dae:	1b7f      	subs	r7, r7, r5
 8036db0:	4604      	mov	r4, r0
 8036db2:	f100 0a14 	add.w	sl, r0, #20
 8036db6:	f04f 0900 	mov.w	r9, #0
 8036dba:	e7b8      	b.n	8036d2e <__gethex+0x1b6>
 8036dbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8036dc0:	42bd      	cmp	r5, r7
 8036dc2:	dd6f      	ble.n	8036ea4 <__gethex+0x32c>
 8036dc4:	1bed      	subs	r5, r5, r7
 8036dc6:	42ae      	cmp	r6, r5
 8036dc8:	dc34      	bgt.n	8036e34 <__gethex+0x2bc>
 8036dca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036dce:	2b02      	cmp	r3, #2
 8036dd0:	d022      	beq.n	8036e18 <__gethex+0x2a0>
 8036dd2:	2b03      	cmp	r3, #3
 8036dd4:	d024      	beq.n	8036e20 <__gethex+0x2a8>
 8036dd6:	2b01      	cmp	r3, #1
 8036dd8:	d115      	bne.n	8036e06 <__gethex+0x28e>
 8036dda:	42ae      	cmp	r6, r5
 8036ddc:	d113      	bne.n	8036e06 <__gethex+0x28e>
 8036dde:	2e01      	cmp	r6, #1
 8036de0:	d10b      	bne.n	8036dfa <__gethex+0x282>
 8036de2:	9a02      	ldr	r2, [sp, #8]
 8036de4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8036de8:	6013      	str	r3, [r2, #0]
 8036dea:	2301      	movs	r3, #1
 8036dec:	6123      	str	r3, [r4, #16]
 8036dee:	f8ca 3000 	str.w	r3, [sl]
 8036df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036df4:	2562      	movs	r5, #98	@ 0x62
 8036df6:	601c      	str	r4, [r3, #0]
 8036df8:	e73a      	b.n	8036c70 <__gethex+0xf8>
 8036dfa:	1e71      	subs	r1, r6, #1
 8036dfc:	4620      	mov	r0, r4
 8036dfe:	f7fe fa66 	bl	80352ce <__any_on>
 8036e02:	2800      	cmp	r0, #0
 8036e04:	d1ed      	bne.n	8036de2 <__gethex+0x26a>
 8036e06:	9801      	ldr	r0, [sp, #4]
 8036e08:	4621      	mov	r1, r4
 8036e0a:	f7fd fe42 	bl	8034a92 <_Bfree>
 8036e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036e10:	2300      	movs	r3, #0
 8036e12:	6013      	str	r3, [r2, #0]
 8036e14:	2550      	movs	r5, #80	@ 0x50
 8036e16:	e72b      	b.n	8036c70 <__gethex+0xf8>
 8036e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036e1a:	2b00      	cmp	r3, #0
 8036e1c:	d1f3      	bne.n	8036e06 <__gethex+0x28e>
 8036e1e:	e7e0      	b.n	8036de2 <__gethex+0x26a>
 8036e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036e22:	2b00      	cmp	r3, #0
 8036e24:	d1dd      	bne.n	8036de2 <__gethex+0x26a>
 8036e26:	e7ee      	b.n	8036e06 <__gethex+0x28e>
 8036e28:	0803d49e 	.word	0x0803d49e
 8036e2c:	0803d7d6 	.word	0x0803d7d6
 8036e30:	0803da70 	.word	0x0803da70
 8036e34:	1e6f      	subs	r7, r5, #1
 8036e36:	f1b9 0f00 	cmp.w	r9, #0
 8036e3a:	d130      	bne.n	8036e9e <__gethex+0x326>
 8036e3c:	b127      	cbz	r7, 8036e48 <__gethex+0x2d0>
 8036e3e:	4639      	mov	r1, r7
 8036e40:	4620      	mov	r0, r4
 8036e42:	f7fe fa44 	bl	80352ce <__any_on>
 8036e46:	4681      	mov	r9, r0
 8036e48:	117a      	asrs	r2, r7, #5
 8036e4a:	2301      	movs	r3, #1
 8036e4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8036e50:	f007 071f 	and.w	r7, r7, #31
 8036e54:	40bb      	lsls	r3, r7
 8036e56:	4213      	tst	r3, r2
 8036e58:	4629      	mov	r1, r5
 8036e5a:	4620      	mov	r0, r4
 8036e5c:	bf18      	it	ne
 8036e5e:	f049 0902 	orrne.w	r9, r9, #2
 8036e62:	f7ff fe21 	bl	8036aa8 <rshift>
 8036e66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8036e6a:	1b76      	subs	r6, r6, r5
 8036e6c:	2502      	movs	r5, #2
 8036e6e:	f1b9 0f00 	cmp.w	r9, #0
 8036e72:	d047      	beq.n	8036f04 <__gethex+0x38c>
 8036e74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036e78:	2b02      	cmp	r3, #2
 8036e7a:	d015      	beq.n	8036ea8 <__gethex+0x330>
 8036e7c:	2b03      	cmp	r3, #3
 8036e7e:	d017      	beq.n	8036eb0 <__gethex+0x338>
 8036e80:	2b01      	cmp	r3, #1
 8036e82:	d109      	bne.n	8036e98 <__gethex+0x320>
 8036e84:	f019 0f02 	tst.w	r9, #2
 8036e88:	d006      	beq.n	8036e98 <__gethex+0x320>
 8036e8a:	f8da 3000 	ldr.w	r3, [sl]
 8036e8e:	ea49 0903 	orr.w	r9, r9, r3
 8036e92:	f019 0f01 	tst.w	r9, #1
 8036e96:	d10e      	bne.n	8036eb6 <__gethex+0x33e>
 8036e98:	f045 0510 	orr.w	r5, r5, #16
 8036e9c:	e032      	b.n	8036f04 <__gethex+0x38c>
 8036e9e:	f04f 0901 	mov.w	r9, #1
 8036ea2:	e7d1      	b.n	8036e48 <__gethex+0x2d0>
 8036ea4:	2501      	movs	r5, #1
 8036ea6:	e7e2      	b.n	8036e6e <__gethex+0x2f6>
 8036ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036eaa:	f1c3 0301 	rsb	r3, r3, #1
 8036eae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8036eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036eb2:	2b00      	cmp	r3, #0
 8036eb4:	d0f0      	beq.n	8036e98 <__gethex+0x320>
 8036eb6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8036eba:	f104 0314 	add.w	r3, r4, #20
 8036ebe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8036ec2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8036ec6:	f04f 0c00 	mov.w	ip, #0
 8036eca:	4618      	mov	r0, r3
 8036ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8036ed0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8036ed4:	d01b      	beq.n	8036f0e <__gethex+0x396>
 8036ed6:	3201      	adds	r2, #1
 8036ed8:	6002      	str	r2, [r0, #0]
 8036eda:	2d02      	cmp	r5, #2
 8036edc:	f104 0314 	add.w	r3, r4, #20
 8036ee0:	d13c      	bne.n	8036f5c <__gethex+0x3e4>
 8036ee2:	f8d8 2000 	ldr.w	r2, [r8]
 8036ee6:	3a01      	subs	r2, #1
 8036ee8:	42b2      	cmp	r2, r6
 8036eea:	d109      	bne.n	8036f00 <__gethex+0x388>
 8036eec:	1171      	asrs	r1, r6, #5
 8036eee:	2201      	movs	r2, #1
 8036ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8036ef4:	f006 061f 	and.w	r6, r6, #31
 8036ef8:	fa02 f606 	lsl.w	r6, r2, r6
 8036efc:	421e      	tst	r6, r3
 8036efe:	d13a      	bne.n	8036f76 <__gethex+0x3fe>
 8036f00:	f045 0520 	orr.w	r5, r5, #32
 8036f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036f06:	601c      	str	r4, [r3, #0]
 8036f08:	9b02      	ldr	r3, [sp, #8]
 8036f0a:	601f      	str	r7, [r3, #0]
 8036f0c:	e6b0      	b.n	8036c70 <__gethex+0xf8>
 8036f0e:	4299      	cmp	r1, r3
 8036f10:	f843 cc04 	str.w	ip, [r3, #-4]
 8036f14:	d8d9      	bhi.n	8036eca <__gethex+0x352>
 8036f16:	68a3      	ldr	r3, [r4, #8]
 8036f18:	459b      	cmp	fp, r3
 8036f1a:	db17      	blt.n	8036f4c <__gethex+0x3d4>
 8036f1c:	6861      	ldr	r1, [r4, #4]
 8036f1e:	9801      	ldr	r0, [sp, #4]
 8036f20:	3101      	adds	r1, #1
 8036f22:	f7fd fd91 	bl	8034a48 <_Balloc>
 8036f26:	4681      	mov	r9, r0
 8036f28:	b918      	cbnz	r0, 8036f32 <__gethex+0x3ba>
 8036f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8036f94 <__gethex+0x41c>)
 8036f2c:	4602      	mov	r2, r0
 8036f2e:	2184      	movs	r1, #132	@ 0x84
 8036f30:	e6c5      	b.n	8036cbe <__gethex+0x146>
 8036f32:	6922      	ldr	r2, [r4, #16]
 8036f34:	3202      	adds	r2, #2
 8036f36:	f104 010c 	add.w	r1, r4, #12
 8036f3a:	0092      	lsls	r2, r2, #2
 8036f3c:	300c      	adds	r0, #12
 8036f3e:	f7f8 fa4d 	bl	802f3dc <memcpy>
 8036f42:	4621      	mov	r1, r4
 8036f44:	9801      	ldr	r0, [sp, #4]
 8036f46:	f7fd fda4 	bl	8034a92 <_Bfree>
 8036f4a:	464c      	mov	r4, r9
 8036f4c:	6923      	ldr	r3, [r4, #16]
 8036f4e:	1c5a      	adds	r2, r3, #1
 8036f50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036f54:	6122      	str	r2, [r4, #16]
 8036f56:	2201      	movs	r2, #1
 8036f58:	615a      	str	r2, [r3, #20]
 8036f5a:	e7be      	b.n	8036eda <__gethex+0x362>
 8036f5c:	6922      	ldr	r2, [r4, #16]
 8036f5e:	455a      	cmp	r2, fp
 8036f60:	dd0b      	ble.n	8036f7a <__gethex+0x402>
 8036f62:	2101      	movs	r1, #1
 8036f64:	4620      	mov	r0, r4
 8036f66:	f7ff fd9f 	bl	8036aa8 <rshift>
 8036f6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036f6e:	3701      	adds	r7, #1
 8036f70:	42bb      	cmp	r3, r7
 8036f72:	f6ff aee0 	blt.w	8036d36 <__gethex+0x1be>
 8036f76:	2501      	movs	r5, #1
 8036f78:	e7c2      	b.n	8036f00 <__gethex+0x388>
 8036f7a:	f016 061f 	ands.w	r6, r6, #31
 8036f7e:	d0fa      	beq.n	8036f76 <__gethex+0x3fe>
 8036f80:	4453      	add	r3, sl
 8036f82:	f1c6 0620 	rsb	r6, r6, #32
 8036f86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8036f8a:	f7fd fe1b 	bl	8034bc4 <__hi0bits>
 8036f8e:	42b0      	cmp	r0, r6
 8036f90:	dbe7      	blt.n	8036f62 <__gethex+0x3ea>
 8036f92:	e7f0      	b.n	8036f76 <__gethex+0x3fe>
 8036f94:	0803d7d6 	.word	0x0803d7d6

08036f98 <L_shift>:
 8036f98:	f1c2 0208 	rsb	r2, r2, #8
 8036f9c:	0092      	lsls	r2, r2, #2
 8036f9e:	b570      	push	{r4, r5, r6, lr}
 8036fa0:	f1c2 0620 	rsb	r6, r2, #32
 8036fa4:	6843      	ldr	r3, [r0, #4]
 8036fa6:	6804      	ldr	r4, [r0, #0]
 8036fa8:	fa03 f506 	lsl.w	r5, r3, r6
 8036fac:	432c      	orrs	r4, r5
 8036fae:	40d3      	lsrs	r3, r2
 8036fb0:	6004      	str	r4, [r0, #0]
 8036fb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8036fb6:	4288      	cmp	r0, r1
 8036fb8:	d3f4      	bcc.n	8036fa4 <L_shift+0xc>
 8036fba:	bd70      	pop	{r4, r5, r6, pc}

08036fbc <__match>:
 8036fbc:	b530      	push	{r4, r5, lr}
 8036fbe:	6803      	ldr	r3, [r0, #0]
 8036fc0:	3301      	adds	r3, #1
 8036fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8036fc6:	b914      	cbnz	r4, 8036fce <__match+0x12>
 8036fc8:	6003      	str	r3, [r0, #0]
 8036fca:	2001      	movs	r0, #1
 8036fcc:	bd30      	pop	{r4, r5, pc}
 8036fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036fd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8036fd6:	2d19      	cmp	r5, #25
 8036fd8:	bf98      	it	ls
 8036fda:	3220      	addls	r2, #32
 8036fdc:	42a2      	cmp	r2, r4
 8036fde:	d0f0      	beq.n	8036fc2 <__match+0x6>
 8036fe0:	2000      	movs	r0, #0
 8036fe2:	e7f3      	b.n	8036fcc <__match+0x10>

08036fe4 <__hexnan>:
 8036fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036fe8:	680b      	ldr	r3, [r1, #0]
 8036fea:	6801      	ldr	r1, [r0, #0]
 8036fec:	115e      	asrs	r6, r3, #5
 8036fee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8036ff2:	f013 031f 	ands.w	r3, r3, #31
 8036ff6:	b087      	sub	sp, #28
 8036ff8:	bf18      	it	ne
 8036ffa:	3604      	addne	r6, #4
 8036ffc:	2500      	movs	r5, #0
 8036ffe:	1f37      	subs	r7, r6, #4
 8037000:	4682      	mov	sl, r0
 8037002:	4690      	mov	r8, r2
 8037004:	9301      	str	r3, [sp, #4]
 8037006:	f846 5c04 	str.w	r5, [r6, #-4]
 803700a:	46b9      	mov	r9, r7
 803700c:	463c      	mov	r4, r7
 803700e:	9502      	str	r5, [sp, #8]
 8037010:	46ab      	mov	fp, r5
 8037012:	784a      	ldrb	r2, [r1, #1]
 8037014:	1c4b      	adds	r3, r1, #1
 8037016:	9303      	str	r3, [sp, #12]
 8037018:	b342      	cbz	r2, 803706c <__hexnan+0x88>
 803701a:	4610      	mov	r0, r2
 803701c:	9105      	str	r1, [sp, #20]
 803701e:	9204      	str	r2, [sp, #16]
 8037020:	f7ff fd94 	bl	8036b4c <__hexdig_fun>
 8037024:	2800      	cmp	r0, #0
 8037026:	d151      	bne.n	80370cc <__hexnan+0xe8>
 8037028:	9a04      	ldr	r2, [sp, #16]
 803702a:	9905      	ldr	r1, [sp, #20]
 803702c:	2a20      	cmp	r2, #32
 803702e:	d818      	bhi.n	8037062 <__hexnan+0x7e>
 8037030:	9b02      	ldr	r3, [sp, #8]
 8037032:	459b      	cmp	fp, r3
 8037034:	dd13      	ble.n	803705e <__hexnan+0x7a>
 8037036:	454c      	cmp	r4, r9
 8037038:	d206      	bcs.n	8037048 <__hexnan+0x64>
 803703a:	2d07      	cmp	r5, #7
 803703c:	dc04      	bgt.n	8037048 <__hexnan+0x64>
 803703e:	462a      	mov	r2, r5
 8037040:	4649      	mov	r1, r9
 8037042:	4620      	mov	r0, r4
 8037044:	f7ff ffa8 	bl	8036f98 <L_shift>
 8037048:	4544      	cmp	r4, r8
 803704a:	d952      	bls.n	80370f2 <__hexnan+0x10e>
 803704c:	2300      	movs	r3, #0
 803704e:	f1a4 0904 	sub.w	r9, r4, #4
 8037052:	f844 3c04 	str.w	r3, [r4, #-4]
 8037056:	f8cd b008 	str.w	fp, [sp, #8]
 803705a:	464c      	mov	r4, r9
 803705c:	461d      	mov	r5, r3
 803705e:	9903      	ldr	r1, [sp, #12]
 8037060:	e7d7      	b.n	8037012 <__hexnan+0x2e>
 8037062:	2a29      	cmp	r2, #41	@ 0x29
 8037064:	d157      	bne.n	8037116 <__hexnan+0x132>
 8037066:	3102      	adds	r1, #2
 8037068:	f8ca 1000 	str.w	r1, [sl]
 803706c:	f1bb 0f00 	cmp.w	fp, #0
 8037070:	d051      	beq.n	8037116 <__hexnan+0x132>
 8037072:	454c      	cmp	r4, r9
 8037074:	d206      	bcs.n	8037084 <__hexnan+0xa0>
 8037076:	2d07      	cmp	r5, #7
 8037078:	dc04      	bgt.n	8037084 <__hexnan+0xa0>
 803707a:	462a      	mov	r2, r5
 803707c:	4649      	mov	r1, r9
 803707e:	4620      	mov	r0, r4
 8037080:	f7ff ff8a 	bl	8036f98 <L_shift>
 8037084:	4544      	cmp	r4, r8
 8037086:	d936      	bls.n	80370f6 <__hexnan+0x112>
 8037088:	f1a8 0204 	sub.w	r2, r8, #4
 803708c:	4623      	mov	r3, r4
 803708e:	f853 1b04 	ldr.w	r1, [r3], #4
 8037092:	f842 1f04 	str.w	r1, [r2, #4]!
 8037096:	429f      	cmp	r7, r3
 8037098:	d2f9      	bcs.n	803708e <__hexnan+0xaa>
 803709a:	1b3b      	subs	r3, r7, r4
 803709c:	f023 0303 	bic.w	r3, r3, #3
 80370a0:	3304      	adds	r3, #4
 80370a2:	3401      	adds	r4, #1
 80370a4:	3e03      	subs	r6, #3
 80370a6:	42b4      	cmp	r4, r6
 80370a8:	bf88      	it	hi
 80370aa:	2304      	movhi	r3, #4
 80370ac:	4443      	add	r3, r8
 80370ae:	2200      	movs	r2, #0
 80370b0:	f843 2b04 	str.w	r2, [r3], #4
 80370b4:	429f      	cmp	r7, r3
 80370b6:	d2fb      	bcs.n	80370b0 <__hexnan+0xcc>
 80370b8:	683b      	ldr	r3, [r7, #0]
 80370ba:	b91b      	cbnz	r3, 80370c4 <__hexnan+0xe0>
 80370bc:	4547      	cmp	r7, r8
 80370be:	d128      	bne.n	8037112 <__hexnan+0x12e>
 80370c0:	2301      	movs	r3, #1
 80370c2:	603b      	str	r3, [r7, #0]
 80370c4:	2005      	movs	r0, #5
 80370c6:	b007      	add	sp, #28
 80370c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80370cc:	3501      	adds	r5, #1
 80370ce:	2d08      	cmp	r5, #8
 80370d0:	f10b 0b01 	add.w	fp, fp, #1
 80370d4:	dd06      	ble.n	80370e4 <__hexnan+0x100>
 80370d6:	4544      	cmp	r4, r8
 80370d8:	d9c1      	bls.n	803705e <__hexnan+0x7a>
 80370da:	2300      	movs	r3, #0
 80370dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80370e0:	2501      	movs	r5, #1
 80370e2:	3c04      	subs	r4, #4
 80370e4:	6822      	ldr	r2, [r4, #0]
 80370e6:	f000 000f 	and.w	r0, r0, #15
 80370ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80370ee:	6020      	str	r0, [r4, #0]
 80370f0:	e7b5      	b.n	803705e <__hexnan+0x7a>
 80370f2:	2508      	movs	r5, #8
 80370f4:	e7b3      	b.n	803705e <__hexnan+0x7a>
 80370f6:	9b01      	ldr	r3, [sp, #4]
 80370f8:	2b00      	cmp	r3, #0
 80370fa:	d0dd      	beq.n	80370b8 <__hexnan+0xd4>
 80370fc:	f1c3 0320 	rsb	r3, r3, #32
 8037100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8037104:	40da      	lsrs	r2, r3
 8037106:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803710a:	4013      	ands	r3, r2
 803710c:	f846 3c04 	str.w	r3, [r6, #-4]
 8037110:	e7d2      	b.n	80370b8 <__hexnan+0xd4>
 8037112:	3f04      	subs	r7, #4
 8037114:	e7d0      	b.n	80370b8 <__hexnan+0xd4>
 8037116:	2004      	movs	r0, #4
 8037118:	e7d5      	b.n	80370c6 <__hexnan+0xe2>
	...

0803711c <_init>:
 803711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803711e:	bf00      	nop
 8037120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037122:	bc08      	pop	{r3}
 8037124:	469e      	mov	lr, r3
 8037126:	4770      	bx	lr

08037128 <_fini>:
 8037128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803712a:	bf00      	nop
 803712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803712e:	bc08      	pop	{r3}
 8037130:	469e      	mov	lr, r3
 8037132:	4770      	bx	lr
