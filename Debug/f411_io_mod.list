
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024490  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000053fc  08024630  08024630  00025630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029a2c  08029a2c  0002b308  2**0
                  CONTENTS
  4 .ARM          00000008  08029a2c  08029a2c  0002aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029a34  08029a34  0002b308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029a34  08029a34  0002aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029a38  08029a38  0002aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000308  20000000  08029a3c  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017714  20000308  08029d44  0002b308  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20017a1c  08029d44  0002ba1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002b308  2**0
                  CONTENTS, READONLY
 12 .debug_info   000337e2  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cbd  00000000  00000000  0005eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e50  00000000  00000000  000647d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000274a  00000000  00000000  00067628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecc1  00000000  00000000  00069d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000337e1  00000000  00000000  00088a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a858b  00000000  00000000  000bc214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016479f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dfac  00000000  00000000  001647e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00172790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08024618 	.word	0x08024618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	08024618 	.word	0x08024618

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	@ 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f81a 	bl	8000c38 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__popcountsi2>:
 8000c10:	0843      	lsrs	r3, r0, #1
 8000c12:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000c16:	1ac0      	subs	r0, r0, r3
 8000c18:	0883      	lsrs	r3, r0, #2
 8000c1a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000c1e:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8000c22:	4418      	add	r0, r3
 8000c24:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c28:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000c2c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c30:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c34:	0e00      	lsrs	r0, r0, #24
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8000efc:	482f      	ldr	r0, [pc, #188]	@ (8000fbc <MX_FREERTOS_Init+0xc4>)
 8000efe:	f007 fc90 	bl	8008822 <osMutexNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <MX_FREERTOS_Init+0xc8>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8000f08:	482e      	ldr	r0, [pc, #184]	@ (8000fc4 <MX_FREERTOS_Init+0xcc>)
 8000f0a:	f007 fc8a 	bl	8008822 <osMutexNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <MX_FREERTOS_Init+0xd0>)
 8000f12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8000f14:	4a2d      	ldr	r2, [pc, #180]	@ (8000fcc <MX_FREERTOS_Init+0xd4>)
 8000f16:	2103      	movs	r1, #3
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f007 fd90 	bl	8008a3e <osMessageQueueNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd0 <MX_FREERTOS_Init+0xd8>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8000f24:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd4 <MX_FREERTOS_Init+0xdc>)
 8000f26:	2103      	movs	r1, #3
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f007 fd88 	bl	8008a3e <osMessageQueueNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <MX_FREERTOS_Init+0xe0>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8000f34:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <MX_FREERTOS_Init+0xe4>)
 8000f36:	2103      	movs	r1, #3
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f007 fd80 	bl	8008a3e <osMessageQueueNew>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <MX_FREERTOS_Init+0xe8>)
 8000f42:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <MX_FREERTOS_Init+0xec>)
 8000f46:	21c6      	movs	r1, #198	@ 0xc6
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f007 fd78 	bl	8008a3e <osMessageQueueNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a25      	ldr	r2, [pc, #148]	@ (8000fe8 <MX_FREERTOS_Init+0xf0>)
 8000f52:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8000f54:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <MX_FREERTOS_Init+0xf4>)
 8000f56:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f007 fd6f 	bl	8008a3e <osMessageQueueNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <MX_FREERTOS_Init+0xf8>)
 8000f64:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8000f66:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <MX_FREERTOS_Init+0xfc>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4823      	ldr	r0, [pc, #140]	@ (8000ff8 <MX_FREERTOS_Init+0x100>)
 8000f6c:	f007 fbac 	bl	80086c8 <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <MX_FREERTOS_Init+0x104>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <MX_FREERTOS_Init+0x108>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4822      	ldr	r0, [pc, #136]	@ (8001004 <MX_FREERTOS_Init+0x10c>)
 8000f7c:	f007 fba4 	bl	80086c8 <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <MX_FREERTOS_Init+0x110>)
 8000f84:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000f86:	4a21      	ldr	r2, [pc, #132]	@ (800100c <MX_FREERTOS_Init+0x114>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4821      	ldr	r0, [pc, #132]	@ (8001010 <MX_FREERTOS_Init+0x118>)
 8000f8c:	f007 fb9c 	bl	80086c8 <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <MX_FREERTOS_Init+0x11c>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8000f96:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <MX_FREERTOS_Init+0x120>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4820      	ldr	r0, [pc, #128]	@ (800101c <MX_FREERTOS_Init+0x124>)
 8000f9c:	f007 fb94 	bl	80086c8 <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <MX_FREERTOS_Init+0x128>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <MX_FREERTOS_Init+0x12c>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	481f      	ldr	r0, [pc, #124]	@ (8001028 <MX_FREERTOS_Init+0x130>)
 8000fac:	f007 fb8c 	bl	80086c8 <osThreadNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <MX_FREERTOS_Init+0x134>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	08028a88 	.word	0x08028a88
 8000fc0:	20000354 	.word	0x20000354
 8000fc4:	08028a98 	.word	0x08028a98
 8000fc8:	20000358 	.word	0x20000358
 8000fcc:	08028a10 	.word	0x08028a10
 8000fd0:	20000340 	.word	0x20000340
 8000fd4:	08028a28 	.word	0x08028a28
 8000fd8:	20000344 	.word	0x20000344
 8000fdc:	08028a40 	.word	0x08028a40
 8000fe0:	20000348 	.word	0x20000348
 8000fe4:	08028a58 	.word	0x08028a58
 8000fe8:	2000034c 	.word	0x2000034c
 8000fec:	08028a70 	.word	0x08028a70
 8000ff0:	20000350 	.word	0x20000350
 8000ff4:	0802895c 	.word	0x0802895c
 8000ff8:	08001031 	.word	0x08001031
 8000ffc:	2000032c 	.word	0x2000032c
 8001000:	08028980 	.word	0x08028980
 8001004:	080012e5 	.word	0x080012e5
 8001008:	20000330 	.word	0x20000330
 800100c:	080289a4 	.word	0x080289a4
 8001010:	080014ad 	.word	0x080014ad
 8001014:	20000334 	.word	0x20000334
 8001018:	080289c8 	.word	0x080289c8
 800101c:	080016dd 	.word	0x080016dd
 8001020:	20000338 	.word	0x20000338
 8001024:	080289ec 	.word	0x080289ec
 8001028:	08001839 	.word	0x08001839
 800102c:	2000033c 	.word	0x2000033c

08001030 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b0f1      	sub	sp, #452	@ 0x1c4
 8001034:	af02      	add	r7, sp, #8
 8001036:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800103a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800103e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8001040:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001044:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001048:	4a99      	ldr	r2, [pc, #612]	@ (80012b0 <StartEthTask+0x280>)
 800104a:	461c      	mov	r4, r3
 800104c:	4613      	mov	r3, r2
 800104e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8001054:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001058:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800105c:	4618      	mov	r0, r3
 800105e:	2380      	movs	r3, #128	@ 0x80
 8001060:	461a      	mov	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f021 fef8 	bl	8022e58 <memset>
 8001068:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800106c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001078:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800107c:	2222      	movs	r2, #34	@ 0x22
 800107e:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8001080:	4b8c      	ldr	r3, [pc, #560]	@ (80012b4 <StartEthTask+0x284>)
 8001082:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001084:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001088:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800108c:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 800108e:	4b8a      	ldr	r3, [pc, #552]	@ (80012b8 <StartEthTask+0x288>)
 8001090:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001092:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001096:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800109a:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 800109c:	4b87      	ldr	r3, [pc, #540]	@ (80012bc <StartEthTask+0x28c>)
 800109e:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 80010a0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010a8:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 80010aa:	4b85      	ldr	r3, [pc, #532]	@ (80012c0 <StartEthTask+0x290>)
 80010ac:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 80010ae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010b6:	715a      	strb	r2, [r3, #5]
 80010b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010c0:	2201      	movs	r2, #1
 80010c2:	77da      	strb	r2, [r3, #31]
 80010c4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
 80010d2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010da:	4a7a      	ldr	r2, [pc, #488]	@ (80012c4 <StartEthTask+0x294>)
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80010de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80010e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010e6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80010ec:	4a76      	ldr	r2, [pc, #472]	@ (80012c8 <StartEthTask+0x298>)
 80010ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80010f2:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80010f4:	4a74      	ldr	r2, [pc, #464]	@ (80012c8 <StartEthTask+0x298>)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80010fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001100:	4618      	mov	r0, r3
 8001102:	f01c f971 	bl	801d3e8 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8001106:	4b71      	ldr	r3, [pc, #452]	@ (80012cc <StartEthTask+0x29c>)
 8001108:	2203      	movs	r2, #3
 800110a:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 800110c:	f002 fbfe 	bl	800390c <dash_hdl>
 8001110:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 8001114:	e013      	b.n	800113e <StartEthTask+0x10e>
	  EthResetBegin();
 8001116:	f000 fc3f 	bl	8001998 <EthResetBegin>
	  osDelay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111e:	f007 fb65 	bl	80087ec <osDelay>
	  EthResetEnd();
 8001122:	f000 fc45 	bl	80019b0 <EthResetEnd>
	  osDelay(2000);
 8001126:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800112a:	f007 fb5f 	bl	80087ec <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 800112e:	f107 0208 	add.w	r2, r7, #8
 8001132:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f01e fedd 	bl	801fef8 <mg_tcpip_init>
  while(mif.mtu == 0){
 800113e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001142:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0e3      	beq.n	8001116 <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2106      	movs	r1, #6
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f919 	bl	800438c <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 800115a:	485d      	ldr	r0, [pc, #372]	@ (80012d0 <StartEthTask+0x2a0>)
 800115c:	f002 fbe0 	bl	8003920 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8001160:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001164:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001168:	4b57      	ldr	r3, [pc, #348]	@ (80012c8 <StartEthTask+0x298>)
 800116a:	495a      	ldr	r1, [pc, #360]	@ (80012d4 <StartEthTask+0x2a4>)
 800116c:	f018 fb54 	bl	8019818 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8001170:	e008      	b.n	8001184 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8001172:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001176:	2101      	movs	r1, #1
 8001178:	4618      	mov	r0, r3
 800117a:	f01f f9d1 	bl	8020520 <mg_mgr_poll>
    osDelay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f007 fb34 	bl	80087ec <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8001184:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001188:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800118c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001190:	2b03      	cmp	r3, #3
 8001192:	d1ee      	bne.n	8001172 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001194:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <StartEthTask+0x298>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	b2d9      	uxtb	r1, r3
 800119c:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <StartEthTask+0x298>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80011a6:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <StartEthTask+0x298>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80011ae:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80011b0:	4a45      	ldr	r2, [pc, #276]	@ (80012c8 <StartEthTask+0x298>)
 80011b2:	6852      	ldr	r2, [r2, #4]
 80011b4:	6892      	ldr	r2, [r2, #8]
 80011b6:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80011b8:	9201      	str	r2, [sp, #4]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	4603      	mov	r3, r0
 80011be:	460a      	mov	r2, r1
 80011c0:	4945      	ldr	r1, [pc, #276]	@ (80012d8 <StartEthTask+0x2a8>)
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 fe72 	bl	8001eac <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80011c8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fcb5 	bl	8001b40 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80011d6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80011da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d018      	beq.n	8001216 <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80011e4:	493d      	ldr	r1, [pc, #244]	@ (80012dc <StartEthTask+0x2ac>)
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 fe60 	bl	8001eac <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80011ec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011f0:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80011f4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011f8:	1c9a      	adds	r2, r3, #2
 80011fa:	f107 0108 	add.w	r1, r7, #8
 80011fe:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <StartEthTask+0x2a0>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800120a:	33a5      	adds	r3, #165	@ 0xa5
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	4623      	mov	r3, r4
 8001210:	f002 ffc6 	bl	80041a0 <mqtt_init>
 8001214:	e003      	b.n	800121e <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 8001216:	4932      	ldr	r1, [pc, #200]	@ (80012e0 <StartEthTask+0x2b0>)
 8001218:	2001      	movs	r0, #1
 800121a:	f000 fe47 	bl	8001eac <logging>
  }

  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 800121e:	f009 fa33 	bl	800a688 <xTaskGetTickCount>
 8001222:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8001226:	f009 fa2f 	bl	800a688 <xTaskGetTickCount>
 800122a:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 800122e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 800123c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001240:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8001244:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001248:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f01f f966 	bl	8020520 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8001254:	e018      	b.n	8001288 <StartEthTask+0x258>
    	  EthResetBegin(); //enable reset state w5500
 8001256:	f000 fb9f 	bl	8001998 <EthResetBegin>
    	  osDelay(100);
 800125a:	2064      	movs	r0, #100	@ 0x64
 800125c:	f007 fac6 	bl	80087ec <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8001260:	f000 fba6 	bl	80019b0 <EthResetEnd>
    	  osDelay(3000);
 8001264:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001268:	f007 fac0 	bl	80087ec <osDelay>
    	  mif.driver->init(&mif);
 800126c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001270:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f107 0208 	add.w	r2, r7, #8
 800127c:	4610      	mov	r0, r2
 800127e:	4798      	blx	r3
    	  osDelay(7000);
 8001280:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001284:	f007 fab2 	bl	80087ec <osDelay>
      while (mif.driver->up(&mif) == false){
 8001288:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800128c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f107 0208 	add.w	r2, r7, #8
 8001298:	4610      	mov	r0, r2
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1d6      	bne.n	8001256 <StartEthTask+0x226>
      }
      osDelay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f007 fa9f 	bl	80087ec <osDelay>
  {
 80012ae:	e7ba      	b.n	8001226 <StartEthTask+0x1f6>
 80012b0:	08024718 	.word	0x08024718
 80012b4:	1fff7a10 	.word	0x1fff7a10
 80012b8:	1fff7a12 	.word	0x1fff7a12
 80012bc:	1fff7a14 	.word	0x1fff7a14
 80012c0:	1fff7a18 	.word	0x1fff7a18
 80012c4:	2000029c 	.word	0x2000029c
 80012c8:	20000324 	.word	0x20000324
 80012cc:	20000294 	.word	0x20000294
 80012d0:	08001b41 	.word	0x08001b41
 80012d4:	080246b8 	.word	0x080246b8
 80012d8:	080246cc 	.word	0x080246cc
 80012dc:	080246e8 	.word	0x080246e8
 80012e0:	08024700 	.word	0x08024700

080012e4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b091      	sub	sp, #68	@ 0x44
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80012ec:	4a69      	ldr	r2, [pc, #420]	@ (8001494 <StartIOTask+0x1b0>)
 80012ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f6:	6018      	str	r0, [r3, #0]
 80012f8:	3304      	adds	r3, #4
 80012fa:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80012fc:	4a66      	ldr	r2, [pc, #408]	@ (8001498 <StartIOTask+0x1b4>)
 80012fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001302:	ca07      	ldmia	r2, {r0, r1, r2}
 8001304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 8001308:	4a64      	ldr	r2, [pc, #400]	@ (800149c <StartIOTask+0x1b8>)
 800130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001312:	6018      	str	r0, [r3, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8001318:	4a5f      	ldr	r2, [pc, #380]	@ (8001498 <StartIOTask+0x1b4>)
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001320:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001324:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <StartIOTask+0x1bc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f007 fcb9 	bl	8008ca0 <osMessageQueueGetCount>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d041      	beq.n	80013b8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8001334:	4b5a      	ldr	r3, [pc, #360]	@ (80014a0 <StartIOTask+0x1bc>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	f107 010c 	add.w	r1, r7, #12
 800133c:	2300      	movs	r3, #0
 800133e:	2200      	movs	r2, #0
 8001340:	f007 fc50 	bl	8008be4 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800134a:	e031      	b.n	80013b0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 800134c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001350:	3340      	adds	r3, #64	@ 0x40
 8001352:	443b      	add	r3, r7
 8001354:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d012      	beq.n	8001382 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 800135c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3340      	adds	r3, #64	@ 0x40
 8001364:	443b      	add	r3, r7
 8001366:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800136a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3340      	adds	r3, #64	@ 0x40
 8001372:	443b      	add	r3, r7
 8001374:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	f004 fb3c 	bl	80059f8 <HAL_GPIO_WritePin>
 8001380:	e011      	b.n	80013a6 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8001382:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	3340      	adds	r3, #64	@ 0x40
 800138a:	443b      	add	r3, r7
 800138c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8001390:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	3340      	adds	r3, #64	@ 0x40
 8001398:	443b      	add	r3, r7
 800139a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f004 fb29 	bl	80059f8 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80013a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013aa:	3301      	adds	r3, #1
 80013ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d9c9      	bls.n	800134c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013be:	e01f      	b.n	8001400 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80013c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3340      	adds	r3, #64	@ 0x40
 80013c8:	443b      	add	r3, r7
 80013ca:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80013ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	3340      	adds	r3, #64	@ 0x40
 80013d6:	443b      	add	r3, r7
 80013d8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80013dc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f004 faf0 	bl	80059c8 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80013f0:	443b      	add	r3, r7
 80013f2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80013f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013fa:	3301      	adds	r3, #1
 80013fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001404:	2b02      	cmp	r3, #2
 8001406:	d9db      	bls.n	80013c0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <StartIOTask+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f007 fc67 	bl	8008ce0 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <StartIOTask+0x1c0>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 0110 	add.w	r1, r7, #16
 800141a:	2300      	movs	r3, #0
 800141c:	2200      	movs	r2, #0
 800141e:	f007 fb81 	bl	8008b24 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001428:	e01f      	b.n	800146a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	3340      	adds	r3, #64	@ 0x40
 8001432:	443b      	add	r3, r7
 8001434:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001438:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	3340      	adds	r3, #64	@ 0x40
 8001440:	443b      	add	r3, r7
 8001442:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001446:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f004 fabb 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800145a:	443b      	add	r3, r7
 800145c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001460:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001464:	3301      	adds	r3, #1
 8001466:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800146a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800146e:	2b02      	cmp	r3, #2
 8001470:	d9db      	bls.n	800142a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <StartIOTask+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f007 fc32 	bl	8008ce0 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <StartIOTask+0x1c4>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	f107 0114 	add.w	r1, r7, #20
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	f007 fb4c 	bl	8008b24 <osMessageQueuePut>

    osDelay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f007 f9ad 	bl	80087ec <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001492:	e747      	b.n	8001324 <StartIOTask+0x40>
 8001494:	08024728 	.word	0x08024728
 8001498:	08024730 	.word	0x08024730
 800149c:	0802473c 	.word	0x0802473c
 80014a0:	20000348 	.word	0x20000348
 80014a4:	20000344 	.word	0x20000344
 80014a8:	20000340 	.word	0x20000340

080014ac <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b08f      	sub	sp, #60	@ 0x3c
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80014b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b8:	f007 f998 	bl	80087ec <osDelay>

	SSD1306_Init (); // initialise the display
 80014bc:	f006 fdc2 	bl	8008044 <SSD1306_Init>
	osDelay(100);//
 80014c0:	2064      	movs	r0, #100	@ 0x64
 80014c2:	f007 f993 	bl	80087ec <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014d2:	2100      	movs	r1, #0
 80014d4:	2001      	movs	r0, #1
 80014d6:	f006 ff15 	bl	8008304 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014da:	2000      	movs	r0, #0
 80014dc:	f006 fe9a 	bl	8008214 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4972      	ldr	r1, [pc, #456]	@ (80016ac <StartDisplayTask+0x200>)
 80014e4:	4872      	ldr	r0, [pc, #456]	@ (80016b0 <StartDisplayTask+0x204>)
 80014e6:	f006 ffa1 	bl	800842c <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80014ea:	2201      	movs	r2, #1
 80014ec:	496f      	ldr	r1, [pc, #444]	@ (80016ac <StartDisplayTask+0x200>)
 80014ee:	4871      	ldr	r0, [pc, #452]	@ (80016b4 <StartDisplayTask+0x208>)
 80014f0:	f006 ff9c 	bl	800842c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014fe:	330b      	adds	r3, #11
 8001500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001504:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001508:	b29b      	uxth	r3, r3
 800150a:	4619      	mov	r1, r3
 800150c:	2001      	movs	r0, #1
 800150e:	f006 fef9 	bl	8008304 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8001512:	2201      	movs	r2, #1
 8001514:	4965      	ldr	r1, [pc, #404]	@ (80016ac <StartDisplayTask+0x200>)
 8001516:	4868      	ldr	r0, [pc, #416]	@ (80016b8 <StartDisplayTask+0x20c>)
 8001518:	f006 ff88 	bl	800842c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001522:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001526:	330b      	adds	r3, #11
 8001528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800152c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001530:	b29b      	uxth	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2001      	movs	r0, #1
 8001536:	f006 fee5 	bl	8008304 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 800153a:	2201      	movs	r2, #1
 800153c:	495b      	ldr	r1, [pc, #364]	@ (80016ac <StartDisplayTask+0x200>)
 800153e:	485f      	ldr	r0, [pc, #380]	@ (80016bc <StartDisplayTask+0x210>)
 8001540:	f006 ff74 	bl	800842c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8001544:	2301      	movs	r3, #1
 8001546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800154a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800154e:	330b      	adds	r3, #11
 8001550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001554:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001558:	b29b      	uxth	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	2001      	movs	r0, #1
 800155e:	f006 fed1 	bl	8008304 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001562:	4b57      	ldr	r3, [pc, #348]	@ (80016c0 <StartDisplayTask+0x214>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001568:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 800156a:	4b55      	ldr	r3, [pc, #340]	@ (80016c0 <StartDisplayTask+0x214>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001570:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001572:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <StartDisplayTask+0x214>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001578:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 800157a:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <StartDisplayTask+0x214>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001580:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001582:	4b4f      	ldr	r3, [pc, #316]	@ (80016c0 <StartDisplayTask+0x214>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001588:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 800158a:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <StartDisplayTask+0x214>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001590:	f107 000c 	add.w	r0, r7, #12
 8001594:	9303      	str	r3, [sp, #12]
 8001596:	9402      	str	r4, [sp, #8]
 8001598:	9101      	str	r1, [sp, #4]
 800159a:	9200      	str	r2, [sp, #0]
 800159c:	4633      	mov	r3, r6
 800159e:	462a      	mov	r2, r5
 80015a0:	4948      	ldr	r1, [pc, #288]	@ (80016c4 <StartDisplayTask+0x218>)
 80015a2:	f021 f899 	bl	80226d8 <siprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2201      	movs	r2, #1
 80015ac:	493f      	ldr	r1, [pc, #252]	@ (80016ac <StartDisplayTask+0x200>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f006 ff3c 	bl	800842c <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80015b4:	f006 fe00 	bl	80081b8 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80015b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015bc:	f008 ff12 	bl	800a3e4 <vTaskDelay>
    int i=0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80015d0:	2100      	movs	r1, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	f006 fe96 	bl	8008304 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015d8:	2000      	movs	r0, #0
 80015da:	f006 fe1b 	bl	8008214 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80015de:	2201      	movs	r2, #1
 80015e0:	4932      	ldr	r1, [pc, #200]	@ (80016ac <StartDisplayTask+0x200>)
 80015e2:	4839      	ldr	r0, [pc, #228]	@ (80016c8 <StartDisplayTask+0x21c>)
 80015e4:	f006 ff22 	bl	800842c <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80015e8:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <StartDisplayTask+0x214>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80015ee:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <StartDisplayTask+0x214>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80015f8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80015fa:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <StartDisplayTask+0x214>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8001602:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001604:	4a2e      	ldr	r2, [pc, #184]	@ (80016c0 <StartDisplayTask+0x214>)
 8001606:	6852      	ldr	r2, [r2, #4]
 8001608:	6892      	ldr	r2, [r2, #8]
 800160a:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 800160c:	f107 000c 	add.w	r0, r7, #12
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4623      	mov	r3, r4
 8001616:	460a      	mov	r2, r1
 8001618:	492c      	ldr	r1, [pc, #176]	@ (80016cc <StartDisplayTask+0x220>)
 800161a:	f021 f85d 	bl	80226d8 <siprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2201      	movs	r2, #1
 8001624:	4921      	ldr	r1, [pc, #132]	@ (80016ac <StartDisplayTask+0x200>)
 8001626:	4618      	mov	r0, r3
 8001628:	f006 ff00 	bl	800842c <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 800162c:	2301      	movs	r3, #1
 800162e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001632:	230a      	movs	r3, #10
 8001634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001638:	210a      	movs	r1, #10
 800163a:	2001      	movs	r0, #1
 800163c:	f006 fe62 	bl	8008304 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8001640:	2201      	movs	r2, #1
 8001642:	491a      	ldr	r1, [pc, #104]	@ (80016ac <StartDisplayTask+0x200>)
 8001644:	4822      	ldr	r0, [pc, #136]	@ (80016d0 <StartDisplayTask+0x224>)
 8001646:	f006 fef1 	bl	800842c <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	3301      	adds	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001656:	491f      	ldr	r1, [pc, #124]	@ (80016d4 <StartDisplayTask+0x228>)
 8001658:	4618      	mov	r0, r3
 800165a:	f021 f83d 	bl	80226d8 <siprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2201      	movs	r2, #1
 8001664:	4911      	ldr	r1, [pc, #68]	@ (80016ac <StartDisplayTask+0x200>)
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fee0 	bl	800842c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800166c:	f006 fda4 	bl	80081b8 <SSD1306_UpdateScreen>

		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8001670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001674:	2201      	movs	r2, #1
 8001676:	2178      	movs	r1, #120	@ 0x78
 8001678:	4817      	ldr	r0, [pc, #92]	@ (80016d8 <StartDisplayTask+0x22c>)
 800167a:	f004 fc49 	bl	8005f10 <HAL_I2C_IsDeviceReady>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <StartDisplayTask+0x1f6>
			HAL_I2C_DeInit(&hi2c1);
 8001684:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <StartDisplayTask+0x22c>)
 8001686:	f004 fb15 	bl	8005cb4 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168e:	f008 fea9 	bl	800a3e4 <vTaskDelay>
			MX_I2C1_Init();
 8001692:	f000 fb55 	bl	8001d40 <MX_I2C1_Init>
			vTaskDelay(1000);
 8001696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169a:	f008 fea3 	bl	800a3e4 <vTaskDelay>
			SSD1306_Init ();
 800169e:	f006 fcd1 	bl	8008044 <SSD1306_Init>
		}
		osDelay(1000);
 80016a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a6:	f007 f8a1 	bl	80087ec <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 80016aa:	e78b      	b.n	80015c4 <StartDisplayTask+0x118>
 80016ac:	20000078 	.word	0x20000078
 80016b0:	08024744 	.word	0x08024744
 80016b4:	08024750 	.word	0x08024750
 80016b8:	0802475c 	.word	0x0802475c
 80016bc:	08024768 	.word	0x08024768
 80016c0:	20000324 	.word	0x20000324
 80016c4:	08024770 	.word	0x08024770
 80016c8:	08024790 	.word	0x08024790
 80016cc:	08024794 	.word	0x08024794
 80016d0:	080247a4 	.word	0x080247a4
 80016d4:	080247a8 	.word	0x080247a8
 80016d8:	2000035c 	.word	0x2000035c

080016dc <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0b6      	sub	sp, #216	@ 0xd8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <StartSettingsTask+0x124>)
 80016f2:	4a44      	ldr	r2, [pc, #272]	@ (8001804 <StartSettingsTask+0x128>)
 80016f4:	4944      	ldr	r1, [pc, #272]	@ (8001808 <StartSettingsTask+0x12c>)
 80016f6:	4845      	ldr	r0, [pc, #276]	@ (800180c <StartSettingsTask+0x130>)
 80016f8:	f003 faa2 	bl	8004c40 <SPI_flash_reg_cb>
  lfs_fs_ll_init(FS_Lock, FS_Unlock);
 80016fc:	4944      	ldr	r1, [pc, #272]	@ (8001810 <StartSettingsTask+0x134>)
 80016fe:	4845      	ldr	r0, [pc, #276]	@ (8001814 <StartSettingsTask+0x138>)
 8001700:	f00a fe9a 	bl	800c438 <lfs_fs_ll_init>

  mg_fs_lfs_mkdir("/web");
 8001704:	4844      	ldr	r0, [pc, #272]	@ (8001818 <StartSettingsTask+0x13c>)
 8001706:	f00a fe83 	bl	800c410 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 800170a:	4844      	ldr	r0, [pc, #272]	@ (800181c <StartSettingsTask+0x140>)
 800170c:	f00a fe6c 	bl	800c3e8 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8001710:	4843      	ldr	r0, [pc, #268]	@ (8001820 <StartSettingsTask+0x144>)
 8001712:	f00a fe69 	bl	800c3e8 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8001716:	4841      	ldr	r0, [pc, #260]	@ (800181c <StartSettingsTask+0x140>)
 8001718:	f00a fe7a 	bl	800c410 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 800171c:	4841      	ldr	r0, [pc, #260]	@ (8001824 <StartSettingsTask+0x148>)
 800171e:	f00a fe77 	bl	800c410 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8001722:	4841      	ldr	r0, [pc, #260]	@ (8001828 <StartSettingsTask+0x14c>)
 8001724:	f00a fe74 	bl	800c410 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8001728:	4840      	ldr	r0, [pc, #256]	@ (800182c <StartSettingsTask+0x150>)
 800172a:	f00a fe71 	bl	800c410 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 800172e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	483e      	ldr	r0, [pc, #248]	@ (8001830 <StartSettingsTask+0x154>)
 8001738:	f00a fcfe 	bl	800c138 <mg_fs_lfs_status>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01c      	beq.n	800177c <StartSettingsTask+0xa0>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8001742:	2101      	movs	r1, #1
 8001744:	483a      	ldr	r0, [pc, #232]	@ (8001830 <StartSettingsTask+0x154>)
 8001746:	f00a fd95 	bl	800c274 <mg_fs_lfs_open>
 800174a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	22c6      	movs	r2, #198	@ 0xc6
 8001754:	4619      	mov	r1, r3
 8001756:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800175a:	f00a fdd9 	bl	800c310 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 800175e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001762:	f00a fdc1 	bl	800c2e8 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <StartSettingsTask+0x158>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f107 0108 	add.w	r1, r7, #8
 8001772:	2302      	movs	r3, #2
 8001774:	2200      	movs	r2, #0
 8001776:	f007 fdbb 	bl	80092f0 <xQueueGenericSend>
 800177a:	e00e      	b.n	800179a <StartSettingsTask+0xbe>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	22c6      	movs	r2, #198	@ 0xc6
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f021 fb67 	bl	8022e58 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <StartSettingsTask+0x158>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	2302      	movs	r3, #2
 8001794:	2200      	movs	r2, #0
 8001796:	f007 fdab 	bl	80092f0 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <StartSettingsTask+0x158>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f107 0108 	add.w	r1, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 f935 	bl	8009a14 <xQueuePeek>
	  if(mqtt_config.save){
 80017aa:	7a3b      	ldrb	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d022      	beq.n	80017f6 <StartSettingsTask+0x11a>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80017b0:	481f      	ldr	r0, [pc, #124]	@ (8001830 <StartSettingsTask+0x154>)
 80017b2:	f00a fe19 	bl	800c3e8 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80017b6:	2102      	movs	r1, #2
 80017b8:	481d      	ldr	r0, [pc, #116]	@ (8001830 <StartSettingsTask+0x154>)
 80017ba:	f00a fd5b 	bl	800c274 <mg_fs_lfs_open>
 80017be:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80017c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d015      	beq.n	80017f6 <StartSettingsTask+0x11a>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	22c6      	movs	r2, #198	@ 0xc6
 80017d0:	4619      	mov	r1, r3
 80017d2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80017d6:	f00a fdb3 	bl	800c340 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80017da:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80017de:	f00a fd83 	bl	800c2e8 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <StartSettingsTask+0x158>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 0108 	add.w	r1, r7, #8
 80017ee:	2302      	movs	r3, #2
 80017f0:	2200      	movs	r2, #0
 80017f2:	f007 fd7d 	bl	80092f0 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 80017f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017fa:	f006 fff7 	bl	80087ec <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80017fe:	e7cc      	b.n	800179a <StartSettingsTask+0xbe>
 8001800:	08001ab1 	.word	0x08001ab1
 8001804:	08001ad5 	.word	0x08001ad5
 8001808:	08001a89 	.word	0x08001a89
 800180c:	08001a5d 	.word	0x08001a5d
 8001810:	08001b21 	.word	0x08001b21
 8001814:	08001afd 	.word	0x08001afd
 8001818:	080247ac 	.word	0x080247ac
 800181c:	080247b4 	.word	0x080247b4
 8001820:	080247c0 	.word	0x080247c0
 8001824:	080247d0 	.word	0x080247d0
 8001828:	080247dc 	.word	0x080247dc
 800182c:	080247e4 	.word	0x080247e4
 8001830:	080247ec 	.word	0x080247ec
 8001834:	2000034c 	.word	0x2000034c

08001838 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	b0d5      	sub	sp, #340	@ 0x154
 800183c:	af06      	add	r7, sp, #24
 800183e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001842:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001846:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count =0;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8001854:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001858:	f006 ffc8 	bl	80087ec <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 800185c:	4846      	ldr	r0, [pc, #280]	@ (8001978 <StartLoggingTask+0x140>)
 800185e:	f000 fb13 	bl	8001e88 <reg_logging_fn>

  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001862:	4b46      	ldr	r3, [pc, #280]	@ (800197c <StartLoggingTask+0x144>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f007 fa1a 	bl	8008ca0 <osMessageQueueGetCount>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d020      	beq.n	80018b4 <StartLoggingTask+0x7c>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8001872:	4b42      	ldr	r3, [pc, #264]	@ (800197c <StartLoggingTask+0x144>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f107 010c 	add.w	r1, r7, #12
 800187a:	2300      	movs	r3, #0
 800187c:	2200      	movs	r2, #0
 800187e:	f007 f9b1 	bl	8008be4 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8001882:	2102      	movs	r1, #2
 8001884:	483e      	ldr	r0, [pc, #248]	@ (8001980 <StartLoggingTask+0x148>)
 8001886:	f00a fcf5 	bl	800c274 <mg_fs_lfs_open>
 800188a:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 800188e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001892:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001896:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 800189a:	461a      	mov	r2, r3
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	3301      	adds	r3, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80018a8:	f00a fd4a 	bl	800c340 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 80018ac:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80018b0:	f00a fd1a 	bl	800c2e8 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018b8:	f006 ff98 	bl	80087ec <osDelay>

    count ++;
 80018bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (count == 2000){
 80018c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018ce:	d1c8      	bne.n	8001862 <StartLoggingTask+0x2a>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 80018d0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4829      	ldr	r0, [pc, #164]	@ (8001980 <StartLoggingTask+0x148>)
 80018da:	f00a fc2d 	bl	800c138 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 80018de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d90a      	bls.n	8001900 <StartLoggingTask+0xc8>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION2);
 80018ea:	4826      	ldr	r0, [pc, #152]	@ (8001984 <StartLoggingTask+0x14c>)
 80018ec:	f00a fd7c 	bl	800c3e8 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION2);
 80018f0:	4924      	ldr	r1, [pc, #144]	@ (8001984 <StartLoggingTask+0x14c>)
 80018f2:	4823      	ldr	r0, [pc, #140]	@ (8001980 <StartLoggingTask+0x148>)
 80018f4:	f00a fd62 	bl	800c3bc <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80018f8:	4923      	ldr	r1, [pc, #140]	@ (8001988 <StartLoggingTask+0x150>)
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fad6 	bl	8001eac <logging>
    	}

    	count = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8001906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fb96 	bl	800c03c <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8001910:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8001914:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8001918:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 800191c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8001920:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8001924:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8001928:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 800192c:	9404      	str	r4, [sp, #16]
 800192e:	9003      	str	r0, [sp, #12]
 8001930:	9102      	str	r1, [sp, #8]
 8001932:	9201      	str	r2, [sp, #4]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4633      	mov	r3, r6
 8001938:	462a      	mov	r2, r5
 800193a:	4914      	ldr	r1, [pc, #80]	@ (800198c <StartLoggingTask+0x154>)
 800193c:	2001      	movs	r0, #1
 800193e:	f000 fab5 	bl	8001eac <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <StartLoggingTask+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	b2d9      	uxtb	r1, r3
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <StartLoggingTask+0x158>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <StartLoggingTask+0x158>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 800195c:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 800195e:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <StartLoggingTask+0x158>)
 8001960:	6852      	ldr	r2, [r2, #4]
 8001962:	6892      	ldr	r2, [r2, #8]
 8001964:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	4909      	ldr	r1, [pc, #36]	@ (8001994 <StartLoggingTask+0x15c>)
 8001970:	2001      	movs	r0, #1
 8001972:	f000 fa9b 	bl	8001eac <logging>
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001976:	e774      	b.n	8001862 <StartLoggingTask+0x2a>
 8001978:	08001bfd 	.word	0x08001bfd
 800197c:	20000350 	.word	0x20000350
 8001980:	08024800 	.word	0x08024800
 8001984:	08024810 	.word	0x08024810
 8001988:	08024820 	.word	0x08024820
 800198c:	08024834 	.word	0x08024834
 8001990:	20000324 	.word	0x20000324
 8001994:	080246cc 	.word	0x080246cc

08001998 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a2:	4802      	ldr	r0, [pc, #8]	@ (80019ac <EthResetBegin+0x14>)
 80019a4:	f004 f828 	bl	80059f8 <HAL_GPIO_WritePin>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40020000 	.word	0x40020000

080019b0 <EthResetEnd>:

void EthResetEnd(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ba:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <EthResetEnd+0x14>)
 80019bc:	f004 f81c 	bl	80059f8 <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020000 	.word	0x40020000

080019c8 <EthBegin>:

void EthBegin(void * param){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <EthBegin+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 ffa8 	bl	800892e <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <EthBegin+0x30>)
 80019e6:	f004 f807 	bl	80059f8 <HAL_GPIO_WritePin>
	//osDelay(1);
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000354 	.word	0x20000354
 80019f8:	40020400 	.word	0x40020400

080019fc <EthEnd>:

void EthEnd(void * param){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	//osDelay(1);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <EthEnd+0x28>)
 8001a0c:	f003 fff4 	bl	80059f8 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <EthEnd+0x2c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 ffd5 	bl	80089c4 <osMutexRelease>


//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020400 	.word	0x40020400
 8001a28:	20000354 	.word	0x20000354

08001a2c <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8001a38:	f107 020f 	add.w	r2, r7, #15
 8001a3c:	1cf9      	adds	r1, r7, #3
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2301      	movs	r3, #1
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <EthTxn+0x2c>)
 8001a48:	f005 fd9c 	bl	8007584 <HAL_SPI_TransmitReceive>
  return rx_data;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200003b0 	.word	0x200003b0

08001a5c <FlashBegin>:

void FlashBegin(void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <FlashBegin+0x24>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f006 ff60 	bl	800892e <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <FlashBegin+0x28>)
 8001a76:	f003 ffbf 	bl	80059f8 <HAL_GPIO_WritePin>
	//osDelay(1);
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000354 	.word	0x20000354
 8001a84:	40020000 	.word	0x40020000

08001a88 <FlashEnd>:

void FlashEnd(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	//osDelay(1);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <FlashEnd+0x20>)
 8001a94:	f003 ffb0 	bl	80059f8 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <FlashEnd+0x24>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 ff91 	bl	80089c4 <osMutexRelease>


//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
//	osThreadYield(); //for smal delay
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	20000354 	.word	0x20000354

08001ab0 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8001aba:	1df9      	adds	r1, r7, #7
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <SendByteSPI2+0x20>)
 8001ac4:	f005 fb01 	bl	80070ca <HAL_SPI_Transmit>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200003b0 	.word	0x200003b0

08001ad4 <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <RecvBuffSPI2+0x24>)
 8001aea:	f005 fc32 	bl	8007352 <HAL_SPI_Receive>
 8001aee:	4603      	mov	r3, r0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200003b0 	.word	0x200003b0

08001afc <FS_Lock>:

void FS_Lock(void * param){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <FS_Lock+0x20>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f006 ff0e 	bl	800892e <osMutexAcquire>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000358 	.word	0x20000358

08001b20 <FS_Unlock>:

void FS_Unlock(void * param){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <FS_Unlock+0x1c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f006 ff49 	bl	80089c4 <osMutexRelease>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000358 	.word	0x20000358

08001b40 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d02b      	beq.n	8001bae <RW_parameters_from_queue+0x6e>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	dc44      	bgt.n	8001be4 <RW_parameters_from_queue+0xa4>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <RW_parameters_from_queue+0x24>
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d018      	beq.n	8001b94 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8001b62:	e03f      	b.n	8001be4 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8001b68:	78bb      	ldrb	r3, [r7, #2]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <RW_parameters_from_queue+0xac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 ff4c 	bl	8009a14 <xQueuePeek>
			break;
 8001b7c:	e02f      	b.n	8001bde <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8001b7e:	78bb      	ldrb	r3, [r7, #2]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d12c      	bne.n	8001bde <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <RW_parameters_from_queue+0xac>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	2302      	movs	r3, #2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	f007 fbaf 	bl	80092f0 <xQueueGenericSend>
			break;
 8001b92:	e024      	b.n	8001bde <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8001b98:	78bb      	ldrb	r3, [r7, #2]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d121      	bne.n	8001be2 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <RW_parameters_from_queue+0xb0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 ff34 	bl	8009a14 <xQueuePeek>
			break;
 8001bac:	e019      	b.n	8001be2 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8001bb2:	78bb      	ldrb	r3, [r7, #2]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <RW_parameters_from_queue+0xb4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f007 ff27 	bl	8009a14 <xQueuePeek>
}
 8001bc6:	e00d      	b.n	8001be4 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8001bc8:	78bb      	ldrb	r3, [r7, #2]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10a      	bne.n	8001be4 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <RW_parameters_from_queue+0xb8>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	f007 fb8a 	bl	80092f0 <xQueueGenericSend>
}
 8001bdc:	e002      	b.n	8001be4 <RW_parameters_from_queue+0xa4>
			break;
 8001bde:	bf00      	nop
 8001be0:	e000      	b.n	8001be4 <RW_parameters_from_queue+0xa4>
			break;
 8001be2:	bf00      	nop
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000034c 	.word	0x2000034c
 8001bf0:	20000340 	.word	0x20000340
 8001bf4:	20000344 	.word	0x20000344
 8001bf8:	20000348 	.word	0x20000348

08001bfc <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	f107 0c08 	add.w	ip, r7, #8
 8001c06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <add_log_mess_to_q+0x2c>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	f107 0108 	add.w	r1, r7, #8
 8001c16:	f006 ff85 	bl	8008b24 <osMessageQueuePut>

}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c22:	b004      	add	sp, #16
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000350 	.word	0x20000350

08001c2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a33      	ldr	r2, [pc, #204]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a2c      	ldr	r2, [pc, #176]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <MX_GPIO_Init+0x108>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001c9c:	4826      	ldr	r0, [pc, #152]	@ (8001d38 <MX_GPIO_Init+0x10c>)
 8001c9e:	f003 feab 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca8:	4824      	ldr	r0, [pc, #144]	@ (8001d3c <MX_GPIO_Init+0x110>)
 8001caa:	f003 fea5 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cb4:	4820      	ldr	r0, [pc, #128]	@ (8001d38 <MX_GPIO_Init+0x10c>)
 8001cb6:	f003 fe9f 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481a      	ldr	r0, [pc, #104]	@ (8001d38 <MX_GPIO_Init+0x10c>)
 8001cce:	f003 fc13 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8001cd2:	23e0      	movs	r3, #224	@ 0xe0
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4813      	ldr	r0, [pc, #76]	@ (8001d38 <MX_GPIO_Init+0x10c>)
 8001cea:	f003 fc05 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8001cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <MX_GPIO_Init+0x110>)
 8001d08:	f003 fbf6 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8001d0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	4619      	mov	r1, r3
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <MX_GPIO_Init+0x10c>)
 8001d26:	f003 fbe7 	bl	80054f8 <HAL_GPIO_Init>

}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400

08001d40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d46:	4a13      	ldr	r2, [pc, #76]	@ (8001d94 <MX_I2C1_Init+0x54>)
 8001d48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d4c:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <MX_I2C1_Init+0x58>)
 8001d4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <MX_I2C1_Init+0x50>)
 8001d7e:	f003 fe55 	bl	8005a2c <HAL_I2C_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d88:	f000 f9c0 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000035c 	.word	0x2000035c
 8001d94:	40005400 	.word	0x40005400
 8001d98:	00030d40 	.word	0x00030d40

08001d9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_I2C_MspInit+0x84>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12b      	bne.n	8001e16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dda:	23c0      	movs	r3, #192	@ 0xc0
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <HAL_I2C_MspInit+0x8c>)
 8001df6:	f003 fb7f 	bl	80054f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	@ 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400

08001e2c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_I2C_MspDeInit+0x38>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10d      	bne.n	8001e5a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_I2C_MspDeInit+0x3c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <HAL_I2C_MspDeInit+0x3c>)
 8001e44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001e4a:	2140      	movs	r1, #64	@ 0x40
 8001e4c:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <HAL_I2C_MspDeInit+0x40>)
 8001e4e:	f003 fcd7 	bl	8005800 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <HAL_I2C_MspDeInit+0x40>)
 8001e56:	f003 fcd3 	bl	8005800 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400

08001e70 <proto>:

#include "logger.h"
#include "definitions.h"
#include "data_types.h"

static void proto(struct log_message mess ){};
 8001e70:	b084      	sub	sp, #16
 8001e72:	b490      	push	{r4, r7}
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	f107 0408 	add.w	r4, r7, #8
 8001e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc90      	pop	{r4, r7}
 8001e84:	b004      	add	sp, #16
 8001e86:	4770      	bx	lr

08001e88 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;

void reg_logging_fn(void (* fn)(struct log_message)){
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <reg_logging_fn+0x14>
		_send_log_mess = fn;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <reg_logging_fn+0x20>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6013      	str	r3, [r2, #0]
	}
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000

08001eac <logging>:

void logging(uint8_t level, const char *format, ...){
 8001eac:	b40e      	push	{r1, r2, r3}
 8001eae:	b5b0      	push	{r4, r5, r7, lr}
 8001eb0:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8001eb4:	af3e      	add	r7, sp, #248	@ 0xf8
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ebc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001ec0:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f020 ffc3 	bl	8022e58 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 8001ed2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eda:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001ede:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	701a      	strb	r2, [r3, #0]

    // Инициализация списка аргументов
    va_start(args, format);
 8001ee6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001eea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ef2:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8001ef4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ef8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001efc:	f107 0210 	add.w	r2, r7, #16
 8001f00:	1c50      	adds	r0, r2, #1
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001f08:	21fd      	movs	r1, #253	@ 0xfd
 8001f0a:	f020 fe67 	bl	8022bdc <vsniprintf>
 8001f0e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    // Завершение работы со списком аргументов
    va_end(args);

    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 3) {
 8001f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0d      	blt.n	8001f36 <logging+0x8a>
 8001f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f1e:	2bfc      	cmp	r3, #252	@ 0xfc
 8001f20:	dc09      	bgt.n	8001f36 <logging+0x8a>
         mess.log_len = formatted_len;
 8001f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f30:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 8001f34:	e006      	b.n	8001f44 <logging+0x98>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 3;
 8001f36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f3e:	22fd      	movs	r2, #253	@ 0xfd
 8001f40:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     // Добавление символов \r\n\0
     mess.log_text[mess.log_len] = '\r';
 8001f44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f4c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001f50:	461a      	mov	r2, r3
 8001f52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f5a:	4413      	add	r3, r2
 8001f5c:	220d      	movs	r2, #13
 8001f5e:	705a      	strb	r2, [r3, #1]
     mess.log_text[mess.log_len + 1] = '\n';
 8001f60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f68:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001f72:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001f76:	4413      	add	r3, r2
 8001f78:	220a      	movs	r2, #10
 8001f7a:	705a      	strb	r2, [r3, #1]
     mess.log_text[mess.log_len + 2] = '\0';
 8001f7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f84:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001f8e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001f92:	4413      	add	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	705a      	strb	r2, [r3, #1]
     mess.log_len += 2;  // Обновление длины для учёта \r\n
 8001f98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fa0:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb0:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <logging+0x140>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00f      	beq.n	8001fdc <logging+0x130>
        _send_log_mess(mess);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <logging+0x140>)
 8001fbe:	681d      	ldr	r5, [r3, #0]
 8001fc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fc4:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 8001fc8:	4668      	mov	r0, sp
 8001fca:	f104 0310 	add.w	r3, r4, #16
 8001fce:	22f2      	movs	r2, #242	@ 0xf2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f021 f822 	bl	802301a <memcpy>
 8001fd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fda:	47a8      	blx	r5
    }
}
 8001fdc:	bf00      	nop
 8001fde:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001fe8:	b003      	add	sp, #12
 8001fea:	4770      	bx	lr
 8001fec:	20000000 	.word	0x20000000

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff4:	f003 f91c 	bl	8005230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff8:	f000 f80e 	bl	8002018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffc:	f7ff fe16 	bl	8001c2c <MX_GPIO_Init>
  MX_SPI2_Init();
 8002000:	f000 f88a 	bl	8002118 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002004:	f7ff fe9c 	bl	8001d40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002008:	f006 fb14 	bl	8008634 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800200c:	f7fe ff74 	bl	8000ef8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002010:	f006 fb34 	bl	800867c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <main+0x24>

08002018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b094      	sub	sp, #80	@ 0x50
 800201c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	2230      	movs	r2, #48	@ 0x30
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f020 ff16 	bl	8022e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <SystemClock_Config+0xc8>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <SystemClock_Config+0xc8>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204a:	6413      	str	r3, [r2, #64]	@ 0x40
 800204c:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <SystemClock_Config+0xc8>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <SystemClock_Config+0xcc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <SystemClock_Config+0xcc>)
 8002062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <SystemClock_Config+0xcc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207e:	2302      	movs	r3, #2
 8002080:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002082:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002088:	2304      	movs	r3, #4
 800208a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800208c:	2364      	movs	r3, #100	@ 0x64
 800208e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002090:	2302      	movs	r3, #2
 8002092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002094:	2304      	movs	r3, #4
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fac1 	bl	8006624 <HAL_RCC_OscConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020a8:	f000 f830 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ac:	230f      	movs	r3, #15
 80020ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2103      	movs	r1, #3
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fd23 	bl	8006b14 <HAL_RCC_ClockConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020d4:	f000 f81a 	bl	800210c <Error_Handler>
  }
}
 80020d8:	bf00      	nop
 80020da:	3750      	adds	r7, #80	@ 0x50
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020fa:	f003 f8bb 	bl	8005274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40014000 	.word	0x40014000

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <Error_Handler+0x8>

08002118 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800211c:	4b17      	ldr	r3, [pc, #92]	@ (800217c <MX_SPI2_Init+0x64>)
 800211e:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <MX_SPI2_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <MX_SPI2_Init+0x64>)
 8002124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <MX_SPI2_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <MX_SPI2_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_SPI2_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <MX_SPI2_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_SPI2_Init+0x64>)
 8002144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002148:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_SPI2_Init+0x64>)
 800214c:	2210      	movs	r2, #16
 800214e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <MX_SPI2_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_SPI2_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <MX_SPI2_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_SPI2_Init+0x64>)
 8002164:	220a      	movs	r2, #10
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <MX_SPI2_Init+0x64>)
 800216a:	f004 ff25 	bl	8006fb8 <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002174:	f7ff ffca 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200003b0 	.word	0x200003b0
 8002180:	40003800 	.word	0x40003800

08002184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_SPI_MspInit+0x84>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12c      	bne.n	8002200 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_SPI_MspInit+0x88>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021de:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f0:	2305      	movs	r3, #5
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <HAL_SPI_MspInit+0x8c>)
 80021fc:	f003 f97c 	bl	80054f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	@ 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40003800 	.word	0x40003800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020400 	.word	0x40020400

08002214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_MspInit+0x54>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_MspInit+0x54>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002228:	6453      	str	r3, [r2, #68]	@ 0x44
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_MspInit+0x54>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_MspInit+0x54>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <HAL_MspInit+0x54>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_MspInit+0x54>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	210f      	movs	r1, #15
 8002256:	f06f 0001 	mvn.w	r0, #1
 800225a:	f003 f91e 	bl	800549a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_InitTick+0xd0>)
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	4a2d      	ldr	r2, [pc, #180]	@ (800233c <HAL_InitTick+0xd0>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	6453      	str	r3, [r2, #68]	@ 0x44
 800228c:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <HAL_InitTick+0xd0>)
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002298:	f107 020c 	add.w	r2, r7, #12
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fe56 	bl	8006f54 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022a8:	f004 fe40 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 80022ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_InitTick+0xd4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3b01      	subs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80022bc:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_InitTick+0xd8>)
 80022be:	4a22      	ldr	r2, [pc, #136]	@ (8002348 <HAL_InitTick+0xdc>)
 80022c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_InitTick+0xd8>)
 80022c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022c8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80022ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002344 <HAL_InitTick+0xd8>)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_InitTick+0xd8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_InitTick+0xd8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_InitTick+0xd8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80022e2:	4818      	ldr	r0, [pc, #96]	@ (8002344 <HAL_InitTick+0xd8>)
 80022e4:	f005 fc3a 	bl	8007b5c <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80022ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d11b      	bne.n	800232e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80022f6:	4813      	ldr	r0, [pc, #76]	@ (8002344 <HAL_InitTick+0xd8>)
 80022f8:	f005 fc8a 	bl	8007c10 <HAL_TIM_Base_Start_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002306:	2b00      	cmp	r3, #0
 8002308:	d111      	bne.n	800232e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800230a:	2018      	movs	r0, #24
 800230c:	f003 f8e1 	bl	80054d2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	d808      	bhi.n	8002328 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002316:	2200      	movs	r2, #0
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	2018      	movs	r0, #24
 800231c:	f003 f8bd 	bl	800549a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_InitTick+0xe0>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e002      	b.n	800232e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800232e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002332:	4618      	mov	r0, r3
 8002334:	3730      	adds	r7, #48	@ 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	431bde83 	.word	0x431bde83
 8002344:	20000408 	.word	0x20000408
 8002348:	40014000 	.word	0x40014000
 800234c:	20000070 	.word	0x20000070

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <NMI_Handler+0x4>

08002358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <MemManage_Handler+0x4>

08002368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <UsageFault_Handler+0x4>

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800238e:	f005 fca1 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000408 	.word	0x20000408

0800239c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_kill>:

int _kill(int pid, int sig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b6:	f020 fe03 	bl	8022fc0 <__errno>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2216      	movs	r2, #22
 80023be:	601a      	str	r2, [r3, #0]
  return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_exit>:

void _exit (int status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ffe7 	bl	80023ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <_exit+0x12>

080023e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00a      	b.n	800240a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f4:	f3af 8000 	nop.w
 80023f8:	4601      	mov	r1, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <_read+0x12>
  }

  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e009      	b.n	8002442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf1      	blt.n	800242e <_write+0x12>
  }
  return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_close>:

int _close(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_isatty>:

int _isatty(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f020 fd68 	bl	8022fc0 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20020000 	.word	0x20020000
 800251c:	00000800 	.word	0x00000800
 8002520:	20000450 	.word	0x20000450
 8002524:	20017a20 	.word	0x20017a20

08002528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SystemInit+0x20>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <SystemInit+0x20>)
 8002534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002550:	f7ff ffea 	bl	8002528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f020 fd27 	bl	8022fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7ff fd37 	bl	8001ff0 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002590:	08029a3c 	.word	0x08029a3c
  ldr r2, =_sbss
 8002594:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002598:	20017a1c 	.word	0x20017a1c

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>

0800259e <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 fb53 	bl	800bc5c <pvPortMalloc>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <mg_calloc+0x34>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f020 fc43 	bl	8022e58 <memset>
  return p;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b093      	sub	sp, #76	@ 0x4c
 80025e0:	af08      	add	r7, sp, #32
 80025e2:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	4618      	mov	r0, r3
 80025ea:	f009 fd27 	bl	800c03c <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 80025ee:	490e      	ldr	r1, [pc, #56]	@ (8002628 <handle_ram_status_get+0x4c>)
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff fc5b 	bl	8001eac <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 80025f6:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 80025f8:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 80025fa:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 80025fc:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 80025fe:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8002600:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8002602:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8002604:	9606      	str	r6, [sp, #24]
 8002606:	9505      	str	r5, [sp, #20]
 8002608:	9404      	str	r4, [sp, #16]
 800260a:	9003      	str	r0, [sp, #12]
 800260c:	9102      	str	r1, [sp, #8]
 800260e:	9201      	str	r2, [sp, #4]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <handle_ram_status_get+0x50>)
 8002614:	4a06      	ldr	r2, [pc, #24]	@ (8002630 <handle_ram_status_get+0x54>)
 8002616:	21c8      	movs	r1, #200	@ 0xc8
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f015 f97b 	bl	8017914 <mg_http_reply>
}
 800261e:	bf00      	nop
 8002620:	372c      	adds	r7, #44	@ 0x2c
 8002622:	46bd      	mov	sp, r7
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002626:	bf00      	nop
 8002628:	080248c8 	.word	0x080248c8
 800262c:	080248e8 	.word	0x080248e8
 8002630:	080249ec 	.word	0x080249ec

08002634 <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8002634:	b580      	push	{r7, lr}
 8002636:	b0a0      	sub	sp, #128	@ 0x80
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 800263e:	2321      	movs	r3, #33	@ 0x21
 8002640:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 8002642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002646:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 800264a:	2310      	movs	r3, #16
 800264c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 8002650:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffa1 	bl	800259e <mg_calloc>
 800265c:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 800265e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <calc_file_md5sum+0x3c>
		free(buff);
 8002664:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002666:	f009 fbc7 	bl	800bdf8 <vPortFree>
		return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800266e:	e067      	b.n	8002740 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8002670:	2201      	movs	r2, #1
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4834      	ldr	r0, [pc, #208]	@ (8002748 <calc_file_md5sum+0x114>)
 8002676:	f013 fde5 	bl	8016244 <mg_fs_open>
 800267a:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 800267c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 8002682:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002684:	f013 fe05 	bl	8016292 <mg_fs_close>
		free(buff);
 8002688:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800268a:	f009 fbb5 	bl	800bdf8 <vPortFree>
		return -2;
 800268e:	f06f 0301 	mvn.w	r3, #1
 8002692:	e055      	b.n	8002740 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4618      	mov	r0, r3
 800269a:	f018 fa4d 	bl	801ab38 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 800269e:	e006      	b.n	80026ae <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80026a6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80026a8:	4618      	mov	r0, r3
 80026aa:	f019 f8f1 	bl	801b890 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 80026ae:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <calc_file_md5sum+0x114>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026b4:	6810      	ldr	r0, [r2, #0]
 80026b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80026ba:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80026bc:	4798      	blx	r3
 80026be:	66b8      	str	r0, [r7, #104]	@ 0x68
 80026c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ec      	bne.n	80026a0 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 80026c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80026c8:	f013 fde3 	bl	8016292 <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 80026cc:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff63 	bl	800259e <mg_calloc>
 80026d8:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 80026da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d108      	bne.n	80026f2 <calc_file_md5sum+0xbe>
		free(buff);
 80026e0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80026e2:	f009 fb89 	bl	800bdf8 <vPortFree>
		free(digest);
 80026e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80026e8:	f009 fb86 	bl	800bdf8 <vPortFree>
		return -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026f0:	e026      	b.n	8002740 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80026f8:	4618      	mov	r0, r3
 80026fa:	f019 f947 	bl	801b98c <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 80026fe:	2300      	movs	r3, #0
 8002700:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002702:	e013      	b.n	800272c <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8002704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	1898      	adds	r0, r3, r2
 800270e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	461a      	mov	r2, r3
 8002714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002716:	1a99      	subs	r1, r3, r2
 8002718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800271a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <calc_file_md5sum+0x118>)
 8002722:	f01f ff99 	bl	8022658 <sniprintf>
	for (int i = 0; i < 16; ++i) {
 8002726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002728:	3301      	adds	r3, #1
 800272a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800272c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800272e:	2b0f      	cmp	r3, #15
 8002730:	dde8      	ble.n	8002704 <calc_file_md5sum+0xd0>
	}

	free(buff);
 8002732:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002734:	f009 fb60 	bl	800bdf8 <vPortFree>
	free(digest);
 8002738:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800273a:	f009 fb5d 	bl	800bdf8 <vPortFree>

	return 0;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3780      	adds	r7, #128	@ 0x80
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000008 	.word	0x20000008
 800274c:	08024a30 	.word	0x08024a30

08002750 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b094      	sub	sp, #80	@ 0x50
 8002754:	af06      	add	r7, sp, #24
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 800275a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275e:	4960      	ldr	r1, [pc, #384]	@ (80028e0 <handle_io_status_get+0x190>)
 8002760:	4618      	mov	r0, r3
 8002762:	f01e fafb 	bl	8020d5c <mg_str_s>
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	cb0c      	ldmia	r3, {r2, r3}
 8002772:	c903      	ldmia	r1, {r0, r1}
 8002774:	f01e fbc5 	bl	8020f02 <mg_match>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <handle_io_status_get+0x194>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f107 001c 	add.w	r0, r7, #28
 8002786:	2200      	movs	r2, #0
 8002788:	2101      	movs	r1, #1
 800278a:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 800278c:	4b55      	ldr	r3, [pc, #340]	@ (80028e4 <handle_io_status_get+0x194>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f107 021c 	add.w	r2, r7, #28
 8002794:	1cd0      	adds	r0, r2, #3
 8002796:	2200      	movs	r2, #0
 8002798:	2102      	movs	r1, #2
 800279a:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 800279c:	7f3b      	ldrb	r3, [r7, #28]
 800279e:	7f7a      	ldrb	r2, [r7, #29]
 80027a0:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 80027a2:	7ff8      	ldrb	r0, [r7, #31]
 80027a4:	f897 4020 	ldrb.w	r4, [r7, #32]
 80027a8:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80027ac:	9505      	str	r5, [sp, #20]
 80027ae:	9404      	str	r4, [sp, #16]
 80027b0:	9003      	str	r0, [sp, #12]
 80027b2:	9102      	str	r1, [sp, #8]
 80027b4:	9201      	str	r2, [sp, #4]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <handle_io_status_get+0x198>)
 80027ba:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <handle_io_status_get+0x19c>)
 80027bc:	21c8      	movs	r1, #200	@ 0xc8
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f015 f8a8 	bl	8017914 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 80027c4:	e087      	b.n	80028d6 <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80027c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ca:	4949      	ldr	r1, [pc, #292]	@ (80028f0 <handle_io_status_get+0x1a0>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f01e fac5 	bl	8020d5c <mg_str_s>
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027dc:	cb0c      	ldmia	r3, {r2, r3}
 80027de:	c903      	ldmia	r1, {r0, r1}
 80027e0:	f01e fb8f 	bl	8020f02 <mg_match>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06d      	beq.n	80028c6 <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4a40      	ldr	r2, [pc, #256]	@ (80028f4 <handle_io_status_get+0x1a4>)
 80027f2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80027f6:	c903      	ldmia	r1, {r0, r1}
 80027f8:	f017 fea6 	bl	801a548 <mg_json_get_num>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d059      	beq.n	80028b6 <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	4a3b      	ldr	r2, [pc, #236]	@ (80028f8 <handle_io_status_get+0x1a8>)
 800280a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 800280e:	c903      	ldmia	r1, {r0, r1}
 8002810:	f017 fe9a 	bl	801a548 <mg_json_get_num>
 8002814:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d04d      	beq.n	80028b6 <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 800281a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f9bd 	bl	8000ba0 <__aeabi_d2uiz>
 8002826:	4603      	mov	r3, r0
 8002828:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 800282c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f9b4 	bl	8000ba0 <__aeabi_d2uiz>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 800283e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02f      	beq.n	80028a6 <handle_io_status_get+0x156>
 8002846:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800284a:	2b03      	cmp	r3, #3
 800284c:	d82b      	bhi.n	80028a6 <handle_io_status_get+0x156>
 800284e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <handle_io_status_get+0x10e>
 8002856:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800285a:	2b01      	cmp	r3, #1
 800285c:	d123      	bne.n	80028a6 <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <handle_io_status_get+0x194>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f107 0018 	add.w	r0, r7, #24
 8002866:	2200      	movs	r2, #0
 8002868:	2102      	movs	r1, #2
 800286a:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 800286c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002870:	3b01      	subs	r3, #1
 8002872:	3338      	adds	r3, #56	@ 0x38
 8002874:	443b      	add	r3, r7
 8002876:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800287a:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 800287e:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <handle_io_status_get+0x194>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f107 0018 	add.w	r0, r7, #24
 8002886:	2201      	movs	r2, #1
 8002888:	2102      	movs	r1, #2
 800288a:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 800288c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002890:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002894:	9201      	str	r2, [sp, #4]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <handle_io_status_get+0x1ac>)
 800289a:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <handle_io_status_get+0x19c>)
 800289c:	21c8      	movs	r1, #200	@ 0xc8
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f015 f838 	bl	8017914 <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80028a4:	e017      	b.n	80028d6 <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80028a6:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <handle_io_status_get+0x1b0>)
 80028a8:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <handle_io_status_get+0x19c>)
 80028aa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f015 f830 	bl	8017914 <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80028b4:	e00f      	b.n	80028d6 <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <handle_io_status_get+0x1b4>)
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <handle_io_status_get+0x19c>)
 80028ba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f015 f828 	bl	8017914 <mg_http_reply>
}
 80028c4:	e007      	b.n	80028d6 <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <handle_io_status_get+0x1b8>)
 80028c8:	4a08      	ldr	r2, [pc, #32]	@ (80028ec <handle_io_status_get+0x19c>)
 80028ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f015 f820 	bl	8017914 <mg_http_reply>
}
 80028d4:	e7ff      	b.n	80028d6 <handle_io_status_get+0x186>
 80028d6:	bf00      	nop
 80028d8:	3738      	adds	r7, #56	@ 0x38
 80028da:	46bd      	mov	sp, r7
 80028dc:	bdb0      	pop	{r4, r5, r7, pc}
 80028de:	bf00      	nop
 80028e0:	08024a38 	.word	0x08024a38
 80028e4:	20000454 	.word	0x20000454
 80028e8:	08024a3c 	.word	0x08024a3c
 80028ec:	08024a70 	.word	0x08024a70
 80028f0:	08024ae0 	.word	0x08024ae0
 80028f4:	08024ae8 	.word	0x08024ae8
 80028f8:	08024af4 	.word	0x08024af4
 80028fc:	08024afc 	.word	0x08024afc
 8002900:	08024b34 	.word	0x08024b34
 8002904:	08024b70 	.word	0x08024b70
 8002908:	08024bac 	.word	0x08024bac

0800290c <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 800290c:	b580      	push	{r7, lr}
 800290e:	b092      	sub	sp, #72	@ 0x48
 8002910:	af04      	add	r7, sp, #16
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	49a7      	ldr	r1, [pc, #668]	@ (8002bb8 <handle_mqtt_conf+0x2ac>)
 800291c:	4618      	mov	r0, r3
 800291e:	f01e fa1d 	bl	8020d5c <mg_str_s>
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	cb0c      	ldmia	r3, {r2, r3}
 800292e:	c903      	ldmia	r1, {r0, r1}
 8002930:	f01e fae7 	bl	8020f02 <mg_match>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04d      	beq.n	80029d6 <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002940:	21c6      	movs	r1, #198	@ 0xc6
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff fe2b 	bl	800259e <mg_calloc>
 8002948:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002950:	4b9a      	ldr	r3, [pc, #616]	@ (8002bbc <handle_mqtt_conf+0x2b0>)
 8002952:	4a9b      	ldr	r2, [pc, #620]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002954:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f014 ffdb 	bl	8017914 <mg_http_reply>
			free(mqtt_config);
 800295e:	69f8      	ldr	r0, [r7, #28]
 8002960:	f009 fa4a 	bl	800bdf8 <vPortFree>
			return;
 8002964:	e124      	b.n	8002bb0 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8002966:	4b97      	ldr	r3, [pc, #604]	@ (8002bc4 <handle_mqtt_conf+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	69f8      	ldr	r0, [r7, #28]
 8002970:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	33a5      	adds	r3, #165	@ 0xa5
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fc82 	bl	8000280 <strlen>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	33a5      	adds	r3, #165	@ 0xa5
 8002986:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800298a:	212a      	movs	r1, #42	@ 0x2a
 800298c:	4618      	mov	r0, r3
 800298e:	f020 fa63 	bl	8022e58 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8002992:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	2200      	movs	r2, #0
 800299c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <handle_mqtt_conf+0xa0>
 80029a8:	4b87      	ldr	r3, [pc, #540]	@ (8002bc8 <handle_mqtt_conf+0x2bc>)
 80029aa:	e000      	b.n	80029ae <handle_mqtt_conf+0xa2>
 80029ac:	4b87      	ldr	r3, [pc, #540]	@ (8002bcc <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	3202      	adds	r2, #2
 80029b2:	69f9      	ldr	r1, [r7, #28]
 80029b4:	3184      	adds	r1, #132	@ 0x84
 80029b6:	69f8      	ldr	r0, [r7, #28]
 80029b8:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80029ba:	9003      	str	r0, [sp, #12]
 80029bc:	9102      	str	r1, [sp, #8]
 80029be:	9201      	str	r2, [sp, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4b83      	ldr	r3, [pc, #524]	@ (8002bd0 <handle_mqtt_conf+0x2c4>)
 80029c4:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 80029c6:	21c8      	movs	r1, #200	@ 0xc8
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f014 ffa3 	bl	8017914 <mg_http_reply>

		free(mqtt_config);
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	f009 fa12 	bl	800bdf8 <vPortFree>
 80029d4:	e0ec      	b.n	8002bb0 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	497e      	ldr	r1, [pc, #504]	@ (8002bd4 <handle_mqtt_conf+0x2c8>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f01e f9bd 	bl	8020d5c <mg_str_s>
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	cb0c      	ldmia	r3, {r2, r3}
 80029ee:	c903      	ldmia	r1, {r0, r1}
 80029f0:	f01e fa87 	bl	8020f02 <mg_match>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80d3 	beq.w	8002ba2 <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80029fc:	21c6      	movs	r1, #198	@ 0xc6
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff fdcd 	bl	800259e <mg_calloc>
 8002a04:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8002a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <handle_mqtt_conf+0x2b0>)
 8002a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002a10:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f014 ff7d 	bl	8017914 <mg_http_reply>
			free(mqtt_config);
 8002a1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a1c:	f009 f9ec 	bl	800bdf8 <vPortFree>
			return;
 8002a20:	e0c6      	b.n	8002bb0 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	4a6b      	ldr	r2, [pc, #428]	@ (8002bd8 <handle_mqtt_conf+0x2cc>)
 8002a2a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002a2e:	c903      	ldmia	r1, {r0, r1}
 8002a30:	f017 fa50 	bl	8019ed4 <mg_json_get>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da07      	bge.n	8002a4a <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002a3a:	4b68      	ldr	r3, [pc, #416]	@ (8002bdc <handle_mqtt_conf+0x2d0>)
 8002a3c:	4a60      	ldr	r2, [pc, #384]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002a3e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f014 ff66 	bl	8017914 <mg_http_reply>
 8002a48:	e0a7      	b.n	8002b9a <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <handle_mqtt_conf+0x2d4>)
 8002a52:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002a56:	c903      	ldmia	r1, {r0, r1}
 8002a58:	f017 fdbd 	bl	801a5d6 <mg_json_get_bool>

			char * broker = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4a60      	ldr	r2, [pc, #384]	@ (8002be4 <handle_mqtt_conf+0x2d8>)
 8002a64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002a68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a6c:	f017 fe7d 	bl	801a76a <mg_json_get_str>
 8002a70:	6338      	str	r0, [r7, #48]	@ 0x30
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d04e      	beq.n	8002b16 <handle_mqtt_conf+0x20a>
				int err = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8002a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a7e:	f01f fca7 	bl	80223d0 <is_valid_mqtt_url>
 8002a82:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	227f      	movs	r2, #127	@ 0x7f
 8002a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a92:	4618      	mov	r0, r3
 8002a94:	f020 f967 	bl	8022d66 <strncpy>
 8002a98:	e03d      	b.n	8002b16 <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8002a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d82a      	bhi.n	8002af8 <handle_mqtt_conf+0x1ec>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <handle_mqtt_conf+0x19c>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002ae9 	.word	0x08002ae9
 8002aac:	08002ad9 	.word	0x08002ad9
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002ab9 	.word	0x08002ab9
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <handle_mqtt_conf+0x2dc>)
 8002aba:	4a41      	ldr	r2, [pc, #260]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002abc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f014 ff27 	bl	8017914 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8002ac6:	e01f      	b.n	8002b08 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ac8:	4b48      	ldr	r3, [pc, #288]	@ (8002bec <handle_mqtt_conf+0x2e0>)
 8002aca:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002acc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f014 ff1f 	bl	8017914 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8002ad6:	e017      	b.n	8002b08 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ad8:	4b45      	ldr	r3, [pc, #276]	@ (8002bf0 <handle_mqtt_conf+0x2e4>)
 8002ada:	4a39      	ldr	r2, [pc, #228]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002adc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f014 ff17 	bl	8017914 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8002ae6:	e00f      	b.n	8002b08 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ae8:	4b42      	ldr	r3, [pc, #264]	@ (8002bf4 <handle_mqtt_conf+0x2e8>)
 8002aea:	4a35      	ldr	r2, [pc, #212]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002aec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f014 ff0f 	bl	8017914 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8002af6:	e007      	b.n	8002b08 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002af8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <handle_mqtt_conf+0x2ec>)
 8002afa:	4a31      	ldr	r2, [pc, #196]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002afc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f014 ff07 	bl	8017914 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8002b06:	bf00      	nop
					}
					free(broker);
 8002b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b0a:	f009 f975 	bl	800bdf8 <vPortFree>
					free(mqtt_config);
 8002b0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b10:	f009 f972 	bl	800bdf8 <vPortFree>
					return;
 8002b14:	e04c      	b.n	8002bb0 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8002b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b18:	f009 f96e 	bl	800bdf8 <vPortFree>

			char * username = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <handle_mqtt_conf+0x2f0>)
 8002b24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b2c:	f017 fe1d 	bl	801a76a <mg_json_get_str>
 8002b30:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	3384      	adds	r3, #132	@ 0x84
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b40:	4618      	mov	r0, r3
 8002b42:	f020 f910 	bl	8022d66 <strncpy>
			}
			free(username);
 8002b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b48:	f009 f956 	bl	800bdf8 <vPortFree>

			char * password = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <handle_mqtt_conf+0x2f4>)
 8002b54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b5c:	f017 fe05 	bl	801a76a <mg_json_get_str>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	33a5      	adds	r3, #165	@ 0xa5
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b70:	4618      	mov	r0, r3
 8002b72:	f020 f8f8 	bl	8022d66 <strncpy>
			}
			free(password);
 8002b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b78:	f009 f93e 	bl	800bdf8 <vPortFree>

			mqtt_config->save = 1;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <handle_mqtt_conf+0x2b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b8c:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <handle_mqtt_conf+0x2f8>)
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002b92:	21c8      	movs	r1, #200	@ 0xc8
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f014 febd 	bl	8017914 <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8002b9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b9c:	f009 f92c 	bl	800bdf8 <vPortFree>
 8002ba0:	e006      	b.n	8002bb0 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <handle_mqtt_conf+0x2fc>)
 8002ba4:	4a06      	ldr	r2, [pc, #24]	@ (8002bc0 <handle_mqtt_conf+0x2b4>)
 8002ba6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f014 feb2 	bl	8017914 <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8002bb0:	3738      	adds	r7, #56	@ 0x38
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08024a38 	.word	0x08024a38
 8002bbc:	08024c00 	.word	0x08024c00
 8002bc0:	08024a70 	.word	0x08024a70
 8002bc4:	20000454 	.word	0x20000454
 8002bc8:	08024c3c 	.word	0x08024c3c
 8002bcc:	08024c44 	.word	0x08024c44
 8002bd0:	08024c4c 	.word	0x08024c4c
 8002bd4:	08024ae0 	.word	0x08024ae0
 8002bd8:	08024c94 	.word	0x08024c94
 8002bdc:	08024c98 	.word	0x08024c98
 8002be0:	08024cc8 	.word	0x08024cc8
 8002be4:	08024cd4 	.word	0x08024cd4
 8002be8:	08024ce0 	.word	0x08024ce0
 8002bec:	08024d24 	.word	0x08024d24
 8002bf0:	08024d70 	.word	0x08024d70
 8002bf4:	08024db0 	.word	0x08024db0
 8002bf8:	08024de8 	.word	0x08024de8
 8002bfc:	08024e1c 	.word	0x08024e1c
 8002c00:	08024e28 	.word	0x08024e28
 8002c04:	08024e34 	.word	0x08024e34
 8002c08:	08024bac 	.word	0x08024bac

08002c0c <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0d2      	sub	sp, #328	@ 0x148
 8002c10:	af06      	add	r7, sp, #24
 8002c12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c1a:	6018      	str	r0, [r3, #0]
 8002c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c24:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8002c26:	4acf      	ldr	r2, [pc, #828]	@ (8002f64 <handle_dev_status+0x358>)
 8002c28:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	2272      	movs	r2, #114	@ 0x72
 8002c30:	4618      	mov	r0, r3
 8002c32:	f020 f9f2 	bl	802301a <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8002c3c:	231e      	movs	r3, #30
 8002c3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8002c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fca8 	bl	800259e <mg_calloc>
 8002c4e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002c52:	2101      	movs	r1, #1
 8002c54:	202e      	movs	r0, #46	@ 0x2e
 8002c56:	f7ff fca2 	bl	800259e <mg_calloc>
 8002c5a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002c5e:	2101      	movs	r1, #1
 8002c60:	202e      	movs	r0, #46	@ 0x2e
 8002c62:	f7ff fc9c 	bl	800259e <mg_calloc>
 8002c66:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002c70:	f7ff fc95 	bl	800259e <mg_calloc>
 8002c74:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8002c7e:	f7ff fc8e 	bl	800259e <mg_calloc>
 8002c82:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8002c86:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8182 	beq.w	8002f94 <handle_dev_status+0x388>
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 817d 	beq.w	8002f94 <handle_dev_status+0x388>
 8002c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8178 	beq.w	8002f94 <handle_dev_status+0x388>
 8002ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8173 	beq.w	8002f94 <handle_dev_status+0x388>
 8002cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 816e 	beq.w	8002f94 <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002cb8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002cbc:	49aa      	ldr	r1, [pc, #680]	@ (8002f68 <handle_dev_status+0x35c>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f01e f84c 	bl	8020d5c <mg_str_s>
 8002cc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002cd6:	cb0c      	ldmia	r3, {r2, r3}
 8002cd8:	c903      	ldmia	r1, {r0, r1}
 8002cda:	f01e f912 	bl	8020f02 <mg_match>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8132 	beq.w	8002f4a <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 8002ce6:	f001 fa4f 	bl	8004188 <get_mqtt_connection>
 8002cea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 8002cee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d108      	bne.n	8002d08 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8002cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	499b      	ldr	r1, [pc, #620]	@ (8002f6c <handle_dev_status+0x360>)
 8002cfe:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002d02:	f020 f830 	bl	8022d66 <strncpy>
 8002d06:	e041      	b.n	8002d8c <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 8002d08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d0c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8002d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4993      	ldr	r1, [pc, #588]	@ (8002f70 <handle_dev_status+0x364>)
 8002d22:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002d26:	f020 f81e 	bl	8022d66 <strncpy>
 8002d2a:	e019      	b.n	8002d60 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 8002d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d30:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d42:	461a      	mov	r2, r3
 8002d44:	498b      	ldr	r1, [pc, #556]	@ (8002f74 <handle_dev_status+0x368>)
 8002d46:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002d4a:	f020 f80c 	bl	8022d66 <strncpy>
 8002d4e:	e007      	b.n	8002d60 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 8002d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d54:	461a      	mov	r2, r3
 8002d56:	4988      	ldr	r1, [pc, #544]	@ (8002f78 <handle_dev_status+0x36c>)
 8002d58:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002d5c:	f020 f803 	bl	8022d66 <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8002d60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d64:	3308      	adds	r3, #8
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4b84      	ldr	r3, [pc, #528]	@ (8002f7c <handle_dev_status+0x370>)
 8002d6a:	4a85      	ldr	r2, [pc, #532]	@ (8002f80 <handle_dev_status+0x374>)
 8002d6c:	212e      	movs	r1, #46	@ 0x2e
 8002d6e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002d72:	f01d fd93 	bl	802089c <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8002d76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d7a:	331c      	adds	r3, #28
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <handle_dev_status+0x370>)
 8002d80:	4a7f      	ldr	r2, [pc, #508]	@ (8002f80 <handle_dev_status+0x374>)
 8002d82:	212e      	movs	r1, #46	@ 0x2e
 8002d84:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002d88:	f01d fd88 	bl	802089c <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8002d8c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002d90:	f7fd fa76 	bl	8000280 <strlen>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4979      	ldr	r1, [pc, #484]	@ (8002f84 <handle_dev_status+0x378>)
 8002da0:	461a      	mov	r2, r3
 8002da2:	460b      	mov	r3, r1
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8002da8:	2301      	movs	r3, #1
 8002daa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002dae:	e022      	b.n	8002df6 <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8002db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f107 000c 	add.w	r0, r7, #12
 8002dba:	2201      	movs	r2, #1
 8002dbc:	2180      	movs	r1, #128	@ 0x80
 8002dbe:	f001 fef5 	bl	8004bac <generate_status_topik>
				strcat(pub_topics_str, topic);
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002dcc:	f01f ff8c 	bl	8022ce8 <strcat>
				strcat(pub_topics_str, "\", \"");
 8002dd0:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002dd4:	f7fd fa54 	bl	8000280 <strlen>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002de0:	4413      	add	r3, r2
 8002de2:	4a69      	ldr	r2, [pc, #420]	@ (8002f88 <handle_dev_status+0x37c>)
 8002de4:	6810      	ldr	r0, [r2, #0]
 8002de6:	6018      	str	r0, [r3, #0]
 8002de8:	7912      	ldrb	r2, [r2, #4]
 8002dea:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8002dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002df0:	3301      	adds	r3, #1
 8002df2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	ddd8      	ble.n	8002db0 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e04:	e035      	b.n	8002e72 <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8002e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f107 000c 	add.w	r0, r7, #12
 8002e10:	2202      	movs	r2, #2
 8002e12:	2180      	movs	r1, #128	@ 0x80
 8002e14:	f001 feca 	bl	8004bac <generate_status_topik>
				strcat(pub_topics_str, topic);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002e22:	f01f ff61 	bl	8022ce8 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8002e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	dc0e      	bgt.n	8002e4c <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 8002e2e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002e32:	f7fd fa25 	bl	8000280 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a51      	ldr	r2, [pc, #324]	@ (8002f88 <handle_dev_status+0x37c>)
 8002e42:	6810      	ldr	r0, [r2, #0]
 8002e44:	6018      	str	r0, [r3, #0]
 8002e46:	7912      	ldrb	r2, [r2, #4]
 8002e48:	711a      	strb	r2, [r3, #4]
 8002e4a:	e00d      	b.n	8002e68 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 8002e4c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002e50:	f7fd fa16 	bl	8000280 <strlen>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4949      	ldr	r1, [pc, #292]	@ (8002f84 <handle_dev_status+0x378>)
 8002e60:	461a      	mov	r2, r3
 8002e62:	460b      	mov	r3, r1
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8002e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	ddc5      	ble.n	8002e06 <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 8002e7a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002e7e:	f7fd f9ff 	bl	8000280 <strlen>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e8a:	4413      	add	r3, r2
 8002e8c:	493d      	ldr	r1, [pc, #244]	@ (8002f84 <handle_dev_status+0x378>)
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8002e96:	2301      	movs	r3, #1
 8002e98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e9c:	e035      	b.n	8002f0a <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8002e9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f107 000c 	add.w	r0, r7, #12
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	2180      	movs	r1, #128	@ 0x80
 8002eac:	f001 fe54 	bl	8004b58 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002eba:	f01f ff15 	bl	8022ce8 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8002ebe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	dc0e      	bgt.n	8002ee4 <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 8002ec6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002eca:	f7fd f9d9 	bl	8000280 <strlen>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <handle_dev_status+0x37c>)
 8002eda:	6810      	ldr	r0, [r2, #0]
 8002edc:	6018      	str	r0, [r3, #0]
 8002ede:	7912      	ldrb	r2, [r2, #4]
 8002ee0:	711a      	strb	r2, [r3, #4]
 8002ee2:	e00d      	b.n	8002f00 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 8002ee4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002ee8:	f7fd f9ca 	bl	8000280 <strlen>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4923      	ldr	r1, [pc, #140]	@ (8002f84 <handle_dev_status+0x378>)
 8002ef8:	461a      	mov	r2, r3
 8002efa:	460b      	mov	r3, r1
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8002f00:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	ddc5      	ble.n	8002e9e <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002f12:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002f16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f1a:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002f1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f28:	9303      	str	r3, [sp, #12]
 8002f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2e:	9302      	str	r3, [sp, #8]
 8002f30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <handle_dev_status+0x380>)
 8002f40:	21c8      	movs	r1, #200	@ 0xc8
 8002f42:	6800      	ldr	r0, [r0, #0]
 8002f44:	f014 fce6 	bl	8017914 <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002f48:	e02f      	b.n	8002faa <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002f4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f4e:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002f52:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <handle_dev_status+0x384>)
 8002f54:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <handle_dev_status+0x380>)
 8002f56:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	f014 fcda 	bl	8017914 <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002f60:	e023      	b.n	8002faa <handle_dev_status+0x39e>
 8002f62:	bf00      	nop
 8002f64:	08024ee4 	.word	0x08024ee4
 8002f68:	08024a38 	.word	0x08024a38
 8002f6c:	08024e70 	.word	0x08024e70
 8002f70:	08024e78 	.word	0x08024e78
 8002f74:	08024e84 	.word	0x08024e84
 8002f78:	08024e8c 	.word	0x08024e8c
 8002f7c:	08020acd 	.word	0x08020acd
 8002f80:	08024e98 	.word	0x08024e98
 8002f84:	08024e9c 	.word	0x08024e9c
 8002f88:	08024ea0 	.word	0x08024ea0
 8002f8c:	08024a70 	.word	0x08024a70
 8002f90:	08024bac 	.word	0x08024bac
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002f94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f98:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <handle_dev_status+0x3d0>)
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <handle_dev_status+0x3d4>)
 8002fa0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002fa4:	6800      	ldr	r0, [r0, #0]
 8002fa6:	f014 fcb5 	bl	8017914 <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 8002faa:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002fae:	f008 ff23 	bl	800bdf8 <vPortFree>
	free(mqtt_server_addr);
 8002fb2:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002fb6:	f008 ff1f 	bl	800bdf8 <vPortFree>
	free(mqtt_local_addr);
 8002fba:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002fbe:	f008 ff1b 	bl	800bdf8 <vPortFree>
	free(pub_topics_str);
 8002fc2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002fc6:	f008 ff17 	bl	800bdf8 <vPortFree>
	free(subscr_topics_str);
 8002fca:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002fce:	f008 ff13 	bl	800bdf8 <vPortFree>
}
 8002fd2:	bf00      	nop
 8002fd4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08024ea8 	.word	0x08024ea8
 8002fe0:	08024a70 	.word	0x08024a70

08002fe4 <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 8002fec:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <handle_OPTIONS_method+0x1c>)
 8002fee:	4a05      	ldr	r2, [pc, #20]	@ (8003004 <handle_OPTIONS_method+0x20>)
 8002ff0:	21c8      	movs	r1, #200	@ 0xc8
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f014 fc8e 	bl	8017914 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	08024f58 	.word	0x08024f58
 8003004:	08024f5c 	.word	0x08024f5c

08003008 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	@ 0x28
 800300c:	af04      	add	r7, sp, #16
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	491a      	ldr	r1, [pc, #104]	@ (8003080 <handle_restart_mcu+0x78>)
 8003018:	4618      	mov	r0, r3
 800301a:	f01d fe9f 	bl	8020d5c <mg_str_s>
 800301e:	6839      	ldr	r1, [r7, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	cb0c      	ldmia	r3, {r2, r3}
 800302a:	c903      	ldmia	r1, {r0, r1}
 800302c:	f01d ff69 	bl	8020f02 <mg_match>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800303a:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <handle_restart_mcu+0x7c>)
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2301      	movs	r3, #1
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	4608      	mov	r0, r1
 8003056:	f01a f99f 	bl	801d398 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 800305a:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <handle_restart_mcu+0x80>)
 800305c:	4a0b      	ldr	r2, [pc, #44]	@ (800308c <handle_restart_mcu+0x84>)
 800305e:	21c8      	movs	r1, #200	@ 0xc8
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f014 fc57 	bl	8017914 <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8003066:	e006      	b.n	8003076 <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003068:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <handle_restart_mcu+0x88>)
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <handle_restart_mcu+0x84>)
 800306c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f014 fc4f 	bl	8017914 <mg_http_reply>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	08024ae0 	.word	0x08024ae0
 8003084:	080054ef 	.word	0x080054ef
 8003088:	08024ffc 	.word	0x08024ffc
 800308c:	08024a70 	.word	0x08024a70
 8003090:	08025030 	.word	0x08025030

08003094 <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8003094:	b580      	push	{r7, lr}
 8003096:	b0a6      	sub	sp, #152	@ 0x98
 8003098:	af02      	add	r7, sp, #8
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 800309e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80030a2:	4920      	ldr	r1, [pc, #128]	@ (8003124 <handle_firmware_upload+0x90>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f01d fe59 	bl	8020d5c <mg_str_s>
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80030b4:	cb0c      	ldmia	r3, {r2, r3}
 80030b6:	c903      	ldmia	r1, {r0, r1}
 80030b8:	f01d ff23 	bl	8020f02 <mg_match>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f103 0010 	add.w	r0, r3, #16
 80030c8:	f107 0208 	add.w	r2, r7, #8
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	4916      	ldr	r1, [pc, #88]	@ (8003128 <handle_firmware_upload+0x94>)
 80030d0:	f013 fa92 	bl	80165f8 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	4914      	ldr	r1, [pc, #80]	@ (800312c <handle_firmware_upload+0x98>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd f8d8 	bl	8000290 <strcmp>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <handle_firmware_upload+0x9c>)
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <handle_firmware_upload+0xa0>)
 80030ec:	4a12      	ldr	r2, [pc, #72]	@ (8003138 <handle_firmware_upload+0xa4>)
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f015 fdcb 	bl	8018c8c <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80030f6:	e010      	b.n	800311a <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <handle_firmware_upload+0x98>)
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <handle_firmware_upload+0xa8>)
 80030fe:	4a10      	ldr	r2, [pc, #64]	@ (8003140 <handle_firmware_upload+0xac>)
 8003100:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f014 fc05 	bl	8017914 <mg_http_reply>
}
 800310a:	e006      	b.n	800311a <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800310c:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <handle_firmware_upload+0xb0>)
 800310e:	4a0c      	ldr	r2, [pc, #48]	@ (8003140 <handle_firmware_upload+0xac>)
 8003110:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f014 fbfd 	bl	8017914 <mg_http_reply>
}
 800311a:	bf00      	nop
 800311c:	3790      	adds	r7, #144	@ 0x90
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	08024ae0 	.word	0x08024ae0
 8003128:	08025080 	.word	0x08025080
 800312c:	08025088 	.word	0x08025088
 8003130:	00030d40 	.word	0x00030d40
 8003134:	08025098 	.word	0x08025098
 8003138:	20000008 	.word	0x20000008
 800313c:	080250a4 	.word	0x080250a4
 8003140:	08024a70 	.word	0x08024a70
 8003144:	08025030 	.word	0x08025030

08003148 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	491d      	ldr	r1, [pc, #116]	@ (80031cc <handle_firmware_md5+0x84>)
 8003158:	4618      	mov	r0, r3
 800315a:	f01d fdff 	bl	8020d5c <mg_str_s>
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	cb0c      	ldmia	r3, {r2, r3}
 800316a:	c903      	ldmia	r1, {r0, r1}
 800316c:	f01d fec9 	bl	8020f02 <mg_match>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01f      	beq.n	80031b6 <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8003176:	2101      	movs	r1, #1
 8003178:	2021      	movs	r0, #33	@ 0x21
 800317a:	f7ff fa10 	bl	800259e <mg_calloc>
 800317e:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	4813      	ldr	r0, [pc, #76]	@ (80031d0 <handle_firmware_md5+0x88>)
 8003184:	f7ff fa56 	bl	8002634 <calc_file_md5sum>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <handle_firmware_md5+0x8c>)
 8003194:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <handle_firmware_md5+0x90>)
 8003196:	21c8      	movs	r1, #200	@ 0xc8
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f014 fbbb 	bl	8017914 <mg_http_reply>
 800319e:	e006      	b.n	80031ae <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"message\":\"Firmware update file md5 sum: %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <handle_firmware_md5+0x94>)
 80031a2:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <handle_firmware_md5+0x90>)
 80031a4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f014 fbb3 	bl	8017914 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f008 fe22 	bl	800bdf8 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 80031b4:	e006      	b.n	80031c4 <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <handle_firmware_md5+0x98>)
 80031b8:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <handle_firmware_md5+0x90>)
 80031ba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f014 fba8 	bl	8017914 <mg_http_reply>
}
 80031c4:	bf00      	nop
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	08024a38 	.word	0x08024a38
 80031d0:	080250f0 	.word	0x080250f0
 80031d4:	08025108 	.word	0x08025108
 80031d8:	08024a70 	.word	0x08024a70
 80031dc:	0802514c 	.word	0x0802514c
 80031e0:	0802518c 	.word	0x0802518c

080031e4 <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	@ 0x28
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	492e      	ldr	r1, [pc, #184]	@ (80032ac <handle_firmware_activate+0xc8>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f01d fdb1 	bl	8020d5c <mg_str_s>
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	cb0c      	ldmia	r3, {r2, r3}
 8003206:	c903      	ldmia	r1, {r0, r1}
 8003208:	f01d fe7b 	bl	8020f02 <mg_match>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 8003212:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <handle_firmware_activate+0xcc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f107 010c 	add.w	r1, r7, #12
 800321a:	2200      	movs	r2, #0
 800321c:	4825      	ldr	r0, [pc, #148]	@ (80032b4 <handle_firmware_activate+0xd0>)
 800321e:	4798      	blx	r3
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003226:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <handle_firmware_activate+0xd4>)
 8003228:	4a24      	ldr	r2, [pc, #144]	@ (80032bc <handle_firmware_activate+0xd8>)
 800322a:	21c8      	movs	r1, #200	@ 0xc8
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f014 fb71 	bl	8017914 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 8003232:	e036      	b.n	80032a2 <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003234:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <handle_firmware_activate+0xdc>)
 8003236:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <handle_firmware_activate+0xd8>)
 8003238:	21c8      	movs	r1, #200	@ 0xc8
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f014 fb6a 	bl	8017914 <mg_http_reply>
}
 8003240:	e02f      	b.n	80032a2 <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003242:	f107 0318 	add.w	r3, r7, #24
 8003246:	491f      	ldr	r1, [pc, #124]	@ (80032c4 <handle_firmware_activate+0xe0>)
 8003248:	4618      	mov	r0, r3
 800324a:	f01d fd87 	bl	8020d5c <mg_str_s>
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f107 0318 	add.w	r3, r7, #24
 8003258:	cb0c      	ldmia	r3, {r2, r3}
 800325a:	c903      	ldmia	r1, {r0, r1}
 800325c:	f01d fe51 	bl	8020f02 <mg_match>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8003266:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <handle_firmware_activate+0xcc>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4912      	ldr	r1, [pc, #72]	@ (80032b4 <handle_firmware_activate+0xd0>)
 800326c:	4816      	ldr	r0, [pc, #88]	@ (80032c8 <handle_firmware_activate+0xe4>)
 800326e:	4798      	blx	r3
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <handle_firmware_activate+0xd4>)
 8003278:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <handle_firmware_activate+0xd8>)
 800327a:	21c8      	movs	r1, #200	@ 0xc8
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f014 fb49 	bl	8017914 <mg_http_reply>
}
 8003282:	e00e      	b.n	80032a2 <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <handle_firmware_activate+0xe8>)
 8003286:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <handle_firmware_activate+0xd8>)
 8003288:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f014 fb41 	bl	8017914 <mg_http_reply>
}
 8003292:	e006      	b.n	80032a2 <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <handle_firmware_activate+0xec>)
 8003296:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <handle_firmware_activate+0xd8>)
 8003298:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f014 fb39 	bl	8017914 <mg_http_reply>
}
 80032a2:	bf00      	nop
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08024a38 	.word	0x08024a38
 80032b0:	20000008 	.word	0x20000008
 80032b4:	080251dc 	.word	0x080251dc
 80032b8:	080251ec 	.word	0x080251ec
 80032bc:	08024a70 	.word	0x08024a70
 80032c0:	08025224 	.word	0x08025224
 80032c4:	08024ae0 	.word	0x08024ae0
 80032c8:	080250f0 	.word	0x080250f0
 80032cc:	08025260 	.word	0x08025260
 80032d0:	080252a4 	.word	0x080252a4

080032d4 <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	4918      	ldr	r1, [pc, #96]	@ (8003344 <handle_firmware_deactivate+0x70>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f01d fd39 	bl	8020d5c <mg_str_s>
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f107 0308 	add.w	r3, r7, #8
 80032f4:	cb0c      	ldmia	r3, {r2, r3}
 80032f6:	c903      	ldmia	r1, {r0, r1}
 80032f8:	f01d fe03 	bl	8020f02 <mg_match>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d014      	beq.n	800332c <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <handle_firmware_deactivate+0x74>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4811      	ldr	r0, [pc, #68]	@ (800334c <handle_firmware_deactivate+0x78>)
 8003308:	4798      	blx	r3
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <handle_firmware_deactivate+0x7c>)
 8003312:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <handle_firmware_deactivate+0x80>)
 8003314:	21c8      	movs	r1, #200	@ 0xc8
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f014 fafc 	bl	8017914 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 800331c:	e00d      	b.n	800333a <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <handle_firmware_deactivate+0x84>)
 8003320:	4a0c      	ldr	r2, [pc, #48]	@ (8003354 <handle_firmware_deactivate+0x80>)
 8003322:	21c8      	movs	r1, #200	@ 0xc8
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f014 faf5 	bl	8017914 <mg_http_reply>
}
 800332a:	e006      	b.n	800333a <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <handle_firmware_deactivate+0x88>)
 800332e:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <handle_firmware_deactivate+0x80>)
 8003330:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f014 faed 	bl	8017914 <mg_http_reply>
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	08024ae0 	.word	0x08024ae0
 8003348:	20000008 	.word	0x20000008
 800334c:	080251dc 	.word	0x080251dc
 8003350:	080252fc 	.word	0x080252fc
 8003354:	08024a70 	.word	0x08024a70
 8003358:	08025338 	.word	0x08025338
 800335c:	08025030 	.word	0x08025030

08003360 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	4915      	ldr	r1, [pc, #84]	@ (80033c4 <handle_web_files_remove+0x64>)
 8003370:	4618      	mov	r0, r3
 8003372:	f01d fcf3 	bl	8020d5c <mg_str_s>
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	cb0c      	ldmia	r3, {r2, r3}
 8003382:	c903      	ldmia	r1, {r0, r1}
 8003384:	f01d fdbd 	bl	8020f02 <mg_match>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00e      	beq.n	80033ac <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 800338e:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <handle_web_files_remove+0x68>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	480e      	ldr	r0, [pc, #56]	@ (80033cc <handle_web_files_remove+0x6c>)
 8003394:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8003396:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <handle_web_files_remove+0x68>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	480c      	ldr	r0, [pc, #48]	@ (80033cc <handle_web_files_remove+0x6c>)
 800339c:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <handle_web_files_remove+0x70>)
 80033a0:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <handle_web_files_remove+0x74>)
 80033a2:	21c8      	movs	r1, #200	@ 0xc8
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f014 fab5 	bl	8017914 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 80033aa:	e006      	b.n	80033ba <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <handle_web_files_remove+0x78>)
 80033ae:	4a09      	ldr	r2, [pc, #36]	@ (80033d4 <handle_web_files_remove+0x74>)
 80033b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f014 faad 	bl	8017914 <mg_http_reply>
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08024ae0 	.word	0x08024ae0
 80033c8:	20000008 	.word	0x20000008
 80033cc:	0802537c 	.word	0x0802537c
 80033d0:	08025384 	.word	0x08025384
 80033d4:	08024a70 	.word	0x08024a70
 80033d8:	08025030 	.word	0x08025030

080033dc <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0c6      	sub	sp, #280	@ 0x118
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033ea:	6018      	str	r0, [r3, #0]
 80033ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033f4:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80033f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033fa:	4934      	ldr	r1, [pc, #208]	@ (80034cc <handle_fs_mkdir+0xf0>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f01d fcad 	bl	8020d5c <mg_str_s>
 8003402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003406:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003414:	cb0c      	ldmia	r3, {r2, r3}
 8003416:	c903      	ldmia	r1, {r0, r1}
 8003418:	f01d fd73 	bl	8020f02 <mg_match>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d043      	beq.n	80034aa <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8003422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003426:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 8003430:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8003434:	237b      	movs	r3, #123	@ 0x7b
 8003436:	4926      	ldr	r1, [pc, #152]	@ (80034d0 <handle_fs_mkdir+0xf4>)
 8003438:	f013 f8de 	bl	80165f8 <mg_http_get_var>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	dd27      	ble.n	8003492 <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 8003442:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003446:	f107 000c 	add.w	r0, r7, #12
 800344a:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <handle_fs_mkdir+0xf8>)
 800344c:	2180      	movs	r1, #128	@ 0x80
 800344e:	f01f f903 	bl	8022658 <sniprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 8003452:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <handle_fs_mkdir+0xfc>)
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	f107 020c 	add.w	r2, r7, #12
 800345a:	4610      	mov	r0, r2
 800345c:	4798      	blx	r3
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8003464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003468:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <handle_fs_mkdir+0x100>)
 800346e:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <handle_fs_mkdir+0x104>)
 8003470:	21c8      	movs	r1, #200	@ 0xc8
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	f014 fa4e 	bl	8017914 <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 8003478:	e022      	b.n	80034c0 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 800347a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800347e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <handle_fs_mkdir+0x108>)
 8003484:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <handle_fs_mkdir+0x104>)
 8003486:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800348a:	6800      	ldr	r0, [r0, #0]
 800348c:	f014 fa42 	bl	8017914 <mg_http_reply>
}
 8003490:	e016      	b.n	80034c0 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003496:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800349a:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <handle_fs_mkdir+0x10c>)
 800349c:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <handle_fs_mkdir+0x104>)
 800349e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80034a2:	6800      	ldr	r0, [r0, #0]
 80034a4:	f014 fa36 	bl	8017914 <mg_http_reply>
}
 80034a8:	e00a      	b.n	80034c0 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80034aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034ae:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <handle_fs_mkdir+0x110>)
 80034b4:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <handle_fs_mkdir+0x104>)
 80034b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80034ba:	6800      	ldr	r0, [r0, #0]
 80034bc:	f014 fa2a 	bl	8017914 <mg_http_reply>
}
 80034c0:	bf00      	nop
 80034c2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	08024ae0 	.word	0x08024ae0
 80034d0:	080253cc 	.word	0x080253cc
 80034d4:	080253d4 	.word	0x080253d4
 80034d8:	20000008 	.word	0x20000008
 80034dc:	080253dc 	.word	0x080253dc
 80034e0:	08024a70 	.word	0x08024a70
 80034e4:	08025410 	.word	0x08025410
 80034e8:	0802544c 	.word	0x0802544c
 80034ec:	08025030 	.word	0x08025030

080034f0 <handle_fs_get_log>:

// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	@ 0x38
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80034fa:	f107 0320 	add.w	r3, r7, #32
 80034fe:	4921      	ldr	r1, [pc, #132]	@ (8003584 <handle_fs_get_log+0x94>)
 8003500:	4618      	mov	r0, r3
 8003502:	f01d fc2b 	bl	8020d5c <mg_str_s>
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f107 0320 	add.w	r3, r7, #32
 8003510:	cb0c      	ldmia	r3, {r2, r3}
 8003512:	c903      	ldmia	r1, {r0, r1}
 8003514:	f01d fcf5 	bl	8020f02 <mg_match>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d014      	beq.n	8003548 <handle_fs_get_log+0x58>

		struct mg_http_serve_opts opts = {
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	611a      	str	r2, [r3, #16]
 800352e:	615a      	str	r2, [r3, #20]
 8003530:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <handle_fs_get_log+0x98>)
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <handle_fs_get_log+0x9c>)
 8003536:	61fb      	str	r3, [r7, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8003538:	f107 0308 	add.w	r3, r7, #8
 800353c:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <handle_fs_get_log+0xa0>)
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f014 fbdb 	bl	8017cfc <mg_http_serve_file>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8003546:	e018      	b.n	800357a <handle_fs_get_log+0x8a>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800354c:	4911      	ldr	r1, [pc, #68]	@ (8003594 <handle_fs_get_log+0xa4>)
 800354e:	4618      	mov	r0, r3
 8003550:	f01d fc04 	bl	8020d5c <mg_str_s>
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800355e:	cb0c      	ldmia	r3, {r2, r3}
 8003560:	c903      	ldmia	r1, {r0, r1}
 8003562:	f01d fcce 	bl	8020f02 <mg_match>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <handle_fs_get_log+0x8a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <handle_fs_get_log+0xa8>)
 800356e:	4a0b      	ldr	r2, [pc, #44]	@ (800359c <handle_fs_get_log+0xac>)
 8003570:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f014 f9cd 	bl	8017914 <mg_http_reply>
}
 800357a:	bf00      	nop
 800357c:	3730      	adds	r7, #48	@ 0x30
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	08024a38 	.word	0x08024a38
 8003588:	08025488 	.word	0x08025488
 800358c:	20000008 	.word	0x20000008
 8003590:	08025490 	.word	0x08025490
 8003594:	08024ae0 	.word	0x08024ae0
 8003598:	080252a4 	.word	0x080252a4
 800359c:	08024a70 	.word	0x08024a70

080035a0 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0aa      	sub	sp, #168	@ 0xa8
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b0b      	cmp	r3, #11
 80035b0:	f040 81a4 	bne.w	80038fc <dashboard+0x35c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 80035ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035be:	49b4      	ldr	r1, [pc, #720]	@ (8003890 <dashboard+0x2f0>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f01d fbcb 	bl	8020d5c <mg_str_s>
 80035c6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035d2:	cb0c      	ldmia	r3, {r2, r3}
 80035d4:	c903      	ldmia	r1, {r0, r1}
 80035d6:	f01d fc94 	bl	8020f02 <mg_match>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff fcff 	bl	8002fe4 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80035e6:	e189      	b.n	80038fc <dashboard+0x35c>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 80035e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035ec:	49a9      	ldr	r1, [pc, #676]	@ (8003894 <dashboard+0x2f4>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f01d fbb4 	bl	8020d5c <mg_str_s>
 80035f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003600:	cb0c      	ldmia	r3, {r2, r3}
 8003602:	3108      	adds	r1, #8
 8003604:	c903      	ldmia	r1, {r0, r1}
 8003606:	f01d fc7c 	bl	8020f02 <mg_match>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <dashboard+0x78>
			handle_ram_status_get(c);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7fe ffe3 	bl	80025dc <handle_ram_status_get>
}
 8003616:	e171      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8003618:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800361c:	499e      	ldr	r1, [pc, #632]	@ (8003898 <dashboard+0x2f8>)
 800361e:	4618      	mov	r0, r3
 8003620:	f01d fb9c 	bl	8020d5c <mg_str_s>
 8003624:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003630:	cb0c      	ldmia	r3, {r2, r3}
 8003632:	3108      	adds	r1, #8
 8003634:	c903      	ldmia	r1, {r0, r1}
 8003636:	f01d fc64 	bl	8020f02 <mg_match>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <dashboard+0xac>
			handle_io_status_get(c, hm);
 8003640:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff f883 	bl	8002750 <handle_io_status_get>
}
 800364a:	e157      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 800364c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003650:	4992      	ldr	r1, [pc, #584]	@ (800389c <dashboard+0x2fc>)
 8003652:	4618      	mov	r0, r3
 8003654:	f01d fb82 	bl	8020d5c <mg_str_s>
 8003658:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003664:	cb0c      	ldmia	r3, {r2, r3}
 8003666:	3108      	adds	r1, #8
 8003668:	c903      	ldmia	r1, {r0, r1}
 800366a:	f01d fc4a 	bl	8020f02 <mg_match>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8003674:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff f947 	bl	800290c <handle_mqtt_conf>
}
 800367e:	e13d      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8003680:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003684:	4986      	ldr	r1, [pc, #536]	@ (80038a0 <dashboard+0x300>)
 8003686:	4618      	mov	r0, r3
 8003688:	f01d fb68 	bl	8020d5c <mg_str_s>
 800368c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003698:	cb0c      	ldmia	r3, {r2, r3}
 800369a:	3108      	adds	r1, #8
 800369c:	c903      	ldmia	r1, {r0, r1}
 800369e:	f01d fc30 	bl	8020f02 <mg_match>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <dashboard+0x114>
			handle_dev_status(c, hm);
 80036a8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff faad 	bl	8002c0c <handle_dev_status>
}
 80036b2:	e123      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 80036b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036b8:	497a      	ldr	r1, [pc, #488]	@ (80038a4 <dashboard+0x304>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f01d fb4e 	bl	8020d5c <mg_str_s>
 80036c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036cc:	cb0c      	ldmia	r3, {r2, r3}
 80036ce:	3108      	adds	r1, #8
 80036d0:	c903      	ldmia	r1, {r0, r1}
 80036d2:	f01d fc16 	bl	8020f02 <mg_match>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <dashboard+0x148>
			handle_fs_get_log(c, hm);
 80036dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ff05 	bl	80034f0 <handle_fs_get_log>
}
 80036e6:	e109      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80036e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036ec:	496e      	ldr	r1, [pc, #440]	@ (80038a8 <dashboard+0x308>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f01d fb34 	bl	8020d5c <mg_str_s>
 80036f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003700:	cb0c      	ldmia	r3, {r2, r3}
 8003702:	3108      	adds	r1, #8
 8003704:	c903      	ldmia	r1, {r0, r1}
 8003706:	f01d fbfc 	bl	8020f02 <mg_match>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <dashboard+0x17c>
			handle_restart_mcu(c, hm);
 8003710:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff fc77 	bl	8003008 <handle_restart_mcu>
}
 800371a:	e0ef      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 800371c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003720:	4962      	ldr	r1, [pc, #392]	@ (80038ac <dashboard+0x30c>)
 8003722:	4618      	mov	r0, r3
 8003724:	f01d fb1a 	bl	8020d5c <mg_str_s>
 8003728:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003734:	cb0c      	ldmia	r3, {r2, r3}
 8003736:	3108      	adds	r1, #8
 8003738:	c903      	ldmia	r1, {r0, r1}
 800373a:	f01d fbe2 	bl	8020f02 <mg_match>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <dashboard+0x1b0>
			handle_firmware_upload(c, hm);
 8003744:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fca3 	bl	8003094 <handle_firmware_upload>
}
 800374e:	e0d5      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8003750:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003754:	4956      	ldr	r1, [pc, #344]	@ (80038b0 <dashboard+0x310>)
 8003756:	4618      	mov	r0, r3
 8003758:	f01d fb00 	bl	8020d5c <mg_str_s>
 800375c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003760:	2300      	movs	r3, #0
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003768:	cb0c      	ldmia	r3, {r2, r3}
 800376a:	3108      	adds	r1, #8
 800376c:	c903      	ldmia	r1, {r0, r1}
 800376e:	f01d fbc8 	bl	8020f02 <mg_match>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <dashboard+0x1e4>
			handle_firmware_md5(c, hm);
 8003778:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff fce3 	bl	8003148 <handle_firmware_md5>
}
 8003782:	e0bb      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate"), NULL)){
 8003784:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003788:	494a      	ldr	r1, [pc, #296]	@ (80038b4 <dashboard+0x314>)
 800378a:	4618      	mov	r0, r3
 800378c:	f01d fae6 	bl	8020d5c <mg_str_s>
 8003790:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800379c:	cb0c      	ldmia	r3, {r2, r3}
 800379e:	3108      	adds	r1, #8
 80037a0:	c903      	ldmia	r1, {r0, r1}
 80037a2:	f01d fbae 	bl	8020f02 <mg_match>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <dashboard+0x218>
			handle_firmware_activate(c, hm);
 80037ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff fd17 	bl	80031e4 <handle_firmware_activate>
}
 80037b6:	e0a1      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 80037b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037bc:	493e      	ldr	r1, [pc, #248]	@ (80038b8 <dashboard+0x318>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f01d facc 	bl	8020d5c <mg_str_s>
 80037c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80037c8:	2300      	movs	r3, #0
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037d0:	cb0c      	ldmia	r3, {r2, r3}
 80037d2:	3108      	adds	r1, #8
 80037d4:	c903      	ldmia	r1, {r0, r1}
 80037d6:	f01d fb94 	bl	8020f02 <mg_match>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <dashboard+0x24c>
			handle_firmware_deactivate(c, hm);
 80037e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fd75 	bl	80032d4 <handle_firmware_deactivate>
}
 80037ea:	e087      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 80037ec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80037f0:	4932      	ldr	r1, [pc, #200]	@ (80038bc <dashboard+0x31c>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f01d fab2 	bl	8020d5c <mg_str_s>
 80037f8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003804:	cb0c      	ldmia	r3, {r2, r3}
 8003806:	3108      	adds	r1, #8
 8003808:	c903      	ldmia	r1, {r0, r1}
 800380a:	f01d fb7a 	bl	8020f02 <mg_match>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <dashboard+0x280>
			 handle_web_files_remove(c, hm);
 8003814:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fda1 	bl	8003360 <handle_web_files_remove>
}
 800381e:	e06d      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8003820:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003824:	4926      	ldr	r1, [pc, #152]	@ (80038c0 <dashboard+0x320>)
 8003826:	4618      	mov	r0, r3
 8003828:	f01d fa98 	bl	8020d5c <mg_str_s>
 800382c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003838:	cb0c      	ldmia	r3, {r2, r3}
 800383a:	3108      	adds	r1, #8
 800383c:	c903      	ldmia	r1, {r0, r1}
 800383e:	f01d fb60 	bl	8020f02 <mg_match>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <dashboard+0x2bc>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8003848:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <dashboard+0x324>)
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <dashboard+0x328>)
 800384e:	4a1f      	ldr	r2, [pc, #124]	@ (80038cc <dashboard+0x32c>)
 8003850:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f015 fa19 	bl	8018c8c <mg_http_upload>
}
 800385a:	e04f      	b.n	80038fc <dashboard+0x35c>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 800385c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003860:	491b      	ldr	r1, [pc, #108]	@ (80038d0 <dashboard+0x330>)
 8003862:	4618      	mov	r0, r3
 8003864:	f01d fa7a 	bl	8020d5c <mg_str_s>
 8003868:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003874:	cb0c      	ldmia	r3, {r2, r3}
 8003876:	3108      	adds	r1, #8
 8003878:	c903      	ldmia	r1, {r0, r1}
 800387a:	f01d fb42 	bl	8020f02 <mg_match>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d027      	beq.n	80038d4 <dashboard+0x334>
			 handle_fs_mkdir(c, hm);
 8003884:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fda7 	bl	80033dc <handle_fs_mkdir>
}
 800388e:	e035      	b.n	80038fc <dashboard+0x35c>
 8003890:	080254a0 	.word	0x080254a0
 8003894:	080254a8 	.word	0x080254a8
 8003898:	080254b8 	.word	0x080254b8
 800389c:	080254c8 	.word	0x080254c8
 80038a0:	080254dc 	.word	0x080254dc
 80038a4:	080254f0 	.word	0x080254f0
 80038a8:	08025500 	.word	0x08025500
 80038ac:	08025514 	.word	0x08025514
 80038b0:	0802552c 	.word	0x0802552c
 80038b4:	08025540 	.word	0x08025540
 80038b8:	08025558 	.word	0x08025558
 80038bc:	08025574 	.word	0x08025574
 80038c0:	08025590 	.word	0x08025590
 80038c4:	0016e360 	.word	0x0016e360
 80038c8:	0802537c 	.word	0x0802537c
 80038cc:	20000008 	.word	0x20000008
 80038d0:	080255ac 	.word	0x080255ac
			struct mg_http_serve_opts opts = {
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <dashboard+0x364>)
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <dashboard+0x368>)
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	461a      	mov	r2, r3
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f015 f8da 	bl	8018ab0 <mg_http_serve_dir>
}
 80038fc:	bf00      	nop
 80038fe:	37a0      	adds	r7, #160	@ 0xa0
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	0802537c 	.word	0x0802537c
 8003908:	20000008 	.word	0x20000008

0800390c <dash_hdl>:

void * dash_hdl (void){
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	return &dashboard;
 8003910:	4b02      	ldr	r3, [pc, #8]	@ (800391c <dash_hdl+0x10>)
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	080035a1 	.word	0x080035a1

08003920 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <reg_parameter_handler+0x1c>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000454 	.word	0x20000454

08003940 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f008 f982 	bl	800bc5c <pvPortMalloc>
 8003958:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <_ZL9my_callocjj+0x32>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	461a      	mov	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f01f fa73 	bl	8022e58 <memset>
  return p;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b08d      	sub	sp, #52	@ 0x34
 8003980:	af02      	add	r7, sp, #8
 8003982:	6178      	str	r0, [r7, #20]
 8003984:	6139      	str	r1, [r7, #16]
 8003986:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8003988:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3308      	adds	r3, #8
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003994:	4a39      	ldr	r2, [pc, #228]	@ (8003a7c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8003996:	2128      	movs	r1, #40	@ 0x28
 8003998:	f01c ff80 	bl	802089c <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 800399c:	4b35      	ldr	r3, [pc, #212]	@ (8003a74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fc6b 	bl	8000280 <strlen>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4619      	mov	r1, r3
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 fd2c 	bl	800440c <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b8:	e052      	b.n	8003a60 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 80039d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2180      	movs	r1, #128	@ 0x80
 80039e0:	f000 fd3e 	bl	8004460 <get_config_topik_string>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4926      	ldr	r1, [pc, #152]	@ (8003a84 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7fe fa5d 	bl	8001eac <logging>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 80039f2:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003a02:	f000 fe07 	bl	8004614 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8003a06:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4c20      	ldr	r4, [pc, #128]	@ (8003a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f01d f9a3 	bl	8020d5c <mg_str_s>
 8003a16:	f104 0318 	add.w	r3, r4, #24
 8003a1a:	463a      	mov	r2, r7
 8003a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a20:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8003a24:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4c18      	ldr	r4, [pc, #96]	@ (8003a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f01d f994 	bl	8020d5c <mg_str_s>
 8003a34:	f104 0320 	add.w	r3, r4, #32
 8003a38:	463a      	mov	r2, r7
 8003a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a3e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003a52:	490e      	ldr	r1, [pc, #56]	@ (8003a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f018 fc5b 	bl	801c310 <mg_mqtt_pub>
	for (size_t i = 0; i < sensor_count; i++) {
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d3a8      	bcc.n	80039ba <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	372c      	adds	r7, #44	@ 0x2c
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200004b8 	.word	0x200004b8
 8003a78:	08020a83 	.word	0x08020a83
 8003a7c:	080255c8 	.word	0x080255c8
 8003a80:	20000464 	.word	0x20000464
 8003a84:	080255cc 	.word	0x080255cc
 8003a88:	20000468 	.word	0x20000468
 8003a8c:	20000474 	.word	0x20000474

08003a90 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08d      	sub	sp, #52	@ 0x34
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8003aa4:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f107 0014 	add.w	r0, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8003ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8003c70 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f107 0214 	add.w	r2, r7, #20
 8003aba:	1cd0      	adds	r0, r2, #3
 8003abc:	2200      	movs	r2, #0
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	496a      	ldr	r1, [pc, #424]	@ (8003c74 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f01f f99a 	bl	8022e04 <memcmp>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10e      	bne.n	8003af4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	3303      	adds	r3, #3
 8003adc:	2203      	movs	r2, #3
 8003ade:	4966      	ldr	r1, [pc, #408]	@ (8003c78 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e8>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f01f f98f 	bl	8022e04 <memcmp>
 8003ae6:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80b9 	beq.w	8003c66 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d6>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8003af4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c74 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003af6:	f107 0214 	add.w	r2, r7, #20
 8003afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003afe:	6018      	str	r0, [r3, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	8019      	strh	r1, [r3, #0]

		logging(L_INFO, "Send io status data to MQTT server");
 8003b04:	495d      	ldr	r1, [pc, #372]	@ (8003c7c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ec>)
 8003b06:	2001      	movs	r0, #1
 8003b08:	f7fe f9d0 	bl	8001eac <logging>

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003b12:	f7ff ff15 	bl	8003940 <_ZL9my_callocjj>
 8003b16:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003b18:	2101      	movs	r1, #1
 8003b1a:	2080      	movs	r0, #128	@ 0x80
 8003b1c:	f7ff ff10 	bl	8003940 <_ZL9my_callocjj>
 8003b20:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b28:	e045      	b.n	8003bb6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x126>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8003b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b36:	3328      	adds	r3, #40	@ 0x28
 8003b38:	443b      	add	r3, r7
 8003b3a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	2201      	movs	r2, #1
 8003b44:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003b48:	6a38      	ldr	r0, [r7, #32]
 8003b4a:	f000 ffc1 	bl	8004ad0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8003b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b52:	3301      	adds	r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	2180      	movs	r1, #128	@ 0x80
 8003b5a:	69f8      	ldr	r0, [r7, #28]
 8003b5c:	f001 f826 	bl	8004bac <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003b60:	4c47      	ldr	r4, [pc, #284]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003b62:	463b      	mov	r3, r7
 8003b64:	69f9      	ldr	r1, [r7, #28]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f01d f8f8 	bl	8020d5c <mg_str_s>
 8003b6c:	f104 0318 	add.w	r3, r4, #24
 8003b70:	463a      	mov	r2, r7
 8003b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b76:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003b7a:	4c41      	ldr	r4, [pc, #260]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	6a39      	ldr	r1, [r7, #32]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f01d f8eb 	bl	8020d5c <mg_str_s>
 8003b86:	f104 0320 	add.w	r3, r4, #32
 8003b8a:	463a      	mov	r2, r7
 8003b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b90:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003b94:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003b9c:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003ba4:	4936      	ldr	r1, [pc, #216]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f018 fbb2 	bl	801c310 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d9b5      	bls.n	8003b2a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x9a>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003bc4:	e045      	b.n	8003c52 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1c2>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bd2:	3328      	adds	r3, #40	@ 0x28
 8003bd4:	443b      	add	r3, r7
 8003bd6:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	2202      	movs	r2, #2
 8003be0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003be4:	6a38      	ldr	r0, [r7, #32]
 8003be6:	f000 ff73 	bl	8004ad0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8003bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	69f8      	ldr	r0, [r7, #28]
 8003bf8:	f000 ffd8 	bl	8004bac <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003bfc:	4c20      	ldr	r4, [pc, #128]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003bfe:	463b      	mov	r3, r7
 8003c00:	69f9      	ldr	r1, [r7, #28]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f01d f8aa 	bl	8020d5c <mg_str_s>
 8003c08:	f104 0318 	add.w	r3, r4, #24
 8003c0c:	463a      	mov	r2, r7
 8003c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c12:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003c16:	4c1a      	ldr	r4, [pc, #104]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003c18:	463b      	mov	r3, r7
 8003c1a:	6a39      	ldr	r1, [r7, #32]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f01d f89d 	bl	8020d5c <mg_str_s>
 8003c22:	f104 0320 	add.w	r3, r4, #32
 8003c26:	463a      	mov	r2, r7
 8003c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c2c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003c30:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003c40:	490f      	ldr	r1, [pc, #60]	@ (8003c80 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1f0>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f018 fb64 	bl	801c310 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d9b5      	bls.n	8003bc6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x136>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 8003c5a:	6a38      	ldr	r0, [r7, #32]
 8003c5c:	f008 f8cc 	bl	800bdf8 <vPortFree>
		free(topik);
 8003c60:	69f8      	ldr	r0, [r7, #28]
 8003c62:	f008 f8c9 	bl	800bdf8 <vPortFree>
	}
}
 8003c66:	bf00      	nop
 8003c68:	372c      	adds	r7, #44	@ 0x2c
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200004cc 	.word	0x200004cc
 8003c74:	200004d0 	.word	0x200004d0
 8003c78:	200004d3 	.word	0x200004d3
 8003c7c:	080255f0 	.word	0x080255f0
 8003c80:	20000474 	.word	0x20000474

08003c84 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b089      	sub	sp, #36	@ 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6178      	str	r0, [r7, #20]
 8003c8c:	6139      	str	r1, [r7, #16]
 8003c8e:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e036      	b.n	8003d08 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d12c      	bne.n	8003d02 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2080      	movs	r0, #128	@ 0x80
 8003cac:	f7ff fe48 	bl	8003940 <_ZL9my_callocjj>
 8003cb0:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	2180      	movs	r1, #128	@ 0x80
 8003cc2:	69b8      	ldr	r0, [r7, #24]
 8003cc4:	f000 ff48 	bl	8004b58 <generate_comand_topik_for_subscrabe>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4914      	ldr	r1, [pc, #80]	@ (8003d1c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fe f8ed 	bl	8001eac <logging>

			mqtt_opts.qos = 1;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8003cda:	4c11      	ldr	r4, [pc, #68]	@ (8003d20 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 8003cdc:	463b      	mov	r3, r7
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f01d f83b 	bl	8020d5c <mg_str_s>
 8003ce6:	f104 0318 	add.w	r3, r4, #24
 8003cea:	463a      	mov	r2, r7
 8003cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf0:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8003cf4:	490a      	ldr	r1, [pc, #40]	@ (8003d20 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f018 fbd8 	bl	801c4ac <mg_mqtt_sub>
			free(topik);
 8003cfc:	69b8      	ldr	r0, [r7, #24]
 8003cfe:	f008 f87b 	bl	800bdf8 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3c4      	bcc.n	8003c9a <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	08025614 	.word	0x08025614
 8003d20:	20000474 	.word	0x20000474

08003d24 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8003d48:	4b7e      	ldr	r3, [pc, #504]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f340 80f5 	ble.w	8003f3c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 8003d52:	4b7d      	ldr	r3, [pc, #500]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003d54:	2292      	movs	r2, #146	@ 0x92
 8003d56:	497d      	ldr	r1, [pc, #500]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f016 fd83 	bl	801a864 <mg_log_prefix>
 8003d5e:	487c      	ldr	r0, [pc, #496]	@ (8003f50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 8003d60:	f016 fdd0 	bl	801a904 <mg_log>
    	return;
 8003d64:	e0ea      	b.n	8003f3c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8003d66:	4b7b      	ldr	r3, [pc, #492]	@ (8003f54 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f107 0010 	add.w	r0, r7, #16
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2102      	movs	r1, #2
 8003d72:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	f107 0210 	add.w	r2, r7, #16
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	8019      	strh	r1, [r3, #0]
 8003d82:	3302      	adds	r3, #2
 8003d84:	0c12      	lsrs	r2, r2, #16
 8003d86:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 8003d88:	4973      	ldr	r1, [pc, #460]	@ (8003f58 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 8003d8a:	69f8      	ldr	r0, [r7, #28]
 8003d8c:	f01f f824 	bl	8022dd8 <strstr>
 8003d90:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80bd 	beq.w	8003f14 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8003d9a:	f107 0308 	add.w	r3, r7, #8
 8003d9e:	461a      	mov	r2, r3
 8003da0:	496e      	ldr	r1, [pc, #440]	@ (8003f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 8003da2:	6978      	ldr	r0, [r7, #20]
 8003da4:	f01e fcb8 	bl	8022718 <siscanf>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 809b 	beq.w	8003ef0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8003dba:	4b62      	ldr	r3, [pc, #392]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	dd0b      	ble.n	8003dda <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 8003dc2:	4b61      	ldr	r3, [pc, #388]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003dc4:	229f      	movs	r2, #159	@ 0x9f
 8003dc6:	4961      	ldr	r1, [pc, #388]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003dc8:	2002      	movs	r0, #2
 8003dca:	f016 fd4b 	bl	801a864 <mg_log_prefix>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4862      	ldr	r0, [pc, #392]	@ (8003f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 8003dd6:	f016 fd95 	bl	801a904 <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4961      	ldr	r1, [pc, #388]	@ (8003f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7fe f863 	bl	8001eac <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	dd02      	ble.n	8003df2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	dd16      	ble.n	8003e20 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8003df2:	4b54      	ldr	r3, [pc, #336]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	dd0b      	ble.n	8003e12 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 8003dfa:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003dfc:	22a4      	movs	r2, #164	@ 0xa4
 8003dfe:	4953      	ldr	r1, [pc, #332]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003e00:	2001      	movs	r0, #1
 8003e02:	f016 fd2f 	bl	801a864 <mg_log_prefix>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	4856      	ldr	r0, [pc, #344]	@ (8003f68 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8003e0e:	f016 fd79 	bl	801a904 <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2203      	movs	r2, #3
 8003e16:	4954      	ldr	r1, [pc, #336]	@ (8003f68 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8003e18:	2003      	movs	r0, #3
 8003e1a:	f7fe f847 	bl	8001eac <logging>

    			return;
 8003e1e:	e08e      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d125      	bne.n	8003e74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4950      	ldr	r1, [pc, #320]	@ (8003f6c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8003e2c:	69b8      	ldr	r0, [r7, #24]
 8003e2e:	f01e ff88 	bl	8022d42 <strncmp>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	3320      	adds	r3, #32
 8003e3e:	443b      	add	r3, r7
 8003e40:	2201      	movs	r2, #1
 8003e42:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8003e46:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	dd0a      	ble.n	8003e64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003e50:	22ae      	movs	r2, #174	@ 0xae
 8003e52:	493e      	ldr	r1, [pc, #248]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003e54:	2002      	movs	r0, #2
 8003e56:	f016 fd05 	bl	801a864 <mg_log_prefix>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4844      	ldr	r0, [pc, #272]	@ (8003f70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8003e60:	f016 fd50 	bl	801a904 <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8003e64:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f107 000c 	add.w	r0, r7, #12
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4798      	blx	r3
 8003e72:	e064      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d125      	bne.n	8003ec8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	493d      	ldr	r1, [pc, #244]	@ (8003f74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8003e80:	69b8      	ldr	r0, [r7, #24]
 8003e82:	f01e ff5e 	bl	8022d42 <strncmp>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	3320      	adds	r3, #32
 8003e92:	443b      	add	r3, r7
 8003e94:	2200      	movs	r2, #0
 8003e96:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	dd0a      	ble.n	8003eb8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003ea4:	22b2      	movs	r2, #178	@ 0xb2
 8003ea6:	4929      	ldr	r1, [pc, #164]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003ea8:	2002      	movs	r0, #2
 8003eaa:	f016 fcdb 	bl	801a864 <mg_log_prefix>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4831      	ldr	r0, [pc, #196]	@ (8003f78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8003eb4:	f016 fd26 	bl	801a904 <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8003eb8:	4b26      	ldr	r3, [pc, #152]	@ (8003f54 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f107 000c 	add.w	r0, r7, #12
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4798      	blx	r3
 8003ec6:	e03a      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dd09      	ble.n	8003ee4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003ed2:	22b6      	movs	r2, #182	@ 0xb6
 8003ed4:	491d      	ldr	r1, [pc, #116]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f016 fcc4 	bl	801a864 <mg_log_prefix>
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	4827      	ldr	r0, [pc, #156]	@ (8003f7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8003ee0:	f016 fd10 	bl	801a904 <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4925      	ldr	r1, [pc, #148]	@ (8003f7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f7fd ffdf 	bl	8001eac <logging>
 8003eee:	e026      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8003ef0:	4b14      	ldr	r3, [pc, #80]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dd08      	ble.n	8003f0a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 8003ef8:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003efa:	22bb      	movs	r2, #187	@ 0xbb
 8003efc:	4913      	ldr	r1, [pc, #76]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003efe:	2001      	movs	r0, #1
 8003f00:	f016 fcb0 	bl	801a864 <mg_log_prefix>
 8003f04:	481e      	ldr	r0, [pc, #120]	@ (8003f80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 8003f06:	f016 fcfd 	bl	801a904 <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8003f0a:	491e      	ldr	r1, [pc, #120]	@ (8003f84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f7fd ffcd 	bl	8001eac <logging>
 8003f12:	e014      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dd09      	ble.n	8003f30 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003f1e:	22bf      	movs	r2, #191	@ 0xbf
 8003f20:	490a      	ldr	r1, [pc, #40]	@ (8003f4c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8003f22:	2001      	movs	r0, #1
 8003f24:	f016 fc9e 	bl	801a864 <mg_log_prefix>
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4817      	ldr	r0, [pc, #92]	@ (8003f88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8003f2c:	f016 fcea 	bl	801a904 <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	4915      	ldr	r1, [pc, #84]	@ (8003f88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8003f34:	2003      	movs	r0, #3
 8003f36:	f7fd ffb9 	bl	8001eac <logging>
 8003f3a:	e000      	b.n	8003f3e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8003f3c:	bf00      	nop
    }
}
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000294 	.word	0x20000294
 8003f48:	08025630 	.word	0x08025630
 8003f4c:	08025650 	.word	0x08025650
 8003f50:	0802567c 	.word	0x0802567c
 8003f54:	200004cc 	.word	0x200004cc
 8003f58:	080256a0 	.word	0x080256a0
 8003f5c:	080256a8 	.word	0x080256a8
 8003f60:	080256b4 	.word	0x080256b4
 8003f64:	080256e0 	.word	0x080256e0
 8003f68:	08025708 	.word	0x08025708
 8003f6c:	08025758 	.word	0x08025758
 8003f70:	0802575c 	.word	0x0802575c
 8003f74:	08025770 	.word	0x08025770
 8003f78:	08025774 	.word	0x08025774
 8003f7c:	08025788 	.word	0x08025788
 8003f80:	080257c4 	.word	0x080257c4
 8003f84:	080257fc 	.word	0x080257fc
 8003f88:	08025834 	.word	0x08025834

08003f8c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	if(is_registered){
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fd74 	bl	8003a90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200004c8 	.word	0x200004c8
 8003fb4:	200004b4 	.word	0x200004b4

08003fb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b11      	cmp	r3, #17
 8003fc8:	d132      	bne.n	8004030 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 8003fca:	4b2d      	ldr	r3, [pc, #180]	@ (8004080 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	dd08      	ble.n	8003fe4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004084 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 8003fd4:	22cd      	movs	r2, #205	@ 0xcd
 8003fd6:	492c      	ldr	r1, [pc, #176]	@ (8004088 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f016 fc43 	bl	801a864 <mg_log_prefix>
 8003fde:	482b      	ldr	r0, [pc, #172]	@ (800408c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 8003fe0:	f016 fc90 	bl	801a904 <mg_log>
		logging(L_INFO, "MQTT Open connection");
 8003fe4:	492a      	ldr	r1, [pc, #168]	@ (8004090 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f7fd ff60 	bl	8001eac <logging>
		mqtt_conn = conn;
 8003fec:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 8003ff2:	4b29      	ldr	r3, [pc, #164]	@ (8004098 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d03a      	beq.n	8004076 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2206      	movs	r2, #6
 8004006:	4925      	ldr	r1, [pc, #148]	@ (800409c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fcb7 	bl	800397c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 800400e:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2101      	movs	r1, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fd3b 	bl	8003a90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 800401a:	4b1e      	ldr	r3, [pc, #120]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2206      	movs	r2, #6
 8004020:	491e      	ldr	r1, [pc, #120]	@ (800409c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fe2e 	bl	8003c84 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8004028:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 800402e:	e022      	b.n	8004076 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b10      	cmp	r3, #16
 8004034:	d10f      	bne.n	8004056 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 8004036:	491a      	ldr	r1, [pc, #104]	@ (80040a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8004038:	2001      	movs	r0, #1
 800403a:	f7fd ff37 	bl	8001eac <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7ff fe6e 	bl	8003d24 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8004048:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fd1e 	bl	8003a90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8004054:	e00f      	b.n	8004076 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b0f      	cmp	r3, #15
 800405a:	d00c      	beq.n	8004076 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b09      	cmp	r3, #9
 8004060:	d109      	bne.n	8004076 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 8004062:	4910      	ldr	r1, [pc, #64]	@ (80040a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 8004064:	2001      	movs	r0, #1
 8004066:	f7fd ff21 	bl	8001eac <logging>
		mqtt_conn     = NULL;
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
		is_registered = false;
 8004070:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000294 	.word	0x20000294
 8004084:	08025864 	.word	0x08025864
 8004088:	08025650 	.word	0x08025650
 800408c:	08025878 	.word	0x08025878
 8004090:	08025890 	.word	0x08025890
 8004094:	200004b4 	.word	0x200004b4
 8004098:	200004c8 	.word	0x200004c8
 800409c:	20000030 	.word	0x20000030
 80040a0:	080258a8 	.word	0x080258a8
 80040a4:	080258cc 	.word	0x080258cc

080040a8 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 80040b0:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <_ZL18mqtt_timer_handlerPv+0x8c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d136      	bne.n	8004126 <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 80040b8:	491f      	ldr	r1, [pc, #124]	@ (8004138 <_ZL18mqtt_timer_handlerPv+0x90>)
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7fd fef6 	bl	8001eac <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 80040c0:	2240      	movs	r2, #64	@ 0x40
 80040c2:	2100      	movs	r1, #0
 80040c4:	481d      	ldr	r0, [pc, #116]	@ (800413c <_ZL18mqtt_timer_handlerPv+0x94>)
 80040c6:	f01e fec7 	bl	8022e58 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80040ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <_ZL18mqtt_timer_handlerPv+0x98>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4c1b      	ldr	r4, [pc, #108]	@ (800413c <_ZL18mqtt_timer_handlerPv+0x94>)
 80040d0:	463b      	mov	r3, r7
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f01c fe41 	bl	8020d5c <mg_str_s>
 80040da:	4622      	mov	r2, r4
 80040dc:	463b      	mov	r3, r7
 80040de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040e2:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 80040e6:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <_ZL18mqtt_timer_handlerPv+0x9c>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4c14      	ldr	r4, [pc, #80]	@ (800413c <_ZL18mqtt_timer_handlerPv+0x94>)
 80040ec:	463b      	mov	r3, r7
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f01c fe33 	bl	8020d5c <mg_str_s>
 80040f6:	f104 0308 	add.w	r3, r4, #8
 80040fa:	463a      	mov	r2, r7
 80040fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004100:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <_ZL18mqtt_timer_handlerPv+0x94>)
 8004106:	223c      	movs	r2, #60	@ 0x3c
 8004108:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 800410a:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <_ZL18mqtt_timer_handlerPv+0xa0>)
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <_ZL18mqtt_timer_handlerPv+0xa4>)
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <_ZL18mqtt_timer_handlerPv+0xa8>)
 8004118:	4a08      	ldr	r2, [pc, #32]	@ (800413c <_ZL18mqtt_timer_handlerPv+0x94>)
 800411a:	f018 fca1 	bl	801ca60 <mg_mqtt_connect>
 800411e:	4603      	mov	r3, r0
 8004120:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8004122:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004124:	e002      	b.n	800412c <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 8004126:	4b03      	ldr	r3, [pc, #12]	@ (8004134 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bd90      	pop	{r4, r7, pc}
 8004134:	200004b4 	.word	0x200004b4
 8004138:	080258e4 	.word	0x080258e4
 800413c:	20000474 	.word	0x20000474
 8004140:	2000045c 	.word	0x2000045c
 8004144:	20000460 	.word	0x20000460
 8004148:	2000046c 	.word	0x2000046c
 800414c:	20000458 	.word	0x20000458
 8004150:	08003fb9 	.word	0x08003fb9

08004154 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 8004164:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fc8c 	bl	8003a90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200004b4 	.word	0x200004b4
 8004184:	200004c8 	.word	0x200004c8

08004188 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
    return mqtt_conn;
 800418c:	4b03      	ldr	r3, [pc, #12]	@ (800419c <get_mqtt_connection+0x14>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	200004b4 	.word	0x200004b4

080041a0 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b08b      	sub	sp, #44	@ 0x2c
 80041a4:	af04      	add	r7, sp, #16
 80041a6:	6178      	str	r0, [r7, #20]
 80041a8:	6139      	str	r1, [r7, #16]
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80041ae:	2101      	movs	r1, #1
 80041b0:	2080      	movs	r0, #128	@ 0x80
 80041b2:	f7ff fbc5 	bl	8003940 <_ZL9my_callocjj>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4a54      	ldr	r2, [pc, #336]	@ (800430c <mqtt_init+0x16c>)
 80041ba:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80041bc:	2101      	movs	r1, #1
 80041be:	2021      	movs	r0, #33	@ 0x21
 80041c0:	f7ff fbbe 	bl	8003940 <_ZL9my_callocjj>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4a52      	ldr	r2, [pc, #328]	@ (8004310 <mqtt_init+0x170>)
 80041c8:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80041ca:	2101      	movs	r1, #1
 80041cc:	2021      	movs	r0, #33	@ 0x21
 80041ce:	f7ff fbb7 	bl	8003940 <_ZL9my_callocjj>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <mqtt_init+0x174>)
 80041d6:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80041d8:	2101      	movs	r1, #1
 80041da:	2080      	movs	r0, #128	@ 0x80
 80041dc:	f7ff fbb0 	bl	8003940 <_ZL9my_callocjj>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004318 <mqtt_init+0x178>)
 80041e4:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80041e6:	2101      	movs	r1, #1
 80041e8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80041ec:	f7ff fba8 	bl	8003940 <_ZL9my_callocjj>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <mqtt_init+0x17c>)
 80041f4:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80041f6:	2101      	movs	r1, #1
 80041f8:	2028      	movs	r0, #40	@ 0x28
 80041fa:	f7ff fba1 	bl	8003940 <_ZL9my_callocjj>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a47      	ldr	r2, [pc, #284]	@ (8004320 <mqtt_init+0x180>)
 8004202:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 8004204:	4a47      	ldr	r2, [pc, #284]	@ (8004324 <mqtt_init+0x184>)
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 800420a:	4b40      	ldr	r3, [pc, #256]	@ (800430c <mqtt_init+0x16c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	4618      	mov	r0, r3
 8004212:	f01e ff10 	bl	8023036 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8004216:	4b3e      	ldr	r3, [pc, #248]	@ (8004310 <mqtt_init+0x170>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f01e ff0a 	bl	8023036 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8004222:	4b3c      	ldr	r3, [pc, #240]	@ (8004314 <mqtt_init+0x174>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004228:	4618      	mov	r0, r3
 800422a:	f01e ff04 	bl	8023036 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 800422e:	4b37      	ldr	r3, [pc, #220]	@ (800430c <mqtt_init+0x16c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b37      	ldr	r3, [pc, #220]	@ (8004310 <mqtt_init+0x170>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	493c      	ldr	r1, [pc, #240]	@ (8004328 <mqtt_init+0x188>)
 8004238:	2001      	movs	r0, #1
 800423a:	f7fd fe37 	bl	8001eac <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 800423e:	4a3b      	ldr	r2, [pc, #236]	@ (800432c <mqtt_init+0x18c>)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8004244:	4a3a      	ldr	r2, [pc, #232]	@ (8004330 <mqtt_init+0x190>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 800424a:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <mqtt_init+0x190>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2106      	movs	r1, #6
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f89b 	bl	800438c <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8004256:	4b2e      	ldr	r3, [pc, #184]	@ (8004310 <mqtt_init+0x170>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4c36      	ldr	r4, [pc, #216]	@ (8004334 <mqtt_init+0x194>)
 800425c:	463b      	mov	r3, r7
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f01c fd7b 	bl	8020d5c <mg_str_s>
 8004266:	4622      	mov	r2, r4
 8004268:	463b      	mov	r3, r7
 800426a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800426e:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8004272:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <mqtt_init+0x174>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4c2f      	ldr	r4, [pc, #188]	@ (8004334 <mqtt_init+0x194>)
 8004278:	463b      	mov	r3, r7
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f01c fd6d 	bl	8020d5c <mg_str_s>
 8004282:	f104 0308 	add.w	r3, r4, #8
 8004286:	463a      	mov	r2, r7
 8004288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800428c:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8004290:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <mqtt_init+0x194>)
 8004292:	223c      	movs	r2, #60	@ 0x3c
 8004294:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8004296:	4b25      	ldr	r3, [pc, #148]	@ (800432c <mqtt_init+0x18c>)
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <mqtt_init+0x198>)
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	2303      	movs	r3, #3
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	4608      	mov	r0, r1
 80042b0:	f019 f872 	bl	801d398 <mg_timer_add>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4a21      	ldr	r2, [pc, #132]	@ (800433c <mqtt_init+0x19c>)
 80042b8:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80042ba:	4b1c      	ldr	r3, [pc, #112]	@ (800432c <mqtt_init+0x18c>)
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <mqtt_init+0x1a0>)
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2301      	movs	r3, #1
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	4608      	mov	r0, r1
 80042d4:	f019 f860 	bl	801d398 <mg_timer_add>
 80042d8:	4603      	mov	r3, r0
 80042da:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <mqtt_init+0x1a4>)
 80042dc:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80042de:	4b13      	ldr	r3, [pc, #76]	@ (800432c <mqtt_init+0x18c>)
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	4b18      	ldr	r3, [pc, #96]	@ (8004348 <mqtt_init+0x1a8>)
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	2301      	movs	r3, #1
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	4608      	mov	r0, r1
 80042f8:	f019 f84e 	bl	801d398 <mg_timer_add>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4a13      	ldr	r2, [pc, #76]	@ (800434c <mqtt_init+0x1ac>)
 8004300:	6013      	str	r3, [r2, #0]

}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	bd90      	pop	{r4, r7, pc}
 800430a:	bf00      	nop
 800430c:	20000458 	.word	0x20000458
 8004310:	2000045c 	.word	0x2000045c
 8004314:	20000460 	.word	0x20000460
 8004318:	20000464 	.word	0x20000464
 800431c:	20000468 	.word	0x20000468
 8004320:	200004b8 	.word	0x200004b8
 8004324:	200004cc 	.word	0x200004cc
 8004328:	08025904 	.word	0x08025904
 800432c:	2000046c 	.word	0x2000046c
 8004330:	20000470 	.word	0x20000470
 8004334:	20000474 	.word	0x20000474
 8004338:	080040a9 	.word	0x080040a9
 800433c:	200004bc 	.word	0x200004bc
 8004340:	08003f8d 	.word	0x08003f8d
 8004344:	200004c0 	.word	0x200004c0
 8004348:	08004155 	.word	0x08004155
 800434c:	200004c4 	.word	0x200004c4

08004350 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4618      	mov	r0, r3
 8004364:	f007 fc7a 	bl	800bc5c <pvPortMalloc>
 8004368:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <_ZL9my_callocjj+0x32>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	461a      	mov	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f01e fd6b 	bl	8022e58 <memset>
  return p;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 8004396:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <set_device_id+0x78>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <set_device_id+0x1c>
		free(unical_id);
 800439e:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <set_device_id+0x78>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f007 fd28 	bl	800bdf8 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	3301      	adds	r3, #1
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ffcd 	bl	8004350 <_ZL9my_callocjj>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <set_device_id+0x78>)
 80043ba:	6013      	str	r3, [r2, #0]


	if (unical_id){
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <set_device_id+0x78>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00f      	b.n	80043ea <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80043ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <set_device_id+0x78>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	18d0      	adds	r0, r2, r3
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	490a      	ldr	r1, [pc, #40]	@ (8004408 <set_device_id+0x7c>)
 80043e0:	f01e f97a 	bl	80226d8 <siprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3eb      	bcc.n	80043ca <set_device_id+0x3e>
 80043f2:	e002      	b.n	80043fa <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043f8:	e000      	b.n	80043fc <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200004d8 	.word	0x200004d8
 8004408:	08025930 	.word	0x08025930

0800440c <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 8004416:	4b11      	ldr	r3, [pc, #68]	@ (800445c <set_device_conf_ip+0x50>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <set_device_conf_ip+0x50>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f007 fce8 	bl	800bdf8 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len, sizeof(char));
 8004428:	2101      	movs	r1, #1
 800442a:	6838      	ldr	r0, [r7, #0]
 800442c:	f7ff ff90 	bl	8004350 <_ZL9my_callocjj>
 8004430:	4603      	mov	r3, r0
 8004432:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <set_device_conf_ip+0x50>)
 8004434:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <set_device_conf_ip+0x50>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <set_device_conf_ip+0x44>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 800443e:	4b07      	ldr	r3, [pc, #28]	@ (800445c <set_device_conf_ip+0x50>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	f01e fc8d 	bl	8022d66 <strncpy>
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 800444c:	2300      	movs	r3, #0
 800444e:	e001      	b.n	8004454 <set_device_conf_ip+0x48>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8004450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	200004dc 	.word	0x200004dc

08004460 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af06      	add	r7, sp, #24
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	460b      	mov	r3, r1
 8004470:	71fb      	strb	r3, [r7, #7]
 8004472:	4613      	mov	r3, r2
 8004474:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	3b01      	subs	r3, #1
 8004480:	2b07      	cmp	r3, #7
 8004482:	f200 80a3 	bhi.w	80045cc <get_config_topik_string+0x16c>
 8004486:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <get_config_topik_string+0x2c>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044ad 	.word	0x080044ad
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044f5 	.word	0x080044f5
 8004498:	0800453d 	.word	0x0800453d
 800449c:	08004519 	.word	0x08004519
 80044a0:	08004585 	.word	0x08004585
 80044a4:	080045a9 	.word	0x080045a9
 80044a8:	08004561 	.word	0x08004561
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80044ac:	4b4b      	ldr	r3, [pc, #300]	@ (80045dc <get_config_topik_string+0x17c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	79ba      	ldrb	r2, [r7, #6]
 80044b2:	9204      	str	r2, [sp, #16]
 80044b4:	4a4a      	ldr	r2, [pc, #296]	@ (80045e0 <get_config_topik_string+0x180>)
 80044b6:	9203      	str	r2, [sp, #12]
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	4b4a      	ldr	r3, [pc, #296]	@ (80045e4 <get_config_topik_string+0x184>)
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	4b4a      	ldr	r3, [pc, #296]	@ (80045e8 <get_config_topik_string+0x188>)
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4b4a      	ldr	r3, [pc, #296]	@ (80045ec <get_config_topik_string+0x18c>)
 80044c4:	4a4a      	ldr	r2, [pc, #296]	@ (80045f0 <get_config_topik_string+0x190>)
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f01e f8c5 	bl	8022658 <sniprintf>
			break;
 80044ce:	e080      	b.n	80045d2 <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80044d0:	4b42      	ldr	r3, [pc, #264]	@ (80045dc <get_config_topik_string+0x17c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	79ba      	ldrb	r2, [r7, #6]
 80044d6:	9204      	str	r2, [sp, #16]
 80044d8:	4a46      	ldr	r2, [pc, #280]	@ (80045f4 <get_config_topik_string+0x194>)
 80044da:	9203      	str	r2, [sp, #12]
 80044dc:	9302      	str	r3, [sp, #8]
 80044de:	4b41      	ldr	r3, [pc, #260]	@ (80045e4 <get_config_topik_string+0x184>)
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	4b44      	ldr	r3, [pc, #272]	@ (80045f4 <get_config_topik_string+0x194>)
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4b41      	ldr	r3, [pc, #260]	@ (80045ec <get_config_topik_string+0x18c>)
 80044e8:	4a41      	ldr	r2, [pc, #260]	@ (80045f0 <get_config_topik_string+0x190>)
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f01e f8b3 	bl	8022658 <sniprintf>
			break;
 80044f2:	e06e      	b.n	80045d2 <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80044f4:	4b39      	ldr	r3, [pc, #228]	@ (80045dc <get_config_topik_string+0x17c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	79ba      	ldrb	r2, [r7, #6]
 80044fa:	9204      	str	r2, [sp, #16]
 80044fc:	4a3e      	ldr	r2, [pc, #248]	@ (80045f8 <get_config_topik_string+0x198>)
 80044fe:	9203      	str	r2, [sp, #12]
 8004500:	9302      	str	r3, [sp, #8]
 8004502:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <get_config_topik_string+0x184>)
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	4b3d      	ldr	r3, [pc, #244]	@ (80045fc <get_config_topik_string+0x19c>)
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4b38      	ldr	r3, [pc, #224]	@ (80045ec <get_config_topik_string+0x18c>)
 800450c:	4a38      	ldr	r2, [pc, #224]	@ (80045f0 <get_config_topik_string+0x190>)
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f01e f8a1 	bl	8022658 <sniprintf>
			break;
 8004516:	e05c      	b.n	80045d2 <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8004518:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <get_config_topik_string+0x17c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	79ba      	ldrb	r2, [r7, #6]
 800451e:	9204      	str	r2, [sp, #16]
 8004520:	4a37      	ldr	r2, [pc, #220]	@ (8004600 <get_config_topik_string+0x1a0>)
 8004522:	9203      	str	r2, [sp, #12]
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	4b2f      	ldr	r3, [pc, #188]	@ (80045e4 <get_config_topik_string+0x184>)
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	4b34      	ldr	r3, [pc, #208]	@ (80045fc <get_config_topik_string+0x19c>)
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <get_config_topik_string+0x18c>)
 8004530:	4a2f      	ldr	r2, [pc, #188]	@ (80045f0 <get_config_topik_string+0x190>)
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f01e f88f 	bl	8022658 <sniprintf>
			break;
 800453a:	e04a      	b.n	80045d2 <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 800453c:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <get_config_topik_string+0x17c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	79ba      	ldrb	r2, [r7, #6]
 8004542:	9204      	str	r2, [sp, #16]
 8004544:	4a2f      	ldr	r2, [pc, #188]	@ (8004604 <get_config_topik_string+0x1a4>)
 8004546:	9203      	str	r2, [sp, #12]
 8004548:	9302      	str	r3, [sp, #8]
 800454a:	4b26      	ldr	r3, [pc, #152]	@ (80045e4 <get_config_topik_string+0x184>)
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <get_config_topik_string+0x19c>)
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <get_config_topik_string+0x18c>)
 8004554:	4a26      	ldr	r2, [pc, #152]	@ (80045f0 <get_config_topik_string+0x190>)
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f01e f87d 	bl	8022658 <sniprintf>
			break;
 800455e:	e038      	b.n	80045d2 <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8004560:	4b1e      	ldr	r3, [pc, #120]	@ (80045dc <get_config_topik_string+0x17c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	79ba      	ldrb	r2, [r7, #6]
 8004566:	9204      	str	r2, [sp, #16]
 8004568:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <get_config_topik_string+0x1a8>)
 800456a:	9203      	str	r2, [sp, #12]
 800456c:	9302      	str	r3, [sp, #8]
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <get_config_topik_string+0x184>)
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <get_config_topik_string+0x19c>)
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <get_config_topik_string+0x18c>)
 8004578:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <get_config_topik_string+0x190>)
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f01e f86b 	bl	8022658 <sniprintf>
			break;
 8004582:	e026      	b.n	80045d2 <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8004584:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <get_config_topik_string+0x17c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	79ba      	ldrb	r2, [r7, #6]
 800458a:	9204      	str	r2, [sp, #16]
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <get_config_topik_string+0x1ac>)
 800458e:	9203      	str	r2, [sp, #12]
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <get_config_topik_string+0x184>)
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <get_config_topik_string+0x19c>)
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <get_config_topik_string+0x18c>)
 800459c:	4a14      	ldr	r2, [pc, #80]	@ (80045f0 <get_config_topik_string+0x190>)
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f01e f859 	bl	8022658 <sniprintf>
			break;
 80045a6:	e014      	b.n	80045d2 <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <get_config_topik_string+0x17c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	79ba      	ldrb	r2, [r7, #6]
 80045ae:	9204      	str	r2, [sp, #16]
 80045b0:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <get_config_topik_string+0x1b0>)
 80045b2:	9203      	str	r2, [sp, #12]
 80045b4:	9302      	str	r3, [sp, #8]
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <get_config_topik_string+0x184>)
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <get_config_topik_string+0x19c>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <get_config_topik_string+0x18c>)
 80045c0:	4a0b      	ldr	r2, [pc, #44]	@ (80045f0 <get_config_topik_string+0x190>)
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f01e f847 	bl	8022658 <sniprintf>
			break;
 80045ca:	e002      	b.n	80045d2 <get_config_topik_string+0x172>
		default:
			return -1;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045d0:	e000      	b.n	80045d4 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200004d8 	.word	0x200004d8
 80045e0:	08025950 	.word	0x08025950
 80045e4:	08025958 	.word	0x08025958
 80045e8:	08025960 	.word	0x08025960
 80045ec:	20000060 	.word	0x20000060
 80045f0:	08025938 	.word	0x08025938
 80045f4:	08025970 	.word	0x08025970
 80045f8:	08025978 	.word	0x08025978
 80045fc:	08025980 	.word	0x08025980
 8004600:	08025988 	.word	0x08025988
 8004604:	08025990 	.word	0x08025990
 8004608:	08025998 	.word	0x08025998
 800460c:	080259a8 	.word	0x080259a8
 8004610:	080259b8 	.word	0x080259b8

08004614 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b09f      	sub	sp, #124	@ 0x7c
 8004618:	af16      	add	r7, sp, #88	@ 0x58
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4611      	mov	r1, r2
 8004620:	461a      	mov	r2, r3
 8004622:	460b      	mov	r3, r1
 8004624:	71fb      	strb	r3, [r7, #7]
 8004626:	4613      	mov	r3, r2
 8004628:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	2100      	movs	r1, #0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f01e fc0c 	bl	8022e58 <memset>

	switch (payload_type) {
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	3b01      	subs	r3, #1
 8004644:	2b07      	cmp	r3, #7
 8004646:	f200 820f 	bhi.w	8004a68 <get_config_payload_string+0x454>
 800464a:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <get_config_payload_string+0x3c>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004671 	.word	0x08004671
 8004654:	08004701 	.word	0x08004701
 8004658:	080047cb 	.word	0x080047cb
 800465c:	080048f1 	.word	0x080048f1
 8004660:	08004829 	.word	0x08004829
 8004664:	080049ad 	.word	0x080049ad
 8004668:	08004a0b 	.word	0x08004a0b
 800466c:	0800494f 	.word	0x0800494f

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004670:	2101      	movs	r1, #1
 8004672:	2080      	movs	r0, #128	@ 0x80
 8004674:	f7ff fe6c 	bl	8004350 <_ZL9my_callocjj>
 8004678:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 800467a:	79bb      	ldrb	r3, [r7, #6]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b82      	ldr	r3, [pc, #520]	@ (8004888 <get_config_payload_string+0x274>)
 8004680:	4a82      	ldr	r2, [pc, #520]	@ (800488c <get_config_payload_string+0x278>)
 8004682:	2180      	movs	r1, #128	@ 0x80
 8004684:	69b8      	ldr	r0, [r7, #24]
 8004686:	f01d ffe7 	bl	8022658 <sniprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 800468a:	4b81      	ldr	r3, [pc, #516]	@ (8004890 <get_config_payload_string+0x27c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	79ba      	ldrb	r2, [r7, #6]
 8004690:	79b9      	ldrb	r1, [r7, #6]
 8004692:	487f      	ldr	r0, [pc, #508]	@ (8004890 <get_config_payload_string+0x27c>)
 8004694:	6800      	ldr	r0, [r0, #0]
 8004696:	79bc      	ldrb	r4, [r7, #6]
 8004698:	4d7d      	ldr	r5, [pc, #500]	@ (8004890 <get_config_payload_string+0x27c>)
 800469a:	682d      	ldr	r5, [r5, #0]
 800469c:	4e7d      	ldr	r6, [pc, #500]	@ (8004894 <get_config_payload_string+0x280>)
 800469e:	6836      	ldr	r6, [r6, #0]
 80046a0:	9614      	str	r6, [sp, #80]	@ 0x50
 80046a2:	4e7d      	ldr	r6, [pc, #500]	@ (8004898 <get_config_payload_string+0x284>)
 80046a4:	9613      	str	r6, [sp, #76]	@ 0x4c
 80046a6:	4e7c      	ldr	r6, [pc, #496]	@ (8004898 <get_config_payload_string+0x284>)
 80046a8:	9612      	str	r6, [sp, #72]	@ 0x48
 80046aa:	4e7c      	ldr	r6, [pc, #496]	@ (800489c <get_config_payload_string+0x288>)
 80046ac:	9611      	str	r6, [sp, #68]	@ 0x44
 80046ae:	4e7c      	ldr	r6, [pc, #496]	@ (80048a0 <get_config_payload_string+0x28c>)
 80046b0:	9610      	str	r6, [sp, #64]	@ 0x40
 80046b2:	4e7c      	ldr	r6, [pc, #496]	@ (80048a4 <get_config_payload_string+0x290>)
 80046b4:	960f      	str	r6, [sp, #60]	@ 0x3c
 80046b6:	950e      	str	r5, [sp, #56]	@ 0x38
 80046b8:	4d7b      	ldr	r5, [pc, #492]	@ (80048a8 <get_config_payload_string+0x294>)
 80046ba:	950d      	str	r5, [sp, #52]	@ 0x34
 80046bc:	4d7b      	ldr	r5, [pc, #492]	@ (80048ac <get_config_payload_string+0x298>)
 80046be:	950c      	str	r5, [sp, #48]	@ 0x30
 80046c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80046c2:	4c7b      	ldr	r4, [pc, #492]	@ (80048b0 <get_config_payload_string+0x29c>)
 80046c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80046c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80046c8:	4877      	ldr	r0, [pc, #476]	@ (80048a8 <get_config_payload_string+0x294>)
 80046ca:	9008      	str	r0, [sp, #32]
 80046cc:	69b8      	ldr	r0, [r7, #24]
 80046ce:	9007      	str	r0, [sp, #28]
 80046d0:	4878      	ldr	r0, [pc, #480]	@ (80048b4 <get_config_payload_string+0x2a0>)
 80046d2:	9006      	str	r0, [sp, #24]
 80046d4:	9105      	str	r1, [sp, #20]
 80046d6:	4976      	ldr	r1, [pc, #472]	@ (80048b0 <get_config_payload_string+0x29c>)
 80046d8:	9104      	str	r1, [sp, #16]
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	4a74      	ldr	r2, [pc, #464]	@ (80048b0 <get_config_payload_string+0x29c>)
 80046de:	9202      	str	r2, [sp, #8]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	4b71      	ldr	r3, [pc, #452]	@ (80048a8 <get_config_payload_string+0x294>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	4b74      	ldr	r3, [pc, #464]	@ (80048b8 <get_config_payload_string+0x2a4>)
 80046e8:	4a74      	ldr	r2, [pc, #464]	@ (80048bc <get_config_payload_string+0x2a8>)
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f01d ffb3 	bl	8022658 <sniprintf>
 80046f2:	4603      	mov	r3, r0
 80046f4:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 80046f6:	69b8      	ldr	r0, [r7, #24]
 80046f8:	f007 fb7e 	bl	800bdf8 <vPortFree>

			return len;
 80046fc:	7ffb      	ldrb	r3, [r7, #31]
 80046fe:	e1b6      	b.n	8004a6e <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004700:	2101      	movs	r1, #1
 8004702:	2080      	movs	r0, #128	@ 0x80
 8004704:	f7ff fe24 	bl	8004350 <_ZL9my_callocjj>
 8004708:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 800470a:	2101      	movs	r1, #1
 800470c:	2080      	movs	r0, #128	@ 0x80
 800470e:	f7ff fe1f 	bl	8004350 <_ZL9my_callocjj>
 8004712:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8004714:	79bb      	ldrb	r3, [r7, #6]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4b69      	ldr	r3, [pc, #420]	@ (80048c0 <get_config_payload_string+0x2ac>)
 800471a:	4a6a      	ldr	r2, [pc, #424]	@ (80048c4 <get_config_payload_string+0x2b0>)
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	69b8      	ldr	r0, [r7, #24]
 8004720:	f01d ff9a 	bl	8022658 <sniprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8004724:	4b5a      	ldr	r3, [pc, #360]	@ (8004890 <get_config_payload_string+0x27c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a60      	ldr	r2, [pc, #384]	@ (80048ac <get_config_payload_string+0x298>)
 800472a:	9202      	str	r2, [sp, #8]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	9201      	str	r2, [sp, #4]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <get_config_payload_string+0x294>)
 8004734:	4a64      	ldr	r2, [pc, #400]	@ (80048c8 <get_config_payload_string+0x2b4>)
 8004736:	2180      	movs	r1, #128	@ 0x80
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f01d ff8d 	bl	8022658 <sniprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 800473e:	79bb      	ldrb	r3, [r7, #6]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	4b62      	ldr	r3, [pc, #392]	@ (80048cc <get_config_payload_string+0x2b8>)
 8004744:	4a51      	ldr	r2, [pc, #324]	@ (800488c <get_config_payload_string+0x278>)
 8004746:	2180      	movs	r1, #128	@ 0x80
 8004748:	69b8      	ldr	r0, [r7, #24]
 800474a:	f01d ff85 	bl	8022658 <sniprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 800474e:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <get_config_payload_string+0x27c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	79ba      	ldrb	r2, [r7, #6]
 8004754:	79b9      	ldrb	r1, [r7, #6]
 8004756:	484e      	ldr	r0, [pc, #312]	@ (8004890 <get_config_payload_string+0x27c>)
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	79bc      	ldrb	r4, [r7, #6]
 800475c:	4d4c      	ldr	r5, [pc, #304]	@ (8004890 <get_config_payload_string+0x27c>)
 800475e:	682d      	ldr	r5, [r5, #0]
 8004760:	4e4c      	ldr	r6, [pc, #304]	@ (8004894 <get_config_payload_string+0x280>)
 8004762:	6836      	ldr	r6, [r6, #0]
 8004764:	9614      	str	r6, [sp, #80]	@ 0x50
 8004766:	4e4c      	ldr	r6, [pc, #304]	@ (8004898 <get_config_payload_string+0x284>)
 8004768:	9613      	str	r6, [sp, #76]	@ 0x4c
 800476a:	4e4b      	ldr	r6, [pc, #300]	@ (8004898 <get_config_payload_string+0x284>)
 800476c:	9612      	str	r6, [sp, #72]	@ 0x48
 800476e:	4e4b      	ldr	r6, [pc, #300]	@ (800489c <get_config_payload_string+0x288>)
 8004770:	9611      	str	r6, [sp, #68]	@ 0x44
 8004772:	4e4b      	ldr	r6, [pc, #300]	@ (80048a0 <get_config_payload_string+0x28c>)
 8004774:	9610      	str	r6, [sp, #64]	@ 0x40
 8004776:	4e4b      	ldr	r6, [pc, #300]	@ (80048a4 <get_config_payload_string+0x290>)
 8004778:	960f      	str	r6, [sp, #60]	@ 0x3c
 800477a:	950e      	str	r5, [sp, #56]	@ 0x38
 800477c:	4d4a      	ldr	r5, [pc, #296]	@ (80048a8 <get_config_payload_string+0x294>)
 800477e:	950d      	str	r5, [sp, #52]	@ 0x34
 8004780:	4d4a      	ldr	r5, [pc, #296]	@ (80048ac <get_config_payload_string+0x298>)
 8004782:	950c      	str	r5, [sp, #48]	@ 0x30
 8004784:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004786:	4c4e      	ldr	r4, [pc, #312]	@ (80048c0 <get_config_payload_string+0x2ac>)
 8004788:	940a      	str	r4, [sp, #40]	@ 0x28
 800478a:	9009      	str	r0, [sp, #36]	@ 0x24
 800478c:	4846      	ldr	r0, [pc, #280]	@ (80048a8 <get_config_payload_string+0x294>)
 800478e:	9008      	str	r0, [sp, #32]
 8004790:	69b8      	ldr	r0, [r7, #24]
 8004792:	9007      	str	r0, [sp, #28]
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	9006      	str	r0, [sp, #24]
 8004798:	9105      	str	r1, [sp, #20]
 800479a:	4949      	ldr	r1, [pc, #292]	@ (80048c0 <get_config_payload_string+0x2ac>)
 800479c:	9104      	str	r1, [sp, #16]
 800479e:	9203      	str	r2, [sp, #12]
 80047a0:	4a47      	ldr	r2, [pc, #284]	@ (80048c0 <get_config_payload_string+0x2ac>)
 80047a2:	9202      	str	r2, [sp, #8]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <get_config_payload_string+0x294>)
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <get_config_payload_string+0x2ac>)
 80047ac:	4a43      	ldr	r2, [pc, #268]	@ (80048bc <get_config_payload_string+0x2a8>)
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f01d ff51 	bl	8022658 <sniprintf>
 80047b6:	4603      	mov	r3, r0
 80047b8:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 80047ba:	69b8      	ldr	r0, [r7, #24]
 80047bc:	f007 fb1c 	bl	800bdf8 <vPortFree>
			free(com_topik);
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	f007 fb19 	bl	800bdf8 <vPortFree>

			return len;
 80047c6:	7ffb      	ldrb	r3, [r7, #31]
 80047c8:	e151      	b.n	8004a6e <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80047ca:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <get_config_payload_string+0x27c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <get_config_payload_string+0x27c>)
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	492f      	ldr	r1, [pc, #188]	@ (8004890 <get_config_payload_string+0x27c>)
 80047d4:	6809      	ldr	r1, [r1, #0]
 80047d6:	482f      	ldr	r0, [pc, #188]	@ (8004894 <get_config_payload_string+0x280>)
 80047d8:	6800      	ldr	r0, [r0, #0]
 80047da:	9010      	str	r0, [sp, #64]	@ 0x40
 80047dc:	482e      	ldr	r0, [pc, #184]	@ (8004898 <get_config_payload_string+0x284>)
 80047de:	900f      	str	r0, [sp, #60]	@ 0x3c
 80047e0:	482d      	ldr	r0, [pc, #180]	@ (8004898 <get_config_payload_string+0x284>)
 80047e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80047e4:	482d      	ldr	r0, [pc, #180]	@ (800489c <get_config_payload_string+0x288>)
 80047e6:	900d      	str	r0, [sp, #52]	@ 0x34
 80047e8:	482d      	ldr	r0, [pc, #180]	@ (80048a0 <get_config_payload_string+0x28c>)
 80047ea:	900c      	str	r0, [sp, #48]	@ 0x30
 80047ec:	482d      	ldr	r0, [pc, #180]	@ (80048a4 <get_config_payload_string+0x290>)
 80047ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 80047f0:	910a      	str	r1, [sp, #40]	@ 0x28
 80047f2:	492d      	ldr	r1, [pc, #180]	@ (80048a8 <get_config_payload_string+0x294>)
 80047f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80047f6:	4936      	ldr	r1, [pc, #216]	@ (80048d0 <get_config_payload_string+0x2bc>)
 80047f8:	9108      	str	r1, [sp, #32]
 80047fa:	4936      	ldr	r1, [pc, #216]	@ (80048d4 <get_config_payload_string+0x2c0>)
 80047fc:	9107      	str	r1, [sp, #28]
 80047fe:	9206      	str	r2, [sp, #24]
 8004800:	4a29      	ldr	r2, [pc, #164]	@ (80048a8 <get_config_payload_string+0x294>)
 8004802:	9205      	str	r2, [sp, #20]
 8004804:	4a34      	ldr	r2, [pc, #208]	@ (80048d8 <get_config_payload_string+0x2c4>)
 8004806:	9204      	str	r2, [sp, #16]
 8004808:	4a34      	ldr	r2, [pc, #208]	@ (80048dc <get_config_payload_string+0x2c8>)
 800480a:	9203      	str	r2, [sp, #12]
 800480c:	4a31      	ldr	r2, [pc, #196]	@ (80048d4 <get_config_payload_string+0x2c0>)
 800480e:	9202      	str	r2, [sp, #8]
 8004810:	4a33      	ldr	r2, [pc, #204]	@ (80048e0 <get_config_payload_string+0x2cc>)
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <get_config_payload_string+0x294>)
 8004818:	4a2e      	ldr	r2, [pc, #184]	@ (80048d4 <get_config_payload_string+0x2c0>)
 800481a:	4928      	ldr	r1, [pc, #160]	@ (80048bc <get_config_payload_string+0x2a8>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f01d ff5b 	bl	80226d8 <siprintf>
 8004822:	4603      	mov	r3, r0
 8004824:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004826:	e122      	b.n	8004a6e <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <get_config_payload_string+0x27c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <get_config_payload_string+0x27c>)
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4917      	ldr	r1, [pc, #92]	@ (8004890 <get_config_payload_string+0x27c>)
 8004832:	6809      	ldr	r1, [r1, #0]
 8004834:	4817      	ldr	r0, [pc, #92]	@ (8004894 <get_config_payload_string+0x280>)
 8004836:	6800      	ldr	r0, [r0, #0]
 8004838:	9010      	str	r0, [sp, #64]	@ 0x40
 800483a:	4817      	ldr	r0, [pc, #92]	@ (8004898 <get_config_payload_string+0x284>)
 800483c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800483e:	4816      	ldr	r0, [pc, #88]	@ (8004898 <get_config_payload_string+0x284>)
 8004840:	900e      	str	r0, [sp, #56]	@ 0x38
 8004842:	4816      	ldr	r0, [pc, #88]	@ (800489c <get_config_payload_string+0x288>)
 8004844:	900d      	str	r0, [sp, #52]	@ 0x34
 8004846:	4816      	ldr	r0, [pc, #88]	@ (80048a0 <get_config_payload_string+0x28c>)
 8004848:	900c      	str	r0, [sp, #48]	@ 0x30
 800484a:	4816      	ldr	r0, [pc, #88]	@ (80048a4 <get_config_payload_string+0x290>)
 800484c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800484e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004850:	4915      	ldr	r1, [pc, #84]	@ (80048a8 <get_config_payload_string+0x294>)
 8004852:	9109      	str	r1, [sp, #36]	@ 0x24
 8004854:	4923      	ldr	r1, [pc, #140]	@ (80048e4 <get_config_payload_string+0x2d0>)
 8004856:	9108      	str	r1, [sp, #32]
 8004858:	4923      	ldr	r1, [pc, #140]	@ (80048e8 <get_config_payload_string+0x2d4>)
 800485a:	9107      	str	r1, [sp, #28]
 800485c:	9206      	str	r2, [sp, #24]
 800485e:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <get_config_payload_string+0x294>)
 8004860:	9205      	str	r2, [sp, #20]
 8004862:	4a22      	ldr	r2, [pc, #136]	@ (80048ec <get_config_payload_string+0x2d8>)
 8004864:	9204      	str	r2, [sp, #16]
 8004866:	4a13      	ldr	r2, [pc, #76]	@ (80048b4 <get_config_payload_string+0x2a0>)
 8004868:	9203      	str	r2, [sp, #12]
 800486a:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <get_config_payload_string+0x2d4>)
 800486c:	9202      	str	r2, [sp, #8]
 800486e:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <get_config_payload_string+0x2cc>)
 8004870:	9201      	str	r2, [sp, #4]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <get_config_payload_string+0x294>)
 8004876:	4a1c      	ldr	r2, [pc, #112]	@ (80048e8 <get_config_payload_string+0x2d4>)
 8004878:	4910      	ldr	r1, [pc, #64]	@ (80048bc <get_config_payload_string+0x2a8>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f01d ff2c 	bl	80226d8 <siprintf>
 8004880:	4603      	mov	r3, r0
 8004882:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004884:	e0f3      	b.n	8004a6e <get_config_payload_string+0x45a>
 8004886:	bf00      	nop
 8004888:	080259c0 	.word	0x080259c0
 800488c:	080259cc 	.word	0x080259cc
 8004890:	200004d8 	.word	0x200004d8
 8004894:	200004dc 	.word	0x200004dc
 8004898:	080259d4 	.word	0x080259d4
 800489c:	080259d8 	.word	0x080259d8
 80048a0:	080259e8 	.word	0x080259e8
 80048a4:	080259fc 	.word	0x080259fc
 80048a8:	08025958 	.word	0x08025958
 80048ac:	08025a08 	.word	0x08025a08
 80048b0:	08025950 	.word	0x08025950
 80048b4:	08025a0c 	.word	0x08025a0c
 80048b8:	08025990 	.word	0x08025990
 80048bc:	08028ac0 	.word	0x08028ac0
 80048c0:	08025970 	.word	0x08025970
 80048c4:	08025a10 	.word	0x08025a10
 80048c8:	08028c40 	.word	0x08028c40
 80048cc:	08025a18 	.word	0x08025a18
 80048d0:	08025a2c 	.word	0x08025a2c
 80048d4:	08025978 	.word	0x08025978
 80048d8:	08025a30 	.word	0x08025a30
 80048dc:	08025a40 	.word	0x08025a40
 80048e0:	08025a64 	.word	0x08025a64
 80048e4:	08025a6c 	.word	0x08025a6c
 80048e8:	08025988 	.word	0x08025988
 80048ec:	08025a70 	.word	0x08025a70
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80048f0:	4b61      	ldr	r3, [pc, #388]	@ (8004a78 <get_config_payload_string+0x464>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a60      	ldr	r2, [pc, #384]	@ (8004a78 <get_config_payload_string+0x464>)
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	495f      	ldr	r1, [pc, #380]	@ (8004a78 <get_config_payload_string+0x464>)
 80048fa:	6809      	ldr	r1, [r1, #0]
 80048fc:	485f      	ldr	r0, [pc, #380]	@ (8004a7c <get_config_payload_string+0x468>)
 80048fe:	6800      	ldr	r0, [r0, #0]
 8004900:	9010      	str	r0, [sp, #64]	@ 0x40
 8004902:	485f      	ldr	r0, [pc, #380]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004904:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004906:	485e      	ldr	r0, [pc, #376]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004908:	900e      	str	r0, [sp, #56]	@ 0x38
 800490a:	485e      	ldr	r0, [pc, #376]	@ (8004a84 <get_config_payload_string+0x470>)
 800490c:	900d      	str	r0, [sp, #52]	@ 0x34
 800490e:	485e      	ldr	r0, [pc, #376]	@ (8004a88 <get_config_payload_string+0x474>)
 8004910:	900c      	str	r0, [sp, #48]	@ 0x30
 8004912:	485e      	ldr	r0, [pc, #376]	@ (8004a8c <get_config_payload_string+0x478>)
 8004914:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004916:	910a      	str	r1, [sp, #40]	@ 0x28
 8004918:	495d      	ldr	r1, [pc, #372]	@ (8004a90 <get_config_payload_string+0x47c>)
 800491a:	9109      	str	r1, [sp, #36]	@ 0x24
 800491c:	495d      	ldr	r1, [pc, #372]	@ (8004a94 <get_config_payload_string+0x480>)
 800491e:	9108      	str	r1, [sp, #32]
 8004920:	495d      	ldr	r1, [pc, #372]	@ (8004a98 <get_config_payload_string+0x484>)
 8004922:	9107      	str	r1, [sp, #28]
 8004924:	9206      	str	r2, [sp, #24]
 8004926:	4a5a      	ldr	r2, [pc, #360]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004928:	9205      	str	r2, [sp, #20]
 800492a:	4a5c      	ldr	r2, [pc, #368]	@ (8004a9c <get_config_payload_string+0x488>)
 800492c:	9204      	str	r2, [sp, #16]
 800492e:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa0 <get_config_payload_string+0x48c>)
 8004930:	9203      	str	r2, [sp, #12]
 8004932:	4a59      	ldr	r2, [pc, #356]	@ (8004a98 <get_config_payload_string+0x484>)
 8004934:	9202      	str	r2, [sp, #8]
 8004936:	4a5b      	ldr	r2, [pc, #364]	@ (8004aa4 <get_config_payload_string+0x490>)
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4b54      	ldr	r3, [pc, #336]	@ (8004a90 <get_config_payload_string+0x47c>)
 800493e:	4a56      	ldr	r2, [pc, #344]	@ (8004a98 <get_config_payload_string+0x484>)
 8004940:	4959      	ldr	r1, [pc, #356]	@ (8004aa8 <get_config_payload_string+0x494>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f01d fec8 	bl	80226d8 <siprintf>
 8004948:	4603      	mov	r3, r0
 800494a:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 800494c:	e08f      	b.n	8004a6e <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <get_config_payload_string+0x464>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a49      	ldr	r2, [pc, #292]	@ (8004a78 <get_config_payload_string+0x464>)
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	4948      	ldr	r1, [pc, #288]	@ (8004a78 <get_config_payload_string+0x464>)
 8004958:	6809      	ldr	r1, [r1, #0]
 800495a:	4848      	ldr	r0, [pc, #288]	@ (8004a7c <get_config_payload_string+0x468>)
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004960:	4847      	ldr	r0, [pc, #284]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004962:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004964:	4846      	ldr	r0, [pc, #280]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004966:	900e      	str	r0, [sp, #56]	@ 0x38
 8004968:	4846      	ldr	r0, [pc, #280]	@ (8004a84 <get_config_payload_string+0x470>)
 800496a:	900d      	str	r0, [sp, #52]	@ 0x34
 800496c:	4846      	ldr	r0, [pc, #280]	@ (8004a88 <get_config_payload_string+0x474>)
 800496e:	900c      	str	r0, [sp, #48]	@ 0x30
 8004970:	4846      	ldr	r0, [pc, #280]	@ (8004a8c <get_config_payload_string+0x478>)
 8004972:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004974:	910a      	str	r1, [sp, #40]	@ 0x28
 8004976:	4946      	ldr	r1, [pc, #280]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004978:	9109      	str	r1, [sp, #36]	@ 0x24
 800497a:	494c      	ldr	r1, [pc, #304]	@ (8004aac <get_config_payload_string+0x498>)
 800497c:	9108      	str	r1, [sp, #32]
 800497e:	494c      	ldr	r1, [pc, #304]	@ (8004ab0 <get_config_payload_string+0x49c>)
 8004980:	9107      	str	r1, [sp, #28]
 8004982:	9206      	str	r2, [sp, #24]
 8004984:	4a42      	ldr	r2, [pc, #264]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004986:	9205      	str	r2, [sp, #20]
 8004988:	4a4a      	ldr	r2, [pc, #296]	@ (8004ab4 <get_config_payload_string+0x4a0>)
 800498a:	9204      	str	r2, [sp, #16]
 800498c:	4a44      	ldr	r2, [pc, #272]	@ (8004aa0 <get_config_payload_string+0x48c>)
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	4a47      	ldr	r2, [pc, #284]	@ (8004ab0 <get_config_payload_string+0x49c>)
 8004992:	9202      	str	r2, [sp, #8]
 8004994:	4a43      	ldr	r2, [pc, #268]	@ (8004aa4 <get_config_payload_string+0x490>)
 8004996:	9201      	str	r2, [sp, #4]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a90 <get_config_payload_string+0x47c>)
 800499c:	4a44      	ldr	r2, [pc, #272]	@ (8004ab0 <get_config_payload_string+0x49c>)
 800499e:	4942      	ldr	r1, [pc, #264]	@ (8004aa8 <get_config_payload_string+0x494>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f01d fe99 	bl	80226d8 <siprintf>
 80049a6:	4603      	mov	r3, r0
 80049a8:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80049aa:	e060      	b.n	8004a6e <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80049ac:	4b32      	ldr	r3, [pc, #200]	@ (8004a78 <get_config_payload_string+0x464>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a31      	ldr	r2, [pc, #196]	@ (8004a78 <get_config_payload_string+0x464>)
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	4930      	ldr	r1, [pc, #192]	@ (8004a78 <get_config_payload_string+0x464>)
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	4830      	ldr	r0, [pc, #192]	@ (8004a7c <get_config_payload_string+0x468>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	9010      	str	r0, [sp, #64]	@ 0x40
 80049be:	4830      	ldr	r0, [pc, #192]	@ (8004a80 <get_config_payload_string+0x46c>)
 80049c0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049c2:	482f      	ldr	r0, [pc, #188]	@ (8004a80 <get_config_payload_string+0x46c>)
 80049c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80049c6:	482f      	ldr	r0, [pc, #188]	@ (8004a84 <get_config_payload_string+0x470>)
 80049c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80049ca:	482f      	ldr	r0, [pc, #188]	@ (8004a88 <get_config_payload_string+0x474>)
 80049cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80049ce:	482f      	ldr	r0, [pc, #188]	@ (8004a8c <get_config_payload_string+0x478>)
 80049d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80049d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80049d4:	492e      	ldr	r1, [pc, #184]	@ (8004a90 <get_config_payload_string+0x47c>)
 80049d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80049d8:	4937      	ldr	r1, [pc, #220]	@ (8004ab8 <get_config_payload_string+0x4a4>)
 80049da:	9108      	str	r1, [sp, #32]
 80049dc:	4937      	ldr	r1, [pc, #220]	@ (8004abc <get_config_payload_string+0x4a8>)
 80049de:	9107      	str	r1, [sp, #28]
 80049e0:	9206      	str	r2, [sp, #24]
 80049e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a90 <get_config_payload_string+0x47c>)
 80049e4:	9205      	str	r2, [sp, #20]
 80049e6:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <get_config_payload_string+0x4ac>)
 80049e8:	9204      	str	r2, [sp, #16]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa0 <get_config_payload_string+0x48c>)
 80049ec:	9203      	str	r2, [sp, #12]
 80049ee:	4a33      	ldr	r2, [pc, #204]	@ (8004abc <get_config_payload_string+0x4a8>)
 80049f0:	9202      	str	r2, [sp, #8]
 80049f2:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa4 <get_config_payload_string+0x490>)
 80049f4:	9201      	str	r2, [sp, #4]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <get_config_payload_string+0x47c>)
 80049fa:	4a30      	ldr	r2, [pc, #192]	@ (8004abc <get_config_payload_string+0x4a8>)
 80049fc:	492a      	ldr	r1, [pc, #168]	@ (8004aa8 <get_config_payload_string+0x494>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f01d fe6a 	bl	80226d8 <siprintf>
 8004a04:	4603      	mov	r3, r0
 8004a06:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004a08:	e031      	b.n	8004a6e <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <get_config_payload_string+0x464>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <get_config_payload_string+0x464>)
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4919      	ldr	r1, [pc, #100]	@ (8004a78 <get_config_payload_string+0x464>)
 8004a14:	6809      	ldr	r1, [r1, #0]
 8004a16:	4819      	ldr	r0, [pc, #100]	@ (8004a7c <get_config_payload_string+0x468>)
 8004a18:	6800      	ldr	r0, [r0, #0]
 8004a1a:	9010      	str	r0, [sp, #64]	@ 0x40
 8004a1c:	4818      	ldr	r0, [pc, #96]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004a1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a20:	4817      	ldr	r0, [pc, #92]	@ (8004a80 <get_config_payload_string+0x46c>)
 8004a22:	900e      	str	r0, [sp, #56]	@ 0x38
 8004a24:	4817      	ldr	r0, [pc, #92]	@ (8004a84 <get_config_payload_string+0x470>)
 8004a26:	900d      	str	r0, [sp, #52]	@ 0x34
 8004a28:	4817      	ldr	r0, [pc, #92]	@ (8004a88 <get_config_payload_string+0x474>)
 8004a2a:	900c      	str	r0, [sp, #48]	@ 0x30
 8004a2c:	4817      	ldr	r0, [pc, #92]	@ (8004a8c <get_config_payload_string+0x478>)
 8004a2e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004a30:	910a      	str	r1, [sp, #40]	@ 0x28
 8004a32:	4917      	ldr	r1, [pc, #92]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004a34:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a36:	4923      	ldr	r1, [pc, #140]	@ (8004ac4 <get_config_payload_string+0x4b0>)
 8004a38:	9108      	str	r1, [sp, #32]
 8004a3a:	4923      	ldr	r1, [pc, #140]	@ (8004ac8 <get_config_payload_string+0x4b4>)
 8004a3c:	9107      	str	r1, [sp, #28]
 8004a3e:	9206      	str	r2, [sp, #24]
 8004a40:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004a42:	9205      	str	r2, [sp, #20]
 8004a44:	4a21      	ldr	r2, [pc, #132]	@ (8004acc <get_config_payload_string+0x4b8>)
 8004a46:	9204      	str	r2, [sp, #16]
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <get_config_payload_string+0x48c>)
 8004a4a:	9203      	str	r2, [sp, #12]
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <get_config_payload_string+0x4b4>)
 8004a4e:	9202      	str	r2, [sp, #8]
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <get_config_payload_string+0x490>)
 8004a52:	9201      	str	r2, [sp, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <get_config_payload_string+0x47c>)
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <get_config_payload_string+0x4b4>)
 8004a5a:	4913      	ldr	r1, [pc, #76]	@ (8004aa8 <get_config_payload_string+0x494>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f01d fe3b 	bl	80226d8 <siprintf>
 8004a62:	4603      	mov	r3, r0
 8004a64:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004a66:	e002      	b.n	8004a6e <get_config_payload_string+0x45a>

		default:
			return -1;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a6c:	e7ff      	b.n	8004a6e <get_config_payload_string+0x45a>
			break;
	}
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	@ 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200004d8 	.word	0x200004d8
 8004a7c:	200004dc 	.word	0x200004dc
 8004a80:	080259d4 	.word	0x080259d4
 8004a84:	080259d8 	.word	0x080259d8
 8004a88:	080259e8 	.word	0x080259e8
 8004a8c:	080259fc 	.word	0x080259fc
 8004a90:	08025958 	.word	0x08025958
 8004a94:	08025a80 	.word	0x08025a80
 8004a98:	08025990 	.word	0x08025990
 8004a9c:	08025a84 	.word	0x08025a84
 8004aa0:	08025a0c 	.word	0x08025a0c
 8004aa4:	08025a64 	.word	0x08025a64
 8004aa8:	08028ac0 	.word	0x08028ac0
 8004aac:	08025aa8 	.word	0x08025aa8
 8004ab0:	08025998 	.word	0x08025998
 8004ab4:	08025aac 	.word	0x08025aac
 8004ab8:	08025acc 	.word	0x08025acc
 8004abc:	080259a8 	.word	0x080259a8
 8004ac0:	08025ad0 	.word	0x08025ad0
 8004ac4:	08025afc 	.word	0x08025afc
 8004ac8:	080259b8 	.word	0x080259b8
 8004acc:	08025b00 	.word	0x08025b00

08004ad0 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	460b      	mov	r3, r1
 8004ae0:	71fb      	strb	r3, [r7, #7]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d002      	beq.n	8004af6 <gen_bin_sensor_status_payload_JSON+0x26>
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d003      	beq.n	8004afc <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8004af4:	e005      	b.n	8004b02 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8004af6:	4b13      	ldr	r3, [pc, #76]	@ (8004b44 <gen_bin_sensor_status_payload_JSON+0x74>)
 8004af8:	617b      	str	r3, [r7, #20]
			break;
 8004afa:	e002      	b.n	8004b02 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 8004afc:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <gen_bin_sensor_status_payload_JSON+0x78>)
 8004afe:	617b      	str	r3, [r7, #20]
			break;
 8004b00:	bf00      	nop
	}

	if (state){
 8004b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8004b0a:	79bb      	ldrb	r3, [r7, #6]
 8004b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004b4c <gen_bin_sensor_status_payload_JSON+0x7c>)
 8004b0e:	9201      	str	r2, [sp, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <gen_bin_sensor_status_payload_JSON+0x80>)
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f01d fd9d 	bl	8022658 <sniprintf>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e00b      	b.n	8004b3a <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8004b22:	79bb      	ldrb	r3, [r7, #6]
 8004b24:	4a0b      	ldr	r2, [pc, #44]	@ (8004b54 <gen_bin_sensor_status_payload_JSON+0x84>)
 8004b26:	9201      	str	r2, [sp, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	@ (8004b50 <gen_bin_sensor_status_payload_JSON+0x80>)
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f01d fd91 	bl	8022658 <sniprintf>
 8004b36:	4603      	mov	r3, r0
 8004b38:	bf00      	nop
	}
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08025950 	.word	0x08025950
 8004b48:	08025970 	.word	0x08025970
 8004b4c:	08025b0c 	.word	0x08025b0c
 8004b50:	08028c68 	.word	0x08028c68
 8004b54:	08025b10 	.word	0x08025b10

08004b58 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	460b      	mov	r3, r1
 8004b68:	71fb      	strb	r3, [r7, #7]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d10e      	bne.n	8004b92 <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <generate_comand_topik_for_subscrabe+0x44>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	79ba      	ldrb	r2, [r7, #6]
 8004b7a:	9202      	str	r2, [sp, #8]
 8004b7c:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <generate_comand_topik_for_subscrabe+0x48>)
 8004b7e:	9201      	str	r2, [sp, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <generate_comand_topik_for_subscrabe+0x4c>)
 8004b84:	4a08      	ldr	r2, [pc, #32]	@ (8004ba8 <generate_comand_topik_for_subscrabe+0x50>)
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f01d fd65 	bl	8022658 <sniprintf>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	e7ff      	b.n	8004b92 <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200004d8 	.word	0x200004d8
 8004ba0:	08025970 	.word	0x08025970
 8004ba4:	08025958 	.word	0x08025958
 8004ba8:	08025b14 	.word	0x08025b14

08004bac <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af04      	add	r7, sp, #16
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	460b      	mov	r3, r1
 8004bbc:	71fb      	strb	r3, [r7, #7]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d002      	beq.n	8004bd4 <generate_status_topik+0x28>
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d00f      	beq.n	8004bf2 <generate_status_topik+0x46>
 8004bd2:	e01d      	b.n	8004c10 <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <generate_status_topik+0x70>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	79ba      	ldrb	r2, [r7, #6]
 8004bda:	9202      	str	r2, [sp, #8]
 8004bdc:	4a10      	ldr	r2, [pc, #64]	@ (8004c20 <generate_status_topik+0x74>)
 8004bde:	9201      	str	r2, [sp, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <generate_status_topik+0x78>)
 8004be4:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <generate_status_topik+0x7c>)
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f01d fd35 	bl	8022658 <sniprintf>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	e010      	b.n	8004c14 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <generate_status_topik+0x70>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	79ba      	ldrb	r2, [r7, #6]
 8004bf8:	9202      	str	r2, [sp, #8]
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004c2c <generate_status_topik+0x80>)
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <generate_status_topik+0x78>)
 8004c02:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <generate_status_topik+0x7c>)
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f01d fd26 	bl	8022658 <sniprintf>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	e001      	b.n	8004c14 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	200004d8 	.word	0x200004d8
 8004c20:	08025950 	.word	0x08025950
 8004c24:	08025958 	.word	0x08025958
 8004c28:	08025b24 	.word	0x08025b24
 8004c2c:	08025970 	.word	0x08025970

08004c30 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8004c54:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	60d3      	str	r3, [r2, #12]
 8004c5a:	e002      	b.n	8004c62 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <SPI_flash_reg_cb+0x54>)
 8004c60:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8004c68:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6113      	str	r3, [r2, #16]
 8004c6e:	e002      	b.n	8004c76 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <SPI_flash_reg_cb+0x54>)
 8004c74:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 8004c76:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8004c7c:	4a04      	ldr	r2, [pc, #16]	@ (8004c90 <SPI_flash_reg_cb+0x50>)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6093      	str	r3, [r2, #8]

}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	200004e0 	.word	0x200004e0
 8004c94:	08004c31 	.word	0x08004c31

08004c98 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 8004c9c:	f000 f8d2 	bl	8004e44 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8004ca0:	2066      	movs	r0, #102	@ 0x66
 8004ca2:	f000 fa8d 	bl	80051c0 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8004ca6:	2099      	movs	r0, #153	@ 0x99
 8004ca8:	f000 fa8a 	bl	80051c0 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8004cac:	f000 f8d4 	bl	8004e58 <sFLASH_CS_HIGH>
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <sFLASH_Init>:

void sFLASH_Init(void){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8004cb8:	2064      	movs	r0, #100	@ 0x64
 8004cba:	f000 fafb 	bl	80052b4 <HAL_Delay>
    sFLASH_Reset();
 8004cbe:	f7ff ffeb 	bl	8004c98 <sFLASH_Reset>
    HAL_Delay(100);
 8004cc2:	2064      	movs	r0, #100	@ 0x64
 8004cc4:	f000 faf6 	bl	80052b4 <HAL_Delay>
    HAL_Delay(100);
 8004cc8:	2064      	movs	r0, #100	@ 0x64
 8004cca:	f000 faf3 	bl	80052b4 <HAL_Delay>
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 8004cdc:	f7ff ffea 	bl	8004cb4 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 8004ce0:	f000 fa18 	bl	8005114 <sFLASH_ReadID>
 8004ce4:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8004e28 <sFLASH_GetInfo+0x154>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d076      	beq.n	8004ddc <sFLASH_GetInfo+0x108>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8004e28 <sFLASH_GetInfo+0x154>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f0c0 8088 	bcc.w	8004e08 <sFLASH_GetInfo+0x134>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8004e2c <sFLASH_GetInfo+0x158>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f200 8083 	bhi.w	8004e08 <sFLASH_GetInfo+0x134>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	@ (8004e30 <sFLASH_GetInfo+0x15c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d37e      	bcc.n	8004e08 <sFLASH_GetInfo+0x134>
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4b49      	ldr	r3, [pc, #292]	@ (8004e34 <sFLASH_GetInfo+0x160>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d879      	bhi.n	8004e08 <sFLASH_GetInfo+0x134>
 8004d14:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <sFLASH_GetInfo+0x48>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d59 	.word	0x08004d59
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	08004db1 	.word	0x08004db1
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8004d2c:	4b42      	ldr	r3, [pc, #264]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d2e:	4a40      	ldr	r2, [pc, #256]	@ (8004e30 <sFLASH_GetInfo+0x15c>)
 8004d30:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004d32:	4b41      	ldr	r3, [pc, #260]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004d38:	4b3f      	ldr	r3, [pc, #252]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d44:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004d46:	4b3c      	ldr	r3, [pc, #240]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d4c:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d54:	819a      	strh	r2, [r3, #12]
			break;
 8004d56:	e05b      	b.n	8004e10 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8004d58:	4b37      	ldr	r3, [pc, #220]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d5a:	4a38      	ldr	r2, [pc, #224]	@ (8004e3c <sFLASH_GetInfo+0x168>)
 8004d5c:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004d5e:	4b36      	ldr	r3, [pc, #216]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004d64:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004d6a:	4b33      	ldr	r3, [pc, #204]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d70:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004d72:	4b31      	ldr	r3, [pc, #196]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d78:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d80:	819a      	strh	r2, [r3, #12]
			break;
 8004d82:	e045      	b.n	8004e10 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8004d84:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d86:	4a2e      	ldr	r2, [pc, #184]	@ (8004e40 <sFLASH_GetInfo+0x16c>)
 8004d88:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004d90:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004d96:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004d98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d9c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004d9e:	4b26      	ldr	r3, [pc, #152]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004da4:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8004da6:	4b24      	ldr	r3, [pc, #144]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004da8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dac:	819a      	strh	r2, [r3, #12]
			break;
 8004dae:	e02f      	b.n	8004e10 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8004db0:	4b21      	ldr	r3, [pc, #132]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004db2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <sFLASH_GetInfo+0x158>)
 8004db4:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004db6:	4b20      	ldr	r3, [pc, #128]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004dc8:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004dca:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dd0:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 8004dd2:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004dd8:	819a      	strh	r2, [r3, #12]
			break;
 8004dda:	e019      	b.n	8004e10 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8004ddc:	4b16      	ldr	r3, [pc, #88]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dde:	4a12      	ldr	r2, [pc, #72]	@ (8004e28 <sFLASH_GetInfo+0x154>)
 8004de0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004dee:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004df0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004df4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004df6:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004df8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dfc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e04:	819a      	strh	r2, [r3, #12]
			break;
 8004e06:	e003      	b.n	8004e10 <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
			break;
 8004e0e:	bf00      	nop
	}

	return flash_info;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a09      	ldr	r2, [pc, #36]	@ (8004e38 <sFLASH_GetInfo+0x164>)
 8004e14:	461c      	mov	r4, r3
 8004e16:	4613      	mov	r3, r2
 8004e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
 8004e26:	bf00      	nop
 8004e28:	00c22016 	.word	0x00c22016
 8004e2c:	00ef4018 	.word	0x00ef4018
 8004e30:	00ef4015 	.word	0x00ef4015
 8004e34:	ff10bfeb 	.word	0xff10bfeb
 8004e38:	200004f4 	.word	0x200004f4
 8004e3c:	00ef4016 	.word	0x00ef4016
 8004e40:	00ef4017 	.word	0x00ef4017

08004e44 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8004e48:	4b02      	ldr	r3, [pc, #8]	@ (8004e54 <sFLASH_CS_LOW+0x10>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4798      	blx	r3

}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200004e0 	.word	0x200004e0

08004e58 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8004e5c:	4b02      	ldr	r3, [pc, #8]	@ (8004e68 <sFLASH_CS_HIGH+0x10>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	4798      	blx	r3
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200004e0 	.word	0x200004e0

08004e6c <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8004e74:	f000 f9b4 	bl	80051e0 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004e78:	f7ff ffe4 	bl	8004e44 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8004e7c:	2020      	movs	r0, #32
 8004e7e:	f000 f99f 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f999 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f993 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f98e 	bl	80051c0 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004ea4:	f7ff ffd8 	bl	8004e58 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8004ea8:	f000 f9a5 	bl	80051f6 <sFLASH_WaitForWriteEnd>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8004ec2:	f000 f98d 	bl	80051e0 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004ec6:	f7ff ffbd 	bl	8004e44 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8004eca:	2002      	movs	r0, #2
 8004ecc:	f000 f978 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f972 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f96c 	bl	80051c0 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f967 	bl	80051c0 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8004ef2:	e007      	b.n	8004f04 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f961 	bl	80051c0 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	80fa      	strh	r2, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f2      	bne.n	8004ef4 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004f0e:	f7ff ffa3 	bl	8004e58 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8004f12:	f000 f970 	bl	80051f6 <sFLASH_WaitForWriteEnd>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
 8004f30:	2300      	movs	r3, #0
 8004f32:	75bb      	strb	r3, [r7, #22]
 8004f34:	2300      	movs	r3, #0
 8004f36:	757b      	strb	r3, [r7, #21]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	753b      	strb	r3, [r7, #20]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8004f44:	7d7b      	ldrb	r3, [r7, #21]
 8004f46:	425b      	negs	r3, r3
 8004f48:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8004f56:	7d7b      	ldrb	r3, [r7, #21]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d124      	bne.n	8004fa6 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d114      	bne.n	8004f8c <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	461a      	mov	r2, r3
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff ffa3 	bl	8004eb4 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8004f6e:	e07b      	b.n	8005068 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8004f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff ff9c 	bl	8004eb4 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f82:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f8a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	1e5a      	subs	r2, r3, #1
 8004f90:	75fa      	strb	r2, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ec      	bne.n	8004f70 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8004f96:	7dbb      	ldrb	r3, [r7, #22]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff ff88 	bl	8004eb4 <sFLASH_WritePage>
}
 8004fa4:	e060      	b.n	8005068 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d125      	bne.n	8004ff8 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8004fac:	7dba      	ldrb	r2, [r7, #22]
 8004fae:	7d3b      	ldrb	r3, [r7, #20]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d91a      	bls.n	8004fea <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8004fb4:	7dba      	ldrb	r2, [r7, #22]
 8004fb6:	7d3b      	ldrb	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8004fbc:	7d3b      	ldrb	r3, [r7, #20]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff ff75 	bl	8004eb4 <sFLASH_WritePage>
        WriteAddr +=  count;
 8004fca:	7d3b      	ldrb	r3, [r7, #20]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8004fd2:	7d3b      	ldrb	r3, [r7, #20]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff ff66 	bl	8004eb4 <sFLASH_WritePage>
}
 8004fe8:	e03e      	b.n	8005068 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	461a      	mov	r2, r3
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff ff5f 	bl	8004eb4 <sFLASH_WritePage>
}
 8004ff6:	e037      	b.n	8005068 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8004ff8:	7d3b      	ldrb	r3, [r7, #20]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	b29b      	uxth	r3, r3
 8005008:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800500e:	7d3b      	ldrb	r3, [r7, #20]
 8005010:	b29b      	uxth	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ff4c 	bl	8004eb4 <sFLASH_WritePage>
      WriteAddr +=  count;
 800501c:	7d3b      	ldrb	r3, [r7, #20]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8005024:	7d3b      	ldrb	r3, [r7, #20]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800502c:	e00d      	b.n	800504a <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800502e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff ff3d 	bl	8004eb4 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005040:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005048:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	75fa      	strb	r2, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ec      	bne.n	800502e <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8005054:	7dbb      	ldrb	r3, [r7, #22]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800505a:	7dbb      	ldrb	r3, [r7, #22]
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff26 	bl	8004eb4 <sFLASH_WritePage>
}
 8005068:	bf00      	nop
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800507e:	f7ff fee1 	bl	8004e44 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d91c      	bls.n	80050c2 <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8005088:	200b      	movs	r0, #11
 800508a:	f000 f899 	bl	80051c0 <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	b2db      	uxtb	r3, r3
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f893 	bl	80051c0 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f88d 	bl	80051c0 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f888 	bl	80051c0 <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 80050b0:	2000      	movs	r0, #0
 80050b2:	f000 f885 	bl	80051c0 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	4619      	mov	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f86e 	bl	800519c <sFLASH_SPI_ReadBuffer>
 80050c0:	e022      	b.n	8005108 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 80050c2:	2003      	movs	r0, #3
 80050c4:	f000 f87c 	bl	80051c0 <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f876 	bl	80051c0 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f870 	bl	80051c0 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f86b 	bl	80051c0 <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 80050ea:	e008      	b.n	80050fe <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 80050ec:	f000 f846 	bl	800517c <sFLASH_ReadByte>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	80fa      	strh	r2, [r7, #6]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f1      	bne.n	80050ec <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005108:	f7ff fea6 	bl	8004e58 <sFLASH_CS_HIGH>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	2300      	movs	r3, #0
 8005128:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800512a:	f7ff fe8b 	bl	8004e44 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 800512e:	f7ff fe93 	bl	8004e58 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8005132:	f7ff fe87 	bl	8004e44 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8005136:	f7ff fe8f 	bl	8004e58 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 800513a:	f7ff fe83 	bl	8004e44 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 800513e:	209f      	movs	r0, #159	@ 0x9f
 8005140:	f000 f83e 	bl	80051c0 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8005144:	f000 f81a 	bl	800517c <sFLASH_ReadByte>
 8005148:	4603      	mov	r3, r0
 800514a:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 800514c:	f000 f816 	bl	800517c <sFLASH_ReadByte>
 8005150:	4603      	mov	r3, r0
 8005152:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8005154:	f000 f812 	bl	800517c <sFLASH_ReadByte>
 8005158:	4603      	mov	r3, r0
 800515a:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800515c:	f7ff fe7c 	bl	8004e58 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	041a      	lsls	r2, r3, #16
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	4313      	orrs	r3, r2
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  return Temp;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 8005182:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <sFLASH_ReadByte+0x1c>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	1dfa      	adds	r2, r7, #7
 8005188:	2101      	movs	r1, #1
 800518a:	4610      	mov	r0, r2
 800518c:	4798      	blx	r3
	return byte;
 800518e:	79fb      	ldrb	r3, [r7, #7]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	200004e0 	.word	0x200004e0

0800519c <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 80051a8:	4b04      	ldr	r3, [pc, #16]	@ (80051bc <sFLASH_SPI_ReadBuffer+0x20>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	4611      	mov	r1, r2
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200004e0 	.word	0x200004e0

080051c0 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 80051ca:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <sFLASH_SendByte+0x1c>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	79fa      	ldrb	r2, [r7, #7]
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	200004e0 	.word	0x200004e0

080051e0 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80051e4:	f7ff fe2e 	bl	8004e44 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80051e8:	2006      	movs	r0, #6
 80051ea:	f7ff ffe9 	bl	80051c0 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80051ee:	f7ff fe33 	bl	8004e58 <sFLASH_CS_HIGH>
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005200:	f7ff fe20 	bl	8004e44 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8005204:	2005      	movs	r0, #5
 8005206:	f7ff ffdb 	bl	80051c0 <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 800520a:	2005      	movs	r0, #5
 800520c:	f7ff ffd8 	bl	80051c0 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8005210:	f7ff ffb4 	bl	800517c <sFLASH_ReadByte>
 8005214:	4603      	mov	r3, r0
 8005216:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f3      	bne.n	800520a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005222:	f7ff fe19 	bl	8004e58 <sFLASH_CS_HIGH>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005234:	4b0e      	ldr	r3, [pc, #56]	@ (8005270 <HAL_Init+0x40>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a0d      	ldr	r2, [pc, #52]	@ (8005270 <HAL_Init+0x40>)
 800523a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800523e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_Init+0x40>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <HAL_Init+0x40>)
 8005246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800524a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800524c:	4b08      	ldr	r3, [pc, #32]	@ (8005270 <HAL_Init+0x40>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a07      	ldr	r2, [pc, #28]	@ (8005270 <HAL_Init+0x40>)
 8005252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005258:	2003      	movs	r0, #3
 800525a:	f000 f913 	bl	8005484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800525e:	200f      	movs	r0, #15
 8005260:	f7fd f804 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005264:	f7fc ffd6 	bl	8002214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40023c00 	.word	0x40023c00

08005274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_IncTick+0x20>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <HAL_IncTick+0x24>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4413      	add	r3, r2
 8005284:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <HAL_IncTick+0x24>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000074 	.word	0x20000074
 8005298:	20000504 	.word	0x20000504

0800529c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return uwTick;
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <HAL_GetTick+0x14>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000504 	.word	0x20000504

080052b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052bc:	f7ff ffee 	bl	800529c <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052cc:	d005      	beq.n	80052da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ce:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <HAL_Delay+0x44>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052da:	bf00      	nop
 80052dc:	f7ff ffde 	bl	800529c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d8f7      	bhi.n	80052dc <HAL_Delay+0x28>
  {
  }
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000074 	.word	0x20000074

080052fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800530c:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <__NVIC_SetPriorityGrouping+0x44>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800532e:	4a04      	ldr	r2, [pc, #16]	@ (8005340 <__NVIC_SetPriorityGrouping+0x44>)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	60d3      	str	r3, [r2, #12]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000ed00 	.word	0xe000ed00

08005344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005348:	4b04      	ldr	r3, [pc, #16]	@ (800535c <__NVIC_GetPriorityGrouping+0x18>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	f003 0307 	and.w	r3, r3, #7
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	e000ed00 	.word	0xe000ed00

08005360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	2b00      	cmp	r3, #0
 8005370:	db0b      	blt.n	800538a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	f003 021f 	and.w	r2, r3, #31
 8005378:	4907      	ldr	r1, [pc, #28]	@ (8005398 <__NVIC_EnableIRQ+0x38>)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2001      	movs	r0, #1
 8005382:	fa00 f202 	lsl.w	r2, r0, r2
 8005386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	e000e100 	.word	0xe000e100

0800539c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db0a      	blt.n	80053c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	490c      	ldr	r1, [pc, #48]	@ (80053e8 <__NVIC_SetPriority+0x4c>)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	0112      	lsls	r2, r2, #4
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	440b      	add	r3, r1
 80053c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c4:	e00a      	b.n	80053dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4908      	ldr	r1, [pc, #32]	@ (80053ec <__NVIC_SetPriority+0x50>)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	3b04      	subs	r3, #4
 80053d4:	0112      	lsls	r2, r2, #4
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	440b      	add	r3, r1
 80053da:	761a      	strb	r2, [r3, #24]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000e100 	.word	0xe000e100
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f1c3 0307 	rsb	r3, r3, #7
 800540a:	2b04      	cmp	r3, #4
 800540c:	bf28      	it	cs
 800540e:	2304      	movcs	r3, #4
 8005410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3304      	adds	r3, #4
 8005416:	2b06      	cmp	r3, #6
 8005418:	d902      	bls.n	8005420 <NVIC_EncodePriority+0x30>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3b03      	subs	r3, #3
 800541e:	e000      	b.n	8005422 <NVIC_EncodePriority+0x32>
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43da      	mvns	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	401a      	ands	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005438:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43d9      	mvns	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005448:	4313      	orrs	r3, r2
         );
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	@ 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800545c:	f3bf 8f4f 	dsb	sy
}
 8005460:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <__NVIC_SystemReset+0x24>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800546a:	4904      	ldr	r1, [pc, #16]	@ (800547c <__NVIC_SystemReset+0x24>)
 800546c:	4b04      	ldr	r3, [pc, #16]	@ (8005480 <__NVIC_SystemReset+0x28>)
 800546e:	4313      	orrs	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005472:	f3bf 8f4f 	dsb	sy
}
 8005476:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <__NVIC_SystemReset+0x20>
 800547c:	e000ed00 	.word	0xe000ed00
 8005480:	05fa0004 	.word	0x05fa0004

08005484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ff35 	bl	80052fc <__NVIC_SetPriorityGrouping>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054ac:	f7ff ff4a 	bl	8005344 <__NVIC_GetPriorityGrouping>
 80054b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff ff9a 	bl	80053f0 <NVIC_EncodePriority>
 80054bc:	4602      	mov	r2, r0
 80054be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff69 	bl	800539c <__NVIC_SetPriority>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	4603      	mov	r3, r0
 80054da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff3d 	bl	8005360 <__NVIC_EnableIRQ>
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80054f2:	f7ff ffb1 	bl	8005458 <__NVIC_SystemReset>
	...

080054f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b089      	sub	sp, #36	@ 0x24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e159      	b.n	80057c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005514:	2201      	movs	r2, #1
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4013      	ands	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	429a      	cmp	r2, r3
 800552e:	f040 8148 	bne.w	80057c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d005      	beq.n	800554a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005546:	2b02      	cmp	r3, #2
 8005548:	d130      	bne.n	80055ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2203      	movs	r2, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005580:	2201      	movs	r2, #1
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 0201 	and.w	r2, r3, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d017      	beq.n	80055e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2203      	movs	r2, #3
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d123      	bne.n	800563c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	08da      	lsrs	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3208      	adds	r2, #8
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	220f      	movs	r2, #15
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	08da      	lsrs	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3208      	adds	r2, #8
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 0203 	and.w	r2, r3, #3
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4313      	orrs	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80a2 	beq.w	80057c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	4b57      	ldr	r3, [pc, #348]	@ (80057e0 <HAL_GPIO_Init+0x2e8>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	4a56      	ldr	r2, [pc, #344]	@ (80057e0 <HAL_GPIO_Init+0x2e8>)
 8005688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800568c:	6453      	str	r3, [r2, #68]	@ 0x44
 800568e:	4b54      	ldr	r3, [pc, #336]	@ (80057e0 <HAL_GPIO_Init+0x2e8>)
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800569a:	4a52      	ldr	r2, [pc, #328]	@ (80057e4 <HAL_GPIO_Init+0x2ec>)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	089b      	lsrs	r3, r3, #2
 80056a0:	3302      	adds	r3, #2
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	220f      	movs	r2, #15
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a49      	ldr	r2, [pc, #292]	@ (80057e8 <HAL_GPIO_Init+0x2f0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d019      	beq.n	80056fa <HAL_GPIO_Init+0x202>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a48      	ldr	r2, [pc, #288]	@ (80057ec <HAL_GPIO_Init+0x2f4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_GPIO_Init+0x1fe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a47      	ldr	r2, [pc, #284]	@ (80057f0 <HAL_GPIO_Init+0x2f8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00d      	beq.n	80056f2 <HAL_GPIO_Init+0x1fa>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a46      	ldr	r2, [pc, #280]	@ (80057f4 <HAL_GPIO_Init+0x2fc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <HAL_GPIO_Init+0x1f6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a45      	ldr	r2, [pc, #276]	@ (80057f8 <HAL_GPIO_Init+0x300>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_GPIO_Init+0x1f2>
 80056e6:	2304      	movs	r3, #4
 80056e8:	e008      	b.n	80056fc <HAL_GPIO_Init+0x204>
 80056ea:	2307      	movs	r3, #7
 80056ec:	e006      	b.n	80056fc <HAL_GPIO_Init+0x204>
 80056ee:	2303      	movs	r3, #3
 80056f0:	e004      	b.n	80056fc <HAL_GPIO_Init+0x204>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e002      	b.n	80056fc <HAL_GPIO_Init+0x204>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <HAL_GPIO_Init+0x204>
 80056fa:	2300      	movs	r3, #0
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	f002 0203 	and.w	r2, r2, #3
 8005702:	0092      	lsls	r2, r2, #2
 8005704:	4093      	lsls	r3, r2
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800570c:	4935      	ldr	r1, [pc, #212]	@ (80057e4 <HAL_GPIO_Init+0x2ec>)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	089b      	lsrs	r3, r3, #2
 8005712:	3302      	adds	r3, #2
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800571a:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <HAL_GPIO_Init+0x304>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800573e:	4a2f      	ldr	r2, [pc, #188]	@ (80057fc <HAL_GPIO_Init+0x304>)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005744:	4b2d      	ldr	r3, [pc, #180]	@ (80057fc <HAL_GPIO_Init+0x304>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005768:	4a24      	ldr	r2, [pc, #144]	@ (80057fc <HAL_GPIO_Init+0x304>)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800576e:	4b23      	ldr	r3, [pc, #140]	@ (80057fc <HAL_GPIO_Init+0x304>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005792:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <HAL_GPIO_Init+0x304>)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005798:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <HAL_GPIO_Init+0x304>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4013      	ands	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057bc:	4a0f      	ldr	r2, [pc, #60]	@ (80057fc <HAL_GPIO_Init+0x304>)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	f67f aea2 	bls.w	8005514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3724      	adds	r7, #36	@ 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40013800 	.word	0x40013800
 80057e8:	40020000 	.word	0x40020000
 80057ec:	40020400 	.word	0x40020400
 80057f0:	40020800 	.word	0x40020800
 80057f4:	40020c00 	.word	0x40020c00
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40013c00 	.word	0x40013c00

08005800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e0bb      	b.n	8005994 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800581c:	2201      	movs	r2, #1
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4013      	ands	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	f040 80ab 	bne.w	800598e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005838:	4a5c      	ldr	r2, [pc, #368]	@ (80059ac <HAL_GPIO_DeInit+0x1ac>)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	3302      	adds	r3, #2
 8005840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005844:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a54      	ldr	r2, [pc, #336]	@ (80059b0 <HAL_GPIO_DeInit+0x1b0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d019      	beq.n	8005896 <HAL_GPIO_DeInit+0x96>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a53      	ldr	r2, [pc, #332]	@ (80059b4 <HAL_GPIO_DeInit+0x1b4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_GPIO_DeInit+0x92>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a52      	ldr	r2, [pc, #328]	@ (80059b8 <HAL_GPIO_DeInit+0x1b8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00d      	beq.n	800588e <HAL_GPIO_DeInit+0x8e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a51      	ldr	r2, [pc, #324]	@ (80059bc <HAL_GPIO_DeInit+0x1bc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <HAL_GPIO_DeInit+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a50      	ldr	r2, [pc, #320]	@ (80059c0 <HAL_GPIO_DeInit+0x1c0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <HAL_GPIO_DeInit+0x86>
 8005882:	2304      	movs	r3, #4
 8005884:	e008      	b.n	8005898 <HAL_GPIO_DeInit+0x98>
 8005886:	2307      	movs	r3, #7
 8005888:	e006      	b.n	8005898 <HAL_GPIO_DeInit+0x98>
 800588a:	2303      	movs	r3, #3
 800588c:	e004      	b.n	8005898 <HAL_GPIO_DeInit+0x98>
 800588e:	2302      	movs	r3, #2
 8005890:	e002      	b.n	8005898 <HAL_GPIO_DeInit+0x98>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <HAL_GPIO_DeInit+0x98>
 8005896:	2300      	movs	r3, #0
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	f002 0203 	and.w	r2, r2, #3
 800589e:	0092      	lsls	r2, r2, #2
 80058a0:	4093      	lsls	r3, r2
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d132      	bne.n	800590e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80058a8:	4b46      	ldr	r3, [pc, #280]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	4944      	ldr	r1, [pc, #272]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80058b6:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	43db      	mvns	r3, r3
 80058be:	4941      	ldr	r1, [pc, #260]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80058c4:	4b3f      	ldr	r3, [pc, #252]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	493d      	ldr	r1, [pc, #244]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	43db      	mvns	r3, r3
 80058da:	493a      	ldr	r1, [pc, #232]	@ (80059c4 <HAL_GPIO_DeInit+0x1c4>)
 80058dc:	4013      	ands	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	220f      	movs	r2, #15
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <HAL_GPIO_DeInit+0x1ac>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	43da      	mvns	r2, r3
 8005900:	482a      	ldr	r0, [pc, #168]	@ (80059ac <HAL_GPIO_DeInit+0x1ac>)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	400a      	ands	r2, r1
 8005908:	3302      	adds	r3, #2
 800590a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2103      	movs	r1, #3
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	401a      	ands	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	220f      	movs	r2, #15
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	08d2      	lsrs	r2, r2, #3
 8005944:	4019      	ands	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3208      	adds	r2, #8
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2103      	movs	r1, #3
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	2101      	movs	r1, #1
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	2103      	movs	r1, #3
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	401a      	ands	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	f67f af40 	bls.w	800581c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40020000 	.word	0x40020000
 80059b4:	40020400 	.word	0x40020400
 80059b8:	40020800 	.word	0x40020800
 80059bc:	40020c00 	.word	0x40020c00
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40013c00 	.word	0x40013c00

080059c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a14:	e003      	b.n	8005a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	041a      	lsls	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	619a      	str	r2, [r3, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e12b      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc f9a2 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	@ 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a90:	f001 fa38 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a81      	ldr	r2, [pc, #516]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d807      	bhi.n	8005ab0 <HAL_I2C_Init+0x84>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a80      	ldr	r2, [pc, #512]	@ (8005ca4 <HAL_I2C_Init+0x278>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bf94      	ite	ls
 8005aa8:	2301      	movls	r3, #1
 8005aaa:	2300      	movhi	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e006      	b.n	8005abe <HAL_I2C_Init+0x92>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca8 <HAL_I2C_Init+0x27c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bf94      	ite	ls
 8005ab8:	2301      	movls	r3, #1
 8005aba:	2300      	movhi	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0e7      	b.n	8005c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a78      	ldr	r2, [pc, #480]	@ (8005cac <HAL_I2C_Init+0x280>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d802      	bhi.n	8005b00 <HAL_I2C_Init+0xd4>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e009      	b.n	8005b14 <HAL_I2C_Init+0xe8>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	4a69      	ldr	r2, [pc, #420]	@ (8005cb0 <HAL_I2C_Init+0x284>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	3301      	adds	r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	495c      	ldr	r1, [pc, #368]	@ (8005ca0 <HAL_I2C_Init+0x274>)
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d819      	bhi.n	8005b68 <HAL_I2C_Init+0x13c>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1e59      	subs	r1, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b48:	400b      	ands	r3, r1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_I2C_Init+0x138>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1e59      	subs	r1, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	e051      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b64:	2304      	movs	r3, #4
 8005b66:	e04f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d111      	bne.n	8005b94 <HAL_I2C_Init+0x168>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e012      	b.n	8005bba <HAL_I2C_Init+0x18e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e58      	subs	r0, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	0099      	lsls	r1, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Init+0x196>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e022      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10e      	bne.n	8005be8 <HAL_I2C_Init+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1e58      	subs	r0, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	440b      	add	r3, r1
 8005bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Init+0x1dc>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	0099      	lsls	r1, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	6809      	ldr	r1, [r1, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6911      	ldr	r1, [r2, #16]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	000186a0 	.word	0x000186a0
 8005ca4:	001e847f 	.word	0x001e847f
 8005ca8:	003d08ff 	.word	0x003d08ff
 8005cac:	431bde83 	.word	0x431bde83
 8005cb0:	10624dd3 	.word	0x10624dd3

08005cb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e021      	b.n	8005d0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fc f8a4 	bl	8001e2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	460b      	mov	r3, r1
 8005d22:	817b      	strh	r3, [r7, #10]
 8005d24:	4613      	mov	r3, r2
 8005d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d28:	f7ff fab8 	bl	800529c <HAL_GetTick>
 8005d2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	f040 80e0 	bne.w	8005efc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2319      	movs	r3, #25
 8005d42:	2201      	movs	r2, #1
 8005d44:	4970      	ldr	r1, [pc, #448]	@ (8005f08 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa92 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d52:	2302      	movs	r3, #2
 8005d54:	e0d3      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_I2C_Master_Transmit+0x50>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e0cc      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d007      	beq.n	8005d8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2221      	movs	r2, #33	@ 0x21
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2210      	movs	r2, #16
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	893a      	ldrh	r2, [r7, #8]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a50      	ldr	r2, [pc, #320]	@ (8005f0c <HAL_I2C_Master_Transmit+0x1f8>)
 8005dca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005dcc:	8979      	ldrh	r1, [r7, #10]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9ca 	bl	800616c <I2C_MasterRequestWrite>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e08d      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005df8:	e066      	b.n	8005ec8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	6a39      	ldr	r1, [r7, #32]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fb50 	bl	80064a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d107      	bne.n	8005e22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e06b      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11b      	bne.n	8005e9c <HAL_I2C_Master_Transmit+0x188>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	6a39      	ldr	r1, [r7, #32]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fb47 	bl	8006534 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d107      	bne.n	8005ec4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e01a      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d194      	bne.n	8005dfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	00100002 	.word	0x00100002
 8005f0c:	ffff0000 	.word	0xffff0000

08005f10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7ff f9bc 	bl	800529c <HAL_GetTick>
 8005f24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	f040 8111 	bne.w	800615a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2319      	movs	r3, #25
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4988      	ldr	r1, [pc, #544]	@ (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f994 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e104      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_I2C_IsDeviceReady+0x50>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e0fd      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d007      	beq.n	8005f86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2224      	movs	r2, #36	@ 0x24
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a70      	ldr	r2, [pc, #448]	@ (8006168 <HAL_I2C_IsDeviceReady+0x258>)
 8005fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f952 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe0:	d103      	bne.n	8005fea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0b6      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fee:	897b      	ldrh	r3, [r7, #10]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ffc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005ffe:	f7ff f94d 	bl	800529c <HAL_GetTick>
 8006002:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	bf0c      	ite	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	2300      	movne	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006032:	e025      	b.n	8006080 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7ff f932 	bl	800529c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <HAL_I2C_IsDeviceReady+0x13a>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22a0      	movs	r2, #160	@ 0xa0
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2ba0      	cmp	r3, #160	@ 0xa0
 800608a:	d005      	beq.n	8006098 <HAL_I2C_IsDeviceReady+0x188>
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <HAL_I2C_IsDeviceReady+0x188>
 8006092:	7dbb      	ldrb	r3, [r7, #22]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0cd      	beq.n	8006034 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d129      	bne.n	8006102 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2319      	movs	r3, #25
 80060da:	2201      	movs	r2, #1
 80060dc:	4921      	ldr	r1, [pc, #132]	@ (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f8c6 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e036      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e02c      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006110:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800611a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2319      	movs	r3, #25
 8006122:	2201      	movs	r2, #1
 8006124:	490f      	ldr	r1, [pc, #60]	@ (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f8a2 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e012      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	3301      	adds	r3, #1
 800613a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	f4ff af32 	bcc.w	8005faa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00100002 	.word	0x00100002
 8006168:	ffff0000 	.word	0xffff0000

0800616c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	460b      	mov	r3, r1
 800617a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d006      	beq.n	8006196 <I2C_MasterRequestWrite+0x2a>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d003      	beq.n	8006196 <I2C_MasterRequestWrite+0x2a>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006194:	d108      	bne.n	80061a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e00b      	b.n	80061c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	2b12      	cmp	r3, #18
 80061ae:	d107      	bne.n	80061c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f84f 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d103      	bne.n	80061f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e035      	b.n	8006260 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061fc:	d108      	bne.n	8006210 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800620c:	611a      	str	r2, [r3, #16]
 800620e:	e01b      	b.n	8006248 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006210:	897b      	ldrh	r3, [r7, #10]
 8006212:	11db      	asrs	r3, r3, #7
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0306 	and.w	r3, r3, #6
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f063 030f 	orn	r3, r3, #15
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <I2C_MasterRequestWrite+0xfc>)
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f898 	bl	8006364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e010      	b.n	8006260 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4907      	ldr	r1, [pc, #28]	@ (800626c <I2C_MasterRequestWrite+0x100>)
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f888 	bl	8006364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	00010008 	.word	0x00010008
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006280:	e048      	b.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006288:	d044      	beq.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7ff f807 	bl	800529c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d139      	bne.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10d      	bne.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	43da      	mvns	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	e00c      	b.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	43da      	mvns	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d116      	bne.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e023      	b.n	800635c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10d      	bne.n	800633a <I2C_WaitOnFlagUntilTimeout+0xca>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	43da      	mvns	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	e00c      	b.n	8006354 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	43da      	mvns	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	429a      	cmp	r2, r3
 8006358:	d093      	beq.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006372:	e071      	b.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006382:	d123      	bne.n	80063cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006392:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800639c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b8:	f043 0204 	orr.w	r2, r3, #4
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e067      	b.n	800649c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d2:	d041      	beq.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d4:	f7fe ff62 	bl	800529c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d136      	bne.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10c      	bne.n	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	43da      	mvns	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e00b      	b.n	8006426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	43da      	mvns	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4013      	ands	r3, r2
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006444:	f043 0220 	orr.w	r2, r3, #32
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e021      	b.n	800649c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	0c1b      	lsrs	r3, r3, #16
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10c      	bne.n	800647c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	43da      	mvns	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e00b      	b.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	43da      	mvns	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	bf14      	ite	ne
 800648e:	2301      	movne	r3, #1
 8006490:	2300      	moveq	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	f47f af6d 	bne.w	8006374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064b0:	e034      	b.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f886 	bl	80065c4 <I2C_IsAcknowledgeFailed>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e034      	b.n	800652c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c8:	d028      	beq.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fe fee7 	bl	800529c <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11d      	bne.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ea:	2b80      	cmp	r3, #128	@ 0x80
 80064ec:	d016      	beq.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e007      	b.n	800652c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d1c3      	bne.n	80064b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006540:	e034      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f83e 	bl	80065c4 <I2C_IsAcknowledgeFailed>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e034      	b.n	80065bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006558:	d028      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fe fe9f 	bl	800529c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11d      	bne.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d016      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e007      	b.n	80065bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d1c3      	bne.n	8006542 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065da:	d11b      	bne.n	8006614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	f043 0204 	orr.w	r2, r3, #4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e267      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d075      	beq.n	800672e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006642:	4b88      	ldr	r3, [pc, #544]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	2b04      	cmp	r3, #4
 800664c:	d00c      	beq.n	8006668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800664e:	4b85      	ldr	r3, [pc, #532]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006656:	2b08      	cmp	r3, #8
 8006658:	d112      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800665a:	4b82      	ldr	r3, [pc, #520]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006666:	d10b      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	4b7e      	ldr	r3, [pc, #504]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05b      	beq.n	800672c <HAL_RCC_OscConfig+0x108>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d157      	bne.n	800672c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e242      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d106      	bne.n	8006698 <HAL_RCC_OscConfig+0x74>
 800668a:	4b76      	ldr	r3, [pc, #472]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a75      	ldr	r2, [pc, #468]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e01d      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a0:	d10c      	bne.n	80066bc <HAL_RCC_OscConfig+0x98>
 80066a2:	4b70      	ldr	r3, [pc, #448]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a6f      	ldr	r2, [pc, #444]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 80066bc:	4b69      	ldr	r3, [pc, #420]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a68      	ldr	r2, [pc, #416]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b66      	ldr	r3, [pc, #408]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a65      	ldr	r2, [pc, #404]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d013      	beq.n	8006704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fe fdde 	bl	800529c <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fe fdda 	bl	800529c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e207      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCC_OscConfig+0xc0>
 8006702:	e014      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006704:	f7fe fdca 	bl	800529c <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800670c:	f7fe fdc6 	bl	800529c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1f3      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800671e:	4b51      	ldr	r3, [pc, #324]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0xe8>
 800672a:	e000      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800672c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d063      	beq.n	8006802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800673a:	4b4a      	ldr	r3, [pc, #296]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006746:	4b47      	ldr	r3, [pc, #284]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800674e:	2b08      	cmp	r3, #8
 8006750:	d11c      	bne.n	800678c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006752:	4b44      	ldr	r3, [pc, #272]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800675e:	4b41      	ldr	r3, [pc, #260]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_RCC_OscConfig+0x152>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e1c7      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006776:	4b3b      	ldr	r3, [pc, #236]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4937      	ldr	r1, [pc, #220]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006786:	4313      	orrs	r3, r2
 8006788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678a:	e03a      	b.n	8006802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d020      	beq.n	80067d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006794:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <HAL_RCC_OscConfig+0x244>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679a:	f7fe fd7f 	bl	800529c <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a2:	f7fe fd7b 	bl	800529c <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e1a8      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c0:	4b28      	ldr	r3, [pc, #160]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	4925      	ldr	r1, [pc, #148]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	600b      	str	r3, [r1, #0]
 80067d4:	e015      	b.n	8006802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067d6:	4b24      	ldr	r3, [pc, #144]	@ (8006868 <HAL_RCC_OscConfig+0x244>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fe fd5e 	bl	800529c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e4:	f7fe fd5a 	bl	800529c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e187      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d036      	beq.n	800687c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006816:	4b15      	ldr	r3, [pc, #84]	@ (800686c <HAL_RCC_OscConfig+0x248>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fe fd3e 	bl	800529c <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006824:	f7fe fd3a 	bl	800529c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e167      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <HAL_RCC_OscConfig+0x240>)
 8006838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0x200>
 8006842:	e01b      	b.n	800687c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006844:	4b09      	ldr	r3, [pc, #36]	@ (800686c <HAL_RCC_OscConfig+0x248>)
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684a:	f7fe fd27 	bl	800529c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006850:	e00e      	b.n	8006870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006852:	f7fe fd23 	bl	800529c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d907      	bls.n	8006870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e150      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
 8006864:	40023800 	.word	0x40023800
 8006868:	42470000 	.word	0x42470000
 800686c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006870:	4b88      	ldr	r3, [pc, #544]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1ea      	bne.n	8006852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8097 	beq.w	80069b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688e:	4b81      	ldr	r3, [pc, #516]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10f      	bne.n	80068ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80068a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80068aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	60bb      	str	r3, [r7, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ba:	4b77      	ldr	r3, [pc, #476]	@ (8006a98 <HAL_RCC_OscConfig+0x474>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d118      	bne.n	80068f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068c6:	4b74      	ldr	r3, [pc, #464]	@ (8006a98 <HAL_RCC_OscConfig+0x474>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a73      	ldr	r2, [pc, #460]	@ (8006a98 <HAL_RCC_OscConfig+0x474>)
 80068cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d2:	f7fe fce3 	bl	800529c <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068da:	f7fe fcdf 	bl	800529c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e10c      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006a98 <HAL_RCC_OscConfig+0x474>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d106      	bne.n	800690e <HAL_RCC_OscConfig+0x2ea>
 8006900:	4b64      	ldr	r3, [pc, #400]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006904:	4a63      	ldr	r2, [pc, #396]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	6713      	str	r3, [r2, #112]	@ 0x70
 800690c:	e01c      	b.n	8006948 <HAL_RCC_OscConfig+0x324>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b05      	cmp	r3, #5
 8006914:	d10c      	bne.n	8006930 <HAL_RCC_OscConfig+0x30c>
 8006916:	4b5f      	ldr	r3, [pc, #380]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	4a5e      	ldr	r2, [pc, #376]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 800691c:	f043 0304 	orr.w	r3, r3, #4
 8006920:	6713      	str	r3, [r2, #112]	@ 0x70
 8006922:	4b5c      	ldr	r3, [pc, #368]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	4a5b      	ldr	r2, [pc, #364]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6713      	str	r3, [r2, #112]	@ 0x70
 800692e:	e00b      	b.n	8006948 <HAL_RCC_OscConfig+0x324>
 8006930:	4b58      	ldr	r3, [pc, #352]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	4a57      	ldr	r2, [pc, #348]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	6713      	str	r3, [r2, #112]	@ 0x70
 800693c:	4b55      	ldr	r3, [pc, #340]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006940:	4a54      	ldr	r2, [pc, #336]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 0304 	bic.w	r3, r3, #4
 8006946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fe fca4 	bl	800529c <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006956:	e00a      	b.n	800696e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fe fca0 	bl	800529c <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e0cb      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696e:	4b49      	ldr	r3, [pc, #292]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0ee      	beq.n	8006958 <HAL_RCC_OscConfig+0x334>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697c:	f7fe fc8e 	bl	800529c <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006982:	e00a      	b.n	800699a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006984:	f7fe fc8a 	bl	800529c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e0b5      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800699a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1ee      	bne.n	8006984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d105      	bne.n	80069b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ac:	4b39      	ldr	r3, [pc, #228]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	4a38      	ldr	r2, [pc, #224]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80069b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80a1 	beq.w	8006b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069c2:	4b34      	ldr	r3, [pc, #208]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d05c      	beq.n	8006a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d141      	bne.n	8006a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d6:	4b31      	ldr	r3, [pc, #196]	@ (8006a9c <HAL_RCC_OscConfig+0x478>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fe fc5e 	bl	800529c <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fe fc5a 	bl	800529c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e087      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	4b27      	ldr	r3, [pc, #156]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	019b      	lsls	r3, r3, #6
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	491b      	ldr	r1, [pc, #108]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a9c <HAL_RCC_OscConfig+0x478>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7fe fc33 	bl	800529c <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3a:	f7fe fc2f 	bl	800529c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e05c      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4c:	4b11      	ldr	r3, [pc, #68]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x416>
 8006a58:	e054      	b.n	8006b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a5a:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <HAL_RCC_OscConfig+0x478>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a60:	f7fe fc1c 	bl	800529c <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fe fc18 	bl	800529c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e045      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7a:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0x444>
 8006a86:	e03d      	b.n	8006b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d107      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e038      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
 8006a94:	40023800 	.word	0x40023800
 8006a98:	40007000 	.word	0x40007000
 8006a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <HAL_RCC_OscConfig+0x4ec>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d028      	beq.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d121      	bne.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d11a      	bne.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d111      	bne.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d107      	bne.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40023800 	.word	0x40023800

08006b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0cc      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b28:	4b68      	ldr	r3, [pc, #416]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d90c      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b36:	4b65      	ldr	r3, [pc, #404]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b63      	ldr	r3, [pc, #396]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0b8      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b68:	4b59      	ldr	r3, [pc, #356]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4a58      	ldr	r2, [pc, #352]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b80:	4b53      	ldr	r3, [pc, #332]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4a52      	ldr	r2, [pc, #328]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8c:	4b50      	ldr	r3, [pc, #320]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	494d      	ldr	r1, [pc, #308]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d044      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb2:	4b47      	ldr	r3, [pc, #284]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d119      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e07f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e06f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e067      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bf2:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4934      	ldr	r1, [pc, #208]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c04:	f7fe fb4a 	bl	800529c <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0c:	f7fe fb46 	bl	800529c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e04f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 020c 	and.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d1eb      	bne.n	8006c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c34:	4b25      	ldr	r3, [pc, #148]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d20c      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c42:	4b22      	ldr	r3, [pc, #136]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4a:	4b20      	ldr	r3, [pc, #128]	@ (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e032      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c68:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4916      	ldr	r1, [pc, #88]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c86:	4b12      	ldr	r3, [pc, #72]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	490e      	ldr	r1, [pc, #56]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c9a:	f000 f821 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	490a      	ldr	r1, [pc, #40]	@ (8006cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	5ccb      	ldrb	r3, [r1, r3]
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	4a09      	ldr	r2, [pc, #36]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cb6:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <HAL_RCC_ClockConfig+0x1c8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fad6 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40023c00 	.word	0x40023c00
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	08028aa8 	.word	0x08028aa8
 8006cd8:	20000004 	.word	0x20000004
 8006cdc:	20000070 	.word	0x20000070

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce4:	b094      	sub	sp, #80	@ 0x50
 8006ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf8:	4b79      	ldr	r3, [pc, #484]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d00d      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x40>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	f200 80e1 	bhi.w	8006ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x34>
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d003      	beq.n	8006d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d12:	e0db      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b73      	ldr	r3, [pc, #460]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d18:	e0db      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d1a:	4b73      	ldr	r3, [pc, #460]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d1e:	e0d8      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d20:	4b6f      	ldr	r3, [pc, #444]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d063      	beq.n	8006dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d36:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	099b      	lsrs	r3, r3, #6
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	f04f 0000 	mov.w	r0, #0
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	0159      	lsls	r1, r3, #5
 8006d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d64:	0150      	lsls	r0, r2, #5
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	1a51      	subs	r1, r2, r1
 8006d6e:	6139      	str	r1, [r7, #16]
 8006d70:	4629      	mov	r1, r5
 8006d72:	eb63 0301 	sbc.w	r3, r3, r1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d84:	4659      	mov	r1, fp
 8006d86:	018b      	lsls	r3, r1, #6
 8006d88:	4651      	mov	r1, sl
 8006d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d8e:	4651      	mov	r1, sl
 8006d90:	018a      	lsls	r2, r1, #6
 8006d92:	4651      	mov	r1, sl
 8006d94:	ebb2 0801 	subs.w	r8, r2, r1
 8006d98:	4659      	mov	r1, fp
 8006d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006db2:	4690      	mov	r8, r2
 8006db4:	4699      	mov	r9, r3
 8006db6:	4623      	mov	r3, r4
 8006db8:	eb18 0303 	adds.w	r3, r8, r3
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	462b      	mov	r3, r5
 8006dc0:	eb49 0303 	adc.w	r3, r9, r3
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	024b      	lsls	r3, r1, #9
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ddc:	4621      	mov	r1, r4
 8006dde:	024a      	lsls	r2, r1, #9
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de6:	2200      	movs	r2, #0
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006df0:	f7f9 fef6 	bl	8000be0 <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4613      	mov	r3, r2
 8006dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfc:	e058      	b.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dfe:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	099b      	lsrs	r3, r3, #6
 8006e04:	2200      	movs	r2, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	4611      	mov	r1, r2
 8006e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	2300      	movs	r3, #0
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	f04f 0000 	mov.w	r0, #0
 8006e20:	f04f 0100 	mov.w	r1, #0
 8006e24:	0159      	lsls	r1, r3, #5
 8006e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e2a:	0150      	lsls	r0, r2, #5
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4641      	mov	r1, r8
 8006e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e36:	4649      	mov	r1, r9
 8006e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e50:	ebb2 040a 	subs.w	r4, r2, sl
 8006e54:	eb63 050b 	sbc.w	r5, r3, fp
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	00eb      	lsls	r3, r5, #3
 8006e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e66:	00e2      	lsls	r2, r4, #3
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	18e3      	adds	r3, r4, r3
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	464b      	mov	r3, r9
 8006e74:	eb45 0303 	adc.w	r3, r5, r3
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e86:	4629      	mov	r1, r5
 8006e88:	028b      	lsls	r3, r1, #10
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e90:	4621      	mov	r1, r4
 8006e92:	028a      	lsls	r2, r1, #10
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	61fa      	str	r2, [r7, #28]
 8006ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea4:	f7f9 fe9c 	bl	8000be0 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	3301      	adds	r3, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3750      	adds	r7, #80	@ 0x50
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	007a1200 	.word	0x007a1200

08006eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000004 	.word	0x20000004

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	@ (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	08028ab8 	.word	0x08028ab8

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffdc 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0b5b      	lsrs	r3, r3, #13
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	@ (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08028ab8 	.word	0x08028ab8

08006f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220f      	movs	r2, #15
 8006f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f64:	4b12      	ldr	r3, [pc, #72]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0203 	and.w	r2, r3, #3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f70:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f88:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f96:	4b07      	ldr	r3, [pc, #28]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x60>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0207 	and.w	r2, r3, #7
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40023c00 	.word	0x40023c00

08006fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e07b      	b.n	80070c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d108      	bne.n	8006fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fda:	d009      	beq.n	8006ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	61da      	str	r2, [r3, #28]
 8006fe2:	e005      	b.n	8006ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fb f8ba 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007074:	ea42 0103 	orr.w	r1, r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	f003 0104 	and.w	r1, r3, #4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	f003 0210 	and.w	r2, r3, #16
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b088      	sub	sp, #32
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070da:	f7fe f8df 	bl	800529c <HAL_GetTick>
 80070de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d001      	beq.n	80070f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
 80070f2:	e12a      	b.n	800734a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_SPI_Transmit+0x36>
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e122      	b.n	800734a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Transmit+0x48>
 800710e:	2302      	movs	r3, #2
 8007110:	e11b      	b.n	800734a <HAL_SPI_Transmit+0x280>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2203      	movs	r2, #3
 800711e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007160:	d10f      	bne.n	8007182 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007180:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718c:	2b40      	cmp	r3, #64	@ 0x40
 800718e:	d007      	beq.n	80071a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800719e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a8:	d152      	bne.n	8007250 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_SPI_Transmit+0xee>
 80071b2:	8b7b      	ldrh	r3, [r7, #26]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d145      	bne.n	8007244 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071bc:	881a      	ldrh	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	1c9a      	adds	r2, r3, #2
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071dc:	e032      	b.n	8007244 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d112      	bne.n	8007212 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	881a      	ldrh	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fc:	1c9a      	adds	r2, r3, #2
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007210:	e018      	b.n	8007244 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007212:	f7fe f843 	bl	800529c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d803      	bhi.n	800722a <HAL_SPI_Transmit+0x160>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007228:	d102      	bne.n	8007230 <HAL_SPI_Transmit+0x166>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e082      	b.n	800734a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1c7      	bne.n	80071de <HAL_SPI_Transmit+0x114>
 800724e:	e053      	b.n	80072f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_SPI_Transmit+0x194>
 8007258:	8b7b      	ldrh	r3, [r7, #26]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d147      	bne.n	80072ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007284:	e033      	b.n	80072ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d113      	bne.n	80072bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072ba:	e018      	b.n	80072ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072bc:	f7fd ffee 	bl	800529c <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d803      	bhi.n	80072d4 <HAL_SPI_Transmit+0x20a>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072d2:	d102      	bne.n	80072da <HAL_SPI_Transmit+0x210>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e02d      	b.n	800734a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1c6      	bne.n	8007286 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fbd9 	bl	8007ab4 <SPI_EndRxTxTransaction>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007348:	2300      	movs	r3, #0
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b088      	sub	sp, #32
 8007356:	af02      	add	r7, sp, #8
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d001      	beq.n	8007372 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800736e:	2302      	movs	r3, #2
 8007370:	e104      	b.n	800757c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737a:	d112      	bne.n	80073a2 <HAL_SPI_Receive+0x50>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10e      	bne.n	80073a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2204      	movs	r2, #4
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f8f3 	bl	8007584 <HAL_SPI_TransmitReceive>
 800739e:	4603      	mov	r3, r0
 80073a0:	e0ec      	b.n	800757c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a2:	f7fd ff7b 	bl	800529c <HAL_GetTick>
 80073a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_Receive+0x62>
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0e1      	b.n	800757c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_SPI_Receive+0x74>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e0da      	b.n	800757c <HAL_SPI_Receive+0x22a>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2204      	movs	r2, #4
 80073d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d10f      	bne.n	8007436 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007434:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	d007      	beq.n	8007454 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d170      	bne.n	800753e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800745c:	e035      	b.n	80074ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b01      	cmp	r3, #1
 800746a:	d115      	bne.n	8007498 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f103 020c 	add.w	r2, r3, #12
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007496:	e018      	b.n	80074ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007498:	f7fd ff00 	bl	800529c <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d803      	bhi.n	80074b0 <HAL_SPI_Receive+0x15e>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_Receive+0x164>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e058      	b.n	800757c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1c4      	bne.n	800745e <HAL_SPI_Receive+0x10c>
 80074d4:	e038      	b.n	8007548 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d113      	bne.n	800750c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	b292      	uxth	r2, r2
 80074f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	1c9a      	adds	r2, r3, #2
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800750a:	e018      	b.n	800753e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800750c:	f7fd fec6 	bl	800529c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d803      	bhi.n	8007524 <HAL_SPI_Receive+0x1d2>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007522:	d102      	bne.n	800752a <HAL_SPI_Receive+0x1d8>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e01e      	b.n	800757c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1c6      	bne.n	80074d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fa4b 	bl	80079e8 <SPI_EndRxTransaction>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800757a:	2300      	movs	r3, #0
  }
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	@ 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007592:	2301      	movs	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007596:	f7fd fe81 	bl	800529c <HAL_GetTick>
 800759a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ae:	7ffb      	ldrb	r3, [r7, #31]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d00c      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x4a>
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ba:	d106      	bne.n	80075ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <HAL_SPI_TransmitReceive+0x46>
 80075c4:	7ffb      	ldrb	r3, [r7, #31]
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d001      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80075ca:	2302      	movs	r3, #2
 80075cc:	e17f      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_SPI_TransmitReceive+0x5c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_SPI_TransmitReceive+0x5c>
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e174      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x6e>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e16d      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b04      	cmp	r3, #4
 8007604:	d003      	beq.n	800760e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2205      	movs	r2, #5
 800760a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	887a      	ldrh	r2, [r7, #2]
 800761e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	887a      	ldrh	r2, [r7, #2]
 8007624:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	887a      	ldrh	r2, [r7, #2]
 8007630:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	887a      	ldrh	r2, [r7, #2]
 8007636:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d007      	beq.n	8007662 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766a:	d17e      	bne.n	800776a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_TransmitReceive+0xf6>
 8007674:	8afb      	ldrh	r3, [r7, #22]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d16c      	bne.n	8007754 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	881a      	ldrh	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	1c9a      	adds	r2, r3, #2
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800769e:	e059      	b.n	8007754 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d11b      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x162>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d016      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x162>
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d113      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	881a      	ldrh	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d119      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x1a4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d014      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	b292      	uxth	r2, r2
 800770a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	1c9a      	adds	r2, r3, #2
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007728:	f7fd fdb8 	bl	800529c <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007734:	429a      	cmp	r2, r3
 8007736:	d80d      	bhi.n	8007754 <HAL_SPI_TransmitReceive+0x1d0>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800773e:	d009      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e0bc      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1a0      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x11c>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d19b      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x11c>
 8007768:	e082      	b.n	8007870 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x1f4>
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d171      	bne.n	800785c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	7812      	ldrb	r2, [r2, #0]
 8007784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800779e:	e05d      	b.n	800785c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d11c      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x264>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d017      	beq.n	80077e8 <HAL_SPI_TransmitReceive+0x264>
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d114      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	7812      	ldrb	r2, [r2, #0]
 80077ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d119      	bne.n	800782a <HAL_SPI_TransmitReceive+0x2a6>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d014      	beq.n	800782a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007826:	2301      	movs	r3, #1
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800782a:	f7fd fd37 	bl	800529c <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007836:	429a      	cmp	r2, r3
 8007838:	d803      	bhi.n	8007842 <HAL_SPI_TransmitReceive+0x2be>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007840:	d102      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x2c4>
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e038      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d19c      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x21c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d197      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f91d 	bl	8007ab4 <SPI_EndRxTxTransaction>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e01d      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
  }
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3728      	adds	r7, #40	@ 0x28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078e8:	f7fd fcd8 	bl	800529c <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078f8:	f7fd fcd0 	bl	800529c <HAL_GetTick>
 80078fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	015b      	lsls	r3, r3, #5
 8007904:	0d1b      	lsrs	r3, r3, #20
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800790e:	e054      	b.n	80079ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007916:	d050      	beq.n	80079ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007918:	f7fd fcc0 	bl	800529c <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	429a      	cmp	r2, r3
 8007926:	d902      	bls.n	800792e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d13d      	bne.n	80079aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800793c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007946:	d111      	bne.n	800796c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007950:	d004      	beq.n	800795c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800795a:	d107      	bne.n	800796c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800796a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007974:	d10f      	bne.n	8007996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e017      	b.n	80079da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4013      	ands	r3, r2
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	bf0c      	ite	eq
 80079ca:	2301      	moveq	r3, #1
 80079cc:	2300      	movne	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d19b      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000004 	.word	0x20000004

080079e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079fc:	d111      	bne.n	8007a22 <SPI_EndRxTransaction+0x3a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a06:	d004      	beq.n	8007a12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a10:	d107      	bne.n	8007a22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a2a:	d12a      	bne.n	8007a82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a34:	d012      	beq.n	8007a5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2180      	movs	r1, #128	@ 0x80
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7ff ff49 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02d      	beq.n	8007aa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e026      	b.n	8007aaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	2101      	movs	r1, #1
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff ff36 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01a      	beq.n	8007aa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e013      	b.n	8007aaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff ff23 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9c:	f043 0220 	orr.w	r2, r3, #32
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e000      	b.n	8007aaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	2102      	movs	r1, #2
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff ff04 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ada:	f043 0220 	orr.w	r2, r3, #32
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e032      	b.n	8007b4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b54 <SPI_EndRxTxTransaction+0xa0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <SPI_EndRxTxTransaction+0xa4>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	0d5b      	lsrs	r3, r3, #21
 8007af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b04:	d112      	bne.n	8007b2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2180      	movs	r1, #128	@ 0x80
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff fee1 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d016      	beq.n	8007b4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e00f      	b.n	8007b4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b42:	2b80      	cmp	r3, #128	@ 0x80
 8007b44:	d0f2      	beq.n	8007b2c <SPI_EndRxTxTransaction+0x78>
 8007b46:	e000      	b.n	8007b4a <SPI_EndRxTxTransaction+0x96>
        break;
 8007b48:	bf00      	nop
  }

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000004 	.word	0x20000004
 8007b58:	165e9f81 	.word	0x165e9f81

08007b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e041      	b.n	8007bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f839 	bl	8007bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f000 f9b2 	bl	8007f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d001      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e044      	b.n	8007cb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d018      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x6c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c52:	d013      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x6c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x6c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a19      	ldr	r2, [pc, #100]	@ (8007cc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x6c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x6c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a16      	ldr	r2, [pc, #88]	@ (8007cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d111      	bne.n	8007ca0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b06      	cmp	r3, #6
 8007c8c:	d010      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9e:	e007      	b.n	8007cb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40014000 	.word	0x40014000

08007cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01b      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0202 	mvn.w	r2, #2
 8007d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8d2 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f8c4 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8d5 	bl	8007edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d020      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0204 	mvn.w	r2, #4
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8ac 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f89e 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8af 	bl	8007edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01b      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0208 	mvn.w	r2, #8
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f886 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f878 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f889 	bl	8007edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d020      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01b      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2208      	movs	r2, #8
 8007df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f860 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f852 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f863 	bl	8007edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0201 	mvn.w	r2, #1
 8007e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fa f954 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8e6 	bl	8008030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f834 	bl	8007ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0220 	mvn.w	r2, #32
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8b8 	bl	800801c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3a      	ldr	r2, [pc, #232]	@ (8008000 <TIM_Base_SetConfig+0xfc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00f      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f22:	d00b      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a37      	ldr	r2, [pc, #220]	@ (8008004 <TIM_Base_SetConfig+0x100>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a36      	ldr	r2, [pc, #216]	@ (8008008 <TIM_Base_SetConfig+0x104>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_Base_SetConfig+0x38>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a35      	ldr	r2, [pc, #212]	@ (800800c <TIM_Base_SetConfig+0x108>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2b      	ldr	r2, [pc, #172]	@ (8008000 <TIM_Base_SetConfig+0xfc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01b      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5c:	d017      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a28      	ldr	r2, [pc, #160]	@ (8008004 <TIM_Base_SetConfig+0x100>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a27      	ldr	r2, [pc, #156]	@ (8008008 <TIM_Base_SetConfig+0x104>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00f      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a26      	ldr	r2, [pc, #152]	@ (800800c <TIM_Base_SetConfig+0x108>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a25      	ldr	r2, [pc, #148]	@ (8008010 <TIM_Base_SetConfig+0x10c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a24      	ldr	r2, [pc, #144]	@ (8008014 <TIM_Base_SetConfig+0x110>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d003      	beq.n	8007f8e <TIM_Base_SetConfig+0x8a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a23      	ldr	r2, [pc, #140]	@ (8008018 <TIM_Base_SetConfig+0x114>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d108      	bne.n	8007fa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008000 <TIM_Base_SetConfig+0xfc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d103      	bne.n	8007fd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d105      	bne.n	8007ff2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40010000 	.word	0x40010000
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800

0800801c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800804a:	f000 fa15 	bl	8008478 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800804e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8008052:	2201      	movs	r2, #1
 8008054:	2178      	movs	r1, #120	@ 0x78
 8008056:	4856      	ldr	r0, [pc, #344]	@ (80081b0 <SSD1306_Init+0x16c>)
 8008058:	f7fd ff5a 	bl	8005f10 <HAL_I2C_IsDeviceReady>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8008062:	2300      	movs	r3, #0
 8008064:	e09f      	b.n	80081a6 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8008066:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800806a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800806c:	e002      	b.n	8008074 <SSD1306_Init+0x30>
		p--;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3b01      	subs	r3, #1
 8008072:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f9      	bne.n	800806e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800807a:	22ae      	movs	r2, #174	@ 0xae
 800807c:	2100      	movs	r1, #0
 800807e:	2078      	movs	r0, #120	@ 0x78
 8008080:	f000 fa76 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8008084:	2220      	movs	r2, #32
 8008086:	2100      	movs	r1, #0
 8008088:	2078      	movs	r0, #120	@ 0x78
 800808a:	f000 fa71 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800808e:	2210      	movs	r2, #16
 8008090:	2100      	movs	r1, #0
 8008092:	2078      	movs	r0, #120	@ 0x78
 8008094:	f000 fa6c 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008098:	22b0      	movs	r2, #176	@ 0xb0
 800809a:	2100      	movs	r1, #0
 800809c:	2078      	movs	r0, #120	@ 0x78
 800809e:	f000 fa67 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80080a2:	22c8      	movs	r2, #200	@ 0xc8
 80080a4:	2100      	movs	r1, #0
 80080a6:	2078      	movs	r0, #120	@ 0x78
 80080a8:	f000 fa62 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80080ac:	2200      	movs	r2, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	2078      	movs	r0, #120	@ 0x78
 80080b2:	f000 fa5d 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80080b6:	2210      	movs	r2, #16
 80080b8:	2100      	movs	r1, #0
 80080ba:	2078      	movs	r0, #120	@ 0x78
 80080bc:	f000 fa58 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80080c0:	2240      	movs	r2, #64	@ 0x40
 80080c2:	2100      	movs	r1, #0
 80080c4:	2078      	movs	r0, #120	@ 0x78
 80080c6:	f000 fa53 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80080ca:	2281      	movs	r2, #129	@ 0x81
 80080cc:	2100      	movs	r1, #0
 80080ce:	2078      	movs	r0, #120	@ 0x78
 80080d0:	f000 fa4e 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80080d4:	22ff      	movs	r2, #255	@ 0xff
 80080d6:	2100      	movs	r1, #0
 80080d8:	2078      	movs	r0, #120	@ 0x78
 80080da:	f000 fa49 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80080de:	22a1      	movs	r2, #161	@ 0xa1
 80080e0:	2100      	movs	r1, #0
 80080e2:	2078      	movs	r0, #120	@ 0x78
 80080e4:	f000 fa44 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80080e8:	22a6      	movs	r2, #166	@ 0xa6
 80080ea:	2100      	movs	r1, #0
 80080ec:	2078      	movs	r0, #120	@ 0x78
 80080ee:	f000 fa3f 	bl	8008570 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80080f2:	22a8      	movs	r2, #168	@ 0xa8
 80080f4:	2100      	movs	r1, #0
 80080f6:	2078      	movs	r0, #120	@ 0x78
 80080f8:	f000 fa3a 	bl	8008570 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80080fc:	223f      	movs	r2, #63	@ 0x3f
 80080fe:	2100      	movs	r1, #0
 8008100:	2078      	movs	r0, #120	@ 0x78
 8008102:	f000 fa35 	bl	8008570 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008106:	22a4      	movs	r2, #164	@ 0xa4
 8008108:	2100      	movs	r1, #0
 800810a:	2078      	movs	r0, #120	@ 0x78
 800810c:	f000 fa30 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8008110:	22d3      	movs	r2, #211	@ 0xd3
 8008112:	2100      	movs	r1, #0
 8008114:	2078      	movs	r0, #120	@ 0x78
 8008116:	f000 fa2b 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	2078      	movs	r0, #120	@ 0x78
 8008120:	f000 fa26 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8008124:	22d5      	movs	r2, #213	@ 0xd5
 8008126:	2100      	movs	r1, #0
 8008128:	2078      	movs	r0, #120	@ 0x78
 800812a:	f000 fa21 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800812e:	22f0      	movs	r2, #240	@ 0xf0
 8008130:	2100      	movs	r1, #0
 8008132:	2078      	movs	r0, #120	@ 0x78
 8008134:	f000 fa1c 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8008138:	22d9      	movs	r2, #217	@ 0xd9
 800813a:	2100      	movs	r1, #0
 800813c:	2078      	movs	r0, #120	@ 0x78
 800813e:	f000 fa17 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8008142:	2222      	movs	r2, #34	@ 0x22
 8008144:	2100      	movs	r1, #0
 8008146:	2078      	movs	r0, #120	@ 0x78
 8008148:	f000 fa12 	bl	8008570 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800814c:	22da      	movs	r2, #218	@ 0xda
 800814e:	2100      	movs	r1, #0
 8008150:	2078      	movs	r0, #120	@ 0x78
 8008152:	f000 fa0d 	bl	8008570 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8008156:	2212      	movs	r2, #18
 8008158:	2100      	movs	r1, #0
 800815a:	2078      	movs	r0, #120	@ 0x78
 800815c:	f000 fa08 	bl	8008570 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8008160:	22db      	movs	r2, #219	@ 0xdb
 8008162:	2100      	movs	r1, #0
 8008164:	2078      	movs	r0, #120	@ 0x78
 8008166:	f000 fa03 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800816a:	2220      	movs	r2, #32
 800816c:	2100      	movs	r1, #0
 800816e:	2078      	movs	r0, #120	@ 0x78
 8008170:	f000 f9fe 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8008174:	228d      	movs	r2, #141	@ 0x8d
 8008176:	2100      	movs	r1, #0
 8008178:	2078      	movs	r0, #120	@ 0x78
 800817a:	f000 f9f9 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800817e:	2214      	movs	r2, #20
 8008180:	2100      	movs	r1, #0
 8008182:	2078      	movs	r0, #120	@ 0x78
 8008184:	f000 f9f4 	bl	8008570 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8008188:	22af      	movs	r2, #175	@ 0xaf
 800818a:	2100      	movs	r1, #0
 800818c:	2078      	movs	r0, #120	@ 0x78
 800818e:	f000 f9ef 	bl	8008570 <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008192:	4b08      	ldr	r3, [pc, #32]	@ (80081b4 <SSD1306_Init+0x170>)
 8008194:	2200      	movs	r2, #0
 8008196:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008198:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <SSD1306_Init+0x170>)
 800819a:	2200      	movs	r2, #0
 800819c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800819e:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <SSD1306_Init+0x170>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80081a4:	2301      	movs	r3, #1
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	2000035c 	.word	0x2000035c
 80081b4:	20000908 	.word	0x20000908

080081b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80081be:	2300      	movs	r3, #0
 80081c0:	71fb      	strb	r3, [r7, #7]
 80081c2:	e01d      	b.n	8008200 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	3b50      	subs	r3, #80	@ 0x50
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	2100      	movs	r1, #0
 80081ce:	2078      	movs	r0, #120	@ 0x78
 80081d0:	f000 f9ce 	bl	8008570 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	2078      	movs	r0, #120	@ 0x78
 80081da:	f000 f9c9 	bl	8008570 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80081de:	2210      	movs	r2, #16
 80081e0:	2100      	movs	r1, #0
 80081e2:	2078      	movs	r0, #120	@ 0x78
 80081e4:	f000 f9c4 	bl	8008570 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	01db      	lsls	r3, r3, #7
 80081ec:	4a08      	ldr	r2, [pc, #32]	@ (8008210 <SSD1306_UpdateScreen+0x58>)
 80081ee:	441a      	add	r2, r3
 80081f0:	2380      	movs	r3, #128	@ 0x80
 80081f2:	2140      	movs	r1, #64	@ 0x40
 80081f4:	2078      	movs	r0, #120	@ 0x78
 80081f6:	f000 f955 	bl	80084a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	3301      	adds	r3, #1
 80081fe:	71fb      	strb	r3, [r7, #7]
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	2b07      	cmp	r3, #7
 8008204:	d9de      	bls.n	80081c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000508 	.word	0x20000508

08008214 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <SSD1306_Fill+0x14>
 8008224:	2300      	movs	r3, #0
 8008226:	e000      	b.n	800822a <SSD1306_Fill+0x16>
 8008228:	23ff      	movs	r3, #255	@ 0xff
 800822a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800822e:	4619      	mov	r1, r3
 8008230:	4803      	ldr	r0, [pc, #12]	@ (8008240 <SSD1306_Fill+0x2c>)
 8008232:	f01a fe11 	bl	8022e58 <memset>
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000508 	.word	0x20000508

08008244 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	80fb      	strh	r3, [r7, #6]
 800824e:	460b      	mov	r3, r1
 8008250:	80bb      	strh	r3, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	70fb      	strb	r3, [r7, #3]
	if (
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	2b7f      	cmp	r3, #127	@ 0x7f
 800825a:	d848      	bhi.n	80082ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800825c:	88bb      	ldrh	r3, [r7, #4]
 800825e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008260:	d845      	bhi.n	80082ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8008262:	4b26      	ldr	r3, [pc, #152]	@ (80082fc <SSD1306_DrawPixel+0xb8>)
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf0c      	ite	eq
 8008270:	2301      	moveq	r3, #1
 8008272:	2300      	movne	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d11a      	bne.n	80082b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	88bb      	ldrh	r3, [r7, #4]
 8008282:	08db      	lsrs	r3, r3, #3
 8008284:	b298      	uxth	r0, r3
 8008286:	4603      	mov	r3, r0
 8008288:	01db      	lsls	r3, r3, #7
 800828a:	4413      	add	r3, r2
 800828c:	4a1c      	ldr	r2, [pc, #112]	@ (8008300 <SSD1306_DrawPixel+0xbc>)
 800828e:	5cd3      	ldrb	r3, [r2, r3]
 8008290:	b25a      	sxtb	r2, r3
 8008292:	88bb      	ldrh	r3, [r7, #4]
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	2101      	movs	r1, #1
 800829a:	fa01 f303 	lsl.w	r3, r1, r3
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b259      	sxtb	r1, r3
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	4603      	mov	r3, r0
 80082a8:	01db      	lsls	r3, r3, #7
 80082aa:	4413      	add	r3, r2
 80082ac:	b2c9      	uxtb	r1, r1
 80082ae:	4a14      	ldr	r2, [pc, #80]	@ (8008300 <SSD1306_DrawPixel+0xbc>)
 80082b0:	54d1      	strb	r1, [r2, r3]
 80082b2:	e01d      	b.n	80082f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	88bb      	ldrh	r3, [r7, #4]
 80082b8:	08db      	lsrs	r3, r3, #3
 80082ba:	b298      	uxth	r0, r3
 80082bc:	4603      	mov	r3, r0
 80082be:	01db      	lsls	r3, r3, #7
 80082c0:	4413      	add	r3, r2
 80082c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008300 <SSD1306_DrawPixel+0xbc>)
 80082c4:	5cd3      	ldrb	r3, [r2, r3]
 80082c6:	b25a      	sxtb	r2, r3
 80082c8:	88bb      	ldrh	r3, [r7, #4]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2101      	movs	r1, #1
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	4013      	ands	r3, r2
 80082dc:	b259      	sxtb	r1, r3
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	4603      	mov	r3, r0
 80082e2:	01db      	lsls	r3, r3, #7
 80082e4:	4413      	add	r3, r2
 80082e6:	b2c9      	uxtb	r1, r1
 80082e8:	4a05      	ldr	r2, [pc, #20]	@ (8008300 <SSD1306_DrawPixel+0xbc>)
 80082ea:	54d1      	strb	r1, [r2, r3]
 80082ec:	e000      	b.n	80082f0 <SSD1306_DrawPixel+0xac>
		return;
 80082ee:	bf00      	nop
	}
}
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	20000908 	.word	0x20000908
 8008300:	20000508 	.word	0x20000508

08008304 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	460a      	mov	r2, r1
 800830e:	80fb      	strh	r3, [r7, #6]
 8008310:	4613      	mov	r3, r2
 8008312:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8008314:	4a05      	ldr	r2, [pc, #20]	@ (800832c <SSD1306_GotoXY+0x28>)
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800831a:	4a04      	ldr	r2, [pc, #16]	@ (800832c <SSD1306_GotoXY+0x28>)
 800831c:	88bb      	ldrh	r3, [r7, #4]
 800831e:	8053      	strh	r3, [r2, #2]
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000908 	.word	0x20000908

08008330 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
 800833c:	4613      	mov	r3, r2
 800833e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8008340:	4b39      	ldr	r3, [pc, #228]	@ (8008428 <SSD1306_Putc+0xf8>)
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4413      	add	r3, r2
	if (
 800834c:	2b7f      	cmp	r3, #127	@ 0x7f
 800834e:	dc07      	bgt.n	8008360 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8008350:	4b35      	ldr	r3, [pc, #212]	@ (8008428 <SSD1306_Putc+0xf8>)
 8008352:	885b      	ldrh	r3, [r3, #2]
 8008354:	461a      	mov	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800835c:	2b3f      	cmp	r3, #63	@ 0x3f
 800835e:	dd01      	ble.n	8008364 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8008360:	2300      	movs	r3, #0
 8008362:	e05d      	b.n	8008420 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e04b      	b.n	8008402 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	3b20      	subs	r3, #32
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	7849      	ldrb	r1, [r1, #1]
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4619      	mov	r1, r3
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	440b      	add	r3, r1
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	e030      	b.n	80083f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d010      	beq.n	80083c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800839e:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <SSD1306_Putc+0xf8>)
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	4413      	add	r3, r2
 80083a8:	b298      	uxth	r0, r3
 80083aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008428 <SSD1306_Putc+0xf8>)
 80083ac:	885a      	ldrh	r2, [r3, #2]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4413      	add	r3, r2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	79ba      	ldrb	r2, [r7, #6]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7ff ff43 	bl	8008244 <SSD1306_DrawPixel>
 80083be:	e014      	b.n	80083ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80083c0:	4b19      	ldr	r3, [pc, #100]	@ (8008428 <SSD1306_Putc+0xf8>)
 80083c2:	881a      	ldrh	r2, [r3, #0]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4413      	add	r3, r2
 80083ca:	b298      	uxth	r0, r3
 80083cc:	4b16      	ldr	r3, [pc, #88]	@ (8008428 <SSD1306_Putc+0xf8>)
 80083ce:	885a      	ldrh	r2, [r3, #2]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	4413      	add	r3, r2
 80083d6:	b299      	uxth	r1, r3
 80083d8:	79bb      	ldrb	r3, [r7, #6]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	f7ff ff2d 	bl	8008244 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3301      	adds	r3, #1
 80083ee:	613b      	str	r3, [r7, #16]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d3c8      	bcc.n	800838e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3301      	adds	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	461a      	mov	r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4293      	cmp	r3, r2
 800840c:	d3ad      	bcc.n	800836a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800840e:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <SSD1306_Putc+0xf8>)
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	7812      	ldrb	r2, [r2, #0]
 8008416:	4413      	add	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <SSD1306_Putc+0xf8>)
 800841c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800841e:	79fb      	ldrb	r3, [r7, #7]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20000908 	.word	0x20000908

0800842c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800843a:	e012      	b.n	8008462 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	79fa      	ldrb	r2, [r7, #7]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ff73 	bl	8008330 <SSD1306_Putc>
 800844a:	4603      	mov	r3, r0
 800844c:	461a      	mov	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d002      	beq.n	800845c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	e008      	b.n	800846e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e8      	bne.n	800843c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	781b      	ldrb	r3, [r3, #0]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800847e:	4b08      	ldr	r3, [pc, #32]	@ (80084a0 <ssd1306_I2C_Init+0x28>)
 8008480:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008482:	e002      	b.n	800848a <ssd1306_I2C_Init+0x12>
		p--;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3b01      	subs	r3, #1
 8008488:	607b      	str	r3, [r7, #4]
	while(p>0)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f9      	bne.n	8008484 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	0003d090 	.word	0x0003d090

080084a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b0c7      	sub	sp, #284	@ 0x11c
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80084b2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80084b6:	600a      	str	r2, [r1, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084be:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80084c2:	4622      	mov	r2, r4
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80084ce:	4602      	mov	r2, r0
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80084da:	460a      	mov	r2, r1
 80084dc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80084de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80084ea:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80084f2:	2300      	movs	r3, #0
 80084f4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80084f8:	e015      	b.n	8008526 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80084fa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80084fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008502:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	441a      	add	r2, r3
 800850a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800850e:	3301      	adds	r3, #1
 8008510:	7811      	ldrb	r1, [r2, #0]
 8008512:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008516:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800851a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800851c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008520:	3301      	adds	r3, #1
 8008522:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008526:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800852a:	b29b      	uxth	r3, r3
 800852c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008530:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8008534:	8812      	ldrh	r2, [r2, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d8df      	bhi.n	80084fa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800853a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800853e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b299      	uxth	r1, r3
 8008546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800854a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	f107 020c 	add.w	r2, r7, #12
 8008558:	200a      	movs	r0, #10
 800855a:	9000      	str	r0, [sp, #0]
 800855c:	4803      	ldr	r0, [pc, #12]	@ (800856c <ssd1306_I2C_WriteMulti+0xc8>)
 800855e:	f7fd fbd9 	bl	8005d14 <HAL_I2C_Master_Transmit>
}
 8008562:	bf00      	nop
 8008564:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}
 800856c:	2000035c 	.word	0x2000035c

08008570 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	4603      	mov	r3, r0
 8008578:	71fb      	strb	r3, [r7, #7]
 800857a:	460b      	mov	r3, r1
 800857c:	71bb      	strb	r3, [r7, #6]
 800857e:	4613      	mov	r3, r2
 8008580:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8008582:	79bb      	ldrb	r3, [r7, #6]
 8008584:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8008586:	797b      	ldrb	r3, [r7, #5]
 8008588:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	b299      	uxth	r1, r3
 800858e:	f107 020c 	add.w	r2, r7, #12
 8008592:	230a      	movs	r3, #10
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2302      	movs	r3, #2
 8008598:	4803      	ldr	r0, [pc, #12]	@ (80085a8 <ssd1306_I2C_Write+0x38>)
 800859a:	f7fd fbbb 	bl	8005d14 <HAL_I2C_Master_Transmit>
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	2000035c 	.word	0x2000035c

080085ac <__NVIC_SetPriority>:
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	db0a      	blt.n	80085d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	490c      	ldr	r1, [pc, #48]	@ (80085f8 <__NVIC_SetPriority+0x4c>)
 80085c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ca:	0112      	lsls	r2, r2, #4
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	440b      	add	r3, r1
 80085d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80085d4:	e00a      	b.n	80085ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4908      	ldr	r1, [pc, #32]	@ (80085fc <__NVIC_SetPriority+0x50>)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	3b04      	subs	r3, #4
 80085e4:	0112      	lsls	r2, r2, #4
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	440b      	add	r3, r1
 80085ea:	761a      	strb	r2, [r3, #24]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	e000e100 	.word	0xe000e100
 80085fc:	e000ed00 	.word	0xe000ed00

08008600 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008604:	4b05      	ldr	r3, [pc, #20]	@ (800861c <SysTick_Handler+0x1c>)
 8008606:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008608:	f002 fb96 	bl	800ad38 <xTaskGetSchedulerState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b01      	cmp	r3, #1
 8008610:	d001      	beq.n	8008616 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008612:	f003 fa91 	bl	800bb38 <xPortSysTickHandler>
  }
}
 8008616:	bf00      	nop
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	e000e010 	.word	0xe000e010

08008620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008624:	2100      	movs	r1, #0
 8008626:	f06f 0004 	mvn.w	r0, #4
 800862a:	f7ff ffbf 	bl	80085ac <__NVIC_SetPriority>
#endif
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863a:	f3ef 8305 	mrs	r3, IPSR
 800863e:	603b      	str	r3, [r7, #0]
  return(result);
 8008640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008646:	f06f 0305 	mvn.w	r3, #5
 800864a:	607b      	str	r3, [r7, #4]
 800864c:	e00c      	b.n	8008668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800864e:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <osKernelInitialize+0x44>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008656:	4b08      	ldr	r3, [pc, #32]	@ (8008678 <osKernelInitialize+0x44>)
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800865c:	2300      	movs	r3, #0
 800865e:	607b      	str	r3, [r7, #4]
 8008660:	e002      	b.n	8008668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008668:	687b      	ldr	r3, [r7, #4]
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000910 	.word	0x20000910

0800867c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008682:	f3ef 8305 	mrs	r3, IPSR
 8008686:	603b      	str	r3, [r7, #0]
  return(result);
 8008688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800868e:	f06f 0305 	mvn.w	r3, #5
 8008692:	607b      	str	r3, [r7, #4]
 8008694:	e010      	b.n	80086b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <osKernelStart+0x48>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d109      	bne.n	80086b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800869e:	f7ff ffbf 	bl	8008620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086a2:	4b08      	ldr	r3, [pc, #32]	@ (80086c4 <osKernelStart+0x48>)
 80086a4:	2202      	movs	r2, #2
 80086a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086a8:	f001 fed2 	bl	800a450 <vTaskStartScheduler>
      stat = osOK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	607b      	str	r3, [r7, #4]
 80086b0:	e002      	b.n	80086b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086b8:	687b      	ldr	r3, [r7, #4]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000910 	.word	0x20000910

080086c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08e      	sub	sp, #56	@ 0x38
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d8:	f3ef 8305 	mrs	r3, IPSR
 80086dc:	617b      	str	r3, [r7, #20]
  return(result);
 80086de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d17e      	bne.n	80087e2 <osThreadNew+0x11a>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d07b      	beq.n	80087e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80086ea:	2380      	movs	r3, #128	@ 0x80
 80086ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80086ee:	2318      	movs	r3, #24
 80086f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d045      	beq.n	800878e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <osThreadNew+0x48>
        name = attr->name;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <osThreadNew+0x6e>
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b38      	cmp	r3, #56	@ 0x38
 8008728:	d805      	bhi.n	8008736 <osThreadNew+0x6e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <osThreadNew+0x72>
        return (NULL);
 8008736:	2300      	movs	r3, #0
 8008738:	e054      	b.n	80087e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	089b      	lsrs	r3, r3, #2
 8008748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <osThreadNew+0xa8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2ba7      	cmp	r3, #167	@ 0xa7
 8008758:	d90a      	bls.n	8008770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <osThreadNew+0xa8>
        mem = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e010      	b.n	8008792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10c      	bne.n	8008792 <osThreadNew+0xca>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <osThreadNew+0xca>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d104      	bne.n	8008792 <osThreadNew+0xca>
          mem = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	e001      	b.n	8008792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d110      	bne.n	80087ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087a0:	9202      	str	r2, [sp, #8]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f001 fc5a 	bl	800a068 <xTaskCreateStatic>
 80087b4:	4603      	mov	r3, r0
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	e013      	b.n	80087e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d110      	bne.n	80087e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	f107 0310 	add.w	r3, r7, #16
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f001 fca8 	bl	800a128 <xTaskCreate>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d001      	beq.n	80087e2 <osThreadNew+0x11a>
            hTask = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087e2:	693b      	ldr	r3, [r7, #16]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3728      	adds	r7, #40	@ 0x28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f4:	f3ef 8305 	mrs	r3, IPSR
 80087f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <osDelay+0x1c>
    stat = osErrorISR;
 8008800:	f06f 0305 	mvn.w	r3, #5
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e007      	b.n	8008818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 fde6 	bl	800a3e4 <vTaskDelay>
    }
  }

  return (stat);
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882e:	f3ef 8305 	mrs	r3, IPSR
 8008832:	60bb      	str	r3, [r7, #8]
  return(result);
 8008834:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008836:	2b00      	cmp	r3, #0
 8008838:	d174      	bne.n	8008924 <osMutexNew+0x102>
    if (attr != NULL) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e001      	b.n	800884c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <osMutexNew+0x3a>
      rmtx = 1U;
 8008856:	2301      	movs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	e001      	b.n	8008860 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d15c      	bne.n	8008924 <osMutexNew+0x102>
      mem = -1;
 800886a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800886e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <osMutexNew+0x6a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b4f      	cmp	r3, #79	@ 0x4f
 8008884:	d902      	bls.n	800888c <osMutexNew+0x6a>
          mem = 1;
 8008886:	2301      	movs	r3, #1
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	e00c      	b.n	80088a6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <osMutexNew+0x84>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d104      	bne.n	80088a6 <osMutexNew+0x84>
            mem = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e001      	b.n	80088a6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d112      	bne.n	80088d2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d007      	beq.n	80088c2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	4619      	mov	r1, r3
 80088b8:	2004      	movs	r0, #4
 80088ba:	f000 fc92 	bl	80091e2 <xQueueCreateMutexStatic>
 80088be:	61f8      	str	r0, [r7, #28]
 80088c0:	e016      	b.n	80088f0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	4619      	mov	r1, r3
 80088c8:	2001      	movs	r0, #1
 80088ca:	f000 fc8a 	bl	80091e2 <xQueueCreateMutexStatic>
 80088ce:	61f8      	str	r0, [r7, #28]
 80088d0:	e00e      	b.n	80088f0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10b      	bne.n	80088f0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80088de:	2004      	movs	r0, #4
 80088e0:	f000 fc67 	bl	80091b2 <xQueueCreateMutex>
 80088e4:	61f8      	str	r0, [r7, #28]
 80088e6:	e003      	b.n	80088f0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80088e8:	2001      	movs	r0, #1
 80088ea:	f000 fc62 	bl	80091b2 <xQueueCreateMutex>
 80088ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00c      	beq.n	8008910 <osMutexNew+0xee>
        if (attr != NULL) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <osMutexNew+0xe2>
          name = attr->name;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e001      	b.n	8008908 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008908:	68f9      	ldr	r1, [r7, #12]
 800890a:	69f8      	ldr	r0, [r7, #28]
 800890c:	f001 fb4e 	bl	8009fac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <osMutexNew+0x102>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008924:	69fb      	ldr	r3, [r7, #28]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800892e:	b580      	push	{r7, lr}
 8008930:	b086      	sub	sp, #24
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894c:	f3ef 8305 	mrs	r3, IPSR
 8008950:	60bb      	str	r3, [r7, #8]
  return(result);
 8008952:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008958:	f06f 0305 	mvn.w	r3, #5
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e02c      	b.n	80089ba <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008966:	f06f 0303 	mvn.w	r3, #3
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	e025      	b.n	80089ba <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d011      	beq.n	8008998 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6938      	ldr	r0, [r7, #16]
 8008978:	f000 fc83 	bl	8009282 <xQueueTakeMutexRecursive>
 800897c:	4603      	mov	r3, r0
 800897e:	2b01      	cmp	r3, #1
 8008980:	d01b      	beq.n	80089ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008988:	f06f 0301 	mvn.w	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e014      	b.n	80089ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008990:	f06f 0302 	mvn.w	r3, #2
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e010      	b.n	80089ba <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6938      	ldr	r0, [r7, #16]
 800899c:	f000 ff2a 	bl	80097f4 <xQueueSemaphoreTake>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d009      	beq.n	80089ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80089ac:	f06f 0301 	mvn.w	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	e002      	b.n	80089ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80089b4:	f06f 0302 	mvn.w	r3, #2
 80089b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80089ba:	697b      	ldr	r3, [r7, #20]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e0:	f3ef 8305 	mrs	r3, IPSR
 80089e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80089e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80089ec:	f06f 0305 	mvn.w	r3, #5
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e01f      	b.n	8008a34 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d103      	bne.n	8008a02 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80089fa:	f06f 0303 	mvn.w	r3, #3
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e018      	b.n	8008a34 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008a08:	6938      	ldr	r0, [r7, #16]
 8008a0a:	f000 fc05 	bl	8009218 <xQueueGiveMutexRecursive>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d00f      	beq.n	8008a34 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008a14:	f06f 0302 	mvn.w	r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	e00b      	b.n	8008a34 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	6938      	ldr	r0, [r7, #16]
 8008a24:	f000 fc64 	bl	80092f0 <xQueueGenericSend>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d002      	beq.n	8008a34 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008a2e:	f06f 0302 	mvn.w	r3, #2
 8008a32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008a34:	697b      	ldr	r3, [r7, #20]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b08a      	sub	sp, #40	@ 0x28
 8008a42:	af02      	add	r7, sp, #8
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a4e:	f3ef 8305 	mrs	r3, IPSR
 8008a52:	613b      	str	r3, [r7, #16]
  return(result);
 8008a54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d15f      	bne.n	8008b1a <osMessageQueueNew+0xdc>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d05c      	beq.n	8008b1a <osMessageQueueNew+0xdc>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d059      	beq.n	8008b1a <osMessageQueueNew+0xdc>
    mem = -1;
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d029      	beq.n	8008ac6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d012      	beq.n	8008aa0 <osMessageQueueNew+0x62>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8008a80:	d90e      	bls.n	8008aa0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	695a      	ldr	r2, [r3, #20]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d302      	bcc.n	8008aa0 <osMessageQueueNew+0x62>
        mem = 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e014      	b.n	8008aca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d110      	bne.n	8008aca <osMessageQueueNew+0x8c>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10c      	bne.n	8008aca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d108      	bne.n	8008aca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <osMessageQueueNew+0x8c>
          mem = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	e001      	b.n	8008aca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d10b      	bne.n	8008ae8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	9100      	str	r1, [sp, #0]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fa72 	bl	8008fc8 <xQueueGenericCreateStatic>
 8008ae4:	61f8      	str	r0, [r7, #28]
 8008ae6:	e008      	b.n	8008afa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d105      	bne.n	8008afa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008aee:	2200      	movs	r2, #0
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fae5 	bl	80090c2 <xQueueGenericCreate>
 8008af8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00c      	beq.n	8008b1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e001      	b.n	8008b12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b12:	6979      	ldr	r1, [r7, #20]
 8008b14:	69f8      	ldr	r0, [r7, #28]
 8008b16:	f001 fa49 	bl	8009fac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b1a:	69fb      	ldr	r3, [r7, #28]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3720      	adds	r7, #32
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b3c:	f3ef 8305 	mrs	r3, IPSR
 8008b40:	617b      	str	r3, [r7, #20]
  return(result);
 8008b42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d028      	beq.n	8008b9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <osMessageQueuePut+0x36>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <osMessageQueuePut+0x36>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008b5a:	f06f 0303 	mvn.w	r3, #3
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e038      	b.n	8008bd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008b66:	f107 0210 	add.w	r2, r7, #16
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	69b8      	ldr	r0, [r7, #24]
 8008b70:	f000 fcc0 	bl	80094f4 <xQueueGenericSendFromISR>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d003      	beq.n	8008b82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008b7a:	f06f 0302 	mvn.w	r3, #2
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e028      	b.n	8008bd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d025      	beq.n	8008bd4 <osMessageQueuePut+0xb0>
 8008b88:	4b15      	ldr	r3, [pc, #84]	@ (8008be0 <osMessageQueuePut+0xbc>)
 8008b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	e01c      	b.n	8008bd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <osMessageQueuePut+0x82>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d103      	bne.n	8008bae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008ba6:	f06f 0303 	mvn.w	r3, #3
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	e012      	b.n	8008bd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bae:	2300      	movs	r3, #0
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	69b8      	ldr	r0, [r7, #24]
 8008bb6:	f000 fb9b 	bl	80092f0 <xQueueGenericSend>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d009      	beq.n	8008bd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008bc6:	f06f 0301 	mvn.w	r3, #1
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e002      	b.n	8008bd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008bce:	f06f 0302 	mvn.w	r3, #2
 8008bd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bfa:	f3ef 8305 	mrs	r3, IPSR
 8008bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8008c00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d028      	beq.n	8008c58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <osMessageQueueGet+0x34>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <osMessageQueueGet+0x34>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c18:	f06f 0303 	mvn.w	r3, #3
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	e037      	b.n	8008c90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c24:	f107 0310 	add.w	r3, r7, #16
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	69b8      	ldr	r0, [r7, #24]
 8008c2e:	f000 ffd5 	bl	8009bdc <xQueueReceiveFromISR>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d003      	beq.n	8008c40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c38:	f06f 0302 	mvn.w	r3, #2
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	e027      	b.n	8008c90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d024      	beq.n	8008c90 <osMessageQueueGet+0xac>
 8008c46:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <osMessageQueueGet+0xb8>)
 8008c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	e01b      	b.n	8008c90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <osMessageQueueGet+0x80>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008c64:	f06f 0303 	mvn.w	r3, #3
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e011      	b.n	8008c90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	69b8      	ldr	r0, [r7, #24]
 8008c72:	f000 fcdd 	bl	8009630 <xQueueReceive>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d009      	beq.n	8008c90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008c82:	f06f 0301 	mvn.w	r3, #1
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e002      	b.n	8008c90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008c8a:	f06f 0302 	mvn.w	r3, #2
 8008c8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c90:	69fb      	ldr	r3, [r7, #28]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e00e      	b.n	8008cd6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb8:	f3ef 8305 	mrs	r3, IPSR
 8008cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008cc4:	6938      	ldr	r0, [r7, #16]
 8008cc6:	f001 f82a 	bl	8009d1e <uxQueueMessagesWaitingFromISR>
 8008cca:	6178      	str	r0, [r7, #20]
 8008ccc:	e003      	b.n	8008cd6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008cce:	6938      	ldr	r0, [r7, #16]
 8008cd0:	f001 f806 	bl	8009ce0 <uxQueueMessagesWaiting>
 8008cd4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cec:	f3ef 8305 	mrs	r3, IPSR
 8008cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8008cf8:	f06f 0305 	mvn.w	r3, #5
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	e00c      	b.n	8008d1a <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d103      	bne.n	8008d0e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8008d06:	f06f 0303 	mvn.w	r3, #3
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e005      	b.n	8008d1a <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8008d12:	2100      	movs	r1, #0
 8008d14:	6938      	ldr	r0, [r7, #16]
 8008d16:	f000 f8ed 	bl	8008ef4 <xQueueGenericReset>
  }

  return (stat);
 8008d1a:	697b      	ldr	r3, [r7, #20]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4a07      	ldr	r2, [pc, #28]	@ (8008d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	4a06      	ldr	r2, [pc, #24]	@ (8008d54 <vApplicationGetIdleTaskMemory+0x30>)
 8008d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2280      	movs	r2, #128	@ 0x80
 8008d40:	601a      	str	r2, [r3, #0]
}
 8008d42:	bf00      	nop
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20000914 	.word	0x20000914
 8008d54:	200009bc 	.word	0x200009bc

08008d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a07      	ldr	r2, [pc, #28]	@ (8008d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4a06      	ldr	r2, [pc, #24]	@ (8008d88 <vApplicationGetTimerTaskMemory+0x30>)
 8008d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d76:	601a      	str	r2, [r3, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	20000bbc 	.word	0x20000bbc
 8008d88:	20000c64 	.word	0x20000c64

08008d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f103 0208 	add.w	r2, r3, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f103 0208 	add.w	r2, r3, #8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 0208 	add.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b085      	sub	sp, #20
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e44:	d103      	bne.n	8008e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	e00c      	b.n	8008e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3308      	adds	r3, #8
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e002      	b.n	8008e5c <vListInsert+0x2e>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d2f6      	bcs.n	8008e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	bf00      	nop
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6892      	ldr	r2, [r2, #8]
 8008eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6852      	ldr	r2, [r2, #4]
 8008ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d103      	bne.n	8008ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
 8008f1e:	e7fd      	b.n	8008f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f20:	f002 fd7a 	bl	800ba18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2c:	68f9      	ldr	r1, [r7, #12]
 8008f2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	441a      	add	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f50:	3b01      	subs	r3, #1
 8008f52:	68f9      	ldr	r1, [r7, #12]
 8008f54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f56:	fb01 f303 	mul.w	r3, r1, r3
 8008f5a:	441a      	add	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	22ff      	movs	r2, #255	@ 0xff
 8008f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	22ff      	movs	r2, #255	@ 0xff
 8008f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d114      	bne.n	8008fa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01a      	beq.n	8008fb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3310      	adds	r3, #16
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fd02 	bl	800a98c <xTaskRemoveFromEventList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d012      	beq.n	8008fb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc4 <xQueueGenericReset+0xd0>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e009      	b.n	8008fb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3310      	adds	r3, #16
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fef1 	bl	8008d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3324      	adds	r3, #36	@ 0x24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff feec 	bl	8008d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fb4:	f002 fd62 	bl	800ba7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fb8:	2301      	movs	r3, #1
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed04 	.word	0xe000ed04

08008fc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	@ 0x38
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <xQueueGenericCreateStatic+0x56>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <xQueueGenericCreateStatic+0x5a>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <xQueueGenericCreateStatic+0x5c>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10b      	bne.n	8009040 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	623b      	str	r3, [r7, #32]
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	e7fd      	b.n	800903c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <xQueueGenericCreateStatic+0x84>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <xQueueGenericCreateStatic+0x88>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <xQueueGenericCreateStatic+0x8a>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	61fb      	str	r3, [r7, #28]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800906e:	2350      	movs	r3, #80	@ 0x50
 8009070:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b50      	cmp	r3, #80	@ 0x50
 8009076:	d00b      	beq.n	8009090 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	61bb      	str	r3, [r7, #24]
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	e7fd      	b.n	800908c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009090:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00d      	beq.n	80090b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800909c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80090a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 f840 	bl	8009138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3730      	adds	r7, #48	@ 0x30
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b08a      	sub	sp, #40	@ 0x28
 80090c6:	af02      	add	r7, sp, #8
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	4613      	mov	r3, r2
 80090ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <xQueueGenericCreate+0x2c>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	613b      	str	r3, [r7, #16]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3350      	adds	r3, #80	@ 0x50
 80090fc:	4618      	mov	r0, r3
 80090fe:	f002 fdad 	bl	800bc5c <pvPortMalloc>
 8009102:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d011      	beq.n	800912e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	3350      	adds	r3, #80	@ 0x50
 8009112:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800911c:	79fa      	ldrb	r2, [r7, #7]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4613      	mov	r3, r2
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f805 	bl	8009138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800912e:	69bb      	ldr	r3, [r7, #24]
	}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d103      	bne.n	8009154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e002      	b.n	800915a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009166:	2101      	movs	r1, #1
 8009168:	69b8      	ldr	r0, [r7, #24]
 800916a:	f7ff fec3 	bl	8008ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00e      	beq.n	80091aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800919e:	2300      	movs	r3, #0
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8a3 	bl	80092f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	4603      	mov	r3, r0
 80091ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	461a      	mov	r2, r3
 80091c8:	6939      	ldr	r1, [r7, #16]
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f7ff ff79 	bl	80090c2 <xQueueGenericCreate>
 80091d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff ffd3 	bl	800917e <prvInitialiseMutex>

		return xNewQueue;
 80091d8:	68fb      	ldr	r3, [r7, #12]
	}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b088      	sub	sp, #32
 80091e6:	af02      	add	r7, sp, #8
 80091e8:	4603      	mov	r3, r0
 80091ea:	6039      	str	r1, [r7, #0]
 80091ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f7ff fee1 	bl	8008fc8 <xQueueGenericCreateStatic>
 8009206:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff ffb8 	bl	800917e <prvInitialiseMutex>

		return xNewQueue;
 800920e:	68fb      	ldr	r3, [r7, #12]
	}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	60fb      	str	r3, [r7, #12]
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	e7fd      	b.n	800923e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	689c      	ldr	r4, [r3, #8]
 8009246:	f001 fd67 	bl	800ad18 <xTaskGetCurrentTaskHandle>
 800924a:	4603      	mov	r3, r0
 800924c:	429c      	cmp	r4, r3
 800924e:	d111      	bne.n	8009274 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	1e5a      	subs	r2, r3, #1
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6938      	ldr	r0, [r7, #16]
 800926a:	f000 f841 	bl	80092f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e001      	b.n	8009278 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009278:	697b      	ldr	r3, [r7, #20]
	}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}

08009282 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009282:	b590      	push	{r4, r7, lr}
 8009284:	b087      	sub	sp, #28
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10b      	bne.n	80092ae <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	60fb      	str	r3, [r7, #12]
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	e7fd      	b.n	80092aa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	689c      	ldr	r4, [r3, #8]
 80092b2:	f001 fd31 	bl	800ad18 <xTaskGetCurrentTaskHandle>
 80092b6:	4603      	mov	r3, r0
 80092b8:	429c      	cmp	r4, r3
 80092ba:	d107      	bne.n	80092cc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80092c6:	2301      	movs	r3, #1
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e00c      	b.n	80092e6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6938      	ldr	r0, [r7, #16]
 80092d0:	f000 fa90 	bl	80097f4 <xQueueSemaphoreTake>
 80092d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d004      	beq.n	80092e6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80092e6:	697b      	ldr	r3, [r7, #20]
	}
 80092e8:	4618      	mov	r0, r3
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd90      	pop	{r4, r7, pc}

080092f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08e      	sub	sp, #56	@ 0x38
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092fe:	2300      	movs	r3, #0
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <xQueueGenericSend+0x34>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <xQueueGenericSend+0x42>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueGenericSend+0x46>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueGenericSend+0x48>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10b      	bne.n	8009354 <xQueueGenericSend+0x64>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d103      	bne.n	8009362 <xQueueGenericSend+0x72>
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d101      	bne.n	8009366 <xQueueGenericSend+0x76>
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <xQueueGenericSend+0x78>
 8009366:	2300      	movs	r3, #0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <xQueueGenericSend+0x94>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	623b      	str	r3, [r7, #32]
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009384:	f001 fcd8 	bl	800ad38 <xTaskGetSchedulerState>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <xQueueGenericSend+0xa4>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <xQueueGenericSend+0xa8>
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <xQueueGenericSend+0xaa>
 8009398:	2300      	movs	r3, #0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	61fb      	str	r3, [r7, #28]
}
 80093b0:	bf00      	nop
 80093b2:	bf00      	nop
 80093b4:	e7fd      	b.n	80093b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093b6:	f002 fb2f 	bl	800ba18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <xQueueGenericSend+0xdc>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d129      	bne.n	8009420 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093d2:	f000 fcdb 	bl	8009d8c <prvCopyDataToQueue>
 80093d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	3324      	adds	r3, #36	@ 0x24
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fad1 	bl	800a98c <xTaskRemoveFromEventList>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d013      	beq.n	8009418 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093f0:	4b3f      	ldr	r3, [pc, #252]	@ (80094f0 <xQueueGenericSend+0x200>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	e00a      	b.n	8009418 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d007      	beq.n	8009418 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009408:	4b39      	ldr	r3, [pc, #228]	@ (80094f0 <xQueueGenericSend+0x200>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009418:	f002 fb30 	bl	800ba7c <vPortExitCritical>
				return pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	e063      	b.n	80094e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009426:	f002 fb29 	bl	800ba7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800942a:	2300      	movs	r3, #0
 800942c:	e05c      	b.n	80094e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009434:	f107 0314 	add.w	r3, r7, #20
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fb0b 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009442:	f002 fb1b 	bl	800ba7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009446:	f001 f873 	bl	800a530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800944a:	f002 fae5 	bl	800ba18 <vPortEnterCritical>
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009454:	b25b      	sxtb	r3, r3
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800945a:	d103      	bne.n	8009464 <xQueueGenericSend+0x174>
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800946a:	b25b      	sxtb	r3, r3
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x18a>
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800947a:	f002 faff 	bl	800ba7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800947e:	1d3a      	adds	r2, r7, #4
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f001 fafa 	bl	800aa80 <xTaskCheckForTimeOut>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d124      	bne.n	80094dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009494:	f000 fd72 	bl	8009f7c <prvIsQueueFull>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d018      	beq.n	80094d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	3310      	adds	r3, #16
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 fa1e 	bl	800a8e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094ae:	f000 fcfd 	bl	8009eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094b2:	f001 f84b 	bl	800a54c <xTaskResumeAll>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f47f af7c 	bne.w	80093b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <xQueueGenericSend+0x200>)
 80094c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	e772      	b.n	80093b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094d2:	f000 fceb 	bl	8009eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094d6:	f001 f839 	bl	800a54c <xTaskResumeAll>
 80094da:	e76c      	b.n	80093b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094de:	f000 fce5 	bl	8009eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094e2:	f001 f833 	bl	800a54c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3738      	adds	r7, #56	@ 0x38
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b090      	sub	sp, #64	@ 0x40
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d103      	bne.n	8009532 <xQueueGenericSendFromISR+0x3e>
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <xQueueGenericSendFromISR+0x42>
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <xQueueGenericSendFromISR+0x44>
 8009536:	2300      	movs	r3, #0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10b      	bne.n	8009554 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800954e:	bf00      	nop
 8009550:	bf00      	nop
 8009552:	e7fd      	b.n	8009550 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d103      	bne.n	8009562 <xQueueGenericSendFromISR+0x6e>
 800955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <xQueueGenericSendFromISR+0x72>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <xQueueGenericSendFromISR+0x74>
 8009566:	2300      	movs	r3, #0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	623b      	str	r3, [r7, #32]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009584:	f002 fb28 	bl	800bbd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009588:	f3ef 8211 	mrs	r2, BASEPRI
 800958c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	61fa      	str	r2, [r7, #28]
 800959e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d302      	bcc.n	80095b6 <xQueueGenericSendFromISR+0xc2>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d12f      	bne.n	8009616 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095cc:	f000 fbde 	bl	8009d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80095d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d8:	d112      	bne.n	8009600 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d016      	beq.n	8009610 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	3324      	adds	r3, #36	@ 0x24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 f9d0 	bl	800a98c <xTaskRemoveFromEventList>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e007      	b.n	8009610 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009600:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009604:	3301      	adds	r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	b25a      	sxtb	r2, r3
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009610:	2301      	movs	r3, #1
 8009612:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009614:	e001      	b.n	800961a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009616:	2300      	movs	r3, #0
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800961a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009628:	4618      	mov	r0, r3
 800962a:	3740      	adds	r7, #64	@ 0x40
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08c      	sub	sp, #48	@ 0x30
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800963c:	2300      	movs	r3, #0
 800963e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <xQueueReceive+0x32>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	623b      	str	r3, [r7, #32]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <xQueueReceive+0x40>
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <xQueueReceive+0x44>
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <xQueueReceive+0x46>
 8009674:	2300      	movs	r3, #0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <xQueueReceive+0x62>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	61fb      	str	r3, [r7, #28]
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	e7fd      	b.n	800968e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009692:	f001 fb51 	bl	800ad38 <xTaskGetSchedulerState>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <xQueueReceive+0x72>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <xQueueReceive+0x76>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <xQueueReceive+0x78>
 80096a6:	2300      	movs	r3, #0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10b      	bne.n	80096c4 <xQueueReceive+0x94>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	61bb      	str	r3, [r7, #24]
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096c4:	f002 f9a8 	bl	800ba18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01f      	beq.n	8009714 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096d8:	f000 fbc2 	bl	8009e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	1e5a      	subs	r2, r3, #1
 80096e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00f      	beq.n	800970c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	3310      	adds	r3, #16
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 f94b 	bl	800a98c <xTaskRemoveFromEventList>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096fc:	4b3c      	ldr	r3, [pc, #240]	@ (80097f0 <xQueueReceive+0x1c0>)
 80096fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800970c:	f002 f9b6 	bl	800ba7c <vPortExitCritical>
				return pdPASS;
 8009710:	2301      	movs	r3, #1
 8009712:	e069      	b.n	80097e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800971a:	f002 f9af 	bl	800ba7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800971e:	2300      	movs	r3, #0
 8009720:	e062      	b.n	80097e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009728:	f107 0310 	add.w	r3, r7, #16
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f991 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009732:	2301      	movs	r3, #1
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009736:	f002 f9a1 	bl	800ba7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800973a:	f000 fef9 	bl	800a530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800973e:	f002 f96b 	bl	800ba18 <vPortEnterCritical>
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009748:	b25b      	sxtb	r3, r3
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800974e:	d103      	bne.n	8009758 <xQueueReceive+0x128>
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800975e:	b25b      	sxtb	r3, r3
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009764:	d103      	bne.n	800976e <xQueueReceive+0x13e>
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800976e:	f002 f985 	bl	800ba7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009772:	1d3a      	adds	r2, r7, #4
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	4611      	mov	r1, r2
 800977a:	4618      	mov	r0, r3
 800977c:	f001 f980 	bl	800aa80 <xTaskCheckForTimeOut>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d123      	bne.n	80097ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009788:	f000 fbe2 	bl	8009f50 <prvIsQueueEmpty>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d017      	beq.n	80097c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	3324      	adds	r3, #36	@ 0x24
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f001 f8a4 	bl	800a8e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097a2:	f000 fb83 	bl	8009eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097a6:	f000 fed1 	bl	800a54c <xTaskResumeAll>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d189      	bne.n	80096c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80097b0:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <xQueueReceive+0x1c0>)
 80097b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	e780      	b.n	80096c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c4:	f000 fb72 	bl	8009eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097c8:	f000 fec0 	bl	800a54c <xTaskResumeAll>
 80097cc:	e77a      	b.n	80096c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097d0:	f000 fb6c 	bl	8009eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097d4:	f000 feba 	bl	800a54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097da:	f000 fbb9 	bl	8009f50 <prvIsQueueEmpty>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f43f af6f 	beq.w	80096c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3730      	adds	r7, #48	@ 0x30
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08e      	sub	sp, #56	@ 0x38
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80097fe:	2300      	movs	r3, #0
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	623b      	str	r3, [r7, #32]
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	61fb      	str	r3, [r7, #28]
}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	e7fd      	b.n	8009844 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009848:	f001 fa76 	bl	800ad38 <xTaskGetSchedulerState>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <xQueueSemaphoreTake+0x64>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <xQueueSemaphoreTake+0x68>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <xQueueSemaphoreTake+0x6a>
 800985c:	2300      	movs	r3, #0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61bb      	str	r3, [r7, #24]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800987a:	f002 f8cd 	bl	800ba18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d024      	beq.n	80098d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800989a:	f001 fbc7 	bl	800b02c <pvTaskIncrementMutexHeldCount>
 800989e:	4602      	mov	r2, r0
 80098a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	3310      	adds	r3, #16
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 f86b 	bl	800a98c <xTaskRemoveFromEventList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098bc:	4b54      	ldr	r3, [pc, #336]	@ (8009a10 <xQueueSemaphoreTake+0x21c>)
 80098be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098cc:	f002 f8d6 	bl	800ba7c <vPortExitCritical>
				return pdPASS;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e098      	b.n	8009a06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d112      	bne.n	8009900 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	617b      	str	r3, [r7, #20]
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80098f8:	f002 f8c0 	bl	800ba7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e082      	b.n	8009a06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009906:	f107 030c 	add.w	r3, r7, #12
 800990a:	4618      	mov	r0, r3
 800990c:	f001 f8a2 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009914:	f002 f8b2 	bl	800ba7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009918:	f000 fe0a 	bl	800a530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800991c:	f002 f87c 	bl	800ba18 <vPortEnterCritical>
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009926:	b25b      	sxtb	r3, r3
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800992c:	d103      	bne.n	8009936 <xQueueSemaphoreTake+0x142>
 800992e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800993c:	b25b      	sxtb	r3, r3
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009942:	d103      	bne.n	800994c <xQueueSemaphoreTake+0x158>
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800994c:	f002 f896 	bl	800ba7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009950:	463a      	mov	r2, r7
 8009952:	f107 030c 	add.w	r3, r7, #12
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f001 f891 	bl	800aa80 <xTaskCheckForTimeOut>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d132      	bne.n	80099ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009964:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009966:	f000 faf3 	bl	8009f50 <prvIsQueueEmpty>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d026      	beq.n	80099be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009978:	f002 f84e 	bl	800ba18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800997c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f9f7 	bl	800ad74 <xTaskPriorityInherit>
 8009986:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009988:	f002 f878 	bl	800ba7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998e:	3324      	adds	r3, #36	@ 0x24
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f000 ffa7 	bl	800a8e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800999a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800999c:	f000 fa86 	bl	8009eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099a0:	f000 fdd4 	bl	800a54c <xTaskResumeAll>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f47f af67 	bne.w	800987a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80099ac:	4b18      	ldr	r3, [pc, #96]	@ (8009a10 <xQueueSemaphoreTake+0x21c>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	e75d      	b.n	800987a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80099be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099c0:	f000 fa74 	bl	8009eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099c4:	f000 fdc2 	bl	800a54c <xTaskResumeAll>
 80099c8:	e757      	b.n	800987a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80099ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099cc:	f000 fa6e 	bl	8009eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099d0:	f000 fdbc 	bl	800a54c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099d6:	f000 fabb 	bl	8009f50 <prvIsQueueEmpty>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f43f af4c 	beq.w	800987a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80099e8:	f002 f816 	bl	800ba18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80099ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099ee:	f000 f9b5 	bl	8009d5c <prvGetDisinheritPriorityAfterTimeout>
 80099f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fa92 	bl	800af24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a00:	f002 f83c 	bl	800ba7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3738      	adds	r7, #56	@ 0x38
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08e      	sub	sp, #56	@ 0x38
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <xQueuePeek+0x32>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <xQueuePeek+0x40>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <xQueuePeek+0x44>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <xQueuePeek+0x46>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <xQueuePeek+0x62>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	623b      	str	r3, [r7, #32]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a76:	f001 f95f 	bl	800ad38 <xTaskGetSchedulerState>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d102      	bne.n	8009a86 <xQueuePeek+0x72>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <xQueuePeek+0x76>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e000      	b.n	8009a8c <xQueuePeek+0x78>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10b      	bne.n	8009aa8 <xQueuePeek+0x94>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	61fb      	str	r3, [r7, #28]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009aa8:	f001 ffb6 	bl	800ba18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d021      	beq.n	8009afc <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ac2:	f000 f9cd 	bl	8009e60 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aca:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00f      	beq.n	8009af4 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	3324      	adds	r3, #36	@ 0x24
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 ff57 	bl	800a98c <xTaskRemoveFromEventList>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8009bd8 <xQueuePeek+0x1c4>)
 8009ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009af4:	f001 ffc2 	bl	800ba7c <vPortExitCritical>
				return pdPASS;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e069      	b.n	8009bd0 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d103      	bne.n	8009b0a <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b02:	f001 ffbb 	bl	800ba7c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e062      	b.n	8009bd0 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d106      	bne.n	8009b1e <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b10:	f107 0314 	add.w	r3, r7, #20
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 ff9d 	bl	800aa54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b1e:	f001 ffad 	bl	800ba7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b22:	f000 fd05 	bl	800a530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b26:	f001 ff77 	bl	800ba18 <vPortEnterCritical>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b36:	d103      	bne.n	8009b40 <xQueuePeek+0x12c>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b4c:	d103      	bne.n	8009b56 <xQueuePeek+0x142>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b56:	f001 ff91 	bl	800ba7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b5a:	1d3a      	adds	r2, r7, #4
 8009b5c:	f107 0314 	add.w	r3, r7, #20
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 ff8c 	bl	800aa80 <xTaskCheckForTimeOut>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d123      	bne.n	8009bb6 <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b70:	f000 f9ee 	bl	8009f50 <prvIsQueueEmpty>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d017      	beq.n	8009baa <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	3324      	adds	r3, #36	@ 0x24
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 feb0 	bl	800a8e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b8a:	f000 f98f 	bl	8009eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b8e:	f000 fcdd 	bl	800a54c <xTaskResumeAll>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d187      	bne.n	8009aa8 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 8009b98:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <xQueuePeek+0x1c4>)
 8009b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	e77e      	b.n	8009aa8 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8009baa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bac:	f000 f97e 	bl	8009eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bb0:	f000 fccc 	bl	800a54c <xTaskResumeAll>
 8009bb4:	e778      	b.n	8009aa8 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8009bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bb8:	f000 f978 	bl	8009eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bbc:	f000 fcc6 	bl	800a54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bc2:	f000 f9c5 	bl	8009f50 <prvIsQueueEmpty>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f43f af6d 	beq.w	8009aa8 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3738      	adds	r7, #56	@ 0x38
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	@ 0x38
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10b      	bne.n	8009c0a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	623b      	str	r3, [r7, #32]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d103      	bne.n	8009c18 <xQueueReceiveFromISR+0x3c>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <xQueueReceiveFromISR+0x40>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <xQueueReceiveFromISR+0x42>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61fb      	str	r3, [r7, #28]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c3a:	f001 ffcd 	bl	800bbd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	61ba      	str	r2, [r7, #24]
 8009c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02f      	beq.n	8009cc6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c74:	f000 f8f4 	bl	8009e60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	1e5a      	subs	r2, r3, #1
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c88:	d112      	bne.n	8009cb0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d016      	beq.n	8009cc0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	3310      	adds	r3, #16
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fe78 	bl	800a98c <xTaskRemoveFromEventList>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00e      	beq.n	8009cc0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e007      	b.n	8009cc0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	b25a      	sxtb	r2, r3
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc4:	e001      	b.n	8009cca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f383 8811 	msr	BASEPRI, r3
}
 8009cd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3738      	adds	r7, #56	@ 0x38
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10b      	bne.n	8009d06 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	60bb      	str	r3, [r7, #8]
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	e7fd      	b.n	8009d02 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009d06:	f001 fe87 	bl	800ba18 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009d10:	f001 feb4 	bl	800ba7c <vPortExitCritical>

	return uxReturn;
 8009d14:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10b      	bne.n	8009d48 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009d4e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d50:	4618      	mov	r0, r3
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d006      	beq.n	8009d7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e001      	b.n	8009d7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10d      	bne.n	8009dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d14d      	bne.n	8009e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 f844 	bl	800ae44 <xTaskPriorityDisinherit>
 8009dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	609a      	str	r2, [r3, #8]
 8009dc4:	e043      	b.n	8009e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d119      	bne.n	8009e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6858      	ldr	r0, [r3, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	f019 f91f 	bl	802301a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de4:	441a      	add	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d32b      	bcc.n	8009e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	e026      	b.n	8009e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	68d8      	ldr	r0, [r3, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	f019 f905 	bl	802301a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e18:	425b      	negs	r3, r3
 8009e1a:	441a      	add	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d207      	bcs.n	8009e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e34:	425b      	negs	r3, r3
 8009e36:	441a      	add	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d105      	bne.n	8009e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009e56:	697b      	ldr	r3, [r7, #20]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d018      	beq.n	8009ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	441a      	add	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d303      	bcc.n	8009e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68d9      	ldr	r1, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	6838      	ldr	r0, [r7, #0]
 8009ea0:	f019 f8bb 	bl	802301a <memcpy>
	}
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009eb4:	f001 fdb0 	bl	800ba18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ec0:	e011      	b.n	8009ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d012      	beq.n	8009ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3324      	adds	r3, #36	@ 0x24
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fd5c 	bl	800a98c <xTaskRemoveFromEventList>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009eda:	f000 fe35 	bl	800ab48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dce9      	bgt.n	8009ec2 <prvUnlockQueue+0x16>
 8009eee:	e000      	b.n	8009ef2 <prvUnlockQueue+0x46>
					break;
 8009ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	22ff      	movs	r2, #255	@ 0xff
 8009ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009efa:	f001 fdbf 	bl	800ba7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009efe:	f001 fd8b 	bl	800ba18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f0a:	e011      	b.n	8009f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d012      	beq.n	8009f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3310      	adds	r3, #16
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fd37 	bl	800a98c <xTaskRemoveFromEventList>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f24:	f000 fe10 	bl	800ab48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dce9      	bgt.n	8009f0c <prvUnlockQueue+0x60>
 8009f38:	e000      	b.n	8009f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	22ff      	movs	r2, #255	@ 0xff
 8009f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009f44:	f001 fd9a 	bl	800ba7c <vPortExitCritical>
}
 8009f48:	bf00      	nop
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f58:	f001 fd5e 	bl	800ba18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	e001      	b.n	8009f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f6e:	f001 fd85 	bl	800ba7c <vPortExitCritical>

	return xReturn;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f84:	f001 fd48 	bl	800ba18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d102      	bne.n	8009f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e001      	b.n	8009f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f9e:	f001 fd6d 	bl	800ba7c <vPortExitCritical>

	return xReturn;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e014      	b.n	8009fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8009ffc <vQueueAddToRegistry+0x50>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009fc8:	490c      	ldr	r1, [pc, #48]	@ (8009ffc <vQueueAddToRegistry+0x50>)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ffc <vQueueAddToRegistry+0x50>)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	4413      	add	r3, r2
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009fde:	e006      	b.n	8009fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b07      	cmp	r3, #7
 8009fea:	d9e7      	bls.n	8009fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20001064 	.word	0x20001064

0800a000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a010:	f001 fd02 	bl	800ba18 <vPortEnterCritical>
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a01a:	b25b      	sxtb	r3, r3
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a020:	d103      	bne.n	800a02a <vQueueWaitForMessageRestricted+0x2a>
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a030:	b25b      	sxtb	r3, r3
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a036:	d103      	bne.n	800a040 <vQueueWaitForMessageRestricted+0x40>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a040:	f001 fd1c 	bl	800ba7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d106      	bne.n	800a05a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3324      	adds	r3, #36	@ 0x24
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fc6d 	bl	800a934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a05a:	6978      	ldr	r0, [r7, #20]
 800a05c:	f7ff ff26 	bl	8009eac <prvUnlockQueue>
	}
 800a060:	bf00      	nop
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08e      	sub	sp, #56	@ 0x38
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10b      	bne.n	800a094 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	623b      	str	r3, [r7, #32]
}
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	e7fd      	b.n	800a090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	61fb      	str	r3, [r7, #28]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0b2:	23a8      	movs	r3, #168	@ 0xa8
 800a0b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a0ba:	d00b      	beq.n	800a0d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61bb      	str	r3, [r7, #24]
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	e7fd      	b.n	800a0d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01e      	beq.n	800a11a <xTaskCreateStatic+0xb2>
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01b      	beq.n	800a11a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9303      	str	r3, [sp, #12]
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f851 	bl	800a1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a114:	f000 f8f6 	bl	800a304 <prvAddNewTaskToReadyList>
 800a118:	e001      	b.n	800a11e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a11e:	697b      	ldr	r3, [r7, #20]
	}
 800a120:	4618      	mov	r0, r3
 800a122:	3728      	adds	r7, #40	@ 0x28
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08c      	sub	sp, #48	@ 0x30
 800a12c:	af04      	add	r7, sp, #16
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	4613      	mov	r3, r2
 800a136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 fd8d 	bl	800bc5c <pvPortMalloc>
 800a142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00e      	beq.n	800a168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a14a:	20a8      	movs	r0, #168	@ 0xa8
 800a14c:	f001 fd86 	bl	800bc5c <pvPortMalloc>
 800a150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a15e:	e005      	b.n	800a16c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a160:	6978      	ldr	r0, [r7, #20]
 800a162:	f001 fe49 	bl	800bdf8 <vPortFree>
 800a166:	e001      	b.n	800a16c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d017      	beq.n	800a1a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	2300      	movs	r3, #0
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	9302      	str	r3, [sp, #8]
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f80f 	bl	800a1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a196:	69f8      	ldr	r0, [r7, #28]
 800a198:	f000 f8b4 	bl	800a304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a19c:	2301      	movs	r3, #1
 800a19e:	61bb      	str	r3, [r7, #24]
 800a1a0:	e002      	b.n	800a1a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
	}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3720      	adds	r7, #32
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	21a5      	movs	r1, #165	@ 0xa5
 800a1ce:	f018 fe43 	bl	8022e58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f023 0307 	bic.w	r3, r3, #7
 800a1ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	617b      	str	r3, [r7, #20]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01f      	beq.n	800a254 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
 800a218:	e012      	b.n	800a240 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	4413      	add	r3, r2
 800a220:	7819      	ldrb	r1, [r3, #0]
 800a222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	3334      	adds	r3, #52	@ 0x34
 800a22a:	460a      	mov	r2, r1
 800a22c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3301      	adds	r3, #1
 800a23e:	61fb      	str	r3, [r7, #28]
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	2b0f      	cmp	r3, #15
 800a244:	d9e9      	bls.n	800a21a <prvInitialiseNewTask+0x66>
 800a246:	e000      	b.n	800a24a <prvInitialiseNewTask+0x96>
			{
				break;
 800a248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a252:	e003      	b.n	800a25c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25e:	2b37      	cmp	r3, #55	@ 0x37
 800a260:	d901      	bls.n	800a266 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a262:	2337      	movs	r3, #55	@ 0x37
 800a264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a26a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	2200      	movs	r2, #0
 800a276:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	3304      	adds	r3, #4
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fda5 	bl	8008dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	3318      	adds	r3, #24
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fda0 	bl	8008dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3354      	adds	r3, #84	@ 0x54
 800a2b6:	224c      	movs	r2, #76	@ 0x4c
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f018 fdcc 	bl	8022e58 <memset>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f8 <prvInitialiseNewTask+0x144>)
 800a2c4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a2fc <prvInitialiseNewTask+0x148>)
 800a2ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a300 <prvInitialiseNewTask+0x14c>)
 800a2d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	68f9      	ldr	r1, [r7, #12]
 800a2d6:	69b8      	ldr	r0, [r7, #24]
 800a2d8:	f001 fa6a 	bl	800b7b0 <pxPortInitialiseStack>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200178d8 	.word	0x200178d8
 800a2fc:	20017940 	.word	0x20017940
 800a300:	200179a8 	.word	0x200179a8

0800a304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a30c:	f001 fb84 	bl	800ba18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a310:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	4a2c      	ldr	r2, [pc, #176]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a31a:	4b2c      	ldr	r3, [pc, #176]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d109      	bne.n	800a336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a322:	4a2a      	ldr	r2, [pc, #168]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a328:	4b27      	ldr	r3, [pc, #156]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d110      	bne.n	800a352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a330:	f000 fc2e 	bl	800ab90 <prvInitialiseTaskLists>
 800a334:	e00d      	b.n	800a352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a336:	4b26      	ldr	r3, [pc, #152]	@ (800a3d0 <prvAddNewTaskToReadyList+0xcc>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d109      	bne.n	800a352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a33e:	4b23      	ldr	r3, [pc, #140]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a348:	429a      	cmp	r2, r3
 800a34a:	d802      	bhi.n	800a352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a34c:	4a1f      	ldr	r2, [pc, #124]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a352:	4b20      	ldr	r3, [pc, #128]	@ (800a3d4 <prvAddNewTaskToReadyList+0xd0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3301      	adds	r3, #1
 800a358:	4a1e      	ldr	r2, [pc, #120]	@ (800a3d4 <prvAddNewTaskToReadyList+0xd0>)
 800a35a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a35c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d4 <prvAddNewTaskToReadyList+0xd0>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a368:	4b1b      	ldr	r3, [pc, #108]	@ (800a3d8 <prvAddNewTaskToReadyList+0xd4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d903      	bls.n	800a378 <prvAddNewTaskToReadyList+0x74>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	4a18      	ldr	r2, [pc, #96]	@ (800a3d8 <prvAddNewTaskToReadyList+0xd4>)
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37c:	4613      	mov	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4a15      	ldr	r2, [pc, #84]	@ (800a3dc <prvAddNewTaskToReadyList+0xd8>)
 800a386:	441a      	add	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4619      	mov	r1, r3
 800a38e:	4610      	mov	r0, r2
 800a390:	f7fe fd29 	bl	8008de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a394:	f001 fb72 	bl	800ba7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a398:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d0 <prvAddNewTaskToReadyList+0xcc>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00e      	beq.n	800a3be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d207      	bcs.n	800a3be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <prvAddNewTaskToReadyList+0xdc>)
 800a3b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20001578 	.word	0x20001578
 800a3cc:	200010a4 	.word	0x200010a4
 800a3d0:	20001584 	.word	0x20001584
 800a3d4:	20001594 	.word	0x20001594
 800a3d8:	20001580 	.word	0x20001580
 800a3dc:	200010a8 	.word	0x200010a8
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d018      	beq.n	800a428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a3f6:	4b14      	ldr	r3, [pc, #80]	@ (800a448 <vTaskDelay+0x64>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00b      	beq.n	800a416 <vTaskDelay+0x32>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	60bb      	str	r3, [r7, #8]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a416:	f000 f88b 	bl	800a530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fe19 	bl	800b054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a422:	f000 f893 	bl	800a54c <xTaskResumeAll>
 800a426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d107      	bne.n	800a43e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a42e:	4b07      	ldr	r3, [pc, #28]	@ (800a44c <vTaskDelay+0x68>)
 800a430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200015a0 	.word	0x200015a0
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	@ 0x28
 800a454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a45e:	463a      	mov	r2, r7
 800a460:	1d39      	adds	r1, r7, #4
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fc5c 	bl	8008d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	9202      	str	r2, [sp, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2300      	movs	r3, #0
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	460a      	mov	r2, r1
 800a47e:	4924      	ldr	r1, [pc, #144]	@ (800a510 <vTaskStartScheduler+0xc0>)
 800a480:	4824      	ldr	r0, [pc, #144]	@ (800a514 <vTaskStartScheduler+0xc4>)
 800a482:	f7ff fdf1 	bl	800a068 <xTaskCreateStatic>
 800a486:	4603      	mov	r3, r0
 800a488:	4a23      	ldr	r2, [pc, #140]	@ (800a518 <vTaskStartScheduler+0xc8>)
 800a48a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a48c:	4b22      	ldr	r3, [pc, #136]	@ (800a518 <vTaskStartScheduler+0xc8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e001      	b.n	800a49e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d102      	bne.n	800a4aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4a4:	f000 fe2a 	bl	800b0fc <xTimerCreateTimerTask>
 800a4a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d11b      	bne.n	800a4e8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4c4:	4b15      	ldr	r3, [pc, #84]	@ (800a51c <vTaskStartScheduler+0xcc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3354      	adds	r3, #84	@ 0x54
 800a4ca:	4a15      	ldr	r2, [pc, #84]	@ (800a520 <vTaskStartScheduler+0xd0>)
 800a4cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4ce:	4b15      	ldr	r3, [pc, #84]	@ (800a524 <vTaskStartScheduler+0xd4>)
 800a4d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4d6:	4b14      	ldr	r3, [pc, #80]	@ (800a528 <vTaskStartScheduler+0xd8>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4dc:	4b13      	ldr	r3, [pc, #76]	@ (800a52c <vTaskStartScheduler+0xdc>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4e2:	f001 f9f5 	bl	800b8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4e6:	e00f      	b.n	800a508 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4ee:	d10b      	bne.n	800a508 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60fb      	str	r3, [r7, #12]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <vTaskStartScheduler+0xb4>
}
 800a508:	bf00      	nop
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	08025b48 	.word	0x08025b48
 800a514:	0800ab61 	.word	0x0800ab61
 800a518:	2000159c 	.word	0x2000159c
 800a51c:	200010a4 	.word	0x200010a4
 800a520:	200002b8 	.word	0x200002b8
 800a524:	20001598 	.word	0x20001598
 800a528:	20001584 	.word	0x20001584
 800a52c:	2000157c 	.word	0x2000157c

0800a530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a530:	b480      	push	{r7}
 800a532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a534:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <vTaskSuspendAll+0x18>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	4a03      	ldr	r2, [pc, #12]	@ (800a548 <vTaskSuspendAll+0x18>)
 800a53c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a53e:	bf00      	nop
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	200015a0 	.word	0x200015a0

0800a54c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a55a:	4b42      	ldr	r3, [pc, #264]	@ (800a664 <xTaskResumeAll+0x118>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <xTaskResumeAll+0x2e>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	603b      	str	r3, [r7, #0]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a57a:	f001 fa4d 	bl	800ba18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a57e:	4b39      	ldr	r3, [pc, #228]	@ (800a664 <xTaskResumeAll+0x118>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3b01      	subs	r3, #1
 800a584:	4a37      	ldr	r2, [pc, #220]	@ (800a664 <xTaskResumeAll+0x118>)
 800a586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a588:	4b36      	ldr	r3, [pc, #216]	@ (800a664 <xTaskResumeAll+0x118>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d162      	bne.n	800a656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a590:	4b35      	ldr	r3, [pc, #212]	@ (800a668 <xTaskResumeAll+0x11c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d05e      	beq.n	800a656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a598:	e02f      	b.n	800a5fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59a:	4b34      	ldr	r3, [pc, #208]	@ (800a66c <xTaskResumeAll+0x120>)
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fc7a 	bl	8008ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fc75 	bl	8008ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a670 <xTaskResumeAll+0x124>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d903      	bls.n	800a5ca <xTaskResumeAll+0x7e>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a670 <xTaskResumeAll+0x124>)
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4a27      	ldr	r2, [pc, #156]	@ (800a674 <xTaskResumeAll+0x128>)
 800a5d8:	441a      	add	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7fe fc00 	bl	8008de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ea:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <xTaskResumeAll+0x12c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d302      	bcc.n	800a5fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a5f4:	4b21      	ldr	r3, [pc, #132]	@ (800a67c <xTaskResumeAll+0x130>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a66c <xTaskResumeAll+0x120>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1cb      	bne.n	800a59a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a608:	f000 fb66 	bl	800acd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a60c:	4b1c      	ldr	r3, [pc, #112]	@ (800a680 <xTaskResumeAll+0x134>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d010      	beq.n	800a63a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a618:	f000 f846 	bl	800a6a8 <xTaskIncrementTick>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a622:	4b16      	ldr	r3, [pc, #88]	@ (800a67c <xTaskResumeAll+0x130>)
 800a624:	2201      	movs	r2, #1
 800a626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1f1      	bne.n	800a618 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a634:	4b12      	ldr	r3, [pc, #72]	@ (800a680 <xTaskResumeAll+0x134>)
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a63a:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <xTaskResumeAll+0x130>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a642:	2301      	movs	r3, #1
 800a644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a646:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <xTaskResumeAll+0x138>)
 800a648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a656:	f001 fa11 	bl	800ba7c <vPortExitCritical>

	return xAlreadyYielded;
 800a65a:	68bb      	ldr	r3, [r7, #8]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	200015a0 	.word	0x200015a0
 800a668:	20001578 	.word	0x20001578
 800a66c:	20001538 	.word	0x20001538
 800a670:	20001580 	.word	0x20001580
 800a674:	200010a8 	.word	0x200010a8
 800a678:	200010a4 	.word	0x200010a4
 800a67c:	2000158c 	.word	0x2000158c
 800a680:	20001588 	.word	0x20001588
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a68e:	4b05      	ldr	r3, [pc, #20]	@ (800a6a4 <xTaskGetTickCount+0x1c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a694:	687b      	ldr	r3, [r7, #4]
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	2000157c 	.word	0x2000157c

0800a6a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a7f0 <xTaskIncrementTick+0x148>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f040 8090 	bne.w	800a7dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a7f4 <xTaskIncrementTick+0x14c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6c4:	4a4b      	ldr	r2, [pc, #300]	@ (800a7f4 <xTaskIncrementTick+0x14c>)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d121      	bne.n	800a714 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6d0:	4b49      	ldr	r3, [pc, #292]	@ (800a7f8 <xTaskIncrementTick+0x150>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00b      	beq.n	800a6f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	603b      	str	r3, [r7, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	bf00      	nop
 800a6f0:	e7fd      	b.n	800a6ee <xTaskIncrementTick+0x46>
 800a6f2:	4b41      	ldr	r3, [pc, #260]	@ (800a7f8 <xTaskIncrementTick+0x150>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	4b40      	ldr	r3, [pc, #256]	@ (800a7fc <xTaskIncrementTick+0x154>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f8 <xTaskIncrementTick+0x150>)
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	4a3e      	ldr	r2, [pc, #248]	@ (800a7fc <xTaskIncrementTick+0x154>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	4b3e      	ldr	r3, [pc, #248]	@ (800a800 <xTaskIncrementTick+0x158>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	4a3c      	ldr	r2, [pc, #240]	@ (800a800 <xTaskIncrementTick+0x158>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	f000 fae2 	bl	800acd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a714:	4b3b      	ldr	r3, [pc, #236]	@ (800a804 <xTaskIncrementTick+0x15c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d349      	bcc.n	800a7b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a71e:	4b36      	ldr	r3, [pc, #216]	@ (800a7f8 <xTaskIncrementTick+0x150>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d104      	bne.n	800a732 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a728:	4b36      	ldr	r3, [pc, #216]	@ (800a804 <xTaskIncrementTick+0x15c>)
 800a72a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a72e:	601a      	str	r2, [r3, #0]
					break;
 800a730:	e03f      	b.n	800a7b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a732:	4b31      	ldr	r3, [pc, #196]	@ (800a7f8 <xTaskIncrementTick+0x150>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d203      	bcs.n	800a752 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a74a:	4a2e      	ldr	r2, [pc, #184]	@ (800a804 <xTaskIncrementTick+0x15c>)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a750:	e02f      	b.n	800a7b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	3304      	adds	r3, #4
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe fba2 	bl	8008ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	3318      	adds	r3, #24
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fb99 	bl	8008ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a772:	4b25      	ldr	r3, [pc, #148]	@ (800a808 <xTaskIncrementTick+0x160>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d903      	bls.n	800a782 <xTaskIncrementTick+0xda>
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77e:	4a22      	ldr	r2, [pc, #136]	@ (800a808 <xTaskIncrementTick+0x160>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4a1f      	ldr	r2, [pc, #124]	@ (800a80c <xTaskIncrementTick+0x164>)
 800a790:	441a      	add	r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f7fe fb24 	bl	8008de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a810 <xTaskIncrementTick+0x168>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d3b8      	bcc.n	800a71e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b0:	e7b5      	b.n	800a71e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7b2:	4b17      	ldr	r3, [pc, #92]	@ (800a810 <xTaskIncrementTick+0x168>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b8:	4914      	ldr	r1, [pc, #80]	@ (800a80c <xTaskIncrementTick+0x164>)
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	440b      	add	r3, r1
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d901      	bls.n	800a7ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7ce:	4b11      	ldr	r3, [pc, #68]	@ (800a814 <xTaskIncrementTick+0x16c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d007      	beq.n	800a7e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e004      	b.n	800a7e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a818 <xTaskIncrementTick+0x170>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800a818 <xTaskIncrementTick+0x170>)
 800a7e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7e6:	697b      	ldr	r3, [r7, #20]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	200015a0 	.word	0x200015a0
 800a7f4:	2000157c 	.word	0x2000157c
 800a7f8:	20001530 	.word	0x20001530
 800a7fc:	20001534 	.word	0x20001534
 800a800:	20001590 	.word	0x20001590
 800a804:	20001598 	.word	0x20001598
 800a808:	20001580 	.word	0x20001580
 800a80c:	200010a8 	.word	0x200010a8
 800a810:	200010a4 	.word	0x200010a4
 800a814:	2000158c 	.word	0x2000158c
 800a818:	20001588 	.word	0x20001588

0800a81c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a822:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d0 <vTaskSwitchContext+0xb4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a82a:	4b2a      	ldr	r3, [pc, #168]	@ (800a8d4 <vTaskSwitchContext+0xb8>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a830:	e047      	b.n	800a8c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a832:	4b28      	ldr	r3, [pc, #160]	@ (800a8d4 <vTaskSwitchContext+0xb8>)
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a838:	4b27      	ldr	r3, [pc, #156]	@ (800a8d8 <vTaskSwitchContext+0xbc>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e011      	b.n	800a864 <vTaskSwitchContext+0x48>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10b      	bne.n	800a85e <vTaskSwitchContext+0x42>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	607b      	str	r3, [r7, #4]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <vTaskSwitchContext+0x3e>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3b01      	subs	r3, #1
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	491d      	ldr	r1, [pc, #116]	@ (800a8dc <vTaskSwitchContext+0xc0>)
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0e3      	beq.n	800a840 <vTaskSwitchContext+0x24>
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4a16      	ldr	r2, [pc, #88]	@ (800a8dc <vTaskSwitchContext+0xc0>)
 800a884:	4413      	add	r3, r2
 800a886:	60bb      	str	r3, [r7, #8]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	605a      	str	r2, [r3, #4]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	3308      	adds	r3, #8
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d104      	bne.n	800a8a8 <vTaskSwitchContext+0x8c>
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	605a      	str	r2, [r3, #4]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a8e0 <vTaskSwitchContext+0xc4>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	4a09      	ldr	r2, [pc, #36]	@ (800a8d8 <vTaskSwitchContext+0xbc>)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8b8:	4b09      	ldr	r3, [pc, #36]	@ (800a8e0 <vTaskSwitchContext+0xc4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3354      	adds	r3, #84	@ 0x54
 800a8be:	4a09      	ldr	r2, [pc, #36]	@ (800a8e4 <vTaskSwitchContext+0xc8>)
 800a8c0:	6013      	str	r3, [r2, #0]
}
 800a8c2:	bf00      	nop
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	200015a0 	.word	0x200015a0
 800a8d4:	2000158c 	.word	0x2000158c
 800a8d8:	20001580 	.word	0x20001580
 800a8dc:	200010a8 	.word	0x200010a8
 800a8e0:	200010a4 	.word	0x200010a4
 800a8e4:	200002b8 	.word	0x200002b8

0800a8e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	60fb      	str	r3, [r7, #12]
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <vTaskPlaceOnEventList+0x48>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3318      	adds	r3, #24
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7fe fa88 	bl	8008e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a91e:	2101      	movs	r1, #1
 800a920:	6838      	ldr	r0, [r7, #0]
 800a922:	f000 fb97 	bl	800b054 <prvAddCurrentTaskToDelayedList>
}
 800a926:	bf00      	nop
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	200010a4 	.word	0x200010a4

0800a934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10b      	bne.n	800a95e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	617b      	str	r3, [r7, #20]
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	e7fd      	b.n	800a95a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a95e:	4b0a      	ldr	r3, [pc, #40]	@ (800a988 <vTaskPlaceOnEventListRestricted+0x54>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3318      	adds	r3, #24
 800a964:	4619      	mov	r1, r3
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7fe fa3d 	bl	8008de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a976:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	68b8      	ldr	r0, [r7, #8]
 800a97c:	f000 fb6a 	bl	800b054 <prvAddCurrentTaskToDelayedList>
	}
 800a980:	bf00      	nop
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	200010a4 	.word	0x200010a4

0800a98c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	60fb      	str	r3, [r7, #12]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3318      	adds	r3, #24
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fa6e 	bl	8008ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa3c <xTaskRemoveFromEventList+0xb0>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d11d      	bne.n	800aa08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fa65 	bl	8008ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	4b19      	ldr	r3, [pc, #100]	@ (800aa40 <xTaskRemoveFromEventList+0xb4>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d903      	bls.n	800a9ea <xTaskRemoveFromEventList+0x5e>
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e6:	4a16      	ldr	r2, [pc, #88]	@ (800aa40 <xTaskRemoveFromEventList+0xb4>)
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4a13      	ldr	r2, [pc, #76]	@ (800aa44 <xTaskRemoveFromEventList+0xb8>)
 800a9f8:	441a      	add	r2, r3
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7fe f9f0 	bl	8008de6 <vListInsertEnd>
 800aa06:	e005      	b.n	800aa14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	3318      	adds	r3, #24
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	480e      	ldr	r0, [pc, #56]	@ (800aa48 <xTaskRemoveFromEventList+0xbc>)
 800aa10:	f7fe f9e9 	bl	8008de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa18:	4b0c      	ldr	r3, [pc, #48]	@ (800aa4c <xTaskRemoveFromEventList+0xc0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d905      	bls.n	800aa2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa26:	4b0a      	ldr	r3, [pc, #40]	@ (800aa50 <xTaskRemoveFromEventList+0xc4>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	e001      	b.n	800aa32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa32:	697b      	ldr	r3, [r7, #20]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200015a0 	.word	0x200015a0
 800aa40:	20001580 	.word	0x20001580
 800aa44:	200010a8 	.word	0x200010a8
 800aa48:	20001538 	.word	0x20001538
 800aa4c:	200010a4 	.word	0x200010a4
 800aa50:	2000158c 	.word	0x2000158c

0800aa54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <vTaskInternalSetTimeOutState+0x24>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <vTaskInternalSetTimeOutState+0x28>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	605a      	str	r2, [r3, #4]
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20001590 	.word	0x20001590
 800aa7c:	2000157c 	.word	0x2000157c

0800aa80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	613b      	str	r3, [r7, #16]
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60fb      	str	r3, [r7, #12]
}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	e7fd      	b.n	800aac2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aac6:	f000 ffa7 	bl	800ba18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aaca:	4b1d      	ldr	r3, [pc, #116]	@ (800ab40 <xTaskCheckForTimeOut+0xc0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aae2:	d102      	bne.n	800aaea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e023      	b.n	800ab32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <xTaskCheckForTimeOut+0xc4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d007      	beq.n	800ab06 <xTaskCheckForTimeOut+0x86>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d302      	bcc.n	800ab06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab00:	2301      	movs	r3, #1
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	e015      	b.n	800ab32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d20b      	bcs.n	800ab28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff ff99 	bl	800aa54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	e004      	b.n	800ab32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab32:	f000 ffa3 	bl	800ba7c <vPortExitCritical>

	return xReturn;
 800ab36:	69fb      	ldr	r3, [r7, #28]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	2000157c 	.word	0x2000157c
 800ab44:	20001590 	.word	0x20001590

0800ab48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	@ (800ab5c <vTaskMissedYield+0x14>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	2000158c 	.word	0x2000158c

0800ab60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab68:	f000 f852 	bl	800ac10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab6c:	4b06      	ldr	r3, [pc, #24]	@ (800ab88 <prvIdleTask+0x28>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d9f9      	bls.n	800ab68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab74:	4b05      	ldr	r3, [pc, #20]	@ (800ab8c <prvIdleTask+0x2c>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab84:	e7f0      	b.n	800ab68 <prvIdleTask+0x8>
 800ab86:	bf00      	nop
 800ab88:	200010a8 	.word	0x200010a8
 800ab8c:	e000ed04 	.word	0xe000ed04

0800ab90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab96:	2300      	movs	r3, #0
 800ab98:	607b      	str	r3, [r7, #4]
 800ab9a:	e00c      	b.n	800abb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4a12      	ldr	r2, [pc, #72]	@ (800abf0 <prvInitialiseTaskLists+0x60>)
 800aba8:	4413      	add	r3, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe f8ee 	bl	8008d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3301      	adds	r3, #1
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b37      	cmp	r3, #55	@ 0x37
 800abba:	d9ef      	bls.n	800ab9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abbc:	480d      	ldr	r0, [pc, #52]	@ (800abf4 <prvInitialiseTaskLists+0x64>)
 800abbe:	f7fe f8e5 	bl	8008d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abc2:	480d      	ldr	r0, [pc, #52]	@ (800abf8 <prvInitialiseTaskLists+0x68>)
 800abc4:	f7fe f8e2 	bl	8008d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abc8:	480c      	ldr	r0, [pc, #48]	@ (800abfc <prvInitialiseTaskLists+0x6c>)
 800abca:	f7fe f8df 	bl	8008d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abce:	480c      	ldr	r0, [pc, #48]	@ (800ac00 <prvInitialiseTaskLists+0x70>)
 800abd0:	f7fe f8dc 	bl	8008d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abd4:	480b      	ldr	r0, [pc, #44]	@ (800ac04 <prvInitialiseTaskLists+0x74>)
 800abd6:	f7fe f8d9 	bl	8008d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abda:	4b0b      	ldr	r3, [pc, #44]	@ (800ac08 <prvInitialiseTaskLists+0x78>)
 800abdc:	4a05      	ldr	r2, [pc, #20]	@ (800abf4 <prvInitialiseTaskLists+0x64>)
 800abde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac0c <prvInitialiseTaskLists+0x7c>)
 800abe2:	4a05      	ldr	r2, [pc, #20]	@ (800abf8 <prvInitialiseTaskLists+0x68>)
 800abe4:	601a      	str	r2, [r3, #0]
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200010a8 	.word	0x200010a8
 800abf4:	20001508 	.word	0x20001508
 800abf8:	2000151c 	.word	0x2000151c
 800abfc:	20001538 	.word	0x20001538
 800ac00:	2000154c 	.word	0x2000154c
 800ac04:	20001564 	.word	0x20001564
 800ac08:	20001530 	.word	0x20001530
 800ac0c:	20001534 	.word	0x20001534

0800ac10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac16:	e019      	b.n	800ac4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac18:	f000 fefe 	bl	800ba18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1c:	4b10      	ldr	r3, [pc, #64]	@ (800ac60 <prvCheckTasksWaitingTermination+0x50>)
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3304      	adds	r3, #4
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe f939 	bl	8008ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <prvCheckTasksWaitingTermination+0x54>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	4a0b      	ldr	r2, [pc, #44]	@ (800ac64 <prvCheckTasksWaitingTermination+0x54>)
 800ac36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac38:	4b0b      	ldr	r3, [pc, #44]	@ (800ac68 <prvCheckTasksWaitingTermination+0x58>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a0a      	ldr	r2, [pc, #40]	@ (800ac68 <prvCheckTasksWaitingTermination+0x58>)
 800ac40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac42:	f000 ff1b 	bl	800ba7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f810 	bl	800ac6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac4c:	4b06      	ldr	r3, [pc, #24]	@ (800ac68 <prvCheckTasksWaitingTermination+0x58>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e1      	bne.n	800ac18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	2000154c 	.word	0x2000154c
 800ac64:	20001578 	.word	0x20001578
 800ac68:	20001560 	.word	0x20001560

0800ac6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3354      	adds	r3, #84	@ 0x54
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f018 f905 	bl	8022e88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d108      	bne.n	800ac9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f001 f8b3 	bl	800bdf8 <vPortFree>
				vPortFree( pxTCB );
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 f8b0 	bl	800bdf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac98:	e019      	b.n	800acce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d103      	bne.n	800acac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 f8a7 	bl	800bdf8 <vPortFree>
	}
 800acaa:	e010      	b.n	800acce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d00b      	beq.n	800acce <prvDeleteTCB+0x62>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	60fb      	str	r3, [r7, #12]
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	e7fd      	b.n	800acca <prvDeleteTCB+0x5e>
	}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acde:	4b0c      	ldr	r3, [pc, #48]	@ (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d104      	bne.n	800acf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	@ (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800acea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800acf0:	e008      	b.n	800ad04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf2:	4b07      	ldr	r3, [pc, #28]	@ (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a04      	ldr	r2, [pc, #16]	@ (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800ad02:	6013      	str	r3, [r2, #0]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20001530 	.word	0x20001530
 800ad14:	20001598 	.word	0x20001598

0800ad18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ad1e:	4b05      	ldr	r3, [pc, #20]	@ (800ad34 <xTaskGetCurrentTaskHandle+0x1c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ad24:	687b      	ldr	r3, [r7, #4]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	200010a4 	.word	0x200010a4

0800ad38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad6c <xTaskGetSchedulerState+0x34>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad46:	2301      	movs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	e008      	b.n	800ad5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4c:	4b08      	ldr	r3, [pc, #32]	@ (800ad70 <xTaskGetSchedulerState+0x38>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d102      	bne.n	800ad5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad54:	2302      	movs	r3, #2
 800ad56:	607b      	str	r3, [r7, #4]
 800ad58:	e001      	b.n	800ad5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad5e:	687b      	ldr	r3, [r7, #4]
	}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	20001584 	.word	0x20001584
 800ad70:	200015a0 	.word	0x200015a0

0800ad74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d051      	beq.n	800ae2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad8e:	4b2a      	ldr	r3, [pc, #168]	@ (800ae38 <xTaskPriorityInherit+0xc4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d241      	bcs.n	800ae1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db06      	blt.n	800adae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada0:	4b25      	ldr	r3, [pc, #148]	@ (800ae38 <xTaskPriorityInherit+0xc4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6959      	ldr	r1, [r3, #20]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4a1f      	ldr	r2, [pc, #124]	@ (800ae3c <xTaskPriorityInherit+0xc8>)
 800adc0:	4413      	add	r3, r2
 800adc2:	4299      	cmp	r1, r3
 800adc4:	d122      	bne.n	800ae0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe f868 	bl	8008ea0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800add0:	4b19      	ldr	r3, [pc, #100]	@ (800ae38 <xTaskPriorityInherit+0xc4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adde:	4b18      	ldr	r3, [pc, #96]	@ (800ae40 <xTaskPriorityInherit+0xcc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d903      	bls.n	800adee <xTaskPriorityInherit+0x7a>
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	4a15      	ldr	r2, [pc, #84]	@ (800ae40 <xTaskPriorityInherit+0xcc>)
 800adec:	6013      	str	r3, [r2, #0]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4a10      	ldr	r2, [pc, #64]	@ (800ae3c <xTaskPriorityInherit+0xc8>)
 800adfc:	441a      	add	r2, r3
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	3304      	adds	r3, #4
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f7fd ffee 	bl	8008de6 <vListInsertEnd>
 800ae0a:	e004      	b.n	800ae16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <xTaskPriorityInherit+0xc4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae16:	2301      	movs	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e008      	b.n	800ae2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae20:	4b05      	ldr	r3, [pc, #20]	@ (800ae38 <xTaskPriorityInherit+0xc4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d201      	bcs.n	800ae2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
	}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	200010a4 	.word	0x200010a4
 800ae3c:	200010a8 	.word	0x200010a8
 800ae40:	20001580 	.word	0x20001580

0800ae44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d058      	beq.n	800af0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae5a:	4b2f      	ldr	r3, [pc, #188]	@ (800af18 <xTaskPriorityDisinherit+0xd4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d00b      	beq.n	800ae7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	60fb      	str	r3, [r7, #12]
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	e7fd      	b.n	800ae78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10b      	bne.n	800ae9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	60bb      	str	r3, [r7, #8]
}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	e7fd      	b.n	800ae98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea0:	1e5a      	subs	r2, r3, #1
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d02c      	beq.n	800af0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d128      	bne.n	800af0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd ffee 	bl	8008ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aedc:	4b0f      	ldr	r3, [pc, #60]	@ (800af1c <xTaskPriorityDisinherit+0xd8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d903      	bls.n	800aeec <xTaskPriorityDisinherit+0xa8>
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	4a0c      	ldr	r2, [pc, #48]	@ (800af1c <xTaskPriorityDisinherit+0xd8>)
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4a09      	ldr	r2, [pc, #36]	@ (800af20 <xTaskPriorityDisinherit+0xdc>)
 800aefa:	441a      	add	r2, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f7fd ff6f 	bl	8008de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af0c:	697b      	ldr	r3, [r7, #20]
	}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	200010a4 	.word	0x200010a4
 800af1c:	20001580 	.word	0x20001580
 800af20:	200010a8 	.word	0x200010a8

0800af24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af32:	2301      	movs	r3, #1
 800af34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d06c      	beq.n	800b016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	60fb      	str	r3, [r7, #12]
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	e7fd      	b.n	800af58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d902      	bls.n	800af6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	61fb      	str	r3, [r7, #28]
 800af6a:	e002      	b.n	800af72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af76:	69fa      	ldr	r2, [r7, #28]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d04c      	beq.n	800b016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	429a      	cmp	r2, r3
 800af84:	d147      	bne.n	800b016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800af86:	4b26      	ldr	r3, [pc, #152]	@ (800b020 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d10b      	bne.n	800afa8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60bb      	str	r3, [r7, #8]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	db04      	blt.n	800afc6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	6959      	ldr	r1, [r3, #20]
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4a13      	ldr	r2, [pc, #76]	@ (800b024 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800afd6:	4413      	add	r3, r2
 800afd8:	4299      	cmp	r1, r3
 800afda:	d11c      	bne.n	800b016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	3304      	adds	r3, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fd ff5d 	bl	8008ea0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afea:	4b0f      	ldr	r3, [pc, #60]	@ (800b028 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d903      	bls.n	800affa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff6:	4a0c      	ldr	r2, [pc, #48]	@ (800b028 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4a07      	ldr	r2, [pc, #28]	@ (800b024 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b008:	441a      	add	r2, r3
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4619      	mov	r1, r3
 800b010:	4610      	mov	r0, r2
 800b012:	f7fd fee8 	bl	8008de6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b016:	bf00      	nop
 800b018:	3720      	adds	r7, #32
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200010a4 	.word	0x200010a4
 800b024:	200010a8 	.word	0x200010a8
 800b028:	20001580 	.word	0x20001580

0800b02c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b030:	4b07      	ldr	r3, [pc, #28]	@ (800b050 <pvTaskIncrementMutexHeldCount+0x24>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b038:	4b05      	ldr	r3, [pc, #20]	@ (800b050 <pvTaskIncrementMutexHeldCount+0x24>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b03e:	3201      	adds	r2, #1
 800b040:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b042:	4b03      	ldr	r3, [pc, #12]	@ (800b050 <pvTaskIncrementMutexHeldCount+0x24>)
 800b044:	681b      	ldr	r3, [r3, #0]
	}
 800b046:	4618      	mov	r0, r3
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	200010a4 	.word	0x200010a4

0800b054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b05e:	4b21      	ldr	r3, [pc, #132]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b064:	4b20      	ldr	r3, [pc, #128]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3304      	adds	r3, #4
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fd ff18 	bl	8008ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b076:	d10a      	bne.n	800b08e <prvAddCurrentTaskToDelayedList+0x3a>
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b07e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4819      	ldr	r0, [pc, #100]	@ (800b0ec <prvAddCurrentTaskToDelayedList+0x98>)
 800b088:	f7fd fead 	bl	8008de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b08c:	e026      	b.n	800b0dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4413      	add	r3, r2
 800b094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b096:	4b14      	ldr	r3, [pc, #80]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d209      	bcs.n	800b0ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a6:	4b12      	ldr	r3, [pc, #72]	@ (800b0f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fd febb 	bl	8008e2e <vListInsert>
}
 800b0b8:	e010      	b.n	800b0dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f7fd feb1 	bl	8008e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d202      	bcs.n	800b0dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0d6:	4a08      	ldr	r2, [pc, #32]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	6013      	str	r3, [r2, #0]
}
 800b0dc:	bf00      	nop
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	2000157c 	.word	0x2000157c
 800b0e8:	200010a4 	.word	0x200010a4
 800b0ec:	20001564 	.word	0x20001564
 800b0f0:	20001534 	.word	0x20001534
 800b0f4:	20001530 	.word	0x20001530
 800b0f8:	20001598 	.word	0x20001598

0800b0fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08a      	sub	sp, #40	@ 0x28
 800b100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b106:	f000 fb13 	bl	800b730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b10a:	4b1d      	ldr	r3, [pc, #116]	@ (800b180 <xTimerCreateTimerTask+0x84>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d021      	beq.n	800b156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b11a:	1d3a      	adds	r2, r7, #4
 800b11c:	f107 0108 	add.w	r1, r7, #8
 800b120:	f107 030c 	add.w	r3, r7, #12
 800b124:	4618      	mov	r0, r3
 800b126:	f7fd fe17 	bl	8008d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	9202      	str	r2, [sp, #8]
 800b132:	9301      	str	r3, [sp, #4]
 800b134:	2302      	movs	r3, #2
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	2300      	movs	r3, #0
 800b13a:	460a      	mov	r2, r1
 800b13c:	4911      	ldr	r1, [pc, #68]	@ (800b184 <xTimerCreateTimerTask+0x88>)
 800b13e:	4812      	ldr	r0, [pc, #72]	@ (800b188 <xTimerCreateTimerTask+0x8c>)
 800b140:	f7fe ff92 	bl	800a068 <xTaskCreateStatic>
 800b144:	4603      	mov	r3, r0
 800b146:	4a11      	ldr	r2, [pc, #68]	@ (800b18c <xTimerCreateTimerTask+0x90>)
 800b148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b14a:	4b10      	ldr	r3, [pc, #64]	@ (800b18c <xTimerCreateTimerTask+0x90>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b152:	2301      	movs	r3, #1
 800b154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10b      	bne.n	800b174 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	613b      	str	r3, [r7, #16]
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	e7fd      	b.n	800b170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b174:	697b      	ldr	r3, [r7, #20]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	200015d4 	.word	0x200015d4
 800b184:	08025b50 	.word	0x08025b50
 800b188:	0800b2c9 	.word	0x0800b2c9
 800b18c:	200015d8 	.word	0x200015d8

0800b190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	@ 0x28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10b      	bne.n	800b1c0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	623b      	str	r3, [r7, #32]
}
 800b1ba:	bf00      	nop
 800b1bc:	bf00      	nop
 800b1be:	e7fd      	b.n	800b1bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1c0:	4b19      	ldr	r3, [pc, #100]	@ (800b228 <xTimerGenericCommand+0x98>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d02a      	beq.n	800b21e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	dc18      	bgt.n	800b20c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1da:	f7ff fdad 	bl	800ad38 <xTaskGetSchedulerState>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d109      	bne.n	800b1f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1e4:	4b10      	ldr	r3, [pc, #64]	@ (800b228 <xTimerGenericCommand+0x98>)
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	f107 0110 	add.w	r1, r7, #16
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f0:	f7fe f87e 	bl	80092f0 <xQueueGenericSend>
 800b1f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1f6:	e012      	b.n	800b21e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b228 <xTimerGenericCommand+0x98>)
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	f107 0110 	add.w	r1, r7, #16
 800b200:	2300      	movs	r3, #0
 800b202:	2200      	movs	r2, #0
 800b204:	f7fe f874 	bl	80092f0 <xQueueGenericSend>
 800b208:	6278      	str	r0, [r7, #36]	@ 0x24
 800b20a:	e008      	b.n	800b21e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <xTimerGenericCommand+0x98>)
 800b20e:	6818      	ldr	r0, [r3, #0]
 800b210:	f107 0110 	add.w	r1, r7, #16
 800b214:	2300      	movs	r3, #0
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	f7fe f96c 	bl	80094f4 <xQueueGenericSendFromISR>
 800b21c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b220:	4618      	mov	r0, r3
 800b222:	3728      	adds	r7, #40	@ 0x28
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	200015d4 	.word	0x200015d4

0800b22c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af02      	add	r7, sp, #8
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b236:	4b23      	ldr	r3, [pc, #140]	@ (800b2c4 <prvProcessExpiredTimer+0x98>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	3304      	adds	r3, #4
 800b244:	4618      	mov	r0, r3
 800b246:	f7fd fe2b 	bl	8008ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d023      	beq.n	800b2a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	699a      	ldr	r2, [r3, #24]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	18d1      	adds	r1, r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	f000 f8d5 	bl	800b414 <prvInsertTimerInActiveList>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d020      	beq.n	800b2b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b270:	2300      	movs	r3, #0
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	2100      	movs	r1, #0
 800b27a:	6978      	ldr	r0, [r7, #20]
 800b27c:	f7ff ff88 	bl	800b190 <xTimerGenericCommand>
 800b280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d114      	bne.n	800b2b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60fb      	str	r3, [r7, #12]
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	e7fd      	b.n	800b29c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a6:	f023 0301 	bic.w	r3, r3, #1
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	6978      	ldr	r0, [r7, #20]
 800b2b8:	4798      	blx	r3
}
 800b2ba:	bf00      	nop
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200015cc 	.word	0x200015cc

0800b2c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2d0:	f107 0308 	add.w	r3, r7, #8
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 f859 	bl	800b38c <prvGetNextExpireTime>
 800b2da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f805 	bl	800b2f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2e6:	f000 f8d7 	bl	800b498 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2ea:	bf00      	nop
 800b2ec:	e7f0      	b.n	800b2d0 <prvTimerTask+0x8>
	...

0800b2f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2fa:	f7ff f919 	bl	800a530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2fe:	f107 0308 	add.w	r3, r7, #8
 800b302:	4618      	mov	r0, r3
 800b304:	f000 f866 	bl	800b3d4 <prvSampleTimeNow>
 800b308:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d130      	bne.n	800b372 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10a      	bne.n	800b32c <prvProcessTimerOrBlockTask+0x3c>
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d806      	bhi.n	800b32c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b31e:	f7ff f915 	bl	800a54c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b322:	68f9      	ldr	r1, [r7, #12]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff ff81 	bl	800b22c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b32a:	e024      	b.n	800b376 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d008      	beq.n	800b344 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b332:	4b13      	ldr	r3, [pc, #76]	@ (800b380 <prvProcessTimerOrBlockTask+0x90>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <prvProcessTimerOrBlockTask+0x50>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <prvProcessTimerOrBlockTask+0x52>
 800b340:	2300      	movs	r3, #0
 800b342:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b344:	4b0f      	ldr	r3, [pc, #60]	@ (800b384 <prvProcessTimerOrBlockTask+0x94>)
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4619      	mov	r1, r3
 800b352:	f7fe fe55 	bl	800a000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b356:	f7ff f8f9 	bl	800a54c <xTaskResumeAll>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b360:	4b09      	ldr	r3, [pc, #36]	@ (800b388 <prvProcessTimerOrBlockTask+0x98>)
 800b362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	f3bf 8f6f 	isb	sy
}
 800b370:	e001      	b.n	800b376 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b372:	f7ff f8eb 	bl	800a54c <xTaskResumeAll>
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	200015d0 	.word	0x200015d0
 800b384:	200015d4 	.word	0x200015d4
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b394:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d0 <prvGetNextExpireTime+0x44>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <prvGetNextExpireTime+0x16>
 800b39e:	2201      	movs	r2, #1
 800b3a0:	e000      	b.n	800b3a4 <prvGetNextExpireTime+0x18>
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d105      	bne.n	800b3bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3b0:	4b07      	ldr	r3, [pc, #28]	@ (800b3d0 <prvGetNextExpireTime+0x44>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	e001      	b.n	800b3c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	200015cc 	.word	0x200015cc

0800b3d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3dc:	f7ff f954 	bl	800a688 <xTaskGetTickCount>
 800b3e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b410 <prvSampleTimeNow+0x3c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d205      	bcs.n	800b3f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3ec:	f000 f93a 	bl	800b664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e002      	b.n	800b3fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3fe:	4a04      	ldr	r2, [pc, #16]	@ (800b410 <prvSampleTimeNow+0x3c>)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	200015dc 	.word	0x200015dc

0800b414 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d812      	bhi.n	800b460 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	429a      	cmp	r2, r3
 800b446:	d302      	bcc.n	800b44e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b448:	2301      	movs	r3, #1
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	e01b      	b.n	800b486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b44e:	4b10      	ldr	r3, [pc, #64]	@ (800b490 <prvInsertTimerInActiveList+0x7c>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3304      	adds	r3, #4
 800b456:	4619      	mov	r1, r3
 800b458:	4610      	mov	r0, r2
 800b45a:	f7fd fce8 	bl	8008e2e <vListInsert>
 800b45e:	e012      	b.n	800b486 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d206      	bcs.n	800b476 <prvInsertTimerInActiveList+0x62>
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d302      	bcc.n	800b476 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	e007      	b.n	800b486 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b476:	4b07      	ldr	r3, [pc, #28]	@ (800b494 <prvInsertTimerInActiveList+0x80>)
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7fd fcd4 	bl	8008e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b486:	697b      	ldr	r3, [r7, #20]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	200015d0 	.word	0x200015d0
 800b494:	200015cc 	.word	0x200015cc

0800b498 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	@ 0x38
 800b49c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b49e:	e0ce      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da19      	bge.n	800b4da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4a6:	1d3b      	adds	r3, r7, #4
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10b      	bne.n	800b4ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	61fb      	str	r3, [r7, #28]
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d0:	6850      	ldr	r0, [r2, #4]
 800b4d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d4:	6892      	ldr	r2, [r2, #8]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f2c0 80ae 	blt.w	800b63e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd fcd4 	bl	8008ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff ff6a 	bl	800b3d4 <prvSampleTimeNow>
 800b500:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b09      	cmp	r3, #9
 800b506:	f200 8097 	bhi.w	800b638 <prvProcessReceivedCommands+0x1a0>
 800b50a:	a201      	add	r2, pc, #4	@ (adr r2, 800b510 <prvProcessReceivedCommands+0x78>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b539 	.word	0x0800b539
 800b514:	0800b539 	.word	0x0800b539
 800b518:	0800b539 	.word	0x0800b539
 800b51c:	0800b5af 	.word	0x0800b5af
 800b520:	0800b5c3 	.word	0x0800b5c3
 800b524:	0800b60f 	.word	0x0800b60f
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b539 	.word	0x0800b539
 800b530:	0800b5af 	.word	0x0800b5af
 800b534:	0800b5c3 	.word	0x0800b5c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b53e:	f043 0301 	orr.w	r3, r3, #1
 800b542:	b2da      	uxtb	r2, r3
 800b544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b546:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	18d1      	adds	r1, r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b558:	f7ff ff5c 	bl	800b414 <prvInsertTimerInActiveList>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d06c      	beq.n	800b63c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b568:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b570:	f003 0304 	and.w	r3, r3, #4
 800b574:	2b00      	cmp	r3, #0
 800b576:	d061      	beq.n	800b63c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	441a      	add	r2, r3
 800b580:	2300      	movs	r3, #0
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	2300      	movs	r3, #0
 800b586:	2100      	movs	r1, #0
 800b588:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b58a:	f7ff fe01 	bl	800b190 <xTimerGenericCommand>
 800b58e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d152      	bne.n	800b63c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	61bb      	str	r3, [r7, #24]
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5b4:	f023 0301 	bic.w	r3, r3, #1
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5c0:	e03d      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	617b      	str	r3, [r7, #20]
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	e7fd      	b.n	800b5f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fc:	699a      	ldr	r2, [r3, #24]
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	18d1      	adds	r1, r2, r3
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b608:	f7ff ff04 	bl	800b414 <prvInsertTimerInActiveList>
					break;
 800b60c:	e017      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b614:	f003 0302 	and.w	r3, r3, #2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d103      	bne.n	800b624 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b61c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b61e:	f000 fbeb 	bl	800bdf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b622:	e00c      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b62a:	f023 0301 	bic.w	r3, r3, #1
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b636:	e002      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b638:	bf00      	nop
 800b63a:	e000      	b.n	800b63e <prvProcessReceivedCommands+0x1a6>
					break;
 800b63c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b63e:	4b08      	ldr	r3, [pc, #32]	@ (800b660 <prvProcessReceivedCommands+0x1c8>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1d39      	adds	r1, r7, #4
 800b644:	2200      	movs	r2, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f7fd fff2 	bl	8009630 <xQueueReceive>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f47f af26 	bne.w	800b4a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
 800b658:	3730      	adds	r7, #48	@ 0x30
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	200015d4 	.word	0x200015d4

0800b664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b66a:	e049      	b.n	800b700 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b66c:	4b2e      	ldr	r3, [pc, #184]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b676:	4b2c      	ldr	r3, [pc, #176]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3304      	adds	r3, #4
 800b684:	4618      	mov	r0, r3
 800b686:	f7fd fc0b 	bl	8008ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b698:	f003 0304 	and.w	r3, r3, #4
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d02f      	beq.n	800b700 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d90e      	bls.n	800b6d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6be:	4b1a      	ldr	r3, [pc, #104]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7fd fbb0 	bl	8008e2e <vListInsert>
 800b6ce:	e017      	b.n	800b700 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	2100      	movs	r1, #0
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fd58 	bl	800b190 <xTimerGenericCommand>
 800b6e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10b      	bne.n	800b700 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	603b      	str	r3, [r7, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	bf00      	nop
 800b6fe:	e7fd      	b.n	800b6fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b700:	4b09      	ldr	r3, [pc, #36]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1b0      	bne.n	800b66c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b70a:	4b07      	ldr	r3, [pc, #28]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b710:	4b06      	ldr	r3, [pc, #24]	@ (800b72c <prvSwitchTimerLists+0xc8>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a04      	ldr	r2, [pc, #16]	@ (800b728 <prvSwitchTimerLists+0xc4>)
 800b716:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b718:	4a04      	ldr	r2, [pc, #16]	@ (800b72c <prvSwitchTimerLists+0xc8>)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6013      	str	r3, [r2, #0]
}
 800b71e:	bf00      	nop
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200015cc 	.word	0x200015cc
 800b72c:	200015d0 	.word	0x200015d0

0800b730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b736:	f000 f96f 	bl	800ba18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b73a:	4b15      	ldr	r3, [pc, #84]	@ (800b790 <prvCheckForValidListAndQueue+0x60>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d120      	bne.n	800b784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b742:	4814      	ldr	r0, [pc, #80]	@ (800b794 <prvCheckForValidListAndQueue+0x64>)
 800b744:	f7fd fb22 	bl	8008d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b748:	4813      	ldr	r0, [pc, #76]	@ (800b798 <prvCheckForValidListAndQueue+0x68>)
 800b74a:	f7fd fb1f 	bl	8008d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b74e:	4b13      	ldr	r3, [pc, #76]	@ (800b79c <prvCheckForValidListAndQueue+0x6c>)
 800b750:	4a10      	ldr	r2, [pc, #64]	@ (800b794 <prvCheckForValidListAndQueue+0x64>)
 800b752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b754:	4b12      	ldr	r3, [pc, #72]	@ (800b7a0 <prvCheckForValidListAndQueue+0x70>)
 800b756:	4a10      	ldr	r2, [pc, #64]	@ (800b798 <prvCheckForValidListAndQueue+0x68>)
 800b758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b75a:	2300      	movs	r3, #0
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	4b11      	ldr	r3, [pc, #68]	@ (800b7a4 <prvCheckForValidListAndQueue+0x74>)
 800b760:	4a11      	ldr	r2, [pc, #68]	@ (800b7a8 <prvCheckForValidListAndQueue+0x78>)
 800b762:	2110      	movs	r1, #16
 800b764:	200a      	movs	r0, #10
 800b766:	f7fd fc2f 	bl	8008fc8 <xQueueGenericCreateStatic>
 800b76a:	4603      	mov	r3, r0
 800b76c:	4a08      	ldr	r2, [pc, #32]	@ (800b790 <prvCheckForValidListAndQueue+0x60>)
 800b76e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b770:	4b07      	ldr	r3, [pc, #28]	@ (800b790 <prvCheckForValidListAndQueue+0x60>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b778:	4b05      	ldr	r3, [pc, #20]	@ (800b790 <prvCheckForValidListAndQueue+0x60>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	490b      	ldr	r1, [pc, #44]	@ (800b7ac <prvCheckForValidListAndQueue+0x7c>)
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fc14 	bl	8009fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b784:	f000 f97a 	bl	800ba7c <vPortExitCritical>
}
 800b788:	bf00      	nop
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	200015d4 	.word	0x200015d4
 800b794:	200015a4 	.word	0x200015a4
 800b798:	200015b8 	.word	0x200015b8
 800b79c:	200015cc 	.word	0x200015cc
 800b7a0:	200015d0 	.word	0x200015d0
 800b7a4:	20001680 	.word	0x20001680
 800b7a8:	200015e0 	.word	0x200015e0
 800b7ac:	08025b58 	.word	0x08025b58

0800b7b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3b04      	subs	r3, #4
 800b7c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3b04      	subs	r3, #4
 800b7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f023 0201 	bic.w	r2, r3, #1
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b814 <pxPortInitialiseStack+0x64>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3b14      	subs	r3, #20
 800b7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f06f 0202 	mvn.w	r2, #2
 800b7fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3b20      	subs	r3, #32
 800b804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b806:	68fb      	ldr	r3, [r7, #12]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3714      	adds	r7, #20
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	0800b819 	.word	0x0800b819

0800b818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b822:	4b13      	ldr	r3, [pc, #76]	@ (800b870 <prvTaskExitError+0x58>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b82a:	d00b      	beq.n	800b844 <prvTaskExitError+0x2c>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	60fb      	str	r3, [r7, #12]
}
 800b83e:	bf00      	nop
 800b840:	bf00      	nop
 800b842:	e7fd      	b.n	800b840 <prvTaskExitError+0x28>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	60bb      	str	r3, [r7, #8]
}
 800b856:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b858:	bf00      	nop
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d0fc      	beq.n	800b85a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000080 	.word	0x20000080
	...

0800b880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b880:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <pxCurrentTCBConst2>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	f380 8809 	msr	PSP, r0
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f04f 0000 	mov.w	r0, #0
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	4770      	bx	lr
 800b89c:	f3af 8000 	nop.w

0800b8a0 <pxCurrentTCBConst2>:
 800b8a0:	200010a4 	.word	0x200010a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8a8:	4808      	ldr	r0, [pc, #32]	@ (800b8cc <prvPortStartFirstTask+0x24>)
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f380 8808 	msr	MSP, r0
 800b8b2:	f04f 0000 	mov.w	r0, #0
 800b8b6:	f380 8814 	msr	CONTROL, r0
 800b8ba:	b662      	cpsie	i
 800b8bc:	b661      	cpsie	f
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	df00      	svc	0
 800b8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed08 	.word	0xe000ed08

0800b8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8d6:	4b47      	ldr	r3, [pc, #284]	@ (800b9f4 <xPortStartScheduler+0x124>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a47      	ldr	r2, [pc, #284]	@ (800b9f8 <xPortStartScheduler+0x128>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d10b      	bne.n	800b8f8 <xPortStartScheduler+0x28>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	613b      	str	r3, [r7, #16]
}
 800b8f2:	bf00      	nop
 800b8f4:	bf00      	nop
 800b8f6:	e7fd      	b.n	800b8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f4 <xPortStartScheduler+0x124>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b9fc <xPortStartScheduler+0x12c>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d10b      	bne.n	800b91a <xPortStartScheduler+0x4a>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60fb      	str	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b91a:	4b39      	ldr	r3, [pc, #228]	@ (800ba00 <xPortStartScheduler+0x130>)
 800b91c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	22ff      	movs	r2, #255	@ 0xff
 800b92a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b934:	78fb      	ldrb	r3, [r7, #3]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	4b31      	ldr	r3, [pc, #196]	@ (800ba04 <xPortStartScheduler+0x134>)
 800b940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b942:	4b31      	ldr	r3, [pc, #196]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b944:	2207      	movs	r2, #7
 800b946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b948:	e009      	b.n	800b95e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b94a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3b01      	subs	r3, #1
 800b950:	4a2d      	ldr	r2, [pc, #180]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b95e:	78fb      	ldrb	r3, [r7, #3]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b966:	2b80      	cmp	r3, #128	@ 0x80
 800b968:	d0ef      	beq.n	800b94a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b96a:	4b27      	ldr	r3, [pc, #156]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f1c3 0307 	rsb	r3, r3, #7
 800b972:	2b04      	cmp	r3, #4
 800b974:	d00b      	beq.n	800b98e <xPortStartScheduler+0xbe>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60bb      	str	r3, [r7, #8]
}
 800b988:	bf00      	nop
 800b98a:	bf00      	nop
 800b98c:	e7fd      	b.n	800b98a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	021b      	lsls	r3, r3, #8
 800b994:	4a1c      	ldr	r2, [pc, #112]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b998:	4b1b      	ldr	r3, [pc, #108]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9a0:	4a19      	ldr	r2, [pc, #100]	@ (800ba08 <xPortStartScheduler+0x138>)
 800b9a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ba0c <xPortStartScheduler+0x13c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a16      	ldr	r2, [pc, #88]	@ (800ba0c <xPortStartScheduler+0x13c>)
 800b9b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9b8:	4b14      	ldr	r3, [pc, #80]	@ (800ba0c <xPortStartScheduler+0x13c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a13      	ldr	r2, [pc, #76]	@ (800ba0c <xPortStartScheduler+0x13c>)
 800b9be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9c4:	f000 f8da 	bl	800bb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9c8:	4b11      	ldr	r3, [pc, #68]	@ (800ba10 <xPortStartScheduler+0x140>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9ce:	f000 f8f9 	bl	800bbc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ba14 <xPortStartScheduler+0x144>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a0f      	ldr	r2, [pc, #60]	@ (800ba14 <xPortStartScheduler+0x144>)
 800b9d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9de:	f7ff ff63 	bl	800b8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9e2:	f7fe ff1b 	bl	800a81c <vTaskSwitchContext>
	prvTaskExitError();
 800b9e6:	f7ff ff17 	bl	800b818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	e000ed00 	.word	0xe000ed00
 800b9f8:	410fc271 	.word	0x410fc271
 800b9fc:	410fc270 	.word	0x410fc270
 800ba00:	e000e400 	.word	0xe000e400
 800ba04:	200016d0 	.word	0x200016d0
 800ba08:	200016d4 	.word	0x200016d4
 800ba0c:	e000ed20 	.word	0xe000ed20
 800ba10:	20000080 	.word	0x20000080
 800ba14:	e000ef34 	.word	0xe000ef34

0800ba18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	607b      	str	r3, [r7, #4]
}
 800ba30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba32:	4b10      	ldr	r3, [pc, #64]	@ (800ba74 <vPortEnterCritical+0x5c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3301      	adds	r3, #1
 800ba38:	4a0e      	ldr	r2, [pc, #56]	@ (800ba74 <vPortEnterCritical+0x5c>)
 800ba3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <vPortEnterCritical+0x5c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d110      	bne.n	800ba66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba44:	4b0c      	ldr	r3, [pc, #48]	@ (800ba78 <vPortEnterCritical+0x60>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	603b      	str	r3, [r7, #0]
}
 800ba60:	bf00      	nop
 800ba62:	bf00      	nop
 800ba64:	e7fd      	b.n	800ba62 <vPortEnterCritical+0x4a>
	}
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000080 	.word	0x20000080
 800ba78:	e000ed04 	.word	0xe000ed04

0800ba7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba82:	4b12      	ldr	r3, [pc, #72]	@ (800bacc <vPortExitCritical+0x50>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <vPortExitCritical+0x26>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	607b      	str	r3, [r7, #4]
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	e7fd      	b.n	800ba9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800baa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bacc <vPortExitCritical+0x50>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	4a08      	ldr	r2, [pc, #32]	@ (800bacc <vPortExitCritical+0x50>)
 800baaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baac:	4b07      	ldr	r3, [pc, #28]	@ (800bacc <vPortExitCritical+0x50>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <vPortExitCritical+0x44>
 800bab4:	2300      	movs	r3, #0
 800bab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	f383 8811 	msr	BASEPRI, r3
}
 800babe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	20000080 	.word	0x20000080

0800bad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bad0:	f3ef 8009 	mrs	r0, PSP
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4b15      	ldr	r3, [pc, #84]	@ (800bb30 <pxCurrentTCBConst>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	f01e 0f10 	tst.w	lr, #16
 800bae0:	bf08      	it	eq
 800bae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	6010      	str	r0, [r2, #0]
 800baec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800baf4:	f380 8811 	msr	BASEPRI, r0
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f7fe fe8c 	bl	800a81c <vTaskSwitchContext>
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f380 8811 	msr	BASEPRI, r0
 800bb0c:	bc09      	pop	{r0, r3}
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	6808      	ldr	r0, [r1, #0]
 800bb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb16:	f01e 0f10 	tst.w	lr, #16
 800bb1a:	bf08      	it	eq
 800bb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb20:	f380 8809 	msr	PSP, r0
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w

0800bb30 <pxCurrentTCBConst>:
 800bb30:	200010a4 	.word	0x200010a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop

0800bb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb52:	f7fe fda9 	bl	800a6a8 <xTaskIncrementTick>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	@ (800bb78 <xPortSysTickHandler+0x40>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f383 8811 	msr	BASEPRI, r3
}
 800bb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb80:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb86:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <vPortSetupTimerInterrupt+0x38>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb8 <vPortSetupTimerInterrupt+0x3c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a0a      	ldr	r2, [pc, #40]	@ (800bbbc <vPortSetupTimerInterrupt+0x40>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	099b      	lsrs	r3, r3, #6
 800bb98:	4a09      	ldr	r2, [pc, #36]	@ (800bbc0 <vPortSetupTimerInterrupt+0x44>)
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb9e:	4b04      	ldr	r3, [pc, #16]	@ (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	e000e010 	.word	0xe000e010
 800bbb4:	e000e018 	.word	0xe000e018
 800bbb8:	20000004 	.word	0x20000004
 800bbbc:	10624dd3 	.word	0x10624dd3
 800bbc0:	e000e014 	.word	0xe000e014

0800bbc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bbd4 <vPortEnableVFP+0x10>
 800bbc8:	6801      	ldr	r1, [r0, #0]
 800bbca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbce:	6001      	str	r1, [r0, #0]
 800bbd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbd2:	bf00      	nop
 800bbd4:	e000ed88 	.word	0xe000ed88

0800bbd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d915      	bls.n	800bc16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbea:	4a18      	ldr	r2, [pc, #96]	@ (800bc4c <vPortValidateInterruptPriority+0x74>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbf4:	4b16      	ldr	r3, [pc, #88]	@ (800bc50 <vPortValidateInterruptPriority+0x78>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	7afa      	ldrb	r2, [r7, #11]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d20b      	bcs.n	800bc16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
 800bc12:	bf00      	nop
 800bc14:	e7fd      	b.n	800bc12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc16:	4b0f      	ldr	r3, [pc, #60]	@ (800bc54 <vPortValidateInterruptPriority+0x7c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc58 <vPortValidateInterruptPriority+0x80>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d90b      	bls.n	800bc3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	603b      	str	r3, [r7, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <vPortValidateInterruptPriority+0x62>
	}
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	e000e3f0 	.word	0xe000e3f0
 800bc50:	200016d0 	.word	0x200016d0
 800bc54:	e000ed0c 	.word	0xe000ed0c
 800bc58:	200016d4 	.word	0x200016d4

0800bc5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08a      	sub	sp, #40	@ 0x28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc68:	f7fe fc62 	bl	800a530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc6c:	4b5c      	ldr	r3, [pc, #368]	@ (800bde0 <pvPortMalloc+0x184>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc74:	f000 f924 	bl	800bec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc78:	4b5a      	ldr	r3, [pc, #360]	@ (800bde4 <pvPortMalloc+0x188>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4013      	ands	r3, r2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f040 8095 	bne.w	800bdb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01e      	beq.n	800bcca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d015      	beq.n	800bcca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f023 0307 	bic.w	r3, r3, #7
 800bca4:	3308      	adds	r3, #8
 800bca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00b      	beq.n	800bcca <pvPortMalloc+0x6e>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	617b      	str	r3, [r7, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	e7fd      	b.n	800bcc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d06f      	beq.n	800bdb0 <pvPortMalloc+0x154>
 800bcd0:	4b45      	ldr	r3, [pc, #276]	@ (800bde8 <pvPortMalloc+0x18c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d86a      	bhi.n	800bdb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcda:	4b44      	ldr	r3, [pc, #272]	@ (800bdec <pvPortMalloc+0x190>)
 800bcdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcde:	4b43      	ldr	r3, [pc, #268]	@ (800bdec <pvPortMalloc+0x190>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bce4:	e004      	b.n	800bcf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d903      	bls.n	800bd02 <pvPortMalloc+0xa6>
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f1      	bne.n	800bce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd02:	4b37      	ldr	r3, [pc, #220]	@ (800bde0 <pvPortMalloc+0x184>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d051      	beq.n	800bdb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2208      	movs	r2, #8
 800bd12:	4413      	add	r3, r2
 800bd14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	1ad2      	subs	r2, r2, r3
 800bd26:	2308      	movs	r3, #8
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d920      	bls.n	800bd70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	f003 0307 	and.w	r3, r3, #7
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00b      	beq.n	800bd58 <pvPortMalloc+0xfc>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	613b      	str	r3, [r7, #16]
}
 800bd52:	bf00      	nop
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	1ad2      	subs	r2, r2, r3
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd6a:	69b8      	ldr	r0, [r7, #24]
 800bd6c:	f000 f90c 	bl	800bf88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd70:	4b1d      	ldr	r3, [pc, #116]	@ (800bde8 <pvPortMalloc+0x18c>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bde8 <pvPortMalloc+0x18c>)
 800bd7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bde8 <pvPortMalloc+0x18c>)
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	4b1b      	ldr	r3, [pc, #108]	@ (800bdf0 <pvPortMalloc+0x194>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d203      	bcs.n	800bd92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd8a:	4b17      	ldr	r3, [pc, #92]	@ (800bde8 <pvPortMalloc+0x18c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a18      	ldr	r2, [pc, #96]	@ (800bdf0 <pvPortMalloc+0x194>)
 800bd90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	4b13      	ldr	r3, [pc, #76]	@ (800bde4 <pvPortMalloc+0x188>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bda6:	4b13      	ldr	r3, [pc, #76]	@ (800bdf4 <pvPortMalloc+0x198>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	4a11      	ldr	r2, [pc, #68]	@ (800bdf4 <pvPortMalloc+0x198>)
 800bdae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bdb0:	f7fe fbcc 	bl	800a54c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	f003 0307 	and.w	r3, r3, #7
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <pvPortMalloc+0x17a>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	60fb      	str	r3, [r7, #12]
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
 800bdd4:	e7fd      	b.n	800bdd2 <pvPortMalloc+0x176>
	return pvReturn;
 800bdd6:	69fb      	ldr	r3, [r7, #28]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3728      	adds	r7, #40	@ 0x28
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	200177d8 	.word	0x200177d8
 800bde4:	200177ec 	.word	0x200177ec
 800bde8:	200177dc 	.word	0x200177dc
 800bdec:	200177d0 	.word	0x200177d0
 800bdf0:	200177e0 	.word	0x200177e0
 800bdf4:	200177e4 	.word	0x200177e4

0800bdf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d04f      	beq.n	800beaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be0a:	2308      	movs	r3, #8
 800be0c:	425b      	negs	r3, r3
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4413      	add	r3, r2
 800be12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	4b25      	ldr	r3, [pc, #148]	@ (800beb4 <vPortFree+0xbc>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4013      	ands	r3, r2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10b      	bne.n	800be3e <vPortFree+0x46>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	60fb      	str	r3, [r7, #12]
}
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	e7fd      	b.n	800be3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00b      	beq.n	800be5e <vPortFree+0x66>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	60bb      	str	r3, [r7, #8]
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	e7fd      	b.n	800be5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	4b14      	ldr	r3, [pc, #80]	@ (800beb4 <vPortFree+0xbc>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4013      	ands	r3, r2
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01e      	beq.n	800beaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d11a      	bne.n	800beaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	4b0e      	ldr	r3, [pc, #56]	@ (800beb4 <vPortFree+0xbc>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	43db      	mvns	r3, r3
 800be7e:	401a      	ands	r2, r3
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be84:	f7fe fb54 	bl	800a530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	4b0a      	ldr	r3, [pc, #40]	@ (800beb8 <vPortFree+0xc0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4413      	add	r3, r2
 800be92:	4a09      	ldr	r2, [pc, #36]	@ (800beb8 <vPortFree+0xc0>)
 800be94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be96:	6938      	ldr	r0, [r7, #16]
 800be98:	f000 f876 	bl	800bf88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be9c:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <vPortFree+0xc4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	4a06      	ldr	r2, [pc, #24]	@ (800bebc <vPortFree+0xc4>)
 800bea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bea6:	f7fe fb51 	bl	800a54c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	200177ec 	.word	0x200177ec
 800beb8:	200177dc 	.word	0x200177dc
 800bebc:	200177e8 	.word	0x200177e8

0800bec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bec6:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <prvHeapInit+0xac>)
 800bec8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800beca:	4b29      	ldr	r3, [pc, #164]	@ (800bf70 <prvHeapInit+0xb0>)
 800becc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f003 0307 	and.w	r3, r3, #7
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00c      	beq.n	800bef2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3307      	adds	r3, #7
 800bedc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f023 0307 	bic.w	r3, r3, #7
 800bee4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	4a20      	ldr	r2, [pc, #128]	@ (800bf70 <prvHeapInit+0xb0>)
 800beee:	4413      	add	r3, r2
 800bef0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bef6:	4a1f      	ldr	r2, [pc, #124]	@ (800bf74 <prvHeapInit+0xb4>)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800befc:	4b1d      	ldr	r3, [pc, #116]	@ (800bf74 <prvHeapInit+0xb4>)
 800befe:	2200      	movs	r2, #0
 800bf00:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	4413      	add	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf0a:	2208      	movs	r2, #8
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f023 0307 	bic.w	r3, r3, #7
 800bf18:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4a16      	ldr	r2, [pc, #88]	@ (800bf78 <prvHeapInit+0xb8>)
 800bf1e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf20:	4b15      	ldr	r3, [pc, #84]	@ (800bf78 <prvHeapInit+0xb8>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2200      	movs	r2, #0
 800bf26:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf28:	4b13      	ldr	r3, [pc, #76]	@ (800bf78 <prvHeapInit+0xb8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	1ad2      	subs	r2, r2, r3
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <prvHeapInit+0xb8>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf7c <prvHeapInit+0xbc>)
 800bf4c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4a0b      	ldr	r2, [pc, #44]	@ (800bf80 <prvHeapInit+0xc0>)
 800bf54:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf56:	4b0b      	ldr	r3, [pc, #44]	@ (800bf84 <prvHeapInit+0xc4>)
 800bf58:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf5c:	601a      	str	r2, [r3, #0]
}
 800bf5e:	bf00      	nop
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	000160f8 	.word	0x000160f8
 800bf70:	200016d8 	.word	0x200016d8
 800bf74:	200177d0 	.word	0x200177d0
 800bf78:	200177d8 	.word	0x200177d8
 800bf7c:	200177e0 	.word	0x200177e0
 800bf80:	200177dc 	.word	0x200177dc
 800bf84:	200177ec 	.word	0x200177ec

0800bf88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf90:	4b28      	ldr	r3, [pc, #160]	@ (800c034 <prvInsertBlockIntoFreeList+0xac>)
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	e002      	b.n	800bf9c <prvInsertBlockIntoFreeList+0x14>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d8f7      	bhi.n	800bf96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d108      	bne.n	800bfca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	441a      	add	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d118      	bne.n	800c010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	4b15      	ldr	r3, [pc, #84]	@ (800c038 <prvInsertBlockIntoFreeList+0xb0>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d00d      	beq.n	800c006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	441a      	add	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	e008      	b.n	800c018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c006:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <prvInsertBlockIntoFreeList+0xb0>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	e003      	b.n	800c018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d002      	beq.n	800c026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	200177d0 	.word	0x200177d0
 800c038:	200177d8 	.word	0x200177d8

0800c03c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800c044:	2300      	movs	r3, #0
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	2300      	movs	r3, #0
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c050:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800c052:	f7fe fa6d 	bl	800a530 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800c056:	4b22      	ldr	r3, [pc, #136]	@ (800c0e0 <vPortGetHeapStats+0xa4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d01a      	beq.n	800c098 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3301      	adds	r3, #1
 800c066:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d202      	bcs.n	800c078 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d902      	bls.n	800c088 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800c08e:	4b15      	ldr	r3, [pc, #84]	@ (800c0e4 <vPortGetHeapStats+0xa8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	429a      	cmp	r2, r3
 800c096:	d1e4      	bne.n	800c062 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800c098:	f7fe fa58 	bl	800a54c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800c0ae:	f7ff fcb3 	bl	800ba18 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e8 <vPortGetHeapStats+0xac>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ec <vPortGetHeapStats+0xb0>)
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800c0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f0 <vPortGetHeapStats+0xb4>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800c0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f4 <vPortGetHeapStats+0xb8>)
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800c0d2:	f7ff fcd3 	bl	800ba7c <vPortExitCritical>
}
 800c0d6:	bf00      	nop
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	200177d0 	.word	0x200177d0
 800c0e4:	200177d8 	.word	0x200177d8
 800c0e8:	200177dc 	.word	0x200177dc
 800c0ec:	200177e4 	.word	0x200177e4
 800c0f0:	200177e8 	.word	0x200177e8
 800c0f4:	200177e0 	.word	0x200177e0

0800c0f8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	fb02 f303 	mul.w	r3, r2, r3
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff fda6 	bl	800bc5c <pvPortMalloc>
 800c110:	4603      	mov	r3, r0
 800c112:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d008      	beq.n	800c12c <mg_calloc+0x34>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	fb02 f303 	mul.w	r3, r2, r3
 800c122:	461a      	mov	r2, r3
 800c124:	2100      	movs	r1, #0
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f016 fe96 	bl	8022e58 <memset>
  return p;
 800c12c:	68fb      	ldr	r3, [r7, #12]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 800c138:	b580      	push	{r7, lr}
 800c13a:	b0c6      	sub	sp, #280	@ 0x118
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c142:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c146:	6018      	str	r0, [r3, #0]
 800c148:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c14c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c150:	6019      	str	r1, [r3, #0]
 800c152:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c156:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c15a:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 800c15c:	f107 0210 	add.w	r2, r7, #16
 800c160:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c168:	6819      	ldr	r1, [r3, #0]
 800c16a:	481d      	ldr	r0, [pc, #116]	@ (800c1e0 <mg_fs_lfs_status+0xa8>)
 800c16c:	f007 ff3a 	bl	8013fe4 <lfs_stat>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d12e      	bne.n	800c1d4 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 800c176:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c17a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00a      	beq.n	800c19a <mg_fs_lfs_status+0x62>
 800c184:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 800c19a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c19e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00a      	beq.n	800c1be <mg_fs_lfs_status+0x86>
 800c1a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c1ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c1b0:	6819      	ldr	r1, [r3, #0]
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 800c1be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d101      	bne.n	800c1d0 <mg_fs_lfs_status+0x98>
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	e002      	b.n	800c1d6 <mg_fs_lfs_status+0x9e>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	200177f0 	.word	0x200177f0

0800c1e4 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b0d4      	sub	sp, #336	@ 0x150
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c1ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c1f2:	6018      	str	r0, [r3, #0]
 800c1f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c1f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c1fc:	6019      	str	r1, [r3, #0]
 800c1fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c202:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800c206:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 800c208:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c20c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c210:	f107 0114 	add.w	r1, r7, #20
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4816      	ldr	r0, [pc, #88]	@ (800c270 <mg_fs_lfs_list+0x8c>)
 800c218:	f008 f89c 	bl	8014354 <lfs_dir_open>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d120      	bne.n	800c264 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c222:	e00e      	b.n	800c242 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 800c224:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c228:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800c22c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c230:	f103 0008 	add.w	r0, r3, #8
 800c234:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c238:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6811      	ldr	r1, [r2, #0]
 800c240:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c242:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800c246:	f107 0314 	add.w	r3, r7, #20
 800c24a:	4619      	mov	r1, r3
 800c24c:	4808      	ldr	r0, [pc, #32]	@ (800c270 <mg_fs_lfs_list+0x8c>)
 800c24e:	f008 f8e2 	bl	8014416 <lfs_dir_read>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	dce5      	bgt.n	800c224 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 800c258:	f107 0314 	add.w	r3, r7, #20
 800c25c:	4619      	mov	r1, r3
 800c25e:	4804      	ldr	r0, [pc, #16]	@ (800c270 <mg_fs_lfs_list+0x8c>)
 800c260:	f008 f8b6 	bl	80143d0 <lfs_dir_close>
    }
}
 800c264:	bf00      	nop
 800c266:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	200177f0 	.word	0x200177f0

0800c274 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 800c27e:	2054      	movs	r0, #84	@ 0x54
 800c280:	f7ff fcec 	bl	800bc5c <pvPortMalloc>
 800c284:	4603      	mov	r3, r0
 800c286:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <mg_fs_lfs_open+0x1e>
 800c28e:	2300      	movs	r3, #0
 800c290:	e024      	b.n	800c2dc <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <mg_fs_lfs_open+0x34>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f043 0301 	orr.w	r3, r3, #1
 800c2a6:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	f003 0302 	and.w	r3, r3, #2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <mg_fs_lfs_open+0x4a>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 800c2b8:	f043 0302 	orr.w	r3, r3, #2
 800c2bc:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	4807      	ldr	r0, [pc, #28]	@ (800c2e4 <mg_fs_lfs_open+0x70>)
 800c2c6:	f007 feb3 	bl	8014030 <lfs_file_open>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da04      	bge.n	800c2da <mg_fs_lfs_open+0x66>
        free(fd);
 800c2d0:	68b8      	ldr	r0, [r7, #8]
 800c2d2:	f7ff fd91 	bl	800bdf8 <vPortFree>
        return NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e000      	b.n	800c2dc <mg_fs_lfs_open+0x68>
    }
    return fd;
 800c2da:	68bb      	ldr	r3, [r7, #8]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	200177f0 	.word	0x200177f0

0800c2e8 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4804      	ldr	r0, [pc, #16]	@ (800c30c <mg_fs_lfs_close+0x24>)
 800c2fa:	f007 fed9 	bl	80140b0 <lfs_file_close>
    free(file);
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f7ff fd7a 	bl	800bdf8 <vPortFree>
}
 800c304:	bf00      	nop
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	200177f0 	.word	0x200177f0

0800c310 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 800c320:	6979      	ldr	r1, [r7, #20]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	4805      	ldr	r0, [pc, #20]	@ (800c33c <mg_fs_lfs_read+0x2c>)
 800c328:	f007 fefc 	bl	8014124 <lfs_file_read>
 800c32c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	200177f0 	.word	0x200177f0

0800c340 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 800c350:	6979      	ldr	r1, [r7, #20]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	4805      	ldr	r0, [pc, #20]	@ (800c36c <mg_fs_lfs_write+0x2c>)
 800c358:	f007 ff22 	bl	80141a0 <lfs_file_write>
 800c35c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	200177f0 	.word	0x200177f0

0800c370 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 800c37e:	68f9      	ldr	r1, [r7, #12]
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	2300      	movs	r3, #0
 800c384:	480c      	ldr	r0, [pc, #48]	@ (800c3b8 <mg_fs_lfs_seek+0x48>)
 800c386:	f007 ff49 	bl	801421c <lfs_file_seek>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	da02      	bge.n	800c396 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 800c390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c394:	e00c      	b.n	800c3b0 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	4619      	mov	r1, r3
 800c39a:	4807      	ldr	r0, [pc, #28]	@ (800c3b8 <mg_fs_lfs_seek+0x48>)
 800c39c:	f007 ff7c 	bl	8014298 <lfs_file_tell>
 800c3a0:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	da02      	bge.n	800c3ae <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 800c3a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3ac:	e000      	b.n	800c3b0 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 800c3ae:	68bb      	ldr	r3, [r7, #8]

}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	200177f0 	.word	0x200177f0

0800c3bc <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4806      	ldr	r0, [pc, #24]	@ (800c3e4 <mg_fs_lfs_rename+0x28>)
 800c3cc:	f007 fde5 	bl	8013f9a <lfs_rename>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bf0c      	ite	eq
 800c3d6:	2301      	moveq	r3, #1
 800c3d8:	2300      	movne	r3, #0
 800c3da:	b2db      	uxtb	r3, r3
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	200177f0 	.word	0x200177f0

0800c3e8 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 800c3f0:	6879      	ldr	r1, [r7, #4]
 800c3f2:	4806      	ldr	r0, [pc, #24]	@ (800c40c <mg_fs_lfs_remove+0x24>)
 800c3f4:	f007 fdae 	bl	8013f54 <lfs_remove>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bf0c      	ite	eq
 800c3fe:	2301      	moveq	r3, #1
 800c400:	2300      	movne	r3, #0
 800c402:	b2db      	uxtb	r3, r3
}
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	200177f0 	.word	0x200177f0

0800c410 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	4806      	ldr	r0, [pc, #24]	@ (800c434 <mg_fs_lfs_mkdir+0x24>)
 800c41c:	f007 ff76 	bl	801430c <lfs_mkdir>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	bf0c      	ite	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	2300      	movne	r3, #0
 800c42a:	b2db      	uxtb	r3, r3
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	200177f0 	.word	0x200177f0

0800c438 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	@ 0x28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 800c442:	f107 030c 	add.w	r3, r7, #12
 800c446:	4618      	mov	r0, r3
 800c448:	f7f8 fc44 	bl	8004cd4 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <lfs_fs_ll_init+0x20>
 800c452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c456:	e064      	b.n	800c522 <lfs_fs_ll_init+0xea>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 800c458:	8afb      	ldrh	r3, [r7, #22]
 800c45a:	4619      	mov	r1, r3
 800c45c:	2001      	movs	r0, #1
 800c45e:	f7ff fe4b 	bl	800c0f8 <mg_calloc>
 800c462:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 800c464:	8afb      	ldrh	r3, [r7, #22]
 800c466:	4619      	mov	r1, r3
 800c468:	2001      	movs	r0, #1
 800c46a:	f7ff fe45 	bl	800c0f8 <mg_calloc>
 800c46e:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 800c470:	8afb      	ldrh	r3, [r7, #22]
 800c472:	4619      	mov	r1, r3
 800c474:	2001      	movs	r0, #1
 800c476:	f7ff fe3f 	bl	800c0f8 <mg_calloc>
 800c47a:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 800c47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d108      	bne.n	800c494 <lfs_fs_ll_init+0x5c>
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d105      	bne.n	800c494 <lfs_fs_ll_init+0x5c>
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <lfs_fs_ll_init+0x5c>
		return -2;
 800c48e:	f06f 0301 	mvn.w	r3, #1
 800c492:	e046      	b.n	800c522 <lfs_fs_ll_init+0xea>
	}

	cfg.read_size         = flash_info.read_size;
 800c494:	8a3b      	ldrh	r3, [r7, #16]
 800c496:	461a      	mov	r2, r3
 800c498:	4b24      	ldr	r3, [pc, #144]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c49a:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 800c49c:	8a7b      	ldrh	r3, [r7, #18]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	4b22      	ldr	r3, [pc, #136]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4a2:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 800c4a4:	8abb      	ldrh	r3, [r7, #20]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4b20      	ldr	r3, [pc, #128]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4aa:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 800c4ac:	8b3b      	ldrh	r3, [r7, #24]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4b2:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 800c4b4:	8afb      	ldrh	r3, [r7, #22]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4b1c      	ldr	r3, [pc, #112]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4ba:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 800c4bc:	8afb      	ldrh	r3, [r7, #22]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4c2:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 800c4c4:	4a19      	ldr	r2, [pc, #100]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 800c4ca:	4a18      	ldr	r2, [pc, #96]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 800c4d0:	4a16      	ldr	r2, [pc, #88]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 800c4d6:	4b15      	ldr	r3, [pc, #84]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4d8:	4a15      	ldr	r2, [pc, #84]	@ (800c530 <lfs_fs_ll_init+0xf8>)
 800c4da:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 800c4dc:	4b13      	ldr	r3, [pc, #76]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4de:	4a15      	ldr	r2, [pc, #84]	@ (800c534 <lfs_fs_ll_init+0xfc>)
 800c4e0:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 800c4e2:	4b12      	ldr	r3, [pc, #72]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4e4:	4a14      	ldr	r2, [pc, #80]	@ (800c538 <lfs_fs_ll_init+0x100>)
 800c4e6:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 800c4e8:	4b10      	ldr	r3, [pc, #64]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4ea:	4a14      	ldr	r2, [pc, #80]	@ (800c53c <lfs_fs_ll_init+0x104>)
 800c4ec:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 800c4ee:	4a0f      	ldr	r2, [pc, #60]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 800c4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c4fc:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c500:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 800c502:	490a      	ldr	r1, [pc, #40]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c504:	480e      	ldr	r0, [pc, #56]	@ (800c540 <lfs_fs_ll_init+0x108>)
 800c506:	f007 fd08 	bl	8013f1a <lfs_mount>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da07      	bge.n	800c520 <lfs_fs_ll_init+0xe8>
    	lfs_format(&lfs, &cfg);
 800c510:	4906      	ldr	r1, [pc, #24]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c512:	480b      	ldr	r0, [pc, #44]	@ (800c540 <lfs_fs_ll_init+0x108>)
 800c514:	f007 fce4 	bl	8013ee0 <lfs_format>
    	lfs_mount(&lfs, &cfg);
 800c518:	4904      	ldr	r1, [pc, #16]	@ (800c52c <lfs_fs_ll_init+0xf4>)
 800c51a:	4809      	ldr	r0, [pc, #36]	@ (800c540 <lfs_fs_ll_init+0x108>)
 800c51c:	f007 fcfd 	bl	8013f1a <lfs_mount>
    }

	return 0;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3728      	adds	r7, #40	@ 0x28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20017870 	.word	0x20017870
 800c530:	0800c545 	.word	0x0800c545
 800c534:	0800c5e5 	.word	0x0800c5e5
 800c538:	0800c59d 	.word	0x0800c59d
 800c53c:	0800c63d 	.word	0x0800c63d
 800c540:	200177f0 	.word	0x200177f0

0800c544 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d306      	bcc.n	800c56a <block_device_read+0x26>
 800c55c:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <block_device_read+0x4c>)
 800c55e:	4a0d      	ldr	r2, [pc, #52]	@ (800c594 <block_device_read+0x50>)
 800c560:	f240 1111 	movw	r1, #273	@ 0x111
 800c564:	480c      	ldr	r0, [pc, #48]	@ (800c598 <block_device_read+0x54>)
 800c566:	f015 ffab 	bl	80224c0 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	fb03 f202 	mul.w	r2, r3, r2
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4413      	add	r3, r2
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	b292      	uxth	r2, r2
 800c57c:	4619      	mov	r1, r3
 800c57e:	6838      	ldr	r0, [r7, #0]
 800c580:	f7f8 fd76 	bl	8005070 <sFLASH_ReadBuffer>
	return 0;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	08025b70 	.word	0x08025b70
 800c594:	080293e4 	.word	0x080293e4
 800c598:	08025b88 	.word	0x08025b88

0800c59c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d306      	bcc.n	800c5be <block_device_erase+0x22>
 800c5b0:	4b09      	ldr	r3, [pc, #36]	@ (800c5d8 <block_device_erase+0x3c>)
 800c5b2:	4a0a      	ldr	r2, [pc, #40]	@ (800c5dc <block_device_erase+0x40>)
 800c5b4:	f240 1119 	movw	r1, #281	@ 0x119
 800c5b8:	4809      	ldr	r0, [pc, #36]	@ (800c5e0 <block_device_erase+0x44>)
 800c5ba:	f015 ff81 	bl	80224c0 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	fb02 f303 	mul.w	r3, r2, r3
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f8 fc4f 	bl	8004e6c <sFLASH_EraseSector>
	return 0;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	08025b70 	.word	0x08025b70
 800c5dc:	080293f8 	.word	0x080293f8
 800c5e0:	08025b88 	.word	0x08025b88

0800c5e4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d306      	bcc.n	800c60a <block_device_prog+0x26>
 800c5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <block_device_prog+0x4c>)
 800c5fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c634 <block_device_prog+0x50>)
 800c600:	f240 1121 	movw	r1, #289	@ 0x121
 800c604:	480c      	ldr	r0, [pc, #48]	@ (800c638 <block_device_prog+0x54>)
 800c606:	f015 ff5b 	bl	80224c0 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	fb03 f202 	mul.w	r2, r3, r2
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	b292      	uxth	r2, r2
 800c61c:	4619      	mov	r1, r3
 800c61e:	6838      	ldr	r0, [r7, #0]
 800c620:	f7f8 fc7d 	bl	8004f1e <sFLASH_WriteBuffer>
	return 0;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	08025b70 	.word	0x08025b70
 800c634:	0802940c 	.word	0x0802940c
 800c638:	08025b88 	.word	0x08025b88

0800c63c <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
	return 0;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4293      	cmp	r3, r2
 800c662:	bf38      	it	cc
 800c664:	4613      	movcc	r3, r2
}
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4293      	cmp	r3, r2
 800c682:	bf28      	it	cs
 800c684:	4613      	movcs	r3, r2
}
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	fb01 f202 	mul.w	r2, r1, r2
 800c6aa:	1a9b      	subs	r3, r3, r2
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	1ad3      	subs	r3, r2, r3
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff ffde 	bl	800c692 <lfs_aligndown>
 800c6d6:	4603      	mov	r3, r0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	fab3 f383 	clz	r3, r3
 800c6f0:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	fa93 f3a3 	rbit	r3, r3
 800c70e:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800c712:	4618      	mov	r0, r3
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7f4 fa72 	bl	8000c10 <__popcountsi2>
 800c72c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	1ad3      	subs	r3, r2, r3
}
 800c746:	4618      	mov	r0, r3
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800c75a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff ffee 	bl	800c752 <lfs_fromle32>
 800c776:	4603      	mov	r3, r0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff ffed 	bl	800c780 <lfs_frombe32>
 800c7a6:	4603      	mov	r3, r0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff fa4f 	bl	800bc5c <pvPortMalloc>
 800c7be:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fb11 	bl	800bdf8 <vPortFree>
#else
    (void)p;
#endif
}
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800c7de:	b480      	push	{r7}
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7ee:	601a      	str	r2, [r3, #0]
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	68d8      	ldr	r0, [r3, #12]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c810:	461a      	mov	r2, r3
 800c812:	21ff      	movs	r1, #255	@ 0xff
 800c814:	f016 fb20 	bl	8022e58 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c81e:	601a      	str	r2, [r3, #0]
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800c828:	b5b0      	push	{r4, r5, r7, lr}
 800c82a:	b08a      	sub	sp, #40	@ 0x28
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800c83a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c83c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83e:	441a      	add	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c846:	429a      	cmp	r2, r3
 800c848:	d80a      	bhi.n	800c860 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 8124 	beq.w	800ca9c <lfs_bd_read+0x274>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c85a:	429a      	cmp	r2, r3
 800c85c:	f0c0 811e 	bcc.w	800ca9c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800c860:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800c864:	e11f      	b.n	800caa6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800c866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c868:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d03f      	beq.n	800c8f0 <lfs_bd_read+0xc8>
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c876:	429a      	cmp	r2, r3
 800c878:	d13a      	bne.n	800c8f0 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800c884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c886:	429a      	cmp	r2, r3
 800c888:	d232      	bcs.n	800c8f0 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c890:	429a      	cmp	r2, r3
 800c892:	d324      	bcc.n	800c8de <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	689a      	ldr	r2, [r3, #8]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	6859      	ldr	r1, [r3, #4]
 800c89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89e:	1acb      	subs	r3, r1, r3
 800c8a0:	4413      	add	r3, r2
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	69b8      	ldr	r0, [r7, #24]
 800c8a6:	f7ff fee4 	bl	800c672 <lfs_min>
 800c8aa:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c8b6:	1acb      	subs	r3, r1, r3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	69f8      	ldr	r0, [r7, #28]
 800c8c0:	f016 fbab 	bl	802301a <memcpy>

                data += diff;
 800c8c4:	69fa      	ldr	r2, [r7, #28]
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	61fb      	str	r3, [r7, #28]
                off += diff;
 800c8cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800c8d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800c8dc:	e0de      	b.n	800ca9c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	685a      	ldr	r2, [r3, #4]
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	69b8      	ldr	r0, [r7, #24]
 800c8ea:	f7ff fec2 	bl	800c672 <lfs_min>
 800c8ee:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d13a      	bne.n	800c970 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	4413      	add	r3, r2
        if (block == rcache->block &&
 800c904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c906:	429a      	cmp	r2, r3
 800c908:	d232      	bcs.n	800c970 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c910:	429a      	cmp	r2, r3
 800c912:	d324      	bcc.n	800c95e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6859      	ldr	r1, [r3, #4]
 800c91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c91e:	1acb      	subs	r3, r1, r3
 800c920:	4413      	add	r3, r2
 800c922:	4619      	mov	r1, r3
 800c924:	69b8      	ldr	r0, [r7, #24]
 800c926:	f7ff fea4 	bl	800c672 <lfs_min>
 800c92a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c936:	1acb      	subs	r3, r1, r3
 800c938:	4413      	add	r3, r2
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	4619      	mov	r1, r3
 800c93e:	69f8      	ldr	r0, [r7, #28]
 800c940:	f016 fb6b 	bl	802301a <memcpy>

                data += diff;
 800c944:	69fa      	ldr	r2, [r7, #28]
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	4413      	add	r3, r2
 800c94a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800c94c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	4413      	add	r3, r2
 800c952:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800c954:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800c95c:	e09e      	b.n	800ca9c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	4619      	mov	r1, r3
 800c968:	69b8      	ldr	r0, [r7, #24]
 800c96a:	f7ff fe82 	bl	800c672 <lfs_min>
 800c96e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800c970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	429a      	cmp	r2, r3
 800c976:	d336      	bcc.n	800c9e6 <lfs_bd_read+0x1be>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c97c:	69da      	ldr	r2, [r3, #28]
 800c97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c980:	fbb3 f1f2 	udiv	r1, r3, r2
 800c984:	fb01 f202 	mul.w	r2, r1, r2
 800c988:	1a9b      	subs	r3, r3, r2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d12b      	bne.n	800c9e6 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c992:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800c994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c996:	429a      	cmp	r2, r3
 800c998:	d325      	bcc.n	800c9e6 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	69b8      	ldr	r0, [r7, #24]
 800c9a4:	f7ff fe75 	bl	800c692 <lfs_aligndown>
 800c9a8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9ae:	685c      	ldr	r4, [r3, #4]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c9be:	47a0      	blx	r4
 800c9c0:	6178      	str	r0, [r7, #20]
            if (err) {
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <lfs_bd_read+0x1a4>
                return err;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	e06c      	b.n	800caa6 <lfs_bd_read+0x27e>
            }

            data += diff;
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	61fb      	str	r3, [r7, #28]
            off += diff;
 800c9d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	4413      	add	r3, r2
 800c9da:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800c9dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800c9e4:	e05a      	b.n	800ca9c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00a      	beq.n	800ca04 <lfs_bd_read+0x1dc>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d305      	bcc.n	800ca04 <lfs_bd_read+0x1dc>
 800c9f8:	4b2d      	ldr	r3, [pc, #180]	@ (800cab0 <lfs_bd_read+0x288>)
 800c9fa:	4a2e      	ldr	r2, [pc, #184]	@ (800cab4 <lfs_bd_read+0x28c>)
 800c9fc:	216b      	movs	r1, #107	@ 0x6b
 800c9fe:	482e      	ldr	r0, [pc, #184]	@ (800cab8 <lfs_bd_read+0x290>)
 800ca00:	f015 fd5e 	bl	80224c0 <__assert_func>
        rcache->block = block;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca08:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ca14:	f7ff fe3d 	bl	800c692 <lfs_aligndown>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800ca1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca28:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7ff fe45 	bl	800c6bc <lfs_alignup>
 800ca32:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	f7ff fe18 	bl	800c672 <lfs_min>
 800ca42:	4602      	mov	r2, r0
                - rcache->off,
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800ca48:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f7ff fe0d 	bl	800c672 <lfs_min>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca62:	685c      	ldr	r4, [r3, #4]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6819      	ldr	r1, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	47a0      	blx	r4
 800ca7e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dd05      	ble.n	800ca92 <lfs_bd_read+0x26a>
 800ca86:	4b0d      	ldr	r3, [pc, #52]	@ (800cabc <lfs_bd_read+0x294>)
 800ca88:	4a0a      	ldr	r2, [pc, #40]	@ (800cab4 <lfs_bd_read+0x28c>)
 800ca8a:	2176      	movs	r1, #118	@ 0x76
 800ca8c:	480a      	ldr	r0, [pc, #40]	@ (800cab8 <lfs_bd_read+0x290>)
 800ca8e:	f015 fd17 	bl	80224c0 <__assert_func>
        if (err) {
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <lfs_bd_read+0x274>
            return err;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	e004      	b.n	800caa6 <lfs_bd_read+0x27e>
    while (size > 0) {
 800ca9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f47f aee1 	bne.w	800c866 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3720      	adds	r7, #32
 800caaa:	46bd      	mov	sp, r7
 800caac:	bdb0      	pop	{r4, r5, r7, pc}
 800caae:	bf00      	nop
 800cab0:	08025bc4 	.word	0x08025bc4
 800cab4:	08029420 	.word	0x08029420
 800cab8:	08025bf4 	.word	0x08025bf4
 800cabc:	08025c24 	.word	0x08025c24

0800cac0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b090      	sub	sp, #64	@ 0x40
 800cac4:	af04      	add	r7, sp, #16
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800cace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800cad6:	2300      	movs	r3, #0
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cada:	e039      	b.n	800cb50 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800cadc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2108      	movs	r1, #8
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fdc4 	bl	800c672 <lfs_min>
 800caea:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800caec:	683a      	ldr	r2, [r7, #0]
 800caee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf0:	1ad1      	subs	r1, r2, r3
 800caf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf6:	4413      	add	r3, r2
 800caf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cafa:	9203      	str	r2, [sp, #12]
 800cafc:	f107 0214 	add.w	r2, r7, #20
 800cb00:	9202      	str	r2, [sp, #8]
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f7ff fe8a 	bl	800c828 <lfs_bd_read>
 800cb14:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <lfs_bd_cmp+0x60>
            return err;
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	e01c      	b.n	800cb5a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800cb20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb24:	18d1      	adds	r1, r2, r3
 800cb26:	f107 0314 	add.w	r3, r7, #20
 800cb2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f016 f969 	bl	8022e04 <memcmp>
 800cb32:	61f8      	str	r0, [r7, #28]
        if (res) {
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d006      	beq.n	800cb48 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da01      	bge.n	800cb44 <lfs_bd_cmp+0x84>
 800cb40:	2301      	movs	r3, #1
 800cb42:	e00a      	b.n	800cb5a <lfs_bd_cmp+0x9a>
 800cb44:	2302      	movs	r3, #2
 800cb46:	e008      	b.n	800cb5a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800cb48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	4413      	add	r3, r2
 800cb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d3c1      	bcc.n	800cadc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3730      	adds	r7, #48	@ 0x30
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b08e      	sub	sp, #56	@ 0x38
 800cb66:	af04      	add	r7, sp, #16
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
 800cb6e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800cb74:	2300      	movs	r3, #0
 800cb76:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb78:	e030      	b.n	800cbdc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800cb7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	2108      	movs	r1, #8
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff fd75 	bl	800c672 <lfs_min>
 800cb88:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8e:	1ad1      	subs	r1, r2, r3
 800cb90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb94:	4413      	add	r3, r2
 800cb96:	6a3a      	ldr	r2, [r7, #32]
 800cb98:	9203      	str	r2, [sp, #12]
 800cb9a:	f107 0214 	add.w	r2, r7, #20
 800cb9e:	9202      	str	r2, [sp, #8]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	460b      	mov	r3, r1
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	68b9      	ldr	r1, [r7, #8]
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fe3b 	bl	800c828 <lfs_bd_read>
 800cbb2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <lfs_bd_crc+0x5c>
            return err;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	e013      	b.n	800cbe6 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800cbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f107 0114 	add.w	r1, r7, #20
 800cbc6:	6a3a      	ldr	r2, [r7, #32]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f007 fc49 	bl	8014460 <lfs_crc>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbd2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800cbd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	4413      	add	r3, r2
 800cbda:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d3ca      	bcc.n	800cb7a <lfs_bd_crc+0x18>
    }

    return 0;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3728      	adds	r7, #40	@ 0x28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
	...

0800cbf0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800cbf0:	b5b0      	push	{r4, r5, r7, lr}
 800cbf2:	b08c      	sub	sp, #48	@ 0x30
 800cbf4:	af04      	add	r7, sp, #16
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc06:	d060      	beq.n	800ccca <lfs_bd_flush+0xda>
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f113 0f02 	cmn.w	r3, #2
 800cc10:	d05b      	beq.n	800ccca <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d305      	bcc.n	800cc2a <lfs_bd_flush+0x3a>
 800cc1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ccd4 <lfs_bd_flush+0xe4>)
 800cc20:	4a2d      	ldr	r2, [pc, #180]	@ (800ccd8 <lfs_bd_flush+0xe8>)
 800cc22:	21b3      	movs	r1, #179	@ 0xb3
 800cc24:	482d      	ldr	r0, [pc, #180]	@ (800ccdc <lfs_bd_flush+0xec>)
 800cc26:	f015 fc4b 	bl	80224c0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	689a      	ldr	r2, [r3, #8]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	4619      	mov	r1, r3
 800cc36:	4610      	mov	r0, r2
 800cc38:	f7ff fd40 	bl	800c6bc <lfs_alignup>
 800cc3c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc42:	689c      	ldr	r4, [r3, #8]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	6819      	ldr	r1, [r3, #0]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	462b      	mov	r3, r5
 800cc5a:	47a0      	blx	r4
 800cc5c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dd05      	ble.n	800cc70 <lfs_bd_flush+0x80>
 800cc64:	4b1e      	ldr	r3, [pc, #120]	@ (800cce0 <lfs_bd_flush+0xf0>)
 800cc66:	4a1c      	ldr	r2, [pc, #112]	@ (800ccd8 <lfs_bd_flush+0xe8>)
 800cc68:	21b7      	movs	r1, #183	@ 0xb7
 800cc6a:	481c      	ldr	r0, [pc, #112]	@ (800ccdc <lfs_bd_flush+0xec>)
 800cc6c:	f015 fc28 	bl	80224c0 <__assert_func>
        if (err) {
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <lfs_bd_flush+0x8a>
            return err;
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	e028      	b.n	800cccc <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800cc7a:	78fb      	ldrb	r3, [r7, #3]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d020      	beq.n	800ccc2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff fdab 	bl	800c7de <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800cc90:	68b9      	ldr	r1, [r7, #8]
 800cc92:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800cc94:	69f8      	ldr	r0, [r7, #28]
 800cc96:	9003      	str	r0, [sp, #12]
 800cc98:	9102      	str	r1, [sp, #8]
 800cc9a:	9201      	str	r2, [sp, #4]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	2100      	movs	r1, #0
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff ff0b 	bl	800cac0 <lfs_bd_cmp>
 800ccaa:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da01      	bge.n	800ccb6 <lfs_bd_flush+0xc6>
                return res;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	e00a      	b.n	800cccc <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800ccbc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ccc0:	e004      	b.n	800cccc <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7ff fd99 	bl	800c7fc <lfs_cache_zero>
    }

    return 0;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3720      	adds	r7, #32
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bdb0      	pop	{r4, r5, r7, pc}
 800ccd4:	08025c30 	.word	0x08025c30
 800ccd8:	0802942c 	.word	0x0802942c
 800ccdc:	08025bf4 	.word	0x08025bf4
 800cce0:	08025c24 	.word	0x08025c24

0800cce4 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff fd72 	bl	800c7de <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800ccfa:	78fb      	ldrb	r3, [r7, #3]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f7ff ff75 	bl	800cbf0 <lfs_bd_flush>
 800cd06:	6178      	str	r0, [r7, #20]
    if (err) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <lfs_bd_sync+0x2e>
        return err;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	e011      	b.n	800cd36 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	4798      	blx	r3
 800cd20:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dd05      	ble.n	800cd34 <lfs_bd_sync+0x50>
 800cd28:	4b05      	ldr	r3, [pc, #20]	@ (800cd40 <lfs_bd_sync+0x5c>)
 800cd2a:	4a06      	ldr	r2, [pc, #24]	@ (800cd44 <lfs_bd_sync+0x60>)
 800cd2c:	21dd      	movs	r1, #221	@ 0xdd
 800cd2e:	4806      	ldr	r0, [pc, #24]	@ (800cd48 <lfs_bd_sync+0x64>)
 800cd30:	f015 fbc6 	bl	80224c0 <__assert_func>
    return err;
 800cd34:	697b      	ldr	r3, [r7, #20]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	08025c24 	.word	0x08025c24
 800cd44:	0802943c 	.word	0x0802943c
 800cd48:	08025bf4 	.word	0x08025bf4

0800cd4c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800cd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd60:	f113 0f02 	cmn.w	r3, #2
 800cd64:	d00a      	beq.n	800cd7c <lfs_bd_prog+0x30>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d305      	bcc.n	800cd7c <lfs_bd_prog+0x30>
 800cd70:	4b48      	ldr	r3, [pc, #288]	@ (800ce94 <lfs_bd_prog+0x148>)
 800cd72:	4a49      	ldr	r2, [pc, #292]	@ (800ce98 <lfs_bd_prog+0x14c>)
 800cd74:	21e8      	movs	r1, #232	@ 0xe8
 800cd76:	4849      	ldr	r0, [pc, #292]	@ (800ce9c <lfs_bd_prog+0x150>)
 800cd78:	f015 fba2 	bl	80224c0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800cd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd80:	441a      	add	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d97a      	bls.n	800ce82 <lfs_bd_prog+0x136>
 800cd8c:	4b44      	ldr	r3, [pc, #272]	@ (800cea0 <lfs_bd_prog+0x154>)
 800cd8e:	4a42      	ldr	r2, [pc, #264]	@ (800ce98 <lfs_bd_prog+0x14c>)
 800cd90:	21e9      	movs	r1, #233	@ 0xe9
 800cd92:	4842      	ldr	r0, [pc, #264]	@ (800ce9c <lfs_bd_prog+0x150>)
 800cd94:	f015 fb94 	bl	80224c0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d151      	bne.n	800ce46 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800cda6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d34c      	bcc.n	800ce46 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	4413      	add	r3, r2
                off >= pcache->off &&
 800cdb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d243      	bcs.n	800ce46 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	6859      	ldr	r1, [r3, #4]
 800cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdca:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800cdcc:	4413      	add	r3, r2
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cdd2:	f7ff fc4e 	bl	800c672 <lfs_min>
 800cdd6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	68da      	ldr	r2, [r3, #12]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cde2:	1acb      	subs	r3, r1, r3
 800cde4:	4413      	add	r3, r2
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	69f9      	ldr	r1, [r7, #28]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f016 f915 	bl	802301a <memcpy>

            data += diff;
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	61fb      	str	r3, [r7, #28]
            off += diff;
 800cdf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800ce00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	6898      	ldr	r0, [r3, #8]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	4619      	mov	r1, r3
 800ce16:	f7ff fc1c 	bl	800c652 <lfs_max>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d128      	bne.n	800ce80 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800ce2e:	78fb      	ldrb	r3, [r7, #3]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7ff fedb 	bl	800cbf0 <lfs_bd_flush>
 800ce3a:	6178      	str	r0, [r7, #20]
                if (err) {
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d01e      	beq.n	800ce80 <lfs_bd_prog+0x134>
                    return err;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	e021      	b.n	800ce8a <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce4e:	d006      	beq.n	800ce5e <lfs_bd_prog+0x112>
 800ce50:	4b14      	ldr	r3, [pc, #80]	@ (800cea4 <lfs_bd_prog+0x158>)
 800ce52:	4a11      	ldr	r2, [pc, #68]	@ (800ce98 <lfs_bd_prog+0x14c>)
 800ce54:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800ce58:	4810      	ldr	r0, [pc, #64]	@ (800ce9c <lfs_bd_prog+0x150>)
 800ce5a:	f015 fb31 	bl	80224c0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce62:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce6e:	f7ff fc10 	bl	800c692 <lfs_aligndown>
 800ce72:	4602      	mov	r2, r0
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	609a      	str	r2, [r3, #8]
 800ce7e:	e000      	b.n	800ce82 <lfs_bd_prog+0x136>
            continue;
 800ce80:	bf00      	nop
    while (size > 0) {
 800ce82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d187      	bne.n	800cd98 <lfs_bd_prog+0x4c>
    }

    return 0;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	08025c54 	.word	0x08025c54
 800ce98:	08029448 	.word	0x08029448
 800ce9c:	08025bf4 	.word	0x08025bf4
 800cea0:	08025c8c 	.word	0x08025c8c
 800cea4:	08025cb0 	.word	0x08025cb0

0800cea8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d306      	bcc.n	800ceca <lfs_bd_erase+0x22>
 800cebc:	4b0f      	ldr	r3, [pc, #60]	@ (800cefc <lfs_bd_erase+0x54>)
 800cebe:	4a10      	ldr	r2, [pc, #64]	@ (800cf00 <lfs_bd_erase+0x58>)
 800cec0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800cec4:	480f      	ldr	r0, [pc, #60]	@ (800cf04 <lfs_bd_erase+0x5c>)
 800cec6:	f015 fafb 	bl	80224c0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	4610      	mov	r0, r2
 800ced8:	4798      	blx	r3
 800ceda:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	dd06      	ble.n	800cef0 <lfs_bd_erase+0x48>
 800cee2:	4b09      	ldr	r3, [pc, #36]	@ (800cf08 <lfs_bd_erase+0x60>)
 800cee4:	4a06      	ldr	r2, [pc, #24]	@ (800cf00 <lfs_bd_erase+0x58>)
 800cee6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800ceea:	4806      	ldr	r0, [pc, #24]	@ (800cf04 <lfs_bd_erase+0x5c>)
 800ceec:	f015 fae8 	bl	80224c0 <__assert_func>
    return err;
 800cef0:	68fb      	ldr	r3, [r7, #12]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	08025cd4 	.word	0x08025cd4
 800cf00:	08029454 	.word	0x08029454
 800cf04:	08025bf4 	.word	0x08025bf4
 800cf08:	08025c24 	.word	0x08025c24

0800cf0c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3304      	adds	r3, #4
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	601a      	str	r2, [r3, #0]
}
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf46:	d005      	beq.n	800cf54 <lfs_pair_isnull+0x1e>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf52:	d101      	bne.n	800cf58 <lfs_pair_isnull+0x22>
 800cf54:	2301      	movs	r3, #1
 800cf56:	e000      	b.n	800cf5a <lfs_pair_isnull+0x24>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	b2db      	uxtb	r3, r3
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d017      	beq.n	800cfb2 <lfs_pair_cmp+0x46>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3304      	adds	r3, #4
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d00f      	beq.n	800cfb2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d008      	beq.n	800cfb2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d001      	beq.n	800cfb2 <lfs_pair_cmp+0x46>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <lfs_pair_cmp+0x48>
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d107      	bne.n	800cfe6 <lfs_pair_issync+0x26>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d00d      	beq.n	800d002 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	3304      	adds	r3, #4
 800cfee:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d108      	bne.n	800d006 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3304      	adds	r3, #4
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d101      	bne.n	800d006 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d002:	2301      	movs	r3, #1
 800d004:	e000      	b.n	800d008 <lfs_pair_issync+0x48>
 800d006:	2300      	movs	r3, #0
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	b2db      	uxtb	r3, r3
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800d01a:	b590      	push	{r4, r7, lr}
 800d01c:	b083      	sub	sp, #12
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fb93 	bl	800c752 <lfs_fromle32>
 800d02c:	4602      	mov	r2, r0
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3304      	adds	r3, #4
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	1d1c      	adds	r4, r3, #4
 800d03c:	4610      	mov	r0, r2
 800d03e:	f7ff fb88 	bl	800c752 <lfs_fromle32>
 800d042:	4603      	mov	r3, r0
 800d044:	6023      	str	r3, [r4, #0]
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd90      	pop	{r4, r7, pc}

0800d04e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800d04e:	b590      	push	{r4, r7, lr}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff fb84 	bl	800c768 <lfs_tole32>
 800d060:	4602      	mov	r2, r0
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3304      	adds	r3, #4
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	1d1c      	adds	r4, r3, #4
 800d070:	4610      	mov	r0, r2
 800d072:	f7ff fb79 	bl	800c768 <lfs_tole32>
 800d076:	4603      	mov	r3, r0
 800d078:	6023      	str	r3, [r4, #0]
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd90      	pop	{r4, r7, pc}

0800d082 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	43db      	mvns	r3, r3
 800d08e:	0fdb      	lsrs	r3, r3, #31
 800d090:	b2db      	uxtb	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800d09e:	b480      	push	{r7}
 800d0a0:	b083      	sub	sp, #12
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	059b      	lsls	r3, r3, #22
 800d0aa:	159b      	asrs	r3, r3, #22
 800d0ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0b0:	bf0c      	ite	eq
 800d0b2:	2301      	moveq	r3, #1
 800d0b4:	2300      	movne	r3, #0
 800d0b6:	b2db      	uxtb	r3, r3
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	0d1b      	lsrs	r3, r3, #20
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d0d6:	b29b      	uxth	r3, r3
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	0d1b      	lsrs	r3, r3, #20
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800d0f6:	b29b      	uxth	r3, r3
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	0d1b      	lsrs	r3, r3, #20
 800d110:	b29b      	uxth	r3, r3
 800d112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d116:	b29b      	uxth	r3, r3
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	0d1b      	lsrs	r3, r3, #20
 800d130:	b2db      	uxtb	r3, r3
}
 800d132:	4618      	mov	r0, r3
 800d134:	370c      	adds	r7, #12
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff ffec 	bl	800d124 <lfs_tag_chunk>
 800d14c:	4603      	mov	r3, r0
 800d14e:	b25b      	sxtb	r3, r3
}
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	0a9b      	lsrs	r3, r3, #10
 800d164:	b29b      	uxth	r3, r3
 800d166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d16a:	b29b      	uxth	r3, r3
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800d186:	4618      	mov	r0, r3
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7ff ff7f 	bl	800d09e <lfs_tag_isdelete>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff ffe5 	bl	800d178 <lfs_tag_size>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	3304      	adds	r3, #4
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	e012      	b.n	800d1f0 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	6819      	ldr	r1, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	4413      	add	r3, r2
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4403      	add	r3, r0
 800d1e6:	404a      	eors	r2, r1
 800d1e8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	dde9      	ble.n	800d1ca <lfs_gstate_xor+0x10>
    }
}
 800d1f6:	bf00      	nop
 800d1f8:	bf00      	nop
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e00b      	b.n	800d22a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	4413      	add	r3, r2
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <lfs_gstate_iszero+0x20>
            return false;
 800d220:	2300      	movs	r3, #0
 800d222:	e006      	b.n	800d232 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3301      	adds	r3, #1
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	ddf0      	ble.n	800d212 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800d230:	2301      	movs	r3, #1
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7ff ff94 	bl	800d178 <lfs_tag_size>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	bf14      	ite	ne
 800d256:	2301      	movne	r3, #1
 800d258:	2300      	moveq	r3, #0
 800d25a:	b2db      	uxtb	r3, r3
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f7ff ff81 	bl	800d178 <lfs_tag_size>
 800d276:	4603      	mov	r3, r0
 800d278:	b2db      	uxtb	r3, r3
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff ff18 	bl	800d0c4 <lfs_tag_type1>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	bf14      	ite	ne
 800d29a:	2301      	movne	r3, #1
 800d29c:	2300      	moveq	r3, #0
 800d29e:	b2db      	uxtb	r3, r3
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff ff5f 	bl	800d178 <lfs_tag_size>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	0a5b      	lsrs	r3, r3, #9
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bf14      	ite	ne
 800d2c2:	2301      	movne	r3, #1
 800d2c4:	2300      	moveq	r3, #0
 800d2c6:	b2db      	uxtb	r3, r3
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fef0 	bl	800d0c4 <lfs_tag_type1>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <lfs_gstate_hasmovehere+0x30>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fe3b 	bl	800cf6c <lfs_pair_cmp>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <lfs_gstate_hasmovehere+0x30>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <lfs_gstate_hasmovehere+0x32>
 800d300:	2300      	movs	r3, #0
 800d302:	f003 0301 	and.w	r3, r3, #1
 800d306:	b2db      	uxtb	r3, r3
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff fa18 	bl	800c752 <lfs_fromle32>
 800d322:	4602      	mov	r2, r0
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fa10 	bl	800c752 <lfs_fromle32>
 800d332:	4602      	mov	r2, r0
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff fa08 	bl	800c752 <lfs_fromle32>
 800d342:	4602      	mov	r2, r0
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	609a      	str	r2, [r3, #8]
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fa03 	bl	800c768 <lfs_tole32>
 800d362:	4602      	mov	r2, r0
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7ff f9fb 	bl	800c768 <lfs_tole32>
 800d372:	4602      	mov	r2, r0
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff f9f3 	bl	800c768 <lfs_tole32>
 800d382:	4602      	mov	r2, r0
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	609a      	str	r2, [r3, #8]
}
 800d388:	bf00      	nop
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff f9d8 	bl	800c752 <lfs_fromle32>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff f9d0 	bl	800c752 <lfs_fromle32>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	605a      	str	r2, [r3, #4]
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff f9cb 	bl	800c768 <lfs_tole32>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff f9c3 	bl	800c768 <lfs_tole32>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	605a      	str	r2, [r3, #4]
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff f9a8 	bl	800c752 <lfs_fromle32>
 800d402:	4602      	mov	r2, r0
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff f9a0 	bl	800c752 <lfs_fromle32>
 800d412:	4602      	mov	r2, r0
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	605a      	str	r2, [r3, #4]
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff f99b 	bl	800c768 <lfs_tole32>
 800d432:	4602      	mov	r2, r0
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7ff f993 	bl	800c768 <lfs_tole32>
 800d442:	4602      	mov	r2, r0
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	605a      	str	r2, [r3, #4]
}
 800d448:	bf00      	nop
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff f978 	bl	800c752 <lfs_fromle32>
 800d462:	4602      	mov	r2, r0
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7ff f970 	bl	800c752 <lfs_fromle32>
 800d472:	4602      	mov	r2, r0
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff f968 	bl	800c752 <lfs_fromle32>
 800d482:	4602      	mov	r2, r0
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff f960 	bl	800c752 <lfs_fromle32>
 800d492:	4602      	mov	r2, r0
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff f958 	bl	800c752 <lfs_fromle32>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff f950 	bl	800c752 <lfs_fromle32>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	615a      	str	r2, [r3, #20]
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff f94b 	bl	800c768 <lfs_tole32>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff f943 	bl	800c768 <lfs_tole32>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff f93b 	bl	800c768 <lfs_tole32>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff f933 	bl	800c768 <lfs_tole32>
 800d502:	4602      	mov	r2, r0
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff f92b 	bl	800c768 <lfs_tole32>
 800d512:	4602      	mov	r2, r0
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff f923 	bl	800c768 <lfs_tole32>
 800d522:	4602      	mov	r2, r0
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	615a      	str	r2, [r3, #20]
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800d53a:	1d3b      	adds	r3, r7, #4
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	e009      	b.n	800d554 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	429a      	cmp	r2, r3
 800d548:	d101      	bne.n	800d54e <lfs_mlist_isopen+0x1e>
            return true;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e007      	b.n	800d55e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1f1      	bne.n	800d540 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800d56a:	b480      	push	{r7}
 800d56c:	b085      	sub	sp, #20
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3328      	adds	r3, #40	@ 0x28
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	e00d      	b.n	800d598 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d105      	bne.n	800d592 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	601a      	str	r2, [r3, #0]
            break;
 800d590:	e007      	b.n	800d5a2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1ed      	bne.n	800d57c <lfs_mlist_remove+0x12>
        }
    }
}
 800d5a0:	bf00      	nop
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800d5dc:	4b03      	ldr	r3, [pc, #12]	@ (800d5ec <lfs_fs_disk_version+0x18>)
    }
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	00020001 	.word	0x00020001

0800d5f0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff ffeb 	bl	800d5d4 <lfs_fs_disk_version>
 800d5fe:	4603      	mov	r3, r0
 800d600:	0c1b      	lsrs	r3, r3, #16
 800d602:	b29b      	uxth	r3, r3

}
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff ffdd 	bl	800d5d4 <lfs_fs_disk_version>
 800d61a:	4603      	mov	r3, r0
 800d61c:	b29b      	uxth	r3, r3
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800d636:	bf00      	nop
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff ffe5 	bl	800d626 <lfs_alloc_ckpoint>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d67e:	4413      	add	r3, r2
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800d684:	fbb3 f1f2 	udiv	r1, r3, r2
 800d688:	fb01 f202 	mul.w	r2, r1, r2
 800d68c:	1a9b      	subs	r3, r3, r2
 800d68e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	429a      	cmp	r2, r3
 800d698:	d212      	bcs.n	800d6c0 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	08db      	lsrs	r3, r3, #3
 800d6a2:	441a      	add	r2, r3
 800d6a4:	7811      	ldrb	r1, [r2, #0]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	f002 0207 	and.w	r2, r2, #7
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	fa00 f202 	lsl.w	r2, r0, r2
 800d6b2:	b2d2      	uxtb	r2, r2
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800d6b8:	4403      	add	r3, r0
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	b2d2      	uxtb	r2, r2
 800d6be:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6e0:	4413      	add	r3, r2
            % lfs->block_count;
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d6e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6ea:	fb01 f202 	mul.w	r2, r1, r2
 800d6ee:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 800d700:	00da      	lsls	r2, r3, #3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fe ffb2 	bl	800c672 <lfs_min>
 800d70e:	4602      	mov	r2, r0
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d71e:	461a      	mov	r2, r3
 800d720:	2100      	movs	r1, #0
 800d722:	f015 fb99 	bl	8022e58 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800d726:	2301      	movs	r3, #1
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	4909      	ldr	r1, [pc, #36]	@ (800d750 <lfs_alloc_scan+0x80>)
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f005 fdc9 	bl	80132c4 <lfs_fs_traverse_>
 800d732:	60f8      	str	r0, [r7, #12]
    if (err) {
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ff81 	bl	800d642 <lfs_alloc_drop>
        return err;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	e000      	b.n	800d746 <lfs_alloc_scan+0x76>
    }

    return 0;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	0800d665 	.word	0x0800d665

0800d754 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af02      	add	r7, sp, #8
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800d75e:	e04d      	b.n	800d7fc <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d768:	08db      	lsrs	r3, r3, #3
 800d76a:	4413      	add	r3, r2
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d774:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800d778:	fa22 f303 	lsr.w	r3, r2, r3
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d131      	bne.n	800d7e8 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d78c:	4413      	add	r3, r2
                        % lfs->block_count;
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d792:	fbb3 f1f2 	udiv	r1, r3, r2
 800d796:	fb01 f202 	mul.w	r2, r1, r2
 800d79a:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7a4:	1c5a      	adds	r2, r3, #1
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7ae:	1e5a      	subs	r2, r3, #1
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d211      	bcs.n	800d7e4 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7c8:	08db      	lsrs	r3, r3, #3
 800d7ca:	4413      	add	r3, r2
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7d4:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800d7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1dd      	bne.n	800d7a0 <lfs_alloc+0x4c>
                        return 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e032      	b.n	800d84e <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7f6:	1e5a      	subs	r2, r3, #1
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d804:	429a      	cmp	r2, r3
 800d806:	d3ab      	bcc.n	800d760 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d116      	bne.n	800d83e <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d818:	4413      	add	r3, r2
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d81e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d822:	fb01 f202 	mul.w	r2, r1, r2
 800d826:	1a9b      	subs	r3, r3, r2
 800d828:	4a0b      	ldr	r2, [pc, #44]	@ (800d858 <lfs_alloc+0x104>)
 800d82a:	9200      	str	r2, [sp, #0]
 800d82c:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800d830:	490a      	ldr	r1, [pc, #40]	@ (800d85c <lfs_alloc+0x108>)
 800d832:	480b      	ldr	r0, [pc, #44]	@ (800d860 <lfs_alloc+0x10c>)
 800d834:	f015 f9e0 	bl	8022bf8 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800d838:	f06f 031b 	mvn.w	r3, #27
 800d83c:	e007      	b.n	800d84e <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff ff46 	bl	800d6d0 <lfs_alloc_scan>
 800d844:	60f8      	str	r0, [r7, #12]
        if(err) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d088      	beq.n	800d75e <lfs_alloc+0xa>
            return err;
 800d84c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	08025d1c 	.word	0x08025d1c
 800d85c:	08025bf4 	.word	0x08025bf4
 800d860:	08025cf0 	.word	0x08025cf0

0800d864 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800d864:	b590      	push	{r4, r7, lr}
 800d866:	b08f      	sub	sp, #60	@ 0x3c
 800d868:	af04      	add	r7, sp, #16
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	333c      	adds	r3, #60	@ 0x3c
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fd20 	bl	800d2d0 <lfs_gstate_hasmovehere>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 80ca 	beq.w	800da2c <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff fc5d 	bl	800d158 <lfs_tag_id>
 800d89e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 80c3 	beq.w	800da2c <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fc54 	bl	800d158 <lfs_tag_id>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461c      	mov	r4, r3
 800d8b4:	6838      	ldr	r0, [r7, #0]
 800d8b6:	f7ff fc4f 	bl	800d158 <lfs_tag_id>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d102      	bne.n	800d8c6 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800d8c0:	f06f 0301 	mvn.w	r3, #1
 800d8c4:	e0be      	b.n	800da44 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fc44 	bl	800d158 <lfs_tag_id>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	6838      	ldr	r0, [r7, #0]
 800d8d6:	f7ff fc3f 	bl	800d158 <lfs_tag_id>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	429c      	cmp	r4, r3
 800d8de:	f080 80a5 	bcs.w	800da2c <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800d8e8:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800d8ea:	e09f      	b.n	800da2c <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7ff fc4f 	bl	800d192 <lfs_tag_dsize>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f8:	1a9b      	subs	r3, r3, r2
 800d8fa:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800d900:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800d906:	2204      	movs	r2, #4
 800d908:	9203      	str	r2, [sp, #12]
 800d90a:	f107 0210 	add.w	r2, r7, #16
 800d90e:	9202      	str	r2, [sp, #8]
 800d910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d912:	9201      	str	r2, [sp, #4]
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	2304      	movs	r3, #4
 800d918:	460a      	mov	r2, r1
 800d91a:	2100      	movs	r1, #0
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f7fe ff83 	bl	800c828 <lfs_bd_read>
 800d922:	61b8      	str	r0, [r7, #24]
        if (err) {
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <lfs_dir_getslice+0xca>
            return err;
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	e08a      	b.n	800da44 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe ff25 	bl	800c780 <lfs_frombe32>
 800d936:	4602      	mov	r2, r0
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	4053      	eors	r3, r2
 800d93c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d940:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7ff fc08 	bl	800d158 <lfs_tag_id>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d02b      	beq.n	800d9a6 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d94e:	69f8      	ldr	r0, [r7, #28]
 800d950:	f7ff fbb8 	bl	800d0c4 <lfs_tag_type1>
 800d954:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800d956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d95a:	d124      	bne.n	800d9a6 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800d95c:	69f8      	ldr	r0, [r7, #28]
 800d95e:	f7ff fbfb 	bl	800d158 <lfs_tag_id>
 800d962:	4603      	mov	r3, r0
 800d964:	461c      	mov	r4, r3
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff fbf3 	bl	800d158 <lfs_tag_id>
 800d972:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d974:	429c      	cmp	r4, r3
 800d976:	d816      	bhi.n	800d9a6 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	1ad2      	subs	r2, r2, r3
 800d97e:	4b33      	ldr	r3, [pc, #204]	@ (800da4c <lfs_dir_getslice+0x1e8>)
 800d980:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800d982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d98a:	69fa      	ldr	r2, [r7, #28]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d102      	bne.n	800d996 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800d990:	f06f 0301 	mvn.w	r3, #1
 800d994:	e056      	b.n	800da44 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800d996:	69f8      	ldr	r0, [r7, #28]
 800d998:	f7ff fbd1 	bl	800d13e <lfs_tag_splice>
 800d99c:	4603      	mov	r3, r0
 800d99e:	029a      	lsls	r2, r3, #10
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	401a      	ands	r2, r3
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	1ac9      	subs	r1, r1, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	400b      	ands	r3, r1
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d138      	bne.n	800da2c <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800d9ba:	69f8      	ldr	r0, [r7, #28]
 800d9bc:	f7ff fb6f 	bl	800d09e <lfs_tag_isdelete>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800d9c6:	f06f 0301 	mvn.w	r3, #1
 800d9ca:	e03b      	b.n	800da44 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800d9cc:	69f8      	ldr	r0, [r7, #28]
 800d9ce:	f7ff fbd3 	bl	800d178 <lfs_tag_size>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fe4b 	bl	800c672 <lfs_min>
 800d9dc:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800d9de:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9e8:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800d9ea:	3204      	adds	r2, #4
 800d9ec:	6979      	ldr	r1, [r7, #20]
 800d9ee:	9103      	str	r1, [sp, #12]
 800d9f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9f2:	9102      	str	r1, [sp, #8]
 800d9f4:	9201      	str	r2, [sp, #4]
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7fe ff12 	bl	800c828 <lfs_bd_read>
 800da04:	61b8      	str	r0, [r7, #24]
            if (err) {
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <lfs_dir_getslice+0x1ac>
                return err;
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	e019      	b.n	800da44 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800da10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	18d0      	adds	r0, r2, r3
 800da16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	461a      	mov	r2, r3
 800da1e:	2100      	movs	r1, #0
 800da20:	f015 fa1a 	bl	8022e58 <memset>

            return tag + gdiff;
 800da24:	6a3a      	ldr	r2, [r7, #32]
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	4413      	add	r3, r2
 800da2a:	e00b      	b.n	800da44 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff fbaf 	bl	800d192 <lfs_tag_dsize>
 800da34:	4603      	mov	r3, r0
 800da36:	3304      	adds	r3, #4
 800da38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da3a:	429a      	cmp	r2, r3
 800da3c:	f4bf af56 	bcs.w	800d8ec <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800da40:	f06f 0301 	mvn.w	r3, #1
}
 800da44:	4618      	mov	r0, r3
 800da46:	372c      	adds	r7, #44	@ 0x2c
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd90      	pop	{r4, r7, pc}
 800da4c:	000ffc00 	.word	0x000ffc00

0800da50 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af04      	add	r7, sp, #16
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800da5e:	6838      	ldr	r0, [r7, #0]
 800da60:	f7ff fb8a 	bl	800d178 <lfs_tag_size>
 800da64:	4603      	mov	r3, r0
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	2300      	movs	r3, #0
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	68b9      	ldr	r1, [r7, #8]
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f7ff fef4 	bl	800d864 <lfs_dir_getslice>
 800da7c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800da86:	b580      	push	{r7, lr}
 800da88:	b08c      	sub	sp, #48	@ 0x30
 800da8a:	af04      	add	r7, sp, #16
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	60b9      	str	r1, [r7, #8]
 800da90:	607a      	str	r2, [r7, #4]
 800da92:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800da98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9c:	441a      	add	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800daa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa4:	429a      	cmp	r2, r3
 800daa6:	f240 80c0 	bls.w	800dc2a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800daaa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800daae:	e0c1      	b.n	800dc34 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800dab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d03f      	beq.n	800db3a <lfs_dir_getread+0xb4>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f113 0f02 	cmn.w	r3, #2
 800dac2:	d13a      	bne.n	800db3a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800dace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d232      	bcs.n	800db3a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dada:	429a      	cmp	r2, r3
 800dadc:	d324      	bcc.n	800db28 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6859      	ldr	r1, [r3, #4]
 800dae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dae8:	1acb      	subs	r3, r1, r3
 800daea:	4413      	add	r3, r2
 800daec:	4619      	mov	r1, r3
 800daee:	69b8      	ldr	r0, [r7, #24]
 800daf0:	f7fe fdbf 	bl	800c672 <lfs_min>
 800daf4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	68da      	ldr	r2, [r3, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800db00:	1acb      	subs	r3, r1, r3
 800db02:	4413      	add	r3, r2
 800db04:	69ba      	ldr	r2, [r7, #24]
 800db06:	4619      	mov	r1, r3
 800db08:	69f8      	ldr	r0, [r7, #28]
 800db0a:	f015 fa86 	bl	802301a <memcpy>

                data += diff;
 800db0e:	69fa      	ldr	r2, [r7, #28]
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	4413      	add	r3, r2
 800db14:	61fb      	str	r3, [r7, #28]
                off += diff;
 800db16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	4413      	add	r3, r2
 800db1c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800db1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800db26:	e080      	b.n	800dc2a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	4619      	mov	r1, r3
 800db32:	69b8      	ldr	r0, [r7, #24]
 800db34:	f7fe fd9d 	bl	800c672 <lfs_min>
 800db38:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f113 0f02 	cmn.w	r3, #2
 800db42:	d13a      	bne.n	800dbba <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800db4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db50:	429a      	cmp	r2, r3
 800db52:	d232      	bcs.n	800dbba <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d324      	bcc.n	800dba8 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	689a      	ldr	r2, [r3, #8]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	6859      	ldr	r1, [r3, #4]
 800db66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db68:	1acb      	subs	r3, r1, r3
 800db6a:	4413      	add	r3, r2
 800db6c:	4619      	mov	r1, r3
 800db6e:	69b8      	ldr	r0, [r7, #24]
 800db70:	f7fe fd7f 	bl	800c672 <lfs_min>
 800db74:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800db80:	1acb      	subs	r3, r1, r3
 800db82:	4413      	add	r3, r2
 800db84:	69ba      	ldr	r2, [r7, #24]
 800db86:	4619      	mov	r1, r3
 800db88:	69f8      	ldr	r0, [r7, #28]
 800db8a:	f015 fa46 	bl	802301a <memcpy>

                data += diff;
 800db8e:	69fa      	ldr	r2, [r7, #28]
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	4413      	add	r3, r2
 800db94:	61fb      	str	r3, [r7, #28]
                off += diff;
 800db96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	4413      	add	r3, r2
 800db9c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800db9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800dba6:	e040      	b.n	800dc2a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	69b8      	ldr	r0, [r7, #24]
 800dbb4:	f7fe fd5d 	bl	800c672 <lfs_min>
 800dbb8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	f06f 0201 	mvn.w	r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dbcc:	f7fe fd61 	bl	800c692 <lfs_aligndown>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800dbd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	441a      	add	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dbe0:	69db      	ldr	r3, [r3, #28]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fe fd69 	bl	800c6bc <lfs_alignup>
 800dbea:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dbf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7fe fd3c 	bl	800c672 <lfs_min>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6889      	ldr	r1, [r1, #8]
 800dc0c:	9102      	str	r1, [sp, #8]
 800dc0e:	9201      	str	r2, [sp, #4]
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff fe23 	bl	800d864 <lfs_dir_getslice>
 800dc1e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	da01      	bge.n	800dc2a <lfs_dir_getread+0x1a4>
            return err;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	e004      	b.n	800dc34 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800dc2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f47f af3f 	bne.w	800dab0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800dc3c:	b590      	push	{r4, r7, lr}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <lfs_dir_traverse_filter+0x1e>
 800dc56:	4b24      	ldr	r3, [pc, #144]	@ (800dce8 <lfs_dir_traverse_filter+0xac>)
 800dc58:	e000      	b.n	800dc5c <lfs_dir_traverse_filter+0x20>
 800dc5a:	4b24      	ldr	r3, [pc, #144]	@ (800dcec <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800dc5c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	405a      	eors	r2, r3
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	4013      	ands	r3, r2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d014      	beq.n	800dc98 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff fa13 	bl	800d09e <lfs_tag_isdelete>
 800dc78:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10c      	bne.n	800dc98 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	4a19      	ldr	r2, [pc, #100]	@ (800dce8 <lfs_dir_traverse_filter+0xac>)
 800dc82:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	6819      	ldr	r1, [r3, #0]
 800dc88:	4b19      	ldr	r3, [pc, #100]	@ (800dcf0 <lfs_dir_traverse_filter+0xb4>)
 800dc8a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800dc8c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800dc90:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d104      	bne.n	800dca2 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]
        return true;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e01e      	b.n	800dce0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800dca2:	68b8      	ldr	r0, [r7, #8]
 800dca4:	f7ff fa0e 	bl	800d0c4 <lfs_tag_type1>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcae:	d116      	bne.n	800dcde <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800dcb0:	68b8      	ldr	r0, [r7, #8]
 800dcb2:	f7ff fa51 	bl	800d158 <lfs_tag_id>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	461c      	mov	r4, r3
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff fa4a 	bl	800d158 <lfs_tag_id>
 800dcc4:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800dcc6:	429c      	cmp	r4, r3
 800dcc8:	d809      	bhi.n	800dcde <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800dcca:	68b8      	ldr	r0, [r7, #8]
 800dccc:	f7ff fa37 	bl	800d13e <lfs_tag_splice>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	029a      	lsls	r2, r3, #10
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	441a      	add	r2, r3
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	601a      	str	r2, [r3, #0]
    }

    return false;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	371c      	adds	r7, #28
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd90      	pop	{r4, r7, pc}
 800dce8:	7ffffc00 	.word	0x7ffffc00
 800dcec:	700ffc00 	.word	0x700ffc00
 800dcf0:	000ffc00 	.word	0x000ffc00

0800dcf4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800dcf4:	b590      	push	{r4, r7, lr}
 800dcf6:	b0c1      	sub	sp, #260	@ 0x104
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800dd08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
 800dd10:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800dd12:	6838      	ldr	r0, [r7, #0]
 800dd14:	f7ff fa3d 	bl	800d192 <lfs_tag_dsize>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	441a      	add	r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d237      	bcs.n	800dd96 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800dd26:	6838      	ldr	r0, [r7, #0]
 800dd28:	f7ff fa33 	bl	800d192 <lfs_tag_dsize>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4413      	add	r3, r2
 800dd32:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800dd34:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800dd3a:	2204      	movs	r2, #4
 800dd3c:	9203      	str	r2, [sp, #12]
 800dd3e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800dd42:	9202      	str	r2, [sp, #8]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	9201      	str	r2, [sp, #4]
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	2304      	movs	r3, #4
 800dd4c:	460a      	mov	r2, r1
 800dd4e:	2100      	movs	r1, #0
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7fe fd69 	bl	800c828 <lfs_bd_read>
 800dd56:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800dd5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <lfs_dir_traverse+0x74>
                    return err;
 800dd62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd66:	e3a5      	b.n	800e4b4 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800dd68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe fd08 	bl	800c780 <lfs_frombe32>
 800dd70:	4602      	mov	r2, r0
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	4053      	eors	r3, r2
 800dd76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dd7a:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3304      	adds	r3, #4
 800dd86:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800dd88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800dd90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	e01b      	b.n	800ddce <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800dd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dd13      	ble.n	800ddc6 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800dd9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800dda6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800ddb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800ddba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ddc4:	e003      	b.n	800ddce <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800ddcc:	e2a1      	b.n	800e312 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800ddce:	4b7e      	ldr	r3, [pc, #504]	@ (800dfc8 <lfs_dir_traverse+0x2d4>)
 800ddd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800ddd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ddd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddda:	405a      	eors	r2, r3
 800dddc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800dde0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800dde4:	400b      	ands	r3, r1
 800dde6:	4013      	ands	r3, r2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 8284 	bne.w	800e2f6 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800ddee:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800ddf2:	f7ff f9b1 	bl	800d158 <lfs_tag_id>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 80ef 	beq.w	800dfdc <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800ddfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de02:	2b02      	cmp	r3, #2
 800de04:	d906      	bls.n	800de14 <lfs_dir_traverse+0x120>
 800de06:	4b71      	ldr	r3, [pc, #452]	@ (800dfcc <lfs_dir_traverse+0x2d8>)
 800de08:	4a71      	ldr	r2, [pc, #452]	@ (800dfd0 <lfs_dir_traverse+0x2dc>)
 800de0a:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800de0e:	4871      	ldr	r0, [pc, #452]	@ (800dfd4 <lfs_dir_traverse+0x2e0>)
 800de10:	f014 fb56 	bl	80224c0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800de14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de16:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de1a:	4613      	mov	r3, r2
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	1a9b      	subs	r3, r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	33f0      	adds	r3, #240	@ 0xf0
 800de24:	443b      	add	r3, r7
 800de26:	3b98      	subs	r3, #152	@ 0x98
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	601a      	str	r2, [r3, #0]
 800de2c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de30:	4613      	mov	r3, r2
 800de32:	011b      	lsls	r3, r3, #4
 800de34:	1a9b      	subs	r3, r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	33f0      	adds	r3, #240	@ 0xf0
 800de3a:	443b      	add	r3, r7
 800de3c:	3b94      	subs	r3, #148	@ 0x94
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de46:	4613      	mov	r3, r2
 800de48:	011b      	lsls	r3, r3, #4
 800de4a:	1a9b      	subs	r3, r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	33f0      	adds	r3, #240	@ 0xf0
 800de50:	443b      	add	r3, r7
 800de52:	3b90      	subs	r3, #144	@ 0x90
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de5c:	4613      	mov	r3, r2
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	1a9b      	subs	r3, r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	33f0      	adds	r3, #240	@ 0xf0
 800de66:	443b      	add	r3, r7
 800de68:	3b8c      	subs	r3, #140	@ 0x8c
 800de6a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de74:	4613      	mov	r3, r2
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	1a9b      	subs	r3, r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	33f0      	adds	r3, #240	@ 0xf0
 800de7e:	443b      	add	r3, r7
 800de80:	3b88      	subs	r3, #136	@ 0x88
 800de82:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800de8c:	4613      	mov	r3, r2
 800de8e:	011b      	lsls	r3, r3, #4
 800de90:	1a9b      	subs	r3, r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	33f0      	adds	r3, #240	@ 0xf0
 800de96:	443b      	add	r3, r7
 800de98:	3b84      	subs	r3, #132	@ 0x84
 800de9a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800dea4:	4613      	mov	r3, r2
 800dea6:	011b      	lsls	r3, r3, #4
 800dea8:	1a9b      	subs	r3, r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	33f0      	adds	r3, #240	@ 0xf0
 800deae:	443b      	add	r3, r7
 800deb0:	3b80      	subs	r3, #128	@ 0x80
 800deb2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800debc:	4613      	mov	r3, r2
 800debe:	011b      	lsls	r3, r3, #4
 800dec0:	1a9b      	subs	r3, r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	33f0      	adds	r3, #240	@ 0xf0
 800dec6:	443b      	add	r3, r7
 800dec8:	3b7c      	subs	r3, #124	@ 0x7c
 800deca:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800dece:	801a      	strh	r2, [r3, #0]
 800ded0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ded4:	4613      	mov	r3, r2
 800ded6:	011b      	lsls	r3, r3, #4
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	33f0      	adds	r3, #240	@ 0xf0
 800dede:	443b      	add	r3, r7
 800dee0:	3b7a      	subs	r3, #122	@ 0x7a
 800dee2:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800dee6:	801a      	strh	r2, [r3, #0]
 800dee8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800deec:	4613      	mov	r3, r2
 800deee:	011b      	lsls	r3, r3, #4
 800def0:	1a9b      	subs	r3, r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	33f0      	adds	r3, #240	@ 0xf0
 800def6:	443b      	add	r3, r7
 800def8:	3b78      	subs	r3, #120	@ 0x78
 800defa:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800defe:	801a      	strh	r2, [r3, #0]
 800df00:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800df04:	4613      	mov	r3, r2
 800df06:	011b      	lsls	r3, r3, #4
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	33f0      	adds	r3, #240	@ 0xf0
 800df0e:	443b      	add	r3, r7
 800df10:	3b74      	subs	r3, #116	@ 0x74
 800df12:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800df1c:	4613      	mov	r3, r2
 800df1e:	011b      	lsls	r3, r3, #4
 800df20:	1a9b      	subs	r3, r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	33f0      	adds	r3, #240	@ 0xf0
 800df26:	443b      	add	r3, r7
 800df28:	3b70      	subs	r3, #112	@ 0x70
 800df2a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800df34:	4613      	mov	r3, r2
 800df36:	011b      	lsls	r3, r3, #4
 800df38:	1a9b      	subs	r3, r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	33f0      	adds	r3, #240	@ 0xf0
 800df3e:	443b      	add	r3, r7
 800df40:	3b6c      	subs	r3, #108	@ 0x6c
 800df42:	6019      	str	r1, [r3, #0]
 800df44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800df48:	4613      	mov	r3, r2
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	33f0      	adds	r3, #240	@ 0xf0
 800df52:	443b      	add	r3, r7
 800df54:	3b68      	subs	r3, #104	@ 0x68
 800df56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800df60:	4613      	mov	r3, r2
 800df62:	011b      	lsls	r3, r3, #4
 800df64:	1a9b      	subs	r3, r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	33f0      	adds	r3, #240	@ 0xf0
 800df6a:	443b      	add	r3, r7
 800df6c:	3b68      	subs	r3, #104	@ 0x68
 800df6e:	3304      	adds	r3, #4
 800df70:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800df74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df78:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800df7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800df80:	3301      	adds	r3, #1
 800df82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd8 <lfs_dir_traverse+0x2e4>)
 800dfa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800dfaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dfae:	1e5a      	subs	r2, r3, #1
 800dfb0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	011b      	lsls	r3, r3, #4
 800dfb8:	1a9b      	subs	r3, r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	3328      	adds	r3, #40	@ 0x28
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800dfc6:	e19d      	b.n	800e304 <lfs_dir_traverse+0x610>
 800dfc8:	7ff00000 	.word	0x7ff00000
 800dfcc:	08025d20 	.word	0x08025d20
 800dfd0:	08029464 	.word	0x08029464
 800dfd4:	08025bf4 	.word	0x08025bf4
 800dfd8:	0800dc3d 	.word	0x0800dc3d
            }
        }

popped:
 800dfdc:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800dfde:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800dfe2:	f7ff f8b9 	bl	800d158 <lfs_tag_id>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d015      	beq.n	800e018 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800dfec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff f8b2 	bl	800d158 <lfs_tag_id>
 800dff4:	4603      	mov	r3, r0
 800dff6:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800dff8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800dffc:	4293      	cmp	r3, r2
 800dffe:	f200 817c 	bhi.w	800e2fa <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff f8a7 	bl	800d158 <lfs_tag_id>
 800e00a:	4603      	mov	r3, r0
 800e00c:	461a      	mov	r2, r3
 800e00e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800e012:	4293      	cmp	r3, r2
 800e014:	f240 8171 	bls.w	800e2fa <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800e018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff f872 	bl	800d104 <lfs_tag_type3>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	f43f ae75 	beq.w	800dd12 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800e028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff f86a 	bl	800d104 <lfs_tag_type3>
 800e030:	4603      	mov	r3, r0
 800e032:	461a      	mov	r2, r3
 800e034:	f240 1301 	movw	r3, #257	@ 0x101
 800e038:	429a      	cmp	r2, r3
 800e03a:	f040 80e0 	bne.w	800e1fe <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800e03e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e042:	4ab1      	ldr	r2, [pc, #708]	@ (800e308 <lfs_dir_traverse+0x614>)
 800e044:	4293      	cmp	r3, r2
 800e046:	f000 815a 	beq.w	800e2fe <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800e04a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e04e:	4613      	mov	r3, r2
 800e050:	011b      	lsls	r3, r3, #4
 800e052:	1a9b      	subs	r3, r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	33f0      	adds	r3, #240	@ 0xf0
 800e058:	443b      	add	r3, r7
 800e05a:	3b98      	subs	r3, #152	@ 0x98
 800e05c:	4618      	mov	r0, r3
 800e05e:	233c      	movs	r3, #60	@ 0x3c
 800e060:	461a      	mov	r2, r3
 800e062:	2100      	movs	r1, #0
 800e064:	f014 fef8 	bl	8022e58 <memset>
 800e068:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e06c:	4613      	mov	r3, r2
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	1a9b      	subs	r3, r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	33f0      	adds	r3, #240	@ 0xf0
 800e076:	443b      	add	r3, r7
 800e078:	3b98      	subs	r3, #152	@ 0x98
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e082:	4613      	mov	r3, r2
 800e084:	011b      	lsls	r3, r3, #4
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	33f0      	adds	r3, #240	@ 0xf0
 800e08c:	443b      	add	r3, r7
 800e08e:	3b94      	subs	r3, #148	@ 0x94
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e098:	4613      	mov	r3, r2
 800e09a:	011b      	lsls	r3, r3, #4
 800e09c:	1a9b      	subs	r3, r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	33f0      	adds	r3, #240	@ 0xf0
 800e0a2:	443b      	add	r3, r7
 800e0a4:	3b90      	subs	r3, #144	@ 0x90
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	011b      	lsls	r3, r3, #4
 800e0b2:	1a9b      	subs	r3, r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	33f0      	adds	r3, #240	@ 0xf0
 800e0b8:	443b      	add	r3, r7
 800e0ba:	3b8c      	subs	r3, #140	@ 0x8c
 800e0bc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	011b      	lsls	r3, r3, #4
 800e0ca:	1a9b      	subs	r3, r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	33f0      	adds	r3, #240	@ 0xf0
 800e0d0:	443b      	add	r3, r7
 800e0d2:	3b88      	subs	r3, #136	@ 0x88
 800e0d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e0de:	4613      	mov	r3, r2
 800e0e0:	011b      	lsls	r3, r3, #4
 800e0e2:	1a9b      	subs	r3, r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	33f0      	adds	r3, #240	@ 0xf0
 800e0e8:	443b      	add	r3, r7
 800e0ea:	3b84      	subs	r3, #132	@ 0x84
 800e0ec:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e0f0:	601a      	str	r2, [r3, #0]
 800e0f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	1a9b      	subs	r3, r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	33f0      	adds	r3, #240	@ 0xf0
 800e100:	443b      	add	r3, r7
 800e102:	3b80      	subs	r3, #128	@ 0x80
 800e104:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e10e:	4613      	mov	r3, r2
 800e110:	011b      	lsls	r3, r3, #4
 800e112:	1a9b      	subs	r3, r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	33f0      	adds	r3, #240	@ 0xf0
 800e118:	443b      	add	r3, r7
 800e11a:	3b7c      	subs	r3, #124	@ 0x7c
 800e11c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e120:	801a      	strh	r2, [r3, #0]
 800e122:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e126:	4613      	mov	r3, r2
 800e128:	011b      	lsls	r3, r3, #4
 800e12a:	1a9b      	subs	r3, r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	33f0      	adds	r3, #240	@ 0xf0
 800e130:	443b      	add	r3, r7
 800e132:	3b7a      	subs	r3, #122	@ 0x7a
 800e134:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e138:	801a      	strh	r2, [r3, #0]
 800e13a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e13e:	4613      	mov	r3, r2
 800e140:	011b      	lsls	r3, r3, #4
 800e142:	1a9b      	subs	r3, r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	33f0      	adds	r3, #240	@ 0xf0
 800e148:	443b      	add	r3, r7
 800e14a:	3b78      	subs	r3, #120	@ 0x78
 800e14c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e150:	801a      	strh	r2, [r3, #0]
 800e152:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e156:	4613      	mov	r3, r2
 800e158:	011b      	lsls	r3, r3, #4
 800e15a:	1a9b      	subs	r3, r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	33f0      	adds	r3, #240	@ 0xf0
 800e160:	443b      	add	r3, r7
 800e162:	3b74      	subs	r3, #116	@ 0x74
 800e164:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e16e:	4613      	mov	r3, r2
 800e170:	011b      	lsls	r3, r3, #4
 800e172:	1a9b      	subs	r3, r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	33f0      	adds	r3, #240	@ 0xf0
 800e178:	443b      	add	r3, r7
 800e17a:	3b70      	subs	r3, #112	@ 0x70
 800e17c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e180:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800e182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e186:	3301      	adds	r3, #1
 800e188:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800e18c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe fff2 	bl	800d178 <lfs_tag_size>
 800e194:	4603      	mov	r3, r0
 800e196:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800e19a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fe ffdb 	bl	800d158 <lfs_tag_id>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800e1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1ac:	60bb      	str	r3, [r7, #8]
            off = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800e1b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1b6:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800e1c4:	4b51      	ldr	r3, [pc, #324]	@ (800e30c <lfs_dir_traverse+0x618>)
 800e1c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800e1ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800e1ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800e1d2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e1d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800e1da:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e1de:	3301      	adds	r3, #1
 800e1e0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800e1e4:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800e1e8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800e1f4:	4413      	add	r3, r2
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800e1fc:	e589      	b.n	800dd12 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800e1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe ff7f 	bl	800d104 <lfs_tag_type3>
 800e206:	4603      	mov	r3, r0
 800e208:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800e20c:	d159      	bne.n	800e2c2 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e20e:	2300      	movs	r3, #0
 800e210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e214:	e04b      	b.n	800e2ae <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800e216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e21a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e21e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e222:	4613      	mov	r3, r2
 800e224:	005b      	lsls	r3, r3, #1
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	461a      	mov	r2, r3
 800e22c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e230:	4413      	add	r3, r2
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800e238:	051c      	lsls	r4, r3, #20
 800e23a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe ff8b 	bl	800d158 <lfs_tag_id>
 800e242:	4603      	mov	r3, r0
 800e244:	461a      	mov	r2, r3
 800e246:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e24a:	4413      	add	r3, r2
 800e24c:	029b      	lsls	r3, r3, #10
 800e24e:	ea44 0103 	orr.w	r1, r4, r3
 800e252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e256:	4613      	mov	r3, r2
 800e258:	005b      	lsls	r3, r3, #1
 800e25a:	4413      	add	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	461a      	mov	r2, r3
 800e260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e264:	4413      	add	r3, r2
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800e26a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e26e:	4613      	mov	r3, r2
 800e270:	005b      	lsls	r3, r3, #1
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	461a      	mov	r2, r3
 800e278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e27c:	4413      	add	r3, r2
 800e27e:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e284:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e288:	4798      	blx	r3
 800e28a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800e28e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e292:	2b00      	cmp	r3, #0
 800e294:	da02      	bge.n	800e29c <lfs_dir_traverse+0x5a8>
                    return res;
 800e296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e29a:	e10b      	b.n	800e4b4 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800e29c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d12e      	bne.n	800e302 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe ff61 	bl	800d178 <lfs_tag_size>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d3aa      	bcc.n	800e216 <lfs_dir_traverse+0x522>
 800e2c0:	e527      	b.n	800dd12 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800e2c2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e2c6:	029a      	lsls	r2, r3, #10
 800e2c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ca:	18d1      	adds	r1, r2, r3
 800e2cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e2d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e2d4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e2d8:	4798      	blx	r3
 800e2da:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800e2de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	da02      	bge.n	800e2ec <lfs_dir_traverse+0x5f8>
                return res;
 800e2e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e2ea:	e0e3      	b.n	800e4b4 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800e2ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10d      	bne.n	800e310 <lfs_dir_traverse+0x61c>
 800e2f4:	e50d      	b.n	800dd12 <lfs_dir_traverse+0x1e>
                continue;
 800e2f6:	bf00      	nop
 800e2f8:	e50b      	b.n	800dd12 <lfs_dir_traverse+0x1e>
            continue;
 800e2fa:	bf00      	nop
 800e2fc:	e509      	b.n	800dd12 <lfs_dir_traverse+0x1e>
                continue;
 800e2fe:	bf00      	nop
 800e300:	e507      	b.n	800dd12 <lfs_dir_traverse+0x1e>
                    break;
 800e302:	bf00      	nop
        {
 800e304:	e505      	b.n	800dd12 <lfs_dir_traverse+0x1e>
 800e306:	bf00      	nop
 800e308:	0800dc3d 	.word	0x0800dc3d
 800e30c:	600ffc00 	.word	0x600ffc00
                break;
 800e310:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800e312:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 80ca 	beq.w	800e4b0 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800e31c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e320:	1e5a      	subs	r2, r3, #1
 800e322:	4613      	mov	r3, r2
 800e324:	011b      	lsls	r3, r3, #4
 800e326:	1a9b      	subs	r3, r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	33f0      	adds	r3, #240	@ 0xf0
 800e32c:	443b      	add	r3, r7
 800e32e:	3b98      	subs	r3, #152	@ 0x98
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800e334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e338:	1e5a      	subs	r2, r3, #1
 800e33a:	4613      	mov	r3, r2
 800e33c:	011b      	lsls	r3, r3, #4
 800e33e:	1a9b      	subs	r3, r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	33f0      	adds	r3, #240	@ 0xf0
 800e344:	443b      	add	r3, r7
 800e346:	3b94      	subs	r3, #148	@ 0x94
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800e34c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e350:	1e5a      	subs	r2, r3, #1
 800e352:	4613      	mov	r3, r2
 800e354:	011b      	lsls	r3, r3, #4
 800e356:	1a9b      	subs	r3, r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	33f0      	adds	r3, #240	@ 0xf0
 800e35c:	443b      	add	r3, r7
 800e35e:	3b90      	subs	r3, #144	@ 0x90
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800e364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e368:	1e5a      	subs	r2, r3, #1
 800e36a:	4613      	mov	r3, r2
 800e36c:	011b      	lsls	r3, r3, #4
 800e36e:	1a9b      	subs	r3, r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	33f0      	adds	r3, #240	@ 0xf0
 800e374:	443b      	add	r3, r7
 800e376:	3b8c      	subs	r3, #140	@ 0x8c
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800e37e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e382:	1e5a      	subs	r2, r3, #1
 800e384:	4613      	mov	r3, r2
 800e386:	011b      	lsls	r3, r3, #4
 800e388:	1a9b      	subs	r3, r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	33f0      	adds	r3, #240	@ 0xf0
 800e38e:	443b      	add	r3, r7
 800e390:	3b88      	subs	r3, #136	@ 0x88
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800e398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e39c:	1e5a      	subs	r2, r3, #1
 800e39e:	4613      	mov	r3, r2
 800e3a0:	011b      	lsls	r3, r3, #4
 800e3a2:	1a9b      	subs	r3, r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	33f0      	adds	r3, #240	@ 0xf0
 800e3a8:	443b      	add	r3, r7
 800e3aa:	3b84      	subs	r3, #132	@ 0x84
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800e3b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e3b6:	1e5a      	subs	r2, r3, #1
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	011b      	lsls	r3, r3, #4
 800e3bc:	1a9b      	subs	r3, r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	33f0      	adds	r3, #240	@ 0xf0
 800e3c2:	443b      	add	r3, r7
 800e3c4:	3b80      	subs	r3, #128	@ 0x80
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800e3cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e3d0:	1e5a      	subs	r2, r3, #1
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	1a9b      	subs	r3, r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	33f0      	adds	r3, #240	@ 0xf0
 800e3dc:	443b      	add	r3, r7
 800e3de:	3b7c      	subs	r3, #124	@ 0x7c
 800e3e0:	881b      	ldrh	r3, [r3, #0]
 800e3e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800e3e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e3ea:	1e5a      	subs	r2, r3, #1
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	011b      	lsls	r3, r3, #4
 800e3f0:	1a9b      	subs	r3, r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	33f0      	adds	r3, #240	@ 0xf0
 800e3f6:	443b      	add	r3, r7
 800e3f8:	3b7a      	subs	r3, #122	@ 0x7a
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800e400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e404:	1e5a      	subs	r2, r3, #1
 800e406:	4613      	mov	r3, r2
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	1a9b      	subs	r3, r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	33f0      	adds	r3, #240	@ 0xf0
 800e410:	443b      	add	r3, r7
 800e412:	3b78      	subs	r3, #120	@ 0x78
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800e41a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	4613      	mov	r3, r2
 800e422:	011b      	lsls	r3, r3, #4
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	33f0      	adds	r3, #240	@ 0xf0
 800e42a:	443b      	add	r3, r7
 800e42c:	3b74      	subs	r3, #116	@ 0x74
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800e434:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e438:	1e5a      	subs	r2, r3, #1
 800e43a:	4613      	mov	r3, r2
 800e43c:	011b      	lsls	r3, r3, #4
 800e43e:	1a9b      	subs	r3, r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	33f0      	adds	r3, #240	@ 0xf0
 800e444:	443b      	add	r3, r7
 800e446:	3b70      	subs	r3, #112	@ 0x70
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800e44e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e452:	1e5a      	subs	r2, r3, #1
 800e454:	4613      	mov	r3, r2
 800e456:	011b      	lsls	r3, r3, #4
 800e458:	1a9b      	subs	r3, r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	33f0      	adds	r3, #240	@ 0xf0
 800e45e:	443b      	add	r3, r7
 800e460:	3b6c      	subs	r3, #108	@ 0x6c
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800e466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e46a:	1e5a      	subs	r2, r3, #1
 800e46c:	4613      	mov	r3, r2
 800e46e:	011b      	lsls	r3, r3, #4
 800e470:	1a9b      	subs	r3, r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	33f0      	adds	r3, #240	@ 0xf0
 800e476:	443b      	add	r3, r7
 800e478:	3b68      	subs	r3, #104	@ 0x68
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800e480:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e484:	1e5a      	subs	r2, r3, #1
 800e486:	4613      	mov	r3, r2
 800e488:	011b      	lsls	r3, r3, #4
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	33f0      	adds	r3, #240	@ 0xf0
 800e490:	443b      	add	r3, r7
 800e492:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800e496:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e49a:	3204      	adds	r2, #4
 800e49c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4a0:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800e4a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800e4ae:	e596      	b.n	800dfde <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800e4b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	37f4      	adds	r7, #244	@ 0xf4
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd90      	pop	{r4, r7, pc}

0800e4bc <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4be:	b0a5      	sub	sp, #148	@ 0x94
 800e4c0:	af04      	add	r7, sp, #16
 800e4c2:	6178      	str	r0, [r7, #20]
 800e4c4:	6139      	str	r1, [r7, #16]
 800e4c6:	60fa      	str	r2, [r7, #12]
 800e4c8:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4ce:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00f      	beq.n	800e4f8 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d206      	bcs.n	800e4f2 <lfs_dir_fetchmatch+0x36>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d302      	bcc.n	800e4f8 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800e4f2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e4f6:	e3a4      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800e500:	2300      	movs	r3, #0
 800e502:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800e504:	2300      	movs	r3, #0
 800e506:	677b      	str	r3, [r7, #116]	@ 0x74
 800e508:	e05a      	b.n	800e5c0 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800e50a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800e50c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800e514:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800e516:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800e51a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e51c:	0092      	lsls	r2, r2, #2
 800e51e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800e520:	2104      	movs	r1, #4
 800e522:	9103      	str	r1, [sp, #12]
 800e524:	9202      	str	r2, [sp, #8]
 800e526:	2200      	movs	r2, #0
 800e528:	9201      	str	r2, [sp, #4]
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	2304      	movs	r3, #4
 800e52e:	4602      	mov	r2, r0
 800e530:	2100      	movs	r1, #0
 800e532:	6978      	ldr	r0, [r7, #20]
 800e534:	f7fe f978 	bl	800c828 <lfs_bd_read>
 800e538:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800e53a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	3378      	adds	r3, #120	@ 0x78
 800e540:	f107 0208 	add.w	r2, r7, #8
 800e544:	4413      	add	r3, r2
 800e546:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f901 	bl	800c752 <lfs_fromle32>
 800e550:	4602      	mov	r2, r0
 800e552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	3378      	adds	r3, #120	@ 0x78
 800e558:	f107 0108 	add.w	r1, r7, #8
 800e55c:	440b      	add	r3, r1
 800e55e:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800e562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <lfs_dir_fetchmatch+0xb8>
 800e568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e56a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e56e:	d001      	beq.n	800e574 <lfs_dir_fetchmatch+0xb8>
            return err;
 800e570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e572:	e366      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800e574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e576:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e57a:	d01e      	beq.n	800e5ba <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800e57c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	3378      	adds	r3, #120	@ 0x78
 800e582:	f107 0208 	add.w	r2, r7, #8
 800e586:	4413      	add	r3, r2
 800e588:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800e58c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e58e:	3301      	adds	r3, #1
 800e590:	2b00      	cmp	r3, #0
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	bfb8      	it	lt
 800e598:	425b      	neglt	r3, r3
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	3378      	adds	r3, #120	@ 0x78
 800e59e:	f107 0108 	add.w	r1, r7, #8
 800e5a2:	440b      	add	r3, r1
 800e5a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	f7fe f8c3 	bl	800c736 <lfs_scmp>
 800e5b0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dd01      	ble.n	800e5ba <lfs_dir_fetchmatch+0xfe>
            r = i;
 800e5b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800e5ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5bc:	3301      	adds	r3, #1
 800e5be:	677b      	str	r3, [r7, #116]	@ 0x74
 800e5c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	dda1      	ble.n	800e50a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800e5c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	bfb8      	it	lt
 800e5d0:	425b      	neglt	r3, r3
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800e5de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f003 0301 	and.w	r3, r3, #1
 800e5e8:	bfb8      	it	lt
 800e5ea:	425b      	neglt	r3, r3
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800e5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	bfb8      	it	lt
 800e602:	425b      	neglt	r3, r3
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	3378      	adds	r3, #120	@ 0x78
 800e608:	f107 0208 	add.w	r2, r7, #8
 800e60c:	4413      	add	r3, r2
 800e60e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2200      	movs	r2, #0
 800e61a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800e61c:	2300      	movs	r3, #0
 800e61e:	673b      	str	r3, [r7, #112]	@ 0x70
 800e620:	e2fb      	b.n	800ec1a <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800e626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e62a:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800e62c:	2300      	movs	r3, #0
 800e62e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800e632:	4aa9      	ldr	r2, [pc, #676]	@ (800e8d8 <lfs_dir_fetchmatch+0x41c>)
 800e634:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e63c:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800e640:	2300      	movs	r3, #0
 800e642:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800e646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e648:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800e64a:	2300      	movs	r3, #0
 800e64c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800e650:	2300      	movs	r3, #0
 800e652:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe f884 	bl	800c768 <lfs_tole32>
 800e660:	4602      	mov	r2, r0
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	3308      	adds	r3, #8
 800e66a:	2204      	movs	r2, #4
 800e66c:	4619      	mov	r1, r3
 800e66e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e672:	f005 fef5 	bl	8014460 <lfs_crc>
 800e676:	4603      	mov	r3, r0
 800e678:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe f867 	bl	800c752 <lfs_fromle32>
 800e684:	4602      	mov	r2, r0
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800e68a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800e68c:	f7fe fd81 	bl	800d192 <lfs_tag_dsize>
 800e690:	4602      	mov	r2, r0
 800e692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e694:	4413      	add	r3, r2
 800e696:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800e698:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e69e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2204      	movs	r2, #4
 800e6a6:	9203      	str	r2, [sp, #12]
 800e6a8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e6ac:	9202      	str	r2, [sp, #8]
 800e6ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e6b0:	9201      	str	r2, [sp, #4]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	460a      	mov	r2, r1
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	6978      	ldr	r0, [r7, #20]
 800e6bc:	f7fe f8b4 	bl	800c828 <lfs_bd_read>
 800e6c0:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800e6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d006      	beq.n	800e6d6 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800e6c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6ca:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e6ce:	f000 81d6 	beq.w	800ea7e <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800e6d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6d4:	e2b5      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800e6dc:	2204      	movs	r2, #4
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f005 febe 	bl	8014460 <lfs_crc>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe f848 	bl	800c780 <lfs_frombe32>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6f4:	4053      	eors	r3, r2
 800e6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe fcc1 	bl	800d082 <lfs_tag_isvalid>
 800e700:	4603      	mov	r3, r0
 800e702:	f083 0301 	eor.w	r3, r3, #1
 800e706:	b2db      	uxtb	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800e70c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800e70e:	f7fe fce9 	bl	800d0e4 <lfs_tag_type2>
 800e712:	4603      	mov	r3, r0
 800e714:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800e718:	bf0c      	ite	eq
 800e71a:	2301      	moveq	r3, #1
 800e71c:	2300      	movne	r3, #0
 800e71e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800e722:	e1bb      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	4618      	mov	r0, r3
 800e728:	f7fe fd33 	bl	800d192 <lfs_tag_dsize>
 800e72c:	4602      	mov	r2, r0
 800e72e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e730:	441a      	add	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e738:	429a      	cmp	r2, r3
 800e73a:	f200 81a2 	bhi.w	800ea82 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800e73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e740:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800e742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e744:	4618      	mov	r0, r3
 800e746:	f7fe fccd 	bl	800d0e4 <lfs_tag_type2>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800e750:	d15e      	bne.n	800e810 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800e752:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e758:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e760:	3204      	adds	r2, #4
 800e762:	2104      	movs	r1, #4
 800e764:	9103      	str	r1, [sp, #12]
 800e766:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e76a:	9102      	str	r1, [sp, #8]
 800e76c:	9201      	str	r2, [sp, #4]
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	4623      	mov	r3, r4
 800e772:	4602      	mov	r2, r0
 800e774:	2100      	movs	r1, #0
 800e776:	6978      	ldr	r0, [r7, #20]
 800e778:	f7fe f856 	bl	800c828 <lfs_bd_read>
 800e77c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800e77e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e780:	2b00      	cmp	r3, #0
 800e782:	d006      	beq.n	800e792 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800e784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e786:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e78a:	f000 817c 	beq.w	800ea86 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800e78e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800e790:	e257      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800e792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e794:	4618      	mov	r0, r3
 800e796:	f7fd ffdc 	bl	800c752 <lfs_fromle32>
 800e79a:	4603      	mov	r3, r0
 800e79c:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800e79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	f040 8171 	bne.w	800ea8a <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800e7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe fcba 	bl	800d124 <lfs_tag_chunk>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	07db      	lsls	r3, r3, #31
 800e7b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e7b6:	4053      	eors	r3, r2
 800e7b8:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7be:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800e7c2:	2204      	movs	r2, #4
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f005 fe4b 	bl	8014460 <lfs_crc>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800e7d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800e7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fe fcdb 	bl	800d192 <lfs_tag_dsize>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7e0:	441a      	add	r2, r3
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e7ea:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800e7f2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800e7f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800e7fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800e806:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800e808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e80c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e80e:	e73c      	b.n	800e68a <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800e810:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e818:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	681c      	ldr	r4, [r3, #0]
 800e81e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e820:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800e822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fcb4 	bl	800d192 <lfs_tag_dsize>
 800e82a:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800e82c:	3b04      	subs	r3, #4
 800e82e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e832:	9203      	str	r2, [sp, #12]
 800e834:	9302      	str	r3, [sp, #8]
 800e836:	9501      	str	r5, [sp, #4]
 800e838:	9400      	str	r4, [sp, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4632      	mov	r2, r6
 800e83e:	2100      	movs	r1, #0
 800e840:	6978      	ldr	r0, [r7, #20]
 800e842:	f7fe f98e 	bl	800cb62 <lfs_bd_crc>
 800e846:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800e848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d006      	beq.n	800e85c <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800e84e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e850:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e854:	f000 811b 	beq.w	800ea8e <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800e858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e85a:	e1f2      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800e85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe fc30 	bl	800d0c4 <lfs_tag_type1>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d113      	bne.n	800e892 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800e86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fe fc73 	bl	800d158 <lfs_tag_id>
 800e872:	4603      	mov	r3, r0
 800e874:	461a      	mov	r2, r3
 800e876:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e87a:	4293      	cmp	r3, r2
 800e87c:	f200 80b6 	bhi.w	800e9ec <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800e880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e882:	4618      	mov	r0, r3
 800e884:	f7fe fc68 	bl	800d158 <lfs_tag_id>
 800e888:	4603      	mov	r3, r0
 800e88a:	3301      	adds	r3, #1
 800e88c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800e890:	e0ac      	b.n	800e9ec <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800e892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fc15 	bl	800d0c4 <lfs_tag_type1>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8a0:	d13a      	bne.n	800e918 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800e8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fc4a 	bl	800d13e <lfs_tag_splice>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e8b2:	4413      	add	r3, r2
 800e8b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800e8b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8ba:	4b08      	ldr	r3, [pc, #32]	@ (800e8dc <lfs_dir_fetchmatch+0x420>)
 800e8bc:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800e8be:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800e8c2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800e8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d109      	bne.n	800e8e0 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800e8cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e8d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e8d4:	e08a      	b.n	800e9ec <lfs_dir_fetchmatch+0x530>
 800e8d6:	bf00      	nop
 800e8d8:	08025d60 	.word	0x08025d60
 800e8dc:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800e8e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8e6:	f000 8081 	beq.w	800e9ec <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800e8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe fc33 	bl	800d158 <lfs_tag_id>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	461c      	mov	r4, r3
 800e8f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe fc2d 	bl	800d158 <lfs_tag_id>
 800e8fe:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800e900:	429c      	cmp	r4, r3
 800e902:	d873      	bhi.n	800e9ec <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe fc19 	bl	800d13e <lfs_tag_splice>
 800e90c:	4603      	mov	r3, r0
 800e90e:	029a      	lsls	r2, r3, #10
 800e910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e912:	4413      	add	r3, r2
 800e914:	663b      	str	r3, [r7, #96]	@ 0x60
 800e916:	e069      	b.n	800e9ec <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800e918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fe fbd2 	bl	800d0c4 <lfs_tag_type1>
 800e920:	4603      	mov	r3, r0
 800e922:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e926:	d132      	bne.n	800e98e <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fbfa 	bl	800d124 <lfs_tag_chunk>
 800e930:	4603      	mov	r3, r0
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	bf14      	ite	ne
 800e93a:	2301      	movne	r3, #1
 800e93c:	2300      	moveq	r3, #0
 800e93e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800e942:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e948:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e950:	3204      	adds	r2, #4
 800e952:	2108      	movs	r1, #8
 800e954:	9103      	str	r1, [sp, #12]
 800e956:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e95a:	9102      	str	r1, [sp, #8]
 800e95c:	9201      	str	r2, [sp, #4]
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	4623      	mov	r3, r4
 800e962:	4602      	mov	r2, r0
 800e964:	2100      	movs	r1, #0
 800e966:	6978      	ldr	r0, [r7, #20]
 800e968:	f7fd ff5e 	bl	800c828 <lfs_bd_read>
 800e96c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800e96e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e970:	2b00      	cmp	r3, #0
 800e972:	d006      	beq.n	800e982 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800e974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e976:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e97a:	f000 808a 	beq.w	800ea92 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800e97e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e980:	e15f      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800e982:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e986:	4618      	mov	r0, r3
 800e988:	f7fe fb47 	bl	800d01a <lfs_pair_fromle32>
 800e98c:	e02e      	b.n	800e9ec <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800e98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e990:	4618      	mov	r0, r3
 800e992:	f7fe fbb7 	bl	800d104 <lfs_tag_type3>
 800e996:	4603      	mov	r3, r0
 800e998:	461a      	mov	r2, r3
 800e99a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d124      	bne.n	800e9ec <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800e9a2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e9a8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9b0:	3204      	adds	r2, #4
 800e9b2:	2108      	movs	r1, #8
 800e9b4:	9103      	str	r1, [sp, #12]
 800e9b6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800e9ba:	9102      	str	r1, [sp, #8]
 800e9bc:	9201      	str	r2, [sp, #4]
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	4623      	mov	r3, r4
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	6978      	ldr	r0, [r7, #20]
 800e9c8:	f7fd ff2e 	bl	800c828 <lfs_bd_read>
 800e9cc:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800e9ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d003      	beq.n	800e9dc <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800e9d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9d6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e9da:	d05c      	beq.n	800ea96 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800e9dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fe fcd5 	bl	800d390 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800e9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e9f2:	405a      	eors	r2, r3
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f47f ae46 	bne.w	800e68a <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800e9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ea04:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800ea06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea08:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ea0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea0c:	f107 0220 	add.w	r2, r7, #32
 800ea10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea14:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ea18:	4798      	blx	r3
 800ea1a:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800ea1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	da05      	bge.n	800ea2e <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800ea22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea24:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ea28:	d037      	beq.n	800ea9a <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800ea2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800ea2c:	e109      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800ea2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d102      	bne.n	800ea3a <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800ea34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea36:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea38:	e627      	b.n	800e68a <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800ea3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea3e:	405a      	eors	r2, r3
 800ea40:	4b82      	ldr	r3, [pc, #520]	@ (800ec4c <lfs_dir_fetchmatch+0x790>)
 800ea42:	4013      	ands	r3, r2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d103      	bne.n	800ea50 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800ea48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea4c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea4e:	e61c      	b.n	800e68a <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800ea50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	f47f ae19 	bne.w	800e68a <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ea58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fb7c 	bl	800d158 <lfs_tag_id>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461c      	mov	r4, r3
 800ea64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fb76 	bl	800d158 <lfs_tag_id>
 800ea6c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ea6e:	429c      	cmp	r4, r3
 800ea70:	f63f ae0b 	bhi.w	800e68a <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ea74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ea7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea7c:	e605      	b.n	800e68a <lfs_dir_fetchmatch+0x1ce>
                    break;
 800ea7e:	bf00      	nop
 800ea80:	e00c      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                break;
 800ea82:	bf00      	nop
 800ea84:	e00a      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ea86:	bf00      	nop
 800ea88:	e008      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                    break;
 800ea8a:	bf00      	nop
 800ea8c:	e006      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                    break;
 800ea8e:	bf00      	nop
 800ea90:	e004      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ea92:	bf00      	nop
 800ea94:	e002      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ea96:	bf00      	nop
 800ea98:	e000      	b.n	800ea9c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ea9a:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d000      	beq.n	800eaa6 <lfs_dir_fetchmatch+0x5ea>
 800eaa4:	e017      	b.n	800ead6 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fe fa2f 	bl	800cf0c <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800eaae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eab0:	3301      	adds	r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	bfb8      	it	lt
 800eaba:	425b      	neglt	r3, r3
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	3378      	adds	r3, #120	@ 0x78
 800eac0:	f107 0208 	add.w	r2, r7, #8
 800eac4:	4413      	add	r3, r2
 800eac6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800eace:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ead0:	3301      	adds	r3, #1
 800ead2:	673b      	str	r3, [r7, #112]	@ 0x70
 800ead4:	e0a1      	b.n	800ec1a <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2200      	movs	r2, #0
 800eada:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800eadc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d03a      	beq.n	800eb5a <lfs_dir_fetchmatch+0x69e>
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800eaec:	6a12      	ldr	r2, [r2, #32]
 800eaee:	fbb3 f1f2 	udiv	r1, r3, r2
 800eaf2:	fb01 f202 	mul.w	r2, r1, r2
 800eaf6:	1a9b      	subs	r3, r3, r2
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d12e      	bne.n	800eb5a <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800eafc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d02a      	beq.n	800eb5a <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb08:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800eb0a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb10:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	693a      	ldr	r2, [r7, #16]
 800eb18:	68d2      	ldr	r2, [r2, #12]
 800eb1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eb1c:	f107 001c 	add.w	r0, r7, #28
 800eb20:	9003      	str	r0, [sp, #12]
 800eb22:	9102      	str	r1, [sp, #8]
 800eb24:	9201      	str	r2, [sp, #4]
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	462b      	mov	r3, r5
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	6978      	ldr	r0, [r7, #20]
 800eb30:	f7fe f817 	bl	800cb62 <lfs_bd_crc>
 800eb34:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800eb36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d005      	beq.n	800eb48 <lfs_dir_fetchmatch+0x68c>
 800eb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb3e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eb42:	d001      	beq.n	800eb48 <lfs_dir_fetchmatch+0x68c>
                    return err;
 800eb44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb46:	e07c      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800eb48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	bf0c      	ite	eq
 800eb50:	2301      	moveq	r3, #1
 800eb52:	2300      	movne	r3, #0
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	333c      	adds	r3, #60	@ 0x3c
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fbb4 	bl	800d2d0 <lfs_gstate_hasmovehere>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d028      	beq.n	800ebc0 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe faf0 	bl	800d158 <lfs_tag_id>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461c      	mov	r4, r3
 800eb7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe faea 	bl	800d158 <lfs_tag_id>
 800eb84:	4603      	mov	r3, r0
 800eb86:	429c      	cmp	r4, r3
 800eb88:	d104      	bne.n	800eb94 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800eb8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eb8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eb90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eb92:	e015      	b.n	800ebc0 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800eb94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eb96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb9a:	d011      	beq.n	800ebc0 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fe fad9 	bl	800d158 <lfs_tag_id>
 800eba6:	4603      	mov	r3, r0
 800eba8:	461c      	mov	r4, r3
 800ebaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fe fad3 	bl	800d158 <lfs_tag_id>
 800ebb2:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800ebb4:	429c      	cmp	r4, r3
 800ebb6:	d203      	bcs.n	800ebc0 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800ebb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ebbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800ebc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d010      	beq.n	800ebea <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800ebc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe fac4 	bl	800d158 <lfs_tag_id>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	8a9b      	ldrh	r3, [r3, #20]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	4610      	mov	r0, r2
 800ebdc:	f7fd fd49 	bl	800c672 <lfs_min>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ebe8:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800ebea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fe fa48 	bl	800d082 <lfs_tag_isvalid>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <lfs_dir_fetchmatch+0x740>
            return besttag;
 800ebf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebfa:	e022      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800ebfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe faaa 	bl	800d158 <lfs_tag_id>
 800ec04:	4603      	mov	r3, r0
 800ec06:	461a      	mov	r2, r3
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	8a9b      	ldrh	r3, [r3, #20]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d202      	bcs.n	800ec16 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800ec10:	f06f 0301 	mvn.w	r3, #1
 800ec14:	e015      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	e013      	b.n	800ec42 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800ec1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	f77f ad00 	ble.w	800e622 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	4909      	ldr	r1, [pc, #36]	@ (800ec50 <lfs_dir_fetchmatch+0x794>)
 800ec2c:	9101      	str	r1, [sp, #4]
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	4613      	mov	r3, r2
 800ec32:	f240 5259 	movw	r2, #1369	@ 0x559
 800ec36:	4907      	ldr	r1, [pc, #28]	@ (800ec54 <lfs_dir_fetchmatch+0x798>)
 800ec38:	4807      	ldr	r0, [pc, #28]	@ (800ec58 <lfs_dir_fetchmatch+0x79c>)
 800ec3a:	f013 ffdd 	bl	8022bf8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800ec3e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3784      	adds	r7, #132	@ 0x84
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	7ffffc00 	.word	0x7ffffc00
 800ec50:	08025d1c 	.word	0x08025d1c
 800ec54:	08025bf4 	.word	0x08025bf4
 800ec58:	08025d28 	.word	0x08025d28

0800ec5c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af04      	add	r7, sp, #16
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800ec68:	2300      	movs	r3, #0
 800ec6a:	9303      	str	r3, [sp, #12]
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	9302      	str	r3, [sp, #8]
 800ec70:	2300      	movs	r3, #0
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	68b9      	ldr	r1, [r7, #8]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7ff fc1a 	bl	800e4bc <lfs_dir_fetchmatch>
 800ec88:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b08a      	sub	sp, #40	@ 0x28
 800ec98:	af02      	add	r7, sp, #8
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800eca0:	f107 0310 	add.w	r3, r7, #16
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	4b12      	ldr	r3, [pc, #72]	@ (800ecf0 <lfs_dir_getgstate+0x5c>)
 800eca8:	4a12      	ldr	r2, [pc, #72]	@ (800ecf4 <lfs_dir_getgstate+0x60>)
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7fe fecf 	bl	800da50 <lfs_dir_get>
 800ecb2:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	da05      	bge.n	800ecc6 <lfs_dir_getgstate+0x32>
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	f113 0f02 	cmn.w	r3, #2
 800ecc0:	d001      	beq.n	800ecc6 <lfs_dir_getgstate+0x32>
        return res;
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	e00f      	b.n	800ece6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	f113 0f02 	cmn.w	r3, #2
 800eccc:	d00a      	beq.n	800ece4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800ecce:	f107 0310 	add.w	r3, r7, #16
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe fb1c 	bl	800d310 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800ecd8:	f107 0310 	add.w	r3, r7, #16
 800ecdc:	4619      	mov	r1, r3
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7fe fa6b 	bl	800d1ba <lfs_gstate_xor>
    }

    return 0;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3720      	adds	r7, #32
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	7ff0000c 	.word	0x7ff0000c
 800ecf4:	7ff00000 	.word	0x7ff00000

0800ecf8 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08a      	sub	sp, #40	@ 0x28
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	603b      	str	r3, [r7, #0]
 800ed04:	4613      	mov	r3, r2
 800ed06:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800ed08:	88fb      	ldrh	r3, [r7, #6]
 800ed0a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d10b      	bne.n	800ed2a <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	3308      	adds	r3, #8
 800ed16:	4932      	ldr	r1, [pc, #200]	@ (800ede0 <lfs_dir_getinfo+0xe8>)
 800ed18:	461a      	mov	r2, r3
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2202      	movs	r2, #2
 800ed24:	701a      	strb	r2, [r3, #0]
        return 0;
 800ed26:	2300      	movs	r3, #0
 800ed28:	e055      	b.n	800edd6 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800ed2a:	88fb      	ldrh	r3, [r7, #6]
 800ed2c:	029a      	lsls	r2, r3, #10
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed32:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800ed34:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	4a29      	ldr	r2, [pc, #164]	@ (800ede4 <lfs_dir_getinfo+0xec>)
 800ed40:	68b9      	ldr	r1, [r7, #8]
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f7fe fe84 	bl	800da50 <lfs_dir_get>
 800ed48:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	da01      	bge.n	800ed54 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	e040      	b.n	800edd6 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe f9d4 	bl	800d104 <lfs_tag_type3>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800ed64:	88fb      	ldrh	r3, [r7, #6]
 800ed66:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800ed68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ed6c:	f043 0308 	orr.w	r3, r3, #8
 800ed70:	f107 0214 	add.w	r2, r7, #20
 800ed74:	9200      	str	r2, [sp, #0]
 800ed76:	4a1c      	ldr	r2, [pc, #112]	@ (800ede8 <lfs_dir_getinfo+0xf0>)
 800ed78:	68b9      	ldr	r1, [r7, #8]
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7fe fe68 	bl	800da50 <lfs_dir_get>
 800ed80:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	da01      	bge.n	800ed8c <lfs_dir_getinfo+0x94>
        return (int)tag;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	e024      	b.n	800edd6 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800ed8c:	f107 0314 	add.w	r3, r7, #20
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe fb2d 	bl	800d3f0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe f9b3 	bl	800d104 <lfs_tag_type3>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	461a      	mov	r2, r3
 800eda2:	f240 2302 	movw	r3, #514	@ 0x202
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d103      	bne.n	800edb2 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800edaa:	69ba      	ldr	r2, [r7, #24]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	605a      	str	r2, [r3, #4]
 800edb0:	e010      	b.n	800edd4 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fe f9a5 	bl	800d104 <lfs_tag_type3>
 800edba:	4603      	mov	r3, r0
 800edbc:	461a      	mov	r2, r3
 800edbe:	f240 2301 	movw	r3, #513	@ 0x201
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d106      	bne.n	800edd4 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe f9d5 	bl	800d178 <lfs_tag_size>
 800edce:	4602      	mov	r2, r0
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	08025d68 	.word	0x08025d68
 800ede4:	780ffc00 	.word	0x780ffc00
 800ede8:	700ffc00 	.word	0x700ffc00

0800edec <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b08f      	sub	sp, #60	@ 0x3c
 800edf0:	af04      	add	r7, sp, #16
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800ee06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee08:	689c      	ldr	r4, [r3, #8]
 800ee0a:	68b8      	ldr	r0, [r7, #8]
 800ee0c:	f7fe f9b4 	bl	800d178 <lfs_tag_size>
 800ee10:	4603      	mov	r3, r0
 800ee12:	4619      	mov	r1, r3
 800ee14:	4620      	mov	r0, r4
 800ee16:	f7fd fc2c 	bl	800c672 <lfs_min>
 800ee1a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800ee1c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	69fa      	ldr	r2, [r7, #28]
 800ee24:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800ee26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee28:	6849      	ldr	r1, [r1, #4]
 800ee2a:	69b8      	ldr	r0, [r7, #24]
 800ee2c:	9003      	str	r0, [sp, #12]
 800ee2e:	9102      	str	r1, [sp, #8]
 800ee30:	9201      	str	r2, [sp, #4]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	4622      	mov	r2, r4
 800ee38:	2100      	movs	r1, #0
 800ee3a:	6a38      	ldr	r0, [r7, #32]
 800ee3c:	f7fd fe40 	bl	800cac0 <lfs_bd_cmp>
 800ee40:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <lfs_dir_find_match+0x60>
        return res;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	e014      	b.n	800ee76 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4e:	689c      	ldr	r4, [r3, #8]
 800ee50:	68b8      	ldr	r0, [r7, #8]
 800ee52:	f7fe f991 	bl	800d178 <lfs_tag_size>
 800ee56:	4603      	mov	r3, r0
 800ee58:	429c      	cmp	r4, r3
 800ee5a:	d00b      	beq.n	800ee74 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5e:	689c      	ldr	r4, [r3, #8]
 800ee60:	68b8      	ldr	r0, [r7, #8]
 800ee62:	f7fe f989 	bl	800d178 <lfs_tag_size>
 800ee66:	4603      	mov	r3, r0
 800ee68:	429c      	cmp	r4, r3
 800ee6a:	d201      	bcs.n	800ee70 <lfs_dir_find_match+0x84>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e002      	b.n	800ee76 <lfs_dir_find_match+0x8a>
 800ee70:	2302      	movs	r3, #2
 800ee72:	e000      	b.n	800ee76 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	372c      	adds	r7, #44	@ 0x2c
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd90      	pop	{r4, r7, pc}
	...

0800ee80 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b093      	sub	sp, #76	@ 0x4c
 800ee84:	af04      	add	r7, sp, #16
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d003      	beq.n	800eea2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800eea0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800eea2:	4b6e      	ldr	r3, [pc, #440]	@ (800f05c <lfs_dir_find+0x1dc>)
 800eea4:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6a1a      	ldr	r2, [r3, #32]
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800eeb6:	496a      	ldr	r1, [pc, #424]	@ (800f060 <lfs_dir_find+0x1e0>)
 800eeb8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eeba:	f013 ff7d 	bl	8022db8 <strspn>
 800eebe:	4602      	mov	r2, r0
 800eec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eec2:	4413      	add	r3, r2
 800eec4:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800eec6:	4966      	ldr	r1, [pc, #408]	@ (800f060 <lfs_dir_find+0x1e0>)
 800eec8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eeca:	f013 ff29 	bl	8022d20 <strcspn>
 800eece:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800eed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d105      	bne.n	800eee2 <lfs_dir_find+0x62>
 800eed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eed8:	781a      	ldrb	r2, [r3, #0]
 800eeda:	4b62      	ldr	r3, [pc, #392]	@ (800f064 <lfs_dir_find+0x1e4>)
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d00a      	beq.n	800eef8 <lfs_dir_find+0x78>
 800eee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d10c      	bne.n	800ef02 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800eee8:	2202      	movs	r2, #2
 800eeea:	495f      	ldr	r1, [pc, #380]	@ (800f068 <lfs_dir_find+0x1e8>)
 800eeec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eeee:	f013 ff89 	bl	8022e04 <memcmp>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d104      	bne.n	800ef02 <lfs_dir_find+0x82>
            name += namelen;
 800eef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefc:	4413      	add	r3, r2
 800eefe:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800ef00:	e7d9      	b.n	800eeb6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800ef02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef06:	4413      	add	r3, r2
 800ef08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800ef0e:	4954      	ldr	r1, [pc, #336]	@ (800f060 <lfs_dir_find+0x1e0>)
 800ef10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef12:	f013 ff51 	bl	8022db8 <strspn>
 800ef16:	4602      	mov	r2, r0
 800ef18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1a:	4413      	add	r3, r2
 800ef1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800ef1e:	4950      	ldr	r1, [pc, #320]	@ (800f060 <lfs_dir_find+0x1e0>)
 800ef20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef22:	f013 fefd 	bl	8022d20 <strcspn>
 800ef26:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d01d      	beq.n	800ef6a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800ef2e:	6a3b      	ldr	r3, [r7, #32]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d112      	bne.n	800ef5a <lfs_dir_find+0xda>
 800ef34:	2202      	movs	r2, #2
 800ef36:	494c      	ldr	r1, [pc, #304]	@ (800f068 <lfs_dir_find+0x1e8>)
 800ef38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef3a:	f013 ff63 	bl	8022e04 <memcmp>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10a      	bne.n	800ef5a <lfs_dir_find+0xda>
                depth -= 1;
 800ef44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef46:	3b01      	subs	r3, #1
 800ef48:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d107      	bne.n	800ef60 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800ef50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	4413      	add	r3, r2
 800ef56:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800ef58:	e7ad      	b.n	800eeb6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800ef60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	4413      	add	r3, r2
 800ef66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800ef68:	e7d1      	b.n	800ef0e <lfs_dir_find+0x8e>
                break;
 800ef6a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800ef6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <lfs_dir_find+0xf8>
            return tag;
 800ef74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef76:	e06c      	b.n	800f052 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef7c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fe f8bf 	bl	800d104 <lfs_tag_type3>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d002      	beq.n	800ef92 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800ef8c:	f06f 0313 	mvn.w	r3, #19
 800ef90:	e05f      	b.n	800f052 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7fe f8df 	bl	800d158 <lfs_tag_id>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d01c      	beq.n	800efe0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800efa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe f8d5 	bl	800d158 <lfs_tag_id>
 800efae:	4603      	mov	r3, r0
 800efb0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800efb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800efb6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800efbe:	9200      	str	r2, [sp, #0]
 800efc0:	4a2a      	ldr	r2, [pc, #168]	@ (800f06c <lfs_dir_find+0x1ec>)
 800efc2:	68b9      	ldr	r1, [r7, #8]
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f7fe fd43 	bl	800da50 <lfs_dir_get>
 800efca:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	da01      	bge.n	800efd6 <lfs_dir_find+0x156>
                return res;
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	e03d      	b.n	800f052 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	3318      	adds	r3, #24
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fe f81d 	bl	800d01a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800efe6:	212f      	movs	r1, #47	@ 0x2f
 800efe8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800efea:	f013 fe8c 	bl	8022d06 <strchr>
 800efee:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d101      	bne.n	800eff8 <lfs_dir_find+0x178>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	e000      	b.n	800effa <lfs_dir_find+0x17a>
 800eff8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800effa:	68fa      	ldr	r2, [r7, #12]
 800effc:	613a      	str	r2, [r7, #16]
 800effe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f000:	617a      	str	r2, [r7, #20]
 800f002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f004:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f006:	f107 0210 	add.w	r2, r7, #16
 800f00a:	9203      	str	r2, [sp, #12]
 800f00c:	4a18      	ldr	r2, [pc, #96]	@ (800f070 <lfs_dir_find+0x1f0>)
 800f00e:	9202      	str	r2, [sp, #8]
 800f010:	9301      	str	r3, [sp, #4]
 800f012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800f01a:	4622      	mov	r2, r4
 800f01c:	68b9      	ldr	r1, [r7, #8]
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fa4c 	bl	800e4bc <lfs_dir_fetchmatch>
 800f024:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f028:	2b00      	cmp	r3, #0
 800f02a:	da01      	bge.n	800f030 <lfs_dir_find+0x1b0>
                return tag;
 800f02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f02e:	e010      	b.n	800f052 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f036:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03a:	4413      	add	r3, r2
 800f03c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800f03e:	e73a      	b.n	800eeb6 <lfs_dir_find+0x36>
            if (!dir->split) {
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	7ddb      	ldrb	r3, [r3, #23]
 800f044:	f083 0301 	eor.w	r3, r3, #1
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0c8      	beq.n	800efe0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f04e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f052:	4618      	mov	r0, r3
 800f054:	373c      	adds	r7, #60	@ 0x3c
 800f056:	46bd      	mov	sp, r7
 800f058:	bd90      	pop	{r4, r7, pc}
 800f05a:	bf00      	nop
 800f05c:	002ffc00 	.word	0x002ffc00
 800f060:	08025d68 	.word	0x08025d68
 800f064:	08025d6c 	.word	0x08025d6c
 800f068:	08025d70 	.word	0x08025d70
 800f06c:	700ffc00 	.word	0x700ffc00
 800f070:	0800eded 	.word	0x0800eded

0800f074 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800f074:	b590      	push	{r4, r7, lr}
 800f076:	b08b      	sub	sp, #44	@ 0x2c
 800f078:	af04      	add	r7, sp, #16
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
 800f080:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f103 0010 	add.w	r0, r3, #16
 800f088:	68fc      	ldr	r4, [r7, #12]
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	68ba      	ldr	r2, [r7, #8]
 800f090:	6852      	ldr	r2, [r2, #4]
 800f092:	6839      	ldr	r1, [r7, #0]
 800f094:	9103      	str	r1, [sp, #12]
 800f096:	6879      	ldr	r1, [r7, #4]
 800f098:	9102      	str	r1, [sp, #8]
 800f09a:	9201      	str	r2, [sp, #4]
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	2300      	movs	r3, #0
 800f0a0:	4622      	mov	r2, r4
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7fd fe51 	bl	800cd4c <lfs_bd_prog>
 800f0aa:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <lfs_dir_commitprog+0x42>
        return err;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	e010      	b.n	800f0d8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	683a      	ldr	r2, [r7, #0]
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f005 f9ce 	bl	8014460 <lfs_crc>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	441a      	add	r2, r3
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	605a      	str	r2, [r3, #4]
    return 0;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	371c      	adds	r7, #28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd90      	pop	{r4, r7, pc}

0800f0e0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800f0e0:	b590      	push	{r4, r7, lr}
 800f0e2:	b08f      	sub	sp, #60	@ 0x3c
 800f0e4:	af04      	add	r7, sp, #16
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7fe f84f 	bl	800d192 <lfs_tag_dsize>
 800f0f4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	685a      	ldr	r2, [r3, #4]
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	429a      	cmp	r2, r3
 800f104:	d902      	bls.n	800f10c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800f106:	f06f 031b 	mvn.w	r3, #27
 800f10a:	e065      	b.n	800f1d8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	4053      	eors	r3, r2
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fd fb3d 	bl	800c798 <lfs_tobe32>
 800f11e:	4603      	mov	r3, r0
 800f120:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800f122:	f107 0214 	add.w	r2, r7, #20
 800f126:	2304      	movs	r3, #4
 800f128:	68b9      	ldr	r1, [r7, #8]
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f7ff ffa2 	bl	800f074 <lfs_dir_commitprog>
 800f130:	61f8      	str	r0, [r7, #28]
    if (err) {
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d001      	beq.n	800f13c <lfs_dir_commitattr+0x5c>
        return err;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	e04d      	b.n	800f1d8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	db0c      	blt.n	800f15c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	3b04      	subs	r3, #4
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	68b9      	ldr	r1, [r7, #8]
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7ff ff92 	bl	800f074 <lfs_dir_commitprog>
 800f150:	61f8      	str	r0, [r7, #28]
        if (err) {
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d039      	beq.n	800f1cc <lfs_dir_commitattr+0xec>
            return err;
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	e03d      	b.n	800f1d8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f160:	2300      	movs	r3, #0
 800f162:	627b      	str	r3, [r7, #36]	@ 0x24
 800f164:	e02d      	b.n	800f1c2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800f166:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800f168:	6a3a      	ldr	r2, [r7, #32]
 800f16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800f16e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	69ba      	ldr	r2, [r7, #24]
 800f176:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800f178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f17a:	440a      	add	r2, r1
 800f17c:	2101      	movs	r1, #1
 800f17e:	9103      	str	r1, [sp, #12]
 800f180:	f107 0113 	add.w	r1, r7, #19
 800f184:	9102      	str	r1, [sp, #8]
 800f186:	9201      	str	r2, [sp, #4]
 800f188:	9300      	str	r3, [sp, #0]
 800f18a:	4623      	mov	r3, r4
 800f18c:	4602      	mov	r2, r0
 800f18e:	2100      	movs	r1, #0
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f7fd fb49 	bl	800c828 <lfs_bd_read>
 800f196:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <lfs_dir_commitattr+0xc2>
                return err;
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	e01a      	b.n	800f1d8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800f1a2:	f107 0213 	add.w	r2, r7, #19
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f7ff ff62 	bl	800f074 <lfs_dir_commitprog>
 800f1b0:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <lfs_dir_commitattr+0xdc>
                return err;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	e00d      	b.n	800f1d8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1be:	3301      	adds	r3, #1
 800f1c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	3b04      	subs	r3, #4
 800f1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d3cc      	bcc.n	800f166 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	609a      	str	r2, [r3, #8]
    return 0;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	372c      	adds	r7, #44	@ 0x2c
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd90      	pop	{r4, r7, pc}

0800f1e0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800f1e0:	b590      	push	{r4, r7, lr}
 800f1e2:	b097      	sub	sp, #92	@ 0x5c
 800f1e4:	af04      	add	r7, sp, #16
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800f1ee:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	f7fd fa39 	bl	800c672 <lfs_min>
 800f200:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f206:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 800f208:	4619      	mov	r1, r3
 800f20a:	4610      	mov	r0, r2
 800f20c:	f7fd fa56 	bl	800c6bc <lfs_alignup>
 800f210:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800f212:	2300      	movs	r3, #0
 800f214:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800f21a:	e0fe      	b.n	800f41a <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	3b04      	subs	r3, #4
 800f226:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fd fa21 	bl	800c672 <lfs_min>
 800f230:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	4413      	add	r3, r2
        lfs_off_t noff = (
 800f238:	3304      	adds	r3, #4
 800f23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800f23c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f240:	429a      	cmp	r2, r3
 800f242:	d206      	bcs.n	800f252 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800f244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f246:	3b14      	subs	r3, #20
 800f248:	4619      	mov	r1, r3
 800f24a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f24c:	f7fd fa11 	bl	800c672 <lfs_min>
 800f250:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800f252:	23ff      	movs	r3, #255	@ 0xff
 800f254:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800f256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d35f      	bcc.n	800f31e <lfs_dir_commitcrc+0x13e>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f26e:	429a      	cmp	r2, r3
 800f270:	d855      	bhi.n	800f31e <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800f272:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f278:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2201      	movs	r2, #1
 800f280:	9203      	str	r2, [sp, #12]
 800f282:	f107 021b 	add.w	r2, r7, #27
 800f286:	9202      	str	r2, [sp, #8]
 800f288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f28a:	9201      	str	r2, [sp, #4]
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	4603      	mov	r3, r0
 800f290:	460a      	mov	r2, r1
 800f292:	2100      	movs	r1, #0
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7fd fac7 	bl	800c828 <lfs_bd_read>
 800f29a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800f29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d005      	beq.n	800f2ae <lfs_dir_commitcrc+0xce>
 800f2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f2a8:	d001      	beq.n	800f2ae <lfs_dir_commitcrc+0xce>
                return err;
 800f2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ac:	e101      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f2b2:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 800f2b4:	60bb      	str	r3, [r7, #8]
 800f2b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2ba:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800f2bc:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f2c2:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	f107 0108 	add.w	r1, r7, #8
 800f2ce:	3104      	adds	r1, #4
 800f2d0:	9103      	str	r1, [sp, #12]
 800f2d2:	9202      	str	r2, [sp, #8]
 800f2d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2d6:	9201      	str	r2, [sp, #4]
 800f2d8:	9300      	str	r3, [sp, #0]
 800f2da:	4623      	mov	r3, r4
 800f2dc:	4602      	mov	r2, r0
 800f2de:	2100      	movs	r1, #0
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7fd fc3e 	bl	800cb62 <lfs_bd_crc>
 800f2e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800f2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d005      	beq.n	800f2fa <lfs_dir_commitcrc+0x11a>
 800f2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f2f4:	d001      	beq.n	800f2fa <lfs_dir_commitcrc+0x11a>
                    return err;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f8:	e0db      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800f2fa:	f107 0308 	add.w	r3, r7, #8
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe f85e 	bl	800d3c0 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800f304:	f107 0308 	add.w	r3, r7, #8
 800f308:	4a6c      	ldr	r2, [pc, #432]	@ (800f4bc <lfs_dir_commitcrc+0x2dc>)
 800f30a:	6839      	ldr	r1, [r7, #0]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff fee7 	bl	800f0e0 <lfs_dir_commitattr>
 800f312:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <lfs_dir_commitcrc+0x13e>
                    return err;
 800f31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31c:	e0c9      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800f31e:	7efb      	ldrb	r3, [r7, #27]
 800f320:	43db      	mvns	r3, r3
 800f322:	b2db      	uxtb	r3, r3
 800f324:	09db      	lsrs	r3, r3, #7
 800f326:	b2db      	uxtb	r3, r3
 800f328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f32c:	051a      	lsls	r2, r3, #20
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f334:	1acb      	subs	r3, r1, r3
 800f336:	3b04      	subs	r3, #4
 800f338:	4313      	orrs	r3, r2
 800f33a:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800f33e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800f342:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	689a      	ldr	r2, [r3, #8]
 800f348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f34a:	4053      	eors	r3, r2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fd fa23 	bl	800c798 <lfs_tobe32>
 800f352:	4603      	mov	r3, r0
 800f354:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	f107 0110 	add.w	r1, r7, #16
 800f35e:	2204      	movs	r2, #4
 800f360:	4618      	mov	r0, r3
 800f362:	f005 f87d 	bl	8014460 <lfs_crc>
 800f366:	4602      	mov	r2, r0
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	4618      	mov	r0, r3
 800f372:	f7fd f9f9 	bl	800c768 <lfs_tole32>
 800f376:	4603      	mov	r3, r0
 800f378:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f103 0010 	add.w	r0, r3, #16
 800f380:	687c      	ldr	r4, [r7, #4]
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	6852      	ldr	r2, [r2, #4]
 800f38a:	2108      	movs	r1, #8
 800f38c:	9103      	str	r1, [sp, #12]
 800f38e:	f107 0110 	add.w	r1, r7, #16
 800f392:	9102      	str	r1, [sp, #8]
 800f394:	9201      	str	r2, [sp, #4]
 800f396:	9300      	str	r3, [sp, #0]
 800f398:	2300      	movs	r3, #0
 800f39a:	4622      	mov	r2, r4
 800f39c:	4601      	mov	r1, r0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fd fcd4 	bl	800cd4c <lfs_bd_prog>
 800f3a4:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d001      	beq.n	800f3b0 <lfs_dir_commitcrc+0x1d0>
            return err;
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ae:	e080      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800f3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3c8:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800f3ca:	7efb      	ldrb	r3, [r7, #27]
 800f3cc:	43db      	mvns	r3, r3
 800f3ce:	061b      	lsls	r3, r3, #24
 800f3d0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800f3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d6:	405a      	eors	r2, r3
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3e2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800f3e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d208      	bcs.n	800f3fe <lfs_dir_commitcrc+0x21e>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	695a      	ldr	r2, [r3, #20]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3f6:	4413      	add	r3, r2
 800f3f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d30d      	bcc.n	800f41a <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f103 0110 	add.w	r1, r3, #16
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	2300      	movs	r3, #0
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7fd fc6b 	bl	800cce4 <lfs_bd_sync>
 800f40e:	6238      	str	r0, [r7, #32]
            if (err) {
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <lfs_dir_commitcrc+0x23a>
                return err;
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	e04b      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f420:	429a      	cmp	r2, r3
 800f422:	f63f aefb 	bhi.w	800f21c <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800f42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f430:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f436:	1d1c      	adds	r4, r3, #4
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f43e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f440:	1a8a      	subs	r2, r1, r2
 800f442:	f107 011c 	add.w	r1, r7, #28
 800f446:	9103      	str	r1, [sp, #12]
 800f448:	9202      	str	r2, [sp, #8]
 800f44a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f44c:	9201      	str	r2, [sp, #4]
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	4623      	mov	r3, r4
 800f452:	4602      	mov	r2, r0
 800f454:	2100      	movs	r1, #0
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fd fb83 	bl	800cb62 <lfs_bd_crc>
 800f45c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800f45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <lfs_dir_commitcrc+0x288>
        return err;
 800f464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f466:	e024      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d002      	beq.n	800f476 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800f470:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800f474:	e01d      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f107 021c 	add.w	r2, r7, #28
 800f480:	9203      	str	r2, [sp, #12]
 800f482:	2204      	movs	r2, #4
 800f484:	9202      	str	r2, [sp, #8]
 800f486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f488:	9201      	str	r2, [sp, #4]
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	2304      	movs	r3, #4
 800f48e:	460a      	mov	r2, r1
 800f490:	2100      	movs	r1, #0
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7fd fb65 	bl	800cb62 <lfs_bd_crc>
 800f498:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800f49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <lfs_dir_commitcrc+0x2c4>
        return err;
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a2:	e006      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d002      	beq.n	800f4b0 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800f4aa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800f4ae:	e000      	b.n	800f4b2 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	374c      	adds	r7, #76	@ 0x4c
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd90      	pop	{r4, r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	5ffffc08 	.word	0x5ffffc08

0800f4c0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b08a      	sub	sp, #40	@ 0x28
 800f4c4:	af04      	add	r7, sp, #16
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	617b      	str	r3, [r7, #20]
 800f4ce:	e016      	b.n	800f4fe <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	bfb8      	it	lt
 800f4dc:	425b      	neglt	r3, r3
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fe f934 	bl	800d754 <lfs_alloc>
 800f4ec:	60f8      	str	r0, [r7, #12]
        if (err) {
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <lfs_dir_alloc+0x38>
            return err;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	e058      	b.n	800f5aa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	617b      	str	r3, [r7, #20]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2b01      	cmp	r3, #1
 800f502:	dde5      	ble.n	800f4d0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2200      	movs	r2, #0
 800f508:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800f514:	2004      	movs	r0, #4
 800f516:	9003      	str	r0, [sp, #12]
 800f518:	9202      	str	r2, [sp, #8]
 800f51a:	2200      	movs	r2, #0
 800f51c:	9201      	str	r2, [sp, #4]
 800f51e:	9300      	str	r3, [sp, #0]
 800f520:	2304      	movs	r3, #4
 800f522:	460a      	mov	r2, r1
 800f524:	2100      	movs	r1, #0
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7fd f97e 	bl	800c828 <lfs_bd_read>
 800f52c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd f90d 	bl	800c752 <lfs_fromle32>
 800f538:	4602      	mov	r2, r0
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d005      	beq.n	800f550 <lfs_dir_alloc+0x90>
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f54a:	d001      	beq.n	800f550 <lfs_dir_alloc+0x90>
        return err;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	e02c      	b.n	800f5aa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f556:	2b00      	cmp	r3, #0
 800f558:	dd0e      	ble.n	800f578 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f564:	3301      	adds	r3, #1
 800f566:	f043 0301 	orr.w	r3, r3, #1
 800f56a:	4619      	mov	r1, r3
 800f56c:	4610      	mov	r0, r2
 800f56e:	f7fd f8a5 	bl	800c6bc <lfs_alignup>
 800f572:	4602      	mov	r2, r0
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	2204      	movs	r2, #4
 800f57c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f584:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	2200      	movs	r2, #0
 800f58a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f592:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f59a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3718      	adds	r7, #24
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b08a      	sub	sp, #40	@ 0x28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3348      	adds	r3, #72	@ 0x48
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff fb63 	bl	800ec94 <lfs_dir_getgstate>
 800f5ce:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <lfs_dir_drop+0x26>
        return err;
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	e022      	b.n	800f620 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3318      	adds	r3, #24
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fd fd35 	bl	800d04e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	7ddb      	ldrb	r3, [r3, #23]
 800f5e8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f5ec:	051a      	lsls	r2, r3, #20
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f628 <lfs_dir_drop+0x74>)
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3318      	adds	r3, #24
 800f5f8:	623b      	str	r3, [r7, #32]
 800f5fa:	f107 021c 	add.w	r2, r7, #28
 800f5fe:	2301      	movs	r3, #1
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f001 f984 	bl	8010910 <lfs_dir_commit>
 800f608:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	3318      	adds	r3, #24
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fd fd03 	bl	800d01a <lfs_pair_fromle32>
    if (err) {
 800f614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	d001      	beq.n	800f61e <lfs_dir_drop+0x6a>
        return err;
 800f61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61c:	e000      	b.n	800f620 <lfs_dir_drop+0x6c>
    }

    return 0;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3728      	adds	r7, #40	@ 0x28
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	000ffc08 	.word	0x000ffc08

0800f62c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b092      	sub	sp, #72	@ 0x48
 800f630:	af04      	add	r7, sp, #16
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
 800f638:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800f63a:	f107 0310 	add.w	r3, r7, #16
 800f63e:	4619      	mov	r1, r3
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff ff3d 	bl	800f4c0 <lfs_dir_alloc>
 800f646:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800f648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <lfs_dir_split+0x26>
        return err;
 800f64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f650:	e03c      	b.n	800f6cc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	7ddb      	ldrb	r3, [r3, #23]
 800f656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	699b      	ldr	r3, [r3, #24]
 800f65e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	69db      	ldr	r3, [r3, #28]
 800f664:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800f666:	f107 0110 	add.w	r1, r7, #16
 800f66a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800f66e:	9302      	str	r3, [sp, #8]
 800f670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f674:	9301      	str	r3, [sp, #4]
 800f676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f000 f87a 	bl	800f778 <lfs_dir_compact>
 800f684:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800f686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f688:	2b00      	cmp	r3, #0
 800f68a:	da01      	bge.n	800f690 <lfs_dir_split+0x64>
        return res;
 800f68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f68e:	e01d      	b.n	800f6cc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	3320      	adds	r3, #32
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	f7fd fc5e 	bl	800cf6c <lfs_pair_cmp>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d109      	bne.n	800f6ca <lfs_dir_split+0x9e>
 800f6b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d105      	bne.n	800f6ca <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3738      	adds	r7, #56	@ 0x38
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800f6e4:	68b8      	ldr	r0, [r7, #8]
 800f6e6:	f7fd fd54 	bl	800d192 <lfs_tag_dsize>
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	441a      	add	r2, r3
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	601a      	str	r2, [r3, #0]
    return 0;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3718      	adds	r7, #24
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	6818      	ldr	r0, [r3, #0]
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	6859      	ldr	r1, [r3, #4]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	f7ff fce0 	bl	800f0e0 <lfs_dir_commitattr>
 800f720:	4603      	mov	r3, r0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800f72a:	b480      	push	{r7}
 800f72c:	b083      	sub	sp, #12
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	dd11      	ble.n	800f762 <lfs_dir_needsrelocation+0x38>
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	3301      	adds	r3, #1
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f748:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f74a:	3201      	adds	r2, #1
 800f74c:	f042 0201 	orr.w	r2, r2, #1
 800f750:	fbb3 f1f2 	udiv	r1, r3, r2
 800f754:	fb01 f202 	mul.w	r2, r1, r2
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d101      	bne.n	800f762 <lfs_dir_needsrelocation+0x38>
 800f75e:	2301      	movs	r3, #1
 800f760:	e000      	b.n	800f764 <lfs_dir_needsrelocation+0x3a>
 800f762:	2300      	movs	r3, #0
 800f764:	f003 0301 	and.w	r3, r3, #1
 800f768:	b2db      	uxtb	r3, r3
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
	...

0800f778 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b0a4      	sub	sp, #144	@ 0x90
 800f77c:	af0a      	add	r7, sp, #40	@ 0x28
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800f786:	2300      	movs	r3, #0
 800f788:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800f78c:	68b9      	ldr	r1, [r7, #8]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7ff ffcb 	bl	800f72a <lfs_dir_needsrelocation>
 800f794:	4603      	mov	r3, r0
 800f796:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800f7a4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00e      	beq.n	800f7ca <lfs_dir_compact+0x52>
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	657a      	str	r2, [r7, #84]	@ 0x54
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f7b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f7ba:	4611      	mov	r1, r2
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fd fbd5 	bl	800cf6c <lfs_pair_cmp>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f040 8155 	bne.w	800fa74 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800f7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d004      	beq.n	800f7f8 <lfs_dir_compact+0x80>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7f4:	3b08      	subs	r3, #8
 800f7f6:	e003      	b.n	800f800 <lfs_dir_compact+0x88>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7fe:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800f800:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	4619      	mov	r1, r3
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f7fd fb4d 	bl	800cea8 <lfs_bd_erase>
 800f80e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800f810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d006      	beq.n	800f824 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800f816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f818:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f81c:	f000 812c 	beq.w	800fa78 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800f820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f822:	e188      	b.n	800fb36 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fc ff9d 	bl	800c768 <lfs_tole32>
 800f82e:	4602      	mov	r2, r0
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800f83a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800f83e:	2304      	movs	r3, #4
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f7ff fc17 	bl	800f074 <lfs_dir_commitprog>
 800f846:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fc ff80 	bl	800c752 <lfs_fromle32>
 800f852:	4602      	mov	r2, r0
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	609a      	str	r2, [r3, #8]
            if (err) {
 800f858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d006      	beq.n	800f86c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800f85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f860:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f864:	f000 810a 	beq.w	800fa7c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800f868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f86a:	e164      	b.n	800fb36 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800f86c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800f870:	425b      	negs	r3, r3
 800f872:	b29b      	uxth	r3, r3
 800f874:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	637a      	str	r2, [r7, #52]	@ 0x34
 800f87a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800f87e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800f880:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f884:	9208      	str	r2, [sp, #32]
 800f886:	4aae      	ldr	r2, [pc, #696]	@ (800fb40 <lfs_dir_compact+0x3c8>)
 800f888:	9207      	str	r2, [sp, #28]
 800f88a:	9306      	str	r3, [sp, #24]
 800f88c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800f890:	9305      	str	r3, [sp, #20]
 800f892:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800f896:	9304      	str	r3, [sp, #16]
 800f898:	2300      	movs	r3, #0
 800f89a:	9303      	str	r3, [sp, #12]
 800f89c:	4ba9      	ldr	r3, [pc, #676]	@ (800fb44 <lfs_dir_compact+0x3cc>)
 800f89e:	9302      	str	r3, [sp, #8]
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7fe fa1f 	bl	800dcf4 <lfs_dir_traverse>
 800f8b6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800f8b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d006      	beq.n	800f8cc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800f8be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8c0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f8c4:	f000 80dc 	beq.w	800fa80 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800f8c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8ca:	e134      	b.n	800fb36 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	3318      	adds	r3, #24
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fd fb30 	bl	800cf36 <lfs_pair_isnull>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	f083 0301 	eor.w	r3, r3, #1
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d022      	beq.n	800f928 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	3318      	adds	r3, #24
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fd fbb1 	bl	800d04e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	7ddb      	ldrb	r3, [r3, #23]
 800f8f0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800f8f4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800f8f6:	4a94      	ldr	r2, [pc, #592]	@ (800fb48 <lfs_dir_compact+0x3d0>)
 800f8f8:	431a      	orrs	r2, r3
                        dir->tail);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800f8fe:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7ff fbec 	bl	800f0e0 <lfs_dir_commitattr>
 800f908:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	3318      	adds	r3, #24
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fd fb83 	bl	800d01a <lfs_pair_fromle32>
                if (err) {
 800f914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f916:	2b00      	cmp	r3, #0
 800f918:	d006      	beq.n	800f928 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800f91a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f91c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f920:	f000 80b0 	beq.w	800fa84 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800f924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f926:	e106      	b.n	800fb36 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800f928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f92c:	2200      	movs	r2, #0
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	605a      	str	r2, [r3, #4]
 800f932:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800f934:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f938:	f083 0301 	eor.w	r3, r3, #1
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d011      	beq.n	800f966 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f948:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f94c:	4611      	mov	r1, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fd fc33 	bl	800d1ba <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f95a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f95e:	4611      	mov	r1, r2
 800f960:	4618      	mov	r0, r3
 800f962:	f7fd fc2a 	bl	800d1ba <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800f96c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f970:	4611      	mov	r1, r2
 800f972:	4618      	mov	r0, r3
 800f974:	f7fd fc21 	bl	800d1ba <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800f978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f97e:	f023 0303 	bic.w	r3, r3, #3
 800f982:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800f984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f988:	461a      	mov	r2, r3
 800f98a:	68b9      	ldr	r1, [r7, #8]
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff f981 	bl	800ec94 <lfs_dir_getgstate>
 800f992:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800f994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <lfs_dir_compact+0x226>
                return err;
 800f99a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f99c:	e0cb      	b.n	800fb36 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800f99e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fd fc2e 	bl	800d204 <lfs_gstate_iszero>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	f083 0301 	eor.w	r3, r3, #1
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d016      	beq.n	800f9e2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800f9b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fd fcc9 	bl	800d350 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800f9be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9c2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800f9c6:	4a61      	ldr	r2, [pc, #388]	@ (800fb4c <lfs_dir_compact+0x3d4>)
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7ff fb89 	bl	800f0e0 <lfs_dir_commitattr>
 800f9ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800f9d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d005      	beq.n	800f9e2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800f9d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9d8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f9dc:	d054      	beq.n	800fa88 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800f9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9e0:	e0a9      	b.n	800fb36 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800f9e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f7ff fbf9 	bl	800f1e0 <lfs_dir_commitcrc>
 800f9ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800f9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d005      	beq.n	800fa02 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800f9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9f8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f9fc:	d046      	beq.n	800fa8c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800f9fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa00:	e099      	b.n	800fb36 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800fa02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa04:	68fa      	ldr	r2, [r7, #12]
 800fa06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fa08:	6a12      	ldr	r2, [r2, #32]
 800fa0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa0e:	fb01 f202 	mul.w	r2, r1, r2
 800fa12:	1a9b      	subs	r3, r3, r2
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d006      	beq.n	800fa26 <lfs_dir_compact+0x2ae>
 800fa18:	4b4d      	ldr	r3, [pc, #308]	@ (800fb50 <lfs_dir_compact+0x3d8>)
 800fa1a:	4a4e      	ldr	r2, [pc, #312]	@ (800fb54 <lfs_dir_compact+0x3dc>)
 800fa1c:	f640 0106 	movw	r1, #2054	@ 0x806
 800fa20:	484d      	ldr	r0, [pc, #308]	@ (800fb58 <lfs_dir_compact+0x3e0>)
 800fa22:	f012 fd4d 	bl	80224c0 <__assert_func>
            lfs_pair_swap(dir->pair);
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fd fa6f 	bl	800cf0c <lfs_pair_swap>
            dir->count = end - begin;
 800fa2e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800fa32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800fa3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800fa44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	3348      	adds	r3, #72	@ 0x48
 800fa4e:	2200      	movs	r2, #0
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	605a      	str	r2, [r3, #4]
 800fa54:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800fa56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa5a:	f083 0301 	eor.w	r3, r3, #1
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d065      	beq.n	800fb30 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	333c      	adds	r3, #60	@ 0x3c
 800fa6a:	3230      	adds	r2, #48	@ 0x30
 800fa6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800fa72:	e05d      	b.n	800fb30 <lfs_dir_compact+0x3b8>
        goto relocate;
 800fa74:	bf00      	nop
 800fa76:	e00a      	b.n	800fa8e <lfs_dir_compact+0x316>
                    goto relocate;
 800fa78:	bf00      	nop
 800fa7a:	e008      	b.n	800fa8e <lfs_dir_compact+0x316>
                    goto relocate;
 800fa7c:	bf00      	nop
 800fa7e:	e006      	b.n	800fa8e <lfs_dir_compact+0x316>
                    goto relocate;
 800fa80:	bf00      	nop
 800fa82:	e004      	b.n	800fa8e <lfs_dir_compact+0x316>
                        goto relocate;
 800fa84:	bf00      	nop
 800fa86:	e002      	b.n	800fa8e <lfs_dir_compact+0x316>
                        goto relocate;
 800fa88:	bf00      	nop
 800fa8a:	e000      	b.n	800fa8e <lfs_dir_compact+0x316>
                    goto relocate;
 800fa8c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	3310      	adds	r3, #16
 800fa98:	4619      	mov	r1, r3
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f7fc fe9f 	bl	800c7de <lfs_cache_drop>
        if (!tired) {
 800faa0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800faa4:	f083 0301 	eor.w	r3, r3, #1
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d009      	beq.n	800fac2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	4a2a      	ldr	r2, [pc, #168]	@ (800fb5c <lfs_dir_compact+0x3e4>)
 800fab4:	9200      	str	r2, [sp, #0]
 800fab6:	f640 0218 	movw	r2, #2072	@ 0x818
 800faba:	4927      	ldr	r1, [pc, #156]	@ (800fb58 <lfs_dir_compact+0x3e0>)
 800fabc:	4828      	ldr	r0, [pc, #160]	@ (800fb60 <lfs_dir_compact+0x3e8>)
 800fabe:	f013 f89b 	bl	8022bf8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2200      	movs	r2, #0
 800fac6:	617a      	str	r2, [r7, #20]
 800fac8:	2201      	movs	r2, #1
 800faca:	61ba      	str	r2, [r7, #24]
 800facc:	f107 0214 	add.w	r2, r7, #20
 800fad0:	4611      	mov	r1, r2
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fd fa4a 	bl	800cf6c <lfs_pair_cmp>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10c      	bne.n	800faf8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	4a1e      	ldr	r2, [pc, #120]	@ (800fb5c <lfs_dir_compact+0x3e4>)
 800fae4:	9200      	str	r2, [sp, #0]
 800fae6:	f640 021d 	movw	r2, #2077	@ 0x81d
 800faea:	491b      	ldr	r1, [pc, #108]	@ (800fb58 <lfs_dir_compact+0x3e0>)
 800faec:	481d      	ldr	r0, [pc, #116]	@ (800fb64 <lfs_dir_compact+0x3ec>)
 800faee:	f013 f883 	bl	8022bf8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800faf2:	f06f 031b 	mvn.w	r3, #27
 800faf6:	e01e      	b.n	800fb36 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	3304      	adds	r3, #4
 800fafc:	4619      	mov	r1, r3
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f7fd fe28 	bl	800d754 <lfs_alloc>
 800fb04:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800fb06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00c      	beq.n	800fb26 <lfs_dir_compact+0x3ae>
 800fb0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb0e:	f113 0f1c 	cmn.w	r3, #28
 800fb12:	d106      	bne.n	800fb22 <lfs_dir_compact+0x3aa>
 800fb14:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800fb18:	f083 0301 	eor.w	r3, r3, #1
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d001      	beq.n	800fb26 <lfs_dir_compact+0x3ae>
            return err;
 800fb22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb24:	e007      	b.n	800fb36 <lfs_dir_compact+0x3be>
        }

        tired = false;
 800fb26:	2300      	movs	r3, #0
 800fb28:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 800fb2c:	bf00      	nop
    while (true) {
 800fb2e:	e64c      	b.n	800f7ca <lfs_dir_compact+0x52>
        break;
 800fb30:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800fb32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3768      	adds	r7, #104	@ 0x68
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	0800f701 	.word	0x0800f701
 800fb44:	400ffc00 	.word	0x400ffc00
 800fb48:	000ffc08 	.word	0x000ffc08
 800fb4c:	7ffffc0c 	.word	0x7ffffc0c
 800fb50:	08025d74 	.word	0x08025d74
 800fb54:	08029478 	.word	0x08029478
 800fb58:	08025bf4 	.word	0x08025bf4
 800fb5c:	08025d1c 	.word	0x08025d1c
 800fb60:	08025d9c 	.word	0x08025d9c
 800fb64:	08025dc0 	.word	0x08025dc0

0800fb68 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800fb68:	b590      	push	{r4, r7, lr}
 800fb6a:	b097      	sub	sp, #92	@ 0x5c
 800fb6c:	af0a      	add	r7, sp, #40	@ 0x28
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
 800fb74:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800fb76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 800fb7c:	e058      	b.n	800fc30 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800fb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb88:	b292      	uxth	r2, r2
 800fb8a:	4252      	negs	r2, r2
 800fb8c:	b292      	uxth	r2, r2
 800fb8e:	b212      	sxth	r2, r2
 800fb90:	f107 0118 	add.w	r1, r7, #24
 800fb94:	9108      	str	r1, [sp, #32]
 800fb96:	4979      	ldr	r1, [pc, #484]	@ (800fd7c <lfs_dir_splittingcompact+0x214>)
 800fb98:	9107      	str	r1, [sp, #28]
 800fb9a:	9206      	str	r2, [sp, #24]
 800fb9c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800fba0:	9205      	str	r2, [sp, #20]
 800fba2:	9304      	str	r3, [sp, #16]
 800fba4:	2300      	movs	r3, #0
 800fba6:	9303      	str	r3, [sp, #12]
 800fba8:	4b75      	ldr	r3, [pc, #468]	@ (800fd80 <lfs_dir_splittingcompact+0x218>)
 800fbaa:	9302      	str	r3, [sp, #8]
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbb8:	2200      	movs	r2, #0
 800fbba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f7fe f899 	bl	800dcf4 <lfs_dir_traverse>
 800fbc2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800fbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d001      	beq.n	800fbce <lfs_dir_splittingcompact+0x66>
                return err;
 800fbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbcc:	e0d2      	b.n	800fd74 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 800fbce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	2bfe      	cmp	r3, #254	@ 0xfe
 800fbd8:	d822      	bhi.n	800fc20 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 800fbe0:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d004      	beq.n	800fbf8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 800fbf4:	085b      	lsrs	r3, r3, #1
 800fbf6:	e003      	b.n	800fc00 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 800fbfe:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fc04:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 800fc06:	4611      	mov	r1, r2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fc fd57 	bl	800c6bc <lfs_alignup>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	4619      	mov	r1, r3
 800fc12:	4620      	mov	r0, r4
 800fc14:	f7fc fd2d 	bl	800c672 <lfs_min>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d20e      	bcs.n	800fc3e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 800fc20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800fc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	085b      	lsrs	r3, r3, #1
 800fc2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc2c:	4413      	add	r3, r2
 800fc2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 800fc30:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800fc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d8a0      	bhi.n	800fb7e <lfs_dir_splittingcompact+0x16>
 800fc3c:	e000      	b.n	800fc40 <lfs_dir_splittingcompact+0xd8>
                break;
 800fc3e:	bf00      	nop
        }

        if (split == begin) {
 800fc40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d02d      	beq.n	800fca6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800fc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800fc52:	9202      	str	r2, [sp, #8]
 800fc54:	9301      	str	r3, [sp, #4]
 800fc56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	68b9      	ldr	r1, [r7, #8]
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f7ff fce3 	bl	800f62c <lfs_dir_split>
 800fc66:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800fc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d005      	beq.n	800fc7a <lfs_dir_splittingcompact+0x112>
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc70:	f113 0f1c 	cmn.w	r3, #28
 800fc74:	d001      	beq.n	800fc7a <lfs_dir_splittingcompact+0x112>
            return err;
 800fc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc78:	e07c      	b.n	800fd74 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00e      	beq.n	800fc9e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	493e      	ldr	r1, [pc, #248]	@ (800fd84 <lfs_dir_splittingcompact+0x21c>)
 800fc8a:	9101      	str	r1, [sp, #4]
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 800fc94:	493c      	ldr	r1, [pc, #240]	@ (800fd88 <lfs_dir_splittingcompact+0x220>)
 800fc96:	483d      	ldr	r0, [pc, #244]	@ (800fd8c <lfs_dir_splittingcompact+0x224>)
 800fc98:	f012 ffae 	bl	8022bf8 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800fc9c:	e004      	b.n	800fca8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800fc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 800fca4:	e767      	b.n	800fb76 <lfs_dir_splittingcompact+0xe>
            break;
 800fca6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800fca8:	68b9      	ldr	r1, [r7, #8]
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f7ff fd3d 	bl	800f72a <lfs_dir_needsrelocation>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d04f      	beq.n	800fd56 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	613a      	str	r2, [r7, #16]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	617a      	str	r2, [r7, #20]
 800fcc0:	f107 0210 	add.w	r2, r7, #16
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fd f950 	bl	800cf6c <lfs_pair_cmp>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d141      	bne.n	800fd56 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f004 f8ea 	bl	8013eac <lfs_fs_size_>
 800fcd8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	da01      	bge.n	800fce4 <lfs_dir_splittingcompact+0x17c>
            return size;
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	e047      	b.n	800fd74 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	1ad2      	subs	r2, r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcf0:	08db      	lsrs	r3, r3, #3
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d92f      	bls.n	800fd56 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	4a22      	ldr	r2, [pc, #136]	@ (800fd84 <lfs_dir_splittingcompact+0x21c>)
 800fcfc:	9200      	str	r2, [sp, #0]
 800fcfe:	f640 0286 	movw	r2, #2182	@ 0x886
 800fd02:	4921      	ldr	r1, [pc, #132]	@ (800fd88 <lfs_dir_splittingcompact+0x220>)
 800fd04:	4822      	ldr	r0, [pc, #136]	@ (800fd90 <lfs_dir_splittingcompact+0x228>)
 800fd06:	f012 ff77 	bl	8022bf8 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800fd0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800fd0e:	9302      	str	r3, [sp, #8]
 800fd10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	68b9      	ldr	r1, [r7, #8]
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f7ff fc83 	bl	800f62c <lfs_dir_split>
 800fd26:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <lfs_dir_splittingcompact+0x1d2>
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	f113 0f1c 	cmn.w	r3, #28
 800fd34:	d001      	beq.n	800fd3a <lfs_dir_splittingcompact+0x1d2>
                return err;
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	e01c      	b.n	800fd74 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d007      	beq.n	800fd50 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800fd40:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <lfs_dir_splittingcompact+0x21c>)
 800fd42:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 800fd46:	4910      	ldr	r1, [pc, #64]	@ (800fd88 <lfs_dir_splittingcompact+0x220>)
 800fd48:	4812      	ldr	r0, [pc, #72]	@ (800fd94 <lfs_dir_splittingcompact+0x22c>)
 800fd4a:	f012 ff55 	bl	8022bf8 <iprintf>
 800fd4e:	e002      	b.n	800fd56 <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 800fd50:	2301      	movs	r3, #1
 800fd52:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800fd56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800fd5a:	9302      	str	r3, [sp, #8]
 800fd5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	68b9      	ldr	r1, [r7, #8]
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f7ff fd03 	bl	800f778 <lfs_dir_compact>
 800fd72:	4603      	mov	r3, r0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3734      	adds	r7, #52	@ 0x34
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd90      	pop	{r4, r7, pc}
 800fd7c:	0800f6d5 	.word	0x0800f6d5
 800fd80:	400ffc00 	.word	0x400ffc00
 800fd84:	08025d1c 	.word	0x08025d1c
 800fd88:	08025bf4 	.word	0x08025bf4
 800fd8c:	08025df8 	.word	0x08025df8
 800fd90:	08025e28 	.word	0x08025e28
 800fd94:	08025e58 	.word	0x08025e58

0800fd98 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800fd98:	b5b0      	push	{r4, r5, r7, lr}
 800fd9a:	b0a6      	sub	sp, #152	@ 0x98
 800fd9c:	af0a      	add	r7, sp, #40	@ 0x28
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	607a      	str	r2, [r7, #4]
 800fda4:	603b      	str	r3, [r7, #0]
    int state = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	667b      	str	r3, [r7, #100]	@ 0x64
 800fdb4:	e06d      	b.n	800fe92 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800fdb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdb8:	00db      	lsls	r3, r3, #3
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fd f99f 	bl	800d104 <lfs_tag_type3>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	461a      	mov	r2, r3
 800fdca:	f240 4301 	movw	r3, #1025	@ 0x401
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d106      	bne.n	800fde0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	8a9b      	ldrh	r3, [r3, #20]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	829a      	strh	r2, [r3, #20]
 800fdde:	e055      	b.n	800fe8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800fde0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fde2:	00db      	lsls	r3, r3, #3
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	4413      	add	r3, r2
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fd f98a 	bl	800d104 <lfs_tag_type3>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d114      	bne.n	800fe26 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	8a9b      	ldrh	r3, [r3, #20]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d106      	bne.n	800fe12 <lfs_dir_relocatingcommit+0x7a>
 800fe04:	4ba4      	ldr	r3, [pc, #656]	@ (8010098 <lfs_dir_relocatingcommit+0x300>)
 800fe06:	4aa5      	ldr	r2, [pc, #660]	@ (801009c <lfs_dir_relocatingcommit+0x304>)
 800fe08:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 800fe0c:	48a4      	ldr	r0, [pc, #656]	@ (80100a0 <lfs_dir_relocatingcommit+0x308>)
 800fe0e:	f012 fb57 	bl	80224c0 <__assert_func>
            dir->count -= 1;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	8a9b      	ldrh	r3, [r3, #20]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800fe24:	e032      	b.n	800fe8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800fe26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe28:	00db      	lsls	r3, r3, #3
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fd f947 	bl	800d0c4 <lfs_tag_type1>
 800fe36:	4603      	mov	r3, r0
 800fe38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fe3c:	d126      	bne.n	800fe8c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800fe3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	4413      	add	r3, r2
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800fe4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	4413      	add	r3, r2
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	685a      	ldr	r2, [r3, #4]
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800fe5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe60:	00db      	lsls	r3, r3, #3
 800fe62:	683a      	ldr	r2, [r7, #0]
 800fe64:	4413      	add	r3, r2
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fd f95b 	bl	800d124 <lfs_tag_chunk>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	f003 0301 	and.w	r3, r3, #1
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	bf14      	ite	ne
 800fe78:	2301      	movne	r3, #1
 800fe7a:	2300      	moveq	r3, #0
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	3318      	adds	r3, #24
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fd f8c7 	bl	800d01a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800fe8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe8e:	3301      	adds	r3, #1
 800fe90:	667b      	str	r3, [r7, #100]	@ 0x64
 800fe92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fe94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	db8c      	blt.n	800fdb6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800fe9c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d02b      	beq.n	800fefc <lfs_dir_relocatingcommit+0x164>
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	8a9b      	ldrh	r3, [r3, #20]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d127      	bne.n	800fefc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800feac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <lfs_dir_relocatingcommit+0x12a>
 800feb4:	4b7b      	ldr	r3, [pc, #492]	@ (80100a4 <lfs_dir_relocatingcommit+0x30c>)
 800feb6:	4a79      	ldr	r2, [pc, #484]	@ (801009c <lfs_dir_relocatingcommit+0x304>)
 800feb8:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 800febc:	4878      	ldr	r0, [pc, #480]	@ (80100a0 <lfs_dir_relocatingcommit+0x308>)
 800febe:	f012 faff 	bl	80224c0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fec8:	4619      	mov	r1, r3
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f003 fb4a 	bl	8013564 <lfs_fs_pred>
 800fed0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800fed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d005      	beq.n	800fee4 <lfs_dir_relocatingcommit+0x14c>
 800fed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800feda:	f113 0f02 	cmn.w	r3, #2
 800fede:	d001      	beq.n	800fee4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 800fee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fee2:	e210      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800fee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fee6:	f113 0f02 	cmn.w	r3, #2
 800feea:	d007      	beq.n	800fefc <lfs_dir_relocatingcommit+0x164>
 800feec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fef0:	7ddb      	ldrb	r3, [r3, #23]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d002      	beq.n	800fefc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800fef6:	2302      	movs	r3, #2
 800fef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800fefa:	e121      	b.n	8010140 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	7d9b      	ldrb	r3, [r3, #22]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80fb 	beq.w	80100fc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800ff0a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800ff10:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800ff16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ff18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800ff22:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d004      	beq.n	800ff38 <lfs_dir_relocatingcommit+0x1a0>
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff34:	3b08      	subs	r3, #8
 800ff36:	e003      	b.n	800ff40 <lfs_dir_relocatingcommit+0x1a8>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff3e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800ff40:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	3318      	adds	r3, #24
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fd f881 	bl	800d04e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	68da      	ldr	r2, [r3, #12]
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ff5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800ff5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff62:	9308      	str	r3, [sp, #32]
 800ff64:	4b50      	ldr	r3, [pc, #320]	@ (80100a8 <lfs_dir_relocatingcommit+0x310>)
 800ff66:	9307      	str	r3, [sp, #28]
 800ff68:	2300      	movs	r3, #0
 800ff6a:	9306      	str	r3, [sp, #24]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9305      	str	r3, [sp, #20]
 800ff70:	2300      	movs	r3, #0
 800ff72:	9304      	str	r3, [sp, #16]
 800ff74:	2300      	movs	r3, #0
 800ff76:	9303      	str	r3, [sp, #12]
 800ff78:	2300      	movs	r3, #0
 800ff7a:	9302      	str	r3, [sp, #8]
 800ff7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ff80:	9301      	str	r3, [sp, #4]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	460b      	mov	r3, r1
 800ff88:	68b9      	ldr	r1, [r7, #8]
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f7fd feb2 	bl	800dcf4 <lfs_dir_traverse>
 800ff90:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	3318      	adds	r3, #24
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd f83f 	bl	800d01a <lfs_pair_fromle32>
        if (err) {
 800ff9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00b      	beq.n	800ffba <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800ffa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffa4:	f113 0f1c 	cmn.w	r3, #28
 800ffa8:	f000 80aa 	beq.w	8010100 <lfs_dir_relocatingcommit+0x368>
 800ffac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ffb2:	f000 80a5 	beq.w	8010100 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800ffb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffb8:	e1a5      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800ffba:	f107 031c 	add.w	r3, r7, #28
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	605a      	str	r2, [r3, #4]
 800ffc4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ffcc:	f107 031c 	add.w	r3, r7, #28
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fd f8f1 	bl	800d1ba <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ffde:	f107 031c 	add.w	r3, r7, #28
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7fd f8e8 	bl	800d1ba <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800fff0:	f107 031c 	add.w	r3, r7, #28
 800fff4:	4611      	mov	r1, r2
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fd f8df 	bl	800d1ba <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8010002:	f023 0303 	bic.w	r3, r3, #3
 8010006:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8010008:	f107 031c 	add.w	r3, r7, #28
 801000c:	4618      	mov	r0, r3
 801000e:	f7fd f8f9 	bl	800d204 <lfs_gstate_iszero>
 8010012:	4603      	mov	r3, r0
 8010014:	f083 0301 	eor.w	r3, r3, #1
 8010018:	b2db      	uxtb	r3, r3
 801001a:	2b00      	cmp	r3, #0
 801001c:	d027      	beq.n	801006e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801001e:	f107 031c 	add.w	r3, r7, #28
 8010022:	461a      	mov	r2, r3
 8010024:	68b9      	ldr	r1, [r7, #8]
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f7fe fe34 	bl	800ec94 <lfs_dir_getgstate>
 801002c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 801002e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8010034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010036:	e166      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8010038:	f107 031c 	add.w	r3, r7, #28
 801003c:	4618      	mov	r0, r3
 801003e:	f7fd f987 	bl	800d350 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8010042:	f107 031c 	add.w	r3, r7, #28
 8010046:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801004a:	4a18      	ldr	r2, [pc, #96]	@ (80100ac <lfs_dir_relocatingcommit+0x314>)
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f7ff f847 	bl	800f0e0 <lfs_dir_commitattr>
 8010052:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8010054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010056:	2b00      	cmp	r3, #0
 8010058:	d009      	beq.n	801006e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801005a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801005c:	f113 0f1c 	cmn.w	r3, #28
 8010060:	d050      	beq.n	8010104 <lfs_dir_relocatingcommit+0x36c>
 8010062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010064:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010068:	d04c      	beq.n	8010104 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 801006a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801006c:	e14b      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 801006e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010072:	4619      	mov	r1, r3
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f7ff f8b3 	bl	800f1e0 <lfs_dir_commitcrc>
 801007a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 801007c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801007e:	2b00      	cmp	r3, #0
 8010080:	d016      	beq.n	80100b0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010084:	f113 0f1c 	cmn.w	r3, #28
 8010088:	d03e      	beq.n	8010108 <lfs_dir_relocatingcommit+0x370>
 801008a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801008c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010090:	d03a      	beq.n	8010108 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8010092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010094:	e137      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
 8010096:	bf00      	nop
 8010098:	08025e84 	.word	0x08025e84
 801009c:	08029488 	.word	0x08029488
 80100a0:	08025bf4 	.word	0x08025bf4
 80100a4:	08025e94 	.word	0x08025e94
 80100a8:	0800f701 	.word	0x0800f701
 80100ac:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80100b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80100b6:	6a12      	ldr	r2, [r2, #32]
 80100b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80100bc:	fb01 f202 	mul.w	r2, r1, r2
 80100c0:	1a9b      	subs	r3, r3, r2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d006      	beq.n	80100d4 <lfs_dir_relocatingcommit+0x33c>
 80100c6:	4b92      	ldr	r3, [pc, #584]	@ (8010310 <lfs_dir_relocatingcommit+0x578>)
 80100c8:	4a92      	ldr	r2, [pc, #584]	@ (8010314 <lfs_dir_relocatingcommit+0x57c>)
 80100ca:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80100ce:	4892      	ldr	r0, [pc, #584]	@ (8010318 <lfs_dir_relocatingcommit+0x580>)
 80100d0:	f012 f9f6 	bl	80224c0 <__assert_func>
        dir->off = commit.off;
 80100d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80100da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	333c      	adds	r3, #60	@ 0x3c
 80100e6:	3230      	adds	r2, #48	@ 0x30
 80100e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80100ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3348      	adds	r3, #72	@ 0x48
 80100f2:	2200      	movs	r2, #0
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	605a      	str	r2, [r3, #4]
 80100f8:	609a      	str	r2, [r3, #8]
 80100fa:	e021      	b.n	8010140 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80100fc:	bf00      	nop
 80100fe:	e004      	b.n	801010a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8010100:	bf00      	nop
 8010102:	e002      	b.n	801010a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8010104:	bf00      	nop
 8010106:	e000      	b.n	801010a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8010108:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3310      	adds	r3, #16
 801010e:	4619      	mov	r1, r3
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f7fc fb64 	bl	800c7de <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	8a9b      	ldrh	r3, [r3, #20]
 801011a:	9302      	str	r3, [sp, #8]
 801011c:	2300      	movs	r3, #0
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	68b9      	ldr	r1, [r7, #8]
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f7ff fd1b 	bl	800fb68 <lfs_dir_splittingcompact>
 8010132:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8010134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010136:	2b00      	cmp	r3, #0
 8010138:	da01      	bge.n	801013e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 801013a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801013c:	e0e3      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 801013e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3304      	adds	r3, #4
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010152:	663b      	str	r3, [r7, #96]	@ 0x60
 8010154:	e0d2      	b.n	80102fc <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8010156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010158:	3308      	adds	r3, #8
 801015a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801015e:	4611      	mov	r1, r2
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc ff03 	bl	800cf6c <lfs_pair_cmp>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	f040 80c4 	bne.w	80102f6 <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 801016e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	f103 0408 	add.w	r4, r3, #8
 8010176:	4615      	mov	r5, r2
 8010178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801017a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801017c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8010184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010186:	3308      	adds	r3, #8
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	429a      	cmp	r2, r3
 801018c:	f000 80a9 	beq.w	80102e2 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8010190:	2300      	movs	r3, #0
 8010192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010194:	e07b      	b.n	801028e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	4413      	add	r3, r2
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fc ffaf 	bl	800d104 <lfs_tag_type3>
 80101a6:	4603      	mov	r3, r0
 80101a8:	461a      	mov	r2, r3
 80101aa:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d115      	bne.n	80101de <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80101b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101b4:	889c      	ldrh	r4, [r3, #4]
 80101b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	4413      	add	r3, r2
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fc ffc9 	bl	800d158 <lfs_tag_id>
 80101c6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80101c8:	429c      	cmp	r4, r3
 80101ca:	d108      	bne.n	80101de <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80101cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101d2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80101d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101da:	60da      	str	r2, [r3, #12]
 80101dc:	e054      	b.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80101de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101e0:	00db      	lsls	r3, r3, #3
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	4413      	add	r3, r2
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fc ff8b 	bl	800d104 <lfs_tag_type3>
 80101ee:	4603      	mov	r3, r0
 80101f0:	461a      	mov	r2, r3
 80101f2:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d11c      	bne.n	8010234 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80101fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101fc:	889c      	ldrh	r4, [r3, #4]
 80101fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010200:	00db      	lsls	r3, r3, #3
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	4413      	add	r3, r2
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4618      	mov	r0, r3
 801020a:	f7fc ffa5 	bl	800d158 <lfs_tag_id>
 801020e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010210:	429c      	cmp	r4, r3
 8010212:	d90f      	bls.n	8010234 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8010214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010216:	889b      	ldrh	r3, [r3, #4]
 8010218:	3b01      	subs	r3, #1
 801021a:	b29a      	uxth	r2, r3
 801021c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801021e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8010220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010222:	799b      	ldrb	r3, [r3, #6]
 8010224:	2b02      	cmp	r3, #2
 8010226:	d12f      	bne.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8010228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801022a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022c:	1e5a      	subs	r2, r3, #1
 801022e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010230:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8010232:	e029      	b.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	4413      	add	r3, r2
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4618      	mov	r0, r3
 8010240:	f7fc ff60 	bl	800d104 <lfs_tag_type3>
 8010244:	4603      	mov	r3, r0
 8010246:	461a      	mov	r2, r3
 8010248:	f240 4301 	movw	r3, #1025	@ 0x401
 801024c:	429a      	cmp	r2, r3
 801024e:	d11b      	bne.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8010250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010252:	889c      	ldrh	r4, [r3, #4]
 8010254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010256:	00db      	lsls	r3, r3, #3
 8010258:	683a      	ldr	r2, [r7, #0]
 801025a:	4413      	add	r3, r2
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4618      	mov	r0, r3
 8010260:	f7fc ff7a 	bl	800d158 <lfs_tag_id>
 8010264:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010266:	429c      	cmp	r4, r3
 8010268:	d30e      	bcc.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 801026a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801026c:	889b      	ldrh	r3, [r3, #4]
 801026e:	3301      	adds	r3, #1
 8010270:	b29a      	uxth	r2, r3
 8010272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010274:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8010276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010278:	799b      	ldrb	r3, [r3, #6]
 801027a:	2b02      	cmp	r3, #2
 801027c:	d104      	bne.n	8010288 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 801027e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010282:	1c5a      	adds	r2, r3, #1
 8010284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010286:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8010288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801028a:	3301      	adds	r3, #1
 801028c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801028e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010294:	429a      	cmp	r2, r3
 8010296:	f6ff af7e 	blt.w	8010196 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801029a:	e022      	b.n	80102e2 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 801029c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801029e:	f103 0220 	add.w	r2, r3, #32
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	3320      	adds	r3, #32
 80102a6:	4619      	mov	r1, r3
 80102a8:	4610      	mov	r0, r2
 80102aa:	f7fc fe5f 	bl	800cf6c <lfs_pair_cmp>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d007      	beq.n	80102c4 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 80102b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102b6:	889a      	ldrh	r2, [r3, #4]
 80102b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102ba:	8b9b      	ldrh	r3, [r3, #28]
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	b29a      	uxth	r2, r3
 80102c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102c2:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80102c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102c6:	f103 0108 	add.w	r1, r3, #8
 80102ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102cc:	3320      	adds	r3, #32
 80102ce:	461a      	mov	r2, r3
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7fe fcc3 	bl	800ec5c <lfs_dir_fetch>
 80102d6:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80102d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80102de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102e0:	e011      	b.n	8010306 <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80102e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102e4:	889a      	ldrh	r2, [r3, #4]
 80102e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102e8:	8b9b      	ldrh	r3, [r3, #28]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d303      	bcc.n	80102f6 <lfs_dir_relocatingcommit+0x55e>
 80102ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102f0:	7fdb      	ldrb	r3, [r3, #31]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1d2      	bne.n	801029c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80102f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80102fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f47f af29 	bne.w	8010156 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8010304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8010306:	4618      	mov	r0, r3
 8010308:	3770      	adds	r7, #112	@ 0x70
 801030a:	46bd      	mov	sp, r7
 801030c:	bdb0      	pop	{r4, r5, r7, pc}
 801030e:	bf00      	nop
 8010310:	08025d74 	.word	0x08025d74
 8010314:	08029488 	.word	0x08029488
 8010318:	08025bf4 	.word	0x08025bf4

0801031c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 801031c:	b5b0      	push	{r4, r5, r7, lr}
 801031e:	b0bc      	sub	sp, #240	@ 0xf0
 8010320:	af04      	add	r7, sp, #16
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801032e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010332:	e045      	b.n	80103c0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010338:	3308      	adds	r3, #8
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	429a      	cmp	r2, r3
 801033e:	d03a      	beq.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
 8010340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010344:	3308      	adds	r3, #8
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7fc fe0e 	bl	800cf6c <lfs_pair_cmp>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d12f      	bne.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801035a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801035c:	2b01      	cmp	r3, #1
 801035e:	d12a      	bne.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801036a:	2b00      	cmp	r3, #0
 801036c:	d023      	beq.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 801036e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801037a:	429a      	cmp	r2, r3
 801037c:	d91b      	bls.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 801037e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f001 fa3e 	bl	8011804 <lfs_file_outline>
 8010388:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 801038c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8010394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010398:	e2ad      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 801039a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f001 fa52 	bl	8011848 <lfs_file_flush>
 80103a4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80103a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80103b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80103b4:	e29f      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80103b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80103c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1b5      	bne.n	8010334 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80103de:	461d      	mov	r5, r3
 80103e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80103e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80103f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff fcca 	bl	800fd98 <lfs_dir_relocatingcommit>
 8010404:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8010408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801040c:	2b00      	cmp	r3, #0
 801040e:	da02      	bge.n	8010416 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8010410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010414:	e26f      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7fc fda4 	bl	800cf6c <lfs_pair_cmp>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d109      	bne.n	801043e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	461d      	mov	r5, r3
 801042e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010436:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801043a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 801043e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010442:	2b02      	cmp	r3, #2
 8010444:	d14a      	bne.n	80104dc <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	3348      	adds	r3, #72	@ 0x48
 801044a:	461a      	mov	r2, r3
 801044c:	68b9      	ldr	r1, [r7, #8]
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7fe fc20 	bl	800ec94 <lfs_dir_getgstate>
 8010454:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8010458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8010460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010464:	e247      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8010466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 801046c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801046e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	3318      	adds	r3, #24
 8010476:	4618      	mov	r0, r3
 8010478:	f7fc fde9 	bl	800d04e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	7ddb      	ldrb	r3, [r3, #23]
 8010480:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010484:	051a      	lsls	r2, r3, #20
 8010486:	4bc2      	ldr	r3, [pc, #776]	@ (8010790 <lfs_dir_orphaningcommit+0x474>)
 8010488:	4313      	orrs	r3, r2
 801048a:	667b      	str	r3, [r7, #100]	@ 0x64
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	3318      	adds	r3, #24
 8010490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010492:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010496:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 801049a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 801049e:	2000      	movs	r0, #0
 80104a0:	9001      	str	r0, [sp, #4]
 80104a2:	2001      	movs	r0, #1
 80104a4:	9000      	str	r0, [sp, #0]
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f7ff fc76 	bl	800fd98 <lfs_dir_relocatingcommit>
 80104ac:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	3318      	adds	r3, #24
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fc fdb0 	bl	800d01a <lfs_pair_fromle32>
        if (state < 0) {
 80104ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80104be:	2b00      	cmp	r3, #0
 80104c0:	da02      	bge.n	80104c8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80104c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80104c6:	e216      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80104c8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80104cc:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80104d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80104d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80104dc:	2300      	movs	r3, #0
 80104de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 80104e2:	e1fc      	b.n	80108de <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80104e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80104e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80104ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80104f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80104f4:	4ca7      	ldr	r4, [pc, #668]	@ (8010794 <lfs_dir_orphaningcommit+0x478>)
 80104f6:	9403      	str	r4, [sp, #12]
 80104f8:	9102      	str	r1, [sp, #8]
 80104fa:	9201      	str	r2, [sp, #4]
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	4603      	mov	r3, r0
 8010500:	f640 128c 	movw	r2, #2444	@ 0x98c
 8010504:	49a4      	ldr	r1, [pc, #656]	@ (8010798 <lfs_dir_orphaningcommit+0x47c>)
 8010506:	48a5      	ldr	r0, [pc, #660]	@ (801079c <lfs_dir_orphaningcommit+0x480>)
 8010508:	f012 fb76 	bl	8022bf8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 801050c:	2300      	movs	r3, #0
 801050e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f103 0220 	add.w	r2, r3, #32
 8010518:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7fc fd24 	bl	800cf6c <lfs_pair_cmp>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d107      	bne.n	801053a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 801052a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8010532:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801053e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010542:	e037      	b.n	80105b4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8010544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010548:	f103 0208 	add.w	r2, r3, #8
 801054c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010550:	4611      	mov	r1, r2
 8010552:	4618      	mov	r0, r3
 8010554:	f7fc fd0a 	bl	800cf6c <lfs_pair_cmp>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d109      	bne.n	8010572 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 801055e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010562:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010566:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8010568:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801056c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010570:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8010572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010576:	799b      	ldrb	r3, [r3, #6]
 8010578:	2b02      	cmp	r3, #2
 801057a:	d116      	bne.n	80105aa <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 801057c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010580:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010584:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010588:	4611      	mov	r1, r2
 801058a:	4618      	mov	r0, r3
 801058c:	f7fc fcee 	bl	800cf6c <lfs_pair_cmp>
 8010590:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8010592:	2b00      	cmp	r3, #0
 8010594:	d109      	bne.n	80105aa <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8010596:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801059a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801059e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80105a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80105a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80105a8:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80105aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80105b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1c3      	bne.n	8010544 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80105bc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80105c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80105c4:	4619      	mov	r1, r3
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f003 f87e 	bl	80136c8 <lfs_fs_parent>
 80105cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80105d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	da07      	bge.n	80105e8 <lfs_dir_orphaningcommit+0x2cc>
 80105d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80105dc:	f113 0f02 	cmn.w	r3, #2
 80105e0:	d002      	beq.n	80105e8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80105e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80105e6:	e186      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80105e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80105ec:	f113 0f02 	cmn.w	r3, #2
 80105f0:	bf14      	ite	ne
 80105f2:	2301      	movne	r3, #1
 80105f4:	2300      	moveq	r3, #0
 80105f6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 80105fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80105fe:	f113 0f02 	cmn.w	r3, #2
 8010602:	f000 809e 	beq.w	8010742 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8010606:	2101      	movs	r1, #1
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f003 f8f5 	bl	80137f8 <lfs_fs_preporphans>
 801060e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8010612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <lfs_dir_orphaningcommit+0x304>
                return err;
 801061a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801061e:	e16a      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010620:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010624:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	3330      	adds	r3, #48	@ 0x30
 801062c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010630:	4611      	mov	r1, r2
 8010632:	4618      	mov	r0, r3
 8010634:	f7fc fe4c 	bl	800d2d0 <lfs_gstate_hasmovehere>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d02d      	beq.n	801069a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010642:	4618      	mov	r0, r3
 8010644:	f7fc fd88 	bl	800d158 <lfs_tag_id>
 8010648:	4603      	mov	r3, r0
 801064a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 801064e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010652:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8010656:	484f      	ldr	r0, [pc, #316]	@ (8010794 <lfs_dir_orphaningcommit+0x478>)
 8010658:	9002      	str	r0, [sp, #8]
 801065a:	9201      	str	r2, [sp, #4]
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	460b      	mov	r3, r1
 8010660:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8010664:	494c      	ldr	r1, [pc, #304]	@ (8010798 <lfs_dir_orphaningcommit+0x47c>)
 8010666:	484e      	ldr	r0, [pc, #312]	@ (80107a0 <lfs_dir_orphaningcommit+0x484>)
 8010668:	f012 fac6 	bl	8022bf8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801066c:	2200      	movs	r2, #0
 801066e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f003 f910 	bl	8013898 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8010678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801067c:	4618      	mov	r0, r3
 801067e:	f7fc fd6b 	bl	800d158 <lfs_tag_id>
 8010682:	4603      	mov	r3, r0
 8010684:	461a      	mov	r2, r3
 8010686:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 801068a:	4293      	cmp	r3, r2
 801068c:	d205      	bcs.n	801069a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 801068e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010692:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8010696:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801069a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801069c:	657b      	str	r3, [r7, #84]	@ 0x54
 801069e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106a0:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80106a2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fc fcd1 	bl	800d04e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80106ac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80106b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d007      	beq.n	80106c8 <lfs_dir_orphaningcommit+0x3ac>
 80106b8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80106bc:	029b      	lsls	r3, r3, #10
 80106be:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80106c2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80106c6:	e000      	b.n	80106ca <lfs_dir_orphaningcommit+0x3ae>
 80106c8:	2300      	movs	r3, #0
 80106ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80106cc:	2300      	movs	r3, #0
 80106ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80106d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106d6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80106da:	653b      	str	r3, [r7, #80]	@ 0x50
 80106dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80106e0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80106e4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80106e8:	2000      	movs	r0, #0
 80106ea:	9001      	str	r0, [sp, #4]
 80106ec:	2002      	movs	r0, #2
 80106ee:	9000      	str	r0, [sp, #0]
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f7ff fb51 	bl	800fd98 <lfs_dir_relocatingcommit>
 80106f6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80106fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fc fc8b 	bl	800d01a <lfs_pair_fromle32>
            if (state < 0) {
 8010704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010708:	2b00      	cmp	r3, #0
 801070a:	da02      	bge.n	8010712 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 801070c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010710:	e0f1      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8010712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010716:	2b01      	cmp	r3, #1
 8010718:	d113      	bne.n	8010742 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 801071a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801071c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8010720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8010726:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 801072a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 801072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010732:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801073a:	2301      	movs	r3, #1
 801073c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8010740:	e0cd      	b.n	80108de <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8010742:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010746:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801074a:	4619      	mov	r1, r3
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f002 ff09 	bl	8013564 <lfs_fs_pred>
 8010752:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8010756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801075a:	2b00      	cmp	r3, #0
 801075c:	d007      	beq.n	801076e <lfs_dir_orphaningcommit+0x452>
 801075e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010762:	f113 0f02 	cmn.w	r3, #2
 8010766:	d002      	beq.n	801076e <lfs_dir_orphaningcommit+0x452>
            return err;
 8010768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801076c:	e0c3      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801076e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010772:	2b00      	cmp	r3, #0
 8010774:	d01a      	beq.n	80107ac <lfs_dir_orphaningcommit+0x490>
 8010776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801077a:	f113 0f02 	cmn.w	r3, #2
 801077e:	d115      	bne.n	80107ac <lfs_dir_orphaningcommit+0x490>
 8010780:	4b08      	ldr	r3, [pc, #32]	@ (80107a4 <lfs_dir_orphaningcommit+0x488>)
 8010782:	4a09      	ldr	r2, [pc, #36]	@ (80107a8 <lfs_dir_orphaningcommit+0x48c>)
 8010784:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8010788:	4803      	ldr	r0, [pc, #12]	@ (8010798 <lfs_dir_orphaningcommit+0x47c>)
 801078a:	f011 fe99 	bl	80224c0 <__assert_func>
 801078e:	bf00      	nop
 8010790:	000ffc08 	.word	0x000ffc08
 8010794:	08025d1c 	.word	0x08025d1c
 8010798:	08025bf4 	.word	0x08025bf4
 801079c:	08025e9c 	.word	0x08025e9c
 80107a0:	08025ed8 	.word	0x08025ed8
 80107a4:	08025f1c 	.word	0x08025f1c
 80107a8:	080294a4 	.word	0x080294a4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80107ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107b0:	f113 0f02 	cmn.w	r3, #2
 80107b4:	f000 8093 	beq.w	80108de <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	3330      	adds	r3, #48	@ 0x30
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fc fd3e 	bl	800d23e <lfs_gstate_hasorphans>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d011      	beq.n	80107ec <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80107c8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80107cc:	425b      	negs	r3, r3
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	b25b      	sxtb	r3, r3
 80107d2:	4619      	mov	r1, r3
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f003 f80f 	bl	80137f8 <lfs_fs_preporphans>
 80107da:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80107de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80107e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107ea:	e084      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80107ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80107f0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	3330      	adds	r3, #48	@ 0x30
 80107f8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fc fd66 	bl	800d2d0 <lfs_gstate_hasmovehere>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d01c      	beq.n	8010844 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801080e:	4618      	mov	r0, r3
 8010810:	f7fc fca2 	bl	800d158 <lfs_tag_id>
 8010814:	4603      	mov	r3, r0
 8010816:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 801081a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801081c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801081e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8010822:	4837      	ldr	r0, [pc, #220]	@ (8010900 <lfs_dir_orphaningcommit+0x5e4>)
 8010824:	9002      	str	r0, [sp, #8]
 8010826:	9201      	str	r2, [sp, #4]
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	460b      	mov	r3, r1
 801082c:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8010830:	4934      	ldr	r1, [pc, #208]	@ (8010904 <lfs_dir_orphaningcommit+0x5e8>)
 8010832:	4835      	ldr	r0, [pc, #212]	@ (8010908 <lfs_dir_orphaningcommit+0x5ec>)
 8010834:	f012 f9e0 	bl	8022bf8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010838:	2200      	movs	r2, #0
 801083a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f003 f82a 	bl	8013898 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8010844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 801084a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801084c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8010850:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010854:	4618      	mov	r0, r3
 8010856:	f7fc fbfa 	bl	800d04e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801085a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801085e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010862:	4293      	cmp	r3, r2
 8010864:	d007      	beq.n	8010876 <lfs_dir_orphaningcommit+0x55a>
 8010866:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801086a:	029b      	lsls	r3, r3, #10
 801086c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010870:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010874:	e000      	b.n	8010878 <lfs_dir_orphaningcommit+0x55c>
 8010876:	2300      	movs	r3, #0
 8010878:	627b      	str	r3, [r7, #36]	@ 0x24
 801087a:	2300      	movs	r3, #0
 801087c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801087e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010882:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010886:	051a      	lsls	r2, r3, #20
 8010888:	4b20      	ldr	r3, [pc, #128]	@ (801090c <lfs_dir_orphaningcommit+0x5f0>)
 801088a:	4313      	orrs	r3, r2
 801088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801088e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010892:	633b      	str	r3, [r7, #48]	@ 0x30
 8010894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010898:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 801089c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80108a0:	2000      	movs	r0, #0
 80108a2:	9001      	str	r0, [sp, #4]
 80108a4:	2002      	movs	r0, #2
 80108a6:	9000      	str	r0, [sp, #0]
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f7ff fa75 	bl	800fd98 <lfs_dir_relocatingcommit>
 80108ae:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80108b2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fc fbaf 	bl	800d01a <lfs_pair_fromle32>
            if (state < 0) {
 80108bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	da02      	bge.n	80108ca <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80108c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108c8:	e015      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80108ca:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80108ce:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80108d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80108da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80108de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	f43f adfe 	beq.w	80104e4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80108e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <lfs_dir_orphaningcommit+0x5d8>
 80108f0:	2303      	movs	r3, #3
 80108f2:	e000      	b.n	80108f6 <lfs_dir_orphaningcommit+0x5da>
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	37e0      	adds	r7, #224	@ 0xe0
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bdb0      	pop	{r4, r5, r7, pc}
 80108fe:	bf00      	nop
 8010900:	08025d1c 	.word	0x08025d1c
 8010904:	08025bf4 	.word	0x08025bf4
 8010908:	08025ed8 	.word	0x08025ed8
 801090c:	000ffc08 	.word	0x000ffc08

08010910 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
 801091c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7ff fcf9 	bl	801031c <lfs_dir_orphaningcommit>
 801092a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	da01      	bge.n	8010936 <lfs_dir_commit+0x26>
        return orphans;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	e00d      	b.n	8010952 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d009      	beq.n	8010950 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 801093c:	2100      	movs	r1, #0
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f003 f8cc 	bl	8013adc <lfs_fs_deorphan>
 8010944:	6138      	str	r0, [r7, #16]
        if (err) {
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d001      	beq.n	8010950 <lfs_dir_commit+0x40>
            return err;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	e000      	b.n	8010952 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3718      	adds	r7, #24
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
	...

0801095c <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801095c:	b5b0      	push	{r4, r5, r7, lr}
 801095e:	b0b8      	sub	sp, #224	@ 0xe0
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f003 fa68 	bl	8013e3c <lfs_fs_forceconsistency>
 801096c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8010970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <lfs_mkdir_+0x22>
        return err;
 8010978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801097c:	e128      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8010986:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 801098a:	463a      	mov	r2, r7
 801098c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010990:	f103 0108 	add.w	r1, r3, #8
 8010994:	4603      	mov	r3, r0
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7fe fa72 	bl	800ee80 <lfs_dir_find>
 801099c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80109a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109a4:	f113 0f02 	cmn.w	r3, #2
 80109a8:	d105      	bne.n	80109b6 <lfs_mkdir_+0x5a>
 80109aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80109ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d109      	bne.n	80109ca <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80109b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	da02      	bge.n	80109c4 <lfs_mkdir_+0x68>
 80109be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109c2:	e105      	b.n	8010bd0 <lfs_mkdir_+0x274>
 80109c4:	f06f 0310 	mvn.w	r3, #16
 80109c8:	e102      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7ef fc57 	bl	8000280 <strlen>
 80109d2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80109de:	429a      	cmp	r2, r3
 80109e0:	d902      	bls.n	80109e8 <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80109e2:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80109e6:	e0f3      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7fc fe1c 	bl	800d626 <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80109ee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7fe fd63 	bl	800f4c0 <lfs_dir_alloc>
 80109fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 80109fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d002      	beq.n	8010a0c <lfs_mkdir_+0xb0>
        return err;
 8010a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a0a:	e0e1      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8010a0c:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8010a10:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8010a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8010a20:	e012      	b.n	8010a48 <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8010a22:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010a26:	f103 0218 	add.w	r2, r3, #24
 8010a2a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010a2e:	4619      	mov	r1, r3
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7fe f913 	bl	800ec5c <lfs_dir_fetch>
 8010a36:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8010a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d002      	beq.n	8010a48 <lfs_mkdir_+0xec>
            return err;
 8010a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a46:	e0c3      	b.n	8010bd0 <lfs_mkdir_+0x274>
    while (pred.split) {
 8010a48:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1e8      	bne.n	8010a22 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8010a50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010a54:	3318      	adds	r3, #24
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fc faf9 	bl	800d04e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8010a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8010bd8 <lfs_mkdir_+0x27c>)
 8010a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010a64:	3318      	adds	r3, #24
 8010a66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a68:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8010a6c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8010a70:	2301      	movs	r3, #1
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7ff ff4c 	bl	8010910 <lfs_dir_commit>
 8010a78:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8010a7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010a80:	3318      	adds	r3, #24
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fc fac9 	bl	800d01a <lfs_pair_fromle32>
    if (err) {
 8010a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d002      	beq.n	8010a96 <lfs_mkdir_+0x13a>
        return err;
 8010a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a94:	e09c      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8010a96:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d04c      	beq.n	8010b38 <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f002 fea9 	bl	80137f8 <lfs_fs_preporphans>
 8010aa6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8010aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d002      	beq.n	8010ab8 <lfs_mkdir_+0x15c>
            return err;
 8010ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010ab6:	e08b      	b.n	8010bd0 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8010aca:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 8010acc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fc fabc 	bl	800d04e <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8010ad6:	4b40      	ldr	r3, [pc, #256]	@ (8010bd8 <lfs_mkdir_+0x27c>)
 8010ad8:	617b      	str	r3, [r7, #20]
 8010ada:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010ade:	61bb      	str	r3, [r7, #24]
 8010ae0:	f107 0214 	add.w	r2, r7, #20
 8010ae4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010ae8:	2301      	movs	r3, #1
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7ff ff10 	bl	8010910 <lfs_dir_commit>
 8010af0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8010af4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fc fa8e 	bl	800d01a <lfs_pair_fromle32>
        if (err) {
 8010afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d006      	beq.n	8010b14 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 8010b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8010b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b12:	e05d      	b.n	8010bd0 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 8010b14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8010b1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f002 fe69 	bl	80137f8 <lfs_fs_preporphans>
 8010b26:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8010b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <lfs_mkdir_+0x1dc>
            return err;
 8010b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b36:	e04b      	b.n	8010bd0 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8010b38:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fc fa86 	bl	800d04e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8010b42:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8010b46:	029b      	lsls	r3, r3, #10
 8010b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b52:	2300      	movs	r3, #0
 8010b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b56:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8010b5a:	029a      	lsls	r2, r3, #10
 8010b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b60:	4313      	orrs	r3, r2
 8010b62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b6c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8010b70:	029b      	lsls	r3, r3, #10
 8010b72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010b76:	f043 0308 	orr.w	r3, r3, #8
 8010b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b7c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b82:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8010b86:	f083 0301 	eor.w	r3, r3, #1
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <lfs_mkdir_+0x238>
 8010b90:	4b11      	ldr	r3, [pc, #68]	@ (8010bd8 <lfs_mkdir_+0x27c>)
 8010b92:	e000      	b.n	8010b96 <lfs_mkdir_+0x23a>
 8010b94:	2300      	movs	r3, #0
 8010b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8010b98:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010b9e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010ba2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010ba6:	f103 0108 	add.w	r1, r3, #8
 8010baa:	2304      	movs	r3, #4
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7ff feaf 	bl	8010910 <lfs_dir_commit>
 8010bb2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8010bb6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fc fa2d 	bl	800d01a <lfs_pair_fromle32>
    if (err) {
 8010bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <lfs_mkdir_+0x272>
        return err;
 8010bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bcc:	e000      	b.n	8010bd0 <lfs_mkdir_+0x274>
    }

    return 0;
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	37e0      	adds	r7, #224	@ 0xe0
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd8:	600ffc08 	.word	0x600ffc08

08010bdc <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8010bdc:	b590      	push	{r4, r7, lr}
 8010bde:	b08d      	sub	sp, #52	@ 0x34
 8010be0:	af02      	add	r7, sp, #8
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	f103 0108 	add.w	r1, r3, #8
 8010bee:	1d3a      	adds	r2, r7, #4
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7fe f944 	bl	800ee80 <lfs_dir_find>
 8010bf8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	da01      	bge.n	8010c04 <lfs_dir_open_+0x28>
        return tag;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c02:	e05e      	b.n	8010cc2 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8010c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fc fa7c 	bl	800d104 <lfs_tag_type3>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d002      	beq.n	8010c18 <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 8010c12:	f06f 0313 	mvn.w	r3, #19
 8010c16:	e054      	b.n	8010cc2 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8010c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fc fa9c 	bl	800d158 <lfs_tag_id>
 8010c20:	4603      	mov	r3, r0
 8010c22:	461a      	mov	r2, r3
 8010c24:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d106      	bne.n	8010c3a <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	6a1b      	ldr	r3, [r3, #32]
 8010c30:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c36:	61bb      	str	r3, [r7, #24]
 8010c38:	e01f      	b.n	8010c7a <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8010c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fc fa88 	bl	800d158 <lfs_tag_id>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010c50:	f043 0308 	orr.w	r3, r3, #8
 8010c54:	f107 0214 	add.w	r2, r7, #20
 8010c58:	9200      	str	r2, [sp, #0]
 8010c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8010ccc <lfs_dir_open_+0xf0>)
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f7fc fef6 	bl	800da50 <lfs_dir_get>
 8010c64:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	da01      	bge.n	8010c70 <lfs_dir_open_+0x94>
            return res;
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	e028      	b.n	8010cc2 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fc f9d0 	bl	800d01a <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	3308      	adds	r3, #8
 8010c7e:	f107 0214 	add.w	r2, r7, #20
 8010c82:	4619      	mov	r1, r3
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f7fd ffe9 	bl	800ec5c <lfs_dir_fetch>
 8010c8a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d001      	beq.n	8010c96 <lfs_dir_open_+0xba>
        return err;
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	e015      	b.n	8010cc2 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	689a      	ldr	r2, [r3, #8]
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	68da      	ldr	r2, [r3, #12]
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f7fc fc77 	bl	800d5ae <lfs_mlist_append>

    return 0;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	372c      	adds	r7, #44	@ 0x2c
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd90      	pop	{r4, r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	700ffc00 	.word	0x700ffc00

08010cd0 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7fc fc44 	bl	800d56a <lfs_mlist_remove>

    return 0;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8010cf8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f012 f8aa 	bl	8022e58 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d110      	bne.n	8010d2e <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2202      	movs	r2, #2
 8010d10:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	3308      	adds	r3, #8
 8010d16:	4935      	ldr	r1, [pc, #212]	@ (8010dec <lfs_dir_read_+0x100>)
 8010d18:	461a      	mov	r2, r3
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d24:	1c5a      	adds	r2, r3, #1
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e05a      	b.n	8010de4 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d110      	bne.n	8010d58 <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2202      	movs	r2, #2
 8010d3a:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	3308      	adds	r3, #8
 8010d40:	4a2b      	ldr	r2, [pc, #172]	@ (8010df0 <lfs_dir_read_+0x104>)
 8010d42:	8811      	ldrh	r1, [r2, #0]
 8010d44:	7892      	ldrb	r2, [r2, #2]
 8010d46:	8019      	strh	r1, [r3, #0]
 8010d48:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8010d54:	2301      	movs	r3, #1
 8010d56:	e045      	b.n	8010de4 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	889a      	ldrh	r2, [r3, #4]
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	8b9b      	ldrh	r3, [r3, #28]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d11a      	bne.n	8010d9a <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	7fdb      	ldrb	r3, [r3, #31]
 8010d68:	f083 0301 	eor.w	r3, r3, #1
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <lfs_dir_read_+0x8a>
                return false;
 8010d72:	2300      	movs	r3, #0
 8010d74:	e036      	b.n	8010de4 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	f103 0108 	add.w	r1, r3, #8
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	3320      	adds	r3, #32
 8010d80:	461a      	mov	r2, r3
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f7fd ff6a 	bl	800ec5c <lfs_dir_fetch>
 8010d88:	6178      	str	r0, [r7, #20]
            if (err) {
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <lfs_dir_read_+0xa8>
                return err;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	e027      	b.n	8010de4 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	2200      	movs	r2, #0
 8010d98:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	f103 0108 	add.w	r1, r3, #8
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	889a      	ldrh	r2, [r3, #4]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f7fd ffa6 	bl	800ecf8 <lfs_dir_getinfo>
 8010dac:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d005      	beq.n	8010dc0 <lfs_dir_read_+0xd4>
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	f113 0f02 	cmn.w	r3, #2
 8010dba:	d001      	beq.n	8010dc0 <lfs_dir_read_+0xd4>
            return err;
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	e011      	b.n	8010de4 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	889b      	ldrh	r3, [r3, #4]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	f113 0f02 	cmn.w	r3, #2
 8010dd2:	d100      	bne.n	8010dd6 <lfs_dir_read_+0xea>
    while (true) {
 8010dd4:	e7c0      	b.n	8010d58 <lfs_dir_read_+0x6c>
            break;
 8010dd6:	bf00      	nop
        }
    }

    dir->pos += 1;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ddc:	1c5a      	adds	r2, r3, #1
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 8010de2:	2301      	movs	r3, #1
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3718      	adds	r7, #24
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	08025d6c 	.word	0x08025d6c
 8010df0:	08025d70 	.word	0x08025d70

08010df4 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b087      	sub	sp, #28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e0a:	3b08      	subs	r3, #8
 8010e0c:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8010e0e:	697a      	ldr	r2, [r7, #20]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e16:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d101      	bne.n	8010e22 <lfs_ctz_index+0x2e>
        return 0;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e01c      	b.n	8010e5c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	3b01      	subs	r3, #1
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fb fc79 	bl	800c71e <lfs_popc>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	3302      	adds	r3, #2
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	697a      	ldr	r2, [r7, #20]
 8010e34:	1ad2      	subs	r2, r2, r3
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e3c:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	68fa      	ldr	r2, [r7, #12]
 8010e42:	fb02 f303 	mul.w	r3, r2, r3
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	1ad4      	subs	r4, r2, r3
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7fb fc67 	bl	800c71e <lfs_popc>
 8010e50:	4603      	mov	r3, r0
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	1ae2      	subs	r2, r4, r3
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	601a      	str	r2, [r3, #0]
    return i;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	371c      	adds	r7, #28
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd90      	pop	{r4, r7, pc}

08010e64 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8010e64:	b590      	push	{r4, r7, lr}
 8010e66:	b08f      	sub	sp, #60	@ 0x3c
 8010e68:	af04      	add	r7, sp, #16
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8010e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d108      	bne.n	8010e8a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8010e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e7e:	601a      	str	r2, [r3, #0]
        *off = 0;
 8010e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e82:	2200      	movs	r2, #0
 8010e84:	601a      	str	r2, [r3, #0]
        return 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	e053      	b.n	8010f32 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	617b      	str	r3, [r7, #20]
 8010e90:	f107 0314 	add.w	r3, r7, #20
 8010e94:	4619      	mov	r1, r3
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f7ff ffac 	bl	8010df4 <lfs_ctz_index>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8010ea0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff ffa4 	bl	8010df4 <lfs_ctz_index>
 8010eac:	4603      	mov	r3, r0
 8010eae:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8010eb0:	e034      	b.n	8010f1c <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8010eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eb4:	6a3b      	ldr	r3, [r7, #32]
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	3301      	adds	r3, #1
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fb fc10 	bl	800c6e0 <lfs_npw2>
 8010ec0:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8010ec2:	1e5c      	subs	r4, r3, #1
 8010ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ec6:	f7fb fc1b 	bl	800c700 <lfs_ctz>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f7fb fbcf 	bl	800c672 <lfs_min>
 8010ed4:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	69fa      	ldr	r2, [r7, #28]
 8010eda:	0092      	lsls	r2, r2, #2
 8010edc:	2104      	movs	r1, #4
 8010ede:	9103      	str	r1, [sp, #12]
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	9102      	str	r1, [sp, #8]
 8010ee4:	9201      	str	r2, [sp, #4]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	2304      	movs	r3, #4
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	68b9      	ldr	r1, [r7, #8]
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f7fb fc9a 	bl	800c828 <lfs_bd_read>
 8010ef4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fb fc2a 	bl	800c752 <lfs_fromle32>
 8010efe:	4603      	mov	r3, r0
 8010f00:	603b      	str	r3, [r7, #0]
        if (err) {
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d001      	beq.n	8010f0c <lfs_ctz_find+0xa8>
            return err;
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	e012      	b.n	8010f32 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	fa02 f303 	lsl.w	r3, r2, r3
 8010f14:	461a      	mov	r2, r3
 8010f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f18:	1a9b      	subs	r3, r3, r2
 8010f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8010f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d8c6      	bhi.n	8010eb2 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f28:	601a      	str	r2, [r3, #0]
    *off = pos;
 8010f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f2e:	601a      	str	r2, [r3, #0]
    return 0;
 8010f30:	2300      	movs	r3, #0
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	372c      	adds	r7, #44	@ 0x2c
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd90      	pop	{r4, r7, pc}
	...

08010f3c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b092      	sub	sp, #72	@ 0x48
 8010f40:	af04      	add	r7, sp, #16
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8010f4a:	f107 0320 	add.w	r3, r7, #32
 8010f4e:	4619      	mov	r1, r3
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f7fc fbff 	bl	800d754 <lfs_alloc>
 8010f56:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8010f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <lfs_ctz_extend+0x26>
            return err;
 8010f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f60:	e0e9      	b.n	8011136 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8010f62:	6a3b      	ldr	r3, [r7, #32]
 8010f64:	4619      	mov	r1, r3
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f7fb ff9e 	bl	800cea8 <lfs_bd_erase>
 8010f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8010f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d006      	beq.n	8010f82 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8010f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f76:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010f7a:	f000 80cb 	beq.w	8011114 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8010f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f80:	e0d9      	b.n	8011136 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8010f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d107      	bne.n	8010f98 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8010f88:	6a3a      	ldr	r2, [r7, #32]
 8010f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f8c:	601a      	str	r2, [r3, #0]
                *off = 0;
 8010f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f90:	2200      	movs	r2, #0
 8010f92:	601a      	str	r2, [r3, #0]
                return 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	e0ce      	b.n	8011136 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8010f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8010f9e:	f107 031c 	add.w	r3, r7, #28
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f7ff ff25 	bl	8010df4 <lfs_ctz_index>
 8010faa:	4603      	mov	r3, r0
 8010fac:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d044      	beq.n	801104a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fc4:	e035      	b.n	8011032 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8010fc6:	69fa      	ldr	r2, [r7, #28]
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fca:	1ad2      	subs	r2, r2, r3
 8010fcc:	2301      	movs	r3, #1
 8010fce:	9303      	str	r3, [sp, #12]
 8010fd0:	f107 0317 	add.w	r3, r7, #23
 8010fd4:	9302      	str	r3, [sp, #8]
 8010fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fd8:	9301      	str	r3, [sp, #4]
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f7fb fc1f 	bl	800c828 <lfs_bd_read>
 8010fea:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8010fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <lfs_ctz_extend+0xba>
                        return err;
 8010ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff4:	e09f      	b.n	8011136 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8010ff6:	6a3b      	ldr	r3, [r7, #32]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	9203      	str	r2, [sp, #12]
 8010ffc:	f107 0217 	add.w	r2, r7, #23
 8011000:	9202      	str	r2, [sp, #8]
 8011002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011004:	9201      	str	r2, [sp, #4]
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	2301      	movs	r3, #1
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	68b9      	ldr	r1, [r7, #8]
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f7fb fe9c 	bl	800cd4c <lfs_bd_prog>
 8011014:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8011016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011018:	2b00      	cmp	r3, #0
 801101a:	d007      	beq.n	801102c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 801101c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801101e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011022:	d101      	bne.n	8011028 <lfs_ctz_extend+0xec>
                            goto relocate;
 8011024:	bf00      	nop
                    goto relocate;
 8011026:	e075      	b.n	8011114 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8011028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 801102a:	e084      	b.n	8011136 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 801102c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102e:	3301      	adds	r3, #1
 8011030:	637b      	str	r3, [r7, #52]	@ 0x34
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011036:	429a      	cmp	r2, r3
 8011038:	d3c5      	bcc.n	8010fc6 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 801103a:	6a3a      	ldr	r2, [r7, #32]
 801103c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801103e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8011040:	69fa      	ldr	r2, [r7, #28]
 8011042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011044:	601a      	str	r2, [r3, #0]
                return 0;
 8011046:	2300      	movs	r3, #0
 8011048:	e075      	b.n	8011136 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 801104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801104c:	3301      	adds	r3, #1
 801104e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8011050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011052:	f7fb fb55 	bl	800c700 <lfs_ctz>
 8011056:	4603      	mov	r3, r0
 8011058:	3301      	adds	r3, #1
 801105a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8011060:	2300      	movs	r3, #0
 8011062:	633b      	str	r3, [r7, #48]	@ 0x30
 8011064:	e049      	b.n	80110fa <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	4618      	mov	r0, r3
 801106a:	f7fb fb7d 	bl	800c768 <lfs_tole32>
 801106e:	4603      	mov	r3, r0
 8011070:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8011072:	6a3b      	ldr	r3, [r7, #32]
 8011074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011076:	0092      	lsls	r2, r2, #2
 8011078:	2104      	movs	r1, #4
 801107a:	9103      	str	r1, [sp, #12]
 801107c:	f107 0118 	add.w	r1, r7, #24
 8011080:	9102      	str	r1, [sp, #8]
 8011082:	9201      	str	r2, [sp, #4]
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	2301      	movs	r3, #1
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	68b9      	ldr	r1, [r7, #8]
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f7fb fe5d 	bl	800cd4c <lfs_bd_prog>
 8011092:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	4618      	mov	r0, r3
 8011098:	f7fb fb5b 	bl	800c752 <lfs_fromle32>
 801109c:	4603      	mov	r3, r0
 801109e:	61bb      	str	r3, [r7, #24]
                if (err) {
 80110a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d005      	beq.n	80110b2 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80110a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80110ac:	d034      	beq.n	8011118 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80110ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b0:	e041      	b.n	8011136 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80110b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b4:	3b01      	subs	r3, #1
 80110b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d01b      	beq.n	80110f4 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110c0:	0092      	lsls	r2, r2, #2
 80110c2:	2104      	movs	r1, #4
 80110c4:	9103      	str	r1, [sp, #12]
 80110c6:	f107 0118 	add.w	r1, r7, #24
 80110ca:	9102      	str	r1, [sp, #8]
 80110cc:	9201      	str	r2, [sp, #4]
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	2304      	movs	r3, #4
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	2100      	movs	r1, #0
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f7fb fba6 	bl	800c828 <lfs_bd_read>
 80110dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80110de:	69bb      	ldr	r3, [r7, #24]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fb fb36 	bl	800c752 <lfs_fromle32>
 80110e6:	4603      	mov	r3, r0
 80110e8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80110ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d001      	beq.n	80110f4 <lfs_ctz_extend+0x1b8>
                        return err;
 80110f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f2:	e020      	b.n	8011136 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80110f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f6:	3301      	adds	r3, #1
 80110f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80110fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110fe:	429a      	cmp	r2, r3
 8011100:	d3b1      	bcc.n	8011066 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8011102:	6a3a      	ldr	r2, [r7, #32]
 8011104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011106:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8011108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801110a:	009a      	lsls	r2, r3, #2
 801110c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801110e:	601a      	str	r2, [r3, #0]
            return 0;
 8011110:	2300      	movs	r3, #0
 8011112:	e010      	b.n	8011136 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8011114:	bf00      	nop
 8011116:	e000      	b.n	801111a <lfs_ctz_extend+0x1de>
                        goto relocate;
 8011118:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	4a08      	ldr	r2, [pc, #32]	@ (8011140 <lfs_ctz_extend+0x204>)
 801111e:	9200      	str	r2, [sp, #0]
 8011120:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8011124:	4907      	ldr	r1, [pc, #28]	@ (8011144 <lfs_ctz_extend+0x208>)
 8011126:	4808      	ldr	r0, [pc, #32]	@ (8011148 <lfs_ctz_extend+0x20c>)
 8011128:	f011 fd66 	bl	8022bf8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 801112c:	68b9      	ldr	r1, [r7, #8]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f7fb fb55 	bl	800c7de <lfs_cache_drop>
    while (true) {
 8011134:	e709      	b.n	8010f4a <lfs_ctz_extend+0xe>
    }
}
 8011136:	4618      	mov	r0, r3
 8011138:	3738      	adds	r7, #56	@ 0x38
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	08025d1c 	.word	0x08025d1c
 8011144:	08025bf4 	.word	0x08025bf4
 8011148:	08025d9c 	.word	0x08025d9c

0801114c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 801114c:	b580      	push	{r7, lr}
 801114e:	b090      	sub	sp, #64	@ 0x40
 8011150:	af04      	add	r7, sp, #16
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 801115a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801115c:	2b00      	cmp	r3, #0
 801115e:	d101      	bne.n	8011164 <lfs_ctz_traverse+0x18>
        return 0;
 8011160:	2300      	movs	r3, #0
 8011162:	e06b      	b.n	801123c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8011164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011166:	3b01      	subs	r3, #1
 8011168:	61fb      	str	r3, [r7, #28]
 801116a:	f107 031c 	add.w	r3, r7, #28
 801116e:	4619      	mov	r1, r3
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f7ff fe3f 	bl	8010df4 <lfs_ctz_index>
 8011176:	4603      	mov	r3, r0
 8011178:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 801117a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801117c:	6839      	ldr	r1, [r7, #0]
 801117e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011180:	4798      	blx	r3
 8011182:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <lfs_ctz_traverse+0x42>
            return err;
 801118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118c:	e056      	b.n	801123c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 801118e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <lfs_ctz_traverse+0x4c>
            return 0;
 8011194:	2300      	movs	r3, #0
 8011196:	e051      	b.n	801123c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8011198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119a:	f003 0301 	and.w	r3, r3, #1
 801119e:	f1c3 0302 	rsb	r3, r3, #2
 80111a2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80111a4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80111a6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80111a8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80111aa:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80111ac:	9303      	str	r3, [sp, #12]
 80111ae:	f107 0314 	add.w	r3, r7, #20
 80111b2:	9302      	str	r3, [sp, #8]
 80111b4:	2300      	movs	r3, #0
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	4613      	mov	r3, r2
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	68b9      	ldr	r1, [r7, #8]
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f7fb fb30 	bl	800c828 <lfs_bd_read>
 80111c8:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fb fac0 	bl	800c752 <lfs_fromle32>
 80111d2:	4603      	mov	r3, r0
 80111d4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7fb faba 	bl	800c752 <lfs_fromle32>
 80111de:	4603      	mov	r3, r0
 80111e0:	61bb      	str	r3, [r7, #24]
        if (err) {
 80111e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <lfs_ctz_traverse+0xa0>
            return err;
 80111e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ea:	e027      	b.n	801123c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80111ec:	2300      	movs	r3, #0
 80111ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111f0:	e012      	b.n	8011218 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80111f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	3330      	adds	r3, #48	@ 0x30
 80111f8:	443b      	add	r3, r7
 80111fa:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80111fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011200:	4611      	mov	r1, r2
 8011202:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011204:	4798      	blx	r3
 8011206:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8011208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <lfs_ctz_traverse+0xc6>
                return err;
 801120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011210:	e014      	b.n	801123c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8011212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011214:	3301      	adds	r3, #1
 8011216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011218:	6a3b      	ldr	r3, [r7, #32]
 801121a:	3b01      	subs	r3, #1
 801121c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801121e:	429a      	cmp	r2, r3
 8011220:	dbe7      	blt.n	80111f2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8011222:	6a3b      	ldr	r3, [r7, #32]
 8011224:	3b01      	subs	r3, #1
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	3330      	adds	r3, #48	@ 0x30
 801122a:	443b      	add	r3, r7
 801122c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011230:	603b      	str	r3, [r7, #0]
        index -= count;
 8011232:	6a3b      	ldr	r3, [r7, #32]
 8011234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 801123a:	e79e      	b.n	801117a <lfs_ctz_traverse+0x2e>
    }
}
 801123c:	4618      	mov	r0, r3
 801123e:	3730      	adds	r7, #48	@ 0x30
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8011244:	b5b0      	push	{r4, r5, r7, lr}
 8011246:	b09a      	sub	sp, #104	@ 0x68
 8011248:	af02      	add	r7, sp, #8
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	f003 0302 	and.w	r3, r3, #2
 8011258:	2b00      	cmp	r3, #0
 801125a:	d008      	beq.n	801126e <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f002 fded 	bl	8013e3c <lfs_fs_forceconsistency>
 8011262:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8011264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <lfs_file_opencfg_+0x2a>
            return err;
 801126a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126c:	e1b0      	b.n	80115d0 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011272:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2200      	movs	r2, #0
 801127e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2200      	movs	r2, #0
 8011284:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2200      	movs	r2, #0
 801128a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	f103 0108 	add.w	r1, r3, #8
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	3304      	adds	r3, #4
 8011296:	1d3a      	adds	r2, r7, #4
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f7fd fdf1 	bl	800ee80 <lfs_dir_find>
 801129e:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80112a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	da0c      	bge.n	80112c0 <lfs_file_opencfg_+0x7c>
 80112a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112a8:	f113 0f02 	cmn.w	r3, #2
 80112ac:	d105      	bne.n	80112ba <lfs_file_opencfg_+0x76>
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	889b      	ldrh	r3, [r3, #4]
 80112b2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d102      	bne.n	80112c0 <lfs_file_opencfg_+0x7c>
        err = tag;
 80112ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80112be:	e17c      	b.n	80115ba <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	2201      	movs	r2, #1
 80112c4:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80112c6:	68b9      	ldr	r1, [r7, #8]
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f7fc f970 	bl	800d5ae <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80112ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112d0:	f113 0f02 	cmn.w	r3, #2
 80112d4:	d14e      	bne.n	8011374 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d103      	bne.n	80112e8 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 80112e0:	f06f 0301 	mvn.w	r3, #1
 80112e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80112e6:	e168      	b.n	80115ba <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7ee ffc8 	bl	8000280 <strlen>
 80112f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d903      	bls.n	8011304 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80112fc:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011300:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011302:	e15a      	b.n	80115ba <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	f103 0108 	add.w	r1, r3, #8
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	889b      	ldrh	r3, [r3, #4]
 801130e:	029b      	lsls	r3, r3, #10
 8011310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801131a:	2300      	movs	r3, #0
 801131c:	633b      	str	r3, [r7, #48]	@ 0x30
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	889b      	ldrh	r3, [r3, #4]
 8011322:	029a      	lsls	r2, r3, #10
 8011324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011326:	4313      	orrs	r3, r2
 8011328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801132c:	637b      	str	r3, [r7, #52]	@ 0x34
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	889b      	ldrh	r3, [r3, #4]
 8011336:	029b      	lsls	r3, r3, #10
 8011338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801133c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011342:	2300      	movs	r3, #0
 8011344:	643b      	str	r3, [r7, #64]	@ 0x40
 8011346:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801134a:	2303      	movs	r3, #3
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f7ff fadf 	bl	8010910 <lfs_dir_commit>
 8011352:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8011354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011356:	f113 0f1c 	cmn.w	r3, #28
 801135a:	d001      	beq.n	8011360 <lfs_file_opencfg_+0x11c>
 801135c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801135e:	e001      	b.n	8011364 <lfs_file_opencfg_+0x120>
 8011360:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011364:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8011366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011368:	2b00      	cmp	r3, #0
 801136a:	f040 8125 	bne.w	80115b8 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801136e:	4b9a      	ldr	r3, [pc, #616]	@ (80115d8 <lfs_file_opencfg_+0x394>)
 8011370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011372:	e044      	b.n	80113fe <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801137a:	2b00      	cmp	r3, #0
 801137c:	d003      	beq.n	8011386 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 801137e:	f06f 0310 	mvn.w	r3, #16
 8011382:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011384:	e119      	b.n	80115ba <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8011386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011388:	4618      	mov	r0, r3
 801138a:	f7fb febb 	bl	800d104 <lfs_tag_type3>
 801138e:	4603      	mov	r3, r0
 8011390:	2b01      	cmp	r3, #1
 8011392:	d003      	beq.n	801139c <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8011394:	f06f 0314 	mvn.w	r3, #20
 8011398:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 801139a:	e10e      	b.n	80115ba <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00e      	beq.n	80113c4 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	889b      	ldrh	r3, [r3, #4]
 80113aa:	029b      	lsls	r3, r3, #10
 80113ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80113b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80113b4:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80113c2:	e01c      	b.n	80113fe <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	889b      	ldrh	r3, [r3, #4]
 80113ce:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80113d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80113d4:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80113dc:	9200      	str	r2, [sp, #0]
 80113de:	4a7f      	ldr	r2, [pc, #508]	@ (80115dc <lfs_file_opencfg_+0x398>)
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f7fc fb35 	bl	800da50 <lfs_dir_get>
 80113e6:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80113e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	da02      	bge.n	80113f4 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80113ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80113f2:	e0e2      	b.n	80115ba <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	3328      	adds	r3, #40	@ 0x28
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fb fff9 	bl	800d3f0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80113fe:	2300      	movs	r3, #0
 8011400:	657b      	str	r3, [r7, #84]	@ 0x54
 8011402:	e063      	b.n	80114cc <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011408:	f003 0301 	and.w	r3, r3, #1
 801140c:	2b00      	cmp	r3, #0
 801140e:	d03c      	beq.n	801148a <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801141a:	6859      	ldr	r1, [r3, #4]
 801141c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801141e:	4613      	mov	r3, r2
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	4413      	add	r3, r2
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	440b      	add	r3, r1
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801142e:	051a      	lsls	r2, r3, #20
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	889b      	ldrh	r3, [r3, #4]
 8011434:	029b      	lsls	r3, r3, #10
 8011436:	ea42 0103 	orr.w	r1, r2, r3
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801143e:	6858      	ldr	r0, [r3, #4]
 8011440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011442:	4613      	mov	r3, r2
 8011444:	005b      	lsls	r3, r3, #1
 8011446:	4413      	add	r3, r2
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	4403      	add	r3, r0
 801144c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801144e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011456:	6859      	ldr	r1, [r3, #4]
 8011458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801145a:	4613      	mov	r3, r2
 801145c:	005b      	lsls	r3, r3, #1
 801145e:	4413      	add	r3, r2
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	4603      	mov	r3, r0
 801146a:	4a5d      	ldr	r2, [pc, #372]	@ (80115e0 <lfs_file_opencfg_+0x39c>)
 801146c:	4621      	mov	r1, r4
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7fc faee 	bl	800da50 <lfs_dir_get>
 8011474:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8011476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011478:	2b00      	cmp	r3, #0
 801147a:	da06      	bge.n	801148a <lfs_file_opencfg_+0x246>
 801147c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801147e:	f113 0f02 	cmn.w	r3, #2
 8011482:	d002      	beq.n	801148a <lfs_file_opencfg_+0x246>
                err = res;
 8011484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011486:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011488:	e097      	b.n	80115ba <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801148e:	f003 0302 	and.w	r3, r3, #2
 8011492:	2b00      	cmp	r3, #0
 8011494:	d017      	beq.n	80114c6 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801149a:	6859      	ldr	r1, [r3, #4]
 801149c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801149e:	4613      	mov	r3, r2
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	4413      	add	r3, r2
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	440b      	add	r3, r1
 80114a8:	689a      	ldr	r2, [r3, #8]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d903      	bls.n	80114ba <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 80114b2:	f06f 031b 	mvn.w	r3, #27
 80114b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80114b8:	e07f      	b.n	80115ba <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80114c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114c8:	3301      	adds	r3, #1
 80114ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d395      	bcc.n	8011404 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d005      	beq.n	80114ee <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80114ec:	e010      	b.n	8011510 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80114f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fb f95b 	bl	800c7b0 <lfs_malloc>
 80114fa:	4602      	mov	r2, r0
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011504:	2b00      	cmp	r3, #0
 8011506:	d103      	bne.n	8011510 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8011508:	f06f 030b 	mvn.w	r3, #11
 801150c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 801150e:	e054      	b.n	80115ba <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	3340      	adds	r3, #64	@ 0x40
 8011514:	4619      	mov	r1, r3
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f7fb f970 	bl	800c7fc <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801151c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801151e:	4618      	mov	r0, r3
 8011520:	f7fb fdf0 	bl	800d104 <lfs_tag_type3>
 8011524:	4603      	mov	r3, r0
 8011526:	461a      	mov	r2, r3
 8011528:	f240 2301 	movw	r3, #513	@ 0x201
 801152c:	429a      	cmp	r2, r3
 801152e:	d141      	bne.n	80115b4 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	f06f 0201 	mvn.w	r2, #1
 8011536:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8011538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801153a:	4618      	mov	r0, r3
 801153c:	f7fb fe1c 	bl	800d178 <lfs_tag_size>
 8011540:	4602      	mov	r2, r0
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801154a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2200      	movs	r2, #0
 801155e:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801156e:	2b00      	cmp	r3, #0
 8011570:	d020      	beq.n	80115b4 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	889b      	ldrh	r3, [r3, #4]
 801157c:	029c      	lsls	r4, r3, #10
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011582:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb f873 	bl	800c672 <lfs_min>
 801158c:	4603      	mov	r3, r0
 801158e:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011590:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	4613      	mov	r3, r2
 801159c:	4a0f      	ldr	r2, [pc, #60]	@ (80115dc <lfs_file_opencfg_+0x398>)
 801159e:	4629      	mov	r1, r5
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f7fc fa55 	bl	800da50 <lfs_dir_get>
 80115a6:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 80115a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	da02      	bge.n	80115b4 <lfs_file_opencfg_+0x370>
                err = res;
 80115ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80115b2:	e002      	b.n	80115ba <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	e00b      	b.n	80115d0 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 80115b8:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 80115c6:	68b9      	ldr	r1, [r7, #8]
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f000 f823 	bl	8011614 <lfs_file_close_>
    return err;
 80115ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3760      	adds	r7, #96	@ 0x60
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bdb0      	pop	{r4, r5, r7, pc}
 80115d8:	20100000 	.word	0x20100000
 80115dc:	700ffc00 	.word	0x700ffc00
 80115e0:	7ffffc00 	.word	0x7ffffc00

080115e4 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af02      	add	r7, sp, #8
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
 80115f0:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80115f2:	4b07      	ldr	r3, [pc, #28]	@ (8011610 <lfs_file_open_+0x2c>)
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	68b9      	ldr	r1, [r7, #8]
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f7ff fe21 	bl	8011244 <lfs_file_opencfg_>
 8011602:	6178      	str	r0, [r7, #20]
    return err;
 8011604:	697b      	ldr	r3, [r7, #20]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	080294bc 	.word	0x080294bc

08011614 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 801161e:	6839      	ldr	r1, [r7, #0]
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 f9e5 	bl	80119f0 <lfs_file_sync_>
 8011626:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7fb ff9d 	bl	800d56a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d104      	bne.n	8011644 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801163e:	4618      	mov	r0, r3
 8011640:	f7fb f8c2 	bl	800c7c8 <lfs_free>
    }

    return err;
 8011644:	68fb      	ldr	r3, [r7, #12]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011650:	b590      	push	{r4, r7, lr}
 8011652:	b08d      	sub	sp, #52	@ 0x34
 8011654:	af06      	add	r7, sp, #24
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801165a:	f107 030c 	add.w	r3, r7, #12
 801165e:	4619      	mov	r1, r3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f7fc f877 	bl	800d754 <lfs_alloc>
 8011666:	6138      	str	r0, [r7, #16]
        if (err) {
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d001      	beq.n	8011672 <lfs_file_relocate+0x22>
            return err;
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	e0bb      	b.n	80117ea <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	4619      	mov	r1, r3
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7fb fc16 	bl	800cea8 <lfs_bd_erase>
 801167c:	6138      	str	r0, [r7, #16]
        if (err) {
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d006      	beq.n	8011692 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801168a:	f000 809b 	beq.w	80117c4 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	e0ab      	b.n	80117ea <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011692:	2300      	movs	r3, #0
 8011694:	617b      	str	r3, [r7, #20]
 8011696:	e069      	b.n	801176c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801169c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d027      	beq.n	80116f4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	f103 0008 	add.w	r0, r3, #8
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	889b      	ldrh	r3, [r3, #4]
 80116bc:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80116be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80116c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116c6:	2101      	movs	r1, #1
 80116c8:	9105      	str	r1, [sp, #20]
 80116ca:	f107 010b 	add.w	r1, r7, #11
 80116ce:	9104      	str	r1, [sp, #16]
 80116d0:	6979      	ldr	r1, [r7, #20]
 80116d2:	9103      	str	r1, [sp, #12]
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	4b47      	ldr	r3, [pc, #284]	@ (80117f4 <lfs_file_relocate+0x1a4>)
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	9200      	str	r2, [sp, #0]
 80116dc:	4623      	mov	r3, r4
 80116de:	2200      	movs	r2, #0
 80116e0:	4601      	mov	r1, r0
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7fc f9cf 	bl	800da86 <lfs_dir_getread>
 80116e8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d01e      	beq.n	801172e <lfs_file_relocate+0xde>
                    return err;
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	e07a      	b.n	80117ea <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 80116fa:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	1ad4      	subs	r4, r2, r3
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011708:	2201      	movs	r2, #1
 801170a:	9203      	str	r2, [sp, #12]
 801170c:	f107 020b 	add.w	r2, r7, #11
 8011710:	9202      	str	r2, [sp, #8]
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	9201      	str	r2, [sp, #4]
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	4623      	mov	r3, r4
 801171a:	4602      	mov	r2, r0
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7fb f883 	bl	800c828 <lfs_bd_read>
 8011722:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <lfs_file_relocate+0xde>
                    return err;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	e05d      	b.n	80117ea <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f103 0110 	add.w	r1, r3, #16
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2201      	movs	r2, #1
 801173a:	9203      	str	r2, [sp, #12]
 801173c:	f107 020b 	add.w	r2, r7, #11
 8011740:	9202      	str	r2, [sp, #8]
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	9201      	str	r2, [sp, #4]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	2301      	movs	r3, #1
 801174a:	4602      	mov	r2, r0
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7fb fafd 	bl	800cd4c <lfs_bd_prog>
 8011752:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d005      	beq.n	8011766 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011760:	d032      	beq.n	80117c8 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	e041      	b.n	80117ea <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	3301      	adds	r3, #1
 801176a:	617b      	str	r3, [r7, #20]
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011770:	697a      	ldr	r2, [r7, #20]
 8011772:	429a      	cmp	r2, r3
 8011774:	d390      	bcc.n	8011698 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	69d9      	ldr	r1, [r3, #28]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011784:	461a      	mov	r2, r3
 8011786:	f011 fc48 	bl	802301a <memcpy>
        file->cache.block = lfs->pcache.block;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	691a      	ldr	r2, [r3, #16]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	695a      	ldr	r2, [r3, #20]
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	699a      	ldr	r2, [r3, #24]
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	3310      	adds	r3, #16
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7fb f827 	bl	800c7fc <lfs_cache_zero>

        file->block = nblock;
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 80117c0:	2300      	movs	r3, #0
 80117c2:	e012      	b.n	80117ea <lfs_file_relocate+0x19a>
                goto relocate;
 80117c4:	bf00      	nop
 80117c6:	e000      	b.n	80117ca <lfs_file_relocate+0x17a>
                    goto relocate;
 80117c8:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	4a0a      	ldr	r2, [pc, #40]	@ (80117f8 <lfs_file_relocate+0x1a8>)
 80117ce:	9200      	str	r2, [sp, #0]
 80117d0:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 80117d4:	4909      	ldr	r1, [pc, #36]	@ (80117fc <lfs_file_relocate+0x1ac>)
 80117d6:	480a      	ldr	r0, [pc, #40]	@ (8011800 <lfs_file_relocate+0x1b0>)
 80117d8:	f011 fa0e 	bl	8022bf8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	3310      	adds	r3, #16
 80117e0:	4619      	mov	r1, r3
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7fa fffb 	bl	800c7de <lfs_cache_drop>
    while (true) {
 80117e8:	e737      	b.n	801165a <lfs_file_relocate+0xa>
    }
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	371c      	adds	r7, #28
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd90      	pop	{r4, r7, pc}
 80117f2:	bf00      	nop
 80117f4:	fff7fc00 	.word	0xfff7fc00
 80117f8:	08025d1c 	.word	0x08025d1c
 80117fc:	08025bf4 	.word	0x08025bf4
 8011800:	08025d9c 	.word	0x08025d9c

08011804 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7fb ff05 	bl	800d626 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff ff16 	bl	8011650 <lfs_file_relocate>
 8011824:	60f8      	str	r0, [r7, #12]
    if (err) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d001      	beq.n	8011830 <lfs_file_outline+0x2c>
        return err;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	e006      	b.n	801183e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011834:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 801183c:	2300      	movs	r3, #0
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b09f      	sub	sp, #124	@ 0x7c
 801184c:	af02      	add	r7, sp, #8
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801185a:	2b00      	cmp	r3, #0
 801185c:	d011      	beq.n	8011882 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011866:	2b00      	cmp	r3, #0
 8011868:	d105      	bne.n	8011876 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	3340      	adds	r3, #64	@ 0x40
 801186e:	4619      	mov	r1, r3
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7fa ffb4 	bl	800c7de <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801187a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801188a:	2b00      	cmp	r3, #0
 801188c:	f000 80a4 	beq.w	80119d8 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011894:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801189a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d176      	bne.n	8011990 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80118a2:	f107 030c 	add.w	r3, r7, #12
 80118a6:	2254      	movs	r2, #84	@ 0x54
 80118a8:	2100      	movs	r1, #0
 80118aa:	4618      	mov	r0, r3
 80118ac:	f011 fad4 	bl	8022e58 <memset>
                .ctz.head = file->ctz.head,
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80118b4:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80118ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80118bc:	2301      	movs	r3, #1
 80118be:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 80118c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80118cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4619      	mov	r1, r3
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f7fa ff81 	bl	800c7de <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80118dc:	e02b      	b.n	8011936 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80118de:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80118e2:	f107 010c 	add.w	r1, r7, #12
 80118e6:	2301      	movs	r3, #1
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f921 	bl	8011b30 <lfs_file_flushedread>
 80118ee:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80118f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	da01      	bge.n	80118fa <lfs_file_flush+0xb2>
                    return res;
 80118f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118f8:	e06f      	b.n	80119da <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80118fa:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80118fe:	2301      	movs	r3, #1
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 fa1c 	bl	8011d40 <lfs_file_flushedwrite>
 8011908:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 801190a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801190c:	2b00      	cmp	r3, #0
 801190e:	da01      	bge.n	8011914 <lfs_file_flush+0xcc>
                    return res;
 8011910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011912:	e062      	b.n	80119da <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801191c:	d00b      	beq.n	8011936 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 801191e:	f107 030c 	add.w	r3, r7, #12
 8011922:	3340      	adds	r3, #64	@ 0x40
 8011924:	4619      	mov	r1, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7fa ff59 	bl	800c7de <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7fa ff54 	bl	800c7de <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193e:	429a      	cmp	r2, r3
 8011940:	d3cd      	bcc.n	80118de <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	2301      	movs	r3, #1
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7fb f94f 	bl	800cbf0 <lfs_bd_flush>
 8011952:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011956:	2b00      	cmp	r3, #0
 8011958:	d026      	beq.n	80119a8 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 801195a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801195c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011960:	d001      	beq.n	8011966 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8011962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011964:	e039      	b.n	80119da <lfs_file_flush+0x192>
                        goto relocate;
 8011966:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801196c:	4a1d      	ldr	r2, [pc, #116]	@ (80119e4 <lfs_file_flush+0x19c>)
 801196e:	9200      	str	r2, [sp, #0]
 8011970:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8011974:	491c      	ldr	r1, [pc, #112]	@ (80119e8 <lfs_file_flush+0x1a0>)
 8011976:	481d      	ldr	r0, [pc, #116]	@ (80119ec <lfs_file_flush+0x1a4>)
 8011978:	f011 f93e 	bl	8022bf8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff fe66 	bl	8011650 <lfs_file_relocate>
 8011984:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011988:	2b00      	cmp	r3, #0
 801198a:	d0da      	beq.n	8011942 <lfs_file_flush+0xfa>
                    return err;
 801198c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801198e:	e024      	b.n	80119da <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011998:	4619      	mov	r1, r3
 801199a:	4610      	mov	r0, r2
 801199c:	f7fa fe59 	bl	800c652 <lfs_max>
 80119a0:	4602      	mov	r2, r0
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80119a6:	e000      	b.n	80119aa <lfs_file_flush+0x162>
                break;
 80119a8:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80119d6:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80119d8:	2300      	movs	r3, #0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3774      	adds	r7, #116	@ 0x74
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd90      	pop	{r4, r7, pc}
 80119e2:	bf00      	nop
 80119e4:	08025d1c 	.word	0x08025d1c
 80119e8:	08025bf4 	.word	0x08025bf4
 80119ec:	08025d9c 	.word	0x08025d9c

080119f0 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b090      	sub	sp, #64	@ 0x40
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e08e      	b.n	8011b28 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7ff ff1b 	bl	8011848 <lfs_file_flush>
 8011a12:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8011a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d007      	beq.n	8011a2a <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a1e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8011a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a28:	e07e      	b.n	8011b28 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d077      	beq.n	8011b26 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	3308      	adds	r3, #8
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fb fa7b 	bl	800cf36 <lfs_pair_isnull>
 8011a40:	4603      	mov	r3, r0
 8011a42:	f083 0301 	eor.w	r3, r3, #1
 8011a46:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d06c      	beq.n	8011b26 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10d      	bne.n	8011a74 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f103 0110 	add.w	r1, r3, #16
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	2300      	movs	r3, #0
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7fb f93e 	bl	800cce4 <lfs_bd_sync>
 8011a68:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <lfs_file_sync_+0x84>
                return err;
 8011a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a72:	e059      	b.n	8011b28 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d009      	beq.n	8011a94 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8011a80:	f240 2301 	movw	r3, #513	@ 0x201
 8011a84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a92:	e014      	b.n	8011abe <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8011a94:	f240 2302 	movw	r3, #514	@ 0x202
 8011a98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011aa0:	3228      	adds	r2, #40	@ 0x28
 8011aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011aa6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8011aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fb fcb6 	bl	800d420 <lfs_ctz_tole32>
            buffer = &ctz;
 8011ab4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8011aba:	2308      	movs	r3, #8
 8011abc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	f103 0108 	add.w	r1, r3, #8
 8011ac4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ac6:	051a      	lsls	r2, r3, #20
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	889b      	ldrh	r3, [r3, #4]
 8011acc:	029b      	lsls	r3, r3, #10
 8011ace:	431a      	orrs	r2, r3
 8011ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	61bb      	str	r3, [r7, #24]
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad8:	61fb      	str	r3, [r7, #28]
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	889b      	ldrh	r3, [r3, #4]
 8011ade:	029a      	lsls	r2, r3, #10
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8011aec:	623b      	str	r3, [r7, #32]
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011af6:	f107 0218 	add.w	r2, r7, #24
 8011afa:	2302      	movs	r3, #2
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f7fe ff07 	bl	8010910 <lfs_dir_commit>
 8011b02:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8011b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d007      	beq.n	8011b1a <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8011b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b18:	e006      	b.n	8011b28 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3740      	adds	r7, #64	@ 0x40
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8011b30:	b5b0      	push	{r4, r5, r7, lr}
 8011b32:	b090      	sub	sp, #64	@ 0x40
 8011b34:	af06      	add	r7, sp, #24
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
 8011b3c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d301      	bcc.n	8011b56 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8011b52:	2300      	movs	r3, #0
 8011b54:	e0b7      	b.n	8011cc6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b5e:	1ad3      	subs	r3, r2, r3
 8011b60:	4619      	mov	r1, r3
 8011b62:	6838      	ldr	r0, [r7, #0]
 8011b64:	f7fa fd85 	bl	800c672 <lfs_min>
 8011b68:	6038      	str	r0, [r7, #0]
    nsize = size;
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8011b6e:	e0a5      	b.n	8011cbc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d006      	beq.n	8011b8a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d130      	bne.n	8011bec <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d11c      	bne.n	8011bd0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011ba8:	68b9      	ldr	r1, [r7, #8]
 8011baa:	3138      	adds	r1, #56	@ 0x38
 8011bac:	68b8      	ldr	r0, [r7, #8]
 8011bae:	303c      	adds	r0, #60	@ 0x3c
 8011bb0:	9003      	str	r0, [sp, #12]
 8011bb2:	9102      	str	r1, [sp, #8]
 8011bb4:	9201      	str	r2, [sp, #4]
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	462b      	mov	r3, r5
 8011bba:	4622      	mov	r2, r4
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	68f8      	ldr	r0, [r7, #12]
 8011bc0:	f7ff f950 	bl	8010e64 <lfs_ctz_find>
 8011bc4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d009      	beq.n	8011be0 <lfs_file_flushedread+0xb0>
                    return err;
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	e07a      	b.n	8011cc6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	f06f 0201 	mvn.w	r2, #1
 8011bd6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011be4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	6a38      	ldr	r0, [r7, #32]
 8011bfc:	f7fa fd39 	bl	800c672 <lfs_min>
 8011c00:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d026      	beq.n	8011c5c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	f103 0408 	add.w	r4, r3, #8
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	889b      	ldrh	r3, [r3, #4]
 8011c24:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8011c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c2e:	68b9      	ldr	r1, [r7, #8]
 8011c30:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8011c32:	69b8      	ldr	r0, [r7, #24]
 8011c34:	9005      	str	r0, [sp, #20]
 8011c36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c38:	9004      	str	r0, [sp, #16]
 8011c3a:	9103      	str	r1, [sp, #12]
 8011c3c:	9302      	str	r3, [sp, #8]
 8011c3e:	4b24      	ldr	r3, [pc, #144]	@ (8011cd0 <lfs_file_flushedread+0x1a0>)
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	9200      	str	r2, [sp, #0]
 8011c44:	462b      	mov	r3, r5
 8011c46:	2200      	movs	r2, #0
 8011c48:	4621      	mov	r1, r4
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	f7fb ff1b 	bl	800da86 <lfs_dir_getread>
 8011c50:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d01d      	beq.n	8011c94 <lfs_file_flushedread+0x164>
                return err;
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	e034      	b.n	8011cc6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011c66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011c70:	69b9      	ldr	r1, [r7, #24]
 8011c72:	9103      	str	r1, [sp, #12]
 8011c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011c76:	9102      	str	r1, [sp, #8]
 8011c78:	9201      	str	r2, [sp, #4]
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	4623      	mov	r3, r4
 8011c7e:	4602      	mov	r2, r0
 8011c80:	2100      	movs	r1, #0
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f7fa fdd0 	bl	800c828 <lfs_bd_read>
 8011c88:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <lfs_file_flushedread+0x164>
                return err;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	e018      	b.n	8011cc6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	441a      	add	r2, r3
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	441a      	add	r2, r3
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8011cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8011cb4:	6a3a      	ldr	r2, [r7, #32]
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8011cbc:	6a3b      	ldr	r3, [r7, #32]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f47f af56 	bne.w	8011b70 <lfs_file_flushedread+0x40>
    }

    return size;
 8011cc4:	683b      	ldr	r3, [r7, #0]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3728      	adds	r7, #40	@ 0x28
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	fff7fc00 	.word	0xfff7fc00

08011cd4 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b086      	sub	sp, #24
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
 8011ce0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d106      	bne.n	8011cfc <lfs_file_read_+0x28>
 8011cee:	4b11      	ldr	r3, [pc, #68]	@ (8011d34 <lfs_file_read_+0x60>)
 8011cf0:	4a11      	ldr	r2, [pc, #68]	@ (8011d38 <lfs_file_read_+0x64>)
 8011cf2:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 8011cf6:	4811      	ldr	r0, [pc, #68]	@ (8011d3c <lfs_file_read_+0x68>)
 8011cf8:	f010 fbe2 	bl	80224c0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d009      	beq.n	8011d1c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8011d08:	68b9      	ldr	r1, [r7, #8]
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f7ff fd9c 	bl	8011848 <lfs_file_flush>
 8011d10:	6178      	str	r0, [r7, #20]
        if (err) {
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <lfs_file_read_+0x48>
            return err;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	e006      	b.n	8011d2a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	68b9      	ldr	r1, [r7, #8]
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f7ff ff04 	bl	8011b30 <lfs_file_flushedread>
 8011d28:	4603      	mov	r3, r0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3718      	adds	r7, #24
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	08025f44 	.word	0x08025f44
 8011d38:	080294c8 	.word	0x080294c8
 8011d3c:	08025bf4 	.word	0x08025bf4

08011d40 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8011d40:	b5b0      	push	{r4, r5, r7, lr}
 8011d42:	b090      	sub	sp, #64	@ 0x40
 8011d44:	af04      	add	r7, sp, #16
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
 8011d4c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f000 80f4 	beq.w	8011f4c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6a:	441a      	add	r2, r3
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d70:	4619      	mov	r1, r3
 8011d72:	4610      	mov	r0, r2
 8011d74:	f7fa fc6d 	bl	800c652 <lfs_max>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	f240 80e4 	bls.w	8011f4c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8011d84:	68b9      	ldr	r1, [r7, #8]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f7ff fd3c 	bl	8011804 <lfs_file_outline>
 8011d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f000 80db 	beq.w	8011f4c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d9a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8011da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da4:	e0d7      	b.n	8011f56 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d006      	beq.n	8011dc0 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d16d      	bne.n	8011e9c <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d159      	bne.n	8011e80 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d12f      	bne.n	8011e38 <lfs_file_flushedwrite+0xf8>
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d02b      	beq.n	8011e38 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011df2:	3a01      	subs	r2, #1
 8011df4:	68b9      	ldr	r1, [r7, #8]
 8011df6:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8011df8:	2000      	movs	r0, #0
 8011dfa:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011dfc:	f107 0010 	add.w	r0, r7, #16
 8011e00:	9003      	str	r0, [sp, #12]
 8011e02:	9102      	str	r1, [sp, #8]
 8011e04:	9201      	str	r2, [sp, #4]
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	462b      	mov	r3, r5
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7ff f828 	bl	8010e64 <lfs_ctz_find>
 8011e14:	6238      	str	r0, [r7, #32]
                    if (err) {
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d007      	beq.n	8011e2c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8011e28:	6a3b      	ldr	r3, [r7, #32]
 8011e2a:	e094      	b.n	8011f56 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	3340      	adds	r3, #64	@ 0x40
 8011e30:	4619      	mov	r1, r3
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f7fa fce2 	bl	800c7fc <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f7fb fbf4 	bl	800d626 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8011e44:	68fc      	ldr	r4, [r7, #12]
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	3238      	adds	r2, #56	@ 0x38
 8011e52:	68b9      	ldr	r1, [r7, #8]
 8011e54:	313c      	adds	r1, #60	@ 0x3c
 8011e56:	9102      	str	r1, [sp, #8]
 8011e58:	9201      	str	r2, [sp, #4]
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	462b      	mov	r3, r5
 8011e5e:	4622      	mov	r2, r4
 8011e60:	4601      	mov	r1, r0
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f7ff f86a 	bl	8010f3c <lfs_ctz_extend>
 8011e68:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00f      	beq.n	8011e90 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e74:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	e06a      	b.n	8011f56 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	f06f 0201 	mvn.w	r2, #1
 8011e86:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011eac:	f7fa fbe1 	bl	800c672 <lfs_min>
 8011eb0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8011eb8:	68fc      	ldr	r4, [r7, #12]
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011ec2:	69b9      	ldr	r1, [r7, #24]
 8011ec4:	9103      	str	r1, [sp, #12]
 8011ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ec8:	9102      	str	r1, [sp, #8]
 8011eca:	9201      	str	r2, [sp, #4]
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	2301      	movs	r3, #1
 8011ed0:	4622      	mov	r2, r4
 8011ed2:	4601      	mov	r1, r0
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f7fa ff39 	bl	800cd4c <lfs_bd_prog>
 8011eda:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d01c      	beq.n	8011f1c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011ee8:	d007      	beq.n	8011efa <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	e02d      	b.n	8011f56 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8011efa:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8011efc:	68b9      	ldr	r1, [r7, #8]
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f7ff fba6 	bl	8011650 <lfs_file_relocate>
 8011f04:	6178      	str	r0, [r7, #20]
            if (err) {
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d0d2      	beq.n	8011eb2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	e01c      	b.n	8011f56 <lfs_file_flushedwrite+0x216>
            break;
 8011f1c:	bf00      	nop
            }
        }

        file->pos += diff;
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	441a      	add	r2, r3
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	441a      	add	r2, r3
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8011f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8011f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7fb fb6d 	bl	800d626 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8011f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f47f af29 	bne.w	8011da6 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8011f54:	683b      	ldr	r3, [r7, #0]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3730      	adds	r7, #48	@ 0x30
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011f60 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b08a      	sub	sp, #40	@ 0x28
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f72:	f003 0302 	and.w	r3, r3, #2
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <lfs_file_write_+0x28>
 8011f7a:	4b38      	ldr	r3, [pc, #224]	@ (801205c <lfs_file_write_+0xfc>)
 8011f7c:	4a38      	ldr	r2, [pc, #224]	@ (8012060 <lfs_file_write_+0x100>)
 8011f7e:	f640 6126 	movw	r1, #3622	@ 0xe26
 8011f82:	4838      	ldr	r0, [pc, #224]	@ (8012064 <lfs_file_write_+0x104>)
 8011f84:	f010 fa9c 	bl	80224c0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d009      	beq.n	8011fa8 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8011f94:	68b9      	ldr	r1, [r7, #8]
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f7ff fc56 	bl	8011848 <lfs_file_flush>
 8011f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d001      	beq.n	8011fa8 <lfs_file_write_+0x48>
            return err;
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa6:	e055      	b.n	8012054 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d009      	beq.n	8011fc8 <lfs_file_write_+0x68>
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d203      	bcs.n	8011fc8 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	441a      	add	r2, r3
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d902      	bls.n	8011fde <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8011fd8:	f06f 031a 	mvn.w	r3, #26
 8011fdc:	e03a      	b.n	8012054 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d121      	bne.n	801202e <lfs_file_write_+0xce>
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d91b      	bls.n	801202e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ffa:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8012004:	e00e      	b.n	8012024 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8012006:	2300      	movs	r3, #0
 8012008:	75fb      	strb	r3, [r7, #23]
 801200a:	f107 0217 	add.w	r2, r7, #23
 801200e:	2301      	movs	r3, #1
 8012010:	68b9      	ldr	r1, [r7, #8]
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f7ff fe94 	bl	8011d40 <lfs_file_flushedwrite>
 8012018:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	2b00      	cmp	r3, #0
 801201e:	da01      	bge.n	8012024 <lfs_file_write_+0xc4>
                return res;
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	e017      	b.n	8012054 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012028:	6a3a      	ldr	r2, [r7, #32]
 801202a:	429a      	cmp	r2, r3
 801202c:	d8eb      	bhi.n	8012006 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	68b9      	ldr	r1, [r7, #8]
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f7ff fe83 	bl	8011d40 <lfs_file_flushedwrite>
 801203a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	2b00      	cmp	r3, #0
 8012040:	da01      	bge.n	8012046 <lfs_file_write_+0xe6>
        return nsize;
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	e006      	b.n	8012054 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801204a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8012052:	69bb      	ldr	r3, [r7, #24]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3728      	adds	r7, #40	@ 0x28
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	08025f74 	.word	0x08025f74
 8012060:	080294d8 	.word	0x080294d8
 8012064:	08025bf4 	.word	0x08025bf4

08012068 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8012068:	b580      	push	{r7, lr}
 801206a:	b08c      	sub	sp, #48	@ 0x30
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
 8012074:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d102      	bne.n	8012088 <lfs_file_seek_+0x20>
        npos = off;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012086:	e025      	b.n	80120d4 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	2b01      	cmp	r3, #1
 801208c:	d10f      	bne.n	80120ae <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012092:	461a      	mov	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	4413      	add	r3, r2
 8012098:	2b00      	cmp	r3, #0
 801209a:	da02      	bge.n	80120a2 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 801209c:	f06f 0315 	mvn.w	r3, #21
 80120a0:	e067      	b.n	8012172 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4413      	add	r3, r2
 80120aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80120ac:	e012      	b.n	80120d4 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	2b02      	cmp	r3, #2
 80120b2:	d10f      	bne.n	80120d4 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 80120b4:	68b9      	ldr	r1, [r7, #8]
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 f86c 	bl	8012194 <lfs_file_size_>
 80120bc:	4602      	mov	r2, r0
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4413      	add	r3, r2
 80120c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 80120c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da02      	bge.n	80120d0 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 80120ca:	f06f 0315 	mvn.w	r3, #21
 80120ce:	e050      	b.n	8012172 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80120d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120da:	429a      	cmp	r2, r3
 80120dc:	d902      	bls.n	80120e4 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80120de:	f06f 0315 	mvn.w	r3, #21
 80120e2:	e046      	b.n	8012172 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d101      	bne.n	80120f2 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80120ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f0:	e03f      	b.n	8012172 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d12b      	bne.n	8012156 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012102:	61bb      	str	r3, [r7, #24]
 8012104:	f107 0318 	add.w	r3, r7, #24
 8012108:	4619      	mov	r1, r3
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	f7fe fe72 	bl	8010df4 <lfs_ctz_index>
 8012110:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8012112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012114:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8012116:	f107 0314 	add.w	r3, r7, #20
 801211a:	4619      	mov	r1, r3
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f7fe fe69 	bl	8010df4 <lfs_ctz_index>
 8012122:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8012124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012126:	6a3b      	ldr	r3, [r7, #32]
 8012128:	429a      	cmp	r2, r3
 801212a:	d114      	bne.n	8012156 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	429a      	cmp	r2, r3
 8012134:	d80f      	bhi.n	8012156 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801213e:	441a      	add	r2, r3
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	429a      	cmp	r2, r3
 8012144:	d907      	bls.n	8012156 <lfs_file_seek_+0xee>
            file->pos = npos;
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801214a:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 801214c:	697a      	ldr	r2, [r7, #20]
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8012152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012154:	e00d      	b.n	8012172 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8012156:	68b9      	ldr	r1, [r7, #8]
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f7ff fb75 	bl	8011848 <lfs_file_flush>
 801215e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d001      	beq.n	801216a <lfs_file_seek_+0x102>
        return err;
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	e003      	b.n	8012172 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801216e:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8012170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012172:	4618      	mov	r0, r3
 8012174:	3730      	adds	r7, #48	@ 0x30
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 801217a:	b480      	push	{r7}
 801217c:	b083      	sub	sp, #12
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
 8012182:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8012188:	4618      	mov	r0, r3
 801218a:	370c      	adds	r7, #12
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d009      	beq.n	80121be <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b2:	4619      	mov	r1, r3
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7fa fa4c 	bl	800c652 <lfs_max>
 80121ba:	4603      	mov	r3, r0
 80121bc:	e001      	b.n	80121c2 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}

080121ca <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80121ca:	b580      	push	{r7, lr}
 80121cc:	b08e      	sub	sp, #56	@ 0x38
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	60f8      	str	r0, [r7, #12]
 80121d2:	60b9      	str	r1, [r7, #8]
 80121d4:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80121d6:	f107 0208 	add.w	r2, r7, #8
 80121da:	f107 0114 	add.w	r1, r7, #20
 80121de:	2300      	movs	r3, #0
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7fc fe4d 	bl	800ee80 <lfs_dir_find>
 80121e6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 80121e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da01      	bge.n	80121f2 <lfs_stat_+0x28>
        return (int)tag;
 80121ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121f0:	e00c      	b.n	801220c <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 80121f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7fa ffaf 	bl	800d158 <lfs_tag_id>
 80121fa:	4603      	mov	r3, r0
 80121fc:	461a      	mov	r2, r3
 80121fe:	f107 0114 	add.w	r1, r7, #20
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f7fc fd77 	bl	800ecf8 <lfs_dir_getinfo>
 801220a:	4603      	mov	r3, r0
}
 801220c:	4618      	mov	r0, r3
 801220e:	3738      	adds	r7, #56	@ 0x38
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8012214:	b580      	push	{r7, lr}
 8012216:	b0a0      	sub	sp, #128	@ 0x80
 8012218:	af02      	add	r7, sp, #8
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f001 fe0c 	bl	8013e3c <lfs_fs_forceconsistency>
 8012224:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8012226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <lfs_remove_+0x1c>
        return err;
 801222c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801222e:	e0bc      	b.n	80123aa <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8012230:	463a      	mov	r2, r7
 8012232:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012236:	2300      	movs	r3, #0
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7fc fe21 	bl	800ee80 <lfs_dir_find>
 801223e:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8012240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012242:	2b00      	cmp	r3, #0
 8012244:	db09      	blt.n	801225a <lfs_remove_+0x46>
 8012246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012248:	4618      	mov	r0, r3
 801224a:	f7fa ff85 	bl	800d158 <lfs_tag_id>
 801224e:	4603      	mov	r3, r0
 8012250:	461a      	mov	r2, r3
 8012252:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012256:	429a      	cmp	r2, r3
 8012258:	d107      	bne.n	801226a <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801225a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801225c:	2b00      	cmp	r3, #0
 801225e:	da01      	bge.n	8012264 <lfs_remove_+0x50>
 8012260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012262:	e0a2      	b.n	80123aa <lfs_remove_+0x196>
 8012264:	f06f 0315 	mvn.w	r3, #21
 8012268:	e09f      	b.n	80123aa <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801226e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012270:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012272:	4618      	mov	r0, r3
 8012274:	f7fa ff46 	bl	800d104 <lfs_tag_type3>
 8012278:	4603      	mov	r3, r0
 801227a:	2b02      	cmp	r3, #2
 801227c:	d142      	bne.n	8012304 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801227e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012280:	4618      	mov	r0, r3
 8012282:	f7fa ff69 	bl	800d158 <lfs_tag_id>
 8012286:	4603      	mov	r3, r0
 8012288:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801228a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801228e:	f043 0308 	orr.w	r3, r3, #8
 8012292:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012296:	f107 020c 	add.w	r2, r7, #12
 801229a:	9200      	str	r2, [sp, #0]
 801229c:	4a45      	ldr	r2, [pc, #276]	@ (80123b4 <lfs_remove_+0x1a0>)
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7fb fbd6 	bl	800da50 <lfs_dir_get>
 80122a4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 80122a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	da01      	bge.n	80122b0 <lfs_remove_+0x9c>
            return (int)res;
 80122ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122ae:	e07c      	b.n	80123aa <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 80122b0:	f107 030c 	add.w	r3, r7, #12
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fa feb0 	bl	800d01a <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 80122ba:	f107 020c 	add.w	r2, r7, #12
 80122be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122c2:	3308      	adds	r3, #8
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7fc fcc8 	bl	800ec5c <lfs_dir_fetch>
 80122cc:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80122ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d001      	beq.n	80122d8 <lfs_remove_+0xc4>
            return err;
 80122d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122d6:	e068      	b.n	80123aa <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 80122d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80122dc:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80122de:	2101      	movs	r1, #1
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f001 fa89 	bl	80137f8 <lfs_fs_preporphans>
 80122e6:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80122e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d001      	beq.n	80122f2 <lfs_remove_+0xde>
            return err;
 80122ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80122f0:	e05b      	b.n	80123aa <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 80122f8:	2300      	movs	r3, #0
 80122fa:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012302:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8012304:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012306:	4618      	mov	r0, r3
 8012308:	f7fa ff26 	bl	800d158 <lfs_tag_id>
 801230c:	4603      	mov	r3, r0
 801230e:	029b      	lsls	r3, r3, #10
 8012310:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012314:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012318:	61fb      	str	r3, [r7, #28]
 801231a:	2300      	movs	r3, #0
 801231c:	623b      	str	r3, [r7, #32]
 801231e:	f107 021c 	add.w	r2, r7, #28
 8012322:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012326:	2301      	movs	r3, #1
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7fe faf1 	bl	8010910 <lfs_dir_commit>
 801232e:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8012330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012332:	2b00      	cmp	r3, #0
 8012334:	d004      	beq.n	8012340 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 8012336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 801233c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801233e:	e034      	b.n	80123aa <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8012340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012348:	4618      	mov	r0, r3
 801234a:	f7fa fedb 	bl	800d104 <lfs_tag_type3>
 801234e:	4603      	mov	r3, r0
 8012350:	2b02      	cmp	r3, #2
 8012352:	d129      	bne.n	80123a8 <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f001 fa4d 	bl	80137f8 <lfs_fs_preporphans>
 801235e:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012362:	2b00      	cmp	r3, #0
 8012364:	d001      	beq.n	801236a <lfs_remove_+0x156>
            return err;
 8012366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012368:	e01f      	b.n	80123aa <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801236a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801236e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012372:	3308      	adds	r3, #8
 8012374:	4619      	mov	r1, r3
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f001 f8f4 	bl	8013564 <lfs_fs_pred>
 801237c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 801237e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <lfs_remove_+0x174>
            return err;
 8012384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012386:	e010      	b.n	80123aa <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8012388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801238c:	f103 0208 	add.w	r2, r3, #8
 8012390:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012394:	4619      	mov	r1, r3
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7fd f90c 	bl	800f5b4 <lfs_dir_drop>
 801239c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 801239e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <lfs_remove_+0x194>
            return err;
 80123a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123a6:	e000      	b.n	80123aa <lfs_remove_+0x196>
        }
    }

    return 0;
 80123a8:	2300      	movs	r3, #0
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3778      	adds	r7, #120	@ 0x78
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	700ffc00 	.word	0x700ffc00

080123b8 <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 80123b8:	b590      	push	{r4, r7, lr}
 80123ba:	b0c3      	sub	sp, #268	@ 0x10c
 80123bc:	af02      	add	r7, sp, #8
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	f001 fd39 	bl	8013e3c <lfs_fs_forceconsistency>
 80123ca:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 80123ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d002      	beq.n	80123dc <lfs_rename_+0x24>
        return err;
 80123d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80123da:	e203      	b.n	80127e4 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80123dc:	f107 0208 	add.w	r2, r7, #8
 80123e0:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80123e4:	2300      	movs	r3, #0
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f7fc fd4a 	bl	800ee80 <lfs_dir_find>
 80123ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80123f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	db0a      	blt.n	801240e <lfs_rename_+0x56>
 80123f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fa feab 	bl	800d158 <lfs_tag_id>
 8012402:	4603      	mov	r3, r0
 8012404:	461a      	mov	r2, r3
 8012406:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801240a:	429a      	cmp	r2, r3
 801240c:	d109      	bne.n	8012422 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012412:	2b00      	cmp	r3, #0
 8012414:	da02      	bge.n	801241c <lfs_rename_+0x64>
 8012416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801241a:	e1e3      	b.n	80127e4 <lfs_rename_+0x42c>
 801241c:	f06f 0315 	mvn.w	r3, #21
 8012420:	e1e0      	b.n	80127e4 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8012422:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 8012426:	1d3a      	adds	r2, r7, #4
 8012428:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7fc fd27 	bl	800ee80 <lfs_dir_find>
 8012432:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8012436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801243a:	2b00      	cmp	r3, #0
 801243c:	db0a      	blt.n	8012454 <lfs_rename_+0x9c>
 801243e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012442:	4618      	mov	r0, r3
 8012444:	f7fa fe88 	bl	800d158 <lfs_tag_id>
 8012448:	4603      	mov	r3, r0
 801244a:	461a      	mov	r2, r3
 801244c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012450:	429a      	cmp	r2, r3
 8012452:	d114      	bne.n	801247e <lfs_rename_+0xc6>
 8012454:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012458:	f113 0f02 	cmn.w	r3, #2
 801245c:	d105      	bne.n	801246a <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801245e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012462:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012466:	4293      	cmp	r3, r2
 8012468:	d109      	bne.n	801247e <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801246a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801246e:	2b00      	cmp	r3, #0
 8012470:	da02      	bge.n	8012478 <lfs_rename_+0xc0>
 8012472:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012476:	e1b5      	b.n	80127e4 <lfs_rename_+0x42c>
 8012478:	f06f 0315 	mvn.w	r3, #21
 801247c:	e1b2      	b.n	80127e4 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 801247e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012482:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012486:	4611      	mov	r1, r2
 8012488:	4618      	mov	r0, r3
 801248a:	f7fa fd6f 	bl	800cf6c <lfs_pair_cmp>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	bf0c      	ite	eq
 8012494:	2301      	moveq	r3, #1
 8012496:	2300      	movne	r3, #0
 8012498:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 801249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fa fe59 	bl	800d158 <lfs_tag_id>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 80124b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80124b6:	f113 0f02 	cmn.w	r3, #2
 80124ba:	d120      	bne.n	80124fe <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7ed fede 	bl	8000280 <strlen>
 80124c4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124cc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d902      	bls.n	80124da <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 80124d4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80124d8:	e184      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 80124da:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f000 8090 	beq.w	8012604 <lfs_rename_+0x24c>
 80124e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80124e8:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 80124ec:	429a      	cmp	r2, r3
 80124ee:	f0c0 8089 	bcc.w	8012604 <lfs_rename_+0x24c>
            newoldid += 1;
 80124f2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80124f6:	3301      	adds	r3, #1
 80124f8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 80124fc:	e082      	b.n	8012604 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80124fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012502:	4618      	mov	r0, r3
 8012504:	f7fa fdfe 	bl	800d104 <lfs_tag_type3>
 8012508:	4603      	mov	r3, r0
 801250a:	461c      	mov	r4, r3
 801250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012510:	4618      	mov	r0, r3
 8012512:	f7fa fdf7 	bl	800d104 <lfs_tag_type3>
 8012516:	4603      	mov	r3, r0
 8012518:	429c      	cmp	r4, r3
 801251a:	d00d      	beq.n	8012538 <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 801251c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012520:	4618      	mov	r0, r3
 8012522:	f7fa fdef 	bl	800d104 <lfs_tag_type3>
 8012526:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8012528:	2b02      	cmp	r3, #2
 801252a:	d102      	bne.n	8012532 <lfs_rename_+0x17a>
 801252c:	f06f 0314 	mvn.w	r3, #20
 8012530:	e158      	b.n	80127e4 <lfs_rename_+0x42c>
 8012532:	f06f 0313 	mvn.w	r3, #19
 8012536:	e155      	b.n	80127e4 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8012538:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 801253c:	2b00      	cmp	r3, #0
 801253e:	d007      	beq.n	8012550 <lfs_rename_+0x198>
 8012540:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012544:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012548:	429a      	cmp	r2, r3
 801254a:	d101      	bne.n	8012550 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 801254c:	2300      	movs	r3, #0
 801254e:	e149      	b.n	80127e4 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012550:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012554:	4618      	mov	r0, r3
 8012556:	f7fa fdd5 	bl	800d104 <lfs_tag_type3>
 801255a:	4603      	mov	r3, r0
 801255c:	2b02      	cmp	r3, #2
 801255e:	d151      	bne.n	8012604 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8012560:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012564:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8012566:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801256a:	f043 0308 	orr.w	r3, r3, #8
 801256e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012572:	f107 0220 	add.w	r2, r7, #32
 8012576:	9200      	str	r2, [sp, #0]
 8012578:	4a9d      	ldr	r2, [pc, #628]	@ (80127f0 <lfs_rename_+0x438>)
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f7fb fa68 	bl	800da50 <lfs_dir_get>
 8012580:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8012584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012588:	2b00      	cmp	r3, #0
 801258a:	da02      	bge.n	8012592 <lfs_rename_+0x1da>
            return (int)res;
 801258c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012590:	e128      	b.n	80127e4 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 8012592:	f107 0320 	add.w	r3, r7, #32
 8012596:	4618      	mov	r0, r3
 8012598:	f7fa fd3f 	bl	800d01a <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801259c:	f107 0220 	add.w	r2, r7, #32
 80125a0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80125a4:	3308      	adds	r3, #8
 80125a6:	4619      	mov	r1, r3
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f7fc fb57 	bl	800ec5c <lfs_dir_fetch>
 80125ae:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80125b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d002      	beq.n	80125c0 <lfs_rename_+0x208>
            return err;
 80125ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80125be:	e111      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 80125c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d103      	bne.n	80125d0 <lfs_rename_+0x218>
 80125c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d002      	beq.n	80125d6 <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 80125d0:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 80125d4:	e106      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80125d6:	2101      	movs	r1, #1
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f001 f90d 	bl	80137f8 <lfs_fs_preporphans>
 80125de:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80125e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <lfs_rename_+0x238>
            return err;
 80125ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80125ee:	e0f9      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 80125f0:	2300      	movs	r3, #0
 80125f2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8012602:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8012604:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012608:	f083 0301 	eor.w	r3, r3, #1
 801260c:	b2db      	uxtb	r3, r3
 801260e:	2b00      	cmp	r3, #0
 8012610:	d007      	beq.n	8012622 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8012612:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8012616:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 801261a:	4619      	mov	r1, r3
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f001 f93b 	bl	8013898 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8012622:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012626:	f113 0f02 	cmn.w	r3, #2
 801262a:	d007      	beq.n	801263c <lfs_rename_+0x284>
 801262c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012630:	029b      	lsls	r3, r3, #10
 8012632:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012636:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801263a:	e000      	b.n	801263e <lfs_rename_+0x286>
 801263c:	2300      	movs	r3, #0
 801263e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012640:	2300      	movs	r3, #0
 8012642:	657b      	str	r3, [r7, #84]	@ 0x54
 8012644:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012648:	029b      	lsls	r3, r3, #10
 801264a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801264e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012652:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012654:	2300      	movs	r3, #0
 8012656:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801265c:	4618      	mov	r0, r3
 801265e:	f7fa fd51 	bl	800d104 <lfs_tag_type3>
 8012662:	4603      	mov	r3, r0
 8012664:	051a      	lsls	r2, r3, #20
 8012666:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 801266a:	029b      	lsls	r3, r3, #10
 801266c:	ea42 0403 	orr.w	r4, r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4618      	mov	r0, r3
 8012674:	f7ed fe04 	bl	8000280 <strlen>
 8012678:	4603      	mov	r3, r0
 801267a:	4323      	orrs	r3, r4
 801267c:	663b      	str	r3, [r7, #96]	@ 0x60
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	667b      	str	r3, [r7, #100]	@ 0x64
 8012682:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012686:	029c      	lsls	r4, r3, #10
 8012688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801268c:	4618      	mov	r0, r3
 801268e:	f7fa fd63 	bl	800d158 <lfs_tag_id>
 8012692:	4603      	mov	r3, r0
 8012694:	4323      	orrs	r3, r4
 8012696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801269a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801269e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80126a0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80126a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80126a6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d007      	beq.n	80126be <lfs_rename_+0x306>
 80126ae:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80126b2:	029b      	lsls	r3, r3, #10
 80126b4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80126b8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80126bc:	e000      	b.n	80126c0 <lfs_rename_+0x308>
 80126be:	2300      	movs	r3, #0
 80126c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80126c2:	2300      	movs	r3, #0
 80126c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80126c6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80126ca:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80126ce:	2305      	movs	r3, #5
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f7fe f91d 	bl	8010910 <lfs_dir_commit>
 80126d6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 80126da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d005      	beq.n	80126ee <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 80126e2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 80126e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80126ec:	e07a      	b.n	80127e4 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 80126ee:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80126f2:	f083 0301 	eor.w	r3, r3, #1
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d02f      	beq.n	801275c <lfs_rename_+0x3a4>
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	3330      	adds	r3, #48	@ 0x30
 8012700:	4618      	mov	r0, r3
 8012702:	f7fa fdbe 	bl	800d282 <lfs_gstate_hasmove>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d027      	beq.n	801275c <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801270c:	2200      	movs	r2, #0
 801270e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f001 f8c0 	bl	8013898 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8012718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801271c:	4618      	mov	r0, r3
 801271e:	f7fa fd1b 	bl	800d158 <lfs_tag_id>
 8012722:	4603      	mov	r3, r0
 8012724:	029b      	lsls	r3, r3, #10
 8012726:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801272a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801272e:	61bb      	str	r3, [r7, #24]
 8012730:	2300      	movs	r3, #0
 8012732:	61fb      	str	r3, [r7, #28]
 8012734:	f107 0218 	add.w	r2, r7, #24
 8012738:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 801273c:	2301      	movs	r3, #1
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f7fe f8e6 	bl	8010910 <lfs_dir_commit>
 8012744:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8012748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801274c:	2b00      	cmp	r3, #0
 801274e:	d005      	beq.n	801275c <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 8012750:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8012756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801275a:	e043      	b.n	80127e4 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 801275c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8012762:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012766:	f113 0f02 	cmn.w	r3, #2
 801276a:	d03a      	beq.n	80127e2 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801276c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012770:	4618      	mov	r0, r3
 8012772:	f7fa fcc7 	bl	800d104 <lfs_tag_type3>
 8012776:	4603      	mov	r3, r0
 8012778:	2b02      	cmp	r3, #2
 801277a:	d132      	bne.n	80127e2 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 801277c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012780:	68f8      	ldr	r0, [r7, #12]
 8012782:	f001 f839 	bl	80137f8 <lfs_fs_preporphans>
 8012786:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 801278a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801278e:	2b00      	cmp	r3, #0
 8012790:	d002      	beq.n	8012798 <lfs_rename_+0x3e0>
            return err;
 8012792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012796:	e025      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8012798:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801279c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80127a0:	3308      	adds	r3, #8
 80127a2:	4619      	mov	r1, r3
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f000 fedd 	bl	8013564 <lfs_fs_pred>
 80127aa:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80127ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d002      	beq.n	80127bc <lfs_rename_+0x404>
            return err;
 80127b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80127ba:	e013      	b.n	80127e4 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 80127bc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80127c0:	f103 0208 	add.w	r2, r3, #8
 80127c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80127c8:	4619      	mov	r1, r3
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f7fc fef2 	bl	800f5b4 <lfs_dir_drop>
 80127d0:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80127d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <lfs_rename_+0x42a>
            return err;
 80127dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80127e0:	e000      	b.n	80127e4 <lfs_rename_+0x42c>
        }
    }

    return 0;
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd90      	pop	{r4, r7, pc}
 80127ee:	bf00      	nop
 80127f0:	700ffc00 	.word	0x700ffc00

080127f4 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80127f4:	b590      	push	{r4, r7, lr}
 80127f6:	b08d      	sub	sp, #52	@ 0x34
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	683a      	ldr	r2, [r7, #0]
 8012802:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 801280c:	2300      	movs	r3, #0
 801280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012814:	69db      	ldr	r3, [r3, #28]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <lfs_init+0x34>
 801281a:	4b96      	ldr	r3, [pc, #600]	@ (8012a74 <lfs_init+0x280>)
 801281c:	4a96      	ldr	r2, [pc, #600]	@ (8012a78 <lfs_init+0x284>)
 801281e:	f241 0152 	movw	r1, #4178	@ 0x1052
 8012822:	4896      	ldr	r0, [pc, #600]	@ (8012a7c <lfs_init+0x288>)
 8012824:	f00f fe4c 	bl	80224c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801282c:	6a1b      	ldr	r3, [r3, #32]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <lfs_init+0x4c>
 8012832:	4b93      	ldr	r3, [pc, #588]	@ (8012a80 <lfs_init+0x28c>)
 8012834:	4a90      	ldr	r2, [pc, #576]	@ (8012a78 <lfs_init+0x284>)
 8012836:	f241 0153 	movw	r1, #4179	@ 0x1053
 801283a:	4890      	ldr	r0, [pc, #576]	@ (8012a7c <lfs_init+0x288>)
 801283c:	f00f fe40 	bl	80224c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012846:	2b00      	cmp	r3, #0
 8012848:	d106      	bne.n	8012858 <lfs_init+0x64>
 801284a:	4b8e      	ldr	r3, [pc, #568]	@ (8012a84 <lfs_init+0x290>)
 801284c:	4a8a      	ldr	r2, [pc, #552]	@ (8012a78 <lfs_init+0x284>)
 801284e:	f241 0154 	movw	r1, #4180	@ 0x1054
 8012852:	488a      	ldr	r0, [pc, #552]	@ (8012a7c <lfs_init+0x288>)
 8012854:	f00f fe34 	bl	80224c0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012862:	69d2      	ldr	r2, [r2, #28]
 8012864:	fbb3 f1f2 	udiv	r1, r3, r2
 8012868:	fb01 f202 	mul.w	r2, r1, r2
 801286c:	1a9b      	subs	r3, r3, r2
 801286e:	2b00      	cmp	r3, #0
 8012870:	d006      	beq.n	8012880 <lfs_init+0x8c>
 8012872:	4b85      	ldr	r3, [pc, #532]	@ (8012a88 <lfs_init+0x294>)
 8012874:	4a80      	ldr	r2, [pc, #512]	@ (8012a78 <lfs_init+0x284>)
 8012876:	f241 0158 	movw	r1, #4184	@ 0x1058
 801287a:	4880      	ldr	r0, [pc, #512]	@ (8012a7c <lfs_init+0x288>)
 801287c:	f00f fe20 	bl	80224c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801288a:	6a12      	ldr	r2, [r2, #32]
 801288c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012890:	fb01 f202 	mul.w	r2, r1, r2
 8012894:	1a9b      	subs	r3, r3, r2
 8012896:	2b00      	cmp	r3, #0
 8012898:	d006      	beq.n	80128a8 <lfs_init+0xb4>
 801289a:	4b7c      	ldr	r3, [pc, #496]	@ (8012a8c <lfs_init+0x298>)
 801289c:	4a76      	ldr	r2, [pc, #472]	@ (8012a78 <lfs_init+0x284>)
 801289e:	f241 0159 	movw	r1, #4185	@ 0x1059
 80128a2:	4876      	ldr	r0, [pc, #472]	@ (8012a7c <lfs_init+0x288>)
 80128a4:	f00f fe0c 	bl	80224c0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80128ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80128b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80128b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80128b8:	fb01 f202 	mul.w	r2, r1, r2
 80128bc:	1a9b      	subs	r3, r3, r2
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d006      	beq.n	80128d0 <lfs_init+0xdc>
 80128c2:	4b73      	ldr	r3, [pc, #460]	@ (8012a90 <lfs_init+0x29c>)
 80128c4:	4a6c      	ldr	r2, [pc, #432]	@ (8012a78 <lfs_init+0x284>)
 80128c6:	f241 015a 	movw	r1, #4186	@ 0x105a
 80128ca:	486c      	ldr	r0, [pc, #432]	@ (8012a7c <lfs_init+0x288>)
 80128cc:	f00f fdf8 	bl	80224c0 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80128d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80128d8:	d806      	bhi.n	80128e8 <lfs_init+0xf4>
 80128da:	4b6e      	ldr	r3, [pc, #440]	@ (8012a94 <lfs_init+0x2a0>)
 80128dc:	4a66      	ldr	r2, [pc, #408]	@ (8012a78 <lfs_init+0x284>)
 80128de:	f241 015d 	movw	r1, #4189	@ 0x105d
 80128e2:	4866      	ldr	r0, [pc, #408]	@ (8012a7c <lfs_init+0x288>)
 80128e4:	f00f fdec 	bl	80224c0 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80128ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ee:	3b08      	subs	r3, #8
 80128f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7f9 fef1 	bl	800c6e0 <lfs_npw2>
 80128fe:	4603      	mov	r3, r0
 8012900:	009a      	lsls	r2, r3, #2
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012908:	429a      	cmp	r2, r3
 801290a:	d906      	bls.n	801291a <lfs_init+0x126>
 801290c:	4b62      	ldr	r3, [pc, #392]	@ (8012a98 <lfs_init+0x2a4>)
 801290e:	4a5a      	ldr	r2, [pc, #360]	@ (8012a78 <lfs_init+0x284>)
 8012910:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8012914:	4859      	ldr	r0, [pc, #356]	@ (8012a7c <lfs_init+0x288>)
 8012916:	f00f fdd3 	bl	80224c0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d106      	bne.n	8012932 <lfs_init+0x13e>
 8012924:	4b5d      	ldr	r3, [pc, #372]	@ (8012a9c <lfs_init+0x2a8>)
 8012926:	4a54      	ldr	r2, [pc, #336]	@ (8012a78 <lfs_init+0x284>)
 8012928:	f241 0169 	movw	r1, #4201	@ 0x1069
 801292c:	4853      	ldr	r0, [pc, #332]	@ (8012a7c <lfs_init+0x288>)
 801292e:	f00f fdc7 	bl	80224c0 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00f      	beq.n	801295c <lfs_init+0x168>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012948:	085b      	lsrs	r3, r3, #1
 801294a:	429a      	cmp	r2, r3
 801294c:	d206      	bcs.n	801295c <lfs_init+0x168>
 801294e:	4b54      	ldr	r3, [pc, #336]	@ (8012aa0 <lfs_init+0x2ac>)
 8012950:	4a49      	ldr	r2, [pc, #292]	@ (8012a78 <lfs_init+0x284>)
 8012952:	f241 016f 	movw	r1, #4207	@ 0x106f
 8012956:	4849      	ldr	r0, [pc, #292]	@ (8012a7c <lfs_init+0x288>)
 8012958:	f00f fdb2 	bl	80224c0 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012966:	d00e      	beq.n	8012986 <lfs_init+0x192>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801296c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012974:	429a      	cmp	r2, r3
 8012976:	d906      	bls.n	8012986 <lfs_init+0x192>
 8012978:	4b4a      	ldr	r3, [pc, #296]	@ (8012aa4 <lfs_init+0x2b0>)
 801297a:	4a3f      	ldr	r2, [pc, #252]	@ (8012a78 <lfs_init+0x284>)
 801297c:	f241 0171 	movw	r1, #4209	@ 0x1071
 8012980:	483e      	ldr	r0, [pc, #248]	@ (8012a7c <lfs_init+0x288>)
 8012982:	f00f fd9d 	bl	80224c0 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801298c:	2b00      	cmp	r3, #0
 801298e:	d005      	beq.n	801299c <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	60da      	str	r2, [r3, #12]
 801299a:	e010      	b.n	80129be <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80129a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f9 ff04 	bl	800c7b0 <lfs_malloc>
 80129a8:	4602      	mov	r2, r0
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d103      	bne.n	80129be <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 80129b6:	f06f 030b 	mvn.w	r3, #11
 80129ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80129bc:	e163      	b.n	8012c86 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80129c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d005      	beq.n	80129d4 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80129cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	61da      	str	r2, [r3, #28]
 80129d2:	e010      	b.n	80129f6 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80129d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129da:	4618      	mov	r0, r3
 80129dc:	f7f9 fee8 	bl	800c7b0 <lfs_malloc>
 80129e0:	4602      	mov	r2, r0
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	69db      	ldr	r3, [r3, #28]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d103      	bne.n	80129f6 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 80129ee:	f06f 030b 	mvn.w	r3, #11
 80129f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80129f4:	e147      	b.n	8012c86 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4619      	mov	r1, r3
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f7f9 fefe 	bl	800c7fc <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	3310      	adds	r3, #16
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f7f9 fef8 	bl	800c7fc <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d106      	bne.n	8012a24 <lfs_init+0x230>
 8012a16:	4b24      	ldr	r3, [pc, #144]	@ (8012aa8 <lfs_init+0x2b4>)
 8012a18:	4a17      	ldr	r2, [pc, #92]	@ (8012a78 <lfs_init+0x284>)
 8012a1a:	f241 0190 	movw	r1, #4240	@ 0x1090
 8012a1e:	4817      	ldr	r0, [pc, #92]	@ (8012a7c <lfs_init+0x288>)
 8012a20:	f00f fd4e 	bl	80224c0 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d005      	beq.n	8012a3a <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012a32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	665a      	str	r2, [r3, #100]	@ 0x64
 8012a38:	e010      	b.n	8012a5c <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7f9 feb5 	bl	800c7b0 <lfs_malloc>
 8012a46:	4602      	mov	r2, r0
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d103      	bne.n	8012a5c <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8012a54:	f06f 030b 	mvn.w	r3, #11
 8012a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8012a5a:	e114      	b.n	8012c86 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a62:	2bff      	cmp	r3, #255	@ 0xff
 8012a64:	d924      	bls.n	8012ab0 <lfs_init+0x2bc>
 8012a66:	4b11      	ldr	r3, [pc, #68]	@ (8012aac <lfs_init+0x2b8>)
 8012a68:	4a03      	ldr	r2, [pc, #12]	@ (8012a78 <lfs_init+0x284>)
 8012a6a:	f241 019c 	movw	r1, #4252	@ 0x109c
 8012a6e:	4803      	ldr	r0, [pc, #12]	@ (8012a7c <lfs_init+0x288>)
 8012a70:	f00f fd26 	bl	80224c0 <__assert_func>
 8012a74:	08025fa4 	.word	0x08025fa4
 8012a78:	080294e8 	.word	0x080294e8
 8012a7c:	08025bf4 	.word	0x08025bf4
 8012a80:	08025fc0 	.word	0x08025fc0
 8012a84:	08025fdc 	.word	0x08025fdc
 8012a88:	08025ff8 	.word	0x08025ff8
 8012a8c:	08026028 	.word	0x08026028
 8012a90:	08026058 	.word	0x08026058
 8012a94:	0802608c 	.word	0x0802608c
 8012a98:	080260a8 	.word	0x080260a8
 8012a9c:	080260f4 	.word	0x080260f4
 8012aa0:	08026110 	.word	0x08026110
 8012aa4:	08026164 	.word	0x08026164
 8012aa8:	080261c4 	.word	0x080261c4
 8012aac:	080261e4 	.word	0x080261e4
    lfs->name_max = lfs->cfg->name_max;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d102      	bne.n	8012ac8 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	22ff      	movs	r2, #255	@ 0xff
 8012ac6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	da06      	bge.n	8012ae0 <lfs_init+0x2ec>
 8012ad2:	4b71      	ldr	r3, [pc, #452]	@ (8012c98 <lfs_init+0x4a4>)
 8012ad4:	4a71      	ldr	r2, [pc, #452]	@ (8012c9c <lfs_init+0x4a8>)
 8012ad6:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 8012ada:	4871      	ldr	r0, [pc, #452]	@ (8012ca0 <lfs_init+0x4ac>)
 8012adc:	f00f fcf0 	bl	80224c0 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ae4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d103      	bne.n	8012afa <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012af8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b00:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d906      	bls.n	8012b16 <lfs_init+0x322>
 8012b08:	4b66      	ldr	r3, [pc, #408]	@ (8012ca4 <lfs_init+0x4b0>)
 8012b0a:	4a64      	ldr	r2, [pc, #400]	@ (8012c9c <lfs_init+0x4a8>)
 8012b0c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8012b10:	4863      	ldr	r0, [pc, #396]	@ (8012ca0 <lfs_init+0x4ac>)
 8012b12:	f00f fcd5 	bl	80224c0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d103      	bne.n	8012b30 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8012b2e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d906      	bls.n	8012b4e <lfs_init+0x35a>
 8012b40:	4b59      	ldr	r3, [pc, #356]	@ (8012ca8 <lfs_init+0x4b4>)
 8012b42:	4a56      	ldr	r2, [pc, #344]	@ (8012c9c <lfs_init+0x4a8>)
 8012b44:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8012b48:	4855      	ldr	r0, [pc, #340]	@ (8012ca0 <lfs_init+0x4ac>)
 8012b4a:	f00f fcb9 	bl	80224c0 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b58:	d00e      	beq.n	8012b78 <lfs_init+0x384>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d906      	bls.n	8012b78 <lfs_init+0x384>
 8012b6a:	4b50      	ldr	r3, [pc, #320]	@ (8012cac <lfs_init+0x4b8>)
 8012b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8012c9c <lfs_init+0x4a8>)
 8012b6e:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8012b72:	484b      	ldr	r0, [pc, #300]	@ (8012ca0 <lfs_init+0x4ac>)
 8012b74:	f00f fca4 	bl	80224c0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b82:	d00d      	beq.n	8012ba0 <lfs_init+0x3ac>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d906      	bls.n	8012ba0 <lfs_init+0x3ac>
 8012b92:	4b47      	ldr	r3, [pc, #284]	@ (8012cb0 <lfs_init+0x4bc>)
 8012b94:	4a41      	ldr	r2, [pc, #260]	@ (8012c9c <lfs_init+0x4a8>)
 8012b96:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 8012b9a:	4841      	ldr	r0, [pc, #260]	@ (8012ca0 <lfs_init+0x4ac>)
 8012b9c:	f00f fc90 	bl	80224c0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012baa:	d019      	beq.n	8012be0 <lfs_init+0x3ec>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012bb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d004      	beq.n	8012bc6 <lfs_init+0x3d2>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bc2:	08db      	lsrs	r3, r3, #3
 8012bc4:	e003      	b.n	8012bce <lfs_init+0x3da>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bcc:	08db      	lsrs	r3, r3, #3
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d206      	bcs.n	8012be0 <lfs_init+0x3ec>
 8012bd2:	4b38      	ldr	r3, [pc, #224]	@ (8012cb4 <lfs_init+0x4c0>)
 8012bd4:	4a31      	ldr	r2, [pc, #196]	@ (8012c9c <lfs_init+0x4a8>)
 8012bd6:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8012bda:	4831      	ldr	r0, [pc, #196]	@ (8012ca0 <lfs_init+0x4ac>)
 8012bdc:	f00f fc70 	bl	80224c0 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012be4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bf2:	d103      	bne.n	8012bfc <lfs_init+0x408>
        lfs->inline_max = 0;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8012bfa:	e022      	b.n	8012c42 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d11e      	bne.n	8012c42 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012c08:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d004      	beq.n	8012c22 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8012c1e:	08db      	lsrs	r3, r3, #3
 8012c20:	e003      	b.n	8012c2a <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 8012c28:	08db      	lsrs	r3, r3, #3
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	f7f9 fd20 	bl	800c672 <lfs_min>
 8012c32:	4603      	mov	r3, r0
 8012c34:	4619      	mov	r1, r3
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7f9 fd1b 	bl	800c672 <lfs_min>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c48:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c50:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	333c      	adds	r3, #60	@ 0x3c
 8012c62:	2200      	movs	r2, #0
 8012c64:	601a      	str	r2, [r3, #0]
 8012c66:	605a      	str	r2, [r3, #4]
 8012c68:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	3330      	adds	r3, #48	@ 0x30
 8012c6e:	2200      	movs	r2, #0
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	605a      	str	r2, [r3, #4]
 8012c74:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	3348      	adds	r3, #72	@ 0x48
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	605a      	str	r2, [r3, #4]
 8012c80:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8012c82:	2300      	movs	r3, #0
 8012c84:	e003      	b.n	8012c8e <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 f816 	bl	8012cb8 <lfs_deinit>
    return err;
 8012c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3734      	adds	r7, #52	@ 0x34
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd90      	pop	{r4, r7, pc}
 8012c96:	bf00      	nop
 8012c98:	08026200 	.word	0x08026200
 8012c9c:	080294e8 	.word	0x080294e8
 8012ca0:	08025bf4 	.word	0x08025bf4
 8012ca4:	08026224 	.word	0x08026224
 8012ca8:	08026240 	.word	0x08026240
 8012cac:	08026270 	.word	0x08026270
 8012cb0:	080262c8 	.word	0x080262c8
 8012cb4:	08026318 	.word	0x08026318

08012cb8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d104      	bne.n	8012cd4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f9 fd7a 	bl	800c7c8 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d104      	bne.n	8012ce8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	69db      	ldr	r3, [r3, #28]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7f9 fd70 	bl	800c7c8 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d104      	bne.n	8012cfc <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f9 fd66 	bl	800c7c8 <lfs_free>
    }

    return 0;
 8012cfc:	2300      	movs	r3, #0
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b0a0      	sub	sp, #128	@ 0x80
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
    int err = 0;
 8012d12:	2300      	movs	r3, #0
 8012d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8012d16:	6839      	ldr	r1, [r7, #0]
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7ff fd6b 	bl	80127f4 <lfs_init>
 8012d1e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8012d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <lfs_format_+0x22>
            return err;
 8012d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d28:	e08d      	b.n	8012e46 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d106      	bne.n	8012d40 <lfs_format_+0x38>
 8012d32:	4b47      	ldr	r3, [pc, #284]	@ (8012e50 <lfs_format_+0x148>)
 8012d34:	4a47      	ldr	r2, [pc, #284]	@ (8012e54 <lfs_format_+0x14c>)
 8012d36:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8012d3a:	4847      	ldr	r0, [pc, #284]	@ (8012e58 <lfs_format_+0x150>)
 8012d3c:	f00f fbc0 	bl	80224c0 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	f010 f883 	bl	8022e58 <memset>
        lfs->lookahead.start = 0;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d5e:	00da      	lsls	r2, r3, #3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d64:	4619      	mov	r1, r3
 8012d66:	4610      	mov	r0, r2
 8012d68:	f7f9 fc83 	bl	800c672 <lfs_min>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2200      	movs	r2, #0
 8012d76:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7fa fc54 	bl	800d626 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8012d7e:	f107 030c 	add.w	r3, r7, #12
 8012d82:	4619      	mov	r1, r3
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7fc fb9b 	bl	800f4c0 <lfs_dir_alloc>
 8012d8a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8012d8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d150      	bne.n	8012e34 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7fa fc1e 	bl	800d5d4 <lfs_fs_disk_version>
 8012d98:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8012d9a:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8012da2:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8012da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8012dae:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8012db4:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8012dba:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8012dbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fa fb7d 	bl	800d4c0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8012dc6:	4b25      	ldr	r3, [pc, #148]	@ (8012e5c <lfs_format_+0x154>)
 8012dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012dca:	2300      	movs	r3, #0
 8012dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8012dce:	4b24      	ldr	r3, [pc, #144]	@ (8012e60 <lfs_format_+0x158>)
 8012dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8012dd2:	4b24      	ldr	r3, [pc, #144]	@ (8012e64 <lfs_format_+0x15c>)
 8012dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012dd6:	4b24      	ldr	r3, [pc, #144]	@ (8012e68 <lfs_format_+0x160>)
 8012dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012dda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8012de0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8012de4:	f107 010c 	add.w	r1, r7, #12
 8012de8:	2303      	movs	r3, #3
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7fd fd90 	bl	8010910 <lfs_dir_commit>
 8012df0:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8012df2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d11f      	bne.n	8012e38 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8012dfe:	f107 010c 	add.w	r1, r7, #12
 8012e02:	2300      	movs	r3, #0
 8012e04:	2200      	movs	r2, #0
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7fd fd82 	bl	8010910 <lfs_dir_commit>
 8012e0c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8012e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d113      	bne.n	8012e3c <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8012e14:	2300      	movs	r3, #0
 8012e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012e18:	2301      	movs	r3, #1
 8012e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e1c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012e20:	f107 030c 	add.w	r3, r7, #12
 8012e24:	4619      	mov	r1, r3
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7fb ff18 	bl	800ec5c <lfs_dir_fetch>
 8012e2c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8012e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	e004      	b.n	8012e3e <lfs_format_+0x136>
            goto cleanup;
 8012e34:	bf00      	nop
 8012e36:	e002      	b.n	8012e3e <lfs_format_+0x136>
            goto cleanup;
 8012e38:	bf00      	nop
 8012e3a:	e000      	b.n	8012e3e <lfs_format_+0x136>
            goto cleanup;
 8012e3c:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff ff3a 	bl	8012cb8 <lfs_deinit>
    return err;
 8012e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3780      	adds	r7, #128	@ 0x80
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	080263a8 	.word	0x080263a8
 8012e54:	080294f4 	.word	0x080294f4
 8012e58:	08025bf4 	.word	0x08025bf4
 8012e5c:	40100000 	.word	0x40100000
 8012e60:	0ff00008 	.word	0x0ff00008
 8012e64:	080263c0 	.word	0x080263c0
 8012e68:	20100018 	.word	0x20100018

08012e6c <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8012e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e6e:	b0a1      	sub	sp, #132	@ 0x84
 8012e70:	af04      	add	r7, sp, #16
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8012e76:	6839      	ldr	r1, [r7, #0]
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff fcbb 	bl	80127f4 <lfs_init>
 8012e7e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8012e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <lfs_mount_+0x1e>
        return err;
 8012e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e88:	e202      	b.n	8013290 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8012e8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012e8e:	2220      	movs	r2, #32
 8012e90:	2100      	movs	r1, #0
 8012e92:	4618      	mov	r0, r3
 8012e94:	f00f ffe0 	bl	8022e58 <memset>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8012e9c:	4a9a      	ldr	r2, [pc, #616]	@ (8013108 <lfs_mount_+0x29c>)
 8012e9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ea6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8012eb2:	e199      	b.n	80131e8 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8012eb4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012eb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012ebc:	3318      	adds	r3, #24
 8012ebe:	4611      	mov	r1, r2
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7fa f87d 	bl	800cfc0 <lfs_pair_issync>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00a      	beq.n	8012ee2 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8012ecc:	4b8f      	ldr	r3, [pc, #572]	@ (801310c <lfs_mount_+0x2a0>)
 8012ece:	f241 123d 	movw	r2, #4413	@ 0x113d
 8012ed2:	498f      	ldr	r1, [pc, #572]	@ (8013110 <lfs_mount_+0x2a4>)
 8012ed4:	488f      	ldr	r0, [pc, #572]	@ (8013114 <lfs_mount_+0x2a8>)
 8012ed6:	f00f fe8f 	bl	8022bf8 <iprintf>
            err = LFS_ERR_CORRUPT;
 8012eda:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8012ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8012ee0:	e1d2      	b.n	8013288 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8012ee2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d108      	bne.n	8012efc <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 8012eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eec:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 8012eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 8012ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ef8:	005b      	lsls	r3, r3, #1
 8012efa:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 8012efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012efe:	3301      	adds	r3, #1
 8012f00:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f06:	4b84      	ldr	r3, [pc, #528]	@ (8013118 <lfs_mount_+0x2ac>)
 8012f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f0a:	2308      	movs	r3, #8
 8012f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8012f0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012f12:	f103 0218 	add.w	r2, r3, #24
 8012f16:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8012f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f1e:	9303      	str	r3, [sp, #12]
 8012f20:	4b7e      	ldr	r3, [pc, #504]	@ (801311c <lfs_mount_+0x2b0>)
 8012f22:	9302      	str	r3, [sp, #8]
 8012f24:	2300      	movs	r3, #0
 8012f26:	9301      	str	r3, [sp, #4]
 8012f28:	4b7d      	ldr	r3, [pc, #500]	@ (8013120 <lfs_mount_+0x2b4>)
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	4b7d      	ldr	r3, [pc, #500]	@ (8013124 <lfs_mount_+0x2b8>)
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7fb fac4 	bl	800e4bc <lfs_dir_fetchmatch>
 8012f34:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8012f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	da02      	bge.n	8012f42 <lfs_mount_+0xd6>
            err = tag;
 8012f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8012f40:	e1a2      	b.n	8013288 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8012f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f000 8142 	beq.w	80131ce <lfs_mount_+0x362>
 8012f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fa f8a6 	bl	800d09e <lfs_tag_isdelete>
 8012f52:	4603      	mov	r3, r0
 8012f54:	f083 0301 	eor.w	r3, r3, #1
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f000 8137 	beq.w	80131ce <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8012f60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8012f66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8012f6c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8012f70:	f107 030c 	add.w	r3, r7, #12
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	4b6c      	ldr	r3, [pc, #432]	@ (8013128 <lfs_mount_+0x2bc>)
 8012f78:	4a6a      	ldr	r2, [pc, #424]	@ (8013124 <lfs_mount_+0x2b8>)
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f7fa fd68 	bl	800da50 <lfs_dir_get>
 8012f80:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8012f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	da02      	bge.n	8012f8e <lfs_mount_+0x122>
                err = tag;
 8012f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8012f8c:	e17c      	b.n	8013288 <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8012f8e:	f107 030c 	add.w	r3, r7, #12
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7fa fa5c 	bl	800d450 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	0c1b      	lsrs	r3, r3, #16
 8012f9c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f7fa fb22 	bl	800d5f0 <lfs_fs_disk_version_major>
 8012fac:	4603      	mov	r3, r0
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d108      	bne.n	8012fca <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7fa fb27 	bl	800d60c <lfs_fs_disk_version_minor>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d91d      	bls.n	8013006 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8012fca:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8012fce:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fa fb0c 	bl	800d5f0 <lfs_fs_disk_version_major>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	461e      	mov	r6, r3
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7fa fb15 	bl	800d60c <lfs_fs_disk_version_minor>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4b49      	ldr	r3, [pc, #292]	@ (801310c <lfs_mount_+0x2a0>)
 8012fe8:	9303      	str	r3, [sp, #12]
 8012fea:	9202      	str	r2, [sp, #8]
 8012fec:	9601      	str	r6, [sp, #4]
 8012fee:	9400      	str	r4, [sp, #0]
 8012ff0:	462b      	mov	r3, r5
 8012ff2:	f241 126b 	movw	r2, #4459	@ 0x116b
 8012ff6:	4946      	ldr	r1, [pc, #280]	@ (8013110 <lfs_mount_+0x2a4>)
 8012ff8:	484c      	ldr	r0, [pc, #304]	@ (801312c <lfs_mount_+0x2c0>)
 8012ffa:	f00f fdfd 	bl	8022bf8 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8012ffe:	f06f 0315 	mvn.w	r3, #21
 8013002:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013004:	e0e2      	b.n	80131cc <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8013006:	2300      	movs	r3, #0
 8013008:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7fa fafd 	bl	800d60c <lfs_fs_disk_version_minor>
 8013012:	4603      	mov	r3, r0
 8013014:	461a      	mov	r2, r3
 8013016:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801301a:	4293      	cmp	r3, r2
 801301c:	d21c      	bcs.n	8013058 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 801301e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8013022:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f7fa fae2 	bl	800d5f0 <lfs_fs_disk_version_major>
 801302c:	4603      	mov	r3, r0
 801302e:	461e      	mov	r6, r3
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7fa faeb 	bl	800d60c <lfs_fs_disk_version_minor>
 8013036:	4603      	mov	r3, r0
 8013038:	461a      	mov	r2, r3
 801303a:	4b34      	ldr	r3, [pc, #208]	@ (801310c <lfs_mount_+0x2a0>)
 801303c:	9303      	str	r3, [sp, #12]
 801303e:	9202      	str	r2, [sp, #8]
 8013040:	9601      	str	r6, [sp, #4]
 8013042:	9400      	str	r4, [sp, #0]
 8013044:	462b      	mov	r3, r5
 8013046:	f241 127a 	movw	r2, #4474	@ 0x117a
 801304a:	4931      	ldr	r1, [pc, #196]	@ (8013110 <lfs_mount_+0x2a4>)
 801304c:	4838      	ldr	r0, [pc, #224]	@ (8013130 <lfs_mount_+0x2c4>)
 801304e:	f00f fdd3 	bl	8022bf8 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8013052:	2301      	movs	r3, #1
 8013054:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8013058:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 801305c:	4619      	mov	r1, r3
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fbb4 	bl	80137cc <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d018      	beq.n	801309c <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 801306a:	69ba      	ldr	r2, [r7, #24]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013070:	429a      	cmp	r2, r3
 8013072:	d910      	bls.n	8013096 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8013074:	69ba      	ldr	r2, [r7, #24]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801307a:	4924      	ldr	r1, [pc, #144]	@ (801310c <lfs_mount_+0x2a0>)
 801307c:	9101      	str	r1, [sp, #4]
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	4613      	mov	r3, r2
 8013082:	f241 1289 	movw	r2, #4489	@ 0x1189
 8013086:	4922      	ldr	r1, [pc, #136]	@ (8013110 <lfs_mount_+0x2a4>)
 8013088:	482a      	ldr	r0, [pc, #168]	@ (8013134 <lfs_mount_+0x2c8>)
 801308a:	f00f fdb5 	bl	8022bf8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 801308e:	f06f 0315 	mvn.w	r3, #21
 8013092:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013094:	e09a      	b.n	80131cc <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d018      	beq.n	80130d4 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 80130a2:	69fa      	ldr	r2, [r7, #28]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d910      	bls.n	80130ce <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80130ac:	69fa      	ldr	r2, [r7, #28]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130b2:	4916      	ldr	r1, [pc, #88]	@ (801310c <lfs_mount_+0x2a0>)
 80130b4:	9101      	str	r1, [sp, #4]
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	4613      	mov	r3, r2
 80130ba:	f241 1294 	movw	r2, #4500	@ 0x1194
 80130be:	4914      	ldr	r1, [pc, #80]	@ (8013110 <lfs_mount_+0x2a4>)
 80130c0:	481d      	ldr	r0, [pc, #116]	@ (8013138 <lfs_mount_+0x2cc>)
 80130c2:	f00f fd99 	bl	8022bf8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80130c6:	f06f 0315 	mvn.w	r3, #21
 80130ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80130cc:	e07e      	b.n	80131cc <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 80130ce:	69fa      	ldr	r2, [r7, #28]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80130d4:	6a3b      	ldr	r3, [r7, #32]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d040      	beq.n	801315c <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 80130da:	6a3a      	ldr	r2, [r7, #32]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d92d      	bls.n	8013140 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80130e4:	6a3a      	ldr	r2, [r7, #32]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130ea:	4908      	ldr	r1, [pc, #32]	@ (801310c <lfs_mount_+0x2a0>)
 80130ec:	9101      	str	r1, [sp, #4]
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	4613      	mov	r3, r2
 80130f2:	f241 129f 	movw	r2, #4511	@ 0x119f
 80130f6:	4906      	ldr	r1, [pc, #24]	@ (8013110 <lfs_mount_+0x2a4>)
 80130f8:	4810      	ldr	r0, [pc, #64]	@ (801313c <lfs_mount_+0x2d0>)
 80130fa:	f00f fd7d 	bl	8022bf8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80130fe:	f06f 0315 	mvn.w	r3, #21
 8013102:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013104:	e062      	b.n	80131cc <lfs_mount_+0x360>
 8013106:	bf00      	nop
 8013108:	08025d60 	.word	0x08025d60
 801310c:	08025d1c 	.word	0x08025d1c
 8013110:	08025bf4 	.word	0x08025bf4
 8013114:	080263cc 	.word	0x080263cc
 8013118:	080263c0 	.word	0x080263c0
 801311c:	0800eded 	.word	0x0800eded
 8013120:	0ff00008 	.word	0x0ff00008
 8013124:	7ffffc00 	.word	0x7ffffc00
 8013128:	20100018 	.word	0x20100018
 801312c:	080263f8 	.word	0x080263f8
 8013130:	08026430 	.word	0x08026430
 8013134:	08026470 	.word	0x08026470
 8013138:	080264a4 	.word	0x080264a4
 801313c:	080264d8 	.word	0x080264d8
                }

                lfs->attr_max = superblock.attr_max;
 8013140:	6a3a      	ldr	r2, [r7, #32]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801314e:	4619      	mov	r1, r3
 8013150:	4610      	mov	r0, r2
 8013152:	f7f9 fa8e 	bl	800c672 <lfs_min>
 8013156:	4602      	mov	r2, r0
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013162:	2b00      	cmp	r3, #0
 8013164:	d017      	beq.n	8013196 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801316e:	429a      	cmp	r2, r3
 8013170:	d011      	beq.n	8013196 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8013172:	697a      	ldr	r2, [r7, #20]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801317a:	4947      	ldr	r1, [pc, #284]	@ (8013298 <lfs_mount_+0x42c>)
 801317c:	9101      	str	r1, [sp, #4]
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	4613      	mov	r3, r2
 8013182:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8013186:	4945      	ldr	r1, [pc, #276]	@ (801329c <lfs_mount_+0x430>)
 8013188:	4845      	ldr	r0, [pc, #276]	@ (80132a0 <lfs_mount_+0x434>)
 801318a:	f00f fd35 	bl	8022bf8 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 801318e:	f06f 0315 	mvn.w	r3, #21
 8013192:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013194:	e01a      	b.n	80131cc <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8013196:	697a      	ldr	r2, [r7, #20]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 801319c:	693a      	ldr	r2, [r7, #16]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d012      	beq.n	80131ce <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131b0:	4939      	ldr	r1, [pc, #228]	@ (8013298 <lfs_mount_+0x42c>)
 80131b2:	9101      	str	r1, [sp, #4]
 80131b4:	9300      	str	r3, [sp, #0]
 80131b6:	4613      	mov	r3, r2
 80131b8:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 80131bc:	4937      	ldr	r1, [pc, #220]	@ (801329c <lfs_mount_+0x430>)
 80131be:	4839      	ldr	r0, [pc, #228]	@ (80132a4 <lfs_mount_+0x438>)
 80131c0:	f00f fd1a 	bl	8022bf8 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80131c4:	f06f 0315 	mvn.w	r3, #21
 80131c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80131ca:	bf00      	nop
            goto cleanup;
 80131cc:	e05c      	b.n	8013288 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80131d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80131d8:	4619      	mov	r1, r3
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7fb fd5a 	bl	800ec94 <lfs_dir_getgstate>
 80131e0:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 80131e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d14e      	bne.n	8013286 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 80131e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80131ec:	3318      	adds	r3, #24
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f9 fea1 	bl	800cf36 <lfs_pair_isnull>
 80131f4:	4603      	mov	r3, r0
 80131f6:	f083 0301 	eor.w	r3, r3, #1
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f47f ae59 	bne.w	8012eb4 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	3330      	adds	r3, #48	@ 0x30
 8013206:	4618      	mov	r0, r3
 8013208:	f7f9 fffc 	bl	800d204 <lfs_gstate_iszero>
 801320c:	4603      	mov	r3, r0
 801320e:	f083 0301 	eor.w	r3, r3, #1
 8013212:	b2db      	uxtb	r3, r3
 8013214:	2b00      	cmp	r3, #0
 8013216:	d010      	beq.n	801323a <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8013224:	481c      	ldr	r0, [pc, #112]	@ (8013298 <lfs_mount_+0x42c>)
 8013226:	9002      	str	r0, [sp, #8]
 8013228:	9201      	str	r2, [sp, #4]
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	460b      	mov	r3, r1
 801322e:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8013232:	491a      	ldr	r1, [pc, #104]	@ (801329c <lfs_mount_+0x430>)
 8013234:	481c      	ldr	r0, [pc, #112]	@ (80132a8 <lfs_mount_+0x43c>)
 8013236:	f00f fcdf 	bl	8022bf8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801323e:	4618      	mov	r0, r3
 8013240:	f7f9 ff1f 	bl	800d082 <lfs_tag_isvalid>
 8013244:	4603      	mov	r3, r0
 8013246:	f083 0301 	eor.w	r3, r3, #1
 801324a:	b2db      	uxtb	r3, r3
 801324c:	461a      	mov	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013252:	441a      	add	r2, r3
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	333c      	adds	r3, #60	@ 0x3c
 801325e:	3230      	adds	r2, #48	@ 0x30
 8013260:	ca07      	ldmia	r2, {r0, r1, r2}
 8013262:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801326e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013272:	fb01 f202 	mul.w	r2, r1, r2
 8013276:	1a9a      	subs	r2, r3, r2
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7fa f9e0 	bl	800d642 <lfs_alloc_drop>

    return 0;
 8013282:	2300      	movs	r3, #0
 8013284:	e004      	b.n	8013290 <lfs_mount_+0x424>
            goto cleanup;
 8013286:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f000 f80f 	bl	80132ac <lfs_unmount_>
    return err;
 801328e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8013290:	4618      	mov	r0, r3
 8013292:	3774      	adds	r7, #116	@ 0x74
 8013294:	46bd      	mov	sp, r7
 8013296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013298:	08025d1c 	.word	0x08025d1c
 801329c:	08025bf4 	.word	0x08025bf4
 80132a0:	0802650c 	.word	0x0802650c
 80132a4:	08026540 	.word	0x08026540
 80132a8:	08026570 	.word	0x08026570

080132ac <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7ff fcff 	bl	8012cb8 <lfs_deinit>
 80132ba:	4603      	mov	r3, r0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80132c4:	b590      	push	{r4, r7, lr}
 80132c6:	b0a1      	sub	sp, #132	@ 0x84
 80132c8:	af04      	add	r7, sp, #16
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80132d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80132d6:	2220      	movs	r2, #32
 80132d8:	2100      	movs	r1, #0
 80132da:	4618      	mov	r0, r3
 80132dc:	f00f fdbc 	bl	8022e58 <memset>
 80132e0:	2301      	movs	r3, #1
 80132e2:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80132e4:	4a9a      	ldr	r2, [pc, #616]	@ (8013550 <lfs_fs_traverse_+0x28c>)
 80132e6:	f107 031c 	add.w	r3, r7, #28
 80132ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132ee:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80132f2:	2301      	movs	r3, #1
 80132f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 80132f6:	2301      	movs	r3, #1
 80132f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80132fa:	e0c0      	b.n	801347e <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80132fc:	f107 021c 	add.w	r2, r7, #28
 8013300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013304:	3318      	adds	r3, #24
 8013306:	4611      	mov	r1, r2
 8013308:	4618      	mov	r0, r3
 801330a:	f7f9 fe59 	bl	800cfc0 <lfs_pair_issync>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d009      	beq.n	8013328 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8013314:	4b8f      	ldr	r3, [pc, #572]	@ (8013554 <lfs_fs_traverse_+0x290>)
 8013316:	f241 2222 	movw	r2, #4642	@ 0x1222
 801331a:	498f      	ldr	r1, [pc, #572]	@ (8013558 <lfs_fs_traverse_+0x294>)
 801331c:	488f      	ldr	r0, [pc, #572]	@ (801355c <lfs_fs_traverse_+0x298>)
 801331e:	f00f fc6b 	bl	8022bf8 <iprintf>
            return LFS_ERR_CORRUPT;
 8013322:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013326:	e10f      	b.n	8013548 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8013328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801332a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801332c:	429a      	cmp	r2, r3
 801332e:	d108      	bne.n	8013342 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8013330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013332:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8013334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013336:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8013338:	2300      	movs	r3, #0
 801333a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 801333c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8013342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013344:	3301      	adds	r3, #1
 8013346:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8013348:	2300      	movs	r3, #0
 801334a:	667b      	str	r3, [r7, #100]	@ 0x64
 801334c:	e013      	b.n	8013376 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 801334e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013350:	3306      	adds	r3, #6
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	3370      	adds	r3, #112	@ 0x70
 8013356:	443b      	add	r3, r7
 8013358:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	4611      	mov	r1, r2
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	4798      	blx	r3
 8013364:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8013366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013368:	2b00      	cmp	r3, #0
 801336a:	d001      	beq.n	8013370 <lfs_fs_traverse_+0xac>
                return err;
 801336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801336e:	e0eb      	b.n	8013548 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8013370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013372:	3301      	adds	r3, #1
 8013374:	667b      	str	r3, [r7, #100]	@ 0x64
 8013376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013378:	2b01      	cmp	r3, #1
 801337a:	dde8      	ble.n	801334e <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801337c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013380:	f103 0218 	add.w	r2, r3, #24
 8013384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013388:	4619      	mov	r1, r3
 801338a:	68f8      	ldr	r0, [r7, #12]
 801338c:	f7fb fc66 	bl	800ec5c <lfs_dir_fetch>
 8013390:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8013392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013394:	2b00      	cmp	r3, #0
 8013396:	d001      	beq.n	801339c <lfs_fs_traverse_+0xd8>
            return err;
 8013398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801339a:	e0d5      	b.n	8013548 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 801339c:	2300      	movs	r3, #0
 801339e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80133a2:	e067      	b.n	8013474 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80133a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80133a8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80133aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80133ae:	f043 0308 	orr.w	r3, r3, #8
 80133b2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80133b6:	f107 0214 	add.w	r2, r7, #20
 80133ba:	9200      	str	r2, [sp, #0]
 80133bc:	4a68      	ldr	r2, [pc, #416]	@ (8013560 <lfs_fs_traverse_+0x29c>)
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	f7fa fb46 	bl	800da50 <lfs_dir_get>
 80133c4:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 80133c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	da05      	bge.n	80133d8 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 80133cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133ce:	f113 0f02 	cmn.w	r3, #2
 80133d2:	d049      	beq.n	8013468 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 80133d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133d6:	e0b7      	b.n	8013548 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 80133d8:	f107 0314 	add.w	r3, r7, #20
 80133dc:	4618      	mov	r0, r3
 80133de:	f7fa f807 	bl	800d3f0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80133e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f9 fe8d 	bl	800d104 <lfs_tag_type3>
 80133ea:	4603      	mov	r3, r0
 80133ec:	461a      	mov	r2, r3
 80133ee:	f240 2302 	movw	r3, #514	@ 0x202
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d113      	bne.n	801341e <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80133f6:	68f9      	ldr	r1, [r7, #12]
 80133f8:	6978      	ldr	r0, [r7, #20]
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	9202      	str	r2, [sp, #8]
 8013400:	68ba      	ldr	r2, [r7, #8]
 8013402:	9201      	str	r2, [sp, #4]
 8013404:	9300      	str	r3, [sp, #0]
 8013406:	4603      	mov	r3, r0
 8013408:	460a      	mov	r2, r1
 801340a:	2100      	movs	r1, #0
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f7fd fe9d 	bl	801114c <lfs_ctz_traverse>
 8013412:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8013414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013416:	2b00      	cmp	r3, #0
 8013418:	d027      	beq.n	801346a <lfs_fs_traverse_+0x1a6>
                    return err;
 801341a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801341c:	e094      	b.n	8013548 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 801341e:	78fb      	ldrb	r3, [r7, #3]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d022      	beq.n	801346a <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8013424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013426:	4618      	mov	r0, r3
 8013428:	f7f9 fe6c 	bl	800d104 <lfs_tag_type3>
 801342c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 801342e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013432:	d11a      	bne.n	801346a <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8013434:	2300      	movs	r3, #0
 8013436:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013438:	e012      	b.n	8013460 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 801343a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	f107 0214 	add.w	r2, r7, #20
 8013442:	4413      	add	r3, r2
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	4611      	mov	r1, r2
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	4798      	blx	r3
 801344e:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8013450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013452:	2b00      	cmp	r3, #0
 8013454:	d001      	beq.n	801345a <lfs_fs_traverse_+0x196>
                        return err;
 8013456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013458:	e076      	b.n	8013548 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 801345a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801345c:	3301      	adds	r3, #1
 801345e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013462:	2b01      	cmp	r3, #1
 8013464:	dde9      	ble.n	801343a <lfs_fs_traverse_+0x176>
 8013466:	e000      	b.n	801346a <lfs_fs_traverse_+0x1a6>
                    continue;
 8013468:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 801346a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801346e:	3301      	adds	r3, #1
 8013470:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013474:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013476:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 801347a:	429a      	cmp	r2, r3
 801347c:	d392      	bcc.n	80133a4 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 801347e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013482:	3318      	adds	r3, #24
 8013484:	4618      	mov	r0, r3
 8013486:	f7f9 fd56 	bl	800cf36 <lfs_pair_isnull>
 801348a:	4603      	mov	r3, r0
 801348c:	f083 0301 	eor.w	r3, r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	f47f af32 	bne.w	80132fc <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801349c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801349e:	e04f      	b.n	8013540 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 80134a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134a2:	799b      	ldrb	r3, [r3, #6]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d147      	bne.n	8013538 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80134a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d01d      	beq.n	80134f0 <lfs_fs_traverse_+0x22c>
 80134b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d117      	bne.n	80134f0 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80134c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134c2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80134c6:	68f8      	ldr	r0, [r7, #12]
 80134c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134ca:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80134cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	9202      	str	r2, [sp, #8]
 80134d4:	68ba      	ldr	r2, [r7, #8]
 80134d6:	9201      	str	r2, [sp, #4]
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	4623      	mov	r3, r4
 80134dc:	4602      	mov	r2, r0
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f7fd fe34 	bl	801114c <lfs_ctz_traverse>
 80134e4:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80134e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <lfs_fs_traverse_+0x22c>
                return err;
 80134ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ee:	e02b      	b.n	8013548 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80134f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d01e      	beq.n	801353a <lfs_fs_traverse_+0x276>
 80134fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013504:	2b00      	cmp	r3, #0
 8013506:	d118      	bne.n	801353a <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801350a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013512:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8013514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	9202      	str	r2, [sp, #8]
 801351c:	68ba      	ldr	r2, [r7, #8]
 801351e:	9201      	str	r2, [sp, #4]
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	4623      	mov	r3, r4
 8013524:	4602      	mov	r2, r0
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f7fd fe10 	bl	801114c <lfs_ctz_traverse>
 801352c:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 801352e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <lfs_fs_traverse_+0x276>
                return err;
 8013534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013536:	e007      	b.n	8013548 <lfs_fs_traverse_+0x284>
            continue;
 8013538:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801353a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013540:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1ac      	bne.n	80134a0 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3774      	adds	r7, #116	@ 0x74
 801354c:	46bd      	mov	sp, r7
 801354e:	bd90      	pop	{r4, r7, pc}
 8013550:	08025d60 	.word	0x08025d60
 8013554:	08025d1c 	.word	0x08025d1c
 8013558:	08025bf4 	.word	0x08025bf4
 801355c:	080263cc 	.word	0x080263cc
 8013560:	700ffc00 	.word	0x700ffc00

08013564 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8013564:	b580      	push	{r7, lr}
 8013566:	b08a      	sub	sp, #40	@ 0x28
 8013568:	af00      	add	r7, sp, #0
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2201      	movs	r2, #1
 801357a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801357c:	4a2d      	ldr	r2, [pc, #180]	@ (8013634 <lfs_fs_pred+0xd0>)
 801357e:	f107 0314 	add.w	r3, r7, #20
 8013582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013586:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801358a:	2301      	movs	r3, #1
 801358c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 801358e:	2301      	movs	r3, #1
 8013590:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8013592:	e03e      	b.n	8013612 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	3318      	adds	r3, #24
 8013598:	f107 0214 	add.w	r2, r7, #20
 801359c:	4611      	mov	r1, r2
 801359e:	4618      	mov	r0, r3
 80135a0:	f7f9 fd0e 	bl	800cfc0 <lfs_pair_issync>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d009      	beq.n	80135be <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80135aa:	4b23      	ldr	r3, [pc, #140]	@ (8013638 <lfs_fs_pred+0xd4>)
 80135ac:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 80135b0:	4922      	ldr	r1, [pc, #136]	@ (801363c <lfs_fs_pred+0xd8>)
 80135b2:	4823      	ldr	r0, [pc, #140]	@ (8013640 <lfs_fs_pred+0xdc>)
 80135b4:	f00f fb20 	bl	8022bf8 <iprintf>
            return LFS_ERR_CORRUPT;
 80135b8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80135bc:	e036      	b.n	801362c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 80135be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135c0:	6a3b      	ldr	r3, [r7, #32]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d10a      	bne.n	80135dc <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	69db      	ldr	r3, [r3, #28]
 80135d0:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 80135d2:	2300      	movs	r3, #0
 80135d4:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 80135d6:	6a3b      	ldr	r3, [r7, #32]
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 80135dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135de:	3301      	adds	r3, #1
 80135e0:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	3318      	adds	r3, #24
 80135e6:	68b9      	ldr	r1, [r7, #8]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f9 fcbf 	bl	800cf6c <lfs_pair_cmp>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d101      	bne.n	80135f8 <lfs_fs_pred+0x94>
            return 0;
 80135f4:	2300      	movs	r3, #0
 80135f6:	e019      	b.n	801362c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	3318      	adds	r3, #24
 80135fc:	461a      	mov	r2, r3
 80135fe:	6879      	ldr	r1, [r7, #4]
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7fb fb2b 	bl	800ec5c <lfs_dir_fetch>
 8013606:	61f8      	str	r0, [r7, #28]
        if (err) {
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <lfs_fs_pred+0xae>
            return err;
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	e00c      	b.n	801362c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	3318      	adds	r3, #24
 8013616:	4618      	mov	r0, r3
 8013618:	f7f9 fc8d 	bl	800cf36 <lfs_pair_isnull>
 801361c:	4603      	mov	r3, r0
 801361e:	f083 0301 	eor.w	r3, r3, #1
 8013622:	b2db      	uxtb	r3, r3
 8013624:	2b00      	cmp	r3, #0
 8013626:	d1b5      	bne.n	8013594 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013628:	f06f 0301 	mvn.w	r3, #1
}
 801362c:	4618      	mov	r0, r3
 801362e:	3728      	adds	r7, #40	@ 0x28
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	08025d60 	.word	0x08025d60
 8013638:	08025d1c 	.word	0x08025d1c
 801363c:	08025bf4 	.word	0x08025bf4
 8013640:	080263cc 	.word	0x080263cc

08013644 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8013644:	b5b0      	push	{r4, r5, r7, lr}
 8013646:	b08e      	sub	sp, #56	@ 0x38
 8013648:	af04      	add	r7, sp, #16
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8013654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801365e:	6a3b      	ldr	r3, [r7, #32]
 8013660:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8013664:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013666:	6a3b      	ldr	r3, [r7, #32]
 8013668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801366a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	69fa      	ldr	r2, [r7, #28]
 8013672:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8013674:	2108      	movs	r1, #8
 8013676:	9103      	str	r1, [sp, #12]
 8013678:	f107 0110 	add.w	r1, r7, #16
 801367c:	9102      	str	r1, [sp, #8]
 801367e:	9201      	str	r2, [sp, #4]
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	462b      	mov	r3, r5
 8013684:	4622      	mov	r2, r4
 8013686:	4601      	mov	r1, r0
 8013688:	6a38      	ldr	r0, [r7, #32]
 801368a:	f7f9 f8cd 	bl	800c828 <lfs_bd_read>
 801368e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <lfs_fs_parent_match+0x56>
        return err;
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	e012      	b.n	80136c0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 801369a:	f107 0310 	add.w	r3, r7, #16
 801369e:	4618      	mov	r0, r3
 80136a0:	f7f9 fcbb 	bl	800d01a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80136a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a6:	1d1a      	adds	r2, r3, #4
 80136a8:	f107 0310 	add.w	r3, r7, #16
 80136ac:	4611      	mov	r1, r2
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7f9 fc5c 	bl	800cf6c <lfs_pair_cmp>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	bf14      	ite	ne
 80136ba:	2301      	movne	r3, #1
 80136bc:	2300      	moveq	r3, #0
 80136be:	b2db      	uxtb	r3, r3
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3728      	adds	r7, #40	@ 0x28
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bdb0      	pop	{r4, r5, r7, pc}

080136c8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b090      	sub	sp, #64	@ 0x40
 80136cc:	af04      	add	r7, sp, #16
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2201      	movs	r2, #1
 80136de:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80136e0:	4a33      	ldr	r2, [pc, #204]	@ (80137b0 <lfs_fs_parent+0xe8>)
 80136e2:	f107 031c 	add.w	r3, r7, #28
 80136e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136ea:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80136ee:	2301      	movs	r3, #1
 80136f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 80136f2:	2301      	movs	r3, #1
 80136f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 80136f6:	e04a      	b.n	801378e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	3318      	adds	r3, #24
 80136fc:	f107 021c 	add.w	r2, r7, #28
 8013700:	4611      	mov	r1, r2
 8013702:	4618      	mov	r0, r3
 8013704:	f7f9 fc5c 	bl	800cfc0 <lfs_pair_issync>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d009      	beq.n	8013722 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 801370e:	4b29      	ldr	r3, [pc, #164]	@ (80137b4 <lfs_fs_parent+0xec>)
 8013710:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8013714:	4928      	ldr	r1, [pc, #160]	@ (80137b8 <lfs_fs_parent+0xf0>)
 8013716:	4829      	ldr	r0, [pc, #164]	@ (80137bc <lfs_fs_parent+0xf4>)
 8013718:	f00f fa6e 	bl	8022bf8 <iprintf>
            return LFS_ERR_CORRUPT;
 801371c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013720:	e042      	b.n	80137a8 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8013722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013726:	429a      	cmp	r2, r3
 8013728:	d10a      	bne.n	8013740 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	699b      	ldr	r3, [r3, #24]
 801372e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	69db      	ldr	r3, [r3, #28]
 8013734:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8013736:	2300      	movs	r3, #0
 8013738:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 801373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373c:	005b      	lsls	r3, r3, #1
 801373e:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8013740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013742:	3301      	adds	r3, #1
 8013744:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013754:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	3304      	adds	r3, #4
 801375a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801375c:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801375e:	f107 0310 	add.w	r3, r7, #16
 8013762:	9303      	str	r3, [sp, #12]
 8013764:	4b16      	ldr	r3, [pc, #88]	@ (80137c0 <lfs_fs_parent+0xf8>)
 8013766:	9302      	str	r3, [sp, #8]
 8013768:	2300      	movs	r3, #0
 801376a:	9301      	str	r3, [sp, #4]
 801376c:	4b15      	ldr	r3, [pc, #84]	@ (80137c4 <lfs_fs_parent+0xfc>)
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	4b15      	ldr	r3, [pc, #84]	@ (80137c8 <lfs_fs_parent+0x100>)
 8013772:	6879      	ldr	r1, [r7, #4]
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7fa fea1 	bl	800e4bc <lfs_dir_fetchmatch>
 801377a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 801377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377e:	2b00      	cmp	r3, #0
 8013780:	d005      	beq.n	801378e <lfs_fs_parent+0xc6>
 8013782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013784:	f113 0f02 	cmn.w	r3, #2
 8013788:	d001      	beq.n	801378e <lfs_fs_parent+0xc6>
            return tag;
 801378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378c:	e00c      	b.n	80137a8 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3318      	adds	r3, #24
 8013792:	4618      	mov	r0, r3
 8013794:	f7f9 fbcf 	bl	800cf36 <lfs_pair_isnull>
 8013798:	4603      	mov	r3, r0
 801379a:	f083 0301 	eor.w	r3, r3, #1
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d1a9      	bne.n	80136f8 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80137a4:	f06f 0301 	mvn.w	r3, #1
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3730      	adds	r7, #48	@ 0x30
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	08025d60 	.word	0x08025d60
 80137b4:	08025d1c 	.word	0x08025d1c
 80137b8:	08025bf4 	.word	0x08025bf4
 80137bc:	080263cc 	.word	0x080263cc
 80137c0:	08013645 	.word	0x08013645
 80137c4:	20000008 	.word	0x20000008
 80137c8:	7ff003ff 	.word	0x7ff003ff

080137cc <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 80137e0:	78fb      	ldrb	r3, [r7, #3]
 80137e2:	025b      	lsls	r3, r3, #9
 80137e4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80137ea:	bf00      	nop
 80137ec:	370c      	adds	r7, #12
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr
	...

080137f8 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80137f8:	b590      	push	{r4, r7, lr}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013808:	4618      	mov	r0, r3
 801380a:	f7f9 fcb5 	bl	800d178 <lfs_tag_size>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d10a      	bne.n	801382a <lfs_fs_preporphans+0x32>
 8013814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013818:	2b00      	cmp	r3, #0
 801381a:	da06      	bge.n	801382a <lfs_fs_preporphans+0x32>
 801381c:	4b1a      	ldr	r3, [pc, #104]	@ (8013888 <lfs_fs_preporphans+0x90>)
 801381e:	4a1b      	ldr	r2, [pc, #108]	@ (801388c <lfs_fs_preporphans+0x94>)
 8013820:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8013824:	481a      	ldr	r0, [pc, #104]	@ (8013890 <lfs_fs_preporphans+0x98>)
 8013826:	f00e fe4b 	bl	80224c0 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801382e:	4618      	mov	r0, r3
 8013830:	f7f9 fca2 	bl	800d178 <lfs_tag_size>
 8013834:	4603      	mov	r3, r0
 8013836:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 801383a:	d90a      	bls.n	8013852 <lfs_fs_preporphans+0x5a>
 801383c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013840:	2b00      	cmp	r3, #0
 8013842:	dd06      	ble.n	8013852 <lfs_fs_preporphans+0x5a>
 8013844:	4b13      	ldr	r3, [pc, #76]	@ (8013894 <lfs_fs_preporphans+0x9c>)
 8013846:	4a11      	ldr	r2, [pc, #68]	@ (801388c <lfs_fs_preporphans+0x94>)
 8013848:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801384c:	4810      	ldr	r0, [pc, #64]	@ (8013890 <lfs_fs_preporphans+0x98>)
 801384e:	f00e fe37 	bl	80224c0 <__assert_func>
    lfs->gstate.tag += orphans;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801385a:	441a      	add	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013864:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	3330      	adds	r3, #48	@ 0x30
 801386c:	4618      	mov	r0, r3
 801386e:	f7f9 fce6 	bl	800d23e <lfs_gstate_hasorphans>
 8013872:	4603      	mov	r3, r0
 8013874:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013876:	ea44 0203 	orr.w	r2, r4, r3
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	370c      	adds	r7, #12
 8013884:	46bd      	mov	sp, r7
 8013886:	bd90      	pop	{r4, r7, pc}
 8013888:	080265a8 	.word	0x080265a8
 801388c:	08029500 	.word	0x08029500
 8013890:	08025bf4 	.word	0x08025bf4
 8013894:	080265e0 	.word	0x080265e0

08013898 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8013898:	b480      	push	{r7}
 801389a:	b085      	sub	sp, #20
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	460b      	mov	r3, r1
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138aa:	4a17      	ldr	r2, [pc, #92]	@ (8013908 <lfs_fs_prepmove+0x70>)
 80138ac:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80138ae:	897b      	ldrh	r3, [r7, #10]
 80138b0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80138b4:	428b      	cmp	r3, r1
 80138b6:	d006      	beq.n	80138c6 <lfs_fs_prepmove+0x2e>
 80138b8:	897b      	ldrh	r3, [r7, #10]
 80138ba:	029b      	lsls	r3, r3, #10
 80138bc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80138c0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80138c4:	e000      	b.n	80138c8 <lfs_fs_prepmove+0x30>
 80138c6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80138c8:	431a      	orrs	r2, r3
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80138ce:	897b      	ldrh	r3, [r7, #10]
 80138d0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d002      	beq.n	80138de <lfs_fs_prepmove+0x46>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	e000      	b.n	80138e0 <lfs_fs_prepmove+0x48>
 80138de:	2300      	movs	r3, #0
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80138e4:	897b      	ldrh	r3, [r7, #10]
 80138e6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d003      	beq.n	80138f6 <lfs_fs_prepmove+0x5e>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	3304      	adds	r3, #4
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	e000      	b.n	80138f8 <lfs_fs_prepmove+0x60>
 80138f6:	2300      	movs	r3, #0
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80138fc:	bf00      	nop
 80138fe:	3714      	adds	r7, #20
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr
 8013908:	800003ff 	.word	0x800003ff

0801390c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801390c:	b580      	push	{r7, lr}
 801390e:	b098      	sub	sp, #96	@ 0x60
 8013910:	af02      	add	r7, sp, #8
 8013912:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	3330      	adds	r3, #48	@ 0x30
 8013918:	4618      	mov	r0, r3
 801391a:	f7f9 fcc5 	bl	800d2a8 <lfs_gstate_needssuperblock>
 801391e:	4603      	mov	r3, r0
 8013920:	f083 0301 	eor.w	r3, r3, #1
 8013924:	b2db      	uxtb	r3, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	d001      	beq.n	801392e <lfs_fs_desuperblock+0x22>
        return 0;
 801392a:	2300      	movs	r3, #0
 801392c:	e04e      	b.n	80139cc <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a1a      	ldr	r2, [r3, #32]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013936:	4927      	ldr	r1, [pc, #156]	@ (80139d4 <lfs_fs_desuperblock+0xc8>)
 8013938:	9101      	str	r1, [sp, #4]
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	4613      	mov	r3, r2
 801393e:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8013942:	4925      	ldr	r1, [pc, #148]	@ (80139d8 <lfs_fs_desuperblock+0xcc>)
 8013944:	4825      	ldr	r0, [pc, #148]	@ (80139dc <lfs_fs_desuperblock+0xd0>)
 8013946:	f00f f957 	bl	8022bf8 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f103 0220 	add.w	r2, r3, #32
 8013950:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013954:	4619      	mov	r1, r3
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f7fb f980 	bl	800ec5c <lfs_dir_fetch>
 801395c:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 801395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013960:	2b00      	cmp	r3, #0
 8013962:	d001      	beq.n	8013968 <lfs_fs_desuperblock+0x5c>
        return err;
 8013964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013966:	e031      	b.n	80139cc <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7f9 fe33 	bl	800d5d4 <lfs_fs_disk_version>
 801396e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8013970:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 8013978:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801397e:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8013984:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8013990:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8013992:	f107 031c 	add.w	r3, r7, #28
 8013996:	4618      	mov	r0, r3
 8013998:	f7f9 fd92 	bl	800d4c0 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801399c:	4b10      	ldr	r3, [pc, #64]	@ (80139e0 <lfs_fs_desuperblock+0xd4>)
 801399e:	617b      	str	r3, [r7, #20]
 80139a0:	f107 031c 	add.w	r3, r7, #28
 80139a4:	61bb      	str	r3, [r7, #24]
 80139a6:	f107 0214 	add.w	r2, r7, #20
 80139aa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80139ae:	2301      	movs	r3, #1
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7fc ffad 	bl	8010910 <lfs_dir_commit>
 80139b6:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 80139b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d001      	beq.n	80139c2 <lfs_fs_desuperblock+0xb6>
        return err;
 80139be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139c0:	e004      	b.n	80139cc <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 80139c2:	2100      	movs	r1, #0
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff ff01 	bl	80137cc <lfs_fs_prepsuperblock>
    return 0;
 80139ca:	2300      	movs	r3, #0
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3758      	adds	r7, #88	@ 0x58
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}
 80139d4:	08025d1c 	.word	0x08025d1c
 80139d8:	08025bf4 	.word	0x08025bf4
 80139dc:	08026618 	.word	0x08026618
 80139e0:	20100018 	.word	0x20100018

080139e4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80139e4:	b5b0      	push	{r4, r5, r7, lr}
 80139e6:	b094      	sub	sp, #80	@ 0x50
 80139e8:	af04      	add	r7, sp, #16
 80139ea:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	333c      	adds	r3, #60	@ 0x3c
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7f9 fc46 	bl	800d282 <lfs_gstate_hasmove>
 80139f6:	4603      	mov	r3, r0
 80139f8:	f083 0301 	eor.w	r3, r3, #1
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d001      	beq.n	8013a06 <lfs_fs_demove+0x22>
        return 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	e05b      	b.n	8013abe <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7f9 fba0 	bl	800d158 <lfs_tag_id>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8013ac8 <lfs_fs_demove+0xe4>)
 8013a1e:	9302      	str	r3, [sp, #8]
 8013a20:	9201      	str	r2, [sp, #4]
 8013a22:	9400      	str	r4, [sp, #0]
 8013a24:	462b      	mov	r3, r5
 8013a26:	f241 3224 	movw	r2, #4900	@ 0x1324
 8013a2a:	4928      	ldr	r1, [pc, #160]	@ (8013acc <lfs_fs_demove+0xe8>)
 8013a2c:	4828      	ldr	r0, [pc, #160]	@ (8013ad0 <lfs_fs_demove+0xec>)
 8013a2e:	f00f f8e3 	bl	8022bf8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f9 fb64 	bl	800d104 <lfs_tag_type3>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	461a      	mov	r2, r3
 8013a40:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d006      	beq.n	8013a56 <lfs_fs_demove+0x72>
 8013a48:	4b22      	ldr	r3, [pc, #136]	@ (8013ad4 <lfs_fs_demove+0xf0>)
 8013a4a:	4a23      	ldr	r2, [pc, #140]	@ (8013ad8 <lfs_fs_demove+0xf4>)
 8013a4c:	f241 312b 	movw	r1, #4907	@ 0x132b
 8013a50:	481e      	ldr	r0, [pc, #120]	@ (8013acc <lfs_fs_demove+0xe8>)
 8013a52:	f00e fd35 	bl	80224c0 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8013a5c:	f107 0318 	add.w	r3, r7, #24
 8013a60:	4619      	mov	r1, r3
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f7fb f8fa 	bl	800ec5c <lfs_dir_fetch>
 8013a68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8013a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <lfs_fs_demove+0x90>
        return err;
 8013a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a72:	e024      	b.n	8013abe <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f9 fb6d 	bl	800d158 <lfs_tag_id>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8013a82:	2200      	movs	r2, #0
 8013a84:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff ff05 	bl	8013898 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8013a8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013a90:	029b      	lsls	r3, r3, #10
 8013a92:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8013a96:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8013a9a:	613b      	str	r3, [r7, #16]
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	617b      	str	r3, [r7, #20]
 8013aa0:	f107 0210 	add.w	r2, r7, #16
 8013aa4:	f107 0118 	add.w	r1, r7, #24
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7fc ff30 	bl	8010910 <lfs_dir_commit>
 8013ab0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8013ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d001      	beq.n	8013abc <lfs_fs_demove+0xd8>
        return err;
 8013ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013aba:	e000      	b.n	8013abe <lfs_fs_demove+0xda>
    }

    return 0;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3740      	adds	r7, #64	@ 0x40
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	08025d1c 	.word	0x08025d1c
 8013acc:	08025bf4 	.word	0x08025bf4
 8013ad0:	0802664c 	.word	0x0802664c
 8013ad4:	08026680 	.word	0x08026680
 8013ad8:	08029514 	.word	0x08029514

08013adc <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8013adc:	b5b0      	push	{r4, r5, r7, lr}
 8013ade:	b0b2      	sub	sp, #200	@ 0xc8
 8013ae0:	af04      	add	r7, sp, #16
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	3330      	adds	r3, #48	@ 0x30
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7f9 fba6 	bl	800d23e <lfs_gstate_hasorphans>
 8013af2:	4603      	mov	r3, r0
 8013af4:	f083 0301 	eor.w	r3, r3, #1
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d001      	beq.n	8013b02 <lfs_fs_deorphan+0x26>
        return 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	e187      	b.n	8013e12 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8013b02:	2300      	movs	r3, #0
 8013b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8013b08:	e170      	b.n	8013dec <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8013b0a:	f107 0308 	add.w	r3, r7, #8
 8013b0e:	2220      	movs	r2, #32
 8013b10:	2100      	movs	r1, #0
 8013b12:	4618      	mov	r0, r3
 8013b14:	f00f f9a0 	bl	8022e58 <memset>
 8013b18:	2301      	movs	r3, #1
 8013b1a:	77fb      	strb	r3, [r7, #31]
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8013b20:	2300      	movs	r3, #0
 8013b22:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8013b26:	e149      	b.n	8013dbc <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8013b28:	f107 0308 	add.w	r3, r7, #8
 8013b2c:	f103 0218 	add.w	r2, r3, #24
 8013b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013b34:	4619      	mov	r1, r3
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7fb f890 	bl	800ec5c <lfs_dir_fetch>
 8013b3c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8013b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d002      	beq.n	8013b4e <lfs_fs_deorphan+0x72>
                return err;
 8013b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b4c:	e161      	b.n	8013e12 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8013b4e:	7ffb      	ldrb	r3, [r7, #31]
 8013b50:	f083 0301 	eor.w	r3, r3, #1
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 8124 	beq.w	8013da4 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8013b5c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013b60:	f107 0308 	add.w	r3, r7, #8
 8013b64:	3318      	adds	r3, #24
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff fdad 	bl	80136c8 <lfs_fs_parent>
 8013b6e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8013b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da07      	bge.n	8013b8a <lfs_fs_deorphan+0xae>
 8013b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013b7e:	f113 0f02 	cmn.w	r3, #2
 8013b82:	d002      	beq.n	8013b8a <lfs_fs_deorphan+0xae>
                    return tag;
 8013b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013b88:	e143      	b.n	8013e12 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8013b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f040 80ac 	bne.w	8013cec <lfs_fs_deorphan+0x210>
 8013b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013b98:	f113 0f02 	cmn.w	r3, #2
 8013b9c:	f000 80a6 	beq.w	8013cec <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8013ba0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013ba4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8013ba8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	4a9a      	ldr	r2, [pc, #616]	@ (8013e1c <lfs_fs_deorphan+0x340>)
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7f9 ff4c 	bl	800da50 <lfs_dir_get>
 8013bb8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8013bbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	da02      	bge.n	8013bca <lfs_fs_deorphan+0xee>
                        return state;
 8013bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bc8:	e0eb      	b.n	8013da2 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8013bca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f9 fa23 	bl	800d01a <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8013bd4:	f107 0308 	add.w	r3, r7, #8
 8013bd8:	f103 0218 	add.w	r2, r3, #24
 8013bdc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013be0:	4611      	mov	r1, r2
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7f9 f9ec 	bl	800cfc0 <lfs_pair_issync>
 8013be8:	4603      	mov	r3, r0
 8013bea:	f083 0301 	eor.w	r3, r3, #1
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d07b      	beq.n	8013cec <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8013bf4:	6a38      	ldr	r0, [r7, #32]
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013bfc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013c00:	4c87      	ldr	r4, [pc, #540]	@ (8013e20 <lfs_fs_deorphan+0x344>)
 8013c02:	9403      	str	r4, [sp, #12]
 8013c04:	9102      	str	r1, [sp, #8]
 8013c06:	9201      	str	r2, [sp, #4]
 8013c08:	9300      	str	r3, [sp, #0]
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	f241 3271 	movw	r2, #4977	@ 0x1371
 8013c10:	4984      	ldr	r1, [pc, #528]	@ (8013e24 <lfs_fs_deorphan+0x348>)
 8013c12:	4885      	ldr	r0, [pc, #532]	@ (8013e28 <lfs_fs_deorphan+0x34c>)
 8013c14:	f00e fff0 	bl	8022bf8 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8013c18:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8013c1c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	3330      	adds	r3, #48	@ 0x30
 8013c24:	f107 0208 	add.w	r2, r7, #8
 8013c28:	4611      	mov	r1, r2
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7f9 fb50 	bl	800d2d0 <lfs_gstate_hasmovehere>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d01c      	beq.n	8013c70 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f9 fa8c 	bl	800d158 <lfs_tag_id>
 8013c40:	4603      	mov	r3, r0
 8013c42:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8013c46:	68b9      	ldr	r1, [r7, #8]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8013c4e:	4874      	ldr	r0, [pc, #464]	@ (8013e20 <lfs_fs_deorphan+0x344>)
 8013c50:	9002      	str	r0, [sp, #8]
 8013c52:	9201      	str	r2, [sp, #4]
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	460b      	mov	r3, r1
 8013c58:	f241 327c 	movw	r2, #4988	@ 0x137c
 8013c5c:	4971      	ldr	r1, [pc, #452]	@ (8013e24 <lfs_fs_deorphan+0x348>)
 8013c5e:	4873      	ldr	r0, [pc, #460]	@ (8013e2c <lfs_fs_deorphan+0x350>)
 8013c60:	f00e ffca 	bl	8022bf8 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8013c64:	2200      	movs	r2, #0
 8013c66:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7ff fe14 	bl	8013898 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8013c70:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f9 f9ea 	bl	800d04e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8013c7a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8013c7e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8013c82:	4293      	cmp	r3, r2
 8013c84:	d007      	beq.n	8013c96 <lfs_fs_deorphan+0x1ba>
 8013c86:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8013c8a:	029b      	lsls	r3, r3, #10
 8013c8c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8013c90:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8013c94:	e000      	b.n	8013c98 <lfs_fs_deorphan+0x1bc>
 8013c96:	2300      	movs	r3, #0
 8013c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013ca2:	4b63      	ldr	r3, [pc, #396]	@ (8013e30 <lfs_fs_deorphan+0x354>)
 8013ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013ca8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013cac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013cb0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8013cb4:	f107 0108 	add.w	r1, r7, #8
 8013cb8:	2302      	movs	r3, #2
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7fc fb2e 	bl	801031c <lfs_dir_orphaningcommit>
 8013cc0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8013cc4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f9 f9a6 	bl	800d01a <lfs_pair_fromle32>
                        if (state < 0) {
 8013cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	da02      	bge.n	8013cdc <lfs_fs_deorphan+0x200>
                            return state;
 8013cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8013cda:	e062      	b.n	8013da2 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8013cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013ce0:	2b03      	cmp	r3, #3
 8013ce2:	d16b      	bne.n	8013dbc <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8013cea:	e067      	b.n	8013dbc <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8013cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d157      	bne.n	8013da4 <lfs_fs_deorphan+0x2c8>
 8013cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013cf8:	f113 0f02 	cmn.w	r3, #2
 8013cfc:	d152      	bne.n	8013da4 <lfs_fs_deorphan+0x2c8>
 8013cfe:	78fb      	ldrb	r3, [r7, #3]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d04f      	beq.n	8013da4 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8013d04:	6a3a      	ldr	r2, [r7, #32]
 8013d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d08:	4945      	ldr	r1, [pc, #276]	@ (8013e20 <lfs_fs_deorphan+0x344>)
 8013d0a:	9101      	str	r1, [sp, #4]
 8013d0c:	9300      	str	r3, [sp, #0]
 8013d0e:	4613      	mov	r3, r2
 8013d10:	f241 329c 	movw	r2, #5020	@ 0x139c
 8013d14:	4943      	ldr	r1, [pc, #268]	@ (8013e24 <lfs_fs_deorphan+0x348>)
 8013d16:	4847      	ldr	r0, [pc, #284]	@ (8013e34 <lfs_fs_deorphan+0x358>)
 8013d18:	f00e ff6e 	bl	8022bf8 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8013d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d26:	4619      	mov	r1, r3
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f7fa ffb3 	bl	800ec94 <lfs_dir_getgstate>
 8013d2e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8013d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d002      	beq.n	8013d40 <lfs_fs_deorphan+0x264>
                        return err;
 8013d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013d3e:	e030      	b.n	8013da2 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8013d40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d44:	3318      	adds	r3, #24
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f9 f981 	bl	800d04e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8013d4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013d50:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8013d54:	051a      	lsls	r2, r3, #20
 8013d56:	4b38      	ldr	r3, [pc, #224]	@ (8013e38 <lfs_fs_deorphan+0x35c>)
 8013d58:	4313      	orrs	r3, r2
 8013d5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8013d5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d60:	3318      	adds	r3, #24
 8013d62:	677b      	str	r3, [r7, #116]	@ 0x74
 8013d64:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8013d68:	f107 0108 	add.w	r1, r7, #8
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f7fc fad4 	bl	801031c <lfs_dir_orphaningcommit>
 8013d74:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8013d78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d7c:	3318      	adds	r3, #24
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f9 f94b 	bl	800d01a <lfs_pair_fromle32>
                    if (state < 0) {
 8013d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	da02      	bge.n	8013d92 <lfs_fs_deorphan+0x2b6>
                        return state;
 8013d8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 8013d90:	e03f      	b.n	8013e12 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8013d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d96:	2b03      	cmp	r3, #3
 8013d98:	d10f      	bne.n	8013dba <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8013da0:	e00c      	b.n	8013dbc <lfs_fs_deorphan+0x2e0>
                return err;
 8013da2:	e036      	b.n	8013e12 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8013da4:	f107 0408 	add.w	r4, r7, #8
 8013da8:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8013dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013db0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013db8:	e000      	b.n	8013dbc <lfs_fs_deorphan+0x2e0>
                    continue;
 8013dba:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8013dbc:	f107 0308 	add.w	r3, r7, #8
 8013dc0:	3318      	adds	r3, #24
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7f9 f8b7 	bl	800cf36 <lfs_pair_isnull>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	f083 0301 	eor.w	r3, r3, #1
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	f47f aea9 	bne.w	8013b28 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8013dd6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d001      	beq.n	8013de2 <lfs_fs_deorphan+0x306>
 8013dde:	2300      	movs	r3, #0
 8013de0:	e002      	b.n	8013de8 <lfs_fs_deorphan+0x30c>
 8013de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013de6:	3301      	adds	r3, #1
 8013de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8013dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	f77f ae8a 	ble.w	8013b0a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	3330      	adds	r3, #48	@ 0x30
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7f9 fa32 	bl	800d264 <lfs_gstate_getorphans>
 8013e00:	4603      	mov	r3, r0
 8013e02:	425b      	negs	r3, r3
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	b25b      	sxtb	r3, r3
 8013e08:	4619      	mov	r1, r3
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff fcf4 	bl	80137f8 <lfs_fs_preporphans>
 8013e10:	4603      	mov	r3, r0
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	37b8      	adds	r7, #184	@ 0xb8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bdb0      	pop	{r4, r5, r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	7ffffc00 	.word	0x7ffffc00
 8013e20:	08025d1c 	.word	0x08025d1c
 8013e24:	08025bf4 	.word	0x08025bf4
 8013e28:	080266b4 	.word	0x080266b4
 8013e2c:	080266f8 	.word	0x080266f8
 8013e30:	600ffc08 	.word	0x600ffc08
 8013e34:	08026740 	.word	0x08026740
 8013e38:	000ffc08 	.word	0x000ffc08

08013e3c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f7ff fd61 	bl	801390c <lfs_fs_desuperblock>
 8013e4a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <lfs_fs_forceconsistency+0x1a>
        return err;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	e013      	b.n	8013e7e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7ff fdc4 	bl	80139e4 <lfs_fs_demove>
 8013e5c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <lfs_fs_forceconsistency+0x2c>
        return err;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	e00a      	b.n	8013e7e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8013e68:	2101      	movs	r1, #1
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff fe36 	bl	8013adc <lfs_fs_deorphan>
 8013e70:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d001      	beq.n	8013e7c <lfs_fs_forceconsistency+0x40>
        return err;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	e000      	b.n	8013e7e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8013e7c:	2300      	movs	r3, #0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8013e86:	b480      	push	{r7}
 8013e88:	b085      	sub	sp, #20
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
 8013e8e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	1c5a      	adds	r2, r3, #1
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	601a      	str	r2, [r3, #0]
    return 0;
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3714      	adds	r7, #20
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr

08013eac <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8013eb8:	f107 0208 	add.w	r2, r7, #8
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	4907      	ldr	r1, [pc, #28]	@ (8013edc <lfs_fs_size_+0x30>)
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f7ff f9ff 	bl	80132c4 <lfs_fs_traverse_>
 8013ec6:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d001      	beq.n	8013ed2 <lfs_fs_size_+0x26>
        return err;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	e000      	b.n	8013ed4 <lfs_fs_size_+0x28>
    }

    return size;
 8013ed2:	68bb      	ldr	r3, [r7, #8]
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3710      	adds	r7, #16
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	08013e87 	.word	0x08013e87

08013ee0 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	695b      	ldr	r3, [r3, #20]
 8013eee:	6838      	ldr	r0, [r7, #0]
 8013ef0:	4798      	blx	r3
 8013ef2:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d001      	beq.n	8013efe <lfs_format+0x1e>
        return err;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	e009      	b.n	8013f12 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7fe ff01 	bl	8012d08 <lfs_format_>
 8013f06:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	699b      	ldr	r3, [r3, #24]
 8013f0c:	6838      	ldr	r0, [r7, #0]
 8013f0e:	4798      	blx	r3
    return err;
 8013f10:	68fb      	ldr	r3, [r7, #12]
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3710      	adds	r7, #16
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}

08013f1a <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8013f1a:	b580      	push	{r7, lr}
 8013f1c:	b084      	sub	sp, #16
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	6078      	str	r0, [r7, #4]
 8013f22:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	695b      	ldr	r3, [r3, #20]
 8013f28:	6838      	ldr	r0, [r7, #0]
 8013f2a:	4798      	blx	r3
 8013f2c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <lfs_mount+0x1e>
        return err;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	e009      	b.n	8013f4c <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8013f38:	6839      	ldr	r1, [r7, #0]
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7fe ff96 	bl	8012e6c <lfs_mount_>
 8013f40:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	699b      	ldr	r3, [r3, #24]
 8013f46:	6838      	ldr	r0, [r7, #0]
 8013f48:	4798      	blx	r3
    return err;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f62:	695b      	ldr	r3, [r3, #20]
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013f68:	4610      	mov	r0, r2
 8013f6a:	4798      	blx	r3
 8013f6c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <lfs_remove+0x24>
        return err;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	e00c      	b.n	8013f92 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 8013f78:	6839      	ldr	r1, [r7, #0]
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f7fe f94a 	bl	8012214 <lfs_remove_>
 8013f80:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f86:	699b      	ldr	r3, [r3, #24]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013f8c:	4610      	mov	r0, r2
 8013f8e:	4798      	blx	r3
    return err;
 8013f90:	68fb      	ldr	r3, [r7, #12]
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b086      	sub	sp, #24
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	60f8      	str	r0, [r7, #12]
 8013fa2:	60b9      	str	r1, [r7, #8]
 8013fa4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013fb0:	4610      	mov	r0, r2
 8013fb2:	4798      	blx	r3
 8013fb4:	6178      	str	r0, [r7, #20]
    if (err) {
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d001      	beq.n	8013fc0 <lfs_rename+0x26>
        return err;
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	e00d      	b.n	8013fdc <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	68b9      	ldr	r1, [r7, #8]
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f7fe f9f7 	bl	80123b8 <lfs_rename_>
 8013fca:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013fd0:	699b      	ldr	r3, [r3, #24]
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013fd6:	4610      	mov	r0, r2
 8013fd8:	4798      	blx	r3
    return err;
 8013fda:	697b      	ldr	r3, [r7, #20]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3718      	adds	r7, #24
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	68fa      	ldr	r2, [r7, #12]
 8013ff8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	4798      	blx	r3
 8013ffe:	6178      	str	r0, [r7, #20]
    if (err) {
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d001      	beq.n	801400a <lfs_stat+0x26>
        return err;
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	e00d      	b.n	8014026 <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	68b9      	ldr	r1, [r7, #8]
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f7fe f8db 	bl	80121ca <lfs_stat_>
 8014014:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801401a:	699b      	ldr	r3, [r3, #24]
 801401c:	68fa      	ldr	r2, [r7, #12]
 801401e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014020:	4610      	mov	r0, r2
 8014022:	4798      	blx	r3
    return err;
 8014024:	697b      	ldr	r3, [r7, #20]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
	...

08014030 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8014030:	b580      	push	{r7, lr}
 8014032:	b086      	sub	sp, #24
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
 801403c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014042:	695b      	ldr	r3, [r3, #20]
 8014044:	68fa      	ldr	r2, [r7, #12]
 8014046:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014048:	4610      	mov	r0, r2
 801404a:	4798      	blx	r3
 801404c:	6178      	str	r0, [r7, #20]
    if (err) {
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d001      	beq.n	8014058 <lfs_file_open+0x28>
        return err;
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	e021      	b.n	801409c <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801405c:	68b9      	ldr	r1, [r7, #8]
 801405e:	4618      	mov	r0, r3
 8014060:	f7f9 fa66 	bl	800d530 <lfs_mlist_isopen>
 8014064:	4603      	mov	r3, r0
 8014066:	f083 0301 	eor.w	r3, r3, #1
 801406a:	b2db      	uxtb	r3, r3
 801406c:	2b00      	cmp	r3, #0
 801406e:	d106      	bne.n	801407e <lfs_file_open+0x4e>
 8014070:	4b0c      	ldr	r3, [pc, #48]	@ (80140a4 <lfs_file_open+0x74>)
 8014072:	4a0d      	ldr	r2, [pc, #52]	@ (80140a8 <lfs_file_open+0x78>)
 8014074:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 8014078:	480c      	ldr	r0, [pc, #48]	@ (80140ac <lfs_file_open+0x7c>)
 801407a:	f00e fa21 	bl	80224c0 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	68b9      	ldr	r1, [r7, #8]
 8014084:	68f8      	ldr	r0, [r7, #12]
 8014086:	f7fd faad 	bl	80115e4 <lfs_file_open_>
 801408a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014090:	699b      	ldr	r3, [r3, #24]
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014096:	4610      	mov	r0, r2
 8014098:	4798      	blx	r3
    return err;
 801409a:	697b      	ldr	r3, [r7, #20]
}
 801409c:	4618      	mov	r0, r3
 801409e:	3718      	adds	r7, #24
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	08026790 	.word	0x08026790
 80140a8:	08029524 	.word	0x08029524
 80140ac:	08025bf4 	.word	0x08025bf4

080140b0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80140c4:	4610      	mov	r0, r2
 80140c6:	4798      	blx	r3
 80140c8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <lfs_file_close+0x24>
        return err;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	e01c      	b.n	801410e <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140d8:	6839      	ldr	r1, [r7, #0]
 80140da:	4618      	mov	r0, r3
 80140dc:	f7f9 fa28 	bl	800d530 <lfs_mlist_isopen>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <lfs_file_close+0x44>
 80140e6:	4b0c      	ldr	r3, [pc, #48]	@ (8014118 <lfs_file_close+0x68>)
 80140e8:	4a0c      	ldr	r2, [pc, #48]	@ (801411c <lfs_file_close+0x6c>)
 80140ea:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 80140ee:	480c      	ldr	r0, [pc, #48]	@ (8014120 <lfs_file_close+0x70>)
 80140f0:	f00e f9e6 	bl	80224c0 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80140f4:	6839      	ldr	r1, [r7, #0]
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7fd fa8c 	bl	8011614 <lfs_file_close_>
 80140fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014102:	699b      	ldr	r3, [r3, #24]
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014108:	4610      	mov	r0, r2
 801410a:	4798      	blx	r3
    return err;
 801410c:	68fb      	ldr	r3, [r7, #12]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3710      	adds	r7, #16
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	080267c8 	.word	0x080267c8
 801411c:	08029534 	.word	0x08029534
 8014120:	08025bf4 	.word	0x08025bf4

08014124 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014136:	695b      	ldr	r3, [r3, #20]
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801413c:	4610      	mov	r0, r2
 801413e:	4798      	blx	r3
 8014140:	6178      	str	r0, [r7, #20]
    if (err) {
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d001      	beq.n	801414c <lfs_file_read+0x28>
        return err;
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	e01e      	b.n	801418a <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014150:	68b9      	ldr	r1, [r7, #8]
 8014152:	4618      	mov	r0, r3
 8014154:	f7f9 f9ec 	bl	800d530 <lfs_mlist_isopen>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d106      	bne.n	801416c <lfs_file_read+0x48>
 801415e:	4b0d      	ldr	r3, [pc, #52]	@ (8014194 <lfs_file_read+0x70>)
 8014160:	4a0d      	ldr	r2, [pc, #52]	@ (8014198 <lfs_file_read+0x74>)
 8014162:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8014166:	480d      	ldr	r0, [pc, #52]	@ (801419c <lfs_file_read+0x78>)
 8014168:	f00e f9aa 	bl	80224c0 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	68b9      	ldr	r1, [r7, #8]
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f7fd fdae 	bl	8011cd4 <lfs_file_read_>
 8014178:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801417e:	699b      	ldr	r3, [r3, #24]
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014184:	4610      	mov	r0, r2
 8014186:	4798      	blx	r3
    return res;
 8014188:	693b      	ldr	r3, [r7, #16]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3718      	adds	r7, #24
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	080267c8 	.word	0x080267c8
 8014198:	08029544 	.word	0x08029544
 801419c:	08025bf4 	.word	0x08025bf4

080141a0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	68fa      	ldr	r2, [r7, #12]
 80141b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80141b8:	4610      	mov	r0, r2
 80141ba:	4798      	blx	r3
 80141bc:	6178      	str	r0, [r7, #20]
    if (err) {
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <lfs_file_write+0x28>
        return err;
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	e01e      	b.n	8014206 <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141cc:	68b9      	ldr	r1, [r7, #8]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f9 f9ae 	bl	800d530 <lfs_mlist_isopen>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d106      	bne.n	80141e8 <lfs_file_write+0x48>
 80141da:	4b0d      	ldr	r3, [pc, #52]	@ (8014210 <lfs_file_write+0x70>)
 80141dc:	4a0d      	ldr	r2, [pc, #52]	@ (8014214 <lfs_file_write+0x74>)
 80141de:	f641 0105 	movw	r1, #6149	@ 0x1805
 80141e2:	480d      	ldr	r0, [pc, #52]	@ (8014218 <lfs_file_write+0x78>)
 80141e4:	f00e f96c 	bl	80224c0 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	68b9      	ldr	r1, [r7, #8]
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f7fd feb6 	bl	8011f60 <lfs_file_write_>
 80141f4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80141fa:	699b      	ldr	r3, [r3, #24]
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014200:	4610      	mov	r0, r2
 8014202:	4798      	blx	r3
    return res;
 8014204:	693b      	ldr	r3, [r7, #16]
}
 8014206:	4618      	mov	r0, r3
 8014208:	3718      	adds	r7, #24
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	080267c8 	.word	0x080267c8
 8014214:	08029554 	.word	0x08029554
 8014218:	08025bf4 	.word	0x08025bf4

0801421c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801421c:	b580      	push	{r7, lr}
 801421e:	b086      	sub	sp, #24
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801422e:	695b      	ldr	r3, [r3, #20]
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014234:	4610      	mov	r0, r2
 8014236:	4798      	blx	r3
 8014238:	6178      	str	r0, [r7, #20]
    if (err) {
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d001      	beq.n	8014244 <lfs_file_seek+0x28>
        return err;
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	e01e      	b.n	8014282 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014248:	68b9      	ldr	r1, [r7, #8]
 801424a:	4618      	mov	r0, r3
 801424c:	f7f9 f970 	bl	800d530 <lfs_mlist_isopen>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d106      	bne.n	8014264 <lfs_file_seek+0x48>
 8014256:	4b0d      	ldr	r3, [pc, #52]	@ (801428c <lfs_file_seek+0x70>)
 8014258:	4a0d      	ldr	r2, [pc, #52]	@ (8014290 <lfs_file_seek+0x74>)
 801425a:	f641 0117 	movw	r1, #6167	@ 0x1817
 801425e:	480d      	ldr	r0, [pc, #52]	@ (8014294 <lfs_file_seek+0x78>)
 8014260:	f00e f92e 	bl	80224c0 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	68b9      	ldr	r1, [r7, #8]
 801426a:	68f8      	ldr	r0, [r7, #12]
 801426c:	f7fd fefc 	bl	8012068 <lfs_file_seek_>
 8014270:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014276:	699b      	ldr	r3, [r3, #24]
 8014278:	68fa      	ldr	r2, [r7, #12]
 801427a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801427c:	4610      	mov	r0, r2
 801427e:	4798      	blx	r3
    return res;
 8014280:	693b      	ldr	r3, [r7, #16]
}
 8014282:	4618      	mov	r0, r3
 8014284:	3718      	adds	r7, #24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	080267c8 	.word	0x080267c8
 8014290:	08029564 	.word	0x08029564
 8014294:	08025bf4 	.word	0x08025bf4

08014298 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8014298:	b580      	push	{r7, lr}
 801429a:	b084      	sub	sp, #16
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80142a6:	695b      	ldr	r3, [r3, #20]
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80142ac:	4610      	mov	r0, r2
 80142ae:	4798      	blx	r3
 80142b0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d001      	beq.n	80142bc <lfs_file_tell+0x24>
        return err;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	e01c      	b.n	80142f6 <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142c0:	6839      	ldr	r1, [r7, #0]
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7f9 f934 	bl	800d530 <lfs_mlist_isopen>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d106      	bne.n	80142dc <lfs_file_tell+0x44>
 80142ce:	4b0c      	ldr	r3, [pc, #48]	@ (8014300 <lfs_file_tell+0x68>)
 80142d0:	4a0c      	ldr	r2, [pc, #48]	@ (8014304 <lfs_file_tell+0x6c>)
 80142d2:	f641 0138 	movw	r1, #6200	@ 0x1838
 80142d6:	480c      	ldr	r0, [pc, #48]	@ (8014308 <lfs_file_tell+0x70>)
 80142d8:	f00e f8f2 	bl	80224c0 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 80142dc:	6839      	ldr	r1, [r7, #0]
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7fd ff4b 	bl	801217a <lfs_file_tell_>
 80142e4:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80142ea:	699b      	ldr	r3, [r3, #24]
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80142f0:	4610      	mov	r0, r2
 80142f2:	4798      	blx	r3
    return res;
 80142f4:	68bb      	ldr	r3, [r7, #8]
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3710      	adds	r7, #16
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	080267c8 	.word	0x080267c8
 8014304:	08029574 	.word	0x08029574
 8014308:	08025bf4 	.word	0x08025bf4

0801430c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801431a:	695b      	ldr	r3, [r3, #20]
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014320:	4610      	mov	r0, r2
 8014322:	4798      	blx	r3
 8014324:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d001      	beq.n	8014330 <lfs_mkdir+0x24>
        return err;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	e00c      	b.n	801434a <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8014330:	6839      	ldr	r1, [r7, #0]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f7fc fb12 	bl	801095c <lfs_mkdir_>
 8014338:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801433e:	699b      	ldr	r3, [r3, #24]
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014344:	4610      	mov	r0, r2
 8014346:	4798      	blx	r3
    return err;
 8014348:	68fb      	ldr	r3, [r7, #12]
}
 801434a:	4618      	mov	r0, r3
 801434c:	3710      	adds	r7, #16
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
	...

08014354 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8014354:	b580      	push	{r7, lr}
 8014356:	b086      	sub	sp, #24
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014364:	695b      	ldr	r3, [r3, #20]
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801436a:	4610      	mov	r0, r2
 801436c:	4798      	blx	r3
 801436e:	6178      	str	r0, [r7, #20]
    if (err) {
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d001      	beq.n	801437a <lfs_dir_open+0x26>
        return err;
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	e020      	b.n	80143bc <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801437e:	68b9      	ldr	r1, [r7, #8]
 8014380:	4618      	mov	r0, r3
 8014382:	f7f9 f8d5 	bl	800d530 <lfs_mlist_isopen>
 8014386:	4603      	mov	r3, r0
 8014388:	f083 0301 	eor.w	r3, r3, #1
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	d106      	bne.n	80143a0 <lfs_dir_open+0x4c>
 8014392:	4b0c      	ldr	r3, [pc, #48]	@ (80143c4 <lfs_dir_open+0x70>)
 8014394:	4a0c      	ldr	r2, [pc, #48]	@ (80143c8 <lfs_dir_open+0x74>)
 8014396:	f641 0174 	movw	r1, #6260	@ 0x1874
 801439a:	480c      	ldr	r0, [pc, #48]	@ (80143cc <lfs_dir_open+0x78>)
 801439c:	f00e f890 	bl	80224c0 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	68b9      	ldr	r1, [r7, #8]
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f7fc fc19 	bl	8010bdc <lfs_dir_open_>
 80143aa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80143b0:	699b      	ldr	r3, [r3, #24]
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80143b6:	4610      	mov	r0, r2
 80143b8:	4798      	blx	r3
    return err;
 80143ba:	697b      	ldr	r3, [r7, #20]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3718      	adds	r7, #24
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}
 80143c4:	08026800 	.word	0x08026800
 80143c8:	08029584 	.word	0x08029584
 80143cc:	08025bf4 	.word	0x08025bf4

080143d0 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80143de:	695b      	ldr	r3, [r3, #20]
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80143e4:	4610      	mov	r0, r2
 80143e6:	4798      	blx	r3
 80143e8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <lfs_dir_close+0x24>
        return err;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	e00c      	b.n	801440e <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 80143f4:	6839      	ldr	r1, [r7, #0]
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f7fc fc6a 	bl	8010cd0 <lfs_dir_close_>
 80143fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014402:	699b      	ldr	r3, [r3, #24]
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014408:	4610      	mov	r0, r2
 801440a:	4798      	blx	r3
    return err;
 801440c:	68fb      	ldr	r3, [r7, #12]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}

08014416 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8014416:	b580      	push	{r7, lr}
 8014418:	b086      	sub	sp, #24
 801441a:	af00      	add	r7, sp, #0
 801441c:	60f8      	str	r0, [r7, #12]
 801441e:	60b9      	str	r1, [r7, #8]
 8014420:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014426:	695b      	ldr	r3, [r3, #20]
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801442c:	4610      	mov	r0, r2
 801442e:	4798      	blx	r3
 8014430:	6178      	str	r0, [r7, #20]
    if (err) {
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d001      	beq.n	801443c <lfs_dir_read+0x26>
        return err;
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	e00d      	b.n	8014458 <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	68b9      	ldr	r1, [r7, #8]
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f7fc fc53 	bl	8010cec <lfs_dir_read_>
 8014446:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801444c:	699b      	ldr	r3, [r3, #24]
 801444e:	68fa      	ldr	r2, [r7, #12]
 8014450:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014452:	4610      	mov	r0, r2
 8014454:	4798      	blx	r3
    return err;
 8014456:	697b      	ldr	r3, [r7, #20]
}
 8014458:	4618      	mov	r0, r3
 801445a:	3718      	adds	r7, #24
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8014460:	b480      	push	{r7}
 8014462:	b087      	sub	sp, #28
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8014470:	2300      	movs	r3, #0
 8014472:	617b      	str	r3, [r7, #20]
 8014474:	e024      	b.n	80144c0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	091a      	lsrs	r2, r3, #4
 801447a:	6939      	ldr	r1, [r7, #16]
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	440b      	add	r3, r1
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	4619      	mov	r1, r3
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	404b      	eors	r3, r1
 8014488:	f003 030f 	and.w	r3, r3, #15
 801448c:	4912      	ldr	r1, [pc, #72]	@ (80144d8 <lfs_crc+0x78>)
 801448e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014492:	4053      	eors	r3, r2
 8014494:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	091a      	lsrs	r2, r3, #4
 801449a:	6939      	ldr	r1, [r7, #16]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	440b      	add	r3, r1
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	091b      	lsrs	r3, r3, #4
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	4619      	mov	r1, r3
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	404b      	eors	r3, r1
 80144ac:	f003 030f 	and.w	r3, r3, #15
 80144b0:	4909      	ldr	r1, [pc, #36]	@ (80144d8 <lfs_crc+0x78>)
 80144b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80144b6:	4053      	eors	r3, r2
 80144b8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	3301      	adds	r3, #1
 80144be:	617b      	str	r3, [r7, #20]
 80144c0:	697a      	ldr	r2, [r7, #20]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d3d6      	bcc.n	8014476 <lfs_crc+0x16>
    }

    return crc;
 80144c8:	68fb      	ldr	r3, [r7, #12]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	371c      	adds	r7, #28
 80144ce:	46bd      	mov	sp, r7
 80144d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d4:	4770      	bx	lr
 80144d6:	bf00      	nop
 80144d8:	08029594 	.word	0x08029594

080144dc <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	fb02 f303 	mul.w	r3, r2, r3
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7f7 fbb4 	bl	800bc5c <pvPortMalloc>
 80144f4:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d008      	beq.n	801450e <mg_calloc+0x32>
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	fb02 f303 	mul.w	r3, r2, r3
 8014504:	461a      	mov	r2, r3
 8014506:	2100      	movs	r1, #0
 8014508:	68f8      	ldr	r0, [r7, #12]
 801450a:	f00e fca5 	bl	8022e58 <memset>
  return p;
 801450e:	68fb      	ldr	r3, [r7, #12]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	e002      	b.n	801452e <mg_dns_free+0x16>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	60fb      	str	r3, [r7, #12]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	429a      	cmp	r2, r3
 8014536:	d1f7      	bne.n	8014528 <mg_dns_free+0x10>
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	601a      	str	r2, [r3, #0]
  free(d);
 8014540:	6838      	ldr	r0, [r7, #0]
 8014542:	f7f7 fc59 	bl	800bdf8 <vPortFree>
}
 8014546:	bf00      	nop
 8014548:	3710      	adds	r7, #16
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}

0801454e <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 801454e:	b580      	push	{r7, lr}
 8014550:	b086      	sub	sp, #24
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	3330      	adds	r3, #48	@ 0x30
 801455c:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	617b      	str	r3, [r7, #20]
 8014564:	e00d      	b.n	8014582 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	429a      	cmp	r2, r3
 8014574:	d103      	bne.n	801457e <mg_resolve_cancel+0x30>
 8014576:	6979      	ldr	r1, [r7, #20]
 8014578:	6938      	ldr	r0, [r7, #16]
 801457a:	f7ff ffcd 	bl	8014518 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	617b      	str	r3, [r7, #20]
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d1ee      	bne.n	8014566 <mg_resolve_cancel+0x18>
  }
}
 8014588:	bf00      	nop
 801458a:	bf00      	nop
 801458c:	3718      	adds	r7, #24
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}

08014592 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8014592:	b580      	push	{r7, lr}
 8014594:	b08c      	sub	sp, #48	@ 0x30
 8014596:	af04      	add	r7, sp, #16
 8014598:	60f8      	str	r0, [r7, #12]
 801459a:	60b9      	str	r1, [r7, #8]
 801459c:	607a      	str	r2, [r7, #4]
 801459e:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80145a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d005      	beq.n	80145b6 <mg_dns_parse_name_depth+0x24>
 80145aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d102      	bne.n	80145b6 <mg_dns_parse_name_depth+0x24>
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2200      	movs	r2, #0
 80145b4:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 80145b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b8:	2b05      	cmp	r3, #5
 80145ba:	f340 8084 	ble.w	80146c6 <mg_dns_parse_name_depth+0x134>
 80145be:	2300      	movs	r3, #0
 80145c0:	e093      	b.n	80146ea <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	4413      	add	r3, r2
 80145c8:	68fa      	ldr	r2, [r7, #12]
 80145ca:	4413      	add	r3, r2
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d103      	bne.n	80145de <mg_dns_parse_name_depth+0x4c>
      i++;
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	3301      	adds	r3, #1
 80145da:	61fb      	str	r3, [r7, #28]
      break;
 80145dc:	e07b      	b.n	80146d6 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80145de:	69bb      	ldr	r3, [r7, #24]
 80145e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d02f      	beq.n	8014648 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	021b      	lsls	r3, r3, #8
 80145ec:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	69fa      	ldr	r2, [r7, #28]
 80145f4:	440a      	add	r2, r1
 80145f6:	3201      	adds	r2, #1
 80145f8:	68f9      	ldr	r1, [r7, #12]
 80145fa:	440a      	add	r2, r1
 80145fc:	7812      	ldrb	r2, [r2, #0]
 80145fe:	4313      	orrs	r3, r2
 8014600:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	3301      	adds	r3, #1
 8014606:	68ba      	ldr	r2, [r7, #8]
 8014608:	429a      	cmp	r2, r3
 801460a:	d919      	bls.n	8014640 <mg_dns_parse_name_depth+0xae>
 801460c:	68fa      	ldr	r2, [r7, #12]
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	4413      	add	r3, r2
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d111      	bne.n	8014640 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 801461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801461e:	3301      	adds	r3, #1
 8014620:	9302      	str	r3, [sp, #8]
 8014622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	697a      	ldr	r2, [r7, #20]
 801462e:	68b9      	ldr	r1, [r7, #8]
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f7ff ffae 	bl	8014592 <mg_dns_parse_name_depth>
 8014636:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014638:	2b00      	cmp	r3, #0
 801463a:	d101      	bne.n	8014640 <mg_dns_parse_name_depth+0xae>
        return 0;
 801463c:	2300      	movs	r3, #0
 801463e:	e054      	b.n	80146ea <mg_dns_parse_name_depth+0x158>
      i += 2;
 8014640:	69fb      	ldr	r3, [r7, #28]
 8014642:	3302      	adds	r3, #2
 8014644:	61fb      	str	r3, [r7, #28]
      break;
 8014646:	e046      	b.n	80146d6 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	441a      	add	r2, r3
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	4413      	add	r3, r2
 8014652:	3301      	adds	r3, #1
 8014654:	68ba      	ldr	r2, [r7, #8]
 8014656:	429a      	cmp	r2, r3
 8014658:	d801      	bhi.n	801465e <mg_dns_parse_name_depth+0xcc>
 801465a:	2300      	movs	r3, #0
 801465c:	e045      	b.n	80146ea <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 801465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00b      	beq.n	801467c <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8014664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014668:	429a      	cmp	r2, r3
 801466a:	d204      	bcs.n	8014676 <mg_dns_parse_name_depth+0xe4>
 801466c:	683a      	ldr	r2, [r7, #0]
 801466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014670:	4413      	add	r3, r2
 8014672:	222e      	movs	r2, #46	@ 0x2e
 8014674:	701a      	strb	r2, [r3, #0]
      j++;
 8014676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014678:	3301      	adds	r3, #1
 801467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 801467c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	4413      	add	r3, r2
 8014682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014684:	429a      	cmp	r2, r3
 8014686:	d90c      	bls.n	80146a2 <mg_dns_parse_name_depth+0x110>
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801468c:	18d0      	adds	r0, r2, r3
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	4413      	add	r3, r2
 8014694:	3301      	adds	r3, #1
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	4413      	add	r3, r2
 801469a:	69ba      	ldr	r2, [r7, #24]
 801469c:	4619      	mov	r1, r3
 801469e:	f00e fcbc 	bl	802301a <memcpy>
    j += n;
 80146a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	4413      	add	r3, r2
 80146a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 80146aa:	69ba      	ldr	r2, [r7, #24]
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	4413      	add	r3, r2
 80146b0:	3301      	adds	r3, #1
 80146b2:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 80146b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d204      	bcs.n	80146c6 <mg_dns_parse_name_depth+0x134>
 80146bc:	683a      	ldr	r2, [r7, #0]
 80146be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146c0:	4413      	add	r3, r2
 80146c2:	2200      	movs	r2, #0
 80146c4:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	4413      	add	r3, r2
 80146cc:	3301      	adds	r3, #1
 80146ce:	68ba      	ldr	r2, [r7, #8]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	f63f af76 	bhi.w	80145c2 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80146d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d005      	beq.n	80146e8 <mg_dns_parse_name_depth+0x156>
 80146dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146de:	3b01      	subs	r3, #1
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	4413      	add	r3, r2
 80146e4:	2200      	movs	r2, #0
 80146e6:	701a      	strb	r2, [r3, #0]
  return i;
 80146e8:	69fb      	ldr	r3, [r7, #28]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3720      	adds	r7, #32
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}

080146f2 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 80146f2:	b580      	push	{r7, lr}
 80146f4:	b088      	sub	sp, #32
 80146f6:	af04      	add	r7, sp, #16
 80146f8:	60f8      	str	r0, [r7, #12]
 80146fa:	60b9      	str	r1, [r7, #8]
 80146fc:	607a      	str	r2, [r7, #4]
 80146fe:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8014700:	2300      	movs	r3, #0
 8014702:	9302      	str	r3, [sp, #8]
 8014704:	2300      	movs	r3, #0
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	68b9      	ldr	r1, [r7, #8]
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	f7ff ff3d 	bl	8014592 <mg_dns_parse_name_depth>
 8014718:	4603      	mov	r3, r0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8014722:	b580      	push	{r7, lr}
 8014724:	b088      	sub	sp, #32
 8014726:	af02      	add	r7, sp, #8
 8014728:	60f8      	str	r0, [r7, #12]
 801472a:	60b9      	str	r1, [r7, #8]
 801472c:	607a      	str	r2, [r7, #4]
 801472e:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4413      	add	r3, r2
 8014736:	617b      	str	r3, [r7, #20]
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	4413      	add	r3, r2
 801473e:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8014740:	2208      	movs	r2, #8
 8014742:	2100      	movs	r1, #0
 8014744:	6a38      	ldr	r0, [r7, #32]
 8014746:	f00e fb87 	bl	8022e58 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2b0b      	cmp	r3, #11
 801474e:	d801      	bhi.n	8014754 <mg_dns_parse_rr+0x32>
 8014750:	2300      	movs	r3, #0
 8014752:	e074      	b.n	801483e <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801475a:	d901      	bls.n	8014760 <mg_dns_parse_rr+0x3e>
 801475c:	2300      	movs	r3, #0
 801475e:	e06e      	b.n	801483e <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8014760:	697a      	ldr	r2, [r7, #20]
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	429a      	cmp	r2, r3
 8014766:	d301      	bcc.n	801476c <mg_dns_parse_rr+0x4a>
 8014768:	2300      	movs	r3, #0
 801476a:	e068      	b.n	801483e <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 801476c:	2300      	movs	r3, #0
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	2300      	movs	r3, #0
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	68b9      	ldr	r1, [r7, #8]
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	f7ff ffbb 	bl	80146f2 <mg_dns_parse_name>
 801477c:	4603      	mov	r3, r0
 801477e:	b29a      	uxth	r2, r3
 8014780:	6a3b      	ldr	r3, [r7, #32]
 8014782:	801a      	strh	r2, [r3, #0]
 8014784:	6a3b      	ldr	r3, [r7, #32]
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d101      	bne.n	8014790 <mg_dns_parse_rr+0x6e>
    return 0;
 801478c:	2300      	movs	r3, #0
 801478e:	e056      	b.n	801483e <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8014790:	6a3b      	ldr	r3, [r7, #32]
 8014792:	881b      	ldrh	r3, [r3, #0]
 8014794:	3304      	adds	r3, #4
 8014796:	697a      	ldr	r2, [r7, #20]
 8014798:	4413      	add	r3, r2
 801479a:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 801479c:	697a      	ldr	r2, [r7, #20]
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d901      	bls.n	80147a8 <mg_dns_parse_rr+0x86>
 80147a4:	2300      	movs	r3, #0
 80147a6:	e04a      	b.n	801483e <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	3b04      	subs	r3, #4
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	021b      	lsls	r3, r3, #8
 80147b0:	b21a      	sxth	r2, r3
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	3b03      	subs	r3, #3
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	b21b      	sxth	r3, r3
 80147ba:	4313      	orrs	r3, r2
 80147bc:	b21b      	sxth	r3, r3
 80147be:	b29a      	uxth	r2, r3
 80147c0:	6a3b      	ldr	r3, [r7, #32]
 80147c2:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	3b02      	subs	r3, #2
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	021b      	lsls	r3, r3, #8
 80147cc:	b21a      	sxth	r2, r3
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	b21b      	sxth	r3, r3
 80147d6:	4313      	orrs	r3, r2
 80147d8:	b21b      	sxth	r3, r3
 80147da:	b29a      	uxth	r2, r3
 80147dc:	6a3b      	ldr	r3, [r7, #32]
 80147de:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80147e0:	78fb      	ldrb	r3, [r7, #3]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d003      	beq.n	80147ee <mg_dns_parse_rr+0xcc>
 80147e6:	6a3b      	ldr	r3, [r7, #32]
 80147e8:	881b      	ldrh	r3, [r3, #0]
 80147ea:	3304      	adds	r3, #4
 80147ec:	e027      	b.n	801483e <mg_dns_parse_rr+0x11c>

  s += 6;
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	3306      	adds	r3, #6
 80147f2:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80147f4:	697a      	ldr	r2, [r7, #20]
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d901      	bls.n	8014800 <mg_dns_parse_rr+0xde>
 80147fc:	2300      	movs	r3, #0
 80147fe:	e01e      	b.n	801483e <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	3b02      	subs	r3, #2
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	021b      	lsls	r3, r3, #8
 8014808:	b21a      	sxth	r2, r3
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	3b01      	subs	r3, #1
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	b21b      	sxth	r3, r3
 8014812:	4313      	orrs	r3, r2
 8014814:	b21b      	sxth	r3, r3
 8014816:	b29a      	uxth	r2, r3
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 801481c:	6a3b      	ldr	r3, [r7, #32]
 801481e:	88db      	ldrh	r3, [r3, #6]
 8014820:	461a      	mov	r2, r3
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	4413      	add	r3, r2
 8014826:	693a      	ldr	r2, [r7, #16]
 8014828:	429a      	cmp	r2, r3
 801482a:	d201      	bcs.n	8014830 <mg_dns_parse_rr+0x10e>
 801482c:	2300      	movs	r3, #0
 801482e:	e006      	b.n	801483e <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8014830:	6a3b      	ldr	r3, [r7, #32]
 8014832:	881b      	ldrh	r3, [r3, #0]
 8014834:	461a      	mov	r2, r3
 8014836:	6a3b      	ldr	r3, [r7, #32]
 8014838:	88db      	ldrh	r3, [r3, #6]
 801483a:	4413      	add	r3, r2
 801483c:	330a      	adds	r3, #10
}
 801483e:	4618      	mov	r0, r3
 8014840:	3718      	adds	r7, #24
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
	...

08014848 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8014848:	b580      	push	{r7, lr}
 801484a:	b08e      	sub	sp, #56	@ 0x38
 801484c:	af02      	add	r7, sp, #8
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8014858:	230c      	movs	r3, #12
 801485a:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 801485c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8014860:	2100      	movs	r1, #0
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f00e faf8 	bl	8022e58 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	2b0b      	cmp	r3, #11
 801486c:	d801      	bhi.n	8014872 <mg_dns_parse+0x2a>
 801486e:	2300      	movs	r3, #0
 8014870:	e0aa      	b.n	80149c8 <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	889b      	ldrh	r3, [r3, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	f00d fa13 	bl	8021ca2 <mg_ntohs>
 801487c:	4603      	mov	r3, r0
 801487e:	2b01      	cmp	r3, #1
 8014880:	d901      	bls.n	8014886 <mg_dns_parse+0x3e>
 8014882:	2300      	movs	r3, #0
 8014884:	e0a0      	b.n	80149c8 <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8014886:	6a3b      	ldr	r3, [r7, #32]
 8014888:	88db      	ldrh	r3, [r3, #6]
 801488a:	4618      	mov	r0, r3
 801488c:	f00d fa09 	bl	8021ca2 <mg_ntohs>
 8014890:	4603      	mov	r3, r0
 8014892:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8014894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014896:	2b0a      	cmp	r3, #10
 8014898:	d910      	bls.n	80148bc <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 801489a:	4b4d      	ldr	r3, [pc, #308]	@ (80149d0 <mg_dns_parse+0x188>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b02      	cmp	r3, #2
 80148a0:	dd0a      	ble.n	80148b8 <mg_dns_parse+0x70>
 80148a2:	4b4c      	ldr	r3, [pc, #304]	@ (80149d4 <mg_dns_parse+0x18c>)
 80148a4:	f240 4293 	movw	r2, #1171	@ 0x493
 80148a8:	494b      	ldr	r1, [pc, #300]	@ (80149d8 <mg_dns_parse+0x190>)
 80148aa:	2003      	movs	r0, #3
 80148ac:	f005 ffda 	bl	801a864 <mg_log_prefix>
 80148b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80148b2:	484a      	ldr	r0, [pc, #296]	@ (80149dc <mg_dns_parse+0x194>)
 80148b4:	f006 f826 	bl	801a904 <mg_log>
    num_answers = 10;  // Sanity cap
 80148b8:	230a      	movs	r3, #10
 80148ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 80148bc:	6a3b      	ldr	r3, [r7, #32]
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f00d f9ee 	bl	8021ca2 <mg_ntohs>
 80148c6:	4603      	mov	r3, r0
 80148c8:	461a      	mov	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80148ce:	2300      	movs	r3, #0
 80148d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148d2:	e015      	b.n	8014900 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80148d4:	f107 0314 	add.w	r3, r7, #20
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	2301      	movs	r3, #1
 80148dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148de:	68b9      	ldr	r1, [r7, #8]
 80148e0:	68f8      	ldr	r0, [r7, #12]
 80148e2:	f7ff ff1e 	bl	8014722 <mg_dns_parse_rr>
 80148e6:	61f8      	str	r0, [r7, #28]
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d101      	bne.n	80148f2 <mg_dns_parse+0xaa>
 80148ee:	2300      	movs	r3, #0
 80148f0:	e06a      	b.n	80149c8 <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 80148f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	4413      	add	r3, r2
 80148f8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80148fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148fc:	3301      	adds	r3, #1
 80148fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014900:	6a3b      	ldr	r3, [r7, #32]
 8014902:	889b      	ldrh	r3, [r3, #4]
 8014904:	4618      	mov	r0, r3
 8014906:	f00d f9cc 	bl	8021ca2 <mg_ntohs>
 801490a:	4603      	mov	r3, r0
 801490c:	461a      	mov	r2, r3
 801490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014910:	4293      	cmp	r3, r2
 8014912:	d3df      	bcc.n	80148d4 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8014914:	2300      	movs	r3, #0
 8014916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014918:	e051      	b.n	80149be <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 801491a:	f107 0314 	add.w	r3, r7, #20
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	2300      	movs	r3, #0
 8014922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014924:	68b9      	ldr	r1, [r7, #8]
 8014926:	68f8      	ldr	r0, [r7, #12]
 8014928:	f7ff fefb 	bl	8014722 <mg_dns_parse_rr>
 801492c:	61f8      	str	r0, [r7, #28]
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d101      	bne.n	8014938 <mg_dns_parse+0xf0>
 8014934:	2300      	movs	r3, #0
 8014936:	e047      	b.n	80149c8 <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	3318      	adds	r3, #24
 801493c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014940:	9200      	str	r2, [sp, #0]
 8014942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014944:	68b9      	ldr	r1, [r7, #8]
 8014946:	68f8      	ldr	r0, [r7, #12]
 8014948:	f7ff fed3 	bl	80146f2 <mg_dns_parse_name>
    ofs += n;
 801494c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	4413      	add	r3, r2
 8014952:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8014954:	8b7b      	ldrh	r3, [r7, #26]
 8014956:	2b04      	cmp	r3, #4
 8014958:	d114      	bne.n	8014984 <mg_dns_parse+0x13c>
 801495a:	8afb      	ldrh	r3, [r7, #22]
 801495c:	2b01      	cmp	r3, #1
 801495e:	d111      	bne.n	8014984 <mg_dns_parse+0x13c>
 8014960:	8b3b      	ldrh	r3, [r7, #24]
 8014962:	2b01      	cmp	r3, #1
 8014964:	d10e      	bne.n	8014984 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2200      	movs	r2, #0
 801496a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	3304      	adds	r3, #4
 8014970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014972:	3a04      	subs	r2, #4
 8014974:	68f9      	ldr	r1, [r7, #12]
 8014976:	440a      	add	r2, r1
 8014978:	6812      	ldr	r2, [r2, #0]
 801497a:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2201      	movs	r2, #1
 8014980:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8014982:	e020      	b.n	80149c6 <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8014984:	8b7b      	ldrh	r3, [r7, #26]
 8014986:	2b10      	cmp	r3, #16
 8014988:	d116      	bne.n	80149b8 <mg_dns_parse+0x170>
 801498a:	8afb      	ldrh	r3, [r7, #22]
 801498c:	2b1c      	cmp	r3, #28
 801498e:	d113      	bne.n	80149b8 <mg_dns_parse+0x170>
 8014990:	8b3b      	ldrh	r3, [r7, #24]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d110      	bne.n	80149b8 <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2201      	movs	r2, #1
 801499a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	1d18      	adds	r0, r3, #4
 80149a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149a2:	3b10      	subs	r3, #16
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	4413      	add	r3, r2
 80149a8:	2210      	movs	r2, #16
 80149aa:	4619      	mov	r1, r3
 80149ac:	f00e fb35 	bl	802301a <memcpy>
      dm->resolved = true;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2201      	movs	r2, #1
 80149b4:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80149b6:	e006      	b.n	80149c6 <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 80149b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ba:	3301      	adds	r3, #1
 80149bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80149be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d3a9      	bcc.n	801491a <mg_dns_parse+0xd2>
    }
  }
  return true;
 80149c6:	2301      	movs	r3, #1
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3730      	adds	r7, #48	@ 0x30
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	20000294 	.word	0x20000294
 80149d4:	08029614 	.word	0x08029614
 80149d8:	08026838 	.word	0x08026838
 80149dc:	08026868 	.word	0x08026868

080149e0 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80149e0:	b5b0      	push	{r4, r5, r7, lr}
 80149e2:	b0d2      	sub	sp, #328	@ 0x148
 80149e4:	af02      	add	r7, sp, #8
 80149e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80149ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80149ee:	6018      	str	r0, [r3, #0]
 80149f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80149f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80149f8:	6019      	str	r1, [r3, #0]
 80149fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80149fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014a02:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014a04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014a08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	3330      	adds	r3, #48	@ 0x30
 8014a12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8014a16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014a1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d12d      	bne.n	8014a80 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8014a24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014a28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8014a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014a40:	e019      	b.n	8014a76 <dns_cb+0x96>
      tmp = d->next;
 8014a42:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8014a4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8014a54:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8014a58:	4290      	cmp	r0, r2
 8014a5a:	eb71 0303 	sbcs.w	r3, r1, r3
 8014a5e:	d206      	bcs.n	8014a6e <dns_cb+0x8e>
 8014a60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	4992      	ldr	r1, [pc, #584]	@ (8014cb0 <dns_cb+0x2d0>)
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f000 fb37 	bl	80150dc <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8014a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a72:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014a76:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d1e1      	bne.n	8014a42 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8014a7e:	e112      	b.n	8014ca6 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8014a80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014a84:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b07      	cmp	r3, #7
 8014a8c:	f040 80e4 	bne.w	8014c58 <dns_cb+0x278>
    int resolved = 0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8014a96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014a9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014aa2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014aa6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014aae:	f107 0210 	add.w	r2, r7, #16
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	f7ff fec8 	bl	8014848 <mg_dns_parse>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	f083 0301 	eor.w	r3, r3, #1
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d01e      	beq.n	8014b02 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8014ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8014cb4 <dns_cb+0x2d4>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	dd09      	ble.n	8014ae0 <dns_cb+0x100>
 8014acc:	4b7a      	ldr	r3, [pc, #488]	@ (8014cb8 <dns_cb+0x2d8>)
 8014ace:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8014ad2:	497a      	ldr	r1, [pc, #488]	@ (8014cbc <dns_cb+0x2dc>)
 8014ad4:	2001      	movs	r0, #1
 8014ad6:	f005 fec5 	bl	801a864 <mg_log_prefix>
 8014ada:	4879      	ldr	r0, [pc, #484]	@ (8014cc0 <dns_cb+0x2e0>)
 8014adc:	f005 ff12 	bl	801a904 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8014ae0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014ae4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014aec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014af0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014af8:	4619      	mov	r1, r3
 8014afa:	4610      	mov	r0, r2
 8014afc:	f005 ff38 	bl	801a970 <mg_hexdump>
 8014b00:	e090      	b.n	8014c24 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8014b02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014b0c:	e085      	b.n	8014c1a <dns_cb+0x23a>
        tmp = d->next;
 8014b0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8014b18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014b20:	881a      	ldrh	r2, [r3, #0]
 8014b22:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b26:	8a1b      	ldrh	r3, [r3, #16]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d171      	bne.n	8014c10 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8014b2c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014b36:	f003 0308 	and.w	r3, r3, #8
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d04a      	beq.n	8014bd6 <dns_cb+0x1f6>
          if (dm.resolved) {
 8014b40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014b48:	789b      	ldrb	r3, [r3, #2]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d038      	beq.n	8014bc0 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8014b4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014b56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014b5e:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8014b60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b64:	685a      	ldr	r2, [r3, #4]
 8014b66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014b6e:	f102 041c 	add.w	r4, r2, #28
 8014b72:	1d1d      	adds	r5, r3, #4
 8014b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b78:	682b      	ldr	r3, [r5, #0]
 8014b7a:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8014b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8014cb4 <dns_cb+0x2d4>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	dd16      	ble.n	8014bb2 <dns_cb+0x1d2>
 8014b84:	4b4c      	ldr	r3, [pc, #304]	@ (8014cb8 <dns_cb+0x2d8>)
 8014b86:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 8014b8a:	494c      	ldr	r1, [pc, #304]	@ (8014cbc <dns_cb+0x2dc>)
 8014b8c:	2003      	movs	r0, #3
 8014b8e:	f005 fe69 	bl	801a864 <mg_log_prefix>
 8014b92:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014b9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	331c      	adds	r3, #28
 8014ba2:	f107 0210 	add.w	r2, r7, #16
 8014ba6:	3218      	adds	r2, #24
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	4b46      	ldr	r3, [pc, #280]	@ (8014cc4 <dns_cb+0x2e4>)
 8014bac:	4846      	ldr	r0, [pc, #280]	@ (8014cc8 <dns_cb+0x2e8>)
 8014bae:	f005 fea9 	bl	801a904 <mg_log>
            mg_connect_resolved(d->c);
 8014bb2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f00b faab 	bl	8020114 <mg_connect_resolved>
 8014bbe:	e01d      	b.n	8014bfc <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8014bc0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014bc4:	6858      	ldr	r0, [r3, #4]
 8014bc6:	f107 0310 	add.w	r3, r7, #16
 8014bca:	3318      	adds	r3, #24
 8014bcc:	461a      	mov	r2, r3
 8014bce:	493f      	ldr	r1, [pc, #252]	@ (8014ccc <dns_cb+0x2ec>)
 8014bd0:	f000 fa84 	bl	80150dc <mg_error>
 8014bd4:	e012      	b.n	8014bfc <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8014bd6:	4b37      	ldr	r3, [pc, #220]	@ (8014cb4 <dns_cb+0x2d4>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	dd0e      	ble.n	8014bfc <dns_cb+0x21c>
 8014bde:	4b36      	ldr	r3, [pc, #216]	@ (8014cb8 <dns_cb+0x2d8>)
 8014be0:	f240 42da 	movw	r2, #1242	@ 0x4da
 8014be4:	4935      	ldr	r1, [pc, #212]	@ (8014cbc <dns_cb+0x2dc>)
 8014be6:	2001      	movs	r0, #1
 8014be8:	f005 fe3c 	bl	801a864 <mg_log_prefix>
 8014bec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	4836      	ldr	r0, [pc, #216]	@ (8014cd0 <dns_cb+0x2f0>)
 8014bf8:	f005 fe84 	bl	801a904 <mg_log>
        mg_dns_free(head, d);
 8014bfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8014c00:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8014c04:	f7ff fc88 	bl	8014518 <mg_dns_free>
        resolved = 1;
 8014c08:	2301      	movs	r3, #1
 8014c0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8014c0e:	e000      	b.n	8014c12 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8014c10:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8014c12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c16:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014c1a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f47f af75 	bne.w	8014b0e <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8014c24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d10d      	bne.n	8014c48 <dns_cb+0x268>
 8014c2c:	4b21      	ldr	r3, [pc, #132]	@ (8014cb4 <dns_cb+0x2d4>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	dd09      	ble.n	8014c48 <dns_cb+0x268>
 8014c34:	4b20      	ldr	r3, [pc, #128]	@ (8014cb8 <dns_cb+0x2d8>)
 8014c36:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8014c3a:	4920      	ldr	r1, [pc, #128]	@ (8014cbc <dns_cb+0x2dc>)
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	f005 fe11 	bl	801a864 <mg_log_prefix>
 8014c42:	4824      	ldr	r0, [pc, #144]	@ (8014cd4 <dns_cb+0x2f4>)
 8014c44:	f005 fe5e 	bl	801a904 <mg_log>
    c->recv.len = 0;
 8014c48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014c4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	2200      	movs	r2, #0
 8014c54:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8014c56:	e026      	b.n	8014ca6 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 8014c58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014c5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b09      	cmp	r3, #9
 8014c64:	d11f      	bne.n	8014ca6 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 8014c66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014c70:	e015      	b.n	8014c9e <dns_cb+0x2be>
      tmp = d->next;
 8014c72:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8014c7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	4915      	ldr	r1, [pc, #84]	@ (8014cd8 <dns_cb+0x2f8>)
 8014c84:	4618      	mov	r0, r3
 8014c86:	f000 fa29 	bl	80150dc <mg_error>
      mg_dns_free(head, d);
 8014c8a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8014c8e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8014c92:	f7ff fc41 	bl	8014518 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8014c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c9a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014c9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1e5      	bne.n	8014c72 <dns_cb+0x292>
}
 8014ca6:	bf00      	nop
 8014ca8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bdb0      	pop	{r4, r5, r7, pc}
 8014cb0:	08026894 	.word	0x08026894
 8014cb4:	20000294 	.word	0x20000294
 8014cb8:	08029624 	.word	0x08029624
 8014cbc:	08026838 	.word	0x08026838
 8014cc0:	080268a0 	.word	0x080268a0
 8014cc4:	08020a83 	.word	0x08020a83
 8014cc8:	080268bc 	.word	0x080268bc
 8014ccc:	080268cc 	.word	0x080268cc
 8014cd0:	080268e4 	.word	0x080268e4
 8014cd4:	080268fc 	.word	0x080268fc
 8014cd8:	0802690c 	.word	0x0802690c

08014cdc <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8014cdc:	b590      	push	{r4, r7, lr}
 8014cde:	b0cb      	sub	sp, #300	@ 0x12c
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8014ce6:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014cea:	6020      	str	r0, [r4, #0]
 8014cec:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8014cf0:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8014cf4:	6001      	str	r1, [r0, #0]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014cfc:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8014d00:	801a      	strh	r2, [r3, #0]
 8014d02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d06:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8014d0a:	460a      	mov	r2, r1
 8014d0c:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8014d0e:	f107 0314 	add.w	r3, r7, #20
 8014d12:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8014d16:	2100      	movs	r1, #0
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f00e f89d 	bl	8022e58 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8014d1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d22:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f00c ffba 	bl	8021ca2 <mg_ntohs>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	461a      	mov	r2, r3
 8014d32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014d3a:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8014d3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8014d40:	f00c ffaf 	bl	8021ca2 <mg_ntohs>
 8014d44:	4603      	mov	r3, r0
 8014d46:	461a      	mov	r2, r3
 8014d48:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014d50:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8014d52:	2001      	movs	r0, #1
 8014d54:	f00c ffa5 	bl	8021ca2 <mg_ntohs>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014d64:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8014d66:	2300      	movs	r3, #0
 8014d68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8014d6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014d70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8014d74:	e054      	b.n	8014e20 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8014d76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014d86:	4413      	add	r3, r2
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d8c:	d009      	beq.n	8014da2 <mg_dns_send+0xc6>
 8014d8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014d92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d32f      	bcc.n	8014e02 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8014da2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	b2d9      	uxtb	r1, r3
 8014db2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014db6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8014dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014dbe:	4413      	add	r3, r2
 8014dc0:	330c      	adds	r3, #12
 8014dc2:	460a      	mov	r2, r1
 8014dc4:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8014dc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014dca:	3301      	adds	r3, #1
 8014dcc:	f107 0214 	add.w	r2, r7, #20
 8014dd0:	3308      	adds	r3, #8
 8014dd2:	4413      	add	r3, r2
 8014dd4:	1d18      	adds	r0, r3, #4
 8014dd6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014dda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014de6:	18d1      	adds	r1, r2, r3
 8014de8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014dec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014df0:	1ad3      	subs	r3, r2, r3
 8014df2:	461a      	mov	r2, r3
 8014df4:	f00e f911 	bl	802301a <memcpy>
      n = i + 1;
 8014df8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8014e02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014e06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d209      	bcs.n	8014e2a <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8014e16:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8014e20:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014e24:	2bfa      	cmp	r3, #250	@ 0xfa
 8014e26:	d9a6      	bls.n	8014d76 <mg_dns_send+0x9a>
 8014e28:	e000      	b.n	8014e2c <mg_dns_send+0x150>
    if (i >= name->len) break;
 8014e2a:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8014e2c:	f107 0214 	add.w	r2, r7, #20
 8014e30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014e34:	3308      	adds	r3, #8
 8014e36:	4413      	add	r3, r2
 8014e38:	3304      	adds	r3, #4
 8014e3a:	2205      	movs	r2, #5
 8014e3c:	4916      	ldr	r1, [pc, #88]	@ (8014e98 <mg_dns_send+0x1bc>)
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f00e f8eb 	bl	802301a <memcpy>
  n += 5;
 8014e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014e48:	3305      	adds	r3, #5
 8014e4a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8014e4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014e52:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d009      	beq.n	8014e70 <mg_dns_send+0x194>
 8014e5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014e60:	3b03      	subs	r3, #3
 8014e62:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8014e66:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8014e6a:	4413      	add	r3, r2
 8014e6c:	221c      	movs	r2, #28
 8014e6e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8014e70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014e74:	f103 020c 	add.w	r2, r3, #12
 8014e78:	f107 0114 	add.w	r1, r7, #20
 8014e7c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8014e80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014e84:	6818      	ldr	r0, [r3, #0]
 8014e86:	f00b fc1b 	bl	80206c0 <mg_send>
 8014e8a:	4603      	mov	r3, r0
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd90      	pop	{r4, r7, pc}
 8014e96:	bf00      	nop
 8014e98:	08026918 	.word	0x08026918

08014e9c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8014e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014ea0:	b088      	sub	sp, #32
 8014ea2:	af02      	add	r7, sp, #8
 8014ea4:	60f8      	str	r0, [r7, #12]
 8014ea6:	60b9      	str	r1, [r7, #8]
 8014ea8:	607a      	str	r2, [r7, #4]
 8014eaa:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d104      	bne.n	8014ec2 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8014eb8:	494d      	ldr	r1, [pc, #308]	@ (8014ff0 <mg_sendnsreq+0x154>)
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	f000 f90e 	bl	80150dc <mg_error>
 8014ec0:	e017      	b.n	8014ef2 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d113      	bne.n	8014ef2 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	6858      	ldr	r0, [r3, #4]
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	6819      	ldr	r1, [r3, #0]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	f008 f92f 	bl	801d138 <mg_connect>
 8014eda:	4602      	mov	r2, r0
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d004      	beq.n	8014ef2 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	4a41      	ldr	r2, [pc, #260]	@ (8014ff4 <mg_sendnsreq+0x158>)
 8014eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d104      	bne.n	8014f04 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8014efa:	493f      	ldr	r1, [pc, #252]	@ (8014ff8 <mg_sendnsreq+0x15c>)
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f000 f8ed 	bl	80150dc <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8014f02:	e06f      	b.n	8014fe4 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8014f04:	2118      	movs	r1, #24
 8014f06:	2001      	movs	r0, #1
 8014f08:	f7ff fae8 	bl	80144dc <mg_calloc>
 8014f0c:	6178      	str	r0, [r7, #20]
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d104      	bne.n	8014f1e <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8014f14:	4939      	ldr	r1, [pc, #228]	@ (8014ffc <mg_sendnsreq+0x160>)
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f000 f8e0 	bl	80150dc <mg_error>
}
 8014f1c:	e062      	b.n	8014fe4 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f24:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d004      	beq.n	8014f36 <mg_sendnsreq+0x9a>
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	8a1b      	ldrh	r3, [r3, #16]
 8014f30:	3301      	adds	r3, #1
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	e000      	b.n	8014f38 <mg_sendnsreq+0x9c>
 8014f36:	2201      	movs	r2, #1
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8014f4e:	f00c ff39 	bl	8021dc4 <mg_millis>
 8014f52:	4602      	mov	r2, r0
 8014f54:	460b      	mov	r3, r1
 8014f56:	6879      	ldr	r1, [r7, #4]
 8014f58:	17c8      	asrs	r0, r1, #31
 8014f5a:	460c      	mov	r4, r1
 8014f5c:	4605      	mov	r5, r0
 8014f5e:	eb12 0804 	adds.w	r8, r2, r4
 8014f62:	eb43 0905 	adc.w	r9, r3, r5
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	68fa      	ldr	r2, [r7, #12]
 8014f70:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8014f78:	f043 0308 	orr.w	r3, r3, #8
 8014f7c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8014f80:	4b1f      	ldr	r3, [pc, #124]	@ (8015000 <mg_sendnsreq+0x164>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	dd18      	ble.n	8014fba <mg_sendnsreq+0x11e>
 8014f88:	4b1e      	ldr	r3, [pc, #120]	@ (8015004 <mg_sendnsreq+0x168>)
 8014f8a:	f240 521e 	movw	r2, #1310	@ 0x51e
 8014f8e:	491e      	ldr	r1, [pc, #120]	@ (8015008 <mg_sendnsreq+0x16c>)
 8014f90:	2004      	movs	r0, #4
 8014f92:	f005 fc67 	bl	801a864 <mg_log_prefix>
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	461c      	mov	r4, r3
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	6818      	ldr	r0, [r3, #0]
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	697a      	ldr	r2, [r7, #20]
 8014faa:	8a12      	ldrh	r2, [r2, #16]
 8014fac:	9201      	str	r2, [sp, #4]
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	4815      	ldr	r0, [pc, #84]	@ (801500c <mg_sendnsreq+0x170>)
 8014fb6:	f005 fca5 	bl	801a904 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	6858      	ldr	r0, [r3, #4]
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	8a1a      	ldrh	r2, [r3, #16]
 8014fc2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8014fc6:	68b9      	ldr	r1, [r7, #8]
 8014fc8:	f7ff fe88 	bl	8014cdc <mg_dns_send>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	f083 0301 	eor.w	r3, r3, #1
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d005      	beq.n	8014fe4 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	685b      	ldr	r3, [r3, #4]
 8014fdc:	490c      	ldr	r1, [pc, #48]	@ (8015010 <mg_sendnsreq+0x174>)
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f000 f87c 	bl	80150dc <mg_error>
}
 8014fe4:	bf00      	nop
 8014fe6:	3718      	adds	r7, #24
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014fee:	bf00      	nop
 8014ff0:	08026920 	.word	0x08026920
 8014ff4:	080149e1 	.word	0x080149e1
 8014ff8:	0802694c 	.word	0x0802694c
 8014ffc:	08026958 	.word	0x08026958
 8015000:	20000294 	.word	0x20000294
 8015004:	0802962c 	.word	0x0802962c
 8015008:	08026838 	.word	0x08026838
 801500c:	08026964 	.word	0x08026964
 8015010:	08026988 	.word	0x08026988

08015014 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8015014:	b580      	push	{r7, lr}
 8015016:	b088      	sub	sp, #32
 8015018:	af02      	add	r7, sp, #8
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 801501e:	f107 030c 	add.w	r3, r7, #12
 8015022:	6839      	ldr	r1, [r7, #0]
 8015024:	4618      	mov	r0, r3
 8015026:	f00c fd0c 	bl	8021a42 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 801502a:	6838      	ldr	r0, [r7, #0]
 801502c:	f00c fd3c 	bl	8021aa8 <mg_url_port>
 8015030:	4603      	mov	r3, r0
 8015032:	4618      	mov	r0, r3
 8015034:	f00c fe35 	bl	8021ca2 <mg_ntohs>
 8015038:	4603      	mov	r3, r0
 801503a:	461a      	mov	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	331c      	adds	r3, #28
 8015044:	461a      	mov	r2, r3
 8015046:	f107 030c 	add.w	r3, r7, #12
 801504a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801504e:	f007 ffa4 	bl	801cf9a <mg_aton>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d003      	beq.n	8015060 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f00b f85b 	bl	8020114 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 801505e:	e019      	b.n	8015094 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	7e1b      	ldrb	r3, [r3, #24]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d003      	beq.n	8015072 <mg_resolve+0x5e>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	330c      	adds	r3, #12
 8015070:	e002      	b.n	8015078 <mg_resolve+0x64>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	3304      	adds	r3, #4
 8015078:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	695a      	ldr	r2, [r3, #20]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	7e1b      	ldrb	r3, [r3, #24]
 8015086:	f107 010c 	add.w	r1, r7, #12
 801508a:	9300      	str	r3, [sp, #0]
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff ff04 	bl	8014e9c <mg_sendnsreq>
}
 8015094:	bf00      	nop
 8015096:	3718      	adds	r7, #24
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d006      	beq.n	80150c0 <mg_call+0x24>
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	68b9      	ldr	r1, [r7, #8]
 80150bc:	68f8      	ldr	r0, [r7, #12]
 80150be:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d005      	beq.n	80150d4 <mg_call+0x38>
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80150cc:	687a      	ldr	r2, [r7, #4]
 80150ce:	68b9      	ldr	r1, [r7, #8]
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	4798      	blx	r3
}
 80150d4:	bf00      	nop
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80150dc:	b40e      	push	{r1, r2, r3}
 80150de:	b580      	push	{r7, lr}
 80150e0:	b095      	sub	sp, #84	@ 0x54
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80150e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80150ea:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80150ec:	f107 030c 	add.w	r3, r7, #12
 80150f0:	f107 0010 	add.w	r0, r7, #16
 80150f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80150f6:	2140      	movs	r1, #64	@ 0x40
 80150f8:	f00b fba8 	bl	802084c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80150fc:	4b14      	ldr	r3, [pc, #80]	@ (8015150 <mg_error+0x74>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	dd0f      	ble.n	8015124 <mg_error+0x48>
 8015104:	4b13      	ldr	r3, [pc, #76]	@ (8015154 <mg_error+0x78>)
 8015106:	f240 5253 	movw	r2, #1363	@ 0x553
 801510a:	4913      	ldr	r1, [pc, #76]	@ (8015158 <mg_error+0x7c>)
 801510c:	2001      	movs	r0, #1
 801510e:	f005 fba9 	bl	801a864 <mg_log_prefix>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801511a:	f107 0310 	add.w	r3, r7, #16
 801511e:	480f      	ldr	r0, [pc, #60]	@ (801515c <mg_error+0x80>)
 8015120:	f005 fbf0 	bl	801a904 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801512a:	f043 0320 	orr.w	r3, r3, #32
 801512e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8015132:	f107 0310 	add.w	r3, r7, #16
 8015136:	461a      	mov	r2, r3
 8015138:	2100      	movs	r1, #0
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f7ff ffae 	bl	801509c <mg_call>
}
 8015140:	bf00      	nop
 8015142:	3754      	adds	r7, #84	@ 0x54
 8015144:	46bd      	mov	sp, r7
 8015146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801514a:	b003      	add	sp, #12
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	20000294 	.word	0x20000294
 8015154:	0802963c 	.word	0x0802963c
 8015158:	08026838 	.word	0x08026838
 801515c:	08026994 	.word	0x08026994

08015160 <is_digit>:
#endif




static bool is_digit(int c) {
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2b2f      	cmp	r3, #47	@ 0x2f
 801516c:	dd04      	ble.n	8015178 <is_digit+0x18>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	2b39      	cmp	r3, #57	@ 0x39
 8015172:	dc01      	bgt.n	8015178 <is_digit+0x18>
 8015174:	2301      	movs	r3, #1
 8015176:	e000      	b.n	801517a <is_digit+0x1a>
 8015178:	2300      	movs	r3, #0
 801517a:	f003 0301 	and.w	r3, r3, #1
 801517e:	b2db      	uxtb	r3, r3
}
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <addexp>:

static int addexp(char *buf, int e, int sign) {
 801518c:	b480      	push	{r7}
 801518e:	b087      	sub	sp, #28
 8015190:	af00      	add	r7, sp, #0
 8015192:	60f8      	str	r0, [r7, #12]
 8015194:	60b9      	str	r1, [r7, #8]
 8015196:	607a      	str	r2, [r7, #4]
  int n = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	1c5a      	adds	r2, r3, #1
 80151a0:	617a      	str	r2, [r7, #20]
 80151a2:	461a      	mov	r2, r3
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	4413      	add	r3, r2
 80151a8:	2265      	movs	r2, #101	@ 0x65
 80151aa:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	1c5a      	adds	r2, r3, #1
 80151b0:	617a      	str	r2, [r7, #20]
 80151b2:	461a      	mov	r2, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	4413      	add	r3, r2
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	b2d2      	uxtb	r2, r2
 80151bc:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80151c4:	dd01      	ble.n	80151ca <addexp+0x3e>
 80151c6:	2300      	movs	r3, #0
 80151c8:	e057      	b.n	801527a <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	2b09      	cmp	r3, #9
 80151ce:	dc07      	bgt.n	80151e0 <addexp+0x54>
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	1c5a      	adds	r2, r3, #1
 80151d4:	617a      	str	r2, [r7, #20]
 80151d6:	461a      	mov	r2, r3
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	4413      	add	r3, r2
 80151dc:	2230      	movs	r2, #48	@ 0x30
 80151de:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	2b63      	cmp	r3, #99	@ 0x63
 80151e4:	dd1c      	ble.n	8015220 <addexp+0x94>
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	4a27      	ldr	r2, [pc, #156]	@ (8015288 <addexp+0xfc>)
 80151ea:	fb82 1203 	smull	r1, r2, r2, r3
 80151ee:	1152      	asrs	r2, r2, #5
 80151f0:	17db      	asrs	r3, r3, #31
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	b2da      	uxtb	r2, r3
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	1c59      	adds	r1, r3, #1
 80151fa:	6179      	str	r1, [r7, #20]
 80151fc:	4619      	mov	r1, r3
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	440b      	add	r3, r1
 8015202:	3230      	adds	r2, #48	@ 0x30
 8015204:	b2d2      	uxtb	r2, r2
 8015206:	701a      	strb	r2, [r3, #0]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	4a1f      	ldr	r2, [pc, #124]	@ (8015288 <addexp+0xfc>)
 801520c:	fb82 1203 	smull	r1, r2, r2, r3
 8015210:	1151      	asrs	r1, r2, #5
 8015212:	17da      	asrs	r2, r3, #31
 8015214:	1a8a      	subs	r2, r1, r2
 8015216:	2164      	movs	r1, #100	@ 0x64
 8015218:	fb01 f202 	mul.w	r2, r1, r2
 801521c:	1a9b      	subs	r3, r3, r2
 801521e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	2b09      	cmp	r3, #9
 8015224:	dd1d      	ble.n	8015262 <addexp+0xd6>
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	4a18      	ldr	r2, [pc, #96]	@ (801528c <addexp+0x100>)
 801522a:	fb82 1203 	smull	r1, r2, r2, r3
 801522e:	1092      	asrs	r2, r2, #2
 8015230:	17db      	asrs	r3, r3, #31
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	b2da      	uxtb	r2, r3
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	1c59      	adds	r1, r3, #1
 801523a:	6179      	str	r1, [r7, #20]
 801523c:	4619      	mov	r1, r3
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	440b      	add	r3, r1
 8015242:	3230      	adds	r2, #48	@ 0x30
 8015244:	b2d2      	uxtb	r2, r2
 8015246:	701a      	strb	r2, [r3, #0]
 8015248:	68ba      	ldr	r2, [r7, #8]
 801524a:	4b10      	ldr	r3, [pc, #64]	@ (801528c <addexp+0x100>)
 801524c:	fb83 1302 	smull	r1, r3, r3, r2
 8015250:	1099      	asrs	r1, r3, #2
 8015252:	17d3      	asrs	r3, r2, #31
 8015254:	1ac9      	subs	r1, r1, r3
 8015256:	460b      	mov	r3, r1
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	440b      	add	r3, r1
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	1ad3      	subs	r3, r2, r3
 8015260:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	b2da      	uxtb	r2, r3
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	1c59      	adds	r1, r3, #1
 801526a:	6179      	str	r1, [r7, #20]
 801526c:	4619      	mov	r1, r3
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	440b      	add	r3, r1
 8015272:	3230      	adds	r2, #48	@ 0x30
 8015274:	b2d2      	uxtb	r2, r2
 8015276:	701a      	strb	r2, [r3, #0]
  return n;
 8015278:	697b      	ldr	r3, [r7, #20]
}
 801527a:	4618      	mov	r0, r3
 801527c:	371c      	adds	r7, #28
 801527e:	46bd      	mov	sp, r7
 8015280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	51eb851f 	.word	0x51eb851f
 801528c:	66666667 	.word	0x66666667

08015290 <xisinf>:

static int xisinf(double x) {
 8015290:	b480      	push	{r7}
 8015292:	b085      	sub	sp, #20
 8015294:	af00      	add	r7, sp, #0
 8015296:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 801529a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801529e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80152a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80152a6:	f04f 0200 	mov.w	r2, #0
 80152aa:	f04f 0300 	mov.w	r3, #0
 80152ae:	000a      	movs	r2, r1
 80152b0:	2300      	movs	r3, #0
 80152b2:	4613      	mov	r3, r2
 80152b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80152b8:	4a08      	ldr	r2, [pc, #32]	@ (80152dc <xisinf+0x4c>)
 80152ba:	4293      	cmp	r3, r2
 80152bc:	d106      	bne.n	80152cc <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80152be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80152c2:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d101      	bne.n	80152cc <xisinf+0x3c>
 80152c8:	2301      	movs	r3, #1
 80152ca:	e000      	b.n	80152ce <xisinf+0x3e>
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	7ff00000 	.word	0x7ff00000

080152e0 <xisnan>:

static int xisnan(double x) {
 80152e0:	b480      	push	{r7}
 80152e2:	b085      	sub	sp, #20
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80152ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80152f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80152f6:	f04f 0200 	mov.w	r2, #0
 80152fa:	f04f 0300 	mov.w	r3, #0
 80152fe:	000a      	movs	r2, r1
 8015300:	2300      	movs	r3, #0
 8015302:	4613      	mov	r3, r2
 8015304:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8015308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801530c:	4613      	mov	r3, r2
 801530e:	2b00      	cmp	r3, #0
 8015310:	bf14      	ite	ne
 8015312:	2301      	movne	r3, #1
 8015314:	2300      	moveq	r3, #0
 8015316:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8015318:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 801531a:	4a06      	ldr	r2, [pc, #24]	@ (8015334 <xisnan+0x54>)
 801531c:	4293      	cmp	r3, r2
 801531e:	bf8c      	ite	hi
 8015320:	2301      	movhi	r3, #1
 8015322:	2300      	movls	r3, #0
 8015324:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8015326:	4618      	mov	r0, r3
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	7ff00000 	.word	0x7ff00000

08015338 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8015338:	b5b0      	push	{r4, r5, r7, lr}
 801533a:	b09e      	sub	sp, #120	@ 0x78
 801533c:	af02      	add	r7, sp, #8
 801533e:	6178      	str	r0, [r7, #20]
 8015340:	6139      	str	r1, [r7, #16]
 8015342:	ed87 0b02 	vstr	d0, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
 8015348:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801534e:	2300      	movs	r3, #0
 8015350:	667b      	str	r3, [r7, #100]	@ 0x64
 8015352:	2300      	movs	r3, #0
 8015354:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8015356:	f04f 0200 	mov.w	r2, #0
 801535a:	f04f 0300 	mov.w	r3, #0
 801535e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015362:	f7eb fbc3 	bl	8000aec <__aeabi_dcmpeq>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d007      	beq.n	801537c <mg_dtoa+0x44>
 801536c:	4b7f      	ldr	r3, [pc, #508]	@ (801556c <mg_dtoa+0x234>)
 801536e:	4a80      	ldr	r2, [pc, #512]	@ (8015570 <mg_dtoa+0x238>)
 8015370:	6939      	ldr	r1, [r7, #16]
 8015372:	6978      	ldr	r0, [r7, #20]
 8015374:	f00b fa92 	bl	802089c <mg_snprintf>
 8015378:	4603      	mov	r3, r0
 801537a:	e2c9      	b.n	8015910 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 801537c:	ed97 0b02 	vldr	d0, [r7, #8]
 8015380:	f7ff ff86 	bl	8015290 <xisinf>
 8015384:	4603      	mov	r3, r0
 8015386:	2b00      	cmp	r3, #0
 8015388:	d014      	beq.n	80153b4 <mg_dtoa+0x7c>
 801538a:	f04f 0200 	mov.w	r2, #0
 801538e:	f04f 0300 	mov.w	r3, #0
 8015392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015396:	f7eb fbd1 	bl	8000b3c <__aeabi_dcmpgt>
 801539a:	4603      	mov	r3, r0
 801539c:	2b00      	cmp	r3, #0
 801539e:	d001      	beq.n	80153a4 <mg_dtoa+0x6c>
 80153a0:	4b74      	ldr	r3, [pc, #464]	@ (8015574 <mg_dtoa+0x23c>)
 80153a2:	e000      	b.n	80153a6 <mg_dtoa+0x6e>
 80153a4:	4b74      	ldr	r3, [pc, #464]	@ (8015578 <mg_dtoa+0x240>)
 80153a6:	4a72      	ldr	r2, [pc, #456]	@ (8015570 <mg_dtoa+0x238>)
 80153a8:	6939      	ldr	r1, [r7, #16]
 80153aa:	6978      	ldr	r0, [r7, #20]
 80153ac:	f00b fa76 	bl	802089c <mg_snprintf>
 80153b0:	4603      	mov	r3, r0
 80153b2:	e2ad      	b.n	8015910 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80153b4:	ed97 0b02 	vldr	d0, [r7, #8]
 80153b8:	f7ff ff92 	bl	80152e0 <xisnan>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d007      	beq.n	80153d2 <mg_dtoa+0x9a>
 80153c2:	4b6e      	ldr	r3, [pc, #440]	@ (801557c <mg_dtoa+0x244>)
 80153c4:	4a6a      	ldr	r2, [pc, #424]	@ (8015570 <mg_dtoa+0x238>)
 80153c6:	6939      	ldr	r1, [r7, #16]
 80153c8:	6978      	ldr	r0, [r7, #20]
 80153ca:	f00b fa67 	bl	802089c <mg_snprintf>
 80153ce:	4603      	mov	r3, r0
 80153d0:	e29e      	b.n	8015910 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80153d2:	f04f 0200 	mov.w	r2, #0
 80153d6:	f04f 0300 	mov.w	r3, #0
 80153da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80153de:	f7eb fb8f 	bl	8000b00 <__aeabi_dcmplt>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00d      	beq.n	8015404 <mg_dtoa+0xcc>
 80153e8:	68bc      	ldr	r4, [r7, #8]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80153f0:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80153f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80153f6:	1c5a      	adds	r2, r3, #1
 80153f8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80153fa:	3370      	adds	r3, #112	@ 0x70
 80153fc:	443b      	add	r3, r7
 80153fe:	222d      	movs	r2, #45	@ 0x2d
 8015400:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8015404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015408:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 801540c:	f04f 0200 	mov.w	r2, #0
 8015410:	4b5b      	ldr	r3, [pc, #364]	@ (8015580 <mg_dtoa+0x248>)
 8015412:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8015416:	e00a      	b.n	801542e <mg_dtoa+0xf6>
 8015418:	f04f 0200 	mov.w	r2, #0
 801541c:	4b59      	ldr	r3, [pc, #356]	@ (8015584 <mg_dtoa+0x24c>)
 801541e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015422:	f7eb f8fb 	bl	800061c <__aeabi_dmul>
 8015426:	4602      	mov	r2, r0
 8015428:	460b      	mov	r3, r1
 801542a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801542e:	f04f 0200 	mov.w	r2, #0
 8015432:	4b54      	ldr	r3, [pc, #336]	@ (8015584 <mg_dtoa+0x24c>)
 8015434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015438:	f7eb fb76 	bl	8000b28 <__aeabi_dcmpge>
 801543c:	4603      	mov	r3, r0
 801543e:	2b00      	cmp	r3, #0
 8015440:	d011      	beq.n	8015466 <mg_dtoa+0x12e>
 8015442:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801544a:	f7eb fa11 	bl	8000870 <__aeabi_ddiv>
 801544e:	4602      	mov	r2, r0
 8015450:	460b      	mov	r3, r1
 8015452:	4610      	mov	r0, r2
 8015454:	4619      	mov	r1, r3
 8015456:	f04f 0200 	mov.w	r2, #0
 801545a:	4b4a      	ldr	r3, [pc, #296]	@ (8015584 <mg_dtoa+0x24c>)
 801545c:	f7eb fb64 	bl	8000b28 <__aeabi_dcmpge>
 8015460:	4603      	mov	r3, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d1d8      	bne.n	8015418 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8015466:	e00a      	b.n	801547e <mg_dtoa+0x146>
 8015468:	f04f 0200 	mov.w	r2, #0
 801546c:	4b45      	ldr	r3, [pc, #276]	@ (8015584 <mg_dtoa+0x24c>)
 801546e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015472:	f7eb f9fd 	bl	8000870 <__aeabi_ddiv>
 8015476:	4602      	mov	r2, r0
 8015478:	460b      	mov	r3, r1
 801547a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801547e:	f04f 0200 	mov.w	r2, #0
 8015482:	4b3f      	ldr	r3, [pc, #252]	@ (8015580 <mg_dtoa+0x248>)
 8015484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015488:	f7eb fb44 	bl	8000b14 <__aeabi_dcmple>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d011      	beq.n	80154b6 <mg_dtoa+0x17e>
 8015492:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801549a:	f7eb f9e9 	bl	8000870 <__aeabi_ddiv>
 801549e:	4602      	mov	r2, r0
 80154a0:	460b      	mov	r3, r1
 80154a2:	4610      	mov	r0, r2
 80154a4:	4619      	mov	r1, r3
 80154a6:	f04f 0200 	mov.w	r2, #0
 80154aa:	4b35      	ldr	r3, [pc, #212]	@ (8015580 <mg_dtoa+0x248>)
 80154ac:	f7eb fb32 	bl	8000b14 <__aeabi_dcmple>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1d8      	bne.n	8015468 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80154b6:	2300      	movs	r3, #0
 80154b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80154ba:	f04f 0200 	mov.w	r2, #0
 80154be:	4b32      	ldr	r3, [pc, #200]	@ (8015588 <mg_dtoa+0x250>)
 80154c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80154c4:	f7eb f8aa 	bl	800061c <__aeabi_dmul>
 80154c8:	4602      	mov	r2, r0
 80154ca:	460b      	mov	r3, r1
 80154cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80154d0:	e00d      	b.n	80154ee <mg_dtoa+0x1b6>
 80154d2:	f04f 0200 	mov.w	r2, #0
 80154d6:	4b2b      	ldr	r3, [pc, #172]	@ (8015584 <mg_dtoa+0x24c>)
 80154d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80154dc:	f7eb f9c8 	bl	8000870 <__aeabi_ddiv>
 80154e0:	4602      	mov	r2, r0
 80154e2:	460b      	mov	r3, r1
 80154e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80154e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154ea:	3301      	adds	r3, #1
 80154ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80154ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	dbed      	blt.n	80154d2 <mg_dtoa+0x19a>
  d += t;
 80154f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80154fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80154fe:	f7ea fed7 	bl	80002b0 <__adddf3>
 8015502:	4602      	mov	r2, r0
 8015504:	460b      	mov	r3, r1
 8015506:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 801550a:	f04f 0200 	mov.w	r2, #0
 801550e:	4b1c      	ldr	r3, [pc, #112]	@ (8015580 <mg_dtoa+0x248>)
 8015510:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8015514:	e00d      	b.n	8015532 <mg_dtoa+0x1fa>
 8015516:	f04f 0200 	mov.w	r2, #0
 801551a:	4b1a      	ldr	r3, [pc, #104]	@ (8015584 <mg_dtoa+0x24c>)
 801551c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015520:	f7eb f87c 	bl	800061c <__aeabi_dmul>
 8015524:	4602      	mov	r2, r0
 8015526:	460b      	mov	r3, r1
 8015528:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801552c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801552e:	3301      	adds	r3, #1
 8015530:	663b      	str	r3, [r7, #96]	@ 0x60
 8015532:	f04f 0200 	mov.w	r2, #0
 8015536:	4b13      	ldr	r3, [pc, #76]	@ (8015584 <mg_dtoa+0x24c>)
 8015538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801553c:	f7eb faf4 	bl	8000b28 <__aeabi_dcmpge>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d011      	beq.n	801556a <mg_dtoa+0x232>
 8015546:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801554a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801554e:	f7eb f98f 	bl	8000870 <__aeabi_ddiv>
 8015552:	4602      	mov	r2, r0
 8015554:	460b      	mov	r3, r1
 8015556:	4610      	mov	r0, r2
 8015558:	4619      	mov	r1, r3
 801555a:	f04f 0200 	mov.w	r2, #0
 801555e:	4b09      	ldr	r3, [pc, #36]	@ (8015584 <mg_dtoa+0x24c>)
 8015560:	f7eb fae2 	bl	8000b28 <__aeabi_dcmpge>
 8015564:	4603      	mov	r3, r0
 8015566:	2b00      	cmp	r3, #0
 8015568:	d1d5      	bne.n	8015516 <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 801556a:	e01d      	b.n	80155a8 <mg_dtoa+0x270>
 801556c:	080269a0 	.word	0x080269a0
 8015570:	080269a4 	.word	0x080269a4
 8015574:	080269a8 	.word	0x080269a8
 8015578:	080269ac 	.word	0x080269ac
 801557c:	080269b4 	.word	0x080269b4
 8015580:	3ff00000 	.word	0x3ff00000
 8015584:	40240000 	.word	0x40240000
 8015588:	40140000 	.word	0x40140000
 801558c:	f04f 0200 	mov.w	r2, #0
 8015590:	4b9d      	ldr	r3, [pc, #628]	@ (8015808 <mg_dtoa+0x4d0>)
 8015592:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015596:	f7eb f96b 	bl	8000870 <__aeabi_ddiv>
 801559a:	4602      	mov	r2, r0
 801559c:	460b      	mov	r3, r1
 801559e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80155a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80155a4:	3b01      	subs	r3, #1
 80155a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80155a8:	f04f 0200 	mov.w	r2, #0
 80155ac:	4b97      	ldr	r3, [pc, #604]	@ (801580c <mg_dtoa+0x4d4>)
 80155ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80155b2:	f7eb faa5 	bl	8000b00 <__aeabi_dcmplt>
 80155b6:	4603      	mov	r3, r0
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d011      	beq.n	80155e0 <mg_dtoa+0x2a8>
 80155bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80155c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80155c4:	f7eb f954 	bl	8000870 <__aeabi_ddiv>
 80155c8:	4602      	mov	r2, r0
 80155ca:	460b      	mov	r3, r1
 80155cc:	4610      	mov	r0, r2
 80155ce:	4619      	mov	r1, r3
 80155d0:	f04f 0200 	mov.w	r2, #0
 80155d4:	4b8d      	ldr	r3, [pc, #564]	@ (801580c <mg_dtoa+0x4d4>)
 80155d6:	f7eb fa93 	bl	8000b00 <__aeabi_dcmplt>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1d5      	bne.n	801558c <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 80155e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	db33      	blt.n	8015650 <mg_dtoa+0x318>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	dd30      	ble.n	8015650 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80155ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80155f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80155f6:	f7eb f93b 	bl	8000870 <__aeabi_ddiv>
 80155fa:	4602      	mov	r2, r0
 80155fc:	460b      	mov	r3, r1
 80155fe:	ec43 2b17 	vmov	d7, r2, r3
 8015602:	78fb      	ldrb	r3, [r7, #3]
 8015604:	f107 0018 	add.w	r0, r7, #24
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	eeb0 0a47 	vmov.f32	s0, s14
 801560e:	eef0 0a67 	vmov.f32	s1, s15
 8015612:	2128      	movs	r1, #40	@ 0x28
 8015614:	f7ff fe90 	bl	8015338 <mg_dtoa>
 8015618:	4603      	mov	r3, r0
 801561a:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 801561c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801561e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015620:	4413      	add	r3, r2
 8015622:	f107 0218 	add.w	r2, r7, #24
 8015626:	4413      	add	r3, r2
 8015628:	222b      	movs	r2, #43	@ 0x2b
 801562a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff fdad 	bl	801518c <addexp>
 8015632:	4602      	mov	r2, r0
 8015634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015636:	4413      	add	r3, r2
 8015638:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 801563a:	f107 0318 	add.w	r3, r7, #24
 801563e:	9300      	str	r3, [sp, #0]
 8015640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015642:	4a73      	ldr	r2, [pc, #460]	@ (8015810 <mg_dtoa+0x4d8>)
 8015644:	6939      	ldr	r1, [r7, #16]
 8015646:	6978      	ldr	r0, [r7, #20]
 8015648:	f00b f928 	bl	802089c <mg_snprintf>
 801564c:	4603      	mov	r3, r0
 801564e:	e15f      	b.n	8015910 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	425b      	negs	r3, r3
 8015654:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015656:	429a      	cmp	r2, r3
 8015658:	dc34      	bgt.n	80156c4 <mg_dtoa+0x38c>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b01      	cmp	r3, #1
 801565e:	dd31      	ble.n	80156c4 <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015664:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015668:	f7eb f902 	bl	8000870 <__aeabi_ddiv>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	ec43 2b17 	vmov	d7, r2, r3
 8015674:	78fb      	ldrb	r3, [r7, #3]
 8015676:	f107 0018 	add.w	r0, r7, #24
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	eeb0 0a47 	vmov.f32	s0, s14
 8015680:	eef0 0a67 	vmov.f32	s1, s15
 8015684:	2128      	movs	r1, #40	@ 0x28
 8015686:	f7ff fe57 	bl	8015338 <mg_dtoa>
 801568a:	4603      	mov	r3, r0
 801568c:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 801568e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015692:	4413      	add	r3, r2
 8015694:	f107 0218 	add.w	r2, r7, #24
 8015698:	18d0      	adds	r0, r2, r3
 801569a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801569c:	425b      	negs	r3, r3
 801569e:	222d      	movs	r2, #45	@ 0x2d
 80156a0:	4619      	mov	r1, r3
 80156a2:	f7ff fd73 	bl	801518c <addexp>
 80156a6:	4602      	mov	r2, r0
 80156a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80156aa:	4413      	add	r3, r2
 80156ac:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80156ae:	f107 0318 	add.w	r3, r7, #24
 80156b2:	9300      	str	r3, [sp, #0]
 80156b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80156b6:	4a56      	ldr	r2, [pc, #344]	@ (8015810 <mg_dtoa+0x4d8>)
 80156b8:	6939      	ldr	r1, [r7, #16]
 80156ba:	6978      	ldr	r0, [r7, #20]
 80156bc:	f00b f8ee 	bl	802089c <mg_snprintf>
 80156c0:	4603      	mov	r3, r0
 80156c2:	e125      	b.n	8015910 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80156c4:	2300      	movs	r3, #0
 80156c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80156c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80156cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80156d0:	e03f      	b.n	8015752 <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 80156d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80156d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80156da:	f7eb f8c9 	bl	8000870 <__aeabi_ddiv>
 80156de:	4602      	mov	r2, r0
 80156e0:	460b      	mov	r3, r1
 80156e2:	4610      	mov	r0, r2
 80156e4:	4619      	mov	r1, r3
 80156e6:	f7eb fa33 	bl	8000b50 <__aeabi_d2iz>
 80156ea:	4603      	mov	r3, r0
 80156ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80156ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	dc02      	bgt.n	80156fa <mg_dtoa+0x3c2>
 80156f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	dd0c      	ble.n	8015714 <mg_dtoa+0x3dc>
 80156fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80156fc:	b2da      	uxtb	r2, r3
 80156fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015700:	1c59      	adds	r1, r3, #1
 8015702:	6679      	str	r1, [r7, #100]	@ 0x64
 8015704:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015706:	440b      	add	r3, r1
 8015708:	3230      	adds	r2, #48	@ 0x30
 801570a:	b2d2      	uxtb	r2, r2
 801570c:	3370      	adds	r3, #112	@ 0x70
 801570e:	443b      	add	r3, r7
 8015710:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015714:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015716:	f7ea ff17 	bl	8000548 <__aeabi_i2d>
 801571a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801571e:	f7ea ff7d 	bl	800061c <__aeabi_dmul>
 8015722:	4602      	mov	r2, r0
 8015724:	460b      	mov	r3, r1
 8015726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801572a:	f7ea fdbf 	bl	80002ac <__aeabi_dsub>
 801572e:	4602      	mov	r2, r0
 8015730:	460b      	mov	r3, r1
 8015732:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8015736:	f04f 0200 	mov.w	r2, #0
 801573a:	4b33      	ldr	r3, [pc, #204]	@ (8015808 <mg_dtoa+0x4d0>)
 801573c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015740:	f7eb f896 	bl	8000870 <__aeabi_ddiv>
 8015744:	4602      	mov	r2, r0
 8015746:	460b      	mov	r3, r1
 8015748:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 801574c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801574e:	3301      	adds	r3, #1
 8015750:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015752:	f04f 0200 	mov.w	r2, #0
 8015756:	4b2d      	ldr	r3, [pc, #180]	@ (801580c <mg_dtoa+0x4d4>)
 8015758:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801575c:	f7eb f9e4 	bl	8000b28 <__aeabi_dcmpge>
 8015760:	4603      	mov	r3, r0
 8015762:	2b00      	cmp	r3, #0
 8015764:	d004      	beq.n	8015770 <mg_dtoa+0x438>
 8015766:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801576a:	4413      	add	r3, r2
 801576c:	2b27      	cmp	r3, #39	@ 0x27
 801576e:	ddb0      	ble.n	80156d2 <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8015770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015772:	2b00      	cmp	r3, #0
 8015774:	d11b      	bne.n	80157ae <mg_dtoa+0x476>
 8015776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015778:	1c5a      	adds	r2, r3, #1
 801577a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801577c:	3370      	adds	r3, #112	@ 0x70
 801577e:	443b      	add	r3, r7
 8015780:	2230      	movs	r2, #48	@ 0x30
 8015782:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8015786:	e012      	b.n	80157ae <mg_dtoa+0x476>
 8015788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801578a:	1c5a      	adds	r2, r3, #1
 801578c:	667a      	str	r2, [r7, #100]	@ 0x64
 801578e:	3370      	adds	r3, #112	@ 0x70
 8015790:	443b      	add	r3, r7
 8015792:	2230      	movs	r2, #48	@ 0x30
 8015794:	f803 2c58 	strb.w	r2, [r3, #-88]
 8015798:	f04f 0200 	mov.w	r2, #0
 801579c:	4b1a      	ldr	r3, [pc, #104]	@ (8015808 <mg_dtoa+0x4d0>)
 801579e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80157a2:	f7eb f865 	bl	8000870 <__aeabi_ddiv>
 80157a6:	4602      	mov	r2, r0
 80157a8:	460b      	mov	r3, r1
 80157aa:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80157ae:	f04f 0200 	mov.w	r2, #0
 80157b2:	4b16      	ldr	r3, [pc, #88]	@ (801580c <mg_dtoa+0x4d4>)
 80157b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80157b8:	f7eb f9b6 	bl	8000b28 <__aeabi_dcmpge>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d004      	beq.n	80157cc <mg_dtoa+0x494>
 80157c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80157c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157c6:	4413      	add	r3, r2
 80157c8:	2b27      	cmp	r3, #39	@ 0x27
 80157ca:	dddd      	ble.n	8015788 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80157cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80157ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80157d0:	4413      	add	r3, r2
 80157d2:	2b27      	cmp	r3, #39	@ 0x27
 80157d4:	dc09      	bgt.n	80157ea <mg_dtoa+0x4b2>
 80157d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157d8:	1c5a      	adds	r2, r3, #1
 80157da:	66ba      	str	r2, [r7, #104]	@ 0x68
 80157dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80157de:	4413      	add	r3, r2
 80157e0:	3370      	adds	r3, #112	@ 0x70
 80157e2:	443b      	add	r3, r7
 80157e4:	222e      	movs	r2, #46	@ 0x2e
 80157e6:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80157ea:	2300      	movs	r3, #0
 80157ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80157ee:	a304      	add	r3, pc, #16	@ (adr r3, 8015800 <mg_dtoa+0x4c8>)
 80157f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80157f8:	e046      	b.n	8015888 <mg_dtoa+0x550>
 80157fa:	bf00      	nop
 80157fc:	f3af 8000 	nop.w
 8015800:	9999999a 	.word	0x9999999a
 8015804:	3fb99999 	.word	0x3fb99999
 8015808:	40240000 	.word	0x40240000
 801580c:	3ff00000 	.word	0x3ff00000
 8015810:	080269b8 	.word	0x080269b8
      int ch = (int) (d / t);
 8015814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015818:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801581c:	f7eb f828 	bl	8000870 <__aeabi_ddiv>
 8015820:	4602      	mov	r2, r0
 8015822:	460b      	mov	r3, r1
 8015824:	4610      	mov	r0, r2
 8015826:	4619      	mov	r1, r3
 8015828:	f7eb f992 	bl	8000b50 <__aeabi_d2iz>
 801582c:	4603      	mov	r3, r0
 801582e:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8015830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015832:	b2da      	uxtb	r2, r3
 8015834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015836:	1c59      	adds	r1, r3, #1
 8015838:	6679      	str	r1, [r7, #100]	@ 0x64
 801583a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801583c:	440b      	add	r3, r1
 801583e:	3230      	adds	r2, #48	@ 0x30
 8015840:	b2d2      	uxtb	r2, r2
 8015842:	3370      	adds	r3, #112	@ 0x70
 8015844:	443b      	add	r3, r7
 8015846:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 801584a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801584c:	f7ea fe7c 	bl	8000548 <__aeabi_i2d>
 8015850:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015854:	f7ea fee2 	bl	800061c <__aeabi_dmul>
 8015858:	4602      	mov	r2, r0
 801585a:	460b      	mov	r3, r1
 801585c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015860:	f7ea fd24 	bl	80002ac <__aeabi_dsub>
 8015864:	4602      	mov	r2, r0
 8015866:	460b      	mov	r3, r1
 8015868:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 801586c:	f04f 0200 	mov.w	r2, #0
 8015870:	4b29      	ldr	r3, [pc, #164]	@ (8015918 <mg_dtoa+0x5e0>)
 8015872:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015876:	f7ea fffb 	bl	8000870 <__aeabi_ddiv>
 801587a:	4602      	mov	r2, r0
 801587c:	460b      	mov	r3, r1
 801587e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8015882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015884:	3301      	adds	r3, #1
 8015886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015888:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801588a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801588c:	4413      	add	r3, r2
 801588e:	2b27      	cmp	r3, #39	@ 0x27
 8015890:	dc07      	bgt.n	80158a2 <mg_dtoa+0x56a>
 8015892:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	429a      	cmp	r2, r3
 8015898:	dbbc      	blt.n	8015814 <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 801589a:	e002      	b.n	80158a2 <mg_dtoa+0x56a>
 801589c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801589e:	3b01      	subs	r3, #1
 80158a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80158a2:	78fb      	ldrb	r3, [r7, #3]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d00c      	beq.n	80158c2 <mg_dtoa+0x58a>
 80158a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	dd09      	ble.n	80158c2 <mg_dtoa+0x58a>
 80158ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80158b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158b2:	4413      	add	r3, r2
 80158b4:	3b01      	subs	r3, #1
 80158b6:	3370      	adds	r3, #112	@ 0x70
 80158b8:	443b      	add	r3, r7
 80158ba:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80158be:	2b30      	cmp	r3, #48	@ 0x30
 80158c0:	d0ec      	beq.n	801589c <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80158c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dd0c      	ble.n	80158e2 <mg_dtoa+0x5aa>
 80158c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80158ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158cc:	4413      	add	r3, r2
 80158ce:	3b01      	subs	r3, #1
 80158d0:	3370      	adds	r3, #112	@ 0x70
 80158d2:	443b      	add	r3, r7
 80158d4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80158d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80158da:	d102      	bne.n	80158e2 <mg_dtoa+0x5aa>
 80158dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158de:	3b01      	subs	r3, #1
 80158e0:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 80158e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80158e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80158e6:	4413      	add	r3, r2
 80158e8:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80158ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158ec:	2b27      	cmp	r3, #39	@ 0x27
 80158ee:	dd01      	ble.n	80158f4 <mg_dtoa+0x5bc>
 80158f0:	2327      	movs	r3, #39	@ 0x27
 80158f2:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 80158f4:	f107 0218 	add.w	r2, r7, #24
 80158f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80158fa:	4413      	add	r3, r2
 80158fc:	2200      	movs	r2, #0
 80158fe:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8015900:	f107 0318 	add.w	r3, r7, #24
 8015904:	4a05      	ldr	r2, [pc, #20]	@ (801591c <mg_dtoa+0x5e4>)
 8015906:	6939      	ldr	r1, [r7, #16]
 8015908:	6978      	ldr	r0, [r7, #20]
 801590a:	f00a ffc7 	bl	802089c <mg_snprintf>
 801590e:	4603      	mov	r3, r0
}
 8015910:	4618      	mov	r0, r3
 8015912:	3770      	adds	r7, #112	@ 0x70
 8015914:	46bd      	mov	sp, r7
 8015916:	bdb0      	pop	{r4, r5, r7, pc}
 8015918:	40240000 	.word	0x40240000
 801591c:	080269a4 	.word	0x080269a4

08015920 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8015920:	b5b0      	push	{r4, r5, r7, lr}
 8015922:	b08c      	sub	sp, #48	@ 0x30
 8015924:	af00      	add	r7, sp, #0
 8015926:	60f8      	str	r0, [r7, #12]
 8015928:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 801592c:	4b53      	ldr	r3, [pc, #332]	@ (8015a7c <mg_lld+0x15c>)
 801592e:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8015930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015934:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8015938:	2300      	movs	r3, #0
 801593a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801593c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015940:	2b00      	cmp	r3, #0
 8015942:	d012      	beq.n	801596a <mg_lld+0x4a>
 8015944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015948:	2b00      	cmp	r3, #0
 801594a:	da0e      	bge.n	801596a <mg_lld+0x4a>
 801594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801594e:	1c5a      	adds	r2, r3, #1
 8015950:	627a      	str	r2, [r7, #36]	@ 0x24
 8015952:	68fa      	ldr	r2, [r7, #12]
 8015954:	4413      	add	r3, r2
 8015956:	222d      	movs	r2, #45	@ 0x2d
 8015958:	701a      	strb	r2, [r3, #0]
 801595a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801595e:	2100      	movs	r1, #0
 8015960:	4254      	negs	r4, r2
 8015962:	eb61 0503 	sbc.w	r5, r1, r3
 8015966:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801596a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801596e:	2b00      	cmp	r3, #0
 8015970:	d021      	beq.n	80159b6 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8015972:	2300      	movs	r3, #0
 8015974:	623b      	str	r3, [r7, #32]
 8015976:	e019      	b.n	80159ac <mg_lld+0x8c>
 8015978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801597a:	f003 030f 	and.w	r3, r3, #15
 801597e:	69ba      	ldr	r2, [r7, #24]
 8015980:	441a      	add	r2, r3
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	1c59      	adds	r1, r3, #1
 8015986:	6239      	str	r1, [r7, #32]
 8015988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801598a:	440b      	add	r3, r1
 801598c:	68f9      	ldr	r1, [r7, #12]
 801598e:	440b      	add	r3, r1
 8015990:	7812      	ldrb	r2, [r2, #0]
 8015992:	701a      	strb	r2, [r3, #0]
 8015994:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015998:	f04f 0200 	mov.w	r2, #0
 801599c:	f04f 0300 	mov.w	r3, #0
 80159a0:	0902      	lsrs	r2, r0, #4
 80159a2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80159a6:	090b      	lsrs	r3, r1, #4
 80159a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80159ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80159b0:	4313      	orrs	r3, r2
 80159b2:	d1e1      	bne.n	8015978 <mg_lld+0x58>
 80159b4:	e025      	b.n	8015a02 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80159b6:	2300      	movs	r3, #0
 80159b8:	623b      	str	r3, [r7, #32]
 80159ba:	e01e      	b.n	80159fa <mg_lld+0xda>
 80159bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80159c0:	f04f 020a 	mov.w	r2, #10
 80159c4:	f04f 0300 	mov.w	r3, #0
 80159c8:	f7eb f90a 	bl	8000be0 <__aeabi_uldivmod>
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	441a      	add	r2, r3
 80159d0:	6a3b      	ldr	r3, [r7, #32]
 80159d2:	1c59      	adds	r1, r3, #1
 80159d4:	6239      	str	r1, [r7, #32]
 80159d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80159d8:	440b      	add	r3, r1
 80159da:	68f9      	ldr	r1, [r7, #12]
 80159dc:	440b      	add	r3, r1
 80159de:	7812      	ldrb	r2, [r2, #0]
 80159e0:	701a      	strb	r2, [r3, #0]
 80159e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80159e6:	f04f 020a 	mov.w	r2, #10
 80159ea:	f04f 0300 	mov.w	r3, #0
 80159ee:	f7eb f8f7 	bl	8000be0 <__aeabi_uldivmod>
 80159f2:	4602      	mov	r2, r0
 80159f4:	460b      	mov	r3, r1
 80159f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80159fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80159fe:	4313      	orrs	r3, r2
 8015a00:	d1dc      	bne.n	80159bc <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8015a02:	2300      	movs	r3, #0
 8015a04:	61fb      	str	r3, [r7, #28]
 8015a06:	e022      	b.n	8015a4e <mg_lld+0x12e>
    char t = buf[s + i];
 8015a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	4413      	add	r3, r2
 8015a0e:	68fa      	ldr	r2, [r7, #12]
 8015a10:	4413      	add	r3, r2
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8015a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a18:	6a3b      	ldr	r3, [r7, #32]
 8015a1a:	441a      	add	r2, r3
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	1ad3      	subs	r3, r2, r3
 8015a20:	3b01      	subs	r3, #1
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	441a      	add	r2, r3
 8015a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	440b      	add	r3, r1
 8015a2c:	68f9      	ldr	r1, [r7, #12]
 8015a2e:	440b      	add	r3, r1
 8015a30:	7812      	ldrb	r2, [r2, #0]
 8015a32:	701a      	strb	r2, [r3, #0]
 8015a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	441a      	add	r2, r3
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	1ad3      	subs	r3, r2, r3
 8015a3e:	3b01      	subs	r3, #1
 8015a40:	68fa      	ldr	r2, [r7, #12]
 8015a42:	4413      	add	r3, r2
 8015a44:	7dfa      	ldrb	r2, [r7, #23]
 8015a46:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8015a48:	69fb      	ldr	r3, [r7, #28]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	61fb      	str	r3, [r7, #28]
 8015a4e:	6a3b      	ldr	r3, [r7, #32]
 8015a50:	085b      	lsrs	r3, r3, #1
 8015a52:	69fa      	ldr	r2, [r7, #28]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d3d7      	bcc.n	8015a08 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8015a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	d106      	bne.n	8015a6e <mg_lld+0x14e>
 8015a60:	6a3b      	ldr	r3, [r7, #32]
 8015a62:	1c5a      	adds	r2, r3, #1
 8015a64:	623a      	str	r2, [r7, #32]
 8015a66:	68fa      	ldr	r2, [r7, #12]
 8015a68:	4413      	add	r3, r2
 8015a6a:	2230      	movs	r2, #48	@ 0x30
 8015a6c:	701a      	strb	r2, [r3, #0]
  return n + s;
 8015a6e:	6a3a      	ldr	r2, [r7, #32]
 8015a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a72:	4413      	add	r3, r2
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3730      	adds	r7, #48	@ 0x30
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8015a7c:	080269c0 	.word	0x080269c0

08015a80 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	607a      	str	r2, [r7, #4]
 8015a8c:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8015a92:	e009      	b.n	8015aa8 <scpy+0x28>
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	1c5a      	adds	r2, r3, #1
 8015a98:	617a      	str	r2, [r7, #20]
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	781a      	ldrb	r2, [r3, #0]
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	68b9      	ldr	r1, [r7, #8]
 8015aa4:	4610      	mov	r0, r2
 8015aa6:	4798      	blx	r3
 8015aa8:	697a      	ldr	r2, [r7, #20]
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d205      	bcs.n	8015abc <scpy+0x3c>
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1eb      	bne.n	8015a94 <scpy+0x14>
  return i;
 8015abc:	697b      	ldr	r3, [r7, #20]
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3718      	adds	r7, #24
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8015ac6:	b40c      	push	{r2, r3}
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8015ad6:	f107 031c 	add.w	r3, r7, #28
 8015ada:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8015adc:	f107 0308 	add.w	r3, r7, #8
 8015ae0:	69ba      	ldr	r2, [r7, #24]
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f000 f809 	bl	8015afc <mg_vxprintf>
 8015aea:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8015aec:	68fb      	ldr	r3, [r7, #12]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3710      	adds	r7, #16
 8015af2:	46bd      	mov	sp, r7
 8015af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015af8:	b002      	add	sp, #8
 8015afa:	4770      	bx	lr

08015afc <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8015afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015b00:	b0a6      	sub	sp, #152	@ 0x98
 8015b02:	af02      	add	r7, sp, #8
 8015b04:	60f8      	str	r0, [r7, #12]
 8015b06:	60b9      	str	r1, [r7, #8]
 8015b08:	607a      	str	r2, [r7, #4]
 8015b0a:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015b12:	2300      	movs	r3, #0
 8015b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8015b18:	e383      	b.n	8016222 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b20:	4413      	add	r3, r2
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	2b25      	cmp	r3, #37	@ 0x25
 8015b26:	f040 8369 	bne.w	80161fc <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015b2e:	2300      	movs	r3, #0
 8015b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015b32:	2300      	movs	r3, #0
 8015b34:	677b      	str	r3, [r7, #116]	@ 0x74
 8015b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015b3a:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8015b3c:	2320      	movs	r3, #32
 8015b3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8015b42:	2300      	movs	r3, #0
 8015b44:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8015b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b58:	4413      	add	r3, r2
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8015b60:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015b64:	2b23      	cmp	r3, #35	@ 0x23
 8015b66:	d10e      	bne.n	8015b86 <mg_vxprintf+0x8a>
 8015b68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b72:	3301      	adds	r3, #1
 8015b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b7e:	4413      	add	r3, r2
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8015b86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015b8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b8c:	d110      	bne.n	8015bb0 <mg_vxprintf+0xb4>
 8015b8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8015b92:	3301      	adds	r3, #1
 8015b94:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8015b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015ba8:	4413      	add	r3, r2
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8015bb0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015bb4:	2b30      	cmp	r3, #48	@ 0x30
 8015bb6:	d127      	bne.n	8015c08 <mg_vxprintf+0x10c>
 8015bb8:	2330      	movs	r3, #48	@ 0x30
 8015bba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8015bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015bce:	4413      	add	r3, r2
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8015bd6:	e017      	b.n	8015c08 <mg_vxprintf+0x10c>
 8015bd8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8015bda:	4613      	mov	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	4413      	add	r3, r2
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	677b      	str	r3, [r7, #116]	@ 0x74
 8015be4:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8015be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015bea:	4413      	add	r3, r2
 8015bec:	3b30      	subs	r3, #48	@ 0x30
 8015bee:	677b      	str	r3, [r7, #116]	@ 0x74
 8015bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c00:	4413      	add	r3, r2
 8015c02:	781b      	ldrb	r3, [r3, #0]
 8015c04:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8015c08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ff faa7 	bl	8015160 <is_digit>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d1df      	bne.n	8015bd8 <mg_vxprintf+0xdc>
      if (c == '.') {
 8015c18:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c1e:	d153      	bne.n	8015cc8 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8015c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c24:	3301      	adds	r3, #1
 8015c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015c2a:	687a      	ldr	r2, [r7, #4]
 8015c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c30:	4413      	add	r3, r2
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8015c38:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c3e:	d113      	bne.n	8015c68 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	1d19      	adds	r1, r3, #4
 8015c46:	683a      	ldr	r2, [r7, #0]
 8015c48:	6011      	str	r1, [r2, #0]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8015c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c52:	3301      	adds	r3, #1
 8015c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c5e:	4413      	add	r3, r2
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8015c66:	e02f      	b.n	8015cc8 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8015c6c:	e017      	b.n	8015c9e <mg_vxprintf+0x1a2>
 8015c6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8015c70:	4613      	mov	r3, r2
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	4413      	add	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	673b      	str	r3, [r7, #112]	@ 0x70
 8015c7a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8015c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015c80:	4413      	add	r3, r2
 8015c82:	3b30      	subs	r3, #48	@ 0x30
 8015c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8015c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c8a:	3301      	adds	r3, #1
 8015c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015c96:	4413      	add	r3, r2
 8015c98:	781b      	ldrb	r3, [r3, #0]
 8015c9a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8015c9e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7ff fa5c 	bl	8015160 <is_digit>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1df      	bne.n	8015c6e <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8015cae:	e00b      	b.n	8015cc8 <mg_vxprintf+0x1cc>
 8015cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015cc0:	4413      	add	r3, r2
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8015cc8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015ccc:	2b68      	cmp	r3, #104	@ 0x68
 8015cce:	d0ef      	beq.n	8015cb0 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8015cd0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015cd4:	2b6c      	cmp	r3, #108	@ 0x6c
 8015cd6:	d121      	bne.n	8015d1c <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8015cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015cda:	3301      	adds	r3, #1
 8015cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015cee:	4413      	add	r3, r2
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8015cf6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015cfa:	2b6c      	cmp	r3, #108	@ 0x6c
 8015cfc:	d10e      	bne.n	8015d1c <mg_vxprintf+0x220>
 8015cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015d00:	3301      	adds	r3, #1
 8015d02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d08:	3301      	adds	r3, #1
 8015d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015d14:	4413      	add	r3, r2
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8015d1c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d20:	2b70      	cmp	r3, #112	@ 0x70
 8015d22:	d103      	bne.n	8015d2c <mg_vxprintf+0x230>
 8015d24:	2301      	movs	r3, #1
 8015d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015d28:	2301      	movs	r3, #1
 8015d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8015d2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d30:	2b64      	cmp	r3, #100	@ 0x64
 8015d32:	d018      	beq.n	8015d66 <mg_vxprintf+0x26a>
 8015d34:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d38:	2b75      	cmp	r3, #117	@ 0x75
 8015d3a:	d014      	beq.n	8015d66 <mg_vxprintf+0x26a>
 8015d3c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d40:	2b78      	cmp	r3, #120	@ 0x78
 8015d42:	d010      	beq.n	8015d66 <mg_vxprintf+0x26a>
 8015d44:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d48:	2b58      	cmp	r3, #88	@ 0x58
 8015d4a:	d00c      	beq.n	8015d66 <mg_vxprintf+0x26a>
 8015d4c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d50:	2b70      	cmp	r3, #112	@ 0x70
 8015d52:	d008      	beq.n	8015d66 <mg_vxprintf+0x26a>
 8015d54:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d58:	2b67      	cmp	r3, #103	@ 0x67
 8015d5a:	d004      	beq.n	8015d66 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8015d5c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d60:	2b66      	cmp	r3, #102	@ 0x66
 8015d62:	f040 816c 	bne.w	801603e <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8015d66:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d6a:	2b64      	cmp	r3, #100	@ 0x64
 8015d6c:	bf0c      	ite	eq
 8015d6e:	2301      	moveq	r3, #1
 8015d70:	2300      	movne	r3, #0
 8015d72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015d76:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d7a:	2b78      	cmp	r3, #120	@ 0x78
 8015d7c:	d007      	beq.n	8015d8e <mg_vxprintf+0x292>
 8015d7e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d82:	2b58      	cmp	r3, #88	@ 0x58
 8015d84:	d003      	beq.n	8015d8e <mg_vxprintf+0x292>
 8015d86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015d8a:	2b70      	cmp	r3, #112	@ 0x70
 8015d8c:	d101      	bne.n	8015d92 <mg_vxprintf+0x296>
 8015d8e:	2301      	movs	r3, #1
 8015d90:	e000      	b.n	8015d94 <mg_vxprintf+0x298>
 8015d92:	2300      	movs	r3, #0
 8015d94:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8015d98:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015d9c:	f003 0301 	and.w	r3, r3, #1
 8015da0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8015da4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d001      	beq.n	8015dae <mg_vxprintf+0x2b2>
 8015daa:	2302      	movs	r3, #2
 8015dac:	e000      	b.n	8015db0 <mg_vxprintf+0x2b4>
 8015dae:	2300      	movs	r3, #0
 8015db0:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8015db2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015db6:	2b67      	cmp	r3, #103	@ 0x67
 8015db8:	d003      	beq.n	8015dc2 <mg_vxprintf+0x2c6>
 8015dba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015dbe:	2b66      	cmp	r3, #102	@ 0x66
 8015dc0:	d124      	bne.n	8015e0c <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	3307      	adds	r3, #7
 8015dc8:	f023 0307 	bic.w	r3, r3, #7
 8015dcc:	f103 0108 	add.w	r1, r3, #8
 8015dd0:	683a      	ldr	r2, [r7, #0]
 8015dd2:	6011      	str	r1, [r2, #0]
 8015dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8015ddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015de2:	d101      	bne.n	8015de8 <mg_vxprintf+0x2ec>
 8015de4:	2306      	movs	r3, #6
 8015de6:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8015de8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8015dea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8015dee:	2b67      	cmp	r3, #103	@ 0x67
 8015df0:	bf0c      	ite	eq
 8015df2:	2301      	moveq	r3, #1
 8015df4:	2300      	movne	r3, #0
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	f107 0014 	add.w	r0, r7, #20
 8015dfc:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8015e00:	2128      	movs	r1, #40	@ 0x28
 8015e02:	f7ff fa99 	bl	8015338 <mg_dtoa>
 8015e06:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8015e0a:	e069      	b.n	8015ee0 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8015e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015e0e:	2b02      	cmp	r3, #2
 8015e10:	d11c      	bne.n	8015e4c <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	3307      	adds	r3, #7
 8015e18:	f023 0307 	bic.w	r3, r3, #7
 8015e1c:	f103 0108 	add.w	r1, r3, #8
 8015e20:	683a      	ldr	r2, [r7, #0]
 8015e22:	6011      	str	r1, [r2, #0]
 8015e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e28:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8015e2c:	f107 0114 	add.w	r1, r7, #20
 8015e30:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015e34:	9301      	str	r3, [sp, #4]
 8015e36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8015e40:	4608      	mov	r0, r1
 8015e42:	f7ff fd6d 	bl	8015920 <mg_lld>
 8015e46:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8015e4a:	e049      	b.n	8015ee0 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8015e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d123      	bne.n	8015e9a <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	1d19      	adds	r1, r3, #4
 8015e58:	683a      	ldr	r2, [r7, #0]
 8015e5a:	6011      	str	r1, [r2, #0]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8015e60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d004      	beq.n	8015e72 <mg_vxprintf+0x376>
 8015e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e6a:	17da      	asrs	r2, r3, #31
 8015e6c:	461c      	mov	r4, r3
 8015e6e:	4615      	mov	r5, r2
 8015e70:	e003      	b.n	8015e7a <mg_vxprintf+0x37e>
 8015e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e74:	2200      	movs	r2, #0
 8015e76:	461c      	mov	r4, r3
 8015e78:	4615      	mov	r5, r2
 8015e7a:	f107 0114 	add.w	r1, r7, #20
 8015e7e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e88:	9300      	str	r3, [sp, #0]
 8015e8a:	4622      	mov	r2, r4
 8015e8c:	462b      	mov	r3, r5
 8015e8e:	4608      	mov	r0, r1
 8015e90:	f7ff fd46 	bl	8015920 <mg_lld>
 8015e94:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8015e98:	e022      	b.n	8015ee0 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	1d19      	adds	r1, r3, #4
 8015ea0:	683a      	ldr	r2, [r7, #0]
 8015ea2:	6011      	str	r1, [r2, #0]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8015ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d004      	beq.n	8015eba <mg_vxprintf+0x3be>
 8015eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015eb2:	17da      	asrs	r2, r3, #31
 8015eb4:	4698      	mov	r8, r3
 8015eb6:	4691      	mov	r9, r2
 8015eb8:	e003      	b.n	8015ec2 <mg_vxprintf+0x3c6>
 8015eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	4698      	mov	r8, r3
 8015ec0:	4691      	mov	r9, r2
 8015ec2:	f107 0114 	add.w	r1, r7, #20
 8015ec6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015eca:	9301      	str	r3, [sp, #4]
 8015ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ed0:	9300      	str	r3, [sp, #0]
 8015ed2:	4642      	mov	r2, r8
 8015ed4:	464b      	mov	r3, r9
 8015ed6:	4608      	mov	r0, r1
 8015ed8:	f7ff fd22 	bl	8015920 <mg_lld>
 8015edc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015ee6:	e007      	b.n	8015ef8 <mg_vxprintf+0x3fc>
 8015ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015eea:	3b01      	subs	r3, #1
 8015eec:	677b      	str	r3, [r7, #116]	@ 0x74
 8015eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015ef8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d202      	bcs.n	8015f08 <mg_vxprintf+0x40c>
 8015f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1ef      	bne.n	8015ee8 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015f0e:	e011      	b.n	8015f34 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8015f10:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8015f14:	2301      	movs	r3, #1
 8015f16:	68b9      	ldr	r1, [r7, #8]
 8015f18:	68f8      	ldr	r0, [r7, #12]
 8015f1a:	f7ff fdb1 	bl	8015a80 <scpy>
 8015f1e:	4602      	mov	r2, r0
 8015f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015f24:	4413      	add	r3, r2
 8015f26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8015f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015f2e:	3301      	adds	r3, #1
 8015f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015f34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015f38:	2b20      	cmp	r3, #32
 8015f3a:	d110      	bne.n	8015f5e <mg_vxprintf+0x462>
 8015f3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10c      	bne.n	8015f5e <mg_vxprintf+0x462>
 8015f44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d207      	bcs.n	8015f5e <mg_vxprintf+0x462>
 8015f4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015f56:	4413      	add	r3, r2
 8015f58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d8d8      	bhi.n	8015f10 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8015f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015f60:	4ab7      	ldr	r2, [pc, #732]	@ (8016240 <mg_vxprintf+0x744>)
 8015f62:	68b9      	ldr	r1, [r7, #8]
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f7ff fd8b 	bl	8015a80 <scpy>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015f70:	4413      	add	r3, r2
 8015f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8015f76:	2300      	movs	r3, #0
 8015f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015f7c:	e011      	b.n	8015fa2 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8015f7e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8015f82:	2301      	movs	r3, #1
 8015f84:	68b9      	ldr	r1, [r7, #8]
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff fd7a 	bl	8015a80 <scpy>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015f92:	4413      	add	r3, r2
 8015f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8015f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015fa2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015fa6:	2b30      	cmp	r3, #48	@ 0x30
 8015fa8:	d10c      	bne.n	8015fc4 <mg_vxprintf+0x4c8>
 8015faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d207      	bcs.n	8015fc4 <mg_vxprintf+0x4c8>
 8015fb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015fbc:	4413      	add	r3, r2
 8015fbe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d8dc      	bhi.n	8015f7e <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8015fc4:	f107 0214 	add.w	r2, r7, #20
 8015fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015fcc:	68b9      	ldr	r1, [r7, #8]
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f7ff fd56 	bl	8015a80 <scpy>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015fda:	4413      	add	r3, r2
 8015fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015fe6:	e011      	b.n	801600c <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8015fe8:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8015fec:	2301      	movs	r3, #1
 8015fee:	68b9      	ldr	r1, [r7, #8]
 8015ff0:	68f8      	ldr	r0, [r7, #12]
 8015ff2:	f7ff fd45 	bl	8015a80 <scpy>
 8015ff6:	4602      	mov	r2, r0
 8015ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ffc:	4413      	add	r3, r2
 8015ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8016002:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016006:	3301      	adds	r3, #1
 8016008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801600c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016010:	2b20      	cmp	r3, #32
 8016012:	f040 80ea 	bne.w	80161ea <mg_vxprintf+0x6ee>
 8016016:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 80e5 	beq.w	80161ea <mg_vxprintf+0x6ee>
 8016020:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016024:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016026:	429a      	cmp	r2, r3
 8016028:	f080 80df 	bcs.w	80161ea <mg_vxprintf+0x6ee>
 801602c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016030:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016034:	4413      	add	r3, r2
 8016036:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016038:	429a      	cmp	r2, r3
 801603a:	d8d5      	bhi.n	8015fe8 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 801603c:	e0d5      	b.n	80161ea <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 801603e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016042:	2b6d      	cmp	r3, #109	@ 0x6d
 8016044:	d003      	beq.n	801604e <mg_vxprintf+0x552>
 8016046:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801604a:	2b4d      	cmp	r3, #77	@ 0x4d
 801604c:	d128      	bne.n	80160a0 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	1d19      	adds	r1, r3, #4
 8016054:	683a      	ldr	r2, [r7, #0]
 8016056:	6011      	str	r1, [r2, #0]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 801605c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016060:	2b6d      	cmp	r3, #109	@ 0x6d
 8016062:	d103      	bne.n	801606c <mg_vxprintf+0x570>
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	68b9      	ldr	r1, [r7, #8]
 8016068:	2022      	movs	r0, #34	@ 0x22
 801606a:	4798      	blx	r3
        n += f(out, param, ap);
 801606c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801606e:	683a      	ldr	r2, [r7, #0]
 8016070:	68b9      	ldr	r1, [r7, #8]
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	4798      	blx	r3
 8016076:	4602      	mov	r2, r0
 8016078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801607c:	4413      	add	r3, r2
 801607e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8016082:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016086:	2b6d      	cmp	r3, #109	@ 0x6d
 8016088:	f040 80b1 	bne.w	80161ee <mg_vxprintf+0x6f2>
 801608c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016090:	3302      	adds	r3, #2
 8016092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	68b9      	ldr	r1, [r7, #8]
 801609a:	2022      	movs	r0, #34	@ 0x22
 801609c:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 801609e:	e0a6      	b.n	80161ee <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80160a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80160a4:	2b63      	cmp	r3, #99	@ 0x63
 80160a6:	d112      	bne.n	80160ce <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	1d19      	adds	r1, r3, #4
 80160ae:	683a      	ldr	r2, [r7, #0]
 80160b0:	6011      	str	r1, [r2, #0]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 80160b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80160b8:	b2da      	uxtb	r2, r3
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	68b9      	ldr	r1, [r7, #8]
 80160be:	4610      	mov	r0, r2
 80160c0:	4798      	blx	r3
        n++;
 80160c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80160c6:	3301      	adds	r3, #1
 80160c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80160cc:	e090      	b.n	80161f0 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80160ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80160d2:	2b73      	cmp	r3, #115	@ 0x73
 80160d4:	d16b      	bne.n	80161ae <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	1d19      	adds	r1, r3, #4
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	6011      	str	r1, [r2, #0]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80160e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80160e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80160ea:	d109      	bne.n	8016100 <mg_vxprintf+0x604>
 80160ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d004      	beq.n	80160fc <mg_vxprintf+0x600>
 80160f2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80160f4:	f7ea f8c4 	bl	8000280 <strlen>
 80160f8:	4603      	mov	r3, r0
 80160fa:	e000      	b.n	80160fe <mg_vxprintf+0x602>
 80160fc:	2300      	movs	r3, #0
 80160fe:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8016100:	2300      	movs	r3, #0
 8016102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016106:	e011      	b.n	801612c <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8016108:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801610c:	2301      	movs	r3, #1
 801610e:	68b9      	ldr	r1, [r7, #8]
 8016110:	68f8      	ldr	r0, [r7, #12]
 8016112:	f7ff fcb5 	bl	8015a80 <scpy>
 8016116:	4602      	mov	r2, r0
 8016118:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801611c:	4413      	add	r3, r2
 801611e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8016122:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016126:	3301      	adds	r3, #1
 8016128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801612c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10a      	bne.n	801614a <mg_vxprintf+0x64e>
 8016134:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016138:	429a      	cmp	r2, r3
 801613a:	d206      	bcs.n	801614a <mg_vxprintf+0x64e>
 801613c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016140:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016142:	4413      	add	r3, r2
 8016144:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016146:	429a      	cmp	r2, r3
 8016148:	d8de      	bhi.n	8016108 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 801614a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801614c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801614e:	68b9      	ldr	r1, [r7, #8]
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f7ff fc95 	bl	8015a80 <scpy>
 8016156:	4602      	mov	r2, r0
 8016158:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801615c:	4413      	add	r3, r2
 801615e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8016162:	2300      	movs	r3, #0
 8016164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016168:	e011      	b.n	801618e <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 801616a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801616e:	2301      	movs	r3, #1
 8016170:	68b9      	ldr	r1, [r7, #8]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	f7ff fc84 	bl	8015a80 <scpy>
 8016178:	4602      	mov	r2, r0
 801617a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801617e:	4413      	add	r3, r2
 8016180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8016184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016188:	3301      	adds	r3, #1
 801618a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801618e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016192:	2b00      	cmp	r3, #0
 8016194:	d02c      	beq.n	80161f0 <mg_vxprintf+0x6f4>
 8016196:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801619a:	429a      	cmp	r2, r3
 801619c:	d228      	bcs.n	80161f0 <mg_vxprintf+0x6f4>
 801619e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80161a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80161a4:	4413      	add	r3, r2
 80161a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d8de      	bhi.n	801616a <mg_vxprintf+0x66e>
 80161ac:	e020      	b.n	80161f0 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80161ae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80161b2:	2b25      	cmp	r3, #37	@ 0x25
 80161b4:	d109      	bne.n	80161ca <mg_vxprintf+0x6ce>
        out('%', param);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	68b9      	ldr	r1, [r7, #8]
 80161ba:	2025      	movs	r0, #37	@ 0x25
 80161bc:	4798      	blx	r3
        n++;
 80161be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80161c2:	3301      	adds	r3, #1
 80161c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80161c8:	e012      	b.n	80161f0 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	68b9      	ldr	r1, [r7, #8]
 80161ce:	2025      	movs	r0, #37	@ 0x25
 80161d0:	4798      	blx	r3
        out(c, param);
 80161d2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	68b9      	ldr	r1, [r7, #8]
 80161da:	4610      	mov	r0, r2
 80161dc:	4798      	blx	r3
        n += 2;
 80161de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80161e2:	3302      	adds	r3, #2
 80161e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80161e8:	e002      	b.n	80161f0 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80161ea:	bf00      	nop
 80161ec:	e000      	b.n	80161f0 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80161ee:	bf00      	nop
      }
      i++;
 80161f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161f4:	3301      	adds	r3, #1
 80161f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161fa:	e012      	b.n	8016222 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016202:	4413      	add	r3, r2
 8016204:	781a      	ldrb	r2, [r3, #0]
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	68b9      	ldr	r1, [r7, #8]
 801620a:	4610      	mov	r0, r2
 801620c:	4798      	blx	r3
 801620e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016212:	3301      	adds	r3, #1
 8016214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801621c:	3301      	adds	r3, #1
 801621e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016228:	4413      	add	r3, r2
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	f47f ac74 	bne.w	8015b1a <mg_vxprintf+0x1e>
    }
  }
  return n;
 8016232:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8016236:	4618      	mov	r0, r3
 8016238:	3790      	adds	r7, #144	@ 0x90
 801623a:	46bd      	mov	sp, r7
 801623c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016240:	080269d4 	.word	0x080269d4

08016244 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8016244:	b580      	push	{r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af00      	add	r7, sp, #0
 801624a:	60f8      	str	r0, [r7, #12]
 801624c:	60b9      	str	r1, [r7, #8]
 801624e:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8016250:	2108      	movs	r1, #8
 8016252:	2001      	movs	r0, #1
 8016254:	f7fe f942 	bl	80144dc <mg_calloc>
 8016258:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d013      	beq.n	8016288 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	689b      	ldr	r3, [r3, #8]
 8016264:	6879      	ldr	r1, [r7, #4]
 8016266:	68b8      	ldr	r0, [r7, #8]
 8016268:	4798      	blx	r3
 801626a:	4602      	mov	r2, r0
 801626c:	697b      	ldr	r3, [r7, #20]
 801626e:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	68fa      	ldr	r2, [r7, #12]
 8016274:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d104      	bne.n	8016288 <mg_fs_open+0x44>
      free(fd);
 801627e:	6978      	ldr	r0, [r7, #20]
 8016280:	f7f5 fdba 	bl	800bdf8 <vPortFree>
      fd = NULL;
 8016284:	2300      	movs	r3, #0
 8016286:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8016288:	697b      	ldr	r3, [r7, #20]
}
 801628a:	4618      	mov	r0, r3
 801628c:	3718      	adds	r7, #24
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}

08016292 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8016292:	b580      	push	{r7, lr}
 8016294:	b082      	sub	sp, #8
 8016296:	af00      	add	r7, sp, #0
 8016298:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d009      	beq.n	80162b4 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	6812      	ldr	r2, [r2, #0]
 80162aa:	4610      	mov	r0, r2
 80162ac:	4798      	blx	r3
    free(fd);
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f7f5 fda2 	bl	800bdf8 <vPortFree>
  }
}
 80162b4:	bf00      	nop
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3714      	adds	r7, #20
 80162ce:	46bd      	mov	sp, r7
 80162d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d4:	4770      	bx	lr

080162d6 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 80162d6:	b480      	push	{r7}
 80162d8:	b085      	sub	sp, #20
 80162da:	af00      	add	r7, sp, #0
 80162dc:	60f8      	str	r0, [r7, #12]
 80162de:	60b9      	str	r1, [r7, #8]
 80162e0:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80162e2:	bf00      	nop
 80162e4:	3714      	adds	r7, #20
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr

080162ee <p_open>:
static void *p_open(const char *path, int flags) {
 80162ee:	b480      	push	{r7}
 80162f0:	b083      	sub	sp, #12
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
 80162f6:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 80162f8:	2300      	movs	r3, #0
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	370c      	adds	r7, #12
 80162fe:	46bd      	mov	sp, r7
 8016300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016304:	4770      	bx	lr

08016306 <p_close>:
static void p_close(void *fp) {
 8016306:	b480      	push	{r7}
 8016308:	b083      	sub	sp, #12
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 801630e:	bf00      	nop
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr

0801631a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 801631a:	b480      	push	{r7}
 801631c:	b085      	sub	sp, #20
 801631e:	af00      	add	r7, sp, #0
 8016320:	60f8      	str	r0, [r7, #12]
 8016322:	60b9      	str	r1, [r7, #8]
 8016324:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016326:	2300      	movs	r3, #0
}
 8016328:	4618      	mov	r0, r3
 801632a:	3714      	adds	r7, #20
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016340:	2300      	movs	r3, #0
}
 8016342:	4618      	mov	r0, r3
 8016344:	3714      	adds	r7, #20
 8016346:	46bd      	mov	sp, r7
 8016348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634c:	4770      	bx	lr

0801634e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 801634e:	b480      	push	{r7}
 8016350:	b083      	sub	sp, #12
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
 8016356:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8016358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801635c:	4618      	mov	r0, r3
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8016372:	2300      	movs	r3, #0
}
 8016374:	4618      	mov	r0, r3
 8016376:	370c      	adds	r7, #12
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr

08016380 <p_remove>:
static bool p_remove(const char *path) {
 8016380:	b480      	push	{r7}
 8016382:	b083      	sub	sp, #12
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	370c      	adds	r7, #12
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr

08016396 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8016396:	b480      	push	{r7}
 8016398:	b083      	sub	sp, #12
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr

080163ac <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80163ac:	b480      	push	{r7}
 80163ae:	b089      	sub	sp, #36	@ 0x24
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
  int diff = 0;
 80163b8:	2300      	movs	r3, #0
 80163ba:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d02d      	beq.n	801641e <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	1c5a      	adds	r2, r3, #1
 80163c6:	60fa      	str	r2, [r7, #12]
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	61bb      	str	r3, [r7, #24]
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	1c5a      	adds	r2, r3, #1
 80163d0:	60ba      	str	r2, [r7, #8]
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80163d6:	69bb      	ldr	r3, [r7, #24]
 80163d8:	2b40      	cmp	r3, #64	@ 0x40
 80163da:	dd05      	ble.n	80163e8 <mg_ncasecmp+0x3c>
 80163dc:	69bb      	ldr	r3, [r7, #24]
 80163de:	2b5a      	cmp	r3, #90	@ 0x5a
 80163e0:	dc02      	bgt.n	80163e8 <mg_ncasecmp+0x3c>
 80163e2:	69bb      	ldr	r3, [r7, #24]
 80163e4:	3320      	adds	r3, #32
 80163e6:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	2b40      	cmp	r3, #64	@ 0x40
 80163ec:	dd05      	ble.n	80163fa <mg_ncasecmp+0x4e>
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2b5a      	cmp	r3, #90	@ 0x5a
 80163f2:	dc02      	bgt.n	80163fa <mg_ncasecmp+0x4e>
 80163f4:	697b      	ldr	r3, [r7, #20]
 80163f6:	3320      	adds	r3, #32
 80163f8:	617b      	str	r3, [r7, #20]
      diff = c - d;
 80163fa:	69ba      	ldr	r2, [r7, #24]
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	1ad3      	subs	r3, r2, r3
 8016400:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d10a      	bne.n	801641e <mg_ncasecmp+0x72>
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	3b01      	subs	r3, #1
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d005      	beq.n	801641e <mg_ncasecmp+0x72>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	3b01      	subs	r3, #1
 8016416:	607b      	str	r3, [r7, #4]
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d1d1      	bne.n	80163c2 <mg_ncasecmp+0x16>
  return diff;
 801641e:	69fb      	ldr	r3, [r7, #28]
}
 8016420:	4618      	mov	r0, r3
 8016422:	3724      	adds	r7, #36	@ 0x24
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr

0801642c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 801642c:	b480      	push	{r7}
 801642e:	b08b      	sub	sp, #44	@ 0x2c
 8016430:	af00      	add	r7, sp, #0
 8016432:	f107 0308 	add.w	r3, r7, #8
 8016436:	e883 0003 	stmia.w	r3, {r0, r1}
 801643a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 801643c:	2300      	movs	r3, #0
 801643e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016440:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016444:	61bb      	str	r3, [r7, #24]
 8016446:	69bb      	ldr	r3, [r7, #24]
 8016448:	4a42      	ldr	r2, [pc, #264]	@ (8016554 <mg_to_size_t+0x128>)
 801644a:	fba2 2303 	umull	r2, r3, r2, r3
 801644e:	08db      	lsrs	r3, r3, #3
 8016450:	617b      	str	r3, [r7, #20]
 8016452:	2300      	movs	r3, #0
 8016454:	623b      	str	r3, [r7, #32]
 8016456:	2300      	movs	r3, #0
 8016458:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 801645a:	e002      	b.n	8016462 <mg_to_size_t+0x36>
 801645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801645e:	3301      	adds	r3, #1
 8016460:	627b      	str	r3, [r7, #36]	@ 0x24
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016466:	429a      	cmp	r2, r3
 8016468:	d20b      	bcs.n	8016482 <mg_to_size_t+0x56>
 801646a:	68ba      	ldr	r2, [r7, #8]
 801646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801646e:	4413      	add	r3, r2
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	2b20      	cmp	r3, #32
 8016474:	d0f2      	beq.n	801645c <mg_to_size_t+0x30>
 8016476:	68ba      	ldr	r2, [r7, #8]
 8016478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801647a:	4413      	add	r3, r2
 801647c:	781b      	ldrb	r3, [r3, #0]
 801647e:	2b09      	cmp	r3, #9
 8016480:	d0ec      	beq.n	801645c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016486:	429a      	cmp	r2, r3
 8016488:	d22b      	bcs.n	80164e2 <mg_to_size_t+0xb6>
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801648e:	4413      	add	r3, r2
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	2b2d      	cmp	r3, #45	@ 0x2d
 8016494:	d125      	bne.n	80164e2 <mg_to_size_t+0xb6>
 8016496:	2300      	movs	r3, #0
 8016498:	e056      	b.n	8016548 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 801649a:	68ba      	ldr	r2, [r7, #8]
 801649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801649e:	4413      	add	r3, r2
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	3b30      	subs	r3, #48	@ 0x30
 80164a4:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 80164a6:	6a3a      	ldr	r2, [r7, #32]
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d901      	bls.n	80164b2 <mg_to_size_t+0x86>
 80164ae:	2300      	movs	r3, #0
 80164b0:	e04a      	b.n	8016548 <mg_to_size_t+0x11c>
    result *= 10;
 80164b2:	6a3a      	ldr	r2, [r7, #32]
 80164b4:	4613      	mov	r3, r2
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4413      	add	r3, r2
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 80164be:	69ba      	ldr	r2, [r7, #24]
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	1ad3      	subs	r3, r2, r3
 80164c4:	6a3a      	ldr	r2, [r7, #32]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d901      	bls.n	80164ce <mg_to_size_t+0xa2>
 80164ca:	2300      	movs	r3, #0
 80164cc:	e03c      	b.n	8016548 <mg_to_size_t+0x11c>
    result += digit;
 80164ce:	6a3a      	ldr	r2, [r7, #32]
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	4413      	add	r3, r2
 80164d4:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 80164d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d8:	3301      	adds	r3, #1
 80164da:	627b      	str	r3, [r7, #36]	@ 0x24
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	3301      	adds	r3, #1
 80164e0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d20f      	bcs.n	801650a <mg_to_size_t+0xde>
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ee:	4413      	add	r3, r2
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80164f4:	d909      	bls.n	801650a <mg_to_size_t+0xde>
 80164f6:	68ba      	ldr	r2, [r7, #8]
 80164f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164fa:	4413      	add	r3, r2
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b39      	cmp	r3, #57	@ 0x39
 8016500:	d9cb      	bls.n	801649a <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016502:	e002      	b.n	801650a <mg_to_size_t+0xde>
 8016504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016506:	3301      	adds	r3, #1
 8016508:	627b      	str	r3, [r7, #36]	@ 0x24
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801650e:	429a      	cmp	r2, r3
 8016510:	d20b      	bcs.n	801652a <mg_to_size_t+0xfe>
 8016512:	68ba      	ldr	r2, [r7, #8]
 8016514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016516:	4413      	add	r3, r2
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	2b20      	cmp	r3, #32
 801651c:	d0f2      	beq.n	8016504 <mg_to_size_t+0xd8>
 801651e:	68ba      	ldr	r2, [r7, #8]
 8016520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016522:	4413      	add	r3, r2
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	2b09      	cmp	r3, #9
 8016528:	d0ec      	beq.n	8016504 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 801652a:	69fb      	ldr	r3, [r7, #28]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d101      	bne.n	8016534 <mg_to_size_t+0x108>
 8016530:	2300      	movs	r3, #0
 8016532:	e009      	b.n	8016548 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016538:	429a      	cmp	r2, r3
 801653a:	d001      	beq.n	8016540 <mg_to_size_t+0x114>
 801653c:	2300      	movs	r3, #0
 801653e:	e003      	b.n	8016548 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6a3a      	ldr	r2, [r7, #32]
 8016544:	601a      	str	r2, [r3, #0]
  return true;
 8016546:	2301      	movs	r3, #1
}
 8016548:	4618      	mov	r0, r3
 801654a:	372c      	adds	r7, #44	@ 0x2c
 801654c:	46bd      	mov	sp, r7
 801654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016552:	4770      	bx	lr
 8016554:	cccccccd 	.word	0xcccccccd

08016558 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8016558:	b082      	sub	sp, #8
 801655a:	b580      	push	{r7, lr}
 801655c:	b08e      	sub	sp, #56	@ 0x38
 801655e:	af02      	add	r7, sp, #8
 8016560:	60f8      	str	r0, [r7, #12]
 8016562:	1d38      	adds	r0, r7, #4
 8016564:	e880 0006 	stmia.w	r0, {r1, r2}
 8016568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 801656a:	f107 0310 	add.w	r3, r7, #16
 801656e:	2200      	movs	r2, #0
 8016570:	2100      	movs	r1, #0
 8016572:	4618      	mov	r0, r3
 8016574:	f00a fc0f 	bl	8020d96 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016578:	e023      	b.n	80165c2 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 801657a:	f107 0318 	add.w	r3, r7, #24
 801657e:	f107 0220 	add.w	r2, r7, #32
 8016582:	213d      	movs	r1, #61	@ 0x3d
 8016584:	9100      	str	r1, [sp, #0]
 8016586:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801658a:	c903      	ldmia	r1, {r0, r1}
 801658c:	f00a fdad 	bl	80210ea <mg_span>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	d015      	beq.n	80165c2 <mg_http_var+0x6a>
 8016596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801659a:	429a      	cmp	r2, r3
 801659c:	d111      	bne.n	80165c2 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 801659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165a0:	6a39      	ldr	r1, [r7, #32]
 80165a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7ff ff01 	bl	80163ac <mg_ncasecmp>
 80165aa:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d108      	bne.n	80165c2 <mg_http_var+0x6a>
      result = v;
 80165b0:	f107 0310 	add.w	r3, r7, #16
 80165b4:	f107 0218 	add.w	r2, r7, #24
 80165b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165bc:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 80165c0:	e00b      	b.n	80165da <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 80165c2:	1d3b      	adds	r3, r7, #4
 80165c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80165c8:	2126      	movs	r1, #38	@ 0x26
 80165ca:	9100      	str	r1, [sp, #0]
 80165cc:	1d39      	adds	r1, r7, #4
 80165ce:	c903      	ldmia	r1, {r0, r1}
 80165d0:	f00a fd8b 	bl	80210ea <mg_span>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d1cf      	bne.n	801657a <mg_http_var+0x22>
    }
  }
  return result;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	461a      	mov	r2, r3
 80165de:	f107 0310 	add.w	r3, r7, #16
 80165e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80165ea:	68f8      	ldr	r0, [r7, #12]
 80165ec:	3730      	adds	r7, #48	@ 0x30
 80165ee:	46bd      	mov	sp, r7
 80165f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80165f4:	b002      	add	sp, #8
 80165f6:	4770      	bx	lr

080165f8 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b08c      	sub	sp, #48	@ 0x30
 80165fc:	af02      	add	r7, sp, #8
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	607a      	str	r2, [r7, #4]
 8016604:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d005      	beq.n	8016618 <mg_http_get_var+0x20>
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d002      	beq.n	8016618 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2200      	movs	r2, #0
 8016616:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d002      	beq.n	8016624 <mg_http_get_var+0x2c>
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d103      	bne.n	801662c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8016624:	f06f 0301 	mvn.w	r3, #1
 8016628:	627b      	str	r3, [r7, #36]	@ 0x24
 801662a:	e033      	b.n	8016694 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d006      	beq.n	8016642 <mg_http_get_var+0x4a>
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d003      	beq.n	8016642 <mg_http_get_var+0x4a>
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d103      	bne.n	801664a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8016642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016646:	627b      	str	r3, [r7, #36]	@ 0x24
 8016648:	e024      	b.n	8016694 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 801664a:	f107 031c 	add.w	r3, r7, #28
 801664e:	68b9      	ldr	r1, [r7, #8]
 8016650:	4618      	mov	r0, r3
 8016652:	f00a fb83 	bl	8020d5c <mg_str_s>
 8016656:	f107 0014 	add.w	r0, r7, #20
 801665a:	68fa      	ldr	r2, [r7, #12]
 801665c:	6a3b      	ldr	r3, [r7, #32]
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	69fb      	ldr	r3, [r7, #28]
 8016662:	ca06      	ldmia	r2, {r1, r2}
 8016664:	f7ff ff78 	bl	8016558 <mg_http_var>
    if (v.buf == NULL) {
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d103      	bne.n	8016676 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 801666e:	f06f 0303 	mvn.w	r3, #3
 8016672:	627b      	str	r3, [r7, #36]	@ 0x24
 8016674:	e00e      	b.n	8016694 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8016676:	6978      	ldr	r0, [r7, #20]
 8016678:	69b9      	ldr	r1, [r7, #24]
 801667a:	2301      	movs	r3, #1
 801667c:	9300      	str	r3, [sp, #0]
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	f000 f82e 	bl	80166e2 <mg_url_decode>
 8016686:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8016688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668a:	2b00      	cmp	r3, #0
 801668c:	da02      	bge.n	8016694 <mg_http_get_var+0x9c>
 801668e:	f06f 0302 	mvn.w	r3, #2
 8016692:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8016694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016696:	4618      	mov	r0, r3
 8016698:	3728      	adds	r7, #40	@ 0x28
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}

0801669e <isx>:

static bool isx(int c) {
 801669e:	b480      	push	{r7}
 80166a0:	b083      	sub	sp, #12
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80166aa:	dd02      	ble.n	80166b2 <isx+0x14>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2b39      	cmp	r3, #57	@ 0x39
 80166b0:	dd0b      	ble.n	80166ca <isx+0x2c>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2b60      	cmp	r3, #96	@ 0x60
 80166b6:	dd02      	ble.n	80166be <isx+0x20>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2b66      	cmp	r3, #102	@ 0x66
 80166bc:	dd05      	ble.n	80166ca <isx+0x2c>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2b40      	cmp	r3, #64	@ 0x40
 80166c2:	dd04      	ble.n	80166ce <isx+0x30>
         (c >= 'A' && c <= 'F');
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2b46      	cmp	r3, #70	@ 0x46
 80166c8:	dc01      	bgt.n	80166ce <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80166ca:	2301      	movs	r3, #1
 80166cc:	e000      	b.n	80166d0 <isx+0x32>
 80166ce:	2300      	movs	r3, #0
 80166d0:	f003 0301 	and.w	r3, r3, #1
 80166d4:	b2db      	uxtb	r3, r3
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	370c      	adds	r7, #12
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr

080166e2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b08a      	sub	sp, #40	@ 0x28
 80166e6:	af02      	add	r7, sp, #8
 80166e8:	60f8      	str	r0, [r7, #12]
 80166ea:	60b9      	str	r1, [r7, #8]
 80166ec:	607a      	str	r2, [r7, #4]
 80166ee:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80166f0:	2300      	movs	r3, #0
 80166f2:	61bb      	str	r3, [r7, #24]
 80166f4:	69bb      	ldr	r3, [r7, #24]
 80166f6:	61fb      	str	r3, [r7, #28]
 80166f8:	e059      	b.n	80167ae <mg_url_decode+0xcc>
    if (src[i] == '%') {
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	4413      	add	r3, r2
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	2b25      	cmp	r3, #37	@ 0x25
 8016704:	d136      	bne.n	8016774 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8016706:	69fb      	ldr	r3, [r7, #28]
 8016708:	3302      	adds	r3, #2
 801670a:	68ba      	ldr	r2, [r7, #8]
 801670c:	429a      	cmp	r2, r3
 801670e:	d92e      	bls.n	801676e <mg_url_decode+0x8c>
 8016710:	69fb      	ldr	r3, [r7, #28]
 8016712:	3301      	adds	r3, #1
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	4413      	add	r3, r2
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	4618      	mov	r0, r3
 801671c:	f7ff ffbf 	bl	801669e <isx>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d023      	beq.n	801676e <mg_url_decode+0x8c>
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	3302      	adds	r3, #2
 801672a:	68fa      	ldr	r2, [r7, #12]
 801672c:	4413      	add	r3, r2
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	4618      	mov	r0, r3
 8016732:	f7ff ffb4 	bl	801669e <isx>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d018      	beq.n	801676e <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 801673c:	69fb      	ldr	r3, [r7, #28]
 801673e:	3301      	adds	r3, #1
 8016740:	68fa      	ldr	r2, [r7, #12]
 8016742:	18d1      	adds	r1, r2, r3
 8016744:	f107 0310 	add.w	r3, r7, #16
 8016748:	2202      	movs	r2, #2
 801674a:	4618      	mov	r0, r3
 801674c:	f00a fb23 	bl	8020d96 <mg_str_n>
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	69bb      	ldr	r3, [r7, #24]
 8016754:	4413      	add	r3, r2
 8016756:	2201      	movs	r2, #1
 8016758:	9200      	str	r2, [sp, #0]
 801675a:	2210      	movs	r2, #16
 801675c:	f107 0110 	add.w	r1, r7, #16
 8016760:	c903      	ldmia	r1, {r0, r1}
 8016762:	f00a fd1f 	bl	80211a4 <mg_str_to_num>
        i += 2;
 8016766:	69fb      	ldr	r3, [r7, #28]
 8016768:	3302      	adds	r3, #2
 801676a:	61fb      	str	r3, [r7, #28]
 801676c:	e019      	b.n	80167a2 <mg_url_decode+0xc0>
      } else {
        return -1;
 801676e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016772:	e03a      	b.n	80167ea <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8016774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00b      	beq.n	8016792 <mg_url_decode+0xb0>
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	4413      	add	r3, r2
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	2b2b      	cmp	r3, #43	@ 0x2b
 8016784:	d105      	bne.n	8016792 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8016786:	687a      	ldr	r2, [r7, #4]
 8016788:	69bb      	ldr	r3, [r7, #24]
 801678a:	4413      	add	r3, r2
 801678c:	2220      	movs	r2, #32
 801678e:	701a      	strb	r2, [r3, #0]
 8016790:	e007      	b.n	80167a2 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	441a      	add	r2, r3
 8016798:	6879      	ldr	r1, [r7, #4]
 801679a:	69bb      	ldr	r3, [r7, #24]
 801679c:	440b      	add	r3, r1
 801679e:	7812      	ldrb	r2, [r2, #0]
 80167a0:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80167a2:	69fb      	ldr	r3, [r7, #28]
 80167a4:	3301      	adds	r3, #1
 80167a6:	61fb      	str	r3, [r7, #28]
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	3301      	adds	r3, #1
 80167ac:	61bb      	str	r3, [r7, #24]
 80167ae:	69fa      	ldr	r2, [r7, #28]
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d204      	bcs.n	80167c0 <mg_url_decode+0xde>
 80167b6:	69bb      	ldr	r3, [r7, #24]
 80167b8:	3301      	adds	r3, #1
 80167ba:	683a      	ldr	r2, [r7, #0]
 80167bc:	429a      	cmp	r2, r3
 80167be:	d89c      	bhi.n	80166fa <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80167c0:	69ba      	ldr	r2, [r7, #24]
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d204      	bcs.n	80167d2 <mg_url_decode+0xf0>
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	4413      	add	r3, r2
 80167ce:	2200      	movs	r2, #0
 80167d0:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80167d2:	69fa      	ldr	r2, [r7, #28]
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d305      	bcc.n	80167e6 <mg_url_decode+0x104>
 80167da:	69ba      	ldr	r2, [r7, #24]
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d201      	bcs.n	80167e6 <mg_url_decode+0x104>
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	e001      	b.n	80167ea <mg_url_decode+0x108>
 80167e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3720      	adds	r7, #32
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}

080167f2 <isok>:

static bool isok(uint8_t c) {
 80167f2:	b480      	push	{r7}
 80167f4:	b083      	sub	sp, #12
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	4603      	mov	r3, r0
 80167fa:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80167fc:	79fb      	ldrb	r3, [r7, #7]
 80167fe:	2b0a      	cmp	r3, #10
 8016800:	d008      	beq.n	8016814 <isok+0x22>
 8016802:	79fb      	ldrb	r3, [r7, #7]
 8016804:	2b0d      	cmp	r3, #13
 8016806:	d005      	beq.n	8016814 <isok+0x22>
 8016808:	79fb      	ldrb	r3, [r7, #7]
 801680a:	2b09      	cmp	r3, #9
 801680c:	d002      	beq.n	8016814 <isok+0x22>
 801680e:	79fb      	ldrb	r3, [r7, #7]
 8016810:	2b1f      	cmp	r3, #31
 8016812:	d901      	bls.n	8016818 <isok+0x26>
 8016814:	2301      	movs	r3, #1
 8016816:	e000      	b.n	801681a <isok+0x28>
 8016818:	2300      	movs	r3, #0
 801681a:	f003 0301 	and.w	r3, r3, #1
 801681e:	b2db      	uxtb	r3, r3
}
 8016820:	4618      	mov	r0, r3
 8016822:	370c      	adds	r7, #12
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr

0801682c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8016836:	2300      	movs	r3, #0
 8016838:	60fb      	str	r3, [r7, #12]
 801683a:	e03c      	b.n	80168b6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	4413      	add	r3, r2
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	4618      	mov	r0, r3
 8016846:	f7ff ffd4 	bl	80167f2 <isok>
 801684a:	4603      	mov	r3, r0
 801684c:	f083 0301 	eor.w	r3, r3, #1
 8016850:	b2db      	uxtb	r3, r3
 8016852:	2b00      	cmp	r3, #0
 8016854:	d002      	beq.n	801685c <mg_http_get_request_len+0x30>
 8016856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801685a:	e031      	b.n	80168c0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d00c      	beq.n	801687c <mg_http_get_request_len+0x50>
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	4413      	add	r3, r2
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	2b0a      	cmp	r3, #10
 801686c:	d106      	bne.n	801687c <mg_http_get_request_len+0x50>
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3b01      	subs	r3, #1
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	4413      	add	r3, r2
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2b0a      	cmp	r3, #10
 801687a:	d016      	beq.n	80168aa <mg_http_get_request_len+0x7e>
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2b03      	cmp	r3, #3
 8016880:	d916      	bls.n	80168b0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	4413      	add	r3, r2
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b0a      	cmp	r3, #10
 801688c:	d110      	bne.n	80168b0 <mg_http_get_request_len+0x84>
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	3b01      	subs	r3, #1
 8016892:	687a      	ldr	r2, [r7, #4]
 8016894:	4413      	add	r3, r2
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	2b0d      	cmp	r3, #13
 801689a:	d109      	bne.n	80168b0 <mg_http_get_request_len+0x84>
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	3b02      	subs	r3, #2
 80168a0:	687a      	ldr	r2, [r7, #4]
 80168a2:	4413      	add	r3, r2
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b0a      	cmp	r3, #10
 80168a8:	d102      	bne.n	80168b0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	3301      	adds	r3, #1
 80168ae:	e007      	b.n	80168c0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	3301      	adds	r3, #1
 80168b4:	60fb      	str	r3, [r7, #12]
 80168b6:	68fa      	ldr	r2, [r7, #12]
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d3be      	bcc.n	801683c <mg_http_get_request_len+0x10>
  }
  return 0;
 80168be:	2300      	movs	r3, #0
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b088      	sub	sp, #32
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80168d2:	6838      	ldr	r0, [r7, #0]
 80168d4:	f7e9 fcd4 	bl	8000280 <strlen>
 80168d8:	61b8      	str	r0, [r7, #24]
 80168da:	231e      	movs	r3, #30
 80168dc:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80168de:	2300      	movs	r3, #0
 80168e0:	61fb      	str	r3, [r7, #28]
 80168e2:	e01f      	b.n	8016924 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	3302      	adds	r3, #2
 80168e8:	011b      	lsls	r3, r3, #4
 80168ea:	687a      	ldr	r2, [r7, #4]
 80168ec:	4413      	add	r3, r2
 80168ee:	613b      	str	r3, [r7, #16]
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	011b      	lsls	r3, r3, #4
 80168f4:	3328      	adds	r3, #40	@ 0x28
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	4413      	add	r3, r2
 80168fa:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	69ba      	ldr	r2, [r7, #24]
 8016902:	429a      	cmp	r2, r3
 8016904:	d10b      	bne.n	801691e <mg_http_get_header+0x56>
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	69ba      	ldr	r2, [r7, #24]
 801690c:	6839      	ldr	r1, [r7, #0]
 801690e:	4618      	mov	r0, r3
 8016910:	f7ff fd4c 	bl	80163ac <mg_ncasecmp>
 8016914:	4603      	mov	r3, r0
 8016916:	2b00      	cmp	r3, #0
 8016918:	d101      	bne.n	801691e <mg_http_get_header+0x56>
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	e010      	b.n	8016940 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	3301      	adds	r3, #1
 8016922:	61fb      	str	r3, [r7, #28]
 8016924:	69fa      	ldr	r2, [r7, #28]
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	429a      	cmp	r2, r3
 801692a:	d208      	bcs.n	801693e <mg_http_get_header+0x76>
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	3302      	adds	r3, #2
 8016932:	011b      	lsls	r3, r3, #4
 8016934:	4413      	add	r3, r2
 8016936:	3304      	adds	r3, #4
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d1d2      	bne.n	80168e4 <mg_http_get_header+0x1c>
  }
  return NULL;
 801693e:	2300      	movs	r3, #0
}
 8016940:	4618      	mov	r0, r3
 8016942:	3720      	adds	r7, #32
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	4603      	mov	r3, r0
 8016950:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8016952:	79fb      	ldrb	r3, [r7, #7]
 8016954:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016958:	2b80      	cmp	r3, #128	@ 0x80
 801695a:	bf0c      	ite	eq
 801695c:	2301      	moveq	r3, #1
 801695e:	2300      	movne	r3, #0
 8016960:	b2db      	uxtb	r3, r3
}
 8016962:	4618      	mov	r0, r3
 8016964:	370c      	adds	r7, #12
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr

0801696e <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801696e:	b580      	push	{r7, lr}
 8016970:	b086      	sub	sp, #24
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
 8016976:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	617b      	str	r3, [r7, #20]
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8016982:	683a      	ldr	r2, [r7, #0]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801698a:	7cfb      	ldrb	r3, [r7, #19]
 801698c:	2b20      	cmp	r3, #32
 801698e:	d904      	bls.n	801699a <clen+0x2c>
 8016990:	7cfb      	ldrb	r3, [r7, #19]
 8016992:	2b7d      	cmp	r3, #125	@ 0x7d
 8016994:	d801      	bhi.n	801699a <clen+0x2c>
 8016996:	2301      	movs	r3, #1
 8016998:	e054      	b.n	8016a44 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801699a:	7cfb      	ldrb	r3, [r7, #19]
 801699c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80169a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80169a2:	d10d      	bne.n	80169c0 <clen+0x52>
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2b01      	cmp	r3, #1
 80169a8:	dd0a      	ble.n	80169c0 <clen+0x52>
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	3301      	adds	r3, #1
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7ff ffc9 	bl	8016948 <vcb>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d001      	beq.n	80169c0 <clen+0x52>
 80169bc:	2302      	movs	r3, #2
 80169be:	e041      	b.n	8016a44 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 80169c0:	7cfb      	ldrb	r3, [r7, #19]
 80169c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80169c6:	2be0      	cmp	r3, #224	@ 0xe0
 80169c8:	d116      	bne.n	80169f8 <clen+0x8a>
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2b02      	cmp	r3, #2
 80169ce:	dd13      	ble.n	80169f8 <clen+0x8a>
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	3301      	adds	r3, #1
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7ff ffb6 	bl	8016948 <vcb>
 80169dc:	4603      	mov	r3, r0
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00a      	beq.n	80169f8 <clen+0x8a>
 80169e2:	697b      	ldr	r3, [r7, #20]
 80169e4:	3302      	adds	r3, #2
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7ff ffad 	bl	8016948 <vcb>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d001      	beq.n	80169f8 <clen+0x8a>
 80169f4:	2303      	movs	r3, #3
 80169f6:	e025      	b.n	8016a44 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80169f8:	7cfb      	ldrb	r3, [r7, #19]
 80169fa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80169fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8016a00:	d11f      	bne.n	8016a42 <clen+0xd4>
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2b03      	cmp	r3, #3
 8016a06:	dd1c      	ble.n	8016a42 <clen+0xd4>
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	781b      	ldrb	r3, [r3, #0]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7ff ff9a 	bl	8016948 <vcb>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d013      	beq.n	8016a42 <clen+0xd4>
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	3302      	adds	r3, #2
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7ff ff91 	bl	8016948 <vcb>
 8016a26:	4603      	mov	r3, r0
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d00a      	beq.n	8016a42 <clen+0xd4>
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	3303      	adds	r3, #3
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7ff ff88 	bl	8016948 <vcb>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d001      	beq.n	8016a42 <clen+0xd4>
    return 4;
 8016a3e:	2304      	movs	r3, #4
 8016a40:	e000      	b.n	8016a44 <clen+0xd6>
  return 0;
 8016a42:	2300      	movs	r3, #0
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3718      	adds	r7, #24
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8016a4c:	b480      	push	{r7}
 8016a4e:	b085      	sub	sp, #20
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	68fa      	ldr	r2, [r7, #12]
 8016a5c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8016a5e:	e007      	b.n	8016a70 <skiptorn+0x24>
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	3301      	adds	r3, #1
 8016a64:	60fb      	str	r3, [r7, #12]
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	1c5a      	adds	r2, r3, #1
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	605a      	str	r2, [r3, #4]
 8016a70:	68fa      	ldr	r2, [r7, #12]
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	429a      	cmp	r2, r3
 8016a76:	d207      	bcs.n	8016a88 <skiptorn+0x3c>
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	2b0a      	cmp	r3, #10
 8016a7e:	d003      	beq.n	8016a88 <skiptorn+0x3c>
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	781b      	ldrb	r3, [r3, #0]
 8016a84:	2b0d      	cmp	r3, #13
 8016a86:	d1eb      	bne.n	8016a60 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d208      	bcs.n	8016aa2 <skiptorn+0x56>
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	781b      	ldrb	r3, [r3, #0]
 8016a94:	2b0d      	cmp	r3, #13
 8016a96:	d106      	bne.n	8016aa6 <skiptorn+0x5a>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	3301      	adds	r3, #1
 8016a9c:	781b      	ldrb	r3, [r3, #0]
 8016a9e:	2b0a      	cmp	r3, #10
 8016aa0:	d001      	beq.n	8016aa6 <skiptorn+0x5a>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	e017      	b.n	8016ad6 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8016aa6:	68fa      	ldr	r2, [r7, #12]
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d206      	bcs.n	8016abc <skiptorn+0x70>
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	2b0d      	cmp	r3, #13
 8016ab4:	d102      	bne.n	8016abc <skiptorn+0x70>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8016abc:	68fa      	ldr	r2, [r7, #12]
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d205      	bcs.n	8016ad0 <skiptorn+0x84>
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	1c5a      	adds	r2, r3, #1
 8016ac8:	60fa      	str	r2, [r7, #12]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	2b0a      	cmp	r3, #10
 8016ace:	d001      	beq.n	8016ad4 <skiptorn+0x88>
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	e000      	b.n	8016ad6 <skiptorn+0x8a>
  return s;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3714      	adds	r7, #20
 8016ada:	46bd      	mov	sp, r7
 8016adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae0:	4770      	bx	lr

08016ae2 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	b08a      	sub	sp, #40	@ 0x28
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	60f8      	str	r0, [r7, #12]
 8016aea:	60b9      	str	r1, [r7, #8]
 8016aec:	607a      	str	r2, [r7, #4]
 8016aee:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8016af0:	2300      	movs	r3, #0
 8016af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016af4:	e09a      	b.n	8016c2c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8016af6:	2300      	movs	r3, #0
 8016af8:	61bb      	str	r3, [r7, #24]
 8016afa:	2300      	movs	r3, #0
 8016afc:	61fb      	str	r3, [r7, #28]
 8016afe:	2300      	movs	r3, #0
 8016b00:	613b      	str	r3, [r7, #16]
 8016b02:	2300      	movs	r3, #0
 8016b04:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8016b06:	68fa      	ldr	r2, [r7, #12]
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d301      	bcc.n	8016b12 <mg_http_parse_headers+0x30>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e092      	b.n	8016c38 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b0a      	cmp	r3, #10
 8016b18:	f000 808d 	beq.w	8016c36 <mg_http_parse_headers+0x154>
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b0d      	cmp	r3, #13
 8016b22:	d105      	bne.n	8016b30 <mg_http_parse_headers+0x4e>
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	3301      	adds	r3, #1
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b0a      	cmp	r3, #10
 8016b2c:	f000 8083 	beq.w	8016c36 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8016b34:	e007      	b.n	8016b46 <mg_http_parse_headers+0x64>
 8016b36:	68fa      	ldr	r2, [r7, #12]
 8016b38:	6a3b      	ldr	r3, [r7, #32]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	60fb      	str	r3, [r7, #12]
 8016b3e:	69fa      	ldr	r2, [r7, #28]
 8016b40:	6a3b      	ldr	r3, [r7, #32]
 8016b42:	4413      	add	r3, r2
 8016b44:	61fb      	str	r3, [r7, #28]
 8016b46:	68fa      	ldr	r2, [r7, #12]
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d20b      	bcs.n	8016b66 <mg_http_parse_headers+0x84>
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b3a      	cmp	r3, #58	@ 0x3a
 8016b54:	d007      	beq.n	8016b66 <mg_http_parse_headers+0x84>
 8016b56:	68b9      	ldr	r1, [r7, #8]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f7ff ff08 	bl	801696e <clen>
 8016b5e:	6238      	str	r0, [r7, #32]
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d1e7      	bne.n	8016b36 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d101      	bne.n	8016b70 <mg_http_parse_headers+0x8e>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	e063      	b.n	8016c38 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8016b70:	68fa      	ldr	r2, [r7, #12]
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d206      	bcs.n	8016b86 <mg_http_parse_headers+0xa4>
 8016b78:	68b9      	ldr	r1, [r7, #8]
 8016b7a:	68f8      	ldr	r0, [r7, #12]
 8016b7c:	f7ff fef7 	bl	801696e <clen>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d101      	bne.n	8016b8a <mg_http_parse_headers+0xa8>
 8016b86:	2300      	movs	r3, #0
 8016b88:	e056      	b.n	8016c38 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	1c5a      	adds	r2, r3, #1
 8016b8e:	60fa      	str	r2, [r7, #12]
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	2b3a      	cmp	r3, #58	@ 0x3a
 8016b94:	d004      	beq.n	8016ba0 <mg_http_parse_headers+0xbe>
 8016b96:	2300      	movs	r3, #0
 8016b98:	e04e      	b.n	8016c38 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	60fb      	str	r3, [r7, #12]
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d207      	bcs.n	8016bb8 <mg_http_parse_headers+0xd6>
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	2b20      	cmp	r3, #32
 8016bae:	d0f4      	beq.n	8016b9a <mg_http_parse_headers+0xb8>
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	2b09      	cmp	r3, #9
 8016bb6:	d0f0      	beq.n	8016b9a <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8016bb8:	f107 0310 	add.w	r3, r7, #16
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	68b9      	ldr	r1, [r7, #8]
 8016bc0:	68f8      	ldr	r0, [r7, #12]
 8016bc2:	f7ff ff43 	bl	8016a4c <skiptorn>
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d104      	bne.n	8016bd8 <mg_http_parse_headers+0xf6>
 8016bce:	2300      	movs	r3, #0
 8016bd0:	e032      	b.n	8016c38 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	3b01      	subs	r3, #1
 8016bd6:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d00d      	beq.n	8016bfa <mg_http_parse_headers+0x118>
 8016bde:	693a      	ldr	r2, [r7, #16]
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	3b01      	subs	r3, #1
 8016be4:	4413      	add	r3, r2
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b20      	cmp	r3, #32
 8016bea:	d0f2      	beq.n	8016bd2 <mg_http_parse_headers+0xf0>
 8016bec:	693a      	ldr	r2, [r7, #16]
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	3b01      	subs	r3, #1
 8016bf2:	4413      	add	r3, r2
 8016bf4:	781b      	ldrb	r3, [r3, #0]
 8016bf6:	2b09      	cmp	r3, #9
 8016bf8:	d0eb      	beq.n	8016bd2 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8016bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bfc:	011b      	lsls	r3, r3, #4
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	4413      	add	r3, r2
 8016c02:	461a      	mov	r2, r3
 8016c04:	f107 0318 	add.w	r3, r7, #24
 8016c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8016c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c12:	011b      	lsls	r3, r3, #4
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	4413      	add	r3, r2
 8016c18:	3308      	adds	r3, #8
 8016c1a:	f107 0210 	add.w	r2, r7, #16
 8016c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c22:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8016c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c28:	3301      	adds	r3, #1
 8016c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	f4ff af60 	bcc.w	8016af6 <mg_http_parse_headers+0x14>
  }
  return true;
 8016c36:	2301      	movs	r3, #1
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3728      	adds	r7, #40	@ 0x28
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b090      	sub	sp, #64	@ 0x40
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8016c4c:	68b9      	ldr	r1, [r7, #8]
 8016c4e:	68f8      	ldr	r0, [r7, #12]
 8016c50:	f7ff fdec 	bl	801682c <mg_http_get_request_len>
 8016c54:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d003      	beq.n	8016c64 <mg_http_parse+0x24>
 8016c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	4413      	add	r3, r2
 8016c62:	e000      	b.n	8016c66 <mg_http_parse+0x26>
 8016c64:	2300      	movs	r3, #0
 8016c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8016c68:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f00c f8f2 	bl	8022e58 <memset>
  if (req_len <= 0) return req_len;
 8016c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	dc01      	bgt.n	8016c7e <mg_http_parse+0x3e>
 8016c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c7c:	e13f      	b.n	8016efe <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016c96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8016c9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016ca8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	68fa      	ldr	r2, [r7, #12]
 8016cbc:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8016cbe:	e009      	b.n	8016cd4 <mg_http_parse+0x94>
 8016cc0:	68fa      	ldr	r2, [r7, #12]
 8016cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cc4:	4413      	add	r3, r2
 8016cc6:	60fb      	str	r3, [r7, #12]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cce:	441a      	add	r2, r3
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	605a      	str	r2, [r3, #4]
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d20b      	bcs.n	8016cf4 <mg_http_parse+0xb4>
 8016cdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016cde:	68f8      	ldr	r0, [r7, #12]
 8016ce0:	f7ff fe45 	bl	801696e <clen>
 8016ce4:	6378      	str	r0, [r7, #52]	@ 0x34
 8016ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d1e9      	bne.n	8016cc0 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8016cec:	e002      	b.n	8016cf4 <mg_http_parse+0xb4>
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	60fb      	str	r3, [r7, #12]
 8016cf4:	68fa      	ldr	r2, [r7, #12]
 8016cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d203      	bcs.n	8016d04 <mg_http_parse+0xc4>
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b20      	cmp	r3, #32
 8016d02:	d0f4      	beq.n	8016cee <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8016d0a:	e009      	b.n	8016d20 <mg_http_parse+0xe0>
 8016d0c:	68fa      	ldr	r2, [r7, #12]
 8016d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d10:	4413      	add	r3, r2
 8016d12:	60fb      	str	r3, [r7, #12]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	68da      	ldr	r2, [r3, #12]
 8016d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d1a:	441a      	add	r2, r3
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	60da      	str	r2, [r3, #12]
 8016d20:	68fa      	ldr	r2, [r7, #12]
 8016d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d20b      	bcs.n	8016d40 <mg_http_parse+0x100>
 8016d28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016d2a:	68f8      	ldr	r0, [r7, #12]
 8016d2c:	f7ff fe1f 	bl	801696e <clen>
 8016d30:	6378      	str	r0, [r7, #52]	@ 0x34
 8016d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d1e9      	bne.n	8016d0c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8016d38:	e002      	b.n	8016d40 <mg_http_parse+0x100>
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	68fa      	ldr	r2, [r7, #12]
 8016d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d203      	bcs.n	8016d50 <mg_http_parse+0x110>
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	2b20      	cmp	r3, #32
 8016d4e:	d0f4      	beq.n	8016d3a <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	3318      	adds	r3, #24
 8016d54:	461a      	mov	r2, r3
 8016d56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f7ff fe77 	bl	8016a4c <skiptorn>
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d101      	bne.n	8016d6a <mg_http_parse+0x12a>
 8016d66:	2300      	movs	r3, #0
 8016d68:	e0c9      	b.n	8016efe <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6898      	ldr	r0, [r3, #8]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	461a      	mov	r2, r3
 8016d74:	213f      	movs	r1, #63	@ 0x3f
 8016d76:	f7e9 fa33 	bl	80001e0 <memchr>
 8016d7a:	6338      	str	r0, [r7, #48]	@ 0x30
 8016d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d015      	beq.n	8016dae <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8016d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d84:	1c5a      	adds	r2, r3, #1
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	689a      	ldr	r2, [r3, #8]
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	68db      	ldr	r3, [r3, #12]
 8016d92:	441a      	add	r2, r3
 8016d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d96:	3301      	adds	r3, #1
 8016d98:	1ad3      	subs	r3, r2, r3
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	461a      	mov	r2, r3
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	685b      	ldr	r3, [r3, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d003      	beq.n	8016dbe <mg_http_parse+0x17e>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	68db      	ldr	r3, [r3, #12]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d102      	bne.n	8016dc4 <mg_http_parse+0x184>
 8016dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016dc2:	e09c      	b.n	8016efe <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f103 0220 	add.w	r2, r3, #32
 8016dca:	231e      	movs	r3, #30
 8016dcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f7ff fe87 	bl	8016ae2 <mg_http_parse_headers>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	f083 0301 	eor.w	r3, r3, #1
 8016dda:	b2db      	uxtb	r3, r3
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d002      	beq.n	8016de6 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8016de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016de4:	e08b      	b.n	8016efe <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8016de6:	4948      	ldr	r1, [pc, #288]	@ (8016f08 <mg_http_parse+0x2c8>)
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f7ff fd6d 	bl	80168c8 <mg_http_get_header>
 8016dee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d018      	beq.n	8016e28 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8016dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e02:	f7ff fb13 	bl	801642c <mg_to_size_t>
 8016e06:	4603      	mov	r3, r0
 8016e08:	f083 0301 	eor.w	r3, r3, #1
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d002      	beq.n	8016e18 <mg_http_parse+0x1d8>
 8016e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e16:	e072      	b.n	8016efe <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e20:	441a      	add	r2, r3
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	2205      	movs	r2, #5
 8016e2e:	4937      	ldr	r1, [pc, #220]	@ (8016f0c <mg_http_parse+0x2cc>)
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7ff fabb 	bl	80163ac <mg_ncasecmp>
 8016e36:	4603      	mov	r3, r0
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	bf0c      	ite	eq
 8016e3c:	2301      	moveq	r3, #1
 8016e3e:	2300      	movne	r3, #0
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8016e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016e4e:	d12a      	bne.n	8016ea6 <mg_http_parse+0x266>
 8016e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d127      	bne.n	8016ea6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8016e56:	f107 0310 	add.w	r3, r7, #16
 8016e5a:	492d      	ldr	r1, [pc, #180]	@ (8016f10 <mg_http_parse+0x2d0>)
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f009 ff7d 	bl	8020d5c <mg_str_s>
 8016e62:	6879      	ldr	r1, [r7, #4]
 8016e64:	f107 0310 	add.w	r3, r7, #16
 8016e68:	cb0c      	ldmia	r3, {r2, r3}
 8016e6a:	c903      	ldmia	r1, {r0, r1}
 8016e6c:	f00a f802 	bl	8020e74 <mg_strcasecmp>
 8016e70:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d017      	beq.n	8016ea6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8016e76:	f107 0318 	add.w	r3, r7, #24
 8016e7a:	4926      	ldr	r1, [pc, #152]	@ (8016f14 <mg_http_parse+0x2d4>)
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f009 ff6d 	bl	8020d5c <mg_str_s>
 8016e82:	6879      	ldr	r1, [r7, #4]
 8016e84:	f107 0318 	add.w	r3, r7, #24
 8016e88:	cb0c      	ldmia	r3, {r2, r3}
 8016e8a:	c903      	ldmia	r1, {r0, r1}
 8016e8c:	f009 fff2 	bl	8020e74 <mg_strcasecmp>
 8016e90:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d007      	beq.n	8016ea6 <mg_http_parse+0x266>
    hm->body.len = 0;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8016e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8016eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016eb0:	d11b      	bne.n	8016eea <mg_http_parse+0x2aa>
 8016eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d018      	beq.n	8016eea <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8016eb8:	f107 0320 	add.w	r3, r7, #32
 8016ebc:	4916      	ldr	r1, [pc, #88]	@ (8016f18 <mg_http_parse+0x2d8>)
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f009 ff4c 	bl	8020d5c <mg_str_s>
 8016ec4:	6879      	ldr	r1, [r7, #4]
 8016ec6:	f107 0320 	add.w	r3, r7, #32
 8016eca:	cb0c      	ldmia	r3, {r2, r3}
 8016ecc:	3108      	adds	r1, #8
 8016ece:	c903      	ldmia	r1, {r0, r1}
 8016ed0:	f009 ffd0 	bl	8020e74 <mg_strcasecmp>
 8016ed4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d107      	bne.n	8016eea <mg_http_parse+0x2aa>
    hm->body.len = 0;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2200      	movs	r2, #0
 8016ede:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8016ee2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8016ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d202      	bcs.n	8016efc <mg_http_parse+0x2bc>
 8016ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016efa:	e000      	b.n	8016efe <mg_http_parse+0x2be>

  return req_len;
 8016efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3740      	adds	r7, #64	@ 0x40
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
 8016f06:	bf00      	nop
 8016f08:	08026a34 	.word	0x08026a34
 8016f0c:	08026a44 	.word	0x08026a44
 8016f10:	08026a4c 	.word	0x08026a4c
 8016f14:	08026a50 	.word	0x08026a50
 8016f18:	08026a58 	.word	0x08026a58

08016f1c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8016f1c:	b480      	push	{r7}
 8016f1e:	b083      	sub	sp, #12
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	3b64      	subs	r3, #100	@ 0x64
 8016f28:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8016f2c:	4293      	cmp	r3, r2
 8016f2e:	f200 8469 	bhi.w	8017804 <mg_http_status_code_str+0x8e8>
 8016f32:	a101      	add	r1, pc, #4	@ (adr r1, 8016f38 <mg_http_status_code_str+0x1c>)
 8016f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016f38:	08017709 	.word	0x08017709
 8016f3c:	0801770d 	.word	0x0801770d
 8016f40:	08017711 	.word	0x08017711
 8016f44:	08017805 	.word	0x08017805
 8016f48:	08017805 	.word	0x08017805
 8016f4c:	08017805 	.word	0x08017805
 8016f50:	08017805 	.word	0x08017805
 8016f54:	08017805 	.word	0x08017805
 8016f58:	08017805 	.word	0x08017805
 8016f5c:	08017805 	.word	0x08017805
 8016f60:	08017805 	.word	0x08017805
 8016f64:	08017805 	.word	0x08017805
 8016f68:	08017805 	.word	0x08017805
 8016f6c:	08017805 	.word	0x08017805
 8016f70:	08017805 	.word	0x08017805
 8016f74:	08017805 	.word	0x08017805
 8016f78:	08017805 	.word	0x08017805
 8016f7c:	08017805 	.word	0x08017805
 8016f80:	08017805 	.word	0x08017805
 8016f84:	08017805 	.word	0x08017805
 8016f88:	08017805 	.word	0x08017805
 8016f8c:	08017805 	.word	0x08017805
 8016f90:	08017805 	.word	0x08017805
 8016f94:	08017805 	.word	0x08017805
 8016f98:	08017805 	.word	0x08017805
 8016f9c:	08017805 	.word	0x08017805
 8016fa0:	08017805 	.word	0x08017805
 8016fa4:	08017805 	.word	0x08017805
 8016fa8:	08017805 	.word	0x08017805
 8016fac:	08017805 	.word	0x08017805
 8016fb0:	08017805 	.word	0x08017805
 8016fb4:	08017805 	.word	0x08017805
 8016fb8:	08017805 	.word	0x08017805
 8016fbc:	08017805 	.word	0x08017805
 8016fc0:	08017805 	.word	0x08017805
 8016fc4:	08017805 	.word	0x08017805
 8016fc8:	08017805 	.word	0x08017805
 8016fcc:	08017805 	.word	0x08017805
 8016fd0:	08017805 	.word	0x08017805
 8016fd4:	08017805 	.word	0x08017805
 8016fd8:	08017805 	.word	0x08017805
 8016fdc:	08017805 	.word	0x08017805
 8016fe0:	08017805 	.word	0x08017805
 8016fe4:	08017805 	.word	0x08017805
 8016fe8:	08017805 	.word	0x08017805
 8016fec:	08017805 	.word	0x08017805
 8016ff0:	08017805 	.word	0x08017805
 8016ff4:	08017805 	.word	0x08017805
 8016ff8:	08017805 	.word	0x08017805
 8016ffc:	08017805 	.word	0x08017805
 8017000:	08017805 	.word	0x08017805
 8017004:	08017805 	.word	0x08017805
 8017008:	08017805 	.word	0x08017805
 801700c:	08017805 	.word	0x08017805
 8017010:	08017805 	.word	0x08017805
 8017014:	08017805 	.word	0x08017805
 8017018:	08017805 	.word	0x08017805
 801701c:	08017805 	.word	0x08017805
 8017020:	08017805 	.word	0x08017805
 8017024:	08017805 	.word	0x08017805
 8017028:	08017805 	.word	0x08017805
 801702c:	08017805 	.word	0x08017805
 8017030:	08017805 	.word	0x08017805
 8017034:	08017805 	.word	0x08017805
 8017038:	08017805 	.word	0x08017805
 801703c:	08017805 	.word	0x08017805
 8017040:	08017805 	.word	0x08017805
 8017044:	08017805 	.word	0x08017805
 8017048:	08017805 	.word	0x08017805
 801704c:	08017805 	.word	0x08017805
 8017050:	08017805 	.word	0x08017805
 8017054:	08017805 	.word	0x08017805
 8017058:	08017805 	.word	0x08017805
 801705c:	08017805 	.word	0x08017805
 8017060:	08017805 	.word	0x08017805
 8017064:	08017805 	.word	0x08017805
 8017068:	08017805 	.word	0x08017805
 801706c:	08017805 	.word	0x08017805
 8017070:	08017805 	.word	0x08017805
 8017074:	08017805 	.word	0x08017805
 8017078:	08017805 	.word	0x08017805
 801707c:	08017805 	.word	0x08017805
 8017080:	08017805 	.word	0x08017805
 8017084:	08017805 	.word	0x08017805
 8017088:	08017805 	.word	0x08017805
 801708c:	08017805 	.word	0x08017805
 8017090:	08017805 	.word	0x08017805
 8017094:	08017805 	.word	0x08017805
 8017098:	08017805 	.word	0x08017805
 801709c:	08017805 	.word	0x08017805
 80170a0:	08017805 	.word	0x08017805
 80170a4:	08017805 	.word	0x08017805
 80170a8:	08017805 	.word	0x08017805
 80170ac:	08017805 	.word	0x08017805
 80170b0:	08017805 	.word	0x08017805
 80170b4:	08017805 	.word	0x08017805
 80170b8:	08017805 	.word	0x08017805
 80170bc:	08017805 	.word	0x08017805
 80170c0:	08017805 	.word	0x08017805
 80170c4:	08017805 	.word	0x08017805
 80170c8:	08017715 	.word	0x08017715
 80170cc:	08017719 	.word	0x08017719
 80170d0:	0801771d 	.word	0x0801771d
 80170d4:	08017721 	.word	0x08017721
 80170d8:	08017725 	.word	0x08017725
 80170dc:	08017729 	.word	0x08017729
 80170e0:	0801772d 	.word	0x0801772d
 80170e4:	08017731 	.word	0x08017731
 80170e8:	08017735 	.word	0x08017735
 80170ec:	08017805 	.word	0x08017805
 80170f0:	08017805 	.word	0x08017805
 80170f4:	08017805 	.word	0x08017805
 80170f8:	08017805 	.word	0x08017805
 80170fc:	08017805 	.word	0x08017805
 8017100:	08017805 	.word	0x08017805
 8017104:	08017805 	.word	0x08017805
 8017108:	08017805 	.word	0x08017805
 801710c:	08017805 	.word	0x08017805
 8017110:	08017805 	.word	0x08017805
 8017114:	08017805 	.word	0x08017805
 8017118:	08017805 	.word	0x08017805
 801711c:	08017805 	.word	0x08017805
 8017120:	08017805 	.word	0x08017805
 8017124:	08017805 	.word	0x08017805
 8017128:	08017805 	.word	0x08017805
 801712c:	08017805 	.word	0x08017805
 8017130:	08017739 	.word	0x08017739
 8017134:	08017805 	.word	0x08017805
 8017138:	08017805 	.word	0x08017805
 801713c:	08017805 	.word	0x08017805
 8017140:	08017805 	.word	0x08017805
 8017144:	08017805 	.word	0x08017805
 8017148:	08017805 	.word	0x08017805
 801714c:	08017805 	.word	0x08017805
 8017150:	08017805 	.word	0x08017805
 8017154:	08017805 	.word	0x08017805
 8017158:	08017805 	.word	0x08017805
 801715c:	08017805 	.word	0x08017805
 8017160:	08017805 	.word	0x08017805
 8017164:	08017805 	.word	0x08017805
 8017168:	08017805 	.word	0x08017805
 801716c:	08017805 	.word	0x08017805
 8017170:	08017805 	.word	0x08017805
 8017174:	08017805 	.word	0x08017805
 8017178:	08017805 	.word	0x08017805
 801717c:	08017805 	.word	0x08017805
 8017180:	08017805 	.word	0x08017805
 8017184:	08017805 	.word	0x08017805
 8017188:	08017805 	.word	0x08017805
 801718c:	08017805 	.word	0x08017805
 8017190:	08017805 	.word	0x08017805
 8017194:	08017805 	.word	0x08017805
 8017198:	08017805 	.word	0x08017805
 801719c:	08017805 	.word	0x08017805
 80171a0:	08017805 	.word	0x08017805
 80171a4:	08017805 	.word	0x08017805
 80171a8:	08017805 	.word	0x08017805
 80171ac:	08017805 	.word	0x08017805
 80171b0:	08017805 	.word	0x08017805
 80171b4:	08017805 	.word	0x08017805
 80171b8:	08017805 	.word	0x08017805
 80171bc:	08017805 	.word	0x08017805
 80171c0:	08017805 	.word	0x08017805
 80171c4:	08017805 	.word	0x08017805
 80171c8:	08017805 	.word	0x08017805
 80171cc:	08017805 	.word	0x08017805
 80171d0:	08017805 	.word	0x08017805
 80171d4:	08017805 	.word	0x08017805
 80171d8:	08017805 	.word	0x08017805
 80171dc:	08017805 	.word	0x08017805
 80171e0:	08017805 	.word	0x08017805
 80171e4:	08017805 	.word	0x08017805
 80171e8:	08017805 	.word	0x08017805
 80171ec:	08017805 	.word	0x08017805
 80171f0:	08017805 	.word	0x08017805
 80171f4:	08017805 	.word	0x08017805
 80171f8:	08017805 	.word	0x08017805
 80171fc:	08017805 	.word	0x08017805
 8017200:	08017805 	.word	0x08017805
 8017204:	08017805 	.word	0x08017805
 8017208:	08017805 	.word	0x08017805
 801720c:	08017805 	.word	0x08017805
 8017210:	08017805 	.word	0x08017805
 8017214:	08017805 	.word	0x08017805
 8017218:	08017805 	.word	0x08017805
 801721c:	08017805 	.word	0x08017805
 8017220:	08017805 	.word	0x08017805
 8017224:	08017805 	.word	0x08017805
 8017228:	08017805 	.word	0x08017805
 801722c:	08017805 	.word	0x08017805
 8017230:	08017805 	.word	0x08017805
 8017234:	08017805 	.word	0x08017805
 8017238:	08017805 	.word	0x08017805
 801723c:	08017805 	.word	0x08017805
 8017240:	08017805 	.word	0x08017805
 8017244:	08017805 	.word	0x08017805
 8017248:	08017805 	.word	0x08017805
 801724c:	08017805 	.word	0x08017805
 8017250:	08017805 	.word	0x08017805
 8017254:	08017805 	.word	0x08017805
 8017258:	0801773d 	.word	0x0801773d
 801725c:	08017741 	.word	0x08017741
 8017260:	08017745 	.word	0x08017745
 8017264:	08017749 	.word	0x08017749
 8017268:	0801774d 	.word	0x0801774d
 801726c:	08017751 	.word	0x08017751
 8017270:	08017805 	.word	0x08017805
 8017274:	08017755 	.word	0x08017755
 8017278:	08017759 	.word	0x08017759
 801727c:	08017805 	.word	0x08017805
 8017280:	08017805 	.word	0x08017805
 8017284:	08017805 	.word	0x08017805
 8017288:	08017805 	.word	0x08017805
 801728c:	08017805 	.word	0x08017805
 8017290:	08017805 	.word	0x08017805
 8017294:	08017805 	.word	0x08017805
 8017298:	08017805 	.word	0x08017805
 801729c:	08017805 	.word	0x08017805
 80172a0:	08017805 	.word	0x08017805
 80172a4:	08017805 	.word	0x08017805
 80172a8:	08017805 	.word	0x08017805
 80172ac:	08017805 	.word	0x08017805
 80172b0:	08017805 	.word	0x08017805
 80172b4:	08017805 	.word	0x08017805
 80172b8:	08017805 	.word	0x08017805
 80172bc:	08017805 	.word	0x08017805
 80172c0:	08017805 	.word	0x08017805
 80172c4:	08017805 	.word	0x08017805
 80172c8:	08017805 	.word	0x08017805
 80172cc:	08017805 	.word	0x08017805
 80172d0:	08017805 	.word	0x08017805
 80172d4:	08017805 	.word	0x08017805
 80172d8:	08017805 	.word	0x08017805
 80172dc:	08017805 	.word	0x08017805
 80172e0:	08017805 	.word	0x08017805
 80172e4:	08017805 	.word	0x08017805
 80172e8:	08017805 	.word	0x08017805
 80172ec:	08017805 	.word	0x08017805
 80172f0:	08017805 	.word	0x08017805
 80172f4:	08017805 	.word	0x08017805
 80172f8:	08017805 	.word	0x08017805
 80172fc:	08017805 	.word	0x08017805
 8017300:	08017805 	.word	0x08017805
 8017304:	08017805 	.word	0x08017805
 8017308:	08017805 	.word	0x08017805
 801730c:	08017805 	.word	0x08017805
 8017310:	08017805 	.word	0x08017805
 8017314:	08017805 	.word	0x08017805
 8017318:	08017805 	.word	0x08017805
 801731c:	08017805 	.word	0x08017805
 8017320:	08017805 	.word	0x08017805
 8017324:	08017805 	.word	0x08017805
 8017328:	08017805 	.word	0x08017805
 801732c:	08017805 	.word	0x08017805
 8017330:	08017805 	.word	0x08017805
 8017334:	08017805 	.word	0x08017805
 8017338:	08017805 	.word	0x08017805
 801733c:	08017805 	.word	0x08017805
 8017340:	08017805 	.word	0x08017805
 8017344:	08017805 	.word	0x08017805
 8017348:	08017805 	.word	0x08017805
 801734c:	08017805 	.word	0x08017805
 8017350:	08017805 	.word	0x08017805
 8017354:	08017805 	.word	0x08017805
 8017358:	08017805 	.word	0x08017805
 801735c:	08017805 	.word	0x08017805
 8017360:	08017805 	.word	0x08017805
 8017364:	08017805 	.word	0x08017805
 8017368:	08017805 	.word	0x08017805
 801736c:	08017805 	.word	0x08017805
 8017370:	08017805 	.word	0x08017805
 8017374:	08017805 	.word	0x08017805
 8017378:	08017805 	.word	0x08017805
 801737c:	08017805 	.word	0x08017805
 8017380:	08017805 	.word	0x08017805
 8017384:	08017805 	.word	0x08017805
 8017388:	08017805 	.word	0x08017805
 801738c:	08017805 	.word	0x08017805
 8017390:	08017805 	.word	0x08017805
 8017394:	08017805 	.word	0x08017805
 8017398:	08017805 	.word	0x08017805
 801739c:	08017805 	.word	0x08017805
 80173a0:	08017805 	.word	0x08017805
 80173a4:	08017805 	.word	0x08017805
 80173a8:	08017805 	.word	0x08017805
 80173ac:	08017805 	.word	0x08017805
 80173b0:	08017805 	.word	0x08017805
 80173b4:	08017805 	.word	0x08017805
 80173b8:	08017805 	.word	0x08017805
 80173bc:	08017805 	.word	0x08017805
 80173c0:	08017805 	.word	0x08017805
 80173c4:	08017805 	.word	0x08017805
 80173c8:	08017805 	.word	0x08017805
 80173cc:	08017805 	.word	0x08017805
 80173d0:	08017805 	.word	0x08017805
 80173d4:	08017805 	.word	0x08017805
 80173d8:	08017805 	.word	0x08017805
 80173dc:	08017805 	.word	0x08017805
 80173e0:	08017805 	.word	0x08017805
 80173e4:	08017805 	.word	0x08017805
 80173e8:	0801775d 	.word	0x0801775d
 80173ec:	08017761 	.word	0x08017761
 80173f0:	08017765 	.word	0x08017765
 80173f4:	08017769 	.word	0x08017769
 80173f8:	0801776d 	.word	0x0801776d
 80173fc:	08017771 	.word	0x08017771
 8017400:	08017775 	.word	0x08017775
 8017404:	08017779 	.word	0x08017779
 8017408:	0801777d 	.word	0x0801777d
 801740c:	08017781 	.word	0x08017781
 8017410:	08017785 	.word	0x08017785
 8017414:	08017789 	.word	0x08017789
 8017418:	0801778d 	.word	0x0801778d
 801741c:	08017791 	.word	0x08017791
 8017420:	08017795 	.word	0x08017795
 8017424:	08017799 	.word	0x08017799
 8017428:	0801779d 	.word	0x0801779d
 801742c:	080177a1 	.word	0x080177a1
 8017430:	080177a5 	.word	0x080177a5
 8017434:	08017805 	.word	0x08017805
 8017438:	08017805 	.word	0x08017805
 801743c:	080177a9 	.word	0x080177a9
 8017440:	080177ad 	.word	0x080177ad
 8017444:	080177b1 	.word	0x080177b1
 8017448:	080177b5 	.word	0x080177b5
 801744c:	08017805 	.word	0x08017805
 8017450:	080177b9 	.word	0x080177b9
 8017454:	08017805 	.word	0x08017805
 8017458:	080177bd 	.word	0x080177bd
 801745c:	080177c1 	.word	0x080177c1
 8017460:	08017805 	.word	0x08017805
 8017464:	080177c5 	.word	0x080177c5
 8017468:	08017805 	.word	0x08017805
 801746c:	08017805 	.word	0x08017805
 8017470:	08017805 	.word	0x08017805
 8017474:	08017805 	.word	0x08017805
 8017478:	08017805 	.word	0x08017805
 801747c:	08017805 	.word	0x08017805
 8017480:	08017805 	.word	0x08017805
 8017484:	08017805 	.word	0x08017805
 8017488:	08017805 	.word	0x08017805
 801748c:	08017805 	.word	0x08017805
 8017490:	08017805 	.word	0x08017805
 8017494:	08017805 	.word	0x08017805
 8017498:	080177c9 	.word	0x080177c9
 801749c:	08017805 	.word	0x08017805
 80174a0:	08017805 	.word	0x08017805
 80174a4:	08017805 	.word	0x08017805
 80174a8:	08017805 	.word	0x08017805
 80174ac:	08017805 	.word	0x08017805
 80174b0:	08017805 	.word	0x08017805
 80174b4:	080177cd 	.word	0x080177cd
 80174b8:	08017805 	.word	0x08017805
 80174bc:	08017805 	.word	0x08017805
 80174c0:	08017805 	.word	0x08017805
 80174c4:	08017805 	.word	0x08017805
 80174c8:	08017805 	.word	0x08017805
 80174cc:	08017805 	.word	0x08017805
 80174d0:	08017805 	.word	0x08017805
 80174d4:	08017805 	.word	0x08017805
 80174d8:	08017805 	.word	0x08017805
 80174dc:	08017805 	.word	0x08017805
 80174e0:	08017805 	.word	0x08017805
 80174e4:	08017805 	.word	0x08017805
 80174e8:	08017805 	.word	0x08017805
 80174ec:	08017805 	.word	0x08017805
 80174f0:	08017805 	.word	0x08017805
 80174f4:	08017805 	.word	0x08017805
 80174f8:	08017805 	.word	0x08017805
 80174fc:	08017805 	.word	0x08017805
 8017500:	08017805 	.word	0x08017805
 8017504:	08017805 	.word	0x08017805
 8017508:	08017805 	.word	0x08017805
 801750c:	08017805 	.word	0x08017805
 8017510:	08017805 	.word	0x08017805
 8017514:	08017805 	.word	0x08017805
 8017518:	08017805 	.word	0x08017805
 801751c:	08017805 	.word	0x08017805
 8017520:	08017805 	.word	0x08017805
 8017524:	08017805 	.word	0x08017805
 8017528:	08017805 	.word	0x08017805
 801752c:	08017805 	.word	0x08017805
 8017530:	08017805 	.word	0x08017805
 8017534:	08017805 	.word	0x08017805
 8017538:	08017805 	.word	0x08017805
 801753c:	08017805 	.word	0x08017805
 8017540:	08017805 	.word	0x08017805
 8017544:	08017805 	.word	0x08017805
 8017548:	08017805 	.word	0x08017805
 801754c:	08017805 	.word	0x08017805
 8017550:	08017805 	.word	0x08017805
 8017554:	08017805 	.word	0x08017805
 8017558:	08017805 	.word	0x08017805
 801755c:	08017805 	.word	0x08017805
 8017560:	08017805 	.word	0x08017805
 8017564:	08017805 	.word	0x08017805
 8017568:	08017805 	.word	0x08017805
 801756c:	08017805 	.word	0x08017805
 8017570:	08017805 	.word	0x08017805
 8017574:	080177d1 	.word	0x080177d1
 8017578:	080177d5 	.word	0x080177d5
 801757c:	080177d9 	.word	0x080177d9
 8017580:	080177dd 	.word	0x080177dd
 8017584:	080177e1 	.word	0x080177e1
 8017588:	080177e5 	.word	0x080177e5
 801758c:	080177e9 	.word	0x080177e9
 8017590:	080177ed 	.word	0x080177ed
 8017594:	080177f1 	.word	0x080177f1
 8017598:	080177f5 	.word	0x080177f5
 801759c:	08017805 	.word	0x08017805
 80175a0:	080177f9 	.word	0x080177f9
 80175a4:	080177fd 	.word	0x080177fd
 80175a8:	08017805 	.word	0x08017805
 80175ac:	08017805 	.word	0x08017805
 80175b0:	08017805 	.word	0x08017805
 80175b4:	08017805 	.word	0x08017805
 80175b8:	08017805 	.word	0x08017805
 80175bc:	08017805 	.word	0x08017805
 80175c0:	08017805 	.word	0x08017805
 80175c4:	08017805 	.word	0x08017805
 80175c8:	08017805 	.word	0x08017805
 80175cc:	08017805 	.word	0x08017805
 80175d0:	08017805 	.word	0x08017805
 80175d4:	08017805 	.word	0x08017805
 80175d8:	08017805 	.word	0x08017805
 80175dc:	08017805 	.word	0x08017805
 80175e0:	08017805 	.word	0x08017805
 80175e4:	08017805 	.word	0x08017805
 80175e8:	08017805 	.word	0x08017805
 80175ec:	08017805 	.word	0x08017805
 80175f0:	08017805 	.word	0x08017805
 80175f4:	08017805 	.word	0x08017805
 80175f8:	08017805 	.word	0x08017805
 80175fc:	08017805 	.word	0x08017805
 8017600:	08017805 	.word	0x08017805
 8017604:	08017805 	.word	0x08017805
 8017608:	08017805 	.word	0x08017805
 801760c:	08017805 	.word	0x08017805
 8017610:	08017805 	.word	0x08017805
 8017614:	08017805 	.word	0x08017805
 8017618:	08017805 	.word	0x08017805
 801761c:	08017805 	.word	0x08017805
 8017620:	08017805 	.word	0x08017805
 8017624:	08017805 	.word	0x08017805
 8017628:	08017805 	.word	0x08017805
 801762c:	08017805 	.word	0x08017805
 8017630:	08017805 	.word	0x08017805
 8017634:	08017805 	.word	0x08017805
 8017638:	08017805 	.word	0x08017805
 801763c:	08017805 	.word	0x08017805
 8017640:	08017805 	.word	0x08017805
 8017644:	08017805 	.word	0x08017805
 8017648:	08017805 	.word	0x08017805
 801764c:	08017805 	.word	0x08017805
 8017650:	08017805 	.word	0x08017805
 8017654:	08017805 	.word	0x08017805
 8017658:	08017805 	.word	0x08017805
 801765c:	08017805 	.word	0x08017805
 8017660:	08017805 	.word	0x08017805
 8017664:	08017805 	.word	0x08017805
 8017668:	08017805 	.word	0x08017805
 801766c:	08017805 	.word	0x08017805
 8017670:	08017805 	.word	0x08017805
 8017674:	08017805 	.word	0x08017805
 8017678:	08017805 	.word	0x08017805
 801767c:	08017805 	.word	0x08017805
 8017680:	08017805 	.word	0x08017805
 8017684:	08017805 	.word	0x08017805
 8017688:	08017805 	.word	0x08017805
 801768c:	08017805 	.word	0x08017805
 8017690:	08017805 	.word	0x08017805
 8017694:	08017805 	.word	0x08017805
 8017698:	08017805 	.word	0x08017805
 801769c:	08017805 	.word	0x08017805
 80176a0:	08017805 	.word	0x08017805
 80176a4:	08017805 	.word	0x08017805
 80176a8:	08017805 	.word	0x08017805
 80176ac:	08017805 	.word	0x08017805
 80176b0:	08017805 	.word	0x08017805
 80176b4:	08017805 	.word	0x08017805
 80176b8:	08017805 	.word	0x08017805
 80176bc:	08017805 	.word	0x08017805
 80176c0:	08017805 	.word	0x08017805
 80176c4:	08017805 	.word	0x08017805
 80176c8:	08017805 	.word	0x08017805
 80176cc:	08017805 	.word	0x08017805
 80176d0:	08017805 	.word	0x08017805
 80176d4:	08017805 	.word	0x08017805
 80176d8:	08017805 	.word	0x08017805
 80176dc:	08017805 	.word	0x08017805
 80176e0:	08017805 	.word	0x08017805
 80176e4:	08017805 	.word	0x08017805
 80176e8:	08017805 	.word	0x08017805
 80176ec:	08017805 	.word	0x08017805
 80176f0:	08017805 	.word	0x08017805
 80176f4:	08017805 	.word	0x08017805
 80176f8:	08017805 	.word	0x08017805
 80176fc:	08017805 	.word	0x08017805
 8017700:	08017805 	.word	0x08017805
 8017704:	08017801 	.word	0x08017801
    case 100: return "Continue";
 8017708:	4b42      	ldr	r3, [pc, #264]	@ (8017814 <mg_http_status_code_str+0x8f8>)
 801770a:	e07c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 801770c:	4b42      	ldr	r3, [pc, #264]	@ (8017818 <mg_http_status_code_str+0x8fc>)
 801770e:	e07a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8017710:	4b42      	ldr	r3, [pc, #264]	@ (801781c <mg_http_status_code_str+0x900>)
 8017712:	e078      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8017714:	4b42      	ldr	r3, [pc, #264]	@ (8017820 <mg_http_status_code_str+0x904>)
 8017716:	e076      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8017718:	4b42      	ldr	r3, [pc, #264]	@ (8017824 <mg_http_status_code_str+0x908>)
 801771a:	e074      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 801771c:	4b42      	ldr	r3, [pc, #264]	@ (8017828 <mg_http_status_code_str+0x90c>)
 801771e:	e072      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8017720:	4b42      	ldr	r3, [pc, #264]	@ (801782c <mg_http_status_code_str+0x910>)
 8017722:	e070      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8017724:	4b42      	ldr	r3, [pc, #264]	@ (8017830 <mg_http_status_code_str+0x914>)
 8017726:	e06e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8017728:	4b42      	ldr	r3, [pc, #264]	@ (8017834 <mg_http_status_code_str+0x918>)
 801772a:	e06c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 801772c:	4b42      	ldr	r3, [pc, #264]	@ (8017838 <mg_http_status_code_str+0x91c>)
 801772e:	e06a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8017730:	4b42      	ldr	r3, [pc, #264]	@ (801783c <mg_http_status_code_str+0x920>)
 8017732:	e068      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8017734:	4b42      	ldr	r3, [pc, #264]	@ (8017840 <mg_http_status_code_str+0x924>)
 8017736:	e066      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8017738:	4b42      	ldr	r3, [pc, #264]	@ (8017844 <mg_http_status_code_str+0x928>)
 801773a:	e064      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 801773c:	4b42      	ldr	r3, [pc, #264]	@ (8017848 <mg_http_status_code_str+0x92c>)
 801773e:	e062      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8017740:	4b42      	ldr	r3, [pc, #264]	@ (801784c <mg_http_status_code_str+0x930>)
 8017742:	e060      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8017744:	4b42      	ldr	r3, [pc, #264]	@ (8017850 <mg_http_status_code_str+0x934>)
 8017746:	e05e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8017748:	4b42      	ldr	r3, [pc, #264]	@ (8017854 <mg_http_status_code_str+0x938>)
 801774a:	e05c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 801774c:	4b42      	ldr	r3, [pc, #264]	@ (8017858 <mg_http_status_code_str+0x93c>)
 801774e:	e05a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8017750:	4b42      	ldr	r3, [pc, #264]	@ (801785c <mg_http_status_code_str+0x940>)
 8017752:	e058      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8017754:	4b42      	ldr	r3, [pc, #264]	@ (8017860 <mg_http_status_code_str+0x944>)
 8017756:	e056      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8017758:	4b42      	ldr	r3, [pc, #264]	@ (8017864 <mg_http_status_code_str+0x948>)
 801775a:	e054      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 801775c:	4b42      	ldr	r3, [pc, #264]	@ (8017868 <mg_http_status_code_str+0x94c>)
 801775e:	e052      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8017760:	4b42      	ldr	r3, [pc, #264]	@ (801786c <mg_http_status_code_str+0x950>)
 8017762:	e050      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8017764:	4b42      	ldr	r3, [pc, #264]	@ (8017870 <mg_http_status_code_str+0x954>)
 8017766:	e04e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8017768:	4b42      	ldr	r3, [pc, #264]	@ (8017874 <mg_http_status_code_str+0x958>)
 801776a:	e04c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 801776c:	4b42      	ldr	r3, [pc, #264]	@ (8017878 <mg_http_status_code_str+0x95c>)
 801776e:	e04a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8017770:	4b42      	ldr	r3, [pc, #264]	@ (801787c <mg_http_status_code_str+0x960>)
 8017772:	e048      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8017774:	4b42      	ldr	r3, [pc, #264]	@ (8017880 <mg_http_status_code_str+0x964>)
 8017776:	e046      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8017778:	4b42      	ldr	r3, [pc, #264]	@ (8017884 <mg_http_status_code_str+0x968>)
 801777a:	e044      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 801777c:	4b42      	ldr	r3, [pc, #264]	@ (8017888 <mg_http_status_code_str+0x96c>)
 801777e:	e042      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8017780:	4b42      	ldr	r3, [pc, #264]	@ (801788c <mg_http_status_code_str+0x970>)
 8017782:	e040      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8017784:	4b42      	ldr	r3, [pc, #264]	@ (8017890 <mg_http_status_code_str+0x974>)
 8017786:	e03e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8017788:	4b42      	ldr	r3, [pc, #264]	@ (8017894 <mg_http_status_code_str+0x978>)
 801778a:	e03c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 801778c:	4b42      	ldr	r3, [pc, #264]	@ (8017898 <mg_http_status_code_str+0x97c>)
 801778e:	e03a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8017790:	4b42      	ldr	r3, [pc, #264]	@ (801789c <mg_http_status_code_str+0x980>)
 8017792:	e038      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8017794:	4b42      	ldr	r3, [pc, #264]	@ (80178a0 <mg_http_status_code_str+0x984>)
 8017796:	e036      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8017798:	4b42      	ldr	r3, [pc, #264]	@ (80178a4 <mg_http_status_code_str+0x988>)
 801779a:	e034      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 801779c:	4b42      	ldr	r3, [pc, #264]	@ (80178a8 <mg_http_status_code_str+0x98c>)
 801779e:	e032      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80177a0:	4b42      	ldr	r3, [pc, #264]	@ (80178ac <mg_http_status_code_str+0x990>)
 80177a2:	e030      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80177a4:	4b42      	ldr	r3, [pc, #264]	@ (80178b0 <mg_http_status_code_str+0x994>)
 80177a6:	e02e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80177a8:	4b42      	ldr	r3, [pc, #264]	@ (80178b4 <mg_http_status_code_str+0x998>)
 80177aa:	e02c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80177ac:	4b42      	ldr	r3, [pc, #264]	@ (80178b8 <mg_http_status_code_str+0x99c>)
 80177ae:	e02a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80177b0:	4b42      	ldr	r3, [pc, #264]	@ (80178bc <mg_http_status_code_str+0x9a0>)
 80177b2:	e028      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80177b4:	4b42      	ldr	r3, [pc, #264]	@ (80178c0 <mg_http_status_code_str+0x9a4>)
 80177b6:	e026      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80177b8:	4b42      	ldr	r3, [pc, #264]	@ (80178c4 <mg_http_status_code_str+0x9a8>)
 80177ba:	e024      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80177bc:	4b42      	ldr	r3, [pc, #264]	@ (80178c8 <mg_http_status_code_str+0x9ac>)
 80177be:	e022      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80177c0:	4b42      	ldr	r3, [pc, #264]	@ (80178cc <mg_http_status_code_str+0x9b0>)
 80177c2:	e020      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80177c4:	4b42      	ldr	r3, [pc, #264]	@ (80178d0 <mg_http_status_code_str+0x9b4>)
 80177c6:	e01e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80177c8:	4b42      	ldr	r3, [pc, #264]	@ (80178d4 <mg_http_status_code_str+0x9b8>)
 80177ca:	e01c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80177cc:	4b42      	ldr	r3, [pc, #264]	@ (80178d8 <mg_http_status_code_str+0x9bc>)
 80177ce:	e01a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80177d0:	4b42      	ldr	r3, [pc, #264]	@ (80178dc <mg_http_status_code_str+0x9c0>)
 80177d2:	e018      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80177d4:	4b42      	ldr	r3, [pc, #264]	@ (80178e0 <mg_http_status_code_str+0x9c4>)
 80177d6:	e016      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80177d8:	4b42      	ldr	r3, [pc, #264]	@ (80178e4 <mg_http_status_code_str+0x9c8>)
 80177da:	e014      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80177dc:	4b42      	ldr	r3, [pc, #264]	@ (80178e8 <mg_http_status_code_str+0x9cc>)
 80177de:	e012      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80177e0:	4b42      	ldr	r3, [pc, #264]	@ (80178ec <mg_http_status_code_str+0x9d0>)
 80177e2:	e010      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80177e4:	4b42      	ldr	r3, [pc, #264]	@ (80178f0 <mg_http_status_code_str+0x9d4>)
 80177e6:	e00e      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80177e8:	4b42      	ldr	r3, [pc, #264]	@ (80178f4 <mg_http_status_code_str+0x9d8>)
 80177ea:	e00c      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80177ec:	4b42      	ldr	r3, [pc, #264]	@ (80178f8 <mg_http_status_code_str+0x9dc>)
 80177ee:	e00a      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80177f0:	4b42      	ldr	r3, [pc, #264]	@ (80178fc <mg_http_status_code_str+0x9e0>)
 80177f2:	e008      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80177f4:	4b42      	ldr	r3, [pc, #264]	@ (8017900 <mg_http_status_code_str+0x9e4>)
 80177f6:	e006      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80177f8:	4b42      	ldr	r3, [pc, #264]	@ (8017904 <mg_http_status_code_str+0x9e8>)
 80177fa:	e004      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80177fc:	4b42      	ldr	r3, [pc, #264]	@ (8017908 <mg_http_status_code_str+0x9ec>)
 80177fe:	e002      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8017800:	4b42      	ldr	r3, [pc, #264]	@ (801790c <mg_http_status_code_str+0x9f0>)
 8017802:	e000      	b.n	8017806 <mg_http_status_code_str+0x8ea>
    default: return "";
 8017804:	4b42      	ldr	r3, [pc, #264]	@ (8017910 <mg_http_status_code_str+0x9f4>)
  }
}
 8017806:	4618      	mov	r0, r3
 8017808:	370c      	adds	r7, #12
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr
 8017812:	bf00      	nop
 8017814:	08026a78 	.word	0x08026a78
 8017818:	08026a84 	.word	0x08026a84
 801781c:	08026a98 	.word	0x08026a98
 8017820:	08026aa4 	.word	0x08026aa4
 8017824:	08026aa8 	.word	0x08026aa8
 8017828:	08026ab0 	.word	0x08026ab0
 801782c:	08026abc 	.word	0x08026abc
 8017830:	08026adc 	.word	0x08026adc
 8017834:	08026ae8 	.word	0x08026ae8
 8017838:	08026af8 	.word	0x08026af8
 801783c:	08026b08 	.word	0x08026b08
 8017840:	08026b18 	.word	0x08026b18
 8017844:	08026b2c 	.word	0x08026b2c
 8017848:	08026b34 	.word	0x08026b34
 801784c:	08026b48 	.word	0x08026b48
 8017850:	08026b5c 	.word	0x08026b5c
 8017854:	08026b64 	.word	0x08026b64
 8017858:	08026b70 	.word	0x08026b70
 801785c:	08026b80 	.word	0x08026b80
 8017860:	08026b8c 	.word	0x08026b8c
 8017864:	08026ba0 	.word	0x08026ba0
 8017868:	08026bb4 	.word	0x08026bb4
 801786c:	08026bc0 	.word	0x08026bc0
 8017870:	08026bd0 	.word	0x08026bd0
 8017874:	08026be4 	.word	0x08026be4
 8017878:	08026bf0 	.word	0x08026bf0
 801787c:	08026bfc 	.word	0x08026bfc
 8017880:	08026c10 	.word	0x08026c10
 8017884:	08026c20 	.word	0x08026c20
 8017888:	08026c40 	.word	0x08026c40
 801788c:	08026c50 	.word	0x08026c50
 8017890:	08026c5c 	.word	0x08026c5c
 8017894:	08026c64 	.word	0x08026c64
 8017898:	08026c74 	.word	0x08026c74
 801789c:	08026c88 	.word	0x08026c88
 80178a0:	08026c9c 	.word	0x08026c9c
 80178a4:	08026cb4 	.word	0x08026cb4
 80178a8:	08026ccc 	.word	0x08026ccc
 80178ac:	08026cec 	.word	0x08026cec
 80178b0:	08026d00 	.word	0x08026d00
 80178b4:	08026d10 	.word	0x08026d10
 80178b8:	08026d24 	.word	0x08026d24
 80178bc:	08026d3c 	.word	0x08026d3c
 80178c0:	08026d44 	.word	0x08026d44
 80178c4:	08026d58 	.word	0x08026d58
 80178c8:	08026d6c 	.word	0x08026d6c
 80178cc:	08026d84 	.word	0x08026d84
 80178d0:	08026d98 	.word	0x08026d98
 80178d4:	08026db8 	.word	0x08026db8
 80178d8:	08026ddc 	.word	0x08026ddc
 80178dc:	08026dfc 	.word	0x08026dfc
 80178e0:	08026e14 	.word	0x08026e14
 80178e4:	08026e2c 	.word	0x08026e2c
 80178e8:	08026e3c 	.word	0x08026e3c
 80178ec:	08026e48 	.word	0x08026e48
 80178f0:	08026e5c 	.word	0x08026e5c
 80178f4:	08026e6c 	.word	0x08026e6c
 80178f8:	08026e88 	.word	0x08026e88
 80178fc:	08026ea0 	.word	0x08026ea0
 8017900:	08026eb8 	.word	0x08026eb8
 8017904:	08026ec8 	.word	0x08026ec8
 8017908:	08026ed8 	.word	0x08026ed8
 801790c:	08026ef8 	.word	0x08026ef8
 8017910:	08026f18 	.word	0x08026f18

08017914 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8017914:	b408      	push	{r3}
 8017916:	b580      	push	{r7, lr}
 8017918:	b08b      	sub	sp, #44	@ 0x2c
 801791a:	af02      	add	r7, sp, #8
 801791c:	60f8      	str	r0, [r7, #12]
 801791e:	60b9      	str	r1, [r7, #8]
 8017920:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8017922:	68b8      	ldr	r0, [r7, #8]
 8017924:	f7ff fafa 	bl	8016f1c <mg_http_status_code_str>
 8017928:	4602      	mov	r2, r0
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d001      	beq.n	8017934 <mg_http_reply+0x20>
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	e000      	b.n	8017936 <mg_http_reply+0x22>
 8017934:	4b1f      	ldr	r3, [pc, #124]	@ (80179b4 <mg_http_reply+0xa0>)
 8017936:	9300      	str	r3, [sp, #0]
 8017938:	4613      	mov	r3, r2
 801793a:	68ba      	ldr	r2, [r7, #8]
 801793c:	491e      	ldr	r1, [pc, #120]	@ (80179b8 <mg_http_reply+0xa4>)
 801793e:	68f8      	ldr	r0, [r7, #12]
 8017940:	f005 f8d8 	bl	801caf4 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017948:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 801794a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801794e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8017956:	f107 0314 	add.w	r3, r7, #20
 801795a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801795c:	4817      	ldr	r0, [pc, #92]	@ (80179bc <mg_http_reply+0xa8>)
 801795e:	f7fe f8cd 	bl	8015afc <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017966:	2b10      	cmp	r3, #16
 8017968:	d916      	bls.n	8017998 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	3b0f      	subs	r3, #15
 8017972:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 801797c:	4a10      	ldr	r2, [pc, #64]	@ (80179c0 <mg_http_reply+0xac>)
 801797e:	210b      	movs	r1, #11
 8017980:	f008 ff8c 	bl	802089c <mg_snprintf>
 8017984:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801798a:	69f9      	ldr	r1, [r7, #28]
 801798c:	69bb      	ldr	r3, [r7, #24]
 801798e:	440b      	add	r3, r1
 8017990:	3b0f      	subs	r3, #15
 8017992:	4413      	add	r3, r2
 8017994:	2220      	movs	r2, #32
 8017996:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8017998:	68fa      	ldr	r2, [r7, #12]
 801799a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801799e:	f36f 13c7 	bfc	r3, #7, #1
 80179a2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80179a6:	bf00      	nop
 80179a8:	3724      	adds	r7, #36	@ 0x24
 80179aa:	46bd      	mov	sp, r7
 80179ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80179b0:	b001      	add	sp, #4
 80179b2:	4770      	bx	lr
 80179b4:	08026f18 	.word	0x08026f18
 80179b8:	08026f1c 	.word	0x08026f1c
 80179bc:	0802082d 	.word	0x0802082d
 80179c0:	08026f50 	.word	0x08026f50

080179c4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7fe fc5d 	bl	8016292 <mg_fs_close>
  c->pfn_data = NULL;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	4a07      	ldr	r2, [pc, #28]	@ (8017a00 <restore_http_cb+0x3c>)
 80179e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80179ee:	f36f 13c7 	bfc	r3, #7, #1
 80179f2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80179f6:	bf00      	nop
 80179f8:	3708      	adds	r7, #8
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	bf00      	nop
 8017a00:	08019181 	.word	0x08019181

08017a04 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8017a04:	b5b0      	push	{r4, r5, r7, lr}
 8017a06:	b088      	sub	sp, #32
 8017a08:	af04      	add	r7, sp, #16
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	2200      	movs	r2, #0
 8017a14:	461c      	mov	r4, r3
 8017a16:	4615      	mov	r5, r2
 8017a18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017a1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017a20:	e9cd 2300 	strd	r2, r3, [sp]
 8017a24:	4a04      	ldr	r2, [pc, #16]	@ (8017a38 <mg_http_etag+0x34>)
 8017a26:	68b9      	ldr	r1, [r7, #8]
 8017a28:	68f8      	ldr	r0, [r7, #12]
 8017a2a:	f008 ff37 	bl	802089c <mg_snprintf>
  return buf;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3710      	adds	r7, #16
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bdb0      	pop	{r4, r5, r7, pc}
 8017a38:	08026f58 	.word	0x08026f58

08017a3c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b08a      	sub	sp, #40	@ 0x28
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	60f8      	str	r0, [r7, #12]
 8017a44:	60b9      	str	r1, [r7, #8]
 8017a46:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	2b08      	cmp	r3, #8
 8017a4c:	d002      	beq.n	8017a54 <static_cb+0x18>
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	2b02      	cmp	r3, #2
 8017a52:	d148      	bne.n	8017ae6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017a5a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8017a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017a60:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	33a4      	adds	r3, #164	@ 0xa4
 8017a66:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a6c:	69fa      	ldr	r2, [r7, #28]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d905      	bls.n	8017a7e <static_cb+0x42>
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	3348      	adds	r3, #72	@ 0x48
 8017a76:	69f9      	ldr	r1, [r7, #28]
 8017a78:	4618      	mov	r0, r3
 8017a7a:	f001 ff03 	bl	8019884 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d234      	bcs.n	8017af4 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a92:	1ad3      	subs	r3, r2, r3
 8017a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a96:	69bb      	ldr	r3, [r7, #24]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d902      	bls.n	8017aa6 <static_cb+0x6a>
 8017aa0:	69bb      	ldr	r3, [r7, #24]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8017aa6:	6a3b      	ldr	r3, [r7, #32]
 8017aa8:	685b      	ldr	r3, [r3, #4]
 8017aaa:	691b      	ldr	r3, [r3, #16]
 8017aac:	6a3a      	ldr	r2, [r7, #32]
 8017aae:	6810      	ldr	r0, [r2, #0]
 8017ab0:	68fa      	ldr	r2, [r7, #12]
 8017ab2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8017ab4:	68fa      	ldr	r2, [r7, #12]
 8017ab6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017ab8:	4411      	add	r1, r2
 8017aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017abc:	4798      	blx	r3
 8017abe:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	441a      	add	r2, r3
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8017acc:	69bb      	ldr	r3, [r7, #24]
 8017ace:	681a      	ldr	r2, [r3, #0]
 8017ad0:	697b      	ldr	r3, [r7, #20]
 8017ad2:	1ad2      	subs	r2, r2, r3
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d10c      	bne.n	8017af8 <static_cb+0xbc>
 8017ade:	68f8      	ldr	r0, [r7, #12]
 8017ae0:	f7ff ff70 	bl	80179c4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8017ae4:	e008      	b.n	8017af8 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	2b09      	cmp	r3, #9
 8017aea:	d106      	bne.n	8017afa <static_cb+0xbe>
    restore_http_cb(c);
 8017aec:	68f8      	ldr	r0, [r7, #12]
 8017aee:	f7ff ff69 	bl	80179c4 <restore_http_cb>
 8017af2:	e002      	b.n	8017afa <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8017af4:	bf00      	nop
 8017af6:	e000      	b.n	8017afa <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8017af8:	bf00      	nop
  }
  (void) ev_data;
}
 8017afa:	3728      	adds	r7, #40	@ 0x28
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}

08017b00 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8017b00:	b590      	push	{r4, r7, lr}
 8017b02:	b091      	sub	sp, #68	@ 0x44
 8017b04:	af02      	add	r7, sp, #8
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	1d38      	adds	r0, r7, #4
 8017b0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8017b0e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 8017b10:	f107 0314 	add.w	r3, r7, #20
 8017b14:	6839      	ldr	r1, [r7, #0]
 8017b16:	4618      	mov	r0, r3
 8017b18:	f009 f920 	bl	8020d5c <mg_str_s>
  size_t i = 0;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8017b20:	e002      	b.n	8017b28 <guess_content_type+0x28>
 8017b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b24:	3301      	adds	r3, #1
 8017b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d208      	bcs.n	8017b42 <guess_content_type+0x42>
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	68b9      	ldr	r1, [r7, #8]
 8017b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b36:	1acb      	subs	r3, r1, r3
 8017b38:	3b01      	subs	r3, #1
 8017b3a:	4413      	add	r3, r2
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b40:	d1ef      	bne.n	8017b22 <guess_content_type+0x22>
  path.buf += path.len - i;
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	68b9      	ldr	r1, [r7, #8]
 8017b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b48:	1acb      	subs	r3, r1, r3
 8017b4a:	4413      	add	r3, r2
 8017b4c:	607b      	str	r3, [r7, #4]
  path.len = i;
 8017b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b50:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8017b52:	e020      	b.n	8017b96 <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8017b54:	f107 031c 	add.w	r3, r7, #28
 8017b58:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017b5c:	213d      	movs	r1, #61	@ 0x3d
 8017b5e:	9100      	str	r1, [sp, #0]
 8017b60:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8017b64:	c903      	ldmia	r1, {r0, r1}
 8017b66:	f009 fac0 	bl	80210ea <mg_span>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d012      	beq.n	8017b96 <guess_content_type+0x96>
 8017b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017b74:	cb0c      	ldmia	r3, {r2, r3}
 8017b76:	1d39      	adds	r1, r7, #4
 8017b78:	c903      	ldmia	r1, {r0, r1}
 8017b7a:	f009 f939 	bl	8020df0 <mg_strcmp>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d108      	bne.n	8017b96 <guess_content_type+0x96>
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	461a      	mov	r2, r3
 8017b88:	f107 031c 	add.w	r3, r7, #28
 8017b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b90:	e882 0003 	stmia.w	r2, {r0, r1}
 8017b94:	e036      	b.n	8017c04 <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 8017b96:	f107 0314 	add.w	r3, r7, #20
 8017b9a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017b9e:	212c      	movs	r1, #44	@ 0x2c
 8017ba0:	9100      	str	r1, [sp, #0]
 8017ba2:	f107 0114 	add.w	r1, r7, #20
 8017ba6:	c903      	ldmia	r1, {r0, r1}
 8017ba8:	f009 fa9f 	bl	80210ea <mg_span>
 8017bac:	4603      	mov	r3, r0
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d1d0      	bne.n	8017b54 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017bb6:	e01a      	b.n	8017bee <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8017bb8:	4a14      	ldr	r2, [pc, #80]	@ (8017c0c <guess_content_type+0x10c>)
 8017bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bbc:	00db      	lsls	r3, r3, #3
 8017bbe:	4413      	add	r3, r2
 8017bc0:	cb0c      	ldmia	r3, {r2, r3}
 8017bc2:	1d39      	adds	r1, r7, #4
 8017bc4:	c903      	ldmia	r1, {r0, r1}
 8017bc6:	f009 f913 	bl	8020df0 <mg_strcmp>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d10b      	bne.n	8017be8 <guess_content_type+0xe8>
 8017bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	68f9      	ldr	r1, [r7, #12]
 8017bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8017c0c <guess_content_type+0x10c>)
 8017bd8:	460c      	mov	r4, r1
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	4413      	add	r3, r2
 8017bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017be2:	e884 0003 	stmia.w	r4, {r0, r1}
 8017be6:	e00d      	b.n	8017c04 <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8017be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bea:	3302      	adds	r3, #2
 8017bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8017bee:	4a07      	ldr	r2, [pc, #28]	@ (8017c0c <guess_content_type+0x10c>)
 8017bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bf2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d1de      	bne.n	8017bb8 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	4904      	ldr	r1, [pc, #16]	@ (8017c10 <guess_content_type+0x110>)
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f009 f8ac 	bl	8020d5c <mg_str_s>
}
 8017c04:	68f8      	ldr	r0, [r7, #12]
 8017c06:	373c      	adds	r7, #60	@ 0x3c
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd90      	pop	{r4, r7, pc}
 8017c0c:	200000ac 	.word	0x200000ac
 8017c10:	08027040 	.word	0x08027040

08017c14 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b08c      	sub	sp, #48	@ 0x30
 8017c18:	af02      	add	r7, sp, #8
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8017c20:	2300      	movs	r3, #0
 8017c22:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8017c24:	2300      	movs	r3, #0
 8017c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c28:	e058      	b.n	8017cdc <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c30:	3306      	adds	r3, #6
 8017c32:	18d1      	adds	r1, r2, r3
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	685a      	ldr	r2, [r3, #4]
 8017c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	1f9a      	subs	r2, r3, #6
 8017c3e:	f107 0310 	add.w	r3, r7, #16
 8017c42:	4618      	mov	r0, r3
 8017c44:	f009 f8a7 	bl	8020d96 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	681a      	ldr	r2, [r3, #0]
 8017c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4e:	4413      	add	r3, r2
 8017c50:	2206      	movs	r2, #6
 8017c52:	4929      	ldr	r1, [pc, #164]	@ (8017cf8 <getrange+0xe4>)
 8017c54:	4618      	mov	r0, r3
 8017c56:	f00b f8d5 	bl	8022e04 <memcmp>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d003      	beq.n	8017c68 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8017c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c62:	3301      	adds	r3, #1
 8017c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c66:	e039      	b.n	8017cdc <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8017c68:	f107 0310 	add.w	r3, r7, #16
 8017c6c:	f107 0218 	add.w	r2, r7, #24
 8017c70:	212d      	movs	r1, #45	@ 0x2d
 8017c72:	9100      	str	r1, [sp, #0]
 8017c74:	f107 0110 	add.w	r1, r7, #16
 8017c78:	c903      	ldmia	r1, {r0, r1}
 8017c7a:	f009 fa36 	bl	80210ea <mg_span>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d01d      	beq.n	8017cc0 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 8017c84:	68ba      	ldr	r2, [r7, #8]
 8017c86:	f107 0318 	add.w	r3, r7, #24
 8017c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c8e:	f7fe fbcd 	bl	801642c <mg_to_size_t>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d002      	beq.n	8017c9e <getrange+0x8a>
 8017c98:	6a3b      	ldr	r3, [r7, #32]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d022      	beq.n	8017cea <getrange+0xd6>
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	f107 0310 	add.w	r3, r7, #16
 8017caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017cae:	f7fe fbbd 	bl	801642c <mg_to_size_t>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d018      	beq.n	8017cea <getrange+0xd6>
 8017cb8:	6a3b      	ldr	r3, [r7, #32]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8017cbe:	e014      	b.n	8017cea <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8017cc0:	68ba      	ldr	r2, [r7, #8]
 8017cc2:	f107 0310 	add.w	r3, r7, #16
 8017cc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017cca:	f7fe fbaf 	bl	801642c <mg_to_size_t>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d00a      	beq.n	8017cea <getrange+0xd6>
 8017cd4:	6a3b      	ldr	r3, [r7, #32]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	623b      	str	r3, [r7, #32]
 8017cda:	e007      	b.n	8017cec <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8017cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cde:	1d9a      	adds	r2, r3, #6
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	685b      	ldr	r3, [r3, #4]
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d3a0      	bcc.n	8017c2a <getrange+0x16>
 8017ce8:	e000      	b.n	8017cec <getrange+0xd8>
    break;
 8017cea:	bf00      	nop
  }
  return (int) numparsed;
 8017cec:	6a3b      	ldr	r3, [r7, #32]
}
 8017cee:	4618      	mov	r0, r3
 8017cf0:	3728      	adds	r7, #40	@ 0x28
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}
 8017cf6:	bf00      	nop
 8017cf8:	080271c4 	.word	0x080271c4

08017cfc <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8017cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d00:	b0f9      	sub	sp, #484	@ 0x1e4
 8017d02:	af0a      	add	r7, sp, #40	@ 0x28
 8017d04:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8017d08:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8017d0c:	6020      	str	r0, [r4, #0]
 8017d0e:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8017d12:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 8017d16:	6001      	str	r1, [r0, #0]
 8017d18:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8017d1c:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8017d20:	600a      	str	r2, [r1, #0]
 8017d22:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8017d26:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8017d2a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8017d2c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017d30:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	695b      	ldr	r3, [r3, #20]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d006      	beq.n	8017d4a <mg_http_serve_file+0x4e>
 8017d3c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017d40:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	695b      	ldr	r3, [r3, #20]
 8017d48:	e000      	b.n	8017d4c <mg_http_serve_file+0x50>
 8017d4a:	4ba7      	ldr	r3, [pc, #668]	@ (8017fe8 <mg_http_serve_file+0x2ec>)
 8017d4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 8017d50:	2300      	movs	r3, #0
 8017d52:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 8017d56:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017d5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8017d5e:	2200      	movs	r2, #0
 8017d60:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 8017d62:	f04f 0200 	mov.w	r2, #0
 8017d66:	f04f 0300 	mov.w	r3, #0
 8017d6a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8017d6e:	2300      	movs	r3, #0
 8017d70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8017d74:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8017d78:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017d7c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017d80:	6819      	ldr	r1, [r3, #0]
 8017d82:	4610      	mov	r0, r2
 8017d84:	f008 ffea 	bl	8020d5c <mg_str_s>
 8017d88:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017d8c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	68db      	ldr	r3, [r3, #12]
 8017d94:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8017d98:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8017d9c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8017da0:	ca06      	ldmia	r2, {r1, r2}
 8017da2:	f7ff fead 	bl	8017b00 <guess_content_type>
  bool gzip = false;
 8017da6:	2300      	movs	r3, #0
 8017da8:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8017dac:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017db0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d05c      	beq.n	8017e74 <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8017dba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017dbe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8017dc2:	498a      	ldr	r1, [pc, #552]	@ (8017fec <mg_http_serve_file+0x2f0>)
 8017dc4:	6818      	ldr	r0, [r3, #0]
 8017dc6:	f7fe fd7f 	bl	80168c8 <mg_http_get_header>
 8017dca:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 8017dce:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d03e      	beq.n	8017e54 <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8017dd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8017dda:	6859      	ldr	r1, [r3, #4]
 8017ddc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	461a      	mov	r2, r3
 8017de4:	4882      	ldr	r0, [pc, #520]	@ (8017ff0 <mg_http_serve_file+0x2f4>)
 8017de6:	f008 fd8f 	bl	8020908 <mg_mprintf>
 8017dea:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8017dee:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d02a      	beq.n	8017e4c <mg_http_serve_file+0x150>
 8017df6:	497f      	ldr	r1, [pc, #508]	@ (8017ff4 <mg_http_serve_file+0x2f8>)
 8017df8:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8017dfc:	f00a ffec 	bl	8022dd8 <strstr>
 8017e00:	4603      	mov	r3, r0
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d022      	beq.n	8017e4c <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8017e06:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017e0a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017e0e:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	4a78      	ldr	r2, [pc, #480]	@ (8017ff8 <mg_http_serve_file+0x2fc>)
 8017e16:	2180      	movs	r1, #128	@ 0x80
 8017e18:	f008 fd40 	bl	802089c <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8017e1c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8017e20:	2201      	movs	r2, #1
 8017e22:	4619      	mov	r1, r3
 8017e24:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8017e28:	f7fe fa0c 	bl	8016244 <mg_fs_open>
 8017e2c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 8017e30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d009      	beq.n	8017e4c <mg_http_serve_file+0x150>
 8017e38:	2301      	movs	r3, #1
 8017e3a:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 8017e3e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017e42:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017e46:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8017e4a:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8017e4c:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8017e50:	f7f3 ffd2 	bl	800bdf8 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8017e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d10b      	bne.n	8017e74 <mg_http_serve_file+0x178>
 8017e5c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017e60:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017e64:	2201      	movs	r2, #1
 8017e66:	6819      	ldr	r1, [r3, #0]
 8017e68:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8017e6c:	f7fe f9ea 	bl	8016244 <mg_fs_open>
 8017e70:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8017e74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d144      	bne.n	8017f06 <mg_http_serve_file+0x20a>
 8017e7c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017e80:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	691b      	ldr	r3, [r3, #16]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d03c      	beq.n	8017f06 <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8017e8c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017e90:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	691b      	ldr	r3, [r3, #16]
 8017e98:	2201      	movs	r2, #1
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8017ea0:	f7fe f9d0 	bl	8016244 <mg_fs_open>
 8017ea4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8017ea8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017eac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017eb0:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8017eb4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8017eb8:	6812      	ldr	r2, [r2, #0]
 8017eba:	6912      	ldr	r2, [r2, #16]
 8017ebc:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8017ebe:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 8017ec2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017ec6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017eca:	6819      	ldr	r1, [r3, #0]
 8017ecc:	4610      	mov	r0, r2
 8017ece:	f008 ff45 	bl	8020d5c <mg_str_s>
 8017ed2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017ed6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	68db      	ldr	r3, [r3, #12]
 8017ede:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8017ee2:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 8017ee6:	f107 0010 	add.w	r0, r7, #16
 8017eea:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 8017eee:	ca06      	ldmia	r2, {r1, r2}
 8017ef0:	f7ff fe06 	bl	8017b00 <guess_content_type>
 8017ef4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017ef8:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8017efc:	4623      	mov	r3, r4
 8017efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f02:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8017f06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d00f      	beq.n	8017f2e <mg_http_serve_file+0x232>
 8017f0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8017f12:	681c      	ldr	r4, [r3, #0]
 8017f14:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8017f18:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8017f1c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017f20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8017f24:	6818      	ldr	r0, [r3, #0]
 8017f26:	47a0      	blx	r4
 8017f28:	4603      	mov	r3, r0
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d114      	bne.n	8017f58 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8017f2e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017f32:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	689a      	ldr	r2, [r3, #8]
 8017f3a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017f3e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8017f42:	4b2e      	ldr	r3, [pc, #184]	@ (8017ffc <mg_http_serve_file+0x300>)
 8017f44:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8017f48:	6800      	ldr	r0, [r0, #0]
 8017f4a:	f7ff fce3 	bl	8017914 <mg_http_reply>
    mg_fs_close(fd);
 8017f4e:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8017f52:	f7fe f99e 	bl	8016292 <mg_fs_close>
 8017f56:	e19d      	b.n	8018294 <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8017f58:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017f5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8017f60:	6819      	ldr	r1, [r3, #0]
 8017f62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8017f66:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8017f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8017f6e:	460a      	mov	r2, r1
 8017f70:	2140      	movs	r1, #64	@ 0x40
 8017f72:	f7ff fd47 	bl	8017a04 <mg_http_etag>
 8017f76:	4603      	mov	r3, r0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d045      	beq.n	8018008 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8017f7c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017f80:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8017f84:	491e      	ldr	r1, [pc, #120]	@ (8018000 <mg_http_serve_file+0x304>)
 8017f86:	6818      	ldr	r0, [r3, #0]
 8017f88:	f7fe fc9e 	bl	80168c8 <mg_http_get_header>
 8017f8c:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8017f90:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d037      	beq.n	8018008 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8017f98:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8017f9c:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8017fa0:	4611      	mov	r1, r2
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f008 feda 	bl	8020d5c <mg_str_s>
 8017fa8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8017fac:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8017fb0:	cb0c      	ldmia	r3, {r2, r3}
 8017fb2:	c903      	ldmia	r1, {r0, r1}
 8017fb4:	f008 ff5e 	bl	8020e74 <mg_strcasecmp>
 8017fb8:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d124      	bne.n	8018008 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8017fbe:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8017fc2:	f7fe f966 	bl	8016292 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8017fc6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017fca:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	689a      	ldr	r2, [r3, #8]
 8017fd2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8017fd6:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8017fda:	4b0a      	ldr	r3, [pc, #40]	@ (8018004 <mg_http_serve_file+0x308>)
 8017fdc:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8017fe0:	6800      	ldr	r0, [r0, #0]
 8017fe2:	f7ff fc97 	bl	8017914 <mg_http_reply>
 8017fe6:	e155      	b.n	8018294 <mg_http_serve_file+0x598>
 8017fe8:	20000084 	.word	0x20000084
 8017fec:	080271cc 	.word	0x080271cc
 8017ff0:	080269b8 	.word	0x080269b8
 8017ff4:	080271dc 	.word	0x080271dc
 8017ff8:	080271e4 	.word	0x080271e4
 8017ffc:	080271ec 	.word	0x080271ec
 8018000:	080271f8 	.word	0x080271f8
 8018004:	08026f18 	.word	0x08026f18
  } else {
    int n, status = 200;
 8018008:	23c8      	movs	r3, #200	@ 0xc8
 801800a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 801800e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018012:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018016:	2200      	movs	r2, #0
 8018018:	601a      	str	r2, [r3, #0]
 801801a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801801e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018022:	2200      	movs	r2, #0
 8018024:	601a      	str	r2, [r3, #0]
 8018026:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801802a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8018034:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018038:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801803c:	4998      	ldr	r1, [pc, #608]	@ (80182a0 <mg_http_serve_file+0x5a4>)
 801803e:	6818      	ldr	r0, [r3, #0]
 8018040:	f7fe fc42 	bl	80168c8 <mg_http_get_header>
 8018044:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8018048:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801804c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018050:	2200      	movs	r2, #0
 8018052:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8018054:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8018058:	2b00      	cmp	r3, #0
 801805a:	f000 8095 	beq.w	8018188 <mg_http_serve_file+0x48c>
 801805e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8018062:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8018066:	4619      	mov	r1, r3
 8018068:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 801806c:	f7ff fdd2 	bl	8017c14 <getrange>
 8018070:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8018074:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8018078:	2b00      	cmp	r3, #0
 801807a:	f340 8085 	ble.w	8018188 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 801807e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8018082:	2b01      	cmp	r3, #1
 8018084:	d107      	bne.n	8018096 <mg_http_serve_file+0x39a>
 8018086:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801808a:	1e5a      	subs	r2, r3, #1
 801808c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018090:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018094:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8018096:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801809a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801809e:	681a      	ldr	r2, [r3, #0]
 80180a0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80180a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d808      	bhi.n	80180c0 <mg_http_serve_file+0x3c4>
 80180ae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80180b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80180bc:	429a      	cmp	r2, r3
 80180be:	d81a      	bhi.n	80180f6 <mg_http_serve_file+0x3fa>
        status = 416;
 80180c0:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80180c4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 80180c8:	2300      	movs	r3, #0
 80180ca:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80180ce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80180d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2200      	movs	r2, #0
 80180da:	60bb      	str	r3, [r7, #8]
 80180dc:	60fa      	str	r2, [r7, #12]
 80180de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80180e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80180e6:	e9cd 1200 	strd	r1, r2, [sp]
 80180ea:	4a6e      	ldr	r2, [pc, #440]	@ (80182a4 <mg_http_serve_file+0x5a8>)
 80180ec:	2164      	movs	r1, #100	@ 0x64
 80180ee:	4618      	mov	r0, r3
 80180f0:	f008 fbd4 	bl	802089c <mg_snprintf>
 80180f4:	e048      	b.n	8018188 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 80180f6:	23ce      	movs	r3, #206	@ 0xce
 80180f8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 80180fc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018100:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018104:	681a      	ldr	r2, [r3, #0]
 8018106:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801810a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	1ad3      	subs	r3, r2, r3
 8018112:	3301      	adds	r3, #1
 8018114:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 8018118:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801811c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	2200      	movs	r2, #0
 8018124:	469a      	mov	sl, r3
 8018126:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8018128:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801812c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018130:	681a      	ldr	r2, [r3, #0]
 8018132:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018136:	4413      	add	r3, r2
 8018138:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 801813a:	2200      	movs	r2, #0
 801813c:	461d      	mov	r5, r3
 801813e:	4616      	mov	r6, r2
 8018140:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018144:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2200      	movs	r2, #0
 801814c:	603b      	str	r3, [r7, #0]
 801814e:	607a      	str	r2, [r7, #4]
 8018150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018154:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018158:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801815c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8018160:	e9cd ab00 	strd	sl, fp, [sp]
 8018164:	4a50      	ldr	r2, [pc, #320]	@ (80182a8 <mg_http_serve_file+0x5ac>)
 8018166:	2164      	movs	r1, #100	@ 0x64
 8018168:	4618      	mov	r0, r3
 801816a:	f008 fb97 	bl	802089c <mg_snprintf>
        fs->sk(fd->fd, r1);
 801816e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8018172:	699b      	ldr	r3, [r3, #24]
 8018174:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018178:	6810      	ldr	r0, [r2, #0]
 801817a:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801817e:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8018182:	6812      	ldr	r2, [r2, #0]
 8018184:	4611      	mov	r1, r2
 8018186:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8018188:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 801818c:	f7fe fec6 	bl	8016f1c <mg_http_status_code_str>
 8018190:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8018192:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018196:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801819a:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 801819c:	461d      	mov	r5, r3
 801819e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80181a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80181a6:	681a      	ldr	r2, [r3, #0]
 80181a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80181ac:	2100      	movs	r1, #0
 80181ae:	4698      	mov	r8, r3
 80181b0:	4689      	mov	r9, r1
 80181b2:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d001      	beq.n	80181be <mg_http_serve_file+0x4c2>
 80181ba:	493c      	ldr	r1, [pc, #240]	@ (80182ac <mg_http_serve_file+0x5b0>)
 80181bc:	e000      	b.n	80181c0 <mg_http_serve_file+0x4c4>
 80181be:	493c      	ldr	r1, [pc, #240]	@ (80182b0 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 80181c0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80181c4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d006      	beq.n	80181de <mg_http_serve_file+0x4e2>
 80181d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80181d4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	689b      	ldr	r3, [r3, #8]
 80181dc:	e000      	b.n	80181e0 <mg_http_serve_file+0x4e4>
 80181de:	4b34      	ldr	r3, [pc, #208]	@ (80182b0 <mg_http_serve_file+0x5b4>)
 80181e0:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80181e4:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 80181e8:	9308      	str	r3, [sp, #32]
 80181ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80181ee:	9307      	str	r3, [sp, #28]
 80181f0:	9106      	str	r1, [sp, #24]
 80181f2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80181f6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80181fa:	9302      	str	r3, [sp, #8]
 80181fc:	9201      	str	r2, [sp, #4]
 80181fe:	9500      	str	r5, [sp, #0]
 8018200:	4623      	mov	r3, r4
 8018202:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8018206:	492b      	ldr	r1, [pc, #172]	@ (80182b4 <mg_http_serve_file+0x5b8>)
 8018208:	6800      	ldr	r0, [r0, #0]
 801820a:	f004 fc73 	bl	801caf4 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 801820e:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8018212:	4929      	ldr	r1, [pc, #164]	@ (80182b8 <mg_http_serve_file+0x5bc>)
 8018214:	4618      	mov	r0, r3
 8018216:	f008 fda1 	bl	8020d5c <mg_str_s>
 801821a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801821e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8018222:	6819      	ldr	r1, [r3, #0]
 8018224:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8018228:	cb0c      	ldmia	r3, {r2, r3}
 801822a:	c903      	ldmia	r1, {r0, r1}
 801822c:	f008 fe22 	bl	8020e74 <mg_strcasecmp>
 8018230:	4603      	mov	r3, r0
 8018232:	2b00      	cmp	r3, #0
 8018234:	d10f      	bne.n	8018256 <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 8018236:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801823a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018244:	f36f 13c7 	bfc	r3, #7, #1
 8018248:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 801824c:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8018250:	f7fe f81f 	bl	8016292 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8018254:	e01e      	b.n	8018294 <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8018256:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801825a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	33a4      	adds	r3, #164	@ 0xa4
 8018262:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 8018266:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801826a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4a12      	ldr	r2, [pc, #72]	@ (80182bc <mg_http_serve_file+0x5c0>)
 8018272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8018276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801827a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8018288:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801828c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018290:	601a      	str	r2, [r3, #0]
}
 8018292:	e7ff      	b.n	8018294 <mg_http_serve_file+0x598>
 8018294:	bf00      	nop
 8018296:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 801829a:	46bd      	mov	sp, r7
 801829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a0:	08027208 	.word	0x08027208
 80182a4:	08027210 	.word	0x08027210
 80182a8:	08027230 	.word	0x08027230
 80182ac:	08027258 	.word	0x08027258
 80182b0:	08026f18 	.word	0x08026f18
 80182b4:	08027274 	.word	0x08027274
 80182b8:	080272c4 	.word	0x080272c4
 80182bc:	08017a3d 	.word	0x08017a3d

080182c0 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 80182c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80182c4:	b0c8      	sub	sp, #288	@ 0x120
 80182c6:	af0a      	add	r7, sp, #40	@ 0x28
 80182c8:	6078      	str	r0, [r7, #4]
 80182ca:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80182d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80182d6:	689b      	ldr	r3, [r3, #8]
 80182d8:	695b      	ldr	r3, [r3, #20]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d004      	beq.n	80182e8 <printdirentry+0x28>
 80182de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80182e2:	689b      	ldr	r3, [r3, #8]
 80182e4:	695b      	ldr	r3, [r3, #20]
 80182e6:	e000      	b.n	80182ea <printdirentry+0x2a>
 80182e8:	4b66      	ldr	r3, [pc, #408]	@ (8018484 <printdirentry+0x1c4>)
 80182ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 80182f4:	f04f 0200 	mov.w	r2, #0
 80182f8:	f04f 0300 	mov.w	r3, #0
 80182fc:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8018300:	2300      	movs	r3, #0
 8018302:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8018306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801830a:	68da      	ldr	r2, [r3, #12]
 801830c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	9301      	str	r3, [sp, #4]
 8018314:	232f      	movs	r3, #47	@ 0x2f
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	4613      	mov	r3, r2
 801831a:	4a5b      	ldr	r2, [pc, #364]	@ (8018488 <printdirentry+0x1c8>)
 801831c:	2180      	movs	r1, #128	@ 0x80
 801831e:	f008 fabd 	bl	802089c <mg_snprintf>
 8018322:	4603      	mov	r3, r0
 8018324:	2b80      	cmp	r3, #128	@ 0x80
 8018326:	d910      	bls.n	801834a <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8018328:	4b58      	ldr	r3, [pc, #352]	@ (801848c <printdirentry+0x1cc>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	2b00      	cmp	r3, #0
 801832e:	f340 80a3 	ble.w	8018478 <printdirentry+0x1b8>
 8018332:	4b57      	ldr	r3, [pc, #348]	@ (8018490 <printdirentry+0x1d0>)
 8018334:	f640 3248 	movw	r2, #2888	@ 0xb48
 8018338:	4956      	ldr	r1, [pc, #344]	@ (8018494 <printdirentry+0x1d4>)
 801833a:	2001      	movs	r0, #1
 801833c:	f002 fa92 	bl	801a864 <mg_log_prefix>
 8018340:	6879      	ldr	r1, [r7, #4]
 8018342:	4855      	ldr	r0, [pc, #340]	@ (8018498 <printdirentry+0x1d8>)
 8018344:	f002 fade 	bl	801a904 <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8018348:	e096      	b.n	8018478 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 801834a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8018354:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8018358:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801835c:	4798      	blx	r3
 801835e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8018362:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018366:	2b00      	cmp	r3, #0
 8018368:	d11a      	bne.n	80183a0 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 801836a:	4b48      	ldr	r3, [pc, #288]	@ (801848c <printdirentry+0x1cc>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	f340 8082 	ble.w	8018478 <printdirentry+0x1b8>
 8018374:	4b46      	ldr	r3, [pc, #280]	@ (8018490 <printdirentry+0x1d0>)
 8018376:	f640 324a 	movw	r2, #2890	@ 0xb4a
 801837a:	4946      	ldr	r1, [pc, #280]	@ (8018494 <printdirentry+0x1d4>)
 801837c:	2001      	movs	r0, #1
 801837e:	f002 fa71 	bl	801a864 <mg_log_prefix>
 8018382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801838a:	f00a fe19 	bl	8022fc0 <__errno>
 801838e:	4603      	mov	r3, r0
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018396:	4621      	mov	r1, r4
 8018398:	4840      	ldr	r0, [pc, #256]	@ (801849c <printdirentry+0x1dc>)
 801839a:	f002 fab3 	bl	801a904 <mg_log>
}
 801839e:	e06b      	b.n	8018478 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 80183a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80183a4:	f003 0304 	and.w	r3, r3, #4
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d001      	beq.n	80183b0 <printdirentry+0xf0>
 80183ac:	4b3c      	ldr	r3, [pc, #240]	@ (80184a0 <printdirentry+0x1e0>)
 80183ae:	e000      	b.n	80183b2 <printdirentry+0xf2>
 80183b0:	4b3c      	ldr	r3, [pc, #240]	@ (80184a4 <printdirentry+0x1e4>)
 80183b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 80183b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80183ba:	f003 0304 	and.w	r3, r3, #4
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d007      	beq.n	80183d2 <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 80183c2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80183c6:	4b38      	ldr	r3, [pc, #224]	@ (80184a8 <printdirentry+0x1e8>)
 80183c8:	4a38      	ldr	r2, [pc, #224]	@ (80184ac <printdirentry+0x1ec>)
 80183ca:	2128      	movs	r1, #40	@ 0x28
 80183cc:	f008 fa66 	bl	802089c <mg_snprintf>
 80183d0:	e00d      	b.n	80183ee <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80183d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183d6:	2200      	movs	r2, #0
 80183d8:	4698      	mov	r8, r3
 80183da:	4691      	mov	r9, r2
 80183dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80183e0:	e9cd 8900 	strd	r8, r9, [sp]
 80183e4:	4a32      	ldr	r2, [pc, #200]	@ (80184b0 <printdirentry+0x1f0>)
 80183e6:	2128      	movs	r1, #40	@ 0x28
 80183e8:	4618      	mov	r0, r3
 80183ea:	f008 fa57 	bl	802089c <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80183ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80183f2:	4613      	mov	r3, r2
 80183f4:	f107 0008 	add.w	r0, r7, #8
 80183f8:	4a2e      	ldr	r2, [pc, #184]	@ (80184b4 <printdirentry+0x1f4>)
 80183fa:	2128      	movs	r1, #40	@ 0x28
 80183fc:	f008 fa4e 	bl	802089c <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f7e7 ff3d 	bl	8000280 <strlen>
 8018406:	4601      	mov	r1, r0
 8018408:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801840c:	2380      	movs	r3, #128	@ 0x80
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f000 fbdc 	bl	8018bcc <mg_url_encode>
 8018414:	4603      	mov	r3, r0
 8018416:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 801841a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801841e:	6818      	ldr	r0, [r3, #0]
 8018420:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8018424:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8018426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801842a:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 801842e:	2b00      	cmp	r3, #0
 8018430:	d105      	bne.n	801843e <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8018432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 8018436:	2200      	movs	r2, #0
 8018438:	461c      	mov	r4, r3
 801843a:	4615      	mov	r5, r2
 801843c:	e003      	b.n	8018446 <printdirentry+0x186>
 801843e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018442:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018446:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801844a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801844e:	9308      	str	r3, [sp, #32]
 8018450:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018454:	f107 0308 	add.w	r3, r7, #8
 8018458:	9304      	str	r3, [sp, #16]
 801845a:	9103      	str	r1, [sp, #12]
 801845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018460:	9302      	str	r3, [sp, #8]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	9301      	str	r3, [sp, #4]
 8018466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801846a:	9300      	str	r3, [sp, #0]
 801846c:	4613      	mov	r3, r2
 801846e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8018472:	4911      	ldr	r1, [pc, #68]	@ (80184b8 <printdirentry+0x1f8>)
 8018474:	f004 fb3e 	bl	801caf4 <mg_printf>
}
 8018478:	bf00      	nop
 801847a:	37f8      	adds	r7, #248	@ 0xf8
 801847c:	46bd      	mov	sp, r7
 801847e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018482:	bf00      	nop
 8018484:	20000084 	.word	0x20000084
 8018488:	080272cc 	.word	0x080272cc
 801848c:	20000294 	.word	0x20000294
 8018490:	08029648 	.word	0x08029648
 8018494:	08026838 	.word	0x08026838
 8018498:	080272d4 	.word	0x080272d4
 801849c:	080272e4 	.word	0x080272e4
 80184a0:	080272f8 	.word	0x080272f8
 80184a4:	08026f18 	.word	0x08026f18
 80184a8:	080272fc 	.word	0x080272fc
 80184ac:	080269a4 	.word	0x080269a4
 80184b0:	08027304 	.word	0x08027304
 80184b4:	0802730c 	.word	0x0802730c
 80184b8:	08027310 	.word	0x08027310

080184bc <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 80184bc:	b580      	push	{r7, lr}
 80184be:	b0b8      	sub	sp, #224	@ 0xe0
 80184c0:	af04      	add	r7, sp, #16
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	607a      	str	r2, [r7, #4]
 80184c8:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 80184ca:	4b51      	ldr	r3, [pc, #324]	@ (8018610 <listdir+0x154>)
 80184cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 80184d0:	4b50      	ldr	r3, [pc, #320]	@ (8018614 <listdir+0x158>)
 80184d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	695b      	ldr	r3, [r3, #20]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d002      	beq.n	80184e4 <listdir+0x28>
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	e000      	b.n	80184e6 <listdir+0x2a>
 80184e4:	4b4c      	ldr	r3, [pc, #304]	@ (8018618 <listdir+0x15c>)
 80184e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8018502:	68bb      	ldr	r3, [r7, #8]
 8018504:	6898      	ldr	r0, [r3, #8]
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	68d9      	ldr	r1, [r3, #12]
 801850a:	f107 021c 	add.w	r2, r7, #28
 801850e:	2300      	movs	r3, #0
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	2380      	movs	r3, #128	@ 0x80
 8018514:	f7fe f8e5 	bl	80166e2 <mg_url_decode>
 8018518:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 801851c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018520:	2b00      	cmp	r3, #0
 8018522:	dd09      	ble.n	8018538 <listdir+0x7c>
 8018524:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8018528:	f107 0314 	add.w	r3, r7, #20
 801852c:	f107 011c 	add.w	r1, r7, #28
 8018530:	4618      	mov	r0, r3
 8018532:	f008 fc30 	bl	8020d96 <mg_str_n>
 8018536:	e007      	b.n	8018548 <listdir+0x8c>
 8018538:	68ba      	ldr	r2, [r7, #8]
 801853a:	f107 0314 	add.w	r3, r7, #20
 801853e:	3208      	adds	r2, #8
 8018540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018544:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 801854c:	2b00      	cmp	r3, #0
 801854e:	d002      	beq.n	8018556 <listdir+0x9a>
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	689b      	ldr	r3, [r3, #8]
 8018554:	e000      	b.n	8018558 <listdir+0x9c>
 8018556:	4b31      	ldr	r3, [pc, #196]	@ (801861c <listdir+0x160>)
 8018558:	461a      	mov	r2, r3
 801855a:	4931      	ldr	r1, [pc, #196]	@ (8018620 <listdir+0x164>)
 801855c:	68f8      	ldr	r0, [r7, #12]
 801855e:	f004 fac9 	bl	801caf4 <mg_printf>
  off = c->send.len;  // Start of body
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 801856a:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 801856c:	4618      	mov	r0, r3
 801856e:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018570:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018572:	4619      	mov	r1, r3
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	9303      	str	r3, [sp, #12]
 8018578:	9102      	str	r1, [sp, #8]
 801857a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801857e:	9301      	str	r3, [sp, #4]
 8018580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018584:	9300      	str	r3, [sp, #0]
 8018586:	4613      	mov	r3, r2
 8018588:	4602      	mov	r2, r0
 801858a:	4926      	ldr	r1, [pc, #152]	@ (8018624 <listdir+0x168>)
 801858c:	68f8      	ldr	r0, [r7, #12]
 801858e:	f004 fab1 	bl	801caf4 <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 8018592:	4a25      	ldr	r2, [pc, #148]	@ (8018628 <listdir+0x16c>)
 8018594:	4925      	ldr	r1, [pc, #148]	@ (801862c <listdir+0x170>)
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f004 faac 	bl	801caf4 <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 801859c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80185a0:	685b      	ldr	r3, [r3, #4]
 80185a2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80185a6:	4922      	ldr	r1, [pc, #136]	@ (8018630 <listdir+0x174>)
 80185a8:	6838      	ldr	r0, [r7, #0]
 80185aa:	4798      	blx	r3
  mg_printf(c,
 80185ac:	4a21      	ldr	r2, [pc, #132]	@ (8018634 <listdir+0x178>)
 80185ae:	4922      	ldr	r1, [pc, #136]	@ (8018638 <listdir+0x17c>)
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f004 fa9f 	bl	801caf4 <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80185ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80185be:	1ad3      	subs	r3, r2, r3
 80185c0:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80185c4:	4a1d      	ldr	r2, [pc, #116]	@ (801863c <listdir+0x180>)
 80185c6:	210a      	movs	r1, #10
 80185c8:	f008 f968 	bl	802089c <mg_snprintf>
 80185cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 80185d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80185d4:	2b0a      	cmp	r3, #10
 80185d6:	d902      	bls.n	80185de <listdir+0x122>
 80185d8:	2300      	movs	r3, #0
 80185da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80185e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80185e6:	3b0c      	subs	r3, #12
 80185e8:	4413      	add	r3, r2
 80185ea:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80185ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80185f2:	4618      	mov	r0, r3
 80185f4:	f00a fd11 	bl	802301a <memcpy>
  c->is_resp = 0;                          // Mark response end
 80185f8:	68fa      	ldr	r2, [r7, #12]
 80185fa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80185fe:	f36f 13c7 	bfc	r3, #7, #1
 8018602:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8018606:	bf00      	nop
 8018608:	37d0      	adds	r7, #208	@ 0xd0
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}
 801860e:	bf00      	nop
 8018610:	08027368 	.word	0x08027368
 8018614:	08027530 	.word	0x08027530
 8018618:	20000084 	.word	0x20000084
 801861c:	08026f18 	.word	0x08026f18
 8018620:	080276f4 	.word	0x080276f4
 8018624:	0802774c 	.word	0x0802774c
 8018628:	080278d4 	.word	0x080278d4
 801862c:	080269a4 	.word	0x080269a4
 8018630:	080182c1 	.word	0x080182c1
 8018634:	08027924 	.word	0x08027924
 8018638:	0802792c 	.word	0x0802792c
 801863c:	0802730c 	.word	0x0802730c

08018640 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8018640:	b082      	sub	sp, #8
 8018642:	b590      	push	{r4, r7, lr}
 8018644:	b08f      	sub	sp, #60	@ 0x3c
 8018646:	af02      	add	r7, sp, #8
 8018648:	60f8      	str	r0, [r7, #12]
 801864a:	60b9      	str	r1, [r7, #8]
 801864c:	607a      	str	r2, [r7, #4]
 801864e:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8018650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018652:	461a      	mov	r2, r3
 8018654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	4613      	mov	r3, r2
 801865a:	4a9c      	ldr	r2, [pc, #624]	@ (80188cc <uri_to_path2+0x28c>)
 801865c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801865e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018660:	f008 f91c 	bl	802089c <mg_snprintf>
 8018664:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8018666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018668:	3302      	adds	r3, #2
 801866a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801866c:	429a      	cmp	r2, r3
 801866e:	d809      	bhi.n	8018684 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8018670:	4b97      	ldr	r3, [pc, #604]	@ (80188d0 <uri_to_path2+0x290>)
 8018672:	4a98      	ldr	r2, [pc, #608]	@ (80188d4 <uri_to_path2+0x294>)
 8018674:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018678:	68f8      	ldr	r0, [r7, #12]
 801867a:	f7ff f94b 	bl	8017914 <mg_http_reply>
    return -1;
 801867e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018682:	e143      	b.n	801890c <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8018684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018686:	3b01      	subs	r3, #1
 8018688:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801868a:	4413      	add	r3, r2
 801868c:	2200      	movs	r2, #0
 801868e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8018690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018692:	2b00      	cmp	r3, #0
 8018694:	d012      	beq.n	80186bc <uri_to_path2+0x7c>
 8018696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018698:	3b01      	subs	r3, #1
 801869a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801869c:	4413      	add	r3, r2
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80186a2:	d00b      	beq.n	80186bc <uri_to_path2+0x7c>
 80186a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80186aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80186ac:	4413      	add	r3, r2
 80186ae:	222f      	movs	r2, #47	@ 0x2f
 80186b0:	701a      	strb	r2, [r3, #0]
 80186b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80186b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b6:	4413      	add	r3, r2
 80186b8:	2200      	movs	r2, #0
 80186ba:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 80186bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	68db      	ldr	r3, [r3, #12]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d212      	bcs.n	80186ec <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	689a      	ldr	r2, [r3, #8]
 80186ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80186cc:	18d0      	adds	r0, r2, r3
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	68da      	ldr	r2, [r3, #12]
 80186d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80186d4:	1ad1      	subs	r1, r2, r3
 80186d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80186d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186da:	18d4      	adds	r4, r2, r3
 80186dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e0:	1ad3      	subs	r3, r2, r3
 80186e2:	2200      	movs	r2, #0
 80186e4:	9200      	str	r2, [sp, #0]
 80186e6:	4622      	mov	r2, r4
 80186e8:	f7fd fffb 	bl	80166e2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 80186ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186ee:	3b01      	subs	r3, #1
 80186f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80186f2:	4413      	add	r3, r2
 80186f4:	2200      	movs	r2, #0
 80186f6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80186f8:	f107 0314 	add.w	r3, r7, #20
 80186fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018700:	4618      	mov	r0, r3
 8018702:	f008 fb48 	bl	8020d96 <mg_str_n>
 8018706:	f107 0314 	add.w	r3, r7, #20
 801870a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801870e:	f009 fb19 	bl	8021d44 <mg_path_is_sane>
 8018712:	4603      	mov	r3, r0
 8018714:	f083 0301 	eor.w	r3, r3, #1
 8018718:	b2db      	uxtb	r3, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	d009      	beq.n	8018732 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 801871e:	4b6e      	ldr	r3, [pc, #440]	@ (80188d8 <uri_to_path2+0x298>)
 8018720:	4a6c      	ldr	r2, [pc, #432]	@ (80188d4 <uri_to_path2+0x294>)
 8018722:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018726:	68f8      	ldr	r0, [r7, #12]
 8018728:	f7ff f8f4 	bl	8017914 <mg_http_reply>
    return -1;
 801872c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018730:	e0ec      	b.n	801890c <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8018732:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018734:	f7e7 fda4 	bl	8000280 <strlen>
 8018738:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 801873a:	e007      	b.n	801874c <uri_to_path2+0x10c>
 801873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801873e:	3b01      	subs	r3, #1
 8018740:	627b      	str	r3, [r7, #36]	@ 0x24
 8018742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018746:	4413      	add	r3, r2
 8018748:	2200      	movs	r2, #0
 801874a:	701a      	strb	r2, [r3, #0]
 801874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801874e:	2b01      	cmp	r3, #1
 8018750:	d906      	bls.n	8018760 <uri_to_path2+0x120>
 8018752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018754:	3b01      	subs	r3, #1
 8018756:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018758:	4413      	add	r3, r2
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b2f      	cmp	r3, #47	@ 0x2f
 801875e:	d0ed      	beq.n	801873c <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018760:	f107 031c 	add.w	r3, r7, #28
 8018764:	495d      	ldr	r1, [pc, #372]	@ (80188dc <uri_to_path2+0x29c>)
 8018766:	4618      	mov	r0, r3
 8018768:	f008 faf8 	bl	8020d5c <mg_str_s>
 801876c:	68b9      	ldr	r1, [r7, #8]
 801876e:	f107 031c 	add.w	r3, r7, #28
 8018772:	cb0c      	ldmia	r3, {r2, r3}
 8018774:	3108      	adds	r1, #8
 8018776:	c903      	ldmia	r1, {r0, r1}
 8018778:	f008 fb3a 	bl	8020df0 <mg_strcmp>
 801877c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 801877e:	2b00      	cmp	r3, #0
 8018780:	d007      	beq.n	8018792 <uri_to_path2+0x152>
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	2200      	movs	r2, #0
 8018788:	2100      	movs	r1, #0
 801878a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801878c:	4798      	blx	r3
 801878e:	4603      	mov	r3, r0
 8018790:	e000      	b.n	8018794 <uri_to_path2+0x154>
 8018792:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8018796:	4b52      	ldr	r3, [pc, #328]	@ (80188e0 <uri_to_path2+0x2a0>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2b03      	cmp	r3, #3
 801879c:	dd16      	ble.n	80187cc <uri_to_path2+0x18c>
 801879e:	4b51      	ldr	r3, [pc, #324]	@ (80188e4 <uri_to_path2+0x2a4>)
 80187a0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 80187a4:	4950      	ldr	r1, [pc, #320]	@ (80188e8 <uri_to_path2+0x2a8>)
 80187a6:	2004      	movs	r0, #4
 80187a8:	f002 f85c 	bl	801a864 <mg_log_prefix>
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	68db      	ldr	r3, [r3, #12]
 80187b4:	4618      	mov	r0, r3
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	689a      	ldr	r2, [r3, #8]
 80187ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187bc:	9301      	str	r3, [sp, #4]
 80187be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187c0:	9300      	str	r3, [sp, #0]
 80187c2:	4613      	mov	r3, r2
 80187c4:	4602      	mov	r2, r0
 80187c6:	4849      	ldr	r0, [pc, #292]	@ (80188ec <uri_to_path2+0x2ac>)
 80187c8:	f002 f89c 	bl	801a904 <mg_log>
              flags));
  if (flags == 0) {
 80187cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	f000 809b 	beq.w	801890a <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80187d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d6:	f003 0304 	and.w	r3, r3, #4
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d020      	beq.n	8018820 <uri_to_path2+0x1e0>
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	68db      	ldr	r3, [r3, #12]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d01c      	beq.n	8018820 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	689a      	ldr	r2, [r3, #8]
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	68db      	ldr	r3, [r3, #12]
 80187ee:	3b01      	subs	r3, #1
 80187f0:	4413      	add	r3, r2
 80187f2:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80187f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80187f6:	d013      	beq.n	8018820 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 80187fc:	461a      	mov	r2, r3
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	689b      	ldr	r3, [r3, #8]
 8018802:	493b      	ldr	r1, [pc, #236]	@ (80188f0 <uri_to_path2+0x2b0>)
 8018804:	68f8      	ldr	r0, [r7, #12]
 8018806:	f004 f975 	bl	801caf4 <mg_printf>
    c->is_resp = 0;
 801880a:	68fa      	ldr	r2, [r7, #12]
 801880c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018810:	f36f 13c7 	bfc	r3, #7, #1
 8018814:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8018818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801881c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801881e:	e074      	b.n	801890a <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8018820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018822:	f003 0304 	and.w	r3, r3, #4
 8018826:	2b00      	cmp	r3, #0
 8018828:	d06f      	beq.n	801890a <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 801882a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801882e:	18d0      	adds	r0, r2, r3
 8018830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018834:	1ad3      	subs	r3, r2, r3
 8018836:	4a2f      	ldr	r2, [pc, #188]	@ (80188f4 <uri_to_path2+0x2b4>)
 8018838:	4619      	mov	r1, r3
 801883a:	f008 f82f 	bl	802089c <mg_snprintf>
 801883e:	4603      	mov	r3, r0
 8018840:	2b00      	cmp	r3, #0
 8018842:	d009      	beq.n	8018858 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	2200      	movs	r2, #0
 801884a:	2100      	movs	r1, #0
 801884c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801884e:	4798      	blx	r3
 8018850:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8018852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018854:	2b00      	cmp	r3, #0
 8018856:	d116      	bne.n	8018886 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018858:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801885c:	18d0      	adds	r0, r2, r3
 801885e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	4a24      	ldr	r2, [pc, #144]	@ (80188f8 <uri_to_path2+0x2b8>)
 8018866:	4619      	mov	r1, r3
 8018868:	f008 f818 	bl	802089c <mg_snprintf>
 801886c:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 801886e:	2b00      	cmp	r3, #0
 8018870:	d00c      	beq.n	801888c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	2200      	movs	r2, #0
 8018878:	2100      	movs	r1, #0
 801887a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801887c:	4798      	blx	r3
 801887e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018882:	2b00      	cmp	r3, #0
 8018884:	d002      	beq.n	801888c <uri_to_path2+0x24c>
      flags = tmp;
 8018886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801888a:	e03e      	b.n	801890a <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 801888c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018890:	18d0      	adds	r0, r2, r3
 8018892:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018896:	1ad3      	subs	r3, r2, r3
 8018898:	4a18      	ldr	r2, [pc, #96]	@ (80188fc <uri_to_path2+0x2bc>)
 801889a:	4619      	mov	r1, r3
 801889c:	f007 fffe 	bl	802089c <mg_snprintf>
 80188a0:	4603      	mov	r3, r0
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d02c      	beq.n	8018900 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2200      	movs	r2, #0
 80188ac:	2100      	movs	r1, #0
 80188ae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80188b0:	4798      	blx	r3
 80188b2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 80188b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d022      	beq.n	8018900 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 80188ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80188be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188c0:	330b      	adds	r3, #11
 80188c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80188c4:	4413      	add	r3, r2
 80188c6:	2200      	movs	r2, #0
 80188c8:	701a      	strb	r2, [r3, #0]
 80188ca:	e01e      	b.n	801890a <uri_to_path2+0x2ca>
 80188cc:	080269b8 	.word	0x080269b8
 80188d0:	080279a0 	.word	0x080279a0
 80188d4:	08026f18 	.word	0x08026f18
 80188d8:	080279b4 	.word	0x080279b4
 80188dc:	080272f8 	.word	0x080272f8
 80188e0:	20000294 	.word	0x20000294
 80188e4:	08029658 	.word	0x08029658
 80188e8:	08026838 	.word	0x08026838
 80188ec:	080279c4 	.word	0x080279c4
 80188f0:	080279d8 	.word	0x080279d8
 80188f4:	08027a14 	.word	0x08027a14
 80188f8:	08027a20 	.word	0x08027a20
 80188fc:	08027a30 	.word	0x08027a30
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8018900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018904:	4413      	add	r3, r2
 8018906:	2200      	movs	r2, #0
 8018908:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 801890a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801890c:	4618      	mov	r0, r3
 801890e:	3734      	adds	r7, #52	@ 0x34
 8018910:	46bd      	mov	sp, r7
 8018912:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018916:	b002      	add	sp, #8
 8018918:	4770      	bx	lr
 801891a:	bf00      	nop

0801891c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 801891c:	b580      	push	{r7, lr}
 801891e:	b09c      	sub	sp, #112	@ 0x70
 8018920:	af06      	add	r7, sp, #24
 8018922:	6178      	str	r0, [r7, #20]
 8018924:	6139      	str	r1, [r7, #16]
 8018926:	60fa      	str	r2, [r7, #12]
 8018928:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	695b      	ldr	r3, [r3, #20]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d002      	beq.n	8018938 <uri_to_path+0x1c>
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	695b      	ldr	r3, [r3, #20]
 8018936:	e000      	b.n	801893a <uri_to_path+0x1e>
 8018938:	4b5b      	ldr	r3, [pc, #364]	@ (8018aa8 <uri_to_path+0x18c>)
 801893a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	681a      	ldr	r2, [r3, #0]
 8018940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018944:	4611      	mov	r1, r2
 8018946:	4618      	mov	r0, r3
 8018948:	f008 fa08 	bl	8020d5c <mg_str_s>
 801894c:	2300      	movs	r3, #0
 801894e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018950:	2300      	movs	r3, #0
 8018952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018954:	f107 031c 	add.w	r3, r7, #28
 8018958:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801895c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018960:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8018964:	e078      	b.n	8018a58 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8018966:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801896a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 801896e:	213d      	movs	r1, #61	@ 0x3d
 8018970:	9100      	str	r1, [sp, #0]
 8018972:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018976:	c903      	ldmia	r1, {r0, r1}
 8018978:	f008 fbb7 	bl	80210ea <mg_span>
 801897c:	4603      	mov	r3, r0
 801897e:	f083 0301 	eor.w	r3, r3, #1
 8018982:	b2db      	uxtb	r3, r3
 8018984:	2b00      	cmp	r3, #0
 8018986:	d014      	beq.n	80189b2 <uri_to_path+0x96>
 8018988:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801898c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8018990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018994:	e883 0003 	stmia.w	r3, {r0, r1}
 8018998:	463b      	mov	r3, r7
 801899a:	2200      	movs	r2, #0
 801899c:	2100      	movs	r1, #0
 801899e:	4618      	mov	r0, r3
 80189a0:	f008 f9f9 	bl	8020d96 <mg_str_n>
 80189a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80189a8:	463a      	mov	r2, r7
 80189aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189ae:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 80189b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d123      	bne.n	8018a00 <uri_to_path+0xe4>
 80189b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80189bc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80189c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80189c8:	463b      	mov	r3, r7
 80189ca:	4938      	ldr	r1, [pc, #224]	@ (8018aac <uri_to_path+0x190>)
 80189cc:	4618      	mov	r0, r3
 80189ce:	f008 f9c5 	bl	8020d5c <mg_str_s>
 80189d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80189d6:	463a      	mov	r2, r7
 80189d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80189e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80189e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80189f0:	f107 031c 	add.w	r3, r7, #28
 80189f4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80189f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189fc:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	68da      	ldr	r2, [r3, #12]
 8018a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d323      	bcc.n	8018a52 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8018a0a:	693b      	ldr	r3, [r7, #16]
 8018a0c:	6899      	ldr	r1, [r3, #8]
 8018a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018a10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018a14:	4618      	mov	r0, r3
 8018a16:	f008 f9be 	bl	8020d96 <mg_str_n>
 8018a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018a1e:	cb0c      	ldmia	r3, {r2, r3}
 8018a20:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8018a24:	c903      	ldmia	r1, {r0, r1}
 8018a26:	f008 f9e3 	bl	8020df0 <mg_strcmp>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d112      	bne.n	8018a56 <uri_to_path+0x13a>
    u = k, p = v;
 8018a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a34:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a40:	f107 031c 	add.w	r3, r7, #28
 8018a44:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a50:	e002      	b.n	8018a58 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 8018a52:	bf00      	nop
 8018a54:	e000      	b.n	8018a58 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8018a56:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8018a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a5c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8018a60:	212c      	movs	r1, #44	@ 0x2c
 8018a62:	9100      	str	r1, [sp, #0]
 8018a64:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8018a68:	c903      	ldmia	r1, {r0, r1}
 8018a6a:	f008 fb3e 	bl	80210ea <mg_span>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	f47f af78 	bne.w	8018966 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8018a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018a78:	9304      	str	r3, [sp, #16]
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	9303      	str	r3, [sp, #12]
 8018a7e:	aa01      	add	r2, sp, #4
 8018a80:	f107 031c 	add.w	r3, r7, #28
 8018a84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a88:	e882 0003 	stmia.w	r2, {r0, r1}
 8018a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a8e:	9300      	str	r3, [sp, #0]
 8018a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018a94:	6939      	ldr	r1, [r7, #16]
 8018a96:	6978      	ldr	r0, [r7, #20]
 8018a98:	f7ff fdd2 	bl	8018640 <uri_to_path2>
 8018a9c:	4603      	mov	r3, r0
}
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	3758      	adds	r7, #88	@ 0x58
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	20000084 	.word	0x20000084
 8018aac:	080272f8 	.word	0x080272f8

08018ab0 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b0ac      	sub	sp, #176	@ 0xb0
 8018ab4:	af02      	add	r7, sp, #8
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8018ac4:	f107 0310 	add.w	r3, r7, #16
 8018ac8:	2280      	movs	r2, #128	@ 0x80
 8018aca:	9200      	str	r2, [sp, #0]
 8018acc:	687a      	ldr	r2, [r7, #4]
 8018ace:	68b9      	ldr	r1, [r7, #8]
 8018ad0:	68f8      	ldr	r0, [r7, #12]
 8018ad2:	f7ff ff23 	bl	801891c <uri_to_path>
 8018ad6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 8018ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	db41      	blt.n	8018b66 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8018ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018ae6:	f003 0304 	and.w	r3, r3, #4
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d007      	beq.n	8018afe <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 8018aee:	f107 0310 	add.w	r3, r7, #16
 8018af2:	687a      	ldr	r2, [r7, #4]
 8018af4:	68b9      	ldr	r1, [r7, #8]
 8018af6:	68f8      	ldr	r0, [r7, #12]
 8018af8:	f7ff fce0 	bl	80184bc <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8018afc:	e033      	b.n	8018b66 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8018afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d028      	beq.n	8018b58 <mg_http_serve_dir+0xa8>
 8018b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d024      	beq.n	8018b58 <mg_http_serve_dir+0xa8>
 8018b0e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8018b12:	f107 0210 	add.w	r2, r7, #16
 8018b16:	4611      	mov	r1, r2
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f008 f91f 	bl	8020d5c <mg_str_s>
 8018b1e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018b26:	4618      	mov	r0, r3
 8018b28:	f008 f918 	bl	8020d5c <mg_str_s>
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018b34:	cb0c      	ldmia	r3, {r2, r3}
 8018b36:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8018b3a:	c903      	ldmia	r1, {r0, r1}
 8018b3c:	f008 f9e1 	bl	8020f02 <mg_match>
 8018b40:	4603      	mov	r3, r0
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d008      	beq.n	8018b58 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f107 0210 	add.w	r2, r7, #16
 8018b4e:	4619      	mov	r1, r3
 8018b50:	68f8      	ldr	r0, [r7, #12]
 8018b52:	f008 f8ef 	bl	8020d34 <mg_http_serve_ssi>
}
 8018b56:	e006      	b.n	8018b66 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8018b58:	f107 0210 	add.w	r2, r7, #16
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	68b9      	ldr	r1, [r7, #8]
 8018b60:	68f8      	ldr	r0, [r7, #12]
 8018b62:	f7ff f8cb 	bl	8017cfc <mg_http_serve_file>
}
 8018b66:	bf00      	nop
 8018b68:	37a8      	adds	r7, #168	@ 0xa8
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}

08018b6e <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8018b6e:	b480      	push	{r7}
 8018b70:	b083      	sub	sp, #12
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	2b2f      	cmp	r3, #47	@ 0x2f
 8018b7a:	dd02      	ble.n	8018b82 <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	2b39      	cmp	r3, #57	@ 0x39
 8018b80:	dd17      	ble.n	8018bb2 <mg_is_url_safe+0x44>
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	2b60      	cmp	r3, #96	@ 0x60
 8018b86:	dd02      	ble.n	8018b8e <mg_is_url_safe+0x20>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b7a      	cmp	r3, #122	@ 0x7a
 8018b8c:	dd11      	ble.n	8018bb2 <mg_is_url_safe+0x44>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2b40      	cmp	r3, #64	@ 0x40
 8018b92:	dd02      	ble.n	8018b9a <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2b5a      	cmp	r3, #90	@ 0x5a
 8018b98:	dd0b      	ble.n	8018bb2 <mg_is_url_safe+0x44>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b9e:	d008      	beq.n	8018bb2 <mg_is_url_safe+0x44>
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2b5f      	cmp	r3, #95	@ 0x5f
 8018ba4:	d005      	beq.n	8018bb2 <mg_is_url_safe+0x44>
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2b2d      	cmp	r3, #45	@ 0x2d
 8018baa:	d002      	beq.n	8018bb2 <mg_is_url_safe+0x44>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2b7e      	cmp	r3, #126	@ 0x7e
 8018bb0:	d101      	bne.n	8018bb6 <mg_is_url_safe+0x48>
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e000      	b.n	8018bb8 <mg_is_url_safe+0x4a>
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	f003 0301 	and.w	r3, r3, #1
 8018bbc:	b2db      	uxtb	r3, r3
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	370c      	adds	r7, #12
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc8:	4770      	bx	lr
	...

08018bcc <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b08a      	sub	sp, #40	@ 0x28
 8018bd0:	af02      	add	r7, sp, #8
 8018bd2:	60f8      	str	r0, [r7, #12]
 8018bd4:	60b9      	str	r1, [r7, #8]
 8018bd6:	607a      	str	r2, [r7, #4]
 8018bd8:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 8018bda:	2300      	movs	r3, #0
 8018bdc:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8018bde:	2300      	movs	r3, #0
 8018be0:	61fb      	str	r3, [r7, #28]
 8018be2:	e030      	b.n	8018c46 <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 8018be4:	68fa      	ldr	r2, [r7, #12]
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	4413      	add	r3, r2
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 8018bee:	69bb      	ldr	r3, [r7, #24]
 8018bf0:	3304      	adds	r3, #4
 8018bf2:	683a      	ldr	r2, [r7, #0]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d801      	bhi.n	8018bfc <mg_url_encode+0x30>
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	e03f      	b.n	8018c7c <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 8018bfc:	6978      	ldr	r0, [r7, #20]
 8018bfe:	f7ff ffb6 	bl	8018b6e <mg_is_url_safe>
 8018c02:	4603      	mov	r3, r0
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d00a      	beq.n	8018c1e <mg_url_encode+0x52>
      buf[n++] = s[i];
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	69fb      	ldr	r3, [r7, #28]
 8018c0c:	441a      	add	r2, r3
 8018c0e:	69bb      	ldr	r3, [r7, #24]
 8018c10:	1c59      	adds	r1, r3, #1
 8018c12:	61b9      	str	r1, [r7, #24]
 8018c14:	6879      	ldr	r1, [r7, #4]
 8018c16:	440b      	add	r3, r1
 8018c18:	7812      	ldrb	r2, [r2, #0]
 8018c1a:	701a      	strb	r2, [r3, #0]
 8018c1c:	e010      	b.n	8018c40 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8018c1e:	687a      	ldr	r2, [r7, #4]
 8018c20:	69bb      	ldr	r3, [r7, #24]
 8018c22:	18d0      	adds	r0, r2, r3
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	69fb      	ldr	r3, [r7, #28]
 8018c28:	4413      	add	r3, r2
 8018c2a:	9301      	str	r3, [sp, #4]
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	9300      	str	r3, [sp, #0]
 8018c30:	4b14      	ldr	r3, [pc, #80]	@ (8018c84 <mg_url_encode+0xb8>)
 8018c32:	4a15      	ldr	r2, [pc, #84]	@ (8018c88 <mg_url_encode+0xbc>)
 8018c34:	2104      	movs	r1, #4
 8018c36:	f007 fe31 	bl	802089c <mg_snprintf>
      n += 3;
 8018c3a:	69bb      	ldr	r3, [r7, #24]
 8018c3c:	3303      	adds	r3, #3
 8018c3e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8018c40:	69fb      	ldr	r3, [r7, #28]
 8018c42:	3301      	adds	r3, #1
 8018c44:	61fb      	str	r3, [r7, #28]
 8018c46:	69fa      	ldr	r2, [r7, #28]
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d3ca      	bcc.n	8018be4 <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d009      	beq.n	8018c68 <mg_url_encode+0x9c>
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	3b01      	subs	r3, #1
 8018c58:	69ba      	ldr	r2, [r7, #24]
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d204      	bcs.n	8018c68 <mg_url_encode+0x9c>
 8018c5e:	687a      	ldr	r2, [r7, #4]
 8018c60:	69bb      	ldr	r3, [r7, #24]
 8018c62:	4413      	add	r3, r2
 8018c64:	2200      	movs	r2, #0
 8018c66:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d005      	beq.n	8018c7a <mg_url_encode+0xae>
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	3b01      	subs	r3, #1
 8018c72:	687a      	ldr	r2, [r7, #4]
 8018c74:	4413      	add	r3, r2
 8018c76:	2200      	movs	r2, #0
 8018c78:	701a      	strb	r2, [r3, #0]
  return n;
 8018c7a:	69bb      	ldr	r3, [r7, #24]
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3720      	adds	r7, #32
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}
 8018c84:	08020b85 	.word	0x08020b85
 8018c88:	08027a40 	.word	0x08027a40

08018c8c <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8018c8c:	b590      	push	{r4, r7, lr}
 8018c8e:	b0d3      	sub	sp, #332	@ 0x14c
 8018c90:	af02      	add	r7, sp, #8
 8018c92:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8018c96:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8018c9a:	6020      	str	r0, [r4, #0]
 8018c9c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8018ca0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8018ca4:	6001      	str	r1, [r0, #0]
 8018ca6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8018caa:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8018cae:	600a      	str	r2, [r1, #0]
 8018cb0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018cb4:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8018cb8:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8018cba:	2330      	movs	r3, #48	@ 0x30
 8018cbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8018cc0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	601a      	str	r2, [r3, #0]
 8018cc8:	605a      	str	r2, [r3, #4]
 8018cca:	609a      	str	r2, [r3, #8]
 8018ccc:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8018cd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018cd8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	f103 0010 	add.w	r0, r3, #16
 8018ce2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8018ce6:	2314      	movs	r3, #20
 8018ce8:	49b5      	ldr	r1, [pc, #724]	@ (8018fc0 <mg_http_upload+0x334>)
 8018cea:	f7fd fc85 	bl	80165f8 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8018cee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018cf2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	f103 0010 	add.w	r0, r3, #16
 8018cfc:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8018d00:	2380      	movs	r3, #128	@ 0x80
 8018d02:	49b0      	ldr	r1, [pc, #704]	@ (8018fc4 <mg_http_upload+0x338>)
 8018d04:	f7fd fc78 	bl	80165f8 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8018d08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	2100      	movs	r1, #0
 8018d10:	4618      	mov	r0, r3
 8018d12:	f009 ff0f 	bl	8022b34 <strtol>
 8018d16:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8018d1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d1e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8018d22:	f107 0018 	add.w	r0, r7, #24
 8018d26:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8018d2a:	9201      	str	r2, [sp, #4]
 8018d2c:	222f      	movs	r2, #47	@ 0x2f
 8018d2e:	9200      	str	r2, [sp, #0]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	4aa5      	ldr	r2, [pc, #660]	@ (8018fc8 <mg_http_upload+0x33c>)
 8018d34:	2180      	movs	r1, #128	@ 0x80
 8018d36:	f007 fdb1 	bl	802089c <mg_snprintf>
  if (hm->body.len == 0) {
 8018d3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d10d      	bne.n	8018d68 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8018d4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d50:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018d54:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8018d58:	9300      	str	r3, [sp, #0]
 8018d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8018fcc <mg_http_upload+0x340>)
 8018d5c:	4a9c      	ldr	r2, [pc, #624]	@ (8018fd0 <mg_http_upload+0x344>)
 8018d5e:	21c8      	movs	r1, #200	@ 0xc8
 8018d60:	6800      	ldr	r0, [r0, #0]
 8018d62:	f7fe fdd7 	bl	8017914 <mg_http_reply>
 8018d66:	e123      	b.n	8018fb0 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 8018d68:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d10f      	bne.n	8018d90 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 8018d70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d74:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018d78:	4b96      	ldr	r3, [pc, #600]	@ (8018fd4 <mg_http_upload+0x348>)
 8018d7a:	4a97      	ldr	r2, [pc, #604]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018d7c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018d80:	6800      	ldr	r0, [r0, #0]
 8018d82:	f7fe fdc7 	bl	8017914 <mg_http_reply>
    res = -1;
 8018d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018d8a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018d8e:	e10f      	b.n	8018fb0 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8018d90:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8018d94:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8018d98:	4611      	mov	r1, r2
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f007 ffde 	bl	8020d5c <mg_str_s>
 8018da0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8018da4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018da8:	f008 ffcc 	bl	8021d44 <mg_path_is_sane>
 8018dac:	4603      	mov	r3, r0
 8018dae:	f083 0301 	eor.w	r3, r3, #1
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d012      	beq.n	8018dde <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8018db8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018dbc:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018dc0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018dc4:	9300      	str	r3, [sp, #0]
 8018dc6:	4b85      	ldr	r3, [pc, #532]	@ (8018fdc <mg_http_upload+0x350>)
 8018dc8:	4a83      	ldr	r2, [pc, #524]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018dca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018dce:	6800      	ldr	r0, [r0, #0]
 8018dd0:	f7fe fda0 	bl	8017914 <mg_http_reply>
    res = -2;
 8018dd4:	f06f 0301 	mvn.w	r3, #1
 8018dd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018ddc:	e0e8      	b.n	8018fb0 <mg_http_upload+0x324>
  } else if (offset < 0) {
 8018dde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	da0f      	bge.n	8018e06 <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 8018de6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018dea:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018dee:	4b7c      	ldr	r3, [pc, #496]	@ (8018fe0 <mg_http_upload+0x354>)
 8018df0:	4a79      	ldr	r2, [pc, #484]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018df2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018df6:	6800      	ldr	r0, [r0, #0]
 8018df8:	f7fe fd8c 	bl	8017914 <mg_http_reply>
    res = -3;
 8018dfc:	f06f 0302 	mvn.w	r3, #2
 8018e00:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018e04:	e0d4      	b.n	8018fb0 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8018e06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018e14:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018e18:	4413      	add	r3, r2
 8018e1a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d215      	bcs.n	8018e4e <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8018e22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e26:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018e2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8018e2e:	9301      	str	r3, [sp, #4]
 8018e30:	f107 0318 	add.w	r3, r7, #24
 8018e34:	9300      	str	r3, [sp, #0]
 8018e36:	4b6b      	ldr	r3, [pc, #428]	@ (8018fe4 <mg_http_upload+0x358>)
 8018e38:	4a67      	ldr	r2, [pc, #412]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018e3a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018e3e:	6800      	ldr	r0, [r0, #0]
 8018e40:	f7fe fd68 	bl	8017914 <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 8018e44:	f06f 0303 	mvn.w	r3, #3
 8018e48:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018e4c:	e0b0      	b.n	8018fb0 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 8018e4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018e56:	2200      	movs	r2, #0
 8018e58:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8018e5a:	4b63      	ldr	r3, [pc, #396]	@ (8018fe8 <mg_http_upload+0x35c>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2b02      	cmp	r3, #2
 8018e60:	dd14      	ble.n	8018e8c <mg_http_upload+0x200>
 8018e62:	4b62      	ldr	r3, [pc, #392]	@ (8018fec <mg_http_upload+0x360>)
 8018e64:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8018e68:	4961      	ldr	r1, [pc, #388]	@ (8018ff0 <mg_http_upload+0x364>)
 8018e6a:	2003      	movs	r0, #3
 8018e6c:	f001 fcfa 	bl	801a864 <mg_log_prefix>
 8018e70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e74:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018e7e:	f107 0118 	add.w	r1, r7, #24
 8018e82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018e86:	485b      	ldr	r0, [pc, #364]	@ (8018ff4 <mg_http_upload+0x368>)
 8018e88:	f001 fd3c 	bl	801a904 <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8018e8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d109      	bne.n	8018ea8 <mg_http_upload+0x21c>
 8018e94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	6a1b      	ldr	r3, [r3, #32]
 8018ea0:	f107 0218 	add.w	r2, r7, #24
 8018ea4:	4610      	mov	r0, r2
 8018ea6:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8018ea8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018eac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	f107 0114 	add.w	r1, r7, #20
 8018eb8:	f107 0018 	add.w	r0, r7, #24
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8018ec0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	dd1b      	ble.n	8018f00 <mg_http_upload+0x274>
 8018ec8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018ecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018ed0:	681a      	ldr	r2, [r3, #0]
 8018ed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d012      	beq.n	8018f00 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8018eda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018ede:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018ee2:	f107 0318 	add.w	r3, r7, #24
 8018ee6:	9300      	str	r3, [sp, #0]
 8018ee8:	4b43      	ldr	r3, [pc, #268]	@ (8018ff8 <mg_http_upload+0x36c>)
 8018eea:	4a3b      	ldr	r2, [pc, #236]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018eec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018ef0:	6800      	ldr	r0, [r0, #0]
 8018ef2:	f7fe fd0f 	bl	8017914 <mg_http_reply>
      res = -5;
 8018ef6:	f06f 0304 	mvn.w	r3, #4
 8018efa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018efe:	e057      	b.n	8018fb0 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8018f00:	f107 0118 	add.w	r1, r7, #24
 8018f04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018f08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018f0c:	2202      	movs	r2, #2
 8018f0e:	6818      	ldr	r0, [r3, #0]
 8018f10:	f7fd f998 	bl	8016244 <mg_fs_open>
 8018f14:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8018f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d117      	bne.n	8018f50 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8018f20:	f00a f84e 	bl	8022fc0 <__errno>
 8018f24:	4603      	mov	r3, r0
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018f2c:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 8018f30:	9301      	str	r3, [sp, #4]
 8018f32:	f107 0318 	add.w	r3, r7, #24
 8018f36:	9300      	str	r3, [sp, #0]
 8018f38:	4b30      	ldr	r3, [pc, #192]	@ (8018ffc <mg_http_upload+0x370>)
 8018f3a:	4a27      	ldr	r2, [pc, #156]	@ (8018fd8 <mg_http_upload+0x34c>)
 8018f3c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018f40:	6800      	ldr	r0, [r0, #0]
 8018f42:	f7fe fce7 	bl	8017914 <mg_http_reply>
      res = -6;
 8018f46:	f06f 0305 	mvn.w	r3, #5
 8018f4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018f4e:	e02f      	b.n	8018fb0 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8018f50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018f54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	695b      	ldr	r3, [r3, #20]
 8018f5c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8018f60:	6810      	ldr	r0, [r2, #0]
 8018f62:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018f66:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8018f6a:	6812      	ldr	r2, [r2, #0]
 8018f6c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8018f70:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018f74:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8018f78:	6812      	ldr	r2, [r2, #0]
 8018f7a:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8018f7e:	4798      	blx	r3
 8018f80:	4603      	mov	r3, r0
 8018f82:	461a      	mov	r2, r3
 8018f84:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018f88:	4413      	add	r3, r2
 8018f8a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8018f8e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8018f92:	f7fd f97e 	bl	8016292 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8018f96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018f9a:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8018f9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	4b09      	ldr	r3, [pc, #36]	@ (8018fcc <mg_http_upload+0x340>)
 8018fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8018fd0 <mg_http_upload+0x344>)
 8018fa8:	21c8      	movs	r1, #200	@ 0xc8
 8018faa:	6800      	ldr	r0, [r0, #0]
 8018fac:	f7fe fcb2 	bl	8017914 <mg_http_reply>
    }
  }
  return res;
 8018fb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd90      	pop	{r4, r7, pc}
 8018fbe:	bf00      	nop
 8018fc0:	08027a80 	.word	0x08027a80
 8018fc4:	08027a88 	.word	0x08027a88
 8018fc8:	080272cc 	.word	0x080272cc
 8018fcc:	08027a90 	.word	0x08027a90
 8018fd0:	08027a94 	.word	0x08027a94
 8018fd4:	08027b04 	.word	0x08027b04
 8018fd8:	08026f18 	.word	0x08026f18
 8018fdc:	08027b14 	.word	0x08027b14
 8018fe0:	08027b28 	.word	0x08027b28
 8018fe4:	08027b38 	.word	0x08027b38
 8018fe8:	20000294 	.word	0x20000294
 8018fec:	08029668 	.word	0x08029668
 8018ff0:	08026838 	.word	0x08026838
 8018ff4:	08027b54 	.word	0x08027b54
 8018ff8:	08027b6c 	.word	0x08027b6c
 8018ffc:	08027b80 	.word	0x08027b80

08019000 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	689b      	ldr	r3, [r3, #8]
 801900c:	4618      	mov	r0, r3
 801900e:	f009 fa75 	bl	80224fc <atoi>
 8019012:	4603      	mov	r3, r0
}
 8019014:	4618      	mov	r0, r3
 8019016:	3708      	adds	r7, #8
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}

0801901c <is_hex_digit>:

static bool is_hex_digit(int c) {
 801901c:	b480      	push	{r7}
 801901e:	b083      	sub	sp, #12
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2b2f      	cmp	r3, #47	@ 0x2f
 8019028:	dd02      	ble.n	8019030 <is_hex_digit+0x14>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	2b39      	cmp	r3, #57	@ 0x39
 801902e:	dd0b      	ble.n	8019048 <is_hex_digit+0x2c>
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	2b60      	cmp	r3, #96	@ 0x60
 8019034:	dd02      	ble.n	801903c <is_hex_digit+0x20>
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2b66      	cmp	r3, #102	@ 0x66
 801903a:	dd05      	ble.n	8019048 <is_hex_digit+0x2c>
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2b40      	cmp	r3, #64	@ 0x40
 8019040:	dd04      	ble.n	801904c <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2b46      	cmp	r3, #70	@ 0x46
 8019046:	dc01      	bgt.n	801904c <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8019048:	2301      	movs	r3, #1
 801904a:	e000      	b.n	801904e <is_hex_digit+0x32>
 801904c:	2300      	movs	r3, #0
 801904e:	f003 0301 	and.w	r3, r3, #1
 8019052:	b2db      	uxtb	r3, r3
}
 8019054:	4618      	mov	r0, r3
 8019056:	370c      	adds	r7, #12
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr

08019060 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8019060:	b580      	push	{r7, lr}
 8019062:	b08a      	sub	sp, #40	@ 0x28
 8019064:	af02      	add	r7, sp, #8
 8019066:	60f8      	str	r0, [r7, #12]
 8019068:	60b9      	str	r1, [r7, #8]
 801906a:	607a      	str	r2, [r7, #4]
 801906c:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 801906e:	2300      	movs	r3, #0
 8019070:	61fb      	str	r3, [r7, #28]
 8019072:	2300      	movs	r3, #0
 8019074:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	2b02      	cmp	r3, #2
 801907a:	dc04      	bgt.n	8019086 <skip_chunk+0x26>
 801907c:	2300      	movs	r3, #0
 801907e:	e07a      	b.n	8019176 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8019080:	69fb      	ldr	r3, [r7, #28]
 8019082:	3301      	adds	r3, #1
 8019084:	61fb      	str	r3, [r7, #28]
 8019086:	69fa      	ldr	r2, [r7, #28]
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	429a      	cmp	r2, r3
 801908c:	da09      	bge.n	80190a2 <skip_chunk+0x42>
 801908e:	69fb      	ldr	r3, [r7, #28]
 8019090:	68fa      	ldr	r2, [r7, #12]
 8019092:	4413      	add	r3, r2
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	4618      	mov	r0, r3
 8019098:	f7ff ffc0 	bl	801901c <is_hex_digit>
 801909c:	4603      	mov	r3, r0
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d1ee      	bne.n	8019080 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 80190a2:	69fb      	ldr	r3, [r7, #28]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d102      	bne.n	80190ae <skip_chunk+0x4e>
 80190a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190ac:	e063      	b.n	8019176 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80190ae:	69fb      	ldr	r3, [r7, #28]
 80190b0:	2b08      	cmp	r3, #8
 80190b2:	dd02      	ble.n	80190ba <skip_chunk+0x5a>
 80190b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190b8:	e05d      	b.n	8019176 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80190ba:	69fa      	ldr	r2, [r7, #28]
 80190bc:	68bb      	ldr	r3, [r7, #8]
 80190be:	429a      	cmp	r2, r3
 80190c0:	da0c      	bge.n	80190dc <skip_chunk+0x7c>
 80190c2:	69fb      	ldr	r3, [r7, #28]
 80190c4:	68fa      	ldr	r2, [r7, #12]
 80190c6:	4413      	add	r3, r2
 80190c8:	781b      	ldrb	r3, [r3, #0]
 80190ca:	2b0d      	cmp	r3, #13
 80190cc:	d106      	bne.n	80190dc <skip_chunk+0x7c>
 80190ce:	69fb      	ldr	r3, [r7, #28]
 80190d0:	3301      	adds	r3, #1
 80190d2:	68fa      	ldr	r2, [r7, #12]
 80190d4:	4413      	add	r3, r2
 80190d6:	781b      	ldrb	r3, [r3, #0]
 80190d8:	2b0a      	cmp	r3, #10
 80190da:	d002      	beq.n	80190e2 <skip_chunk+0x82>
 80190dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190e0:	e049      	b.n	8019176 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80190e2:	69fa      	ldr	r2, [r7, #28]
 80190e4:	f107 0314 	add.w	r3, r7, #20
 80190e8:	68f9      	ldr	r1, [r7, #12]
 80190ea:	4618      	mov	r0, r3
 80190ec:	f007 fe53 	bl	8020d96 <mg_str_n>
 80190f0:	f107 0310 	add.w	r3, r7, #16
 80190f4:	2204      	movs	r2, #4
 80190f6:	9200      	str	r2, [sp, #0]
 80190f8:	2210      	movs	r2, #16
 80190fa:	f107 0114 	add.w	r1, r7, #20
 80190fe:	c903      	ldmia	r1, {r0, r1}
 8019100:	f008 f850 	bl	80211a4 <mg_str_to_num>
 8019104:	4603      	mov	r3, r0
 8019106:	f083 0301 	eor.w	r3, r3, #1
 801910a:	b2db      	uxtb	r3, r3
 801910c:	2b00      	cmp	r3, #0
 801910e:	d002      	beq.n	8019116 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 8019110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019114:	e02f      	b.n	8019176 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8019116:	693b      	ldr	r3, [r7, #16]
 8019118:	2b00      	cmp	r3, #0
 801911a:	da02      	bge.n	8019122 <skip_chunk+0xc2>
 801911c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019120:	e029      	b.n	8019176 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8019122:	68ba      	ldr	r2, [r7, #8]
 8019124:	69fb      	ldr	r3, [r7, #28]
 8019126:	1ad3      	subs	r3, r2, r3
 8019128:	1eda      	subs	r2, r3, #3
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	429a      	cmp	r2, r3
 801912e:	dc01      	bgt.n	8019134 <skip_chunk+0xd4>
 8019130:	2300      	movs	r3, #0
 8019132:	e020      	b.n	8019176 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8019134:	693a      	ldr	r2, [r7, #16]
 8019136:	69fb      	ldr	r3, [r7, #28]
 8019138:	4413      	add	r3, r2
 801913a:	3302      	adds	r3, #2
 801913c:	68fa      	ldr	r2, [r7, #12]
 801913e:	4413      	add	r3, r2
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	2b0d      	cmp	r3, #13
 8019144:	d108      	bne.n	8019158 <skip_chunk+0xf8>
 8019146:	693a      	ldr	r2, [r7, #16]
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	4413      	add	r3, r2
 801914c:	3303      	adds	r3, #3
 801914e:	68fa      	ldr	r2, [r7, #12]
 8019150:	4413      	add	r3, r2
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	2b0a      	cmp	r3, #10
 8019156:	d002      	beq.n	801915e <skip_chunk+0xfe>
 8019158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801915c:	e00b      	b.n	8019176 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 801915e:	69fb      	ldr	r3, [r7, #28]
 8019160:	1c9a      	adds	r2, r3, #2
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	601a      	str	r2, [r3, #0]
 8019166:	693a      	ldr	r2, [r7, #16]
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 801916c:	69fb      	ldr	r3, [r7, #28]
 801916e:	1c9a      	adds	r2, r3, #2
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	4413      	add	r3, r2
 8019174:	3302      	adds	r3, #2
}
 8019176:	4618      	mov	r0, r3
 8019178:	3720      	adds	r7, #32
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}
	...

08019180 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8019180:	b580      	push	{r7, lr}
 8019182:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8019186:	af00      	add	r7, sp, #0
 8019188:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801918c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019190:	6018      	str	r0, [r3, #0]
 8019192:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019196:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 801919a:	6019      	str	r1, [r3, #0]
 801919c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191a0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80191a4:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 80191a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191aa:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2b07      	cmp	r3, #7
 80191b2:	d031      	beq.n	8019218 <http_cb+0x98>
 80191b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191b8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	2b09      	cmp	r3, #9
 80191c0:	d02a      	beq.n	8019218 <http_cb+0x98>
 80191c2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191c6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2b02      	cmp	r3, #2
 80191ce:	f040 831a 	bne.w	8019806 <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80191d2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191d6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80191e0:	f003 0304 	and.w	r3, r3, #4
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	f000 830d 	beq.w	8019806 <http_cb+0x686>
 80191ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80191f0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80191fa:	f003 0310 	and.w	r3, r3, #16
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	2b00      	cmp	r3, #0
 8019202:	f040 8300 	bne.w	8019806 <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 8019206:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801920a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8019212:	2b00      	cmp	r3, #0
 8019214:	f000 82f7 	beq.w	8019806 <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8019218:	2300      	movs	r3, #0
 801921a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 801921e:	e2c5      	b.n	80197ac <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 8019220:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019224:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801922c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019230:	4413      	add	r3, r2
 8019232:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8019236:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801923a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019242:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019246:	1ad3      	subs	r3, r2, r3
 8019248:	f107 0214 	add.w	r2, r7, #20
 801924c:	4619      	mov	r1, r3
 801924e:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8019252:	f7fd fcf5 	bl	8016c40 <mg_http_parse>
 8019256:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 801925a:	2300      	movs	r3, #0
 801925c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8019260:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019264:	2b00      	cmp	r3, #0
 8019266:	da38      	bge.n	80192da <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8019268:	4bc8      	ldr	r3, [pc, #800]	@ (801958c <http_cb+0x40c>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	2b00      	cmp	r3, #0
 801926e:	dd10      	ble.n	8019292 <http_cb+0x112>
 8019270:	4bc7      	ldr	r3, [pc, #796]	@ (8019590 <http_cb+0x410>)
 8019272:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8019276:	49c7      	ldr	r1, [pc, #796]	@ (8019594 <http_cb+0x414>)
 8019278:	2001      	movs	r0, #1
 801927a:	f001 faf3 	bl	801a864 <mg_log_prefix>
 801927e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019282:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801928a:	4619      	mov	r1, r3
 801928c:	48c2      	ldr	r0, [pc, #776]	@ (8019598 <http_cb+0x418>)
 801928e:	f001 fb39 	bl	801a904 <mg_log>
        c->is_draining = 1;
 8019292:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019296:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801929a:	681a      	ldr	r2, [r3, #0]
 801929c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80192a0:	f043 0310 	orr.w	r3, r3, #16
 80192a4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80192a8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80192ac:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80192b4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80192b8:	1ad3      	subs	r3, r2, r3
 80192ba:	2b10      	cmp	r3, #16
 80192bc:	bf28      	it	cs
 80192be:	2310      	movcs	r3, #16
 80192c0:	4619      	mov	r1, r3
 80192c2:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80192c6:	f001 fb53 	bl	801a970 <mg_hexdump>
        c->recv.len = 0;
 80192ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80192ce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2200      	movs	r2, #0
 80192d6:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80192d8:	e295      	b.n	8019806 <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80192da:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80192de:	2b00      	cmp	r3, #0
 80192e0:	f000 827c 	beq.w	80197dc <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80192e4:	f107 0214 	add.w	r2, r7, #20
 80192e8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80192ec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80192f0:	210a      	movs	r1, #10
 80192f2:	6818      	ldr	r0, [r3, #0]
 80192f4:	f7fb fed2 	bl	801509c <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 80192f8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80192fc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	2b09      	cmp	r3, #9
 8019304:	d128      	bne.n	8019358 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8019306:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801930a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019312:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019316:	1ad2      	subs	r2, r2, r3
 8019318:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801931c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019320:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8019324:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019328:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801932c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019330:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019334:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019338:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 801933c:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019340:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019344:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8019348:	1a8a      	subs	r2, r1, r2
 801934a:	1a9a      	subs	r2, r3, r2
 801934c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019350:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8019358:	f107 0314 	add.w	r3, r7, #20
 801935c:	498f      	ldr	r1, [pc, #572]	@ (801959c <http_cb+0x41c>)
 801935e:	4618      	mov	r0, r3
 8019360:	f7fd fab2 	bl	80168c8 <mg_http_get_header>
 8019364:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8019368:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801936c:	2b00      	cmp	r3, #0
 801936e:	d01d      	beq.n	80193ac <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8019370:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8019374:	498a      	ldr	r1, [pc, #552]	@ (80195a0 <http_cb+0x420>)
 8019376:	4618      	mov	r0, r3
 8019378:	f007 fcf0 	bl	8020d5c <mg_str_s>
 801937c:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8019380:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8019384:	cb0c      	ldmia	r3, {r2, r3}
 8019386:	c903      	ldmia	r1, {r0, r1}
 8019388:	f007 fd74 	bl	8020e74 <mg_strcasecmp>
 801938c:	4603      	mov	r3, r0
 801938e:	2b00      	cmp	r3, #0
 8019390:	d103      	bne.n	801939a <http_cb+0x21a>
          is_chunked = true;
 8019392:	2301      	movs	r3, #1
 8019394:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8019398:	e09f      	b.n	80194da <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 801939a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801939e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80193a2:	4980      	ldr	r1, [pc, #512]	@ (80195a4 <http_cb+0x424>)
 80193a4:	6818      	ldr	r0, [r3, #0]
 80193a6:	f7fb fe99 	bl	80150dc <mg_error>
          return;
 80193aa:	e22c      	b.n	8019806 <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80193ac:	f107 0314 	add.w	r3, r7, #20
 80193b0:	497d      	ldr	r1, [pc, #500]	@ (80195a8 <http_cb+0x428>)
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7fd fa88 	bl	80168c8 <mg_http_get_header>
 80193b8:	4603      	mov	r3, r0
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	f040 808d 	bne.w	80194da <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80193c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80193c4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2205      	movs	r2, #5
 80193cc:	4977      	ldr	r1, [pc, #476]	@ (80195ac <http_cb+0x42c>)
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7fc ffec 	bl	80163ac <mg_ncasecmp>
 80193d4:	4603      	mov	r3, r0
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	bf0c      	ite	eq
 80193da:	2301      	moveq	r3, #1
 80193dc:	2300      	movne	r3, #0
 80193de:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 80193e2:	2300      	movs	r3, #0
 80193e4:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80193e8:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80193ec:	f083 0301 	eor.w	r3, r3, #1
 80193f0:	b2db      	uxtb	r3, r3
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d030      	beq.n	8019458 <http_cb+0x2d8>
 80193f6:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80193fa:	496d      	ldr	r1, [pc, #436]	@ (80195b0 <http_cb+0x430>)
 80193fc:	4618      	mov	r0, r3
 80193fe:	f007 fcad 	bl	8020d5c <mg_str_s>
 8019402:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019406:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 801940a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801940e:	cb0c      	ldmia	r3, {r2, r3}
 8019410:	c903      	ldmia	r1, {r0, r1}
 8019412:	f007 fd2f 	bl	8020e74 <mg_strcasecmp>
 8019416:	4603      	mov	r3, r0
 8019418:	2b00      	cmp	r3, #0
 801941a:	d012      	beq.n	8019442 <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 801941c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019420:	4964      	ldr	r1, [pc, #400]	@ (80195b4 <http_cb+0x434>)
 8019422:	4618      	mov	r0, r3
 8019424:	f007 fc9a 	bl	8020d5c <mg_str_s>
 8019428:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801942c:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8019430:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019434:	cb0c      	ldmia	r3, {r2, r3}
 8019436:	c903      	ldmia	r1, {r0, r1}
 8019438:	f007 fd1c 	bl	8020e74 <mg_strcasecmp>
 801943c:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 801943e:	2b00      	cmp	r3, #0
 8019440:	d10a      	bne.n	8019458 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8019442:	2301      	movs	r3, #1
 8019444:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8019448:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801944c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019450:	4413      	add	r3, r2
 8019452:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019456:	e022      	b.n	801949e <http_cb+0x31e>
        } else if (is_response) {
 8019458:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 801945c:	2b00      	cmp	r3, #0
 801945e:	d01e      	beq.n	801949e <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8019460:	f107 0314 	add.w	r3, r7, #20
 8019464:	4618      	mov	r0, r3
 8019466:	f7ff fdcb 	bl	8019000 <mg_http_status>
 801946a:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 801946e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019472:	2bc7      	cmp	r3, #199	@ 0xc7
 8019474:	dd0a      	ble.n	801948c <http_cb+0x30c>
 8019476:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801947a:	2bcc      	cmp	r3, #204	@ 0xcc
 801947c:	d006      	beq.n	801948c <http_cb+0x30c>
 801947e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019482:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8019486:	d001      	beq.n	801948c <http_cb+0x30c>
 8019488:	2301      	movs	r3, #1
 801948a:	e000      	b.n	801948e <http_cb+0x30e>
 801948c:	2300      	movs	r3, #0
 801948e:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8019492:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019496:	f003 0301 	and.w	r3, r3, #1
 801949a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 801949e:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d019      	beq.n	80194da <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 80194a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80194aa:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 80194ae:	4b42      	ldr	r3, [pc, #264]	@ (80195b8 <http_cb+0x438>)
 80194b0:	4a41      	ldr	r2, [pc, #260]	@ (80195b8 <http_cb+0x438>)
 80194b2:	f240 119b 	movw	r1, #411	@ 0x19b
 80194b6:	6800      	ldr	r0, [r0, #0]
 80194b8:	f7fe fa2c 	bl	8017914 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 80194bc:	4b33      	ldr	r3, [pc, #204]	@ (801958c <http_cb+0x40c>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	dd0a      	ble.n	80194da <http_cb+0x35a>
 80194c4:	4b32      	ldr	r3, [pc, #200]	@ (8019590 <http_cb+0x410>)
 80194c6:	f640 42ca 	movw	r2, #3274	@ 0xcca
 80194ca:	4932      	ldr	r1, [pc, #200]	@ (8019594 <http_cb+0x414>)
 80194cc:	2001      	movs	r0, #1
 80194ce:	f001 f9c9 	bl	801a864 <mg_log_prefix>
 80194d2:	493a      	ldr	r1, [pc, #232]	@ (80195bc <http_cb+0x43c>)
 80194d4:	483a      	ldr	r0, [pc, #232]	@ (80195c0 <http_cb+0x440>)
 80194d6:	f001 fa15 	bl	801a904 <mg_log>
        }
      }

      if (is_chunked) {
 80194da:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 80194de:	2b00      	cmp	r3, #0
 80194e0:	f000 80e8 	beq.w	80196b4 <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 80194e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80194e8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80194f0:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 80194f4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80194f8:	440b      	add	r3, r1
 80194fa:	4413      	add	r3, r2
 80194fc:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8019500:	2300      	movs	r3, #0
 8019502:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019506:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801950a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019512:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019516:	1ad2      	subs	r2, r2, r3
 8019518:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801951c:	1ad3      	subs	r3, r2, r3
 801951e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8019522:	e006      	b.n	8019532 <http_cb+0x3b2>
 8019524:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019528:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801952c:	4413      	add	r3, r2
 801952e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019532:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019536:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801953a:	18d0      	adds	r0, r2, r3
 801953c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019540:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019544:	1ad1      	subs	r1, r2, r3
 8019546:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 801954a:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 801954e:	f7ff fd87 	bl	8019060 <skip_chunk>
 8019552:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019556:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801955a:	2b00      	cmp	r3, #0
 801955c:	dd03      	ble.n	8019566 <http_cb+0x3e6>
 801955e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019562:	2b00      	cmp	r3, #0
 8019564:	d1de      	bne.n	8019524 <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019566:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801956a:	2b00      	cmp	r3, #0
 801956c:	f000 8138 	beq.w	80197e0 <http_cb+0x660>
        if (cl < 0) {
 8019570:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019574:	2b00      	cmp	r3, #0
 8019576:	da27      	bge.n	80195c8 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8019578:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801957c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019580:	4910      	ldr	r1, [pc, #64]	@ (80195c4 <http_cb+0x444>)
 8019582:	6818      	ldr	r0, [r3, #0]
 8019584:	f7fb fdaa 	bl	80150dc <mg_error>
          break;
 8019588:	e12d      	b.n	80197e6 <http_cb+0x666>
 801958a:	bf00      	nop
 801958c:	20000294 	.word	0x20000294
 8019590:	08029678 	.word	0x08029678
 8019594:	08026838 	.word	0x08026838
 8019598:	08027b90 	.word	0x08027b90
 801959c:	08027ba8 	.word	0x08027ba8
 80195a0:	08027bbc 	.word	0x08027bbc
 80195a4:	08027bc4 	.word	0x08027bc4
 80195a8:	08027be0 	.word	0x08027be0
 80195ac:	08026a44 	.word	0x08026a44
 80195b0:	08026a50 	.word	0x08026a50
 80195b4:	08026a4c 	.word	0x08026a4c
 80195b8:	08026f18 	.word	0x08026f18
 80195bc:	08027bf0 	.word	0x08027bf0
 80195c0:	080269a4 	.word	0x080269a4
 80195c4:	08027c14 	.word	0x08027c14
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80195c8:	2300      	movs	r3, #0
 80195ca:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80195ce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80195d2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80195d6:	2200      	movs	r2, #0
 80195d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80195dc:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 80195e0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80195e4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80195e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 80195ec:	e03e      	b.n	801966c <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 80195ee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80195f2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80195f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80195fa:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80195fe:	18d0      	adds	r0, r2, r3
 8019600:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019604:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8019608:	4413      	add	r3, r2
 801960a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801960e:	4413      	add	r3, r2
 8019610:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019614:	4619      	mov	r1, r3
 8019616:	f009 fc05 	bl	8022e24 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 801961a:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 801961e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019622:	4413      	add	r3, r2
 8019624:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019628:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801962c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019630:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019634:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019638:	441a      	add	r2, r3
 801963a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801963e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019642:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019646:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801964a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801964e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019652:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019656:	441a      	add	r2, r3
 8019658:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801965c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019660:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8019664:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019668:	2b00      	cmp	r3, #0
 801966a:	d016      	beq.n	801969a <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 801966c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019670:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019674:	18d0      	adds	r0, r2, r3
 8019676:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801967a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 801967e:	1ad1      	subs	r1, r2, r3
 8019680:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019684:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019688:	f7ff fcea 	bl	8019060 <skip_chunk>
 801968c:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019690:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019694:	2b00      	cmp	r3, #0
 8019696:	dcaa      	bgt.n	80195ee <http_cb+0x46e>
 8019698:	e000      	b.n	801969c <http_cb+0x51c>
          if (dl == 0) break;
 801969a:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 801969c:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 80196a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80196a4:	4413      	add	r3, r2
 80196a6:	461a      	mov	r2, r3
 80196a8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80196ac:	4413      	add	r3, r2
 80196ae:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80196b2:	e025      	b.n	8019700 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 80196b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80196b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80196c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80196c4:	1ad2      	subs	r2, r2, r3
 80196c6:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80196ca:	1ad3      	subs	r3, r2, r3
 80196cc:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 80196d0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80196d4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80196d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80196dc:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d37f      	bcc.n	80197e4 <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 80196e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80196e8:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80196ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80196f0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80196f4:	4413      	add	r3, r2
 80196f6:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80196fa:	4413      	add	r3, r2
 80196fc:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8019700:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019704:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801970e:	f003 0304 	and.w	r3, r3, #4
 8019712:	b2db      	uxtb	r3, r3
 8019714:	2b00      	cmp	r3, #0
 8019716:	d00a      	beq.n	801972e <http_cb+0x5ae>
 8019718:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801971c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019720:	681a      	ldr	r2, [r3, #0]
 8019722:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801972a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 801972e:	f107 0214 	add.w	r2, r7, #20
 8019732:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019736:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801973a:	210b      	movs	r1, #11
 801973c:	6818      	ldr	r0, [r3, #0]
 801973e:	f7fb fcad 	bl	801509c <mg_call>
      if (c->is_accepted) {
 8019742:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019746:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019750:	f003 0304 	and.w	r3, r3, #4
 8019754:	b2db      	uxtb	r3, r3
 8019756:	2b00      	cmp	r3, #0
 8019758:	d028      	beq.n	80197ac <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 801975a:	f107 0314 	add.w	r3, r7, #20
 801975e:	492c      	ldr	r1, [pc, #176]	@ (8019810 <http_cb+0x690>)
 8019760:	4618      	mov	r0, r3
 8019762:	f7fd f8b1 	bl	80168c8 <mg_http_get_header>
 8019766:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 801976a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801976e:	2b00      	cmp	r3, #0
 8019770:	d01c      	beq.n	80197ac <http_cb+0x62c>
 8019772:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019776:	4927      	ldr	r1, [pc, #156]	@ (8019814 <http_cb+0x694>)
 8019778:	4618      	mov	r0, r3
 801977a:	f007 faef 	bl	8020d5c <mg_str_s>
 801977e:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8019782:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019786:	cb0c      	ldmia	r3, {r2, r3}
 8019788:	c903      	ldmia	r1, {r0, r1}
 801978a:	f007 fb73 	bl	8020e74 <mg_strcasecmp>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10b      	bne.n	80197ac <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 8019794:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019798:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801979c:	681a      	ldr	r2, [r3, #0]
 801979e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80197a2:	f043 0310 	orr.w	r3, r3, #16
 80197a6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 80197aa:	e01c      	b.n	80197e6 <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80197ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197b0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80197ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d110      	bne.n	80197e6 <http_cb+0x666>
 80197c4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197c8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197d0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80197d4:	429a      	cmp	r2, r3
 80197d6:	f4ff ad23 	bcc.w	8019220 <http_cb+0xa0>
 80197da:	e004      	b.n	80197e6 <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 80197dc:	bf00      	nop
 80197de:	e002      	b.n	80197e6 <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80197e0:	bf00      	nop
 80197e2:	e000      	b.n	80197e6 <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 80197e4:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80197e6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d00b      	beq.n	8019806 <http_cb+0x686>
 80197ee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197f2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	3338      	adds	r3, #56	@ 0x38
 80197fa:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80197fe:	2100      	movs	r1, #0
 8019800:	4618      	mov	r0, r3
 8019802:	f000 f91d 	bl	8019a40 <mg_iobuf_del>
  }
  (void) ev_data;
}
 8019806:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
 801980e:	bf00      	nop
 8019810:	08027c24 	.word	0x08027c24
 8019814:	08027c30 	.word	0x08027c30

08019818 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8019818:	b580      	push	{r7, lr}
 801981a:	b086      	sub	sp, #24
 801981c:	af00      	add	r7, sp, #0
 801981e:	60f8      	str	r0, [r7, #12]
 8019820:	60b9      	str	r1, [r7, #8]
 8019822:	607a      	str	r2, [r7, #4]
 8019824:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8019826:	683b      	ldr	r3, [r7, #0]
 8019828:	687a      	ldr	r2, [r7, #4]
 801982a:	68b9      	ldr	r1, [r7, #8]
 801982c:	68f8      	ldr	r0, [r7, #12]
 801982e:	f003 fd11 	bl	801d254 <mg_listen>
 8019832:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8019834:	697b      	ldr	r3, [r7, #20]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d003      	beq.n	8019842 <mg_http_listen+0x2a>
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	4a03      	ldr	r2, [pc, #12]	@ (801984c <mg_http_listen+0x34>)
 801983e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8019842:	697b      	ldr	r3, [r7, #20]
}
 8019844:	4618      	mov	r0, r3
 8019846:	3718      	adds	r7, #24
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}
 801984c:	08019181 	.word	0x08019181

08019850 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8019850:	b480      	push	{r7}
 8019852:	b083      	sub	sp, #12
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d00a      	beq.n	8019876 <roundup+0x26>
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	4413      	add	r3, r2
 8019866:	1e5a      	subs	r2, r3, #1
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	fbb2 f3f3 	udiv	r3, r2, r3
 801986e:	683a      	ldr	r2, [r7, #0]
 8019870:	fb02 f303 	mul.w	r3, r2, r3
 8019874:	e000      	b.n	8019878 <roundup+0x28>
 8019876:	687b      	ldr	r3, [r7, #4]
}
 8019878:	4618      	mov	r0, r3
 801987a:	370c      	adds	r7, #12
 801987c:	46bd      	mov	sp, r7
 801987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019882:	4770      	bx	lr

08019884 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8019884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019888:	b088      	sub	sp, #32
 801988a:	af02      	add	r7, sp, #8
 801988c:	6078      	str	r0, [r7, #4]
 801988e:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8019890:	2301      	movs	r3, #1
 8019892:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	68db      	ldr	r3, [r3, #12]
 8019898:	4619      	mov	r1, r3
 801989a:	6838      	ldr	r0, [r7, #0]
 801989c:	f7ff ffd8 	bl	8019850 <roundup>
 80198a0:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d117      	bne.n	80198d8 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681a      	ldr	r2, [r3, #0]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	685b      	ldr	r3, [r3, #4]
 80198b0:	4619      	mov	r1, r3
 80198b2:	4610      	mov	r0, r2
 80198b4:	f008 f95c 	bl	8021b70 <mg_bzero>
    free(io->buf);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	4618      	mov	r0, r3
 80198be:	f7f2 fa9b 	bl	800bdf8 <vPortFree>
    io->buf = NULL;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	2200      	movs	r2, #0
 80198c6:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2200      	movs	r2, #0
 80198cc:	605a      	str	r2, [r3, #4]
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	685a      	ldr	r2, [r3, #4]
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	609a      	str	r2, [r3, #8]
 80198d6:	e052      	b.n	801997e <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	683a      	ldr	r2, [r7, #0]
 80198de:	429a      	cmp	r2, r3
 80198e0:	d04d      	beq.n	801997e <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80198e2:	6839      	ldr	r1, [r7, #0]
 80198e4:	2001      	movs	r0, #1
 80198e6:	f7fa fdf9 	bl	80144dc <mg_calloc>
 80198ea:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 80198ec:	693b      	ldr	r3, [r7, #16]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d028      	beq.n	8019944 <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	689b      	ldr	r3, [r3, #8]
 80198f6:	683a      	ldr	r2, [r7, #0]
 80198f8:	4293      	cmp	r3, r2
 80198fa:	bf28      	it	cs
 80198fc:	4613      	movcs	r3, r2
 80198fe:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d00a      	beq.n	801991c <mg_iobuf_resize+0x98>
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d006      	beq.n	801991c <mg_iobuf_resize+0x98>
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	68fa      	ldr	r2, [r7, #12]
 8019914:	4619      	mov	r1, r3
 8019916:	6938      	ldr	r0, [r7, #16]
 8019918:	f009 fa84 	bl	8022e24 <memmove>
      mg_bzero(io->buf, io->size);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	681a      	ldr	r2, [r3, #0]
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	4619      	mov	r1, r3
 8019926:	4610      	mov	r0, r2
 8019928:	f008 f922 	bl	8021b70 <mg_bzero>
      free(io->buf);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	4618      	mov	r0, r3
 8019932:	f7f2 fa61 	bl	800bdf8 <vPortFree>
      io->buf = (unsigned char *) p;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	693a      	ldr	r2, [r7, #16]
 801993a:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	683a      	ldr	r2, [r7, #0]
 8019940:	605a      	str	r2, [r3, #4]
 8019942:	e01c      	b.n	801997e <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8019944:	2300      	movs	r3, #0
 8019946:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8019948:	4b10      	ldr	r3, [pc, #64]	@ (801998c <mg_iobuf_resize+0x108>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	dd16      	ble.n	801997e <mg_iobuf_resize+0xfa>
 8019950:	4b0f      	ldr	r3, [pc, #60]	@ (8019990 <mg_iobuf_resize+0x10c>)
 8019952:	f640 5244 	movw	r2, #3396	@ 0xd44
 8019956:	490f      	ldr	r1, [pc, #60]	@ (8019994 <mg_iobuf_resize+0x110>)
 8019958:	2001      	movs	r0, #1
 801995a:	f000 ff83 	bl	801a864 <mg_log_prefix>
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	685b      	ldr	r3, [r3, #4]
 8019962:	2200      	movs	r2, #0
 8019964:	4698      	mov	r8, r3
 8019966:	4691      	mov	r9, r2
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	2200      	movs	r2, #0
 801996c:	461c      	mov	r4, r3
 801996e:	4615      	mov	r5, r2
 8019970:	e9cd 4500 	strd	r4, r5, [sp]
 8019974:	4642      	mov	r2, r8
 8019976:	464b      	mov	r3, r9
 8019978:	4807      	ldr	r0, [pc, #28]	@ (8019998 <mg_iobuf_resize+0x114>)
 801997a:	f000 ffc3 	bl	801a904 <mg_log>
    }
  }
  return ok;
 801997e:	697b      	ldr	r3, [r7, #20]
}
 8019980:	4618      	mov	r0, r3
 8019982:	3718      	adds	r7, #24
 8019984:	46bd      	mov	sp, r7
 8019986:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801998a:	bf00      	nop
 801998c:	20000294 	.word	0x20000294
 8019990:	08029680 	.word	0x08029680
 8019994:	08026838 	.word	0x08026838
 8019998:	08027c70 	.word	0x08027c70

0801999c <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 801999c:	b580      	push	{r7, lr}
 801999e:	b086      	sub	sp, #24
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	60f8      	str	r0, [r7, #12]
 80199a4:	60b9      	str	r1, [r7, #8]
 80199a6:	607a      	str	r2, [r7, #4]
 80199a8:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	689a      	ldr	r2, [r3, #8]
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	441a      	add	r2, r3
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	4619      	mov	r1, r3
 80199b8:	4610      	mov	r0, r2
 80199ba:	f7ff ff49 	bl	8019850 <roundup>
 80199be:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80199c0:	6979      	ldr	r1, [r7, #20]
 80199c2:	68f8      	ldr	r0, [r7, #12]
 80199c4:	f7ff ff5e 	bl	8019884 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	685b      	ldr	r3, [r3, #4]
 80199cc:	697a      	ldr	r2, [r7, #20]
 80199ce:	429a      	cmp	r2, r3
 80199d0:	d001      	beq.n	80199d6 <mg_iobuf_add+0x3a>
 80199d2:	2300      	movs	r3, #0
 80199d4:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	689b      	ldr	r3, [r3, #8]
 80199da:	68ba      	ldr	r2, [r7, #8]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d210      	bcs.n	8019a02 <mg_iobuf_add+0x66>
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	68b9      	ldr	r1, [r7, #8]
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	440b      	add	r3, r1
 80199ea:	18d0      	adds	r0, r2, r3
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	18d1      	adds	r1, r2, r3
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	689a      	ldr	r2, [r3, #8]
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	1ad3      	subs	r3, r2, r3
 80199fc:	461a      	mov	r2, r3
 80199fe:	f009 fa11 	bl	8022e24 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d008      	beq.n	8019a1a <mg_iobuf_add+0x7e>
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	681a      	ldr	r2, [r3, #0]
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	4413      	add	r3, r2
 8019a10:	683a      	ldr	r2, [r7, #0]
 8019a12:	6879      	ldr	r1, [r7, #4]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f009 fa05 	bl	8022e24 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	689b      	ldr	r3, [r3, #8]
 8019a1e:	68ba      	ldr	r2, [r7, #8]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d902      	bls.n	8019a2a <mg_iobuf_add+0x8e>
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	68ba      	ldr	r2, [r7, #8]
 8019a28:	609a      	str	r2, [r3, #8]
  io->len += len;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	689a      	ldr	r2, [r3, #8]
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	441a      	add	r2, r3
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	609a      	str	r2, [r3, #8]
  return len;
 8019a36:	683b      	ldr	r3, [r7, #0]
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3718      	adds	r7, #24
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	689b      	ldr	r3, [r3, #8]
 8019a50:	68ba      	ldr	r2, [r7, #8]
 8019a52:	429a      	cmp	r2, r3
 8019a54:	d902      	bls.n	8019a5c <mg_iobuf_del+0x1c>
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	689b      	ldr	r3, [r3, #8]
 8019a5a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8019a5c:	68ba      	ldr	r2, [r7, #8]
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	441a      	add	r2, r3
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	689b      	ldr	r3, [r3, #8]
 8019a66:	429a      	cmp	r2, r3
 8019a68:	d904      	bls.n	8019a74 <mg_iobuf_del+0x34>
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	689a      	ldr	r2, [r3, #8]
 8019a6e:	68bb      	ldr	r3, [r7, #8]
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d012      	beq.n	8019aa2 <mg_iobuf_del+0x62>
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	18d0      	adds	r0, r2, r3
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	68b9      	ldr	r1, [r7, #8]
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	440b      	add	r3, r1
 8019a8e:	18d1      	adds	r1, r2, r3
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	689a      	ldr	r2, [r3, #8]
 8019a94:	68bb      	ldr	r3, [r7, #8]
 8019a96:	1ad2      	subs	r2, r2, r3
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	1ad3      	subs	r3, r2, r3
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	f009 f9c1 	bl	8022e24 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00a      	beq.n	8019ac0 <mg_iobuf_del+0x80>
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	681a      	ldr	r2, [r3, #0]
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	6899      	ldr	r1, [r3, #8]
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	1acb      	subs	r3, r1, r3
 8019ab6:	4413      	add	r3, r2
 8019ab8:	6879      	ldr	r1, [r7, #4]
 8019aba:	4618      	mov	r0, r3
 8019abc:	f008 f858 	bl	8021b70 <mg_bzero>
  io->len -= len;
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	689a      	ldr	r2, [r3, #8]
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	1ad2      	subs	r2, r2, r3
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	609a      	str	r2, [r3, #8]
  return len;
 8019acc:	687b      	ldr	r3, [r7, #4]
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3710      	adds	r7, #16
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}

08019ad6 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8019ad6:	b580      	push	{r7, lr}
 8019ad8:	b082      	sub	sp, #8
 8019ada:	af00      	add	r7, sp, #0
 8019adc:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8019ade:	2100      	movs	r1, #0
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7ff fecf 	bl	8019884 <mg_iobuf_resize>
}
 8019ae6:	bf00      	nop
 8019ae8:	3708      	adds	r7, #8
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}
	...

08019af0 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8019af0:	b480      	push	{r7}
 8019af2:	b083      	sub	sp, #12
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d001      	beq.n	8019b02 <escapeseq+0x12>
 8019afe:	4b04      	ldr	r3, [pc, #16]	@ (8019b10 <escapeseq+0x20>)
 8019b00:	e000      	b.n	8019b04 <escapeseq+0x14>
 8019b02:	4b04      	ldr	r3, [pc, #16]	@ (8019b14 <escapeseq+0x24>)
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	370c      	adds	r7, #12
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b0e:	4770      	bx	lr
 8019b10:	08027c7c 	.word	0x08027c7c
 8019b14:	08027c84 	.word	0x08027c84

08019b18 <json_esc>:

static char json_esc(int c, int esc) {
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b086      	sub	sp, #24
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]
 8019b20:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8019b22:	6838      	ldr	r0, [r7, #0]
 8019b24:	f7ff ffe4 	bl	8019af0 <escapeseq>
 8019b28:	6138      	str	r0, [r7, #16]
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	bf0c      	ite	eq
 8019b30:	2301      	moveq	r3, #1
 8019b32:	2300      	movne	r3, #0
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7ff ffda 	bl	8019af0 <escapeseq>
 8019b3c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8019b3e:	693b      	ldr	r3, [r7, #16]
 8019b40:	617b      	str	r3, [r7, #20]
 8019b42:	e010      	b.n	8019b66 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	781b      	ldrb	r3, [r3, #0]
 8019b48:	461a      	mov	r2, r3
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	d107      	bne.n	8019b60 <json_esc+0x48>
 8019b50:	697a      	ldr	r2, [r7, #20]
 8019b52:	693b      	ldr	r3, [r7, #16]
 8019b54:	1ad3      	subs	r3, r2, r3
 8019b56:	461a      	mov	r2, r3
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	4413      	add	r3, r2
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	e007      	b.n	8019b70 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	3301      	adds	r3, #1
 8019b64:	617b      	str	r3, [r7, #20]
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d1ea      	bne.n	8019b44 <json_esc+0x2c>
  }
  return 0;
 8019b6e:	2300      	movs	r3, #0
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	3718      	adds	r7, #24
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}

08019b78 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b084      	sub	sp, #16
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
 8019b80:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8019b82:	2300      	movs	r3, #0
 8019b84:	60fb      	str	r3, [r7, #12]
 8019b86:	e02e      	b.n	8019be6 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	687a      	ldr	r2, [r7, #4]
 8019b8c:	4413      	add	r3, r2
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8019b92:	d114      	bne.n	8019bbe <mg_pass_string+0x46>
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	3301      	adds	r3, #1
 8019b98:	683a      	ldr	r2, [r7, #0]
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	dd0f      	ble.n	8019bbe <mg_pass_string+0x46>
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	687a      	ldr	r2, [r7, #4]
 8019ba4:	4413      	add	r3, r2
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	2101      	movs	r1, #1
 8019baa:	4618      	mov	r0, r3
 8019bac:	f7ff ffb4 	bl	8019b18 <json_esc>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d003      	beq.n	8019bbe <mg_pass_string+0x46>
      i++;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	3301      	adds	r3, #1
 8019bba:	60fb      	str	r3, [r7, #12]
 8019bbc:	e010      	b.n	8019be0 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	687a      	ldr	r2, [r7, #4]
 8019bc2:	4413      	add	r3, r2
 8019bc4:	781b      	ldrb	r3, [r3, #0]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d102      	bne.n	8019bd0 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8019bca:	f06f 0301 	mvn.w	r3, #1
 8019bce:	e010      	b.n	8019bf2 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	687a      	ldr	r2, [r7, #4]
 8019bd4:	4413      	add	r3, r2
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	2b22      	cmp	r3, #34	@ 0x22
 8019bda:	d101      	bne.n	8019be0 <mg_pass_string+0x68>
      return i;
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	e008      	b.n	8019bf2 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	3301      	adds	r3, #1
 8019be4:	60fb      	str	r3, [r7, #12]
 8019be6:	68fa      	ldr	r2, [r7, #12]
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	dbcc      	blt.n	8019b88 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8019bee:	f06f 0301 	mvn.w	r3, #1
}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	3710      	adds	r7, #16
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}
 8019bfa:	0000      	movs	r0, r0
 8019bfc:	0000      	movs	r0, r0
	...

08019c00 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b090      	sub	sp, #64	@ 0x40
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	60f8      	str	r0, [r7, #12]
 8019c08:	60b9      	str	r1, [r7, #8]
 8019c0a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8019c0c:	f04f 0200 	mov.w	r2, #0
 8019c10:	f04f 0300 	mov.w	r3, #0
 8019c14:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8019c20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	429a      	cmp	r2, r3
 8019c26:	da0a      	bge.n	8019c3e <mg_atod+0x3e>
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	781b      	ldrb	r3, [r3, #0]
 8019c2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8019c2e:	d106      	bne.n	8019c3e <mg_atod+0x3e>
    sign = -1, i++;
 8019c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c38:	3301      	adds	r3, #1
 8019c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c3c:	e00a      	b.n	8019c54 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8019c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	429a      	cmp	r2, r3
 8019c44:	da27      	bge.n	8019c96 <mg_atod+0x96>
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	781b      	ldrb	r3, [r3, #0]
 8019c4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8019c4c:	d123      	bne.n	8019c96 <mg_atod+0x96>
    i++;
 8019c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c50:	3301      	adds	r3, #1
 8019c52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8019c54:	e01f      	b.n	8019c96 <mg_atod+0x96>
    d *= 10.0;
 8019c56:	f04f 0200 	mov.w	r2, #0
 8019c5a:	4b9d      	ldr	r3, [pc, #628]	@ (8019ed0 <mg_atod+0x2d0>)
 8019c5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019c60:	f7e6 fcdc 	bl	800061c <__aeabi_dmul>
 8019c64:	4602      	mov	r2, r0
 8019c66:	460b      	mov	r3, r1
 8019c68:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 8019c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c6e:	68fa      	ldr	r2, [r7, #12]
 8019c70:	4413      	add	r3, r2
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	3b30      	subs	r3, #48	@ 0x30
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7e6 fc66 	bl	8000548 <__aeabi_i2d>
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	460b      	mov	r3, r1
 8019c80:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019c84:	f7e6 fb14 	bl	80002b0 <__adddf3>
 8019c88:	4602      	mov	r2, r0
 8019c8a:	460b      	mov	r3, r1
 8019c8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8019c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c92:	3301      	adds	r3, #1
 8019c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	da0b      	bge.n	8019cb6 <mg_atod+0xb6>
 8019c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ca0:	68fa      	ldr	r2, [r7, #12]
 8019ca2:	4413      	add	r3, r2
 8019ca4:	781b      	ldrb	r3, [r3, #0]
 8019ca6:	2b2f      	cmp	r3, #47	@ 0x2f
 8019ca8:	d905      	bls.n	8019cb6 <mg_atod+0xb6>
 8019caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cac:	68fa      	ldr	r2, [r7, #12]
 8019cae:	4413      	add	r3, r2
 8019cb0:	781b      	ldrb	r3, [r3, #0]
 8019cb2:	2b39      	cmp	r3, #57	@ 0x39
 8019cb4:	d9cf      	bls.n	8019c56 <mg_atod+0x56>
  }
  d *= sign;
 8019cb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019cb8:	f7e6 fc46 	bl	8000548 <__aeabi_i2d>
 8019cbc:	4602      	mov	r2, r0
 8019cbe:	460b      	mov	r3, r1
 8019cc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019cc4:	f7e6 fcaa 	bl	800061c <__aeabi_dmul>
 8019cc8:	4602      	mov	r2, r0
 8019cca:	460b      	mov	r3, r1
 8019ccc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8019cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	da59      	bge.n	8019d8c <mg_atod+0x18c>
 8019cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cda:	68fa      	ldr	r2, [r7, #12]
 8019cdc:	4413      	add	r3, r2
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ce2:	d153      	bne.n	8019d8c <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8019ce4:	f04f 0200 	mov.w	r2, #0
 8019ce8:	f04f 0300 	mov.w	r3, #0
 8019cec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8019cf0:	a375      	add	r3, pc, #468	@ (adr r3, 8019ec8 <mg_atod+0x2c8>)
 8019cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8019cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cfc:	3301      	adds	r3, #1
 8019cfe:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8019d00:	e023      	b.n	8019d4a <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8019d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d04:	68fa      	ldr	r2, [r7, #12]
 8019d06:	4413      	add	r3, r2
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	3b30      	subs	r3, #48	@ 0x30
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7e6 fc1b 	bl	8000548 <__aeabi_i2d>
 8019d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8019d16:	f7e6 fc81 	bl	800061c <__aeabi_dmul>
 8019d1a:	4602      	mov	r2, r0
 8019d1c:	460b      	mov	r3, r1
 8019d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8019d22:	f7e6 fac5 	bl	80002b0 <__adddf3>
 8019d26:	4602      	mov	r2, r0
 8019d28:	460b      	mov	r3, r1
 8019d2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 8019d2e:	f04f 0200 	mov.w	r2, #0
 8019d32:	4b67      	ldr	r3, [pc, #412]	@ (8019ed0 <mg_atod+0x2d0>)
 8019d34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8019d38:	f7e6 fd9a 	bl	8000870 <__aeabi_ddiv>
 8019d3c:	4602      	mov	r2, r0
 8019d3e:	460b      	mov	r3, r1
 8019d40:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8019d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d46:	3301      	adds	r3, #1
 8019d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	429a      	cmp	r2, r3
 8019d50:	da0b      	bge.n	8019d6a <mg_atod+0x16a>
 8019d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d54:	68fa      	ldr	r2, [r7, #12]
 8019d56:	4413      	add	r3, r2
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019d5c:	d905      	bls.n	8019d6a <mg_atod+0x16a>
 8019d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d60:	68fa      	ldr	r2, [r7, #12]
 8019d62:	4413      	add	r3, r2
 8019d64:	781b      	ldrb	r3, [r3, #0]
 8019d66:	2b39      	cmp	r3, #57	@ 0x39
 8019d68:	d9cb      	bls.n	8019d02 <mg_atod+0x102>
    }
    d += frac * sign;
 8019d6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019d6c:	f7e6 fbec 	bl	8000548 <__aeabi_i2d>
 8019d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8019d74:	f7e6 fc52 	bl	800061c <__aeabi_dmul>
 8019d78:	4602      	mov	r2, r0
 8019d7a:	460b      	mov	r3, r1
 8019d7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019d80:	f7e6 fa96 	bl	80002b0 <__adddf3>
 8019d84:	4602      	mov	r2, r0
 8019d86:	460b      	mov	r3, r1
 8019d88:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8019d8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	429a      	cmp	r2, r3
 8019d92:	f280 8085 	bge.w	8019ea0 <mg_atod+0x2a0>
 8019d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d98:	68fa      	ldr	r2, [r7, #12]
 8019d9a:	4413      	add	r3, r2
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	2b65      	cmp	r3, #101	@ 0x65
 8019da0:	d005      	beq.n	8019dae <mg_atod+0x1ae>
 8019da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019da4:	68fa      	ldr	r2, [r7, #12]
 8019da6:	4413      	add	r3, r2
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	2b45      	cmp	r3, #69	@ 0x45
 8019dac:	d178      	bne.n	8019ea0 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 8019dae:	2300      	movs	r3, #0
 8019db0:	61bb      	str	r3, [r7, #24]
 8019db2:	2300      	movs	r3, #0
 8019db4:	617b      	str	r3, [r7, #20]
    i++;
 8019db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019db8:	3301      	adds	r3, #1
 8019dba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8019dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019dbe:	68bb      	ldr	r3, [r7, #8]
 8019dc0:	429a      	cmp	r2, r3
 8019dc2:	da0a      	bge.n	8019dda <mg_atod+0x1da>
 8019dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dc6:	68fa      	ldr	r2, [r7, #12]
 8019dc8:	4413      	add	r3, r2
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	2b2d      	cmp	r3, #45	@ 0x2d
 8019dce:	d104      	bne.n	8019dda <mg_atod+0x1da>
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	617b      	str	r3, [r7, #20]
 8019dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dd6:	3301      	adds	r3, #1
 8019dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 8019dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	429a      	cmp	r2, r3
 8019de0:	da19      	bge.n	8019e16 <mg_atod+0x216>
 8019de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019de4:	68fa      	ldr	r2, [r7, #12]
 8019de6:	4413      	add	r3, r2
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	2b2b      	cmp	r3, #43	@ 0x2b
 8019dec:	d113      	bne.n	8019e16 <mg_atod+0x216>
 8019dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019df0:	3301      	adds	r3, #1
 8019df2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8019df4:	e00f      	b.n	8019e16 <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8019df6:	69ba      	ldr	r2, [r7, #24]
 8019df8:	4613      	mov	r3, r2
 8019dfa:	009b      	lsls	r3, r3, #2
 8019dfc:	4413      	add	r3, r2
 8019dfe:	005b      	lsls	r3, r3, #1
 8019e00:	4619      	mov	r1, r3
 8019e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e04:	1c5a      	adds	r2, r3, #1
 8019e06:	637a      	str	r2, [r7, #52]	@ 0x34
 8019e08:	461a      	mov	r2, r3
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	4413      	add	r3, r2
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	3b30      	subs	r3, #48	@ 0x30
 8019e12:	440b      	add	r3, r1
 8019e14:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8019e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	da0f      	bge.n	8019e3e <mg_atod+0x23e>
 8019e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	4413      	add	r3, r2
 8019e24:	781b      	ldrb	r3, [r3, #0]
 8019e26:	2b2f      	cmp	r3, #47	@ 0x2f
 8019e28:	d909      	bls.n	8019e3e <mg_atod+0x23e>
 8019e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e2c:	68fa      	ldr	r2, [r7, #12]
 8019e2e:	4413      	add	r3, r2
 8019e30:	781b      	ldrb	r3, [r3, #0]
 8019e32:	2b39      	cmp	r3, #57	@ 0x39
 8019e34:	d803      	bhi.n	8019e3e <mg_atod+0x23e>
 8019e36:	69bb      	ldr	r3, [r7, #24]
 8019e38:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8019e3c:	dbdb      	blt.n	8019df6 <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d002      	beq.n	8019e4a <mg_atod+0x24a>
 8019e44:	69bb      	ldr	r3, [r7, #24]
 8019e46:	425b      	negs	r3, r3
 8019e48:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	61fb      	str	r3, [r7, #28]
 8019e4e:	e00d      	b.n	8019e6c <mg_atod+0x26c>
 8019e50:	f04f 0200 	mov.w	r2, #0
 8019e54:	4b1e      	ldr	r3, [pc, #120]	@ (8019ed0 <mg_atod+0x2d0>)
 8019e56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019e5a:	f7e6 fbdf 	bl	800061c <__aeabi_dmul>
 8019e5e:	4602      	mov	r2, r0
 8019e60:	460b      	mov	r3, r1
 8019e62:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	3301      	adds	r3, #1
 8019e6a:	61fb      	str	r3, [r7, #28]
 8019e6c:	69fa      	ldr	r2, [r7, #28]
 8019e6e:	69bb      	ldr	r3, [r7, #24]
 8019e70:	429a      	cmp	r2, r3
 8019e72:	dbed      	blt.n	8019e50 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8019e74:	2300      	movs	r3, #0
 8019e76:	61fb      	str	r3, [r7, #28]
 8019e78:	e00d      	b.n	8019e96 <mg_atod+0x296>
 8019e7a:	f04f 0200 	mov.w	r2, #0
 8019e7e:	4b14      	ldr	r3, [pc, #80]	@ (8019ed0 <mg_atod+0x2d0>)
 8019e80:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8019e84:	f7e6 fcf4 	bl	8000870 <__aeabi_ddiv>
 8019e88:	4602      	mov	r2, r0
 8019e8a:	460b      	mov	r3, r1
 8019e8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8019e90:	69fb      	ldr	r3, [r7, #28]
 8019e92:	3301      	adds	r3, #1
 8019e94:	61fb      	str	r3, [r7, #28]
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	425b      	negs	r3, r3
 8019e9a:	69fa      	ldr	r2, [r7, #28]
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	dbec      	blt.n	8019e7a <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d002      	beq.n	8019eac <mg_atod+0x2ac>
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019eaa:	601a      	str	r2, [r3, #0]
  return d;
 8019eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8019eb0:	ec43 2b17 	vmov	d7, r2, r3
}
 8019eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8019eb8:	eef0 0a67 	vmov.f32	s1, s15
 8019ebc:	3740      	adds	r7, #64	@ 0x40
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	bd80      	pop	{r7, pc}
 8019ec2:	bf00      	nop
 8019ec4:	f3af 8000 	nop.w
 8019ec8:	9999999a 	.word	0x9999999a
 8019ecc:	3fb99999 	.word	0x3fb99999
 8019ed0:	40240000 	.word	0x40240000

08019ed4 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8019ed4:	b590      	push	{r4, r7, lr}
 8019ed6:	b09b      	sub	sp, #108	@ 0x6c
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	f107 0408 	add.w	r4, r7, #8
 8019ede:	e884 0003 	stmia.w	r4, {r0, r1}
 8019ee2:	607a      	str	r2, [r7, #4]
 8019ee4:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8019ef8:	2300      	movs	r3, #0
 8019efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 8019efc:	2300      	movs	r3, #0
 8019efe:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 8019f00:	2300      	movs	r3, #0
 8019f02:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 8019f04:	2301      	movs	r3, #1
 8019f06:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8019f08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d002      	beq.n	8019f20 <mg_json_get+0x4c>
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	781b      	ldrb	r3, [r3, #0]
 8019f24:	2b24      	cmp	r3, #36	@ 0x24
 8019f26:	d002      	beq.n	8019f2e <mg_json_get+0x5a>
 8019f28:	f06f 0301 	mvn.w	r3, #1
 8019f2c:	e308      	b.n	801a540 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8019f2e:	2300      	movs	r3, #0
 8019f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f32:	e2fe      	b.n	801a532 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 8019f34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019f38:	4413      	add	r3, r2
 8019f3a:	781b      	ldrb	r3, [r3, #0]
 8019f3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8019f40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019f44:	2b20      	cmp	r3, #32
 8019f46:	f000 82ee 	beq.w	801a526 <mg_json_get+0x652>
 8019f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019f4e:	2b09      	cmp	r3, #9
 8019f50:	f000 82e9 	beq.w	801a526 <mg_json_get+0x652>
 8019f54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019f58:	2b0a      	cmp	r3, #10
 8019f5a:	f000 82e4 	beq.w	801a526 <mg_json_get+0x652>
 8019f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019f62:	2b0d      	cmp	r3, #13
 8019f64:	f000 82df 	beq.w	801a526 <mg_json_get+0x652>
    switch (expecting) {
 8019f68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019f6c:	2b03      	cmp	r3, #3
 8019f6e:	f200 82dd 	bhi.w	801a52c <mg_json_get+0x658>
 8019f72:	a201      	add	r2, pc, #4	@ (adr r2, 8019f78 <mg_json_get+0xa4>)
 8019f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f78:	08019f89 	.word	0x08019f89
 8019f7c:	0801a271 	.word	0x0801a271
 8019f80:	0801a3ff 	.word	0x0801a3ff
 8019f84:	0801a415 	.word	0x0801a415
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8019f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d101      	bne.n	8019f94 <mg_json_get+0xc0>
 8019f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 8019f94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019f98:	2b7b      	cmp	r3, #123	@ 0x7b
 8019f9a:	d12b      	bne.n	8019ff4 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8019f9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019f9e:	2b1d      	cmp	r3, #29
 8019fa0:	dd02      	ble.n	8019fa8 <mg_json_get+0xd4>
 8019fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fa6:	e2cb      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8019fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d114      	bne.n	8019fda <mg_json_get+0x106>
 8019fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	4413      	add	r3, r2
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fba:	d10e      	bne.n	8019fda <mg_json_get+0x106>
 8019fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d10a      	bne.n	8019fda <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8019fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc6:	3301      	adds	r3, #1
 8019fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8019fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fcc:	3301      	adds	r3, #1
 8019fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8019fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 8019fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019fdc:	1c5a      	adds	r2, r3, #1
 8019fde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8019fe0:	3368      	adds	r3, #104	@ 0x68
 8019fe2:	443b      	add	r3, r7
 8019fe4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8019fe8:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8019fec:	2301      	movs	r3, #1
 8019fee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 8019ff2:	e29b      	b.n	801a52c <mg_json_get+0x658>
        } else if (c == '[') {
 8019ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019ff8:	2b5b      	cmp	r3, #91	@ 0x5b
 8019ffa:	d14e      	bne.n	801a09a <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8019ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019ffe:	2b1d      	cmp	r3, #29
 801a000:	dd02      	ble.n	801a008 <mg_json_get+0x134>
 801a002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a006:	e29b      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 801a008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d13a      	bne.n	801a086 <mg_json_get+0x1b2>
 801a010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a012:	687a      	ldr	r2, [r7, #4]
 801a014:	4413      	add	r3, r2
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	2b5b      	cmp	r3, #91	@ 0x5b
 801a01a:	d134      	bne.n	801a086 <mg_json_get+0x1b2>
 801a01c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a01e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a020:	429a      	cmp	r2, r3
 801a022:	d130      	bne.n	801a086 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 801a024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a026:	3301      	adds	r3, #1
 801a028:	657b      	str	r3, [r7, #84]	@ 0x54
 801a02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a02c:	3301      	adds	r3, #1
 801a02e:	653b      	str	r3, [r7, #80]	@ 0x50
 801a030:	2300      	movs	r3, #0
 801a032:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a034:	2300      	movs	r3, #0
 801a036:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a038:	e010      	b.n	801a05c <mg_json_get+0x188>
              ei *= 10;
 801a03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a03c:	4613      	mov	r3, r2
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	4413      	add	r3, r2
 801a042:	005b      	lsls	r3, r3, #1
 801a044:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 801a046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a048:	687a      	ldr	r2, [r7, #4]
 801a04a:	4413      	add	r3, r2
 801a04c:	781b      	ldrb	r3, [r3, #0]
 801a04e:	3b30      	subs	r3, #48	@ 0x30
 801a050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a052:	4413      	add	r3, r2
 801a054:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a058:	3301      	adds	r3, #1
 801a05a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a05e:	687a      	ldr	r2, [r7, #4]
 801a060:	4413      	add	r3, r2
 801a062:	781b      	ldrb	r3, [r3, #0]
 801a064:	2b5d      	cmp	r3, #93	@ 0x5d
 801a066:	d005      	beq.n	801a074 <mg_json_get+0x1a0>
 801a068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a06a:	687a      	ldr	r2, [r7, #4]
 801a06c:	4413      	add	r3, r2
 801a06e:	781b      	ldrb	r3, [r3, #0]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d1e2      	bne.n	801a03a <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 801a074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	4413      	add	r3, r2
 801a07a:	781b      	ldrb	r3, [r3, #0]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d002      	beq.n	801a086 <mg_json_get+0x1b2>
 801a080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a082:	3301      	adds	r3, #1
 801a084:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 801a086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a088:	1c5a      	adds	r2, r3, #1
 801a08a:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a08c:	3368      	adds	r3, #104	@ 0x68
 801a08e:	443b      	add	r3, r7
 801a090:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a094:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 801a098:	e248      	b.n	801a52c <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 801a09a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a09e:	2b5d      	cmp	r3, #93	@ 0x5d
 801a0a0:	d13a      	bne.n	801a118 <mg_json_get+0x244>
 801a0a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	dd37      	ble.n	801a118 <mg_json_get+0x244>
          MG_EOO(']');
 801a0a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d106      	bne.n	801a0be <mg_json_get+0x1ea>
 801a0b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0b4:	429a      	cmp	r2, r3
 801a0b6:	d002      	beq.n	801a0be <mg_json_get+0x1ea>
 801a0b8:	f06f 0302 	mvn.w	r3, #2
 801a0bc:	e240      	b.n	801a540 <mg_json_get+0x66c>
 801a0be:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a0c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	3368      	adds	r3, #104	@ 0x68
 801a0c8:	443b      	add	r3, r7
 801a0ca:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a0ce:	3302      	adds	r3, #2
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	d002      	beq.n	801a0da <mg_json_get+0x206>
 801a0d4:	f06f 0301 	mvn.w	r3, #1
 801a0d8:	e232      	b.n	801a540 <mg_json_get+0x66c>
 801a0da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0dc:	3b01      	subs	r3, #1
 801a0de:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a0e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a0e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	f040 809c 	bne.w	801a222 <mg_json_get+0x34e>
 801a0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	4413      	add	r3, r2
 801a0f0:	781b      	ldrb	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	f040 8095 	bne.w	801a222 <mg_json_get+0x34e>
 801a0f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a0fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	f040 8090 	bne.w	801a222 <mg_json_get+0x34e>
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d005      	beq.n	801a114 <mg_json_get+0x240>
 801a108:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a10c:	1ad3      	subs	r3, r2, r3
 801a10e:	1c5a      	adds	r2, r3, #1
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	601a      	str	r2, [r3, #0]
 801a114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a116:	e213      	b.n	801a540 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 801a118:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a11c:	2b74      	cmp	r3, #116	@ 0x74
 801a11e:	d113      	bne.n	801a148 <mg_json_get+0x274>
 801a120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a122:	3303      	adds	r3, #3
 801a124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a126:	429a      	cmp	r2, r3
 801a128:	dd0e      	ble.n	801a148 <mg_json_get+0x274>
 801a12a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a12c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a12e:	4413      	add	r3, r2
 801a130:	2204      	movs	r2, #4
 801a132:	4998      	ldr	r1, [pc, #608]	@ (801a394 <mg_json_get+0x4c0>)
 801a134:	4618      	mov	r0, r3
 801a136:	f008 fe65 	bl	8022e04 <memcmp>
 801a13a:	4603      	mov	r3, r0
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d103      	bne.n	801a148 <mg_json_get+0x274>
          i += 3;
 801a140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a142:	3303      	adds	r3, #3
 801a144:	663b      	str	r3, [r7, #96]	@ 0x60
 801a146:	e06c      	b.n	801a222 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 801a148:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a14c:	2b6e      	cmp	r3, #110	@ 0x6e
 801a14e:	d113      	bne.n	801a178 <mg_json_get+0x2a4>
 801a150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a152:	3303      	adds	r3, #3
 801a154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a156:	429a      	cmp	r2, r3
 801a158:	dd0e      	ble.n	801a178 <mg_json_get+0x2a4>
 801a15a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a15c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a15e:	4413      	add	r3, r2
 801a160:	2204      	movs	r2, #4
 801a162:	498d      	ldr	r1, [pc, #564]	@ (801a398 <mg_json_get+0x4c4>)
 801a164:	4618      	mov	r0, r3
 801a166:	f008 fe4d 	bl	8022e04 <memcmp>
 801a16a:	4603      	mov	r3, r0
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d103      	bne.n	801a178 <mg_json_get+0x2a4>
          i += 3;
 801a170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a172:	3303      	adds	r3, #3
 801a174:	663b      	str	r3, [r7, #96]	@ 0x60
 801a176:	e054      	b.n	801a222 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 801a178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a17c:	2b66      	cmp	r3, #102	@ 0x66
 801a17e:	d113      	bne.n	801a1a8 <mg_json_get+0x2d4>
 801a180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a182:	3304      	adds	r3, #4
 801a184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a186:	429a      	cmp	r2, r3
 801a188:	dd0e      	ble.n	801a1a8 <mg_json_get+0x2d4>
 801a18a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a18c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a18e:	4413      	add	r3, r2
 801a190:	2205      	movs	r2, #5
 801a192:	4982      	ldr	r1, [pc, #520]	@ (801a39c <mg_json_get+0x4c8>)
 801a194:	4618      	mov	r0, r3
 801a196:	f008 fe35 	bl	8022e04 <memcmp>
 801a19a:	4603      	mov	r3, r0
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d103      	bne.n	801a1a8 <mg_json_get+0x2d4>
          i += 4;
 801a1a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1a2:	3304      	adds	r3, #4
 801a1a4:	663b      	str	r3, [r7, #96]	@ 0x60
 801a1a6:	e03c      	b.n	801a222 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a1a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1ac:	2b2d      	cmp	r3, #45	@ 0x2d
 801a1ae:	d007      	beq.n	801a1c0 <mg_json_get+0x2ec>
 801a1b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1b4:	2b2f      	cmp	r3, #47	@ 0x2f
 801a1b6:	d916      	bls.n	801a1e6 <mg_json_get+0x312>
 801a1b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1bc:	2b39      	cmp	r3, #57	@ 0x39
 801a1be:	d812      	bhi.n	801a1e6 <mg_json_get+0x312>
          int numlen = 0;
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 801a1c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1c8:	18d0      	adds	r0, r2, r3
 801a1ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a1cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1ce:	1ad3      	subs	r3, r2, r3
 801a1d0:	f107 0210 	add.w	r2, r7, #16
 801a1d4:	4619      	mov	r1, r3
 801a1d6:	f7ff fd13 	bl	8019c00 <mg_atod>
          i += numlen - 1;
 801a1da:	693b      	ldr	r3, [r7, #16]
 801a1dc:	3b01      	subs	r3, #1
 801a1de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a1e0:	4413      	add	r3, r2
 801a1e2:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a1e4:	e01d      	b.n	801a222 <mg_json_get+0x34e>
        } else if (c == '"') {
 801a1e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1ea:	2b22      	cmp	r3, #34	@ 0x22
 801a1ec:	d116      	bne.n	801a21c <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a1ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1f0:	3301      	adds	r3, #1
 801a1f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1f4:	18d0      	adds	r0, r2, r3
 801a1f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a1f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1fa:	1ad3      	subs	r3, r2, r3
 801a1fc:	3b01      	subs	r3, #1
 801a1fe:	4619      	mov	r1, r3
 801a200:	f7ff fcba 	bl	8019b78 <mg_pass_string>
 801a204:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 801a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a208:	2b00      	cmp	r3, #0
 801a20a:	da01      	bge.n	801a210 <mg_json_get+0x33c>
 801a20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a20e:	e197      	b.n	801a540 <mg_json_get+0x66c>
          i += n + 1;
 801a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a212:	3301      	adds	r3, #1
 801a214:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a216:	4413      	add	r3, r2
 801a218:	663b      	str	r3, [r7, #96]	@ 0x60
 801a21a:	e002      	b.n	801a222 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 801a21c:	f06f 0301 	mvn.w	r3, #1
 801a220:	e18e      	b.n	801a540 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 801a222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a226:	429a      	cmp	r2, r3
 801a228:	d114      	bne.n	801a254 <mg_json_get+0x380>
 801a22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a22c:	687a      	ldr	r2, [r7, #4]
 801a22e:	4413      	add	r3, r2
 801a230:	781b      	ldrb	r3, [r3, #0]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d10e      	bne.n	801a254 <mg_json_get+0x380>
 801a236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d10a      	bne.n	801a254 <mg_json_get+0x380>
 801a23e:	683b      	ldr	r3, [r7, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d005      	beq.n	801a250 <mg_json_get+0x37c>
 801a244:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a248:	1ad3      	subs	r3, r2, r3
 801a24a:	1c5a      	adds	r2, r3, #1
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	601a      	str	r2, [r3, #0]
 801a250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a252:	e175      	b.n	801a540 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 801a254:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a258:	429a      	cmp	r2, r3
 801a25a:	d105      	bne.n	801a268 <mg_json_get+0x394>
 801a25c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a25e:	2b00      	cmp	r3, #0
 801a260:	db02      	blt.n	801a268 <mg_json_get+0x394>
 801a262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a264:	3301      	adds	r3, #1
 801a266:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 801a268:	2303      	movs	r3, #3
 801a26a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 801a26e:	e15d      	b.n	801a52c <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 801a270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a274:	2b22      	cmp	r3, #34	@ 0x22
 801a276:	d170      	bne.n	801a35a <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a27a:	3301      	adds	r3, #1
 801a27c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a27e:	18d0      	adds	r0, r2, r3
 801a280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a284:	1ad3      	subs	r3, r2, r3
 801a286:	3b01      	subs	r3, #1
 801a288:	4619      	mov	r1, r3
 801a28a:	f7ff fc75 	bl	8019b78 <mg_pass_string>
 801a28e:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 801a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a292:	2b00      	cmp	r3, #0
 801a294:	da01      	bge.n	801a29a <mg_json_get+0x3c6>
 801a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a298:	e152      	b.n	801a540 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 801a29a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a29c:	1c5a      	adds	r2, r3, #1
 801a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2a0:	4413      	add	r3, r2
 801a2a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	dc02      	bgt.n	801a2ae <mg_json_get+0x3da>
 801a2a8:	f06f 0302 	mvn.w	r3, #2
 801a2ac:	e148      	b.n	801a540 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 801a2ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	da02      	bge.n	801a2bc <mg_json_get+0x3e8>
 801a2b6:	f06f 0302 	mvn.w	r3, #2
 801a2ba:	e141      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 801a2bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c0:	429a      	cmp	r2, r3
 801a2c2:	d109      	bne.n	801a2d8 <mg_json_get+0x404>
 801a2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	687a      	ldr	r2, [r7, #4]
 801a2ca:	4413      	add	r3, r2
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2d0:	d002      	beq.n	801a2d8 <mg_json_get+0x404>
 801a2d2:	f06f 0302 	mvn.w	r3, #2
 801a2d6:	e133      	b.n	801a540 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 801a2d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d133      	bne.n	801a348 <mg_json_get+0x474>
 801a2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a2e2:	3b01      	subs	r3, #1
 801a2e4:	687a      	ldr	r2, [r7, #4]
 801a2e6:	4413      	add	r3, r2
 801a2e8:	781b      	ldrb	r3, [r3, #0]
 801a2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2ec:	d12c      	bne.n	801a348 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a2ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a2f0:	3301      	adds	r3, #1
 801a2f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a2f4:	18d0      	adds	r0, r2, r3
 801a2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a2f8:	687a      	ldr	r2, [r7, #4]
 801a2fa:	4413      	add	r3, r2
 801a2fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a2fe:	4619      	mov	r1, r3
 801a300:	f008 fd1f 	bl	8022d42 <strncmp>
 801a304:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 801a306:	2b00      	cmp	r3, #0
 801a308:	d11e      	bne.n	801a348 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a30a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a30e:	4413      	add	r3, r2
 801a310:	461a      	mov	r2, r3
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	4413      	add	r3, r2
 801a316:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d011      	beq.n	801a340 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a31c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a320:	4413      	add	r3, r2
 801a322:	461a      	mov	r2, r3
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	4413      	add	r3, r2
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	2b2e      	cmp	r3, #46	@ 0x2e
 801a32c:	d008      	beq.n	801a340 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 801a32e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a332:	4413      	add	r3, r2
 801a334:	461a      	mov	r2, r3
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	4413      	add	r3, r2
 801a33a:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a33c:	2b5b      	cmp	r3, #91	@ 0x5b
 801a33e:	d103      	bne.n	801a348 <mg_json_get+0x474>
            pos += n;
 801a340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a344:	4413      	add	r3, r2
 801a346:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 801a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a34a:	3301      	adds	r3, #1
 801a34c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a34e:	4413      	add	r3, r2
 801a350:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 801a352:	2302      	movs	r3, #2
 801a354:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a358:	e0e7      	b.n	801a52a <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 801a35a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a35e:	2b7d      	cmp	r3, #125	@ 0x7d
 801a360:	d14a      	bne.n	801a3f8 <mg_json_get+0x524>
          MG_EOO('}');
 801a362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a366:	429a      	cmp	r2, r3
 801a368:	d106      	bne.n	801a378 <mg_json_get+0x4a4>
 801a36a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a36e:	429a      	cmp	r2, r3
 801a370:	d002      	beq.n	801a378 <mg_json_get+0x4a4>
 801a372:	f06f 0302 	mvn.w	r3, #2
 801a376:	e0e3      	b.n	801a540 <mg_json_get+0x66c>
 801a378:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a37c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a37e:	3b01      	subs	r3, #1
 801a380:	3368      	adds	r3, #104	@ 0x68
 801a382:	443b      	add	r3, r7
 801a384:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a388:	3302      	adds	r3, #2
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d008      	beq.n	801a3a0 <mg_json_get+0x4cc>
 801a38e:	f06f 0301 	mvn.w	r3, #1
 801a392:	e0d5      	b.n	801a540 <mg_json_get+0x66c>
 801a394:	08027c90 	.word	0x08027c90
 801a398:	08027c98 	.word	0x08027c98
 801a39c:	08027ca0 	.word	0x08027ca0
 801a3a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3a2:	3b01      	subs	r3, #1
 801a3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a3a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d114      	bne.n	801a3d8 <mg_json_get+0x504>
 801a3ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3b0:	687a      	ldr	r2, [r7, #4]
 801a3b2:	4413      	add	r3, r2
 801a3b4:	781b      	ldrb	r3, [r3, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d10e      	bne.n	801a3d8 <mg_json_get+0x504>
 801a3ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a3bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3be:	429a      	cmp	r2, r3
 801a3c0:	d10a      	bne.n	801a3d8 <mg_json_get+0x504>
 801a3c2:	683b      	ldr	r3, [r7, #0]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d005      	beq.n	801a3d4 <mg_json_get+0x500>
 801a3c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3cc:	1ad3      	subs	r3, r2, r3
 801a3ce:	1c5a      	adds	r2, r3, #1
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	601a      	str	r2, [r3, #0]
 801a3d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3d6:	e0b3      	b.n	801a540 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 801a3d8:	2303      	movs	r3, #3
 801a3da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 801a3de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	f040 80a1 	bne.w	801a52a <mg_json_get+0x656>
 801a3e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	f2c0 809d 	blt.w	801a52a <mg_json_get+0x656>
 801a3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3f2:	3301      	adds	r3, #1
 801a3f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 801a3f6:	e098      	b.n	801a52a <mg_json_get+0x656>
          return MG_JSON_INVALID;
 801a3f8:	f06f 0301 	mvn.w	r3, #1
 801a3fc:	e0a0      	b.n	801a540 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 801a3fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a402:	2b3a      	cmp	r3, #58	@ 0x3a
 801a404:	d103      	bne.n	801a40e <mg_json_get+0x53a>
          expecting = S_VALUE;
 801a406:	2300      	movs	r3, #0
 801a408:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a40c:	e08e      	b.n	801a52c <mg_json_get+0x658>
          return MG_JSON_INVALID;
 801a40e:	f06f 0301 	mvn.w	r3, #1
 801a412:	e095      	b.n	801a540 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 801a414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a416:	2b00      	cmp	r3, #0
 801a418:	dc02      	bgt.n	801a420 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 801a41a:	f06f 0301 	mvn.w	r3, #1
 801a41e:	e08f      	b.n	801a540 <mg_json_get+0x66c>
        } else if (c == ',') {
 801a420:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a424:	2b2c      	cmp	r3, #44	@ 0x2c
 801a426:	d10d      	bne.n	801a444 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 801a428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a42a:	3b01      	subs	r3, #1
 801a42c:	3368      	adds	r3, #104	@ 0x68
 801a42e:	443b      	add	r3, r7
 801a430:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a434:	2b7b      	cmp	r3, #123	@ 0x7b
 801a436:	bf0c      	ite	eq
 801a438:	2301      	moveq	r3, #1
 801a43a:	2300      	movne	r3, #0
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a442:	e073      	b.n	801a52c <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 801a444:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a448:	2b5d      	cmp	r3, #93	@ 0x5d
 801a44a:	d003      	beq.n	801a454 <mg_json_get+0x580>
 801a44c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a450:	2b7d      	cmp	r3, #125	@ 0x7d
 801a452:	d163      	bne.n	801a51c <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 801a454:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a458:	429a      	cmp	r2, r3
 801a45a:	d10d      	bne.n	801a478 <mg_json_get+0x5a4>
 801a45c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a460:	2b7d      	cmp	r3, #125	@ 0x7d
 801a462:	d109      	bne.n	801a478 <mg_json_get+0x5a4>
 801a464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a466:	3b01      	subs	r3, #1
 801a468:	687a      	ldr	r2, [r7, #4]
 801a46a:	4413      	add	r3, r2
 801a46c:	781b      	ldrb	r3, [r3, #0]
 801a46e:	2b2e      	cmp	r3, #46	@ 0x2e
 801a470:	d102      	bne.n	801a478 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 801a472:	f06f 0302 	mvn.w	r3, #2
 801a476:	e063      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 801a478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d10d      	bne.n	801a49c <mg_json_get+0x5c8>
 801a480:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a484:	2b5d      	cmp	r3, #93	@ 0x5d
 801a486:	d109      	bne.n	801a49c <mg_json_get+0x5c8>
 801a488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a48a:	3b01      	subs	r3, #1
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	4413      	add	r3, r2
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	2b2c      	cmp	r3, #44	@ 0x2c
 801a494:	d102      	bne.n	801a49c <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 801a496:	f06f 0302 	mvn.w	r3, #2
 801a49a:	e051      	b.n	801a540 <mg_json_get+0x66c>
          MG_EOO('O');
 801a49c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d106      	bne.n	801a4b2 <mg_json_get+0x5de>
 801a4a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a4a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d002      	beq.n	801a4b2 <mg_json_get+0x5de>
 801a4ac:	f06f 0302 	mvn.w	r3, #2
 801a4b0:	e046      	b.n	801a540 <mg_json_get+0x66c>
 801a4b2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a4b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	3368      	adds	r3, #104	@ 0x68
 801a4bc:	443b      	add	r3, r7
 801a4be:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a4c2:	3302      	adds	r3, #2
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	d002      	beq.n	801a4ce <mg_json_get+0x5fa>
 801a4c8:	f06f 0301 	mvn.w	r3, #1
 801a4cc:	e038      	b.n	801a540 <mg_json_get+0x66c>
 801a4ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a4d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	d114      	bne.n	801a506 <mg_json_get+0x632>
 801a4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a4de:	687a      	ldr	r2, [r7, #4]
 801a4e0:	4413      	add	r3, r2
 801a4e2:	781b      	ldrb	r3, [r3, #0]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d10e      	bne.n	801a506 <mg_json_get+0x632>
 801a4e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d10a      	bne.n	801a506 <mg_json_get+0x632>
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d005      	beq.n	801a502 <mg_json_get+0x62e>
 801a4f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a4f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a4fa:	1ad3      	subs	r3, r2, r3
 801a4fc:	1c5a      	adds	r2, r3, #1
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	601a      	str	r2, [r3, #0]
 801a502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a504:	e01c      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801a506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d109      	bne.n	801a522 <mg_json_get+0x64e>
 801a50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a510:	2b00      	cmp	r3, #0
 801a512:	db06      	blt.n	801a522 <mg_json_get+0x64e>
 801a514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a516:	3301      	adds	r3, #1
 801a518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a51a:	e002      	b.n	801a522 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 801a51c:	f06f 0301 	mvn.w	r3, #1
 801a520:	e00e      	b.n	801a540 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801a522:	bf00      	nop
        break;
 801a524:	e002      	b.n	801a52c <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801a526:	bf00      	nop
 801a528:	e000      	b.n	801a52c <mg_json_get+0x658>
        break;
 801a52a:	bf00      	nop
  for (i = 0; i < len; i++) {
 801a52c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a52e:	3301      	adds	r3, #1
 801a530:	663b      	str	r3, [r7, #96]	@ 0x60
 801a532:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a536:	429a      	cmp	r2, r3
 801a538:	f6ff acfc 	blt.w	8019f34 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 801a53c:	f06f 0302 	mvn.w	r3, #2
}
 801a540:	4618      	mov	r0, r3
 801a542:	376c      	adds	r7, #108	@ 0x6c
 801a544:	46bd      	mov	sp, r7
 801a546:	bd90      	pop	{r4, r7, pc}

0801a548 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 801a548:	b590      	push	{r4, r7, lr}
 801a54a:	b089      	sub	sp, #36	@ 0x24
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	f107 0408 	add.w	r4, r7, #8
 801a552:	e884 0003 	stmia.w	r4, {r0, r1}
 801a556:	607a      	str	r2, [r7, #4]
 801a558:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 801a55a:	2300      	movs	r3, #0
 801a55c:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801a55e:	f107 0314 	add.w	r3, r7, #20
 801a562:	687a      	ldr	r2, [r7, #4]
 801a564:	f107 0108 	add.w	r1, r7, #8
 801a568:	c903      	ldmia	r1, {r0, r1}
 801a56a:	f7ff fcb3 	bl	8019ed4 <mg_json_get>
 801a56e:	61b8      	str	r0, [r7, #24]
 801a570:	69bb      	ldr	r3, [r7, #24]
 801a572:	2b00      	cmp	r3, #0
 801a574:	db25      	blt.n	801a5c2 <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801a576:	68ba      	ldr	r2, [r7, #8]
 801a578:	69bb      	ldr	r3, [r7, #24]
 801a57a:	4413      	add	r3, r2
 801a57c:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801a57e:	2b2d      	cmp	r3, #45	@ 0x2d
 801a580:	d00b      	beq.n	801a59a <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801a582:	68ba      	ldr	r2, [r7, #8]
 801a584:	69bb      	ldr	r3, [r7, #24]
 801a586:	4413      	add	r3, r2
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a58c:	d919      	bls.n	801a5c2 <mg_json_get_num+0x7a>
 801a58e:	68ba      	ldr	r2, [r7, #8]
 801a590:	69bb      	ldr	r3, [r7, #24]
 801a592:	4413      	add	r3, r2
 801a594:	781b      	ldrb	r3, [r3, #0]
 801a596:	2b39      	cmp	r3, #57	@ 0x39
 801a598:	d813      	bhi.n	801a5c2 <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d00e      	beq.n	801a5be <mg_json_get_num+0x76>
 801a5a0:	68ba      	ldr	r2, [r7, #8]
 801a5a2:	69bb      	ldr	r3, [r7, #24]
 801a5a4:	4413      	add	r3, r2
 801a5a6:	6979      	ldr	r1, [r7, #20]
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f7ff fb28 	bl	8019c00 <mg_atod>
 801a5b0:	eeb0 7a40 	vmov.f32	s14, s0
 801a5b4:	eef0 7a60 	vmov.f32	s15, s1
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 801a5be:	2301      	movs	r3, #1
 801a5c0:	61fb      	str	r3, [r7, #28]
  }
  return found;
 801a5c2:	69fb      	ldr	r3, [r7, #28]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	bf14      	ite	ne
 801a5c8:	2301      	movne	r3, #1
 801a5ca:	2300      	moveq	r3, #0
 801a5cc:	b2db      	uxtb	r3, r3
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3724      	adds	r7, #36	@ 0x24
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd90      	pop	{r4, r7, pc}

0801a5d6 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 801a5d6:	b590      	push	{r4, r7, lr}
 801a5d8:	b087      	sub	sp, #28
 801a5da:	af00      	add	r7, sp, #0
 801a5dc:	f107 0408 	add.w	r4, r7, #8
 801a5e0:	e884 0003 	stmia.w	r4, {r0, r1}
 801a5e4:	607a      	str	r2, [r7, #4]
 801a5e6:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	617b      	str	r3, [r7, #20]
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	687a      	ldr	r2, [r7, #4]
 801a5f0:	f107 0108 	add.w	r1, r7, #8
 801a5f4:	c903      	ldmia	r1, {r0, r1}
 801a5f6:	f7ff fc6d 	bl	8019ed4 <mg_json_get>
 801a5fa:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	db1b      	blt.n	801a63a <mg_json_get_bool+0x64>
 801a602:	68ba      	ldr	r2, [r7, #8]
 801a604:	693b      	ldr	r3, [r7, #16]
 801a606:	4413      	add	r3, r2
 801a608:	781b      	ldrb	r3, [r3, #0]
 801a60a:	2b74      	cmp	r3, #116	@ 0x74
 801a60c:	d005      	beq.n	801a61a <mg_json_get_bool+0x44>
 801a60e:	68ba      	ldr	r2, [r7, #8]
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	4413      	add	r3, r2
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	2b66      	cmp	r3, #102	@ 0x66
 801a618:	d10f      	bne.n	801a63a <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d00a      	beq.n	801a636 <mg_json_get_bool+0x60>
 801a620:	68ba      	ldr	r2, [r7, #8]
 801a622:	693b      	ldr	r3, [r7, #16]
 801a624:	4413      	add	r3, r2
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	2b74      	cmp	r3, #116	@ 0x74
 801a62a:	bf0c      	ite	eq
 801a62c:	2301      	moveq	r3, #1
 801a62e:	2300      	movne	r3, #0
 801a630:	b2da      	uxtb	r2, r3
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	701a      	strb	r2, [r3, #0]
    found = 1;
 801a636:	2301      	movs	r3, #1
 801a638:	617b      	str	r3, [r7, #20]
  }
  return found;
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	bf14      	ite	ne
 801a640:	2301      	movne	r3, #1
 801a642:	2300      	moveq	r3, #0
 801a644:	b2db      	uxtb	r3, r3
}
 801a646:	4618      	mov	r0, r3
 801a648:	371c      	adds	r7, #28
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd90      	pop	{r4, r7, pc}

0801a64e <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 801a64e:	b590      	push	{r4, r7, lr}
 801a650:	b08d      	sub	sp, #52	@ 0x34
 801a652:	af02      	add	r7, sp, #8
 801a654:	f107 0408 	add.w	r4, r7, #8
 801a658:	e884 0003 	stmia.w	r4, {r0, r1}
 801a65c:	607a      	str	r2, [r7, #4]
 801a65e:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801a660:	2300      	movs	r3, #0
 801a662:	627b      	str	r3, [r7, #36]	@ 0x24
 801a664:	2300      	movs	r3, #0
 801a666:	623b      	str	r3, [r7, #32]
 801a668:	e064      	b.n	801a734 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 801a66a:	68ba      	ldr	r2, [r7, #8]
 801a66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a66e:	4413      	add	r3, r2
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	2b5c      	cmp	r3, #92	@ 0x5c
 801a674:	d12c      	bne.n	801a6d0 <mg_json_unescape+0x82>
 801a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a678:	1d5a      	adds	r2, r3, #5
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d227      	bcs.n	801a6d0 <mg_json_unescape+0x82>
 801a680:	68ba      	ldr	r2, [r7, #8]
 801a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a684:	3301      	adds	r3, #1
 801a686:	4413      	add	r3, r2
 801a688:	781b      	ldrb	r3, [r3, #0]
 801a68a:	2b75      	cmp	r3, #117	@ 0x75
 801a68c:	d120      	bne.n	801a6d0 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801a68e:	68ba      	ldr	r2, [r7, #8]
 801a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a692:	3302      	adds	r3, #2
 801a694:	18d1      	adds	r1, r2, r3
 801a696:	f107 0314 	add.w	r3, r7, #20
 801a69a:	2204      	movs	r2, #4
 801a69c:	4618      	mov	r0, r3
 801a69e:	f006 fb7a 	bl	8020d96 <mg_str_n>
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	6a3b      	ldr	r3, [r7, #32]
 801a6a6:	4413      	add	r3, r2
 801a6a8:	2201      	movs	r2, #1
 801a6aa:	9200      	str	r2, [sp, #0]
 801a6ac:	2210      	movs	r2, #16
 801a6ae:	f107 0114 	add.w	r1, r7, #20
 801a6b2:	c903      	ldmia	r1, {r0, r1}
 801a6b4:	f006 fd76 	bl	80211a4 <mg_str_to_num>
 801a6b8:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 801a6ba:	f083 0301 	eor.w	r3, r3, #1
 801a6be:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d001      	beq.n	801a6c8 <mg_json_unescape+0x7a>
        return false;
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	e04c      	b.n	801a762 <mg_json_unescape+0x114>
      i += 5;
 801a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ca:	3305      	adds	r3, #5
 801a6cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6ce:	e02b      	b.n	801a728 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801a6d0:	68ba      	ldr	r2, [r7, #8]
 801a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6d4:	4413      	add	r3, r2
 801a6d6:	781b      	ldrb	r3, [r3, #0]
 801a6d8:	2b5c      	cmp	r3, #92	@ 0x5c
 801a6da:	d11d      	bne.n	801a718 <mg_json_unescape+0xca>
 801a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6de:	1c5a      	adds	r2, r3, #1
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d218      	bcs.n	801a718 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 801a6e6:	68ba      	ldr	r2, [r7, #8]
 801a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	4413      	add	r3, r2
 801a6ee:	781b      	ldrb	r3, [r3, #0]
 801a6f0:	2100      	movs	r1, #0
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7ff fa10 	bl	8019b18 <json_esc>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 801a6fc:	7ffb      	ldrb	r3, [r7, #31]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d101      	bne.n	801a706 <mg_json_unescape+0xb8>
 801a702:	2300      	movs	r3, #0
 801a704:	e02d      	b.n	801a762 <mg_json_unescape+0x114>
      to[j] = c;
 801a706:	687a      	ldr	r2, [r7, #4]
 801a708:	6a3b      	ldr	r3, [r7, #32]
 801a70a:	4413      	add	r3, r2
 801a70c:	7ffa      	ldrb	r2, [r7, #31]
 801a70e:	701a      	strb	r2, [r3, #0]
      i++;
 801a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a712:	3301      	adds	r3, #1
 801a714:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801a716:	e007      	b.n	801a728 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 801a718:	68ba      	ldr	r2, [r7, #8]
 801a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71c:	441a      	add	r2, r3
 801a71e:	6879      	ldr	r1, [r7, #4]
 801a720:	6a3b      	ldr	r3, [r7, #32]
 801a722:	440b      	add	r3, r1
 801a724:	7812      	ldrb	r2, [r2, #0]
 801a726:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801a728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a72a:	3301      	adds	r3, #1
 801a72c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a72e:	6a3b      	ldr	r3, [r7, #32]
 801a730:	3301      	adds	r3, #1
 801a732:	623b      	str	r3, [r7, #32]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a738:	429a      	cmp	r2, r3
 801a73a:	d203      	bcs.n	801a744 <mg_json_unescape+0xf6>
 801a73c:	6a3a      	ldr	r2, [r7, #32]
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	429a      	cmp	r2, r3
 801a742:	d392      	bcc.n	801a66a <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 801a744:	6a3a      	ldr	r2, [r7, #32]
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	429a      	cmp	r2, r3
 801a74a:	d301      	bcc.n	801a750 <mg_json_unescape+0x102>
 801a74c:	2300      	movs	r3, #0
 801a74e:	e008      	b.n	801a762 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 801a750:	683b      	ldr	r3, [r7, #0]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d004      	beq.n	801a760 <mg_json_unescape+0x112>
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	6a3b      	ldr	r3, [r7, #32]
 801a75a:	4413      	add	r3, r2
 801a75c:	2200      	movs	r2, #0
 801a75e:	701a      	strb	r2, [r3, #0]
  return true;
 801a760:	2301      	movs	r3, #1
}
 801a762:	4618      	mov	r0, r3
 801a764:	372c      	adds	r7, #44	@ 0x2c
 801a766:	46bd      	mov	sp, r7
 801a768:	bd90      	pop	{r4, r7, pc}

0801a76a <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 801a76a:	b580      	push	{r7, lr}
 801a76c:	b08a      	sub	sp, #40	@ 0x28
 801a76e:	af00      	add	r7, sp, #0
 801a770:	f107 0308 	add.w	r3, r7, #8
 801a774:	e883 0003 	stmia.w	r3, {r0, r1}
 801a778:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 801a77a:	2300      	movs	r3, #0
 801a77c:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 801a77e:	2300      	movs	r3, #0
 801a780:	617b      	str	r3, [r7, #20]
 801a782:	f107 0314 	add.w	r3, r7, #20
 801a786:	687a      	ldr	r2, [r7, #4]
 801a788:	f107 0108 	add.w	r1, r7, #8
 801a78c:	c903      	ldmia	r1, {r0, r1}
 801a78e:	f7ff fba1 	bl	8019ed4 <mg_json_get>
 801a792:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 801a794:	6a3b      	ldr	r3, [r7, #32]
 801a796:	2b00      	cmp	r3, #0
 801a798:	db2f      	blt.n	801a7fa <mg_json_get_str+0x90>
 801a79a:	697b      	ldr	r3, [r7, #20]
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	dd2c      	ble.n	801a7fa <mg_json_get_str+0x90>
 801a7a0:	68ba      	ldr	r2, [r7, #8]
 801a7a2:	6a3b      	ldr	r3, [r7, #32]
 801a7a4:	4413      	add	r3, r2
 801a7a6:	781b      	ldrb	r3, [r3, #0]
 801a7a8:	2b22      	cmp	r3, #34	@ 0x22
 801a7aa:	d126      	bne.n	801a7fa <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801a7ac:	697b      	ldr	r3, [r7, #20]
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	2001      	movs	r0, #1
 801a7b2:	f7f9 fe93 	bl	80144dc <mg_calloc>
 801a7b6:	6278      	str	r0, [r7, #36]	@ 0x24
 801a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d01d      	beq.n	801a7fa <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 801a7be:	68ba      	ldr	r2, [r7, #8]
 801a7c0:	6a3b      	ldr	r3, [r7, #32]
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	18d1      	adds	r1, r2, r3
 801a7c6:	697b      	ldr	r3, [r7, #20]
 801a7c8:	3b02      	subs	r3, #2
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	f107 0318 	add.w	r3, r7, #24
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f006 fae0 	bl	8020d96 <mg_str_n>
 801a7d6:	697b      	ldr	r3, [r7, #20]
 801a7d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7da:	f107 0118 	add.w	r1, r7, #24
 801a7de:	c903      	ldmia	r1, {r0, r1}
 801a7e0:	f7ff ff35 	bl	801a64e <mg_json_unescape>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	f083 0301 	eor.w	r3, r3, #1
 801a7ea:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d004      	beq.n	801a7fa <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 801a7f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a7f2:	f7f1 fb01 	bl	800bdf8 <vPortFree>
      result = NULL;
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 801a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3728      	adds	r7, #40	@ 0x28
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801a804:	b580      	push	{r7, lr}
 801a806:	b082      	sub	sp, #8
 801a808:	af00      	add	r7, sp, #0
 801a80a:	4603      	mov	r3, r0
 801a80c:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 801a80e:	4b05      	ldr	r3, [pc, #20]	@ (801a824 <logc+0x20>)
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	4a05      	ldr	r2, [pc, #20]	@ (801a828 <logc+0x24>)
 801a814:	6811      	ldr	r1, [r2, #0]
 801a816:	79fa      	ldrb	r2, [r7, #7]
 801a818:	4610      	mov	r0, r2
 801a81a:	4798      	blx	r3
}
 801a81c:	bf00      	nop
 801a81e:	3708      	adds	r7, #8
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}
 801a824:	20000298 	.word	0x20000298
 801a828:	200178cc 	.word	0x200178cc

0801a82c <logs>:

static void logs(const char *buf, size_t len) {
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b084      	sub	sp, #16
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801a836:	2300      	movs	r3, #0
 801a838:	60fb      	str	r3, [r7, #12]
 801a83a:	e009      	b.n	801a850 <logs+0x24>
 801a83c:	687a      	ldr	r2, [r7, #4]
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	4413      	add	r3, r2
 801a842:	781b      	ldrb	r3, [r3, #0]
 801a844:	4618      	mov	r0, r3
 801a846:	f7ff ffdd 	bl	801a804 <logc>
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	3301      	adds	r3, #1
 801a84e:	60fb      	str	r3, [r7, #12]
 801a850:	68fa      	ldr	r2, [r7, #12]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	429a      	cmp	r2, r3
 801a856:	d3f1      	bcc.n	801a83c <logs+0x10>
}
 801a858:	bf00      	nop
 801a85a:	bf00      	nop
 801a85c:	3710      	adds	r7, #16
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}
	...

0801a864 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 801a864:	b590      	push	{r4, r7, lr}
 801a866:	b099      	sub	sp, #100	@ 0x64
 801a868:	af06      	add	r7, sp, #24
 801a86a:	60f8      	str	r0, [r7, #12]
 801a86c:	60b9      	str	r1, [r7, #8]
 801a86e:	607a      	str	r2, [r7, #4]
 801a870:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 801a872:	212f      	movs	r1, #47	@ 0x2f
 801a874:	68b8      	ldr	r0, [r7, #8]
 801a876:	f008 fa89 	bl	8022d8c <strrchr>
 801a87a:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 801a87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d104      	bne.n	801a88c <mg_log_prefix+0x28>
 801a882:	215c      	movs	r1, #92	@ 0x5c
 801a884:	68b8      	ldr	r0, [r7, #8]
 801a886:	f008 fa81 	bl	8022d8c <strrchr>
 801a88a:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 801a88c:	f007 fa9a 	bl	8021dc4 <mg_millis>
 801a890:	4602      	mov	r2, r0
 801a892:	460b      	mov	r3, r1
 801a894:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a896:	2900      	cmp	r1, #0
 801a898:	d002      	beq.n	801a8a0 <mg_log_prefix+0x3c>
 801a89a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a89c:	3101      	adds	r1, #1
 801a89e:	e000      	b.n	801a8a2 <mg_log_prefix+0x3e>
 801a8a0:	68b9      	ldr	r1, [r7, #8]
 801a8a2:	f107 0414 	add.w	r4, r7, #20
 801a8a6:	6838      	ldr	r0, [r7, #0]
 801a8a8:	9005      	str	r0, [sp, #20]
 801a8aa:	6878      	ldr	r0, [r7, #4]
 801a8ac:	9004      	str	r0, [sp, #16]
 801a8ae:	9103      	str	r1, [sp, #12]
 801a8b0:	68f9      	ldr	r1, [r7, #12]
 801a8b2:	9102      	str	r1, [sp, #8]
 801a8b4:	e9cd 2300 	strd	r2, r3, [sp]
 801a8b8:	4a11      	ldr	r2, [pc, #68]	@ (801a900 <mg_log_prefix+0x9c>)
 801a8ba:	2129      	movs	r1, #41	@ 0x29
 801a8bc:	4620      	mov	r0, r4
 801a8be:	f005 ffed 	bl	802089c <mg_snprintf>
 801a8c2:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 801a8c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8c6:	2b27      	cmp	r3, #39	@ 0x27
 801a8c8:	d90a      	bls.n	801a8e0 <mg_log_prefix+0x7c>
 801a8ca:	2327      	movs	r3, #39	@ 0x27
 801a8cc:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 801a8ce:	e007      	b.n	801a8e0 <mg_log_prefix+0x7c>
 801a8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8d2:	1c5a      	adds	r2, r3, #1
 801a8d4:	643a      	str	r2, [r7, #64]	@ 0x40
 801a8d6:	3348      	adds	r3, #72	@ 0x48
 801a8d8:	443b      	add	r3, r7
 801a8da:	2220      	movs	r2, #32
 801a8dc:	f803 2c34 	strb.w	r2, [r3, #-52]
 801a8e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8e2:	2b28      	cmp	r3, #40	@ 0x28
 801a8e4:	d9f4      	bls.n	801a8d0 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 801a8e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8e8:	1e5a      	subs	r2, r3, #1
 801a8ea:	f107 0314 	add.w	r3, r7, #20
 801a8ee:	4611      	mov	r1, r2
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f7ff ff9b 	bl	801a82c <logs>
}
 801a8f6:	bf00      	nop
 801a8f8:	374c      	adds	r7, #76	@ 0x4c
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd90      	pop	{r4, r7, pc}
 801a8fe:	bf00      	nop
 801a900:	08027ca8 	.word	0x08027ca8

0801a904 <mg_log>:

void mg_log(const char *fmt, ...) {
 801a904:	b40f      	push	{r0, r1, r2, r3}
 801a906:	b580      	push	{r7, lr}
 801a908:	b082      	sub	sp, #8
 801a90a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 801a90c:	f107 0314 	add.w	r3, r7, #20
 801a910:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 801a912:	4b09      	ldr	r3, [pc, #36]	@ (801a938 <mg_log+0x34>)
 801a914:	6818      	ldr	r0, [r3, #0]
 801a916:	4b09      	ldr	r3, [pc, #36]	@ (801a93c <mg_log+0x38>)
 801a918:	6819      	ldr	r1, [r3, #0]
 801a91a:	1d3b      	adds	r3, r7, #4
 801a91c:	693a      	ldr	r2, [r7, #16]
 801a91e:	f7fb f8ed 	bl	8015afc <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 801a922:	2102      	movs	r1, #2
 801a924:	4806      	ldr	r0, [pc, #24]	@ (801a940 <mg_log+0x3c>)
 801a926:	f7ff ff81 	bl	801a82c <logs>
}
 801a92a:	bf00      	nop
 801a92c:	3708      	adds	r7, #8
 801a92e:	46bd      	mov	sp, r7
 801a930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a934:	b004      	add	sp, #16
 801a936:	4770      	bx	lr
 801a938:	20000298 	.word	0x20000298
 801a93c:	200178cc 	.word	0x200178cc
 801a940:	08026a20 	.word	0x08026a20

0801a944 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 801a944:	b480      	push	{r7}
 801a946:	b083      	sub	sp, #12
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	2b09      	cmp	r3, #9
 801a950:	d804      	bhi.n	801a95c <nibble+0x18>
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	b2db      	uxtb	r3, r3
 801a956:	3330      	adds	r3, #48	@ 0x30
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	e003      	b.n	801a964 <nibble+0x20>
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	b2db      	uxtb	r3, r3
 801a960:	3357      	adds	r3, #87	@ 0x57
 801a962:	b2db      	uxtb	r3, r3
}
 801a964:	4618      	mov	r0, r3
 801a966:	370c      	adds	r7, #12
 801a968:	46bd      	mov	sp, r7
 801a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96e:	4770      	bx	lr

0801a970 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 801a970:	b580      	push	{r7, lr}
 801a972:	b08a      	sub	sp, #40	@ 0x28
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
 801a978:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 801a97e:	2300      	movs	r3, #0
 801a980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 801a984:	2300      	movs	r3, #0
 801a986:	623b      	str	r3, [r7, #32]
 801a988:	e07a      	b.n	801aa80 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 801a98a:	6a3b      	ldr	r3, [r7, #32]
 801a98c:	f003 030f 	and.w	r3, r3, #15
 801a990:	2b00      	cmp	r3, #0
 801a992:	d13a      	bne.n	801aa0a <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 801a994:	6a3b      	ldr	r3, [r7, #32]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d00f      	beq.n	801a9ba <mg_hexdump+0x4a>
 801a99a:	2102      	movs	r1, #2
 801a99c:	484c      	ldr	r0, [pc, #304]	@ (801aad0 <mg_hexdump+0x160>)
 801a99e:	f7ff ff45 	bl	801a82c <logs>
 801a9a2:	f107 030c 	add.w	r3, r7, #12
 801a9a6:	2110      	movs	r1, #16
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7ff ff3f 	bl	801a82c <logs>
 801a9ae:	200a      	movs	r0, #10
 801a9b0:	f7ff ff28 	bl	801a804 <logc>
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 801a9ba:	6a3b      	ldr	r3, [r7, #32]
 801a9bc:	0b1b      	lsrs	r3, r3, #12
 801a9be:	f003 030f 	and.w	r3, r3, #15
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7ff ffbe 	bl	801a944 <nibble>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f7ff ff1a 	bl	801a804 <logc>
 801a9d0:	6a3b      	ldr	r3, [r7, #32]
 801a9d2:	0a1b      	lsrs	r3, r3, #8
 801a9d4:	f003 030f 	and.w	r3, r3, #15
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f7ff ffb3 	bl	801a944 <nibble>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7ff ff0f 	bl	801a804 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 801a9e6:	6a3b      	ldr	r3, [r7, #32]
 801a9e8:	091b      	lsrs	r3, r3, #4
 801a9ea:	f003 030f 	and.w	r3, r3, #15
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7ff ffa8 	bl	801a944 <nibble>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f7ff ff04 	bl	801a804 <logc>
 801a9fc:	2030      	movs	r0, #48	@ 0x30
 801a9fe:	f7ff ff01 	bl	801a804 <logc>
 801aa02:	2103      	movs	r1, #3
 801aa04:	4833      	ldr	r0, [pc, #204]	@ (801aad4 <mg_hexdump+0x164>)
 801aa06:	f7ff ff11 	bl	801a82c <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 801aa0a:	69fa      	ldr	r2, [r7, #28]
 801aa0c:	6a3b      	ldr	r3, [r7, #32]
 801aa0e:	4413      	add	r3, r2
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	091b      	lsrs	r3, r3, #4
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7ff ff94 	bl	801a944 <nibble>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7ff fef0 	bl	801a804 <logc>
 801aa24:	69fa      	ldr	r2, [r7, #28]
 801aa26:	6a3b      	ldr	r3, [r7, #32]
 801aa28:	4413      	add	r3, r2
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	f003 030f 	and.w	r3, r3, #15
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7ff ff87 	bl	801a944 <nibble>
 801aa36:	4603      	mov	r3, r0
 801aa38:	4618      	mov	r0, r3
 801aa3a:	f7ff fee3 	bl	801a804 <logc>
    logc(' ');                                         // Space after hex number
 801aa3e:	2020      	movs	r0, #32
 801aa40:	f7ff fee0 	bl	801a804 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 801aa44:	69fa      	ldr	r2, [r7, #28]
 801aa46:	6a3b      	ldr	r3, [r7, #32]
 801aa48:	4413      	add	r3, r2
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	2b1f      	cmp	r3, #31
 801aa4e:	d90a      	bls.n	801aa66 <mg_hexdump+0xf6>
 801aa50:	69fa      	ldr	r2, [r7, #28]
 801aa52:	6a3b      	ldr	r3, [r7, #32]
 801aa54:	4413      	add	r3, r2
 801aa56:	781b      	ldrb	r3, [r3, #0]
 801aa58:	2b7e      	cmp	r3, #126	@ 0x7e
 801aa5a:	d804      	bhi.n	801aa66 <mg_hexdump+0xf6>
 801aa5c:	69fa      	ldr	r2, [r7, #28]
 801aa5e:	6a3b      	ldr	r3, [r7, #32]
 801aa60:	4413      	add	r3, r2
 801aa62:	781a      	ldrb	r2, [r3, #0]
 801aa64:	e000      	b.n	801aa68 <mg_hexdump+0xf8>
 801aa66:	222e      	movs	r2, #46	@ 0x2e
 801aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aa6c:	1c59      	adds	r1, r3, #1
 801aa6e:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 801aa72:	3328      	adds	r3, #40	@ 0x28
 801aa74:	443b      	add	r3, r7
 801aa76:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 801aa7a:	6a3b      	ldr	r3, [r7, #32]
 801aa7c:	3301      	adds	r3, #1
 801aa7e:	623b      	str	r3, [r7, #32]
 801aa80:	6a3a      	ldr	r2, [r7, #32]
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d380      	bcc.n	801a98a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 801aa88:	e00d      	b.n	801aaa6 <mg_hexdump+0x136>
 801aa8a:	2103      	movs	r1, #3
 801aa8c:	4811      	ldr	r0, [pc, #68]	@ (801aad4 <mg_hexdump+0x164>)
 801aa8e:	f7ff fecd 	bl	801a82c <logs>
 801aa92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aa96:	1c5a      	adds	r2, r3, #1
 801aa98:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801aa9c:	3328      	adds	r3, #40	@ 0x28
 801aa9e:	443b      	add	r3, r7
 801aaa0:	2220      	movs	r2, #32
 801aaa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801aaa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aaaa:	2b0f      	cmp	r3, #15
 801aaac:	d9ed      	bls.n	801aa8a <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 801aaae:	2102      	movs	r1, #2
 801aab0:	4807      	ldr	r0, [pc, #28]	@ (801aad0 <mg_hexdump+0x160>)
 801aab2:	f7ff febb 	bl	801a82c <logs>
 801aab6:	f107 030c 	add.w	r3, r7, #12
 801aaba:	2110      	movs	r1, #16
 801aabc:	4618      	mov	r0, r3
 801aabe:	f7ff feb5 	bl	801a82c <logs>
 801aac2:	200a      	movs	r0, #10
 801aac4:	f7ff fe9e 	bl	801a804 <logc>
}
 801aac8:	bf00      	nop
 801aaca:	3728      	adds	r7, #40	@ 0x28
 801aacc:	46bd      	mov	sp, r7
 801aace:	bd80      	pop	{r7, pc}
 801aad0:	08027cbc 	.word	0x08027cbc
 801aad4:	08027cc0 	.word	0x08027cc0

0801aad8 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 801aad8:	b480      	push	{r7}
 801aada:	b085      	sub	sp, #20
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801aae2:	4b14      	ldr	r3, [pc, #80]	@ (801ab34 <mg_byte_reverse+0x5c>)
 801aae4:	881b      	ldrh	r3, [r3, #0]
 801aae6:	2bff      	cmp	r3, #255	@ 0xff
 801aae8:	d81d      	bhi.n	801ab26 <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	3303      	adds	r3, #3
 801aaee:	781b      	ldrb	r3, [r3, #0]
 801aaf0:	021b      	lsls	r3, r3, #8
 801aaf2:	687a      	ldr	r2, [r7, #4]
 801aaf4:	3202      	adds	r2, #2
 801aaf6:	7812      	ldrb	r2, [r2, #0]
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	3301      	adds	r3, #1
 801ab00:	781b      	ldrb	r3, [r3, #0]
 801ab02:	021b      	lsls	r3, r3, #8
 801ab04:	6879      	ldr	r1, [r7, #4]
 801ab06:	7809      	ldrb	r1, [r1, #0]
 801ab08:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	68fa      	ldr	r2, [r7, #12]
 801ab12:	601a      	str	r2, [r3, #0]
      buf += 4;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	3304      	adds	r3, #4
 801ab18:	607b      	str	r3, [r7, #4]
    } while (--longs);
 801ab1a:	683b      	ldr	r3, [r7, #0]
 801ab1c:	3b01      	subs	r3, #1
 801ab1e:	603b      	str	r3, [r7, #0]
 801ab20:	683b      	ldr	r3, [r7, #0]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d1e1      	bne.n	801aaea <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 801ab26:	bf00      	nop
 801ab28:	3714      	adds	r7, #20
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab30:	4770      	bx	lr
 801ab32:	bf00      	nop
 801ab34:	08027cc4 	.word	0x08027cc4

0801ab38 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 801ab38:	b480      	push	{r7}
 801ab3a:	b083      	sub	sp, #12
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	4a0b      	ldr	r2, [pc, #44]	@ (801ab70 <mg_md5_init+0x38>)
 801ab44:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	4a0a      	ldr	r2, [pc, #40]	@ (801ab74 <mg_md5_init+0x3c>)
 801ab4a:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	4a0a      	ldr	r2, [pc, #40]	@ (801ab78 <mg_md5_init+0x40>)
 801ab50:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	4a09      	ldr	r2, [pc, #36]	@ (801ab7c <mg_md5_init+0x44>)
 801ab56:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2200      	movs	r2, #0
 801ab62:	615a      	str	r2, [r3, #20]
}
 801ab64:	bf00      	nop
 801ab66:	370c      	adds	r7, #12
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab6e:	4770      	bx	lr
 801ab70:	67452301 	.word	0x67452301
 801ab74:	efcdab89 	.word	0xefcdab89
 801ab78:	98badcfe 	.word	0x98badcfe
 801ab7c:	10325476 	.word	0x10325476

0801ab80 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801ab80:	b480      	push	{r7}
 801ab82:	b087      	sub	sp, #28
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	6078      	str	r0, [r7, #4]
 801ab88:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	617b      	str	r3, [r7, #20]
  b = buf[1];
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	613b      	str	r3, [r7, #16]
  c = buf[2];
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	689b      	ldr	r3, [r3, #8]
 801ab9a:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	68db      	ldr	r3, [r3, #12]
 801aba0:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801aba2:	68fa      	ldr	r2, [r7, #12]
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	405a      	eors	r2, r3
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	401a      	ands	r2, r3
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	405a      	eors	r2, r3
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	441a      	add	r2, r3
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	441a      	add	r2, r3
 801abba:	4ba1      	ldr	r3, [pc, #644]	@ (801ae40 <mg_md5_transform+0x2c0>)
 801abbc:	4413      	add	r3, r2
 801abbe:	617b      	str	r3, [r7, #20]
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	ea4f 6373 	mov.w	r3, r3, ror #25
 801abc6:	617b      	str	r3, [r7, #20]
 801abc8:	697a      	ldr	r2, [r7, #20]
 801abca:	693b      	ldr	r3, [r7, #16]
 801abcc:	4413      	add	r3, r2
 801abce:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801abd0:	693a      	ldr	r2, [r7, #16]
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	405a      	eors	r2, r3
 801abd6:	697b      	ldr	r3, [r7, #20]
 801abd8:	401a      	ands	r2, r3
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	405a      	eors	r2, r3
 801abde:	683b      	ldr	r3, [r7, #0]
 801abe0:	3304      	adds	r3, #4
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	441a      	add	r2, r3
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	441a      	add	r2, r3
 801abea:	4b96      	ldr	r3, [pc, #600]	@ (801ae44 <mg_md5_transform+0x2c4>)
 801abec:	4413      	add	r3, r2
 801abee:	60bb      	str	r3, [r7, #8]
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	ea4f 5333 	mov.w	r3, r3, ror #20
 801abf6:	60bb      	str	r3, [r7, #8]
 801abf8:	68ba      	ldr	r2, [r7, #8]
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	4413      	add	r3, r2
 801abfe:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801ac00:	697a      	ldr	r2, [r7, #20]
 801ac02:	693b      	ldr	r3, [r7, #16]
 801ac04:	405a      	eors	r2, r3
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	401a      	ands	r2, r3
 801ac0a:	693b      	ldr	r3, [r7, #16]
 801ac0c:	405a      	eors	r2, r3
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	3308      	adds	r3, #8
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	441a      	add	r2, r3
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	441a      	add	r2, r3
 801ac1a:	4b8b      	ldr	r3, [pc, #556]	@ (801ae48 <mg_md5_transform+0x2c8>)
 801ac1c:	4413      	add	r3, r2
 801ac1e:	60fb      	str	r3, [r7, #12]
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801ac26:	60fb      	str	r3, [r7, #12]
 801ac28:	68fa      	ldr	r2, [r7, #12]
 801ac2a:	68bb      	ldr	r3, [r7, #8]
 801ac2c:	4413      	add	r3, r2
 801ac2e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801ac30:	68ba      	ldr	r2, [r7, #8]
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	405a      	eors	r2, r3
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	401a      	ands	r2, r3
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	405a      	eors	r2, r3
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	330c      	adds	r3, #12
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	441a      	add	r2, r3
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	441a      	add	r2, r3
 801ac4a:	4b80      	ldr	r3, [pc, #512]	@ (801ae4c <mg_md5_transform+0x2cc>)
 801ac4c:	4413      	add	r3, r2
 801ac4e:	613b      	str	r3, [r7, #16]
 801ac50:	693b      	ldr	r3, [r7, #16]
 801ac52:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801ac56:	613b      	str	r3, [r7, #16]
 801ac58:	693a      	ldr	r2, [r7, #16]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	4413      	add	r3, r2
 801ac5e:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801ac60:	68fa      	ldr	r2, [r7, #12]
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	405a      	eors	r2, r3
 801ac66:	693b      	ldr	r3, [r7, #16]
 801ac68:	401a      	ands	r2, r3
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	405a      	eors	r2, r3
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	3310      	adds	r3, #16
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	441a      	add	r2, r3
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	441a      	add	r2, r3
 801ac7a:	4b75      	ldr	r3, [pc, #468]	@ (801ae50 <mg_md5_transform+0x2d0>)
 801ac7c:	4413      	add	r3, r2
 801ac7e:	617b      	str	r3, [r7, #20]
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ac86:	617b      	str	r3, [r7, #20]
 801ac88:	697a      	ldr	r2, [r7, #20]
 801ac8a:	693b      	ldr	r3, [r7, #16]
 801ac8c:	4413      	add	r3, r2
 801ac8e:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801ac90:	693a      	ldr	r2, [r7, #16]
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	405a      	eors	r2, r3
 801ac96:	697b      	ldr	r3, [r7, #20]
 801ac98:	401a      	ands	r2, r3
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	405a      	eors	r2, r3
 801ac9e:	683b      	ldr	r3, [r7, #0]
 801aca0:	3314      	adds	r3, #20
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	441a      	add	r2, r3
 801aca6:	68bb      	ldr	r3, [r7, #8]
 801aca8:	441a      	add	r2, r3
 801acaa:	4b6a      	ldr	r3, [pc, #424]	@ (801ae54 <mg_md5_transform+0x2d4>)
 801acac:	4413      	add	r3, r2
 801acae:	60bb      	str	r3, [r7, #8]
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	ea4f 5333 	mov.w	r3, r3, ror #20
 801acb6:	60bb      	str	r3, [r7, #8]
 801acb8:	68ba      	ldr	r2, [r7, #8]
 801acba:	697b      	ldr	r3, [r7, #20]
 801acbc:	4413      	add	r3, r2
 801acbe:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801acc0:	697a      	ldr	r2, [r7, #20]
 801acc2:	693b      	ldr	r3, [r7, #16]
 801acc4:	405a      	eors	r2, r3
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	401a      	ands	r2, r3
 801acca:	693b      	ldr	r3, [r7, #16]
 801accc:	405a      	eors	r2, r3
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	3318      	adds	r3, #24
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	441a      	add	r2, r3
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	441a      	add	r2, r3
 801acda:	4b5f      	ldr	r3, [pc, #380]	@ (801ae58 <mg_md5_transform+0x2d8>)
 801acdc:	4413      	add	r3, r2
 801acde:	60fb      	str	r3, [r7, #12]
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801ace6:	60fb      	str	r3, [r7, #12]
 801ace8:	68fa      	ldr	r2, [r7, #12]
 801acea:	68bb      	ldr	r3, [r7, #8]
 801acec:	4413      	add	r3, r2
 801acee:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801acf0:	68ba      	ldr	r2, [r7, #8]
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	405a      	eors	r2, r3
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	401a      	ands	r2, r3
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	405a      	eors	r2, r3
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	331c      	adds	r3, #28
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	441a      	add	r2, r3
 801ad06:	693b      	ldr	r3, [r7, #16]
 801ad08:	441a      	add	r2, r3
 801ad0a:	4b54      	ldr	r3, [pc, #336]	@ (801ae5c <mg_md5_transform+0x2dc>)
 801ad0c:	4413      	add	r3, r2
 801ad0e:	613b      	str	r3, [r7, #16]
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801ad16:	613b      	str	r3, [r7, #16]
 801ad18:	693a      	ldr	r2, [r7, #16]
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	4413      	add	r3, r2
 801ad1e:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801ad20:	68fa      	ldr	r2, [r7, #12]
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	405a      	eors	r2, r3
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	401a      	ands	r2, r3
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	405a      	eors	r2, r3
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	3320      	adds	r3, #32
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	441a      	add	r2, r3
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	441a      	add	r2, r3
 801ad3a:	4b49      	ldr	r3, [pc, #292]	@ (801ae60 <mg_md5_transform+0x2e0>)
 801ad3c:	4413      	add	r3, r2
 801ad3e:	617b      	str	r3, [r7, #20]
 801ad40:	697b      	ldr	r3, [r7, #20]
 801ad42:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ad46:	617b      	str	r3, [r7, #20]
 801ad48:	697a      	ldr	r2, [r7, #20]
 801ad4a:	693b      	ldr	r3, [r7, #16]
 801ad4c:	4413      	add	r3, r2
 801ad4e:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801ad50:	693a      	ldr	r2, [r7, #16]
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	405a      	eors	r2, r3
 801ad56:	697b      	ldr	r3, [r7, #20]
 801ad58:	401a      	ands	r2, r3
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	405a      	eors	r2, r3
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	3324      	adds	r3, #36	@ 0x24
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	441a      	add	r2, r3
 801ad66:	68bb      	ldr	r3, [r7, #8]
 801ad68:	441a      	add	r2, r3
 801ad6a:	4b3e      	ldr	r3, [pc, #248]	@ (801ae64 <mg_md5_transform+0x2e4>)
 801ad6c:	4413      	add	r3, r2
 801ad6e:	60bb      	str	r3, [r7, #8]
 801ad70:	68bb      	ldr	r3, [r7, #8]
 801ad72:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ad76:	60bb      	str	r3, [r7, #8]
 801ad78:	68ba      	ldr	r2, [r7, #8]
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	4413      	add	r3, r2
 801ad7e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801ad80:	697a      	ldr	r2, [r7, #20]
 801ad82:	693b      	ldr	r3, [r7, #16]
 801ad84:	405a      	eors	r2, r3
 801ad86:	68bb      	ldr	r3, [r7, #8]
 801ad88:	401a      	ands	r2, r3
 801ad8a:	693b      	ldr	r3, [r7, #16]
 801ad8c:	405a      	eors	r2, r3
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	3328      	adds	r3, #40	@ 0x28
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	441a      	add	r2, r3
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	4413      	add	r3, r2
 801ad9a:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801ad9e:	3b4f      	subs	r3, #79	@ 0x4f
 801ada0:	60fb      	str	r3, [r7, #12]
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801ada8:	60fb      	str	r3, [r7, #12]
 801adaa:	68fa      	ldr	r2, [r7, #12]
 801adac:	68bb      	ldr	r3, [r7, #8]
 801adae:	4413      	add	r3, r2
 801adb0:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801adb2:	68ba      	ldr	r2, [r7, #8]
 801adb4:	697b      	ldr	r3, [r7, #20]
 801adb6:	405a      	eors	r2, r3
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	401a      	ands	r2, r3
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	405a      	eors	r2, r3
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	332c      	adds	r3, #44	@ 0x2c
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	441a      	add	r2, r3
 801adc8:	693b      	ldr	r3, [r7, #16]
 801adca:	441a      	add	r2, r3
 801adcc:	4b26      	ldr	r3, [pc, #152]	@ (801ae68 <mg_md5_transform+0x2e8>)
 801adce:	4413      	add	r3, r2
 801add0:	613b      	str	r3, [r7, #16]
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801add8:	613b      	str	r3, [r7, #16]
 801adda:	693a      	ldr	r2, [r7, #16]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	4413      	add	r3, r2
 801ade0:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801ade2:	68fa      	ldr	r2, [r7, #12]
 801ade4:	68bb      	ldr	r3, [r7, #8]
 801ade6:	405a      	eors	r2, r3
 801ade8:	693b      	ldr	r3, [r7, #16]
 801adea:	401a      	ands	r2, r3
 801adec:	68bb      	ldr	r3, [r7, #8]
 801adee:	405a      	eors	r2, r3
 801adf0:	683b      	ldr	r3, [r7, #0]
 801adf2:	3330      	adds	r3, #48	@ 0x30
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	441a      	add	r2, r3
 801adf8:	697b      	ldr	r3, [r7, #20]
 801adfa:	441a      	add	r2, r3
 801adfc:	4b1b      	ldr	r3, [pc, #108]	@ (801ae6c <mg_md5_transform+0x2ec>)
 801adfe:	4413      	add	r3, r2
 801ae00:	617b      	str	r3, [r7, #20]
 801ae02:	697b      	ldr	r3, [r7, #20]
 801ae04:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ae08:	617b      	str	r3, [r7, #20]
 801ae0a:	697a      	ldr	r2, [r7, #20]
 801ae0c:	693b      	ldr	r3, [r7, #16]
 801ae0e:	4413      	add	r3, r2
 801ae10:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801ae12:	693a      	ldr	r2, [r7, #16]
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	405a      	eors	r2, r3
 801ae18:	697b      	ldr	r3, [r7, #20]
 801ae1a:	401a      	ands	r2, r3
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	405a      	eors	r2, r3
 801ae20:	683b      	ldr	r3, [r7, #0]
 801ae22:	3334      	adds	r3, #52	@ 0x34
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	441a      	add	r2, r3
 801ae28:	68bb      	ldr	r3, [r7, #8]
 801ae2a:	441a      	add	r2, r3
 801ae2c:	4b10      	ldr	r3, [pc, #64]	@ (801ae70 <mg_md5_transform+0x2f0>)
 801ae2e:	4413      	add	r3, r2
 801ae30:	60bb      	str	r3, [r7, #8]
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ae38:	60bb      	str	r3, [r7, #8]
 801ae3a:	68ba      	ldr	r2, [r7, #8]
 801ae3c:	e01a      	b.n	801ae74 <mg_md5_transform+0x2f4>
 801ae3e:	bf00      	nop
 801ae40:	d76aa478 	.word	0xd76aa478
 801ae44:	e8c7b756 	.word	0xe8c7b756
 801ae48:	242070db 	.word	0x242070db
 801ae4c:	c1bdceee 	.word	0xc1bdceee
 801ae50:	f57c0faf 	.word	0xf57c0faf
 801ae54:	4787c62a 	.word	0x4787c62a
 801ae58:	a8304613 	.word	0xa8304613
 801ae5c:	fd469501 	.word	0xfd469501
 801ae60:	698098d8 	.word	0x698098d8
 801ae64:	8b44f7af 	.word	0x8b44f7af
 801ae68:	895cd7be 	.word	0x895cd7be
 801ae6c:	6b901122 	.word	0x6b901122
 801ae70:	fd987193 	.word	0xfd987193
 801ae74:	697b      	ldr	r3, [r7, #20]
 801ae76:	4413      	add	r3, r2
 801ae78:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801ae7a:	697a      	ldr	r2, [r7, #20]
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	405a      	eors	r2, r3
 801ae80:	68bb      	ldr	r3, [r7, #8]
 801ae82:	401a      	ands	r2, r3
 801ae84:	693b      	ldr	r3, [r7, #16]
 801ae86:	405a      	eors	r2, r3
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	3338      	adds	r3, #56	@ 0x38
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	441a      	add	r2, r3
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	441a      	add	r2, r3
 801ae94:	4ba0      	ldr	r3, [pc, #640]	@ (801b118 <mg_md5_transform+0x598>)
 801ae96:	4413      	add	r3, r2
 801ae98:	60fb      	str	r3, [r7, #12]
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801aea0:	60fb      	str	r3, [r7, #12]
 801aea2:	68fa      	ldr	r2, [r7, #12]
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	4413      	add	r3, r2
 801aea8:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801aeaa:	68ba      	ldr	r2, [r7, #8]
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	405a      	eors	r2, r3
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	401a      	ands	r2, r3
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	405a      	eors	r2, r3
 801aeb8:	683b      	ldr	r3, [r7, #0]
 801aeba:	333c      	adds	r3, #60	@ 0x3c
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	441a      	add	r2, r3
 801aec0:	693b      	ldr	r3, [r7, #16]
 801aec2:	441a      	add	r2, r3
 801aec4:	4b95      	ldr	r3, [pc, #596]	@ (801b11c <mg_md5_transform+0x59c>)
 801aec6:	4413      	add	r3, r2
 801aec8:	613b      	str	r3, [r7, #16]
 801aeca:	693b      	ldr	r3, [r7, #16]
 801aecc:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801aed0:	613b      	str	r3, [r7, #16]
 801aed2:	693a      	ldr	r2, [r7, #16]
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	4413      	add	r3, r2
 801aed8:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801aeda:	693a      	ldr	r2, [r7, #16]
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	405a      	eors	r2, r3
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	401a      	ands	r2, r3
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	405a      	eors	r2, r3
 801aee8:	683b      	ldr	r3, [r7, #0]
 801aeea:	3304      	adds	r3, #4
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	441a      	add	r2, r3
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	441a      	add	r2, r3
 801aef4:	4b8a      	ldr	r3, [pc, #552]	@ (801b120 <mg_md5_transform+0x5a0>)
 801aef6:	4413      	add	r3, r2
 801aef8:	617b      	str	r3, [r7, #20]
 801aefa:	697b      	ldr	r3, [r7, #20]
 801aefc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801af00:	617b      	str	r3, [r7, #20]
 801af02:	697a      	ldr	r2, [r7, #20]
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	4413      	add	r3, r2
 801af08:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801af0a:	697a      	ldr	r2, [r7, #20]
 801af0c:	693b      	ldr	r3, [r7, #16]
 801af0e:	405a      	eors	r2, r3
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	401a      	ands	r2, r3
 801af14:	693b      	ldr	r3, [r7, #16]
 801af16:	405a      	eors	r2, r3
 801af18:	683b      	ldr	r3, [r7, #0]
 801af1a:	3318      	adds	r3, #24
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	441a      	add	r2, r3
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	441a      	add	r2, r3
 801af24:	4b7f      	ldr	r3, [pc, #508]	@ (801b124 <mg_md5_transform+0x5a4>)
 801af26:	4413      	add	r3, r2
 801af28:	60bb      	str	r3, [r7, #8]
 801af2a:	68bb      	ldr	r3, [r7, #8]
 801af2c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801af30:	60bb      	str	r3, [r7, #8]
 801af32:	68ba      	ldr	r2, [r7, #8]
 801af34:	697b      	ldr	r3, [r7, #20]
 801af36:	4413      	add	r3, r2
 801af38:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801af3a:	68ba      	ldr	r2, [r7, #8]
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	405a      	eors	r2, r3
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	401a      	ands	r2, r3
 801af44:	697b      	ldr	r3, [r7, #20]
 801af46:	405a      	eors	r2, r3
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	332c      	adds	r3, #44	@ 0x2c
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	441a      	add	r2, r3
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	441a      	add	r2, r3
 801af54:	4b74      	ldr	r3, [pc, #464]	@ (801b128 <mg_md5_transform+0x5a8>)
 801af56:	4413      	add	r3, r2
 801af58:	60fb      	str	r3, [r7, #12]
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801af60:	60fb      	str	r3, [r7, #12]
 801af62:	68fa      	ldr	r2, [r7, #12]
 801af64:	68bb      	ldr	r3, [r7, #8]
 801af66:	4413      	add	r3, r2
 801af68:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801af6a:	68fa      	ldr	r2, [r7, #12]
 801af6c:	68bb      	ldr	r3, [r7, #8]
 801af6e:	405a      	eors	r2, r3
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	401a      	ands	r2, r3
 801af74:	68bb      	ldr	r3, [r7, #8]
 801af76:	405a      	eors	r2, r3
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	441a      	add	r2, r3
 801af7e:	693b      	ldr	r3, [r7, #16]
 801af80:	441a      	add	r2, r3
 801af82:	4b6a      	ldr	r3, [pc, #424]	@ (801b12c <mg_md5_transform+0x5ac>)
 801af84:	4413      	add	r3, r2
 801af86:	613b      	str	r3, [r7, #16]
 801af88:	693b      	ldr	r3, [r7, #16]
 801af8a:	ea4f 3333 	mov.w	r3, r3, ror #12
 801af8e:	613b      	str	r3, [r7, #16]
 801af90:	693a      	ldr	r2, [r7, #16]
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	4413      	add	r3, r2
 801af96:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801af98:	693a      	ldr	r2, [r7, #16]
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	405a      	eors	r2, r3
 801af9e:	68bb      	ldr	r3, [r7, #8]
 801afa0:	401a      	ands	r2, r3
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	405a      	eors	r2, r3
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	3314      	adds	r3, #20
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	441a      	add	r2, r3
 801afae:	697b      	ldr	r3, [r7, #20]
 801afb0:	441a      	add	r2, r3
 801afb2:	4b5f      	ldr	r3, [pc, #380]	@ (801b130 <mg_md5_transform+0x5b0>)
 801afb4:	4413      	add	r3, r2
 801afb6:	617b      	str	r3, [r7, #20]
 801afb8:	697b      	ldr	r3, [r7, #20]
 801afba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801afbe:	617b      	str	r3, [r7, #20]
 801afc0:	697a      	ldr	r2, [r7, #20]
 801afc2:	693b      	ldr	r3, [r7, #16]
 801afc4:	4413      	add	r3, r2
 801afc6:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801afc8:	697a      	ldr	r2, [r7, #20]
 801afca:	693b      	ldr	r3, [r7, #16]
 801afcc:	405a      	eors	r2, r3
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	401a      	ands	r2, r3
 801afd2:	693b      	ldr	r3, [r7, #16]
 801afd4:	405a      	eors	r2, r3
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	3328      	adds	r3, #40	@ 0x28
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	441a      	add	r2, r3
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	441a      	add	r2, r3
 801afe2:	4b54      	ldr	r3, [pc, #336]	@ (801b134 <mg_md5_transform+0x5b4>)
 801afe4:	4413      	add	r3, r2
 801afe6:	60bb      	str	r3, [r7, #8]
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801afee:	60bb      	str	r3, [r7, #8]
 801aff0:	68ba      	ldr	r2, [r7, #8]
 801aff2:	697b      	ldr	r3, [r7, #20]
 801aff4:	4413      	add	r3, r2
 801aff6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801aff8:	68ba      	ldr	r2, [r7, #8]
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	405a      	eors	r2, r3
 801affe:	693b      	ldr	r3, [r7, #16]
 801b000:	401a      	ands	r2, r3
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	405a      	eors	r2, r3
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	333c      	adds	r3, #60	@ 0x3c
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	441a      	add	r2, r3
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	441a      	add	r2, r3
 801b012:	4b49      	ldr	r3, [pc, #292]	@ (801b138 <mg_md5_transform+0x5b8>)
 801b014:	4413      	add	r3, r2
 801b016:	60fb      	str	r3, [r7, #12]
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b01e:	60fb      	str	r3, [r7, #12]
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	4413      	add	r3, r2
 801b026:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801b028:	68fa      	ldr	r2, [r7, #12]
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	405a      	eors	r2, r3
 801b02e:	697b      	ldr	r3, [r7, #20]
 801b030:	401a      	ands	r2, r3
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	405a      	eors	r2, r3
 801b036:	683b      	ldr	r3, [r7, #0]
 801b038:	3310      	adds	r3, #16
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	441a      	add	r2, r3
 801b03e:	693b      	ldr	r3, [r7, #16]
 801b040:	441a      	add	r2, r3
 801b042:	4b3e      	ldr	r3, [pc, #248]	@ (801b13c <mg_md5_transform+0x5bc>)
 801b044:	4413      	add	r3, r2
 801b046:	613b      	str	r3, [r7, #16]
 801b048:	693b      	ldr	r3, [r7, #16]
 801b04a:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b04e:	613b      	str	r3, [r7, #16]
 801b050:	693a      	ldr	r2, [r7, #16]
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	4413      	add	r3, r2
 801b056:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801b058:	693a      	ldr	r2, [r7, #16]
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	405a      	eors	r2, r3
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	401a      	ands	r2, r3
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	405a      	eors	r2, r3
 801b066:	683b      	ldr	r3, [r7, #0]
 801b068:	3324      	adds	r3, #36	@ 0x24
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	441a      	add	r2, r3
 801b06e:	697b      	ldr	r3, [r7, #20]
 801b070:	441a      	add	r2, r3
 801b072:	4b33      	ldr	r3, [pc, #204]	@ (801b140 <mg_md5_transform+0x5c0>)
 801b074:	4413      	add	r3, r2
 801b076:	617b      	str	r3, [r7, #20]
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b07e:	617b      	str	r3, [r7, #20]
 801b080:	697a      	ldr	r2, [r7, #20]
 801b082:	693b      	ldr	r3, [r7, #16]
 801b084:	4413      	add	r3, r2
 801b086:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801b088:	697a      	ldr	r2, [r7, #20]
 801b08a:	693b      	ldr	r3, [r7, #16]
 801b08c:	405a      	eors	r2, r3
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	401a      	ands	r2, r3
 801b092:	693b      	ldr	r3, [r7, #16]
 801b094:	405a      	eors	r2, r3
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	3338      	adds	r3, #56	@ 0x38
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	441a      	add	r2, r3
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	441a      	add	r2, r3
 801b0a2:	4b28      	ldr	r3, [pc, #160]	@ (801b144 <mg_md5_transform+0x5c4>)
 801b0a4:	4413      	add	r3, r2
 801b0a6:	60bb      	str	r3, [r7, #8]
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b0ae:	60bb      	str	r3, [r7, #8]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	4413      	add	r3, r2
 801b0b6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801b0b8:	68ba      	ldr	r2, [r7, #8]
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	405a      	eors	r2, r3
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	401a      	ands	r2, r3
 801b0c2:	697b      	ldr	r3, [r7, #20]
 801b0c4:	405a      	eors	r2, r3
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	330c      	adds	r3, #12
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	441a      	add	r2, r3
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	441a      	add	r2, r3
 801b0d2:	4b1d      	ldr	r3, [pc, #116]	@ (801b148 <mg_md5_transform+0x5c8>)
 801b0d4:	4413      	add	r3, r2
 801b0d6:	60fb      	str	r3, [r7, #12]
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b0de:	60fb      	str	r3, [r7, #12]
 801b0e0:	68fa      	ldr	r2, [r7, #12]
 801b0e2:	68bb      	ldr	r3, [r7, #8]
 801b0e4:	4413      	add	r3, r2
 801b0e6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	68bb      	ldr	r3, [r7, #8]
 801b0ec:	405a      	eors	r2, r3
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	401a      	ands	r2, r3
 801b0f2:	68bb      	ldr	r3, [r7, #8]
 801b0f4:	405a      	eors	r2, r3
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	3320      	adds	r3, #32
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	441a      	add	r2, r3
 801b0fe:	693b      	ldr	r3, [r7, #16]
 801b100:	441a      	add	r2, r3
 801b102:	4b12      	ldr	r3, [pc, #72]	@ (801b14c <mg_md5_transform+0x5cc>)
 801b104:	4413      	add	r3, r2
 801b106:	613b      	str	r3, [r7, #16]
 801b108:	693b      	ldr	r3, [r7, #16]
 801b10a:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b10e:	613b      	str	r3, [r7, #16]
 801b110:	693a      	ldr	r2, [r7, #16]
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	e01c      	b.n	801b150 <mg_md5_transform+0x5d0>
 801b116:	bf00      	nop
 801b118:	a679438e 	.word	0xa679438e
 801b11c:	49b40821 	.word	0x49b40821
 801b120:	f61e2562 	.word	0xf61e2562
 801b124:	c040b340 	.word	0xc040b340
 801b128:	265e5a51 	.word	0x265e5a51
 801b12c:	e9b6c7aa 	.word	0xe9b6c7aa
 801b130:	d62f105d 	.word	0xd62f105d
 801b134:	02441453 	.word	0x02441453
 801b138:	d8a1e681 	.word	0xd8a1e681
 801b13c:	e7d3fbc8 	.word	0xe7d3fbc8
 801b140:	21e1cde6 	.word	0x21e1cde6
 801b144:	c33707d6 	.word	0xc33707d6
 801b148:	f4d50d87 	.word	0xf4d50d87
 801b14c:	455a14ed 	.word	0x455a14ed
 801b150:	4413      	add	r3, r2
 801b152:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801b154:	693a      	ldr	r2, [r7, #16]
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	405a      	eors	r2, r3
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	401a      	ands	r2, r3
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	405a      	eors	r2, r3
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	3334      	adds	r3, #52	@ 0x34
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	441a      	add	r2, r3
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	441a      	add	r2, r3
 801b16e:	4ba1      	ldr	r3, [pc, #644]	@ (801b3f4 <mg_md5_transform+0x874>)
 801b170:	4413      	add	r3, r2
 801b172:	617b      	str	r3, [r7, #20]
 801b174:	697b      	ldr	r3, [r7, #20]
 801b176:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b17a:	617b      	str	r3, [r7, #20]
 801b17c:	697a      	ldr	r2, [r7, #20]
 801b17e:	693b      	ldr	r3, [r7, #16]
 801b180:	4413      	add	r3, r2
 801b182:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801b184:	697a      	ldr	r2, [r7, #20]
 801b186:	693b      	ldr	r3, [r7, #16]
 801b188:	405a      	eors	r2, r3
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	401a      	ands	r2, r3
 801b18e:	693b      	ldr	r3, [r7, #16]
 801b190:	405a      	eors	r2, r3
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	3308      	adds	r3, #8
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	441a      	add	r2, r3
 801b19a:	68bb      	ldr	r3, [r7, #8]
 801b19c:	441a      	add	r2, r3
 801b19e:	4b96      	ldr	r3, [pc, #600]	@ (801b3f8 <mg_md5_transform+0x878>)
 801b1a0:	4413      	add	r3, r2
 801b1a2:	60bb      	str	r3, [r7, #8]
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b1aa:	60bb      	str	r3, [r7, #8]
 801b1ac:	68ba      	ldr	r2, [r7, #8]
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	4413      	add	r3, r2
 801b1b2:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801b1b4:	68ba      	ldr	r2, [r7, #8]
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	405a      	eors	r2, r3
 801b1ba:	693b      	ldr	r3, [r7, #16]
 801b1bc:	401a      	ands	r2, r3
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	405a      	eors	r2, r3
 801b1c2:	683b      	ldr	r3, [r7, #0]
 801b1c4:	331c      	adds	r3, #28
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	441a      	add	r2, r3
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	441a      	add	r2, r3
 801b1ce:	4b8b      	ldr	r3, [pc, #556]	@ (801b3fc <mg_md5_transform+0x87c>)
 801b1d0:	4413      	add	r3, r2
 801b1d2:	60fb      	str	r3, [r7, #12]
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b1da:	60fb      	str	r3, [r7, #12]
 801b1dc:	68fa      	ldr	r2, [r7, #12]
 801b1de:	68bb      	ldr	r3, [r7, #8]
 801b1e0:	4413      	add	r3, r2
 801b1e2:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801b1e4:	68fa      	ldr	r2, [r7, #12]
 801b1e6:	68bb      	ldr	r3, [r7, #8]
 801b1e8:	405a      	eors	r2, r3
 801b1ea:	697b      	ldr	r3, [r7, #20]
 801b1ec:	401a      	ands	r2, r3
 801b1ee:	68bb      	ldr	r3, [r7, #8]
 801b1f0:	405a      	eors	r2, r3
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	3330      	adds	r3, #48	@ 0x30
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	441a      	add	r2, r3
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	441a      	add	r2, r3
 801b1fe:	4b80      	ldr	r3, [pc, #512]	@ (801b400 <mg_md5_transform+0x880>)
 801b200:	4413      	add	r3, r2
 801b202:	613b      	str	r3, [r7, #16]
 801b204:	693b      	ldr	r3, [r7, #16]
 801b206:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b20a:	613b      	str	r3, [r7, #16]
 801b20c:	693a      	ldr	r2, [r7, #16]
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	4413      	add	r3, r2
 801b212:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801b214:	693a      	ldr	r2, [r7, #16]
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	405a      	eors	r2, r3
 801b21a:	68bb      	ldr	r3, [r7, #8]
 801b21c:	405a      	eors	r2, r3
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	3314      	adds	r3, #20
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	441a      	add	r2, r3
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	4413      	add	r3, r2
 801b22a:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801b22e:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801b232:	617b      	str	r3, [r7, #20]
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b23a:	617b      	str	r3, [r7, #20]
 801b23c:	697a      	ldr	r2, [r7, #20]
 801b23e:	693b      	ldr	r3, [r7, #16]
 801b240:	4413      	add	r3, r2
 801b242:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801b244:	697a      	ldr	r2, [r7, #20]
 801b246:	693b      	ldr	r3, [r7, #16]
 801b248:	405a      	eors	r2, r3
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	405a      	eors	r2, r3
 801b24e:	683b      	ldr	r3, [r7, #0]
 801b250:	3320      	adds	r3, #32
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	441a      	add	r2, r3
 801b256:	68bb      	ldr	r3, [r7, #8]
 801b258:	441a      	add	r2, r3
 801b25a:	4b6a      	ldr	r3, [pc, #424]	@ (801b404 <mg_md5_transform+0x884>)
 801b25c:	4413      	add	r3, r2
 801b25e:	60bb      	str	r3, [r7, #8]
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b266:	60bb      	str	r3, [r7, #8]
 801b268:	68ba      	ldr	r2, [r7, #8]
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	4413      	add	r3, r2
 801b26e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801b270:	68ba      	ldr	r2, [r7, #8]
 801b272:	697b      	ldr	r3, [r7, #20]
 801b274:	405a      	eors	r2, r3
 801b276:	693b      	ldr	r3, [r7, #16]
 801b278:	405a      	eors	r2, r3
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	332c      	adds	r3, #44	@ 0x2c
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	441a      	add	r2, r3
 801b282:	68fb      	ldr	r3, [r7, #12]
 801b284:	441a      	add	r2, r3
 801b286:	4b60      	ldr	r3, [pc, #384]	@ (801b408 <mg_md5_transform+0x888>)
 801b288:	4413      	add	r3, r2
 801b28a:	60fb      	str	r3, [r7, #12]
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b292:	60fb      	str	r3, [r7, #12]
 801b294:	68fa      	ldr	r2, [r7, #12]
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	4413      	add	r3, r2
 801b29a:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801b29c:	68fa      	ldr	r2, [r7, #12]
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	405a      	eors	r2, r3
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	405a      	eors	r2, r3
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	3338      	adds	r3, #56	@ 0x38
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	441a      	add	r2, r3
 801b2ae:	693b      	ldr	r3, [r7, #16]
 801b2b0:	441a      	add	r2, r3
 801b2b2:	4b56      	ldr	r3, [pc, #344]	@ (801b40c <mg_md5_transform+0x88c>)
 801b2b4:	4413      	add	r3, r2
 801b2b6:	613b      	str	r3, [r7, #16]
 801b2b8:	693b      	ldr	r3, [r7, #16]
 801b2ba:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b2be:	613b      	str	r3, [r7, #16]
 801b2c0:	693a      	ldr	r2, [r7, #16]
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	4413      	add	r3, r2
 801b2c6:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801b2c8:	693a      	ldr	r2, [r7, #16]
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	405a      	eors	r2, r3
 801b2ce:	68bb      	ldr	r3, [r7, #8]
 801b2d0:	405a      	eors	r2, r3
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	3304      	adds	r3, #4
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	441a      	add	r2, r3
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	441a      	add	r2, r3
 801b2de:	4b4c      	ldr	r3, [pc, #304]	@ (801b410 <mg_md5_transform+0x890>)
 801b2e0:	4413      	add	r3, r2
 801b2e2:	617b      	str	r3, [r7, #20]
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b2ea:	617b      	str	r3, [r7, #20]
 801b2ec:	697a      	ldr	r2, [r7, #20]
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	4413      	add	r3, r2
 801b2f2:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801b2f4:	697a      	ldr	r2, [r7, #20]
 801b2f6:	693b      	ldr	r3, [r7, #16]
 801b2f8:	405a      	eors	r2, r3
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	405a      	eors	r2, r3
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	3310      	adds	r3, #16
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	441a      	add	r2, r3
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	441a      	add	r2, r3
 801b30a:	4b42      	ldr	r3, [pc, #264]	@ (801b414 <mg_md5_transform+0x894>)
 801b30c:	4413      	add	r3, r2
 801b30e:	60bb      	str	r3, [r7, #8]
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b316:	60bb      	str	r3, [r7, #8]
 801b318:	68ba      	ldr	r2, [r7, #8]
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	4413      	add	r3, r2
 801b31e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801b320:	68ba      	ldr	r2, [r7, #8]
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	405a      	eors	r2, r3
 801b326:	693b      	ldr	r3, [r7, #16]
 801b328:	405a      	eors	r2, r3
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	331c      	adds	r3, #28
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	441a      	add	r2, r3
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	441a      	add	r2, r3
 801b336:	4b38      	ldr	r3, [pc, #224]	@ (801b418 <mg_md5_transform+0x898>)
 801b338:	4413      	add	r3, r2
 801b33a:	60fb      	str	r3, [r7, #12]
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b342:	60fb      	str	r3, [r7, #12]
 801b344:	68fa      	ldr	r2, [r7, #12]
 801b346:	68bb      	ldr	r3, [r7, #8]
 801b348:	4413      	add	r3, r2
 801b34a:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	405a      	eors	r2, r3
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	405a      	eors	r2, r3
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	3328      	adds	r3, #40	@ 0x28
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	441a      	add	r2, r3
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	441a      	add	r2, r3
 801b362:	4b2e      	ldr	r3, [pc, #184]	@ (801b41c <mg_md5_transform+0x89c>)
 801b364:	4413      	add	r3, r2
 801b366:	613b      	str	r3, [r7, #16]
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b36e:	613b      	str	r3, [r7, #16]
 801b370:	693a      	ldr	r2, [r7, #16]
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	4413      	add	r3, r2
 801b376:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801b378:	693a      	ldr	r2, [r7, #16]
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	405a      	eors	r2, r3
 801b37e:	68bb      	ldr	r3, [r7, #8]
 801b380:	405a      	eors	r2, r3
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	3334      	adds	r3, #52	@ 0x34
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	441a      	add	r2, r3
 801b38a:	697b      	ldr	r3, [r7, #20]
 801b38c:	441a      	add	r2, r3
 801b38e:	4b24      	ldr	r3, [pc, #144]	@ (801b420 <mg_md5_transform+0x8a0>)
 801b390:	4413      	add	r3, r2
 801b392:	617b      	str	r3, [r7, #20]
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b39a:	617b      	str	r3, [r7, #20]
 801b39c:	697a      	ldr	r2, [r7, #20]
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	4413      	add	r3, r2
 801b3a2:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801b3a4:	697a      	ldr	r2, [r7, #20]
 801b3a6:	693b      	ldr	r3, [r7, #16]
 801b3a8:	405a      	eors	r2, r3
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	405a      	eors	r2, r3
 801b3ae:	683b      	ldr	r3, [r7, #0]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	441a      	add	r2, r3
 801b3b4:	68bb      	ldr	r3, [r7, #8]
 801b3b6:	441a      	add	r2, r3
 801b3b8:	4b1a      	ldr	r3, [pc, #104]	@ (801b424 <mg_md5_transform+0x8a4>)
 801b3ba:	4413      	add	r3, r2
 801b3bc:	60bb      	str	r3, [r7, #8]
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b3c4:	60bb      	str	r3, [r7, #8]
 801b3c6:	68ba      	ldr	r2, [r7, #8]
 801b3c8:	697b      	ldr	r3, [r7, #20]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801b3ce:	68ba      	ldr	r2, [r7, #8]
 801b3d0:	697b      	ldr	r3, [r7, #20]
 801b3d2:	405a      	eors	r2, r3
 801b3d4:	693b      	ldr	r3, [r7, #16]
 801b3d6:	405a      	eors	r2, r3
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	330c      	adds	r3, #12
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	441a      	add	r2, r3
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	441a      	add	r2, r3
 801b3e4:	4b10      	ldr	r3, [pc, #64]	@ (801b428 <mg_md5_transform+0x8a8>)
 801b3e6:	4413      	add	r3, r2
 801b3e8:	60fb      	str	r3, [r7, #12]
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b3f0:	e01c      	b.n	801b42c <mg_md5_transform+0x8ac>
 801b3f2:	bf00      	nop
 801b3f4:	a9e3e905 	.word	0xa9e3e905
 801b3f8:	fcefa3f8 	.word	0xfcefa3f8
 801b3fc:	676f02d9 	.word	0x676f02d9
 801b400:	8d2a4c8a 	.word	0x8d2a4c8a
 801b404:	8771f681 	.word	0x8771f681
 801b408:	6d9d6122 	.word	0x6d9d6122
 801b40c:	fde5380c 	.word	0xfde5380c
 801b410:	a4beea44 	.word	0xa4beea44
 801b414:	4bdecfa9 	.word	0x4bdecfa9
 801b418:	f6bb4b60 	.word	0xf6bb4b60
 801b41c:	bebfbc70 	.word	0xbebfbc70
 801b420:	289b7ec6 	.word	0x289b7ec6
 801b424:	eaa127fa 	.word	0xeaa127fa
 801b428:	d4ef3085 	.word	0xd4ef3085
 801b42c:	60fb      	str	r3, [r7, #12]
 801b42e:	68fa      	ldr	r2, [r7, #12]
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	4413      	add	r3, r2
 801b434:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801b436:	68fa      	ldr	r2, [r7, #12]
 801b438:	68bb      	ldr	r3, [r7, #8]
 801b43a:	405a      	eors	r2, r3
 801b43c:	697b      	ldr	r3, [r7, #20]
 801b43e:	405a      	eors	r2, r3
 801b440:	683b      	ldr	r3, [r7, #0]
 801b442:	3318      	adds	r3, #24
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	441a      	add	r2, r3
 801b448:	693b      	ldr	r3, [r7, #16]
 801b44a:	441a      	add	r2, r3
 801b44c:	4ba1      	ldr	r3, [pc, #644]	@ (801b6d4 <mg_md5_transform+0xb54>)
 801b44e:	4413      	add	r3, r2
 801b450:	613b      	str	r3, [r7, #16]
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b458:	613b      	str	r3, [r7, #16]
 801b45a:	693a      	ldr	r2, [r7, #16]
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	4413      	add	r3, r2
 801b460:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801b462:	693a      	ldr	r2, [r7, #16]
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	405a      	eors	r2, r3
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	405a      	eors	r2, r3
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	3324      	adds	r3, #36	@ 0x24
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	441a      	add	r2, r3
 801b474:	697b      	ldr	r3, [r7, #20]
 801b476:	441a      	add	r2, r3
 801b478:	4b97      	ldr	r3, [pc, #604]	@ (801b6d8 <mg_md5_transform+0xb58>)
 801b47a:	4413      	add	r3, r2
 801b47c:	617b      	str	r3, [r7, #20]
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b484:	617b      	str	r3, [r7, #20]
 801b486:	697a      	ldr	r2, [r7, #20]
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	4413      	add	r3, r2
 801b48c:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801b48e:	697a      	ldr	r2, [r7, #20]
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	405a      	eors	r2, r3
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	405a      	eors	r2, r3
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	3330      	adds	r3, #48	@ 0x30
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	441a      	add	r2, r3
 801b4a0:	68bb      	ldr	r3, [r7, #8]
 801b4a2:	441a      	add	r2, r3
 801b4a4:	4b8d      	ldr	r3, [pc, #564]	@ (801b6dc <mg_md5_transform+0xb5c>)
 801b4a6:	4413      	add	r3, r2
 801b4a8:	60bb      	str	r3, [r7, #8]
 801b4aa:	68bb      	ldr	r3, [r7, #8]
 801b4ac:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b4b0:	60bb      	str	r3, [r7, #8]
 801b4b2:	68ba      	ldr	r2, [r7, #8]
 801b4b4:	697b      	ldr	r3, [r7, #20]
 801b4b6:	4413      	add	r3, r2
 801b4b8:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801b4ba:	68ba      	ldr	r2, [r7, #8]
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	405a      	eors	r2, r3
 801b4c0:	693b      	ldr	r3, [r7, #16]
 801b4c2:	405a      	eors	r2, r3
 801b4c4:	683b      	ldr	r3, [r7, #0]
 801b4c6:	333c      	adds	r3, #60	@ 0x3c
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	441a      	add	r2, r3
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	441a      	add	r2, r3
 801b4d0:	4b83      	ldr	r3, [pc, #524]	@ (801b6e0 <mg_md5_transform+0xb60>)
 801b4d2:	4413      	add	r3, r2
 801b4d4:	60fb      	str	r3, [r7, #12]
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b4dc:	60fb      	str	r3, [r7, #12]
 801b4de:	68fa      	ldr	r2, [r7, #12]
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	4413      	add	r3, r2
 801b4e4:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801b4e6:	68fa      	ldr	r2, [r7, #12]
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	405a      	eors	r2, r3
 801b4ec:	697b      	ldr	r3, [r7, #20]
 801b4ee:	405a      	eors	r2, r3
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	3308      	adds	r3, #8
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	441a      	add	r2, r3
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	441a      	add	r2, r3
 801b4fc:	4b79      	ldr	r3, [pc, #484]	@ (801b6e4 <mg_md5_transform+0xb64>)
 801b4fe:	4413      	add	r3, r2
 801b500:	613b      	str	r3, [r7, #16]
 801b502:	693b      	ldr	r3, [r7, #16]
 801b504:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b508:	613b      	str	r3, [r7, #16]
 801b50a:	693a      	ldr	r2, [r7, #16]
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	4413      	add	r3, r2
 801b510:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	43da      	mvns	r2, r3
 801b516:	693b      	ldr	r3, [r7, #16]
 801b518:	431a      	orrs	r2, r3
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	405a      	eors	r2, r3
 801b51e:	683b      	ldr	r3, [r7, #0]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	441a      	add	r2, r3
 801b524:	697b      	ldr	r3, [r7, #20]
 801b526:	441a      	add	r2, r3
 801b528:	4b6f      	ldr	r3, [pc, #444]	@ (801b6e8 <mg_md5_transform+0xb68>)
 801b52a:	4413      	add	r3, r2
 801b52c:	617b      	str	r3, [r7, #20]
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801b534:	617b      	str	r3, [r7, #20]
 801b536:	697a      	ldr	r2, [r7, #20]
 801b538:	693b      	ldr	r3, [r7, #16]
 801b53a:	4413      	add	r3, r2
 801b53c:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	43da      	mvns	r2, r3
 801b542:	697b      	ldr	r3, [r7, #20]
 801b544:	431a      	orrs	r2, r3
 801b546:	693b      	ldr	r3, [r7, #16]
 801b548:	405a      	eors	r2, r3
 801b54a:	683b      	ldr	r3, [r7, #0]
 801b54c:	331c      	adds	r3, #28
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	441a      	add	r2, r3
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	441a      	add	r2, r3
 801b556:	4b65      	ldr	r3, [pc, #404]	@ (801b6ec <mg_md5_transform+0xb6c>)
 801b558:	4413      	add	r3, r2
 801b55a:	60bb      	str	r3, [r7, #8]
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801b562:	60bb      	str	r3, [r7, #8]
 801b564:	68ba      	ldr	r2, [r7, #8]
 801b566:	697b      	ldr	r3, [r7, #20]
 801b568:	4413      	add	r3, r2
 801b56a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801b56c:	693b      	ldr	r3, [r7, #16]
 801b56e:	43da      	mvns	r2, r3
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	431a      	orrs	r2, r3
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	405a      	eors	r2, r3
 801b578:	683b      	ldr	r3, [r7, #0]
 801b57a:	3338      	adds	r3, #56	@ 0x38
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	441a      	add	r2, r3
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	441a      	add	r2, r3
 801b584:	4b5a      	ldr	r3, [pc, #360]	@ (801b6f0 <mg_md5_transform+0xb70>)
 801b586:	4413      	add	r3, r2
 801b588:	60fb      	str	r3, [r7, #12]
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b590:	60fb      	str	r3, [r7, #12]
 801b592:	68fa      	ldr	r2, [r7, #12]
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	4413      	add	r3, r2
 801b598:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801b59a:	697b      	ldr	r3, [r7, #20]
 801b59c:	43da      	mvns	r2, r3
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	431a      	orrs	r2, r3
 801b5a2:	68bb      	ldr	r3, [r7, #8]
 801b5a4:	405a      	eors	r2, r3
 801b5a6:	683b      	ldr	r3, [r7, #0]
 801b5a8:	3314      	adds	r3, #20
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	441a      	add	r2, r3
 801b5ae:	693b      	ldr	r3, [r7, #16]
 801b5b0:	441a      	add	r2, r3
 801b5b2:	4b50      	ldr	r3, [pc, #320]	@ (801b6f4 <mg_md5_transform+0xb74>)
 801b5b4:	4413      	add	r3, r2
 801b5b6:	613b      	str	r3, [r7, #16]
 801b5b8:	693b      	ldr	r3, [r7, #16]
 801b5ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801b5be:	613b      	str	r3, [r7, #16]
 801b5c0:	693a      	ldr	r2, [r7, #16]
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	43da      	mvns	r2, r3
 801b5cc:	693b      	ldr	r3, [r7, #16]
 801b5ce:	431a      	orrs	r2, r3
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	405a      	eors	r2, r3
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	3330      	adds	r3, #48	@ 0x30
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	441a      	add	r2, r3
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	441a      	add	r2, r3
 801b5e0:	4b45      	ldr	r3, [pc, #276]	@ (801b6f8 <mg_md5_transform+0xb78>)
 801b5e2:	4413      	add	r3, r2
 801b5e4:	617b      	str	r3, [r7, #20]
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801b5ec:	617b      	str	r3, [r7, #20]
 801b5ee:	697a      	ldr	r2, [r7, #20]
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	4413      	add	r3, r2
 801b5f4:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	43da      	mvns	r2, r3
 801b5fa:	697b      	ldr	r3, [r7, #20]
 801b5fc:	431a      	orrs	r2, r3
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	405a      	eors	r2, r3
 801b602:	683b      	ldr	r3, [r7, #0]
 801b604:	330c      	adds	r3, #12
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	441a      	add	r2, r3
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	441a      	add	r2, r3
 801b60e:	4b3b      	ldr	r3, [pc, #236]	@ (801b6fc <mg_md5_transform+0xb7c>)
 801b610:	4413      	add	r3, r2
 801b612:	60bb      	str	r3, [r7, #8]
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801b61a:	60bb      	str	r3, [r7, #8]
 801b61c:	68ba      	ldr	r2, [r7, #8]
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	4413      	add	r3, r2
 801b622:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801b624:	693b      	ldr	r3, [r7, #16]
 801b626:	43da      	mvns	r2, r3
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	431a      	orrs	r2, r3
 801b62c:	697b      	ldr	r3, [r7, #20]
 801b62e:	405a      	eors	r2, r3
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	3328      	adds	r3, #40	@ 0x28
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	441a      	add	r2, r3
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	4413      	add	r3, r2
 801b63c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801b640:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 801b644:	60fb      	str	r3, [r7, #12]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b64c:	60fb      	str	r3, [r7, #12]
 801b64e:	68fa      	ldr	r2, [r7, #12]
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	4413      	add	r3, r2
 801b654:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801b656:	697b      	ldr	r3, [r7, #20]
 801b658:	43da      	mvns	r2, r3
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	431a      	orrs	r2, r3
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	405a      	eors	r2, r3
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	3304      	adds	r3, #4
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	441a      	add	r2, r3
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	441a      	add	r2, r3
 801b66e:	4b24      	ldr	r3, [pc, #144]	@ (801b700 <mg_md5_transform+0xb80>)
 801b670:	4413      	add	r3, r2
 801b672:	613b      	str	r3, [r7, #16]
 801b674:	693b      	ldr	r3, [r7, #16]
 801b676:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801b67a:	613b      	str	r3, [r7, #16]
 801b67c:	693a      	ldr	r2, [r7, #16]
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	4413      	add	r3, r2
 801b682:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	43da      	mvns	r2, r3
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	431a      	orrs	r2, r3
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	405a      	eors	r2, r3
 801b690:	683b      	ldr	r3, [r7, #0]
 801b692:	3320      	adds	r3, #32
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	441a      	add	r2, r3
 801b698:	697b      	ldr	r3, [r7, #20]
 801b69a:	441a      	add	r2, r3
 801b69c:	4b19      	ldr	r3, [pc, #100]	@ (801b704 <mg_md5_transform+0xb84>)
 801b69e:	4413      	add	r3, r2
 801b6a0:	617b      	str	r3, [r7, #20]
 801b6a2:	697b      	ldr	r3, [r7, #20]
 801b6a4:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801b6a8:	617b      	str	r3, [r7, #20]
 801b6aa:	697a      	ldr	r2, [r7, #20]
 801b6ac:	693b      	ldr	r3, [r7, #16]
 801b6ae:	4413      	add	r3, r2
 801b6b0:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	43da      	mvns	r2, r3
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	431a      	orrs	r2, r3
 801b6ba:	693b      	ldr	r3, [r7, #16]
 801b6bc:	405a      	eors	r2, r3
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	333c      	adds	r3, #60	@ 0x3c
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	441a      	add	r2, r3
 801b6c6:	68bb      	ldr	r3, [r7, #8]
 801b6c8:	441a      	add	r2, r3
 801b6ca:	4b0f      	ldr	r3, [pc, #60]	@ (801b708 <mg_md5_transform+0xb88>)
 801b6cc:	4413      	add	r3, r2
 801b6ce:	60bb      	str	r3, [r7, #8]
 801b6d0:	68bb      	ldr	r3, [r7, #8]
 801b6d2:	e01b      	b.n	801b70c <mg_md5_transform+0xb8c>
 801b6d4:	04881d05 	.word	0x04881d05
 801b6d8:	d9d4d039 	.word	0xd9d4d039
 801b6dc:	e6db99e5 	.word	0xe6db99e5
 801b6e0:	1fa27cf8 	.word	0x1fa27cf8
 801b6e4:	c4ac5665 	.word	0xc4ac5665
 801b6e8:	f4292244 	.word	0xf4292244
 801b6ec:	432aff97 	.word	0x432aff97
 801b6f0:	ab9423a7 	.word	0xab9423a7
 801b6f4:	fc93a039 	.word	0xfc93a039
 801b6f8:	655b59c3 	.word	0x655b59c3
 801b6fc:	8f0ccc92 	.word	0x8f0ccc92
 801b700:	85845dd1 	.word	0x85845dd1
 801b704:	6fa87e4f 	.word	0x6fa87e4f
 801b708:	fe2ce6e0 	.word	0xfe2ce6e0
 801b70c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801b710:	60bb      	str	r3, [r7, #8]
 801b712:	68ba      	ldr	r2, [r7, #8]
 801b714:	697b      	ldr	r3, [r7, #20]
 801b716:	4413      	add	r3, r2
 801b718:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801b71a:	693b      	ldr	r3, [r7, #16]
 801b71c:	43da      	mvns	r2, r3
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	431a      	orrs	r2, r3
 801b722:	697b      	ldr	r3, [r7, #20]
 801b724:	405a      	eors	r2, r3
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	3318      	adds	r3, #24
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	441a      	add	r2, r3
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	441a      	add	r2, r3
 801b732:	4b51      	ldr	r3, [pc, #324]	@ (801b878 <mg_md5_transform+0xcf8>)
 801b734:	4413      	add	r3, r2
 801b736:	60fb      	str	r3, [r7, #12]
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b73e:	60fb      	str	r3, [r7, #12]
 801b740:	68fa      	ldr	r2, [r7, #12]
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	4413      	add	r3, r2
 801b746:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801b748:	697b      	ldr	r3, [r7, #20]
 801b74a:	43da      	mvns	r2, r3
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	431a      	orrs	r2, r3
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	405a      	eors	r2, r3
 801b754:	683b      	ldr	r3, [r7, #0]
 801b756:	3334      	adds	r3, #52	@ 0x34
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	441a      	add	r2, r3
 801b75c:	693b      	ldr	r3, [r7, #16]
 801b75e:	441a      	add	r2, r3
 801b760:	4b46      	ldr	r3, [pc, #280]	@ (801b87c <mg_md5_transform+0xcfc>)
 801b762:	4413      	add	r3, r2
 801b764:	613b      	str	r3, [r7, #16]
 801b766:	693b      	ldr	r3, [r7, #16]
 801b768:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801b76c:	613b      	str	r3, [r7, #16]
 801b76e:	693a      	ldr	r2, [r7, #16]
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	4413      	add	r3, r2
 801b774:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801b776:	68bb      	ldr	r3, [r7, #8]
 801b778:	43da      	mvns	r2, r3
 801b77a:	693b      	ldr	r3, [r7, #16]
 801b77c:	431a      	orrs	r2, r3
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	405a      	eors	r2, r3
 801b782:	683b      	ldr	r3, [r7, #0]
 801b784:	3310      	adds	r3, #16
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	441a      	add	r2, r3
 801b78a:	697b      	ldr	r3, [r7, #20]
 801b78c:	441a      	add	r2, r3
 801b78e:	4b3c      	ldr	r3, [pc, #240]	@ (801b880 <mg_md5_transform+0xd00>)
 801b790:	4413      	add	r3, r2
 801b792:	617b      	str	r3, [r7, #20]
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801b79a:	617b      	str	r3, [r7, #20]
 801b79c:	697a      	ldr	r2, [r7, #20]
 801b79e:	693b      	ldr	r3, [r7, #16]
 801b7a0:	4413      	add	r3, r2
 801b7a2:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	43da      	mvns	r2, r3
 801b7a8:	697b      	ldr	r3, [r7, #20]
 801b7aa:	431a      	orrs	r2, r3
 801b7ac:	693b      	ldr	r3, [r7, #16]
 801b7ae:	405a      	eors	r2, r3
 801b7b0:	683b      	ldr	r3, [r7, #0]
 801b7b2:	332c      	adds	r3, #44	@ 0x2c
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	441a      	add	r2, r3
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	441a      	add	r2, r3
 801b7bc:	4b31      	ldr	r3, [pc, #196]	@ (801b884 <mg_md5_transform+0xd04>)
 801b7be:	4413      	add	r3, r2
 801b7c0:	60bb      	str	r3, [r7, #8]
 801b7c2:	68bb      	ldr	r3, [r7, #8]
 801b7c4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801b7c8:	60bb      	str	r3, [r7, #8]
 801b7ca:	68ba      	ldr	r2, [r7, #8]
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	4413      	add	r3, r2
 801b7d0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801b7d2:	693b      	ldr	r3, [r7, #16]
 801b7d4:	43da      	mvns	r2, r3
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	431a      	orrs	r2, r3
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	405a      	eors	r2, r3
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	3308      	adds	r3, #8
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	441a      	add	r2, r3
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	441a      	add	r2, r3
 801b7ea:	4b27      	ldr	r3, [pc, #156]	@ (801b888 <mg_md5_transform+0xd08>)
 801b7ec:	4413      	add	r3, r2
 801b7ee:	60fb      	str	r3, [r7, #12]
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b7f6:	60fb      	str	r3, [r7, #12]
 801b7f8:	68fa      	ldr	r2, [r7, #12]
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	4413      	add	r3, r2
 801b7fe:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	43da      	mvns	r2, r3
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	431a      	orrs	r2, r3
 801b808:	68bb      	ldr	r3, [r7, #8]
 801b80a:	405a      	eors	r2, r3
 801b80c:	683b      	ldr	r3, [r7, #0]
 801b80e:	3324      	adds	r3, #36	@ 0x24
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	441a      	add	r2, r3
 801b814:	693b      	ldr	r3, [r7, #16]
 801b816:	441a      	add	r2, r3
 801b818:	4b1c      	ldr	r3, [pc, #112]	@ (801b88c <mg_md5_transform+0xd0c>)
 801b81a:	4413      	add	r3, r2
 801b81c:	613b      	str	r3, [r7, #16]
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801b824:	613b      	str	r3, [r7, #16]
 801b826:	693a      	ldr	r2, [r7, #16]
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	4413      	add	r3, r2
 801b82c:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	681a      	ldr	r2, [r3, #0]
 801b832:	697b      	ldr	r3, [r7, #20]
 801b834:	441a      	add	r2, r3
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	3304      	adds	r3, #4
 801b83e:	6819      	ldr	r1, [r3, #0]
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	3304      	adds	r3, #4
 801b844:	693a      	ldr	r2, [r7, #16]
 801b846:	440a      	add	r2, r1
 801b848:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	3308      	adds	r3, #8
 801b84e:	6819      	ldr	r1, [r3, #0]
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	3308      	adds	r3, #8
 801b854:	68fa      	ldr	r2, [r7, #12]
 801b856:	440a      	add	r2, r1
 801b858:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	330c      	adds	r3, #12
 801b85e:	6819      	ldr	r1, [r3, #0]
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	330c      	adds	r3, #12
 801b864:	68ba      	ldr	r2, [r7, #8]
 801b866:	440a      	add	r2, r1
 801b868:	601a      	str	r2, [r3, #0]
}
 801b86a:	bf00      	nop
 801b86c:	371c      	adds	r7, #28
 801b86e:	46bd      	mov	sp, r7
 801b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b874:	4770      	bx	lr
 801b876:	bf00      	nop
 801b878:	a3014314 	.word	0xa3014314
 801b87c:	4e0811a1 	.word	0x4e0811a1
 801b880:	f7537e82 	.word	0xf7537e82
 801b884:	bd3af235 	.word	0xbd3af235
 801b888:	2ad7d2bb 	.word	0x2ad7d2bb
 801b88c:	eb86d391 	.word	0xeb86d391

0801b890 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 801b890:	b580      	push	{r7, lr}
 801b892:	b086      	sub	sp, #24
 801b894:	af00      	add	r7, sp, #0
 801b896:	60f8      	str	r0, [r7, #12]
 801b898:	60b9      	str	r1, [r7, #8]
 801b89a:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	691b      	ldr	r3, [r3, #16]
 801b8a0:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	00da      	lsls	r2, r3, #3
 801b8a6:	697b      	ldr	r3, [r7, #20]
 801b8a8:	441a      	add	r2, r3
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	611a      	str	r2, [r3, #16]
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	691b      	ldr	r3, [r3, #16]
 801b8b2:	697a      	ldr	r2, [r7, #20]
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d904      	bls.n	801b8c2 <mg_md5_update+0x32>
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	695b      	ldr	r3, [r3, #20]
 801b8bc:	1c5a      	adds	r2, r3, #1
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	695a      	ldr	r2, [r3, #20]
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	0f5b      	lsrs	r3, r3, #29
 801b8ca:	441a      	add	r2, r3
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 801b8d0:	697b      	ldr	r3, [r7, #20]
 801b8d2:	08db      	lsrs	r3, r3, #3
 801b8d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b8d8:	617b      	str	r3, [r7, #20]

  if (t) {
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d048      	beq.n	801b972 <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	f103 0218 	add.w	r2, r3, #24
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	4413      	add	r3, r2
 801b8ea:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 801b8ec:	697b      	ldr	r3, [r7, #20]
 801b8ee:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801b8f2:	617b      	str	r3, [r7, #20]
    if (len < t) {
 801b8f4:	687a      	ldr	r2, [r7, #4]
 801b8f6:	697b      	ldr	r3, [r7, #20]
 801b8f8:	429a      	cmp	r2, r3
 801b8fa:	d205      	bcs.n	801b908 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 801b8fc:	687a      	ldr	r2, [r7, #4]
 801b8fe:	68b9      	ldr	r1, [r7, #8]
 801b900:	6938      	ldr	r0, [r7, #16]
 801b902:	f007 fb8a 	bl	802301a <memcpy>
      return;
 801b906:	e03e      	b.n	801b986 <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 801b908:	697a      	ldr	r2, [r7, #20]
 801b90a:	68b9      	ldr	r1, [r7, #8]
 801b90c:	6938      	ldr	r0, [r7, #16]
 801b90e:	f007 fb84 	bl	802301a <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	3318      	adds	r3, #24
 801b916:	2110      	movs	r1, #16
 801b918:	4618      	mov	r0, r3
 801b91a:	f7ff f8dd 	bl	801aad8 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801b91e:	68fa      	ldr	r2, [r7, #12]
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	3318      	adds	r3, #24
 801b924:	4619      	mov	r1, r3
 801b926:	4610      	mov	r0, r2
 801b928:	f7ff f92a 	bl	801ab80 <mg_md5_transform>
    buf += t;
 801b92c:	68ba      	ldr	r2, [r7, #8]
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	4413      	add	r3, r2
 801b932:	60bb      	str	r3, [r7, #8]
    len -= t;
 801b934:	687a      	ldr	r2, [r7, #4]
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	1ad3      	subs	r3, r2, r3
 801b93a:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 801b93c:	e019      	b.n	801b972 <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	3318      	adds	r3, #24
 801b942:	2240      	movs	r2, #64	@ 0x40
 801b944:	68b9      	ldr	r1, [r7, #8]
 801b946:	4618      	mov	r0, r3
 801b948:	f007 fb67 	bl	802301a <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	3318      	adds	r3, #24
 801b950:	2110      	movs	r1, #16
 801b952:	4618      	mov	r0, r3
 801b954:	f7ff f8c0 	bl	801aad8 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801b958:	68fa      	ldr	r2, [r7, #12]
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	3318      	adds	r3, #24
 801b95e:	4619      	mov	r1, r3
 801b960:	4610      	mov	r0, r2
 801b962:	f7ff f90d 	bl	801ab80 <mg_md5_transform>
    buf += 64;
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	3340      	adds	r3, #64	@ 0x40
 801b96a:	60bb      	str	r3, [r7, #8]
    len -= 64;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	3b40      	subs	r3, #64	@ 0x40
 801b970:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	2b3f      	cmp	r3, #63	@ 0x3f
 801b976:	d8e2      	bhi.n	801b93e <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	3318      	adds	r3, #24
 801b97c:	687a      	ldr	r2, [r7, #4]
 801b97e:	68b9      	ldr	r1, [r7, #8]
 801b980:	4618      	mov	r0, r3
 801b982:	f007 fb4a 	bl	802301a <memcpy>
}
 801b986:	3718      	adds	r7, #24
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b086      	sub	sp, #24
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	691b      	ldr	r3, [r3, #16]
 801b99a:	08db      	lsrs	r3, r3, #3
 801b99c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b9a0:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	f103 0218 	add.w	r2, r3, #24
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	4413      	add	r3, r2
 801b9ac:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 801b9ae:	693b      	ldr	r3, [r7, #16]
 801b9b0:	1c5a      	adds	r2, r3, #1
 801b9b2:	613a      	str	r2, [r7, #16]
 801b9b4:	2280      	movs	r2, #128	@ 0x80
 801b9b6:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801b9be:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	2b07      	cmp	r3, #7
 801b9c4:	d819      	bhi.n	801b9fa <mg_md5_final+0x6e>
    memset(p, 0, count);
 801b9c6:	697a      	ldr	r2, [r7, #20]
 801b9c8:	2100      	movs	r1, #0
 801b9ca:	6938      	ldr	r0, [r7, #16]
 801b9cc:	f007 fa44 	bl	8022e58 <memset>
    mg_byte_reverse(ctx->in, 16);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	3318      	adds	r3, #24
 801b9d4:	2110      	movs	r1, #16
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7ff f87e 	bl	801aad8 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801b9dc:	687a      	ldr	r2, [r7, #4]
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	3318      	adds	r3, #24
 801b9e2:	4619      	mov	r1, r3
 801b9e4:	4610      	mov	r0, r2
 801b9e6:	f7ff f8cb 	bl	801ab80 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	3318      	adds	r3, #24
 801b9ee:	2238      	movs	r2, #56	@ 0x38
 801b9f0:	2100      	movs	r1, #0
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f007 fa30 	bl	8022e58 <memset>
 801b9f8:	e006      	b.n	801ba08 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 801b9fa:	697b      	ldr	r3, [r7, #20]
 801b9fc:	3b08      	subs	r3, #8
 801b9fe:	461a      	mov	r2, r3
 801ba00:	2100      	movs	r1, #0
 801ba02:	6938      	ldr	r0, [r7, #16]
 801ba04:	f007 fa28 	bl	8022e58 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	3318      	adds	r3, #24
 801ba0c:	210e      	movs	r1, #14
 801ba0e:	4618      	mov	r0, r3
 801ba10:	f7ff f862 	bl	801aad8 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	3318      	adds	r3, #24
 801ba18:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	3338      	adds	r3, #56	@ 0x38
 801ba1e:	687a      	ldr	r2, [r7, #4]
 801ba20:	6912      	ldr	r2, [r2, #16]
 801ba22:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	333c      	adds	r3, #60	@ 0x3c
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	6952      	ldr	r2, [r2, #20]
 801ba2c:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801ba2e:	687a      	ldr	r2, [r7, #4]
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	3318      	adds	r3, #24
 801ba34:	4619      	mov	r1, r3
 801ba36:	4610      	mov	r0, r2
 801ba38:	f7ff f8a2 	bl	801ab80 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2104      	movs	r1, #4
 801ba40:	4618      	mov	r0, r3
 801ba42:	f7ff f849 	bl	801aad8 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	2210      	movs	r2, #16
 801ba4a:	4619      	mov	r1, r3
 801ba4c:	6838      	ldr	r0, [r7, #0]
 801ba4e:	f007 fae4 	bl	802301a <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 801ba52:	2258      	movs	r2, #88	@ 0x58
 801ba54:	2100      	movs	r1, #0
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f007 f9fe 	bl	8022e58 <memset>
}
 801ba5c:	bf00      	nop
 801ba5e:	3718      	adds	r7, #24
 801ba60:	46bd      	mov	sp, r7
 801ba62:	bd80      	pop	{r7, pc}

0801ba64 <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b088      	sub	sp, #32
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	60f8      	str	r0, [r7, #12]
 801ba6c:	607b      	str	r3, [r7, #4]
 801ba6e:	460b      	mov	r3, r1
 801ba70:	72fb      	strb	r3, [r7, #11]
 801ba72:	4613      	mov	r3, r2
 801ba74:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 801ba76:	f107 0314 	add.w	r3, r7, #20
 801ba7a:	3301      	adds	r3, #1
 801ba7c:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 801ba7e:	7afb      	ldrb	r3, [r7, #11]
 801ba80:	011b      	lsls	r3, r3, #4
 801ba82:	b25a      	sxtb	r2, r3
 801ba84:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801ba88:	4313      	orrs	r3, r2
 801ba8a:	b25b      	sxtb	r3, r3
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba98:	b2da      	uxtb	r2, r3
 801ba9a:	69fb      	ldr	r3, [r7, #28]
 801ba9c:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	09db      	lsrs	r3, r3, #7
 801baa2:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d006      	beq.n	801bab8 <mg_mqtt_send_header+0x54>
 801baaa:	69fb      	ldr	r3, [r7, #28]
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bab2:	b2da      	uxtb	r2, r3
 801bab4:	69fb      	ldr	r3, [r7, #28]
 801bab6:	701a      	strb	r2, [r3, #0]
    vlen++;
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	3301      	adds	r3, #1
 801babc:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d005      	beq.n	801bad0 <mg_mqtt_send_header+0x6c>
 801bac4:	f107 0314 	add.w	r3, r7, #20
 801bac8:	3305      	adds	r3, #5
 801baca:	69fa      	ldr	r2, [r7, #28]
 801bacc:	429a      	cmp	r2, r3
 801bace:	d3df      	bcc.n	801ba90 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 801bad0:	f107 0314 	add.w	r3, r7, #20
 801bad4:	69fa      	ldr	r2, [r7, #28]
 801bad6:	1ad3      	subs	r3, r2, r3
 801bad8:	461a      	mov	r2, r3
 801bada:	f107 0314 	add.w	r3, r7, #20
 801bade:	4619      	mov	r1, r3
 801bae0:	68f8      	ldr	r0, [r7, #12]
 801bae2:	f004 fded 	bl	80206c0 <mg_send>
}
 801bae6:	bf00      	nop
 801bae8:	3720      	adds	r7, #32
 801baea:	46bd      	mov	sp, r7
 801baec:	bd80      	pop	{r7, pc}

0801baee <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 801baee:	b580      	push	{r7, lr}
 801baf0:	b082      	sub	sp, #8
 801baf2:	af00      	add	r7, sp, #0
 801baf4:	6078      	str	r0, [r7, #4]
 801baf6:	460b      	mov	r3, r1
 801baf8:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 801bafa:	1cbb      	adds	r3, r7, #2
 801bafc:	2202      	movs	r2, #2
 801bafe:	4619      	mov	r1, r3
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	f004 fddd 	bl	80206c0 <mg_send>
}
 801bb06:	bf00      	nop
 801bb08:	3708      	adds	r7, #8
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	bd80      	pop	{r7, pc}

0801bb0e <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 801bb0e:	b580      	push	{r7, lr}
 801bb10:	b082      	sub	sp, #8
 801bb12:	af00      	add	r7, sp, #0
 801bb14:	6078      	str	r0, [r7, #4]
 801bb16:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 801bb18:	463b      	mov	r3, r7
 801bb1a:	2204      	movs	r2, #4
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	f004 fdce 	bl	80206c0 <mg_send>
}
 801bb24:	bf00      	nop
 801bb26:	3708      	adds	r7, #8
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}

0801bb2c <varint_size>:

static uint8_t varint_size(size_t length) {
 801bb2c:	b480      	push	{r7}
 801bb2e:	b085      	sub	sp, #20
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 801bb34:	2300      	movs	r3, #0
 801bb36:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 801bb38:	7bfb      	ldrb	r3, [r7, #15]
 801bb3a:	3301      	adds	r3, #1
 801bb3c:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	09db      	lsrs	r3, r3, #7
 801bb42:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d1f6      	bne.n	801bb38 <varint_size+0xc>
  return bytes_needed;
 801bb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	3714      	adds	r7, #20
 801bb50:	46bd      	mov	sp, r7
 801bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb56:	4770      	bx	lr

0801bb58 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801bb58:	b480      	push	{r7}
 801bb5a:	b085      	sub	sp, #20
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
 801bb60:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801bb62:	2300      	movs	r3, #0
 801bb64:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	b2db      	uxtb	r3, r3
 801bb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb6e:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 801bb70:	683b      	ldr	r3, [r7, #0]
 801bb72:	09db      	lsrs	r3, r3, #7
 801bb74:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d003      	beq.n	801bb84 <encode_varint+0x2c>
 801bb7c:	7afb      	ldrb	r3, [r7, #11]
 801bb7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bb82:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	1c5a      	adds	r2, r3, #1
 801bb88:	60fa      	str	r2, [r7, #12]
 801bb8a:	687a      	ldr	r2, [r7, #4]
 801bb8c:	4413      	add	r3, r2
 801bb8e:	7afa      	ldrb	r2, [r7, #11]
 801bb90:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 801bb92:	683b      	ldr	r3, [r7, #0]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d1e6      	bne.n	801bb66 <encode_varint+0xe>

  return len;
 801bb98:	68fb      	ldr	r3, [r7, #12]
}
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	3714      	adds	r7, #20
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba4:	4770      	bx	lr

0801bba6 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801bba6:	b480      	push	{r7}
 801bba8:	b089      	sub	sp, #36	@ 0x24
 801bbaa:	af00      	add	r7, sp, #0
 801bbac:	60f8      	str	r0, [r7, #12]
 801bbae:	60b9      	str	r1, [r7, #8]
 801bbb0:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 801bbb2:	2301      	movs	r3, #1
 801bbb4:	61fb      	str	r3, [r7, #28]
  *value = 0;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	61bb      	str	r3, [r7, #24]
 801bbc0:	e01c      	b.n	801bbfc <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 801bbc2:	68fa      	ldr	r2, [r7, #12]
 801bbc4:	69bb      	ldr	r3, [r7, #24]
 801bbc6:	4413      	add	r3, r2
 801bbc8:	781b      	ldrb	r3, [r3, #0]
 801bbca:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681a      	ldr	r2, [r3, #0]
 801bbd0:	7dfb      	ldrb	r3, [r7, #23]
 801bbd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bbd6:	69f9      	ldr	r1, [r7, #28]
 801bbd8:	fb01 f303 	mul.w	r3, r1, r3
 801bbdc:	441a      	add	r2, r3
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 801bbe2:	69fb      	ldr	r3, [r7, #28]
 801bbe4:	01db      	lsls	r3, r3, #7
 801bbe6:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801bbe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	db02      	blt.n	801bbf6 <decode_varint+0x50>
 801bbf0:	69bb      	ldr	r3, [r7, #24]
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	e00a      	b.n	801bc0c <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801bbf6:	69bb      	ldr	r3, [r7, #24]
 801bbf8:	3301      	adds	r3, #1
 801bbfa:	61bb      	str	r3, [r7, #24]
 801bbfc:	69bb      	ldr	r3, [r7, #24]
 801bbfe:	2b03      	cmp	r3, #3
 801bc00:	d803      	bhi.n	801bc0a <decode_varint+0x64>
 801bc02:	69ba      	ldr	r2, [r7, #24]
 801bc04:	68bb      	ldr	r3, [r7, #8]
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d3db      	bcc.n	801bbc2 <decode_varint+0x1c>
  }

  return 0;
 801bc0a:	2300      	movs	r3, #0
}
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	3724      	adds	r7, #36	@ 0x24
 801bc10:	46bd      	mov	sp, r7
 801bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc16:	4770      	bx	lr

0801bc18 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 801bc18:	b480      	push	{r7}
 801bc1a:	b085      	sub	sp, #20
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	4603      	mov	r3, r0
 801bc20:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 801bc22:	231b      	movs	r3, #27
 801bc24:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 801bc26:	2300      	movs	r3, #0
 801bc28:	60fb      	str	r3, [r7, #12]
 801bc2a:	e00f      	b.n	801bc4c <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801bc2c:	4a0d      	ldr	r2, [pc, #52]	@ (801bc64 <mqtt_prop_type_by_id+0x4c>)
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801bc34:	79fa      	ldrb	r2, [r7, #7]
 801bc36:	429a      	cmp	r2, r3
 801bc38:	d105      	bne.n	801bc46 <mqtt_prop_type_by_id+0x2e>
 801bc3a:	4a0a      	ldr	r2, [pc, #40]	@ (801bc64 <mqtt_prop_type_by_id+0x4c>)
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	005b      	lsls	r3, r3, #1
 801bc40:	4413      	add	r3, r2
 801bc42:	785b      	ldrb	r3, [r3, #1]
 801bc44:	e008      	b.n	801bc58 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	3301      	adds	r3, #1
 801bc4a:	60fb      	str	r3, [r7, #12]
 801bc4c:	68fa      	ldr	r2, [r7, #12]
 801bc4e:	68bb      	ldr	r3, [r7, #8]
 801bc50:	429a      	cmp	r2, r3
 801bc52:	d3eb      	bcc.n	801bc2c <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 801bc54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801bc58:	4618      	mov	r0, r3
 801bc5a:	3714      	adds	r7, #20
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc62:	4770      	bx	lr
 801bc64:	080295d4 	.word	0x080295d4

0801bc68 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801bc68:	b580      	push	{r7, lr}
 801bc6a:	b084      	sub	sp, #16
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	6078      	str	r0, [r7, #4]
 801bc70:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 801bc72:	2300      	movs	r3, #0
 801bc74:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 801bc76:	2300      	movs	r3, #0
 801bc78:	60fb      	str	r3, [r7, #12]
 801bc7a:	e07a      	b.n	801bd72 <get_properties_length+0x10a>
    size++;  // identifier
 801bc7c:	68bb      	ldr	r3, [r7, #8]
 801bc7e:	3301      	adds	r3, #1
 801bc80:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801bc82:	68fa      	ldr	r2, [r7, #12]
 801bc84:	4613      	mov	r3, r2
 801bc86:	005b      	lsls	r3, r3, #1
 801bc88:	4413      	add	r3, r2
 801bc8a:	00db      	lsls	r3, r3, #3
 801bc8c:	461a      	mov	r2, r3
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	4413      	add	r3, r2
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7ff ffbf 	bl	801bc18 <mqtt_prop_type_by_id>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	2b06      	cmp	r3, #6
 801bc9e:	d863      	bhi.n	801bd68 <get_properties_length+0x100>
 801bca0:	a201      	add	r2, pc, #4	@ (adr r2, 801bca8 <get_properties_length+0x40>)
 801bca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bca6:	bf00      	nop
 801bca8:	0801bd61 	.word	0x0801bd61
 801bcac:	0801bcf5 	.word	0x0801bcf5
 801bcb0:	0801bcc5 	.word	0x0801bcc5
 801bcb4:	0801bd11 	.word	0x0801bd11
 801bcb8:	0801bd2d 	.word	0x0801bd2d
 801bcbc:	0801bd51 	.word	0x0801bd51
 801bcc0:	0801bd59 	.word	0x0801bd59
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801bcc4:	68fa      	ldr	r2, [r7, #12]
 801bcc6:	4613      	mov	r3, r2
 801bcc8:	005b      	lsls	r3, r3, #1
 801bcca:	4413      	add	r3, r2
 801bccc:	00db      	lsls	r3, r3, #3
 801bcce:	461a      	mov	r2, r3
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	4413      	add	r3, r2
 801bcd4:	6959      	ldr	r1, [r3, #20]
 801bcd6:	68fa      	ldr	r2, [r7, #12]
 801bcd8:	4613      	mov	r3, r2
 801bcda:	005b      	lsls	r3, r3, #1
 801bcdc:	4413      	add	r3, r2
 801bcde:	00db      	lsls	r3, r3, #3
 801bce0:	461a      	mov	r2, r3
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	4413      	add	r3, r2
 801bce6:	68db      	ldr	r3, [r3, #12]
 801bce8:	18ca      	adds	r2, r1, r3
 801bcea:	68bb      	ldr	r3, [r7, #8]
 801bcec:	4413      	add	r3, r2
 801bcee:	3304      	adds	r3, #4
 801bcf0:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 801bcf2:	e03b      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801bcf4:	68fa      	ldr	r2, [r7, #12]
 801bcf6:	4613      	mov	r3, r2
 801bcf8:	005b      	lsls	r3, r3, #1
 801bcfa:	4413      	add	r3, r2
 801bcfc:	00db      	lsls	r3, r3, #3
 801bcfe:	461a      	mov	r2, r3
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	4413      	add	r3, r2
 801bd04:	695a      	ldr	r2, [r3, #20]
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	4413      	add	r3, r2
 801bd0a:	3302      	adds	r3, #2
 801bd0c:	60bb      	str	r3, [r7, #8]
        break;
 801bd0e:	e02d      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801bd10:	68fa      	ldr	r2, [r7, #12]
 801bd12:	4613      	mov	r3, r2
 801bd14:	005b      	lsls	r3, r3, #1
 801bd16:	4413      	add	r3, r2
 801bd18:	00db      	lsls	r3, r3, #3
 801bd1a:	461a      	mov	r2, r3
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	4413      	add	r3, r2
 801bd20:	695a      	ldr	r2, [r3, #20]
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	4413      	add	r3, r2
 801bd26:	3302      	adds	r3, #2
 801bd28:	60bb      	str	r3, [r7, #8]
        break;
 801bd2a:	e01f      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801bd2c:	68fa      	ldr	r2, [r7, #12]
 801bd2e:	4613      	mov	r3, r2
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	4413      	add	r3, r2
 801bd34:	00db      	lsls	r3, r3, #3
 801bd36:	461a      	mov	r2, r3
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	4413      	add	r3, r2
 801bd3c:	685b      	ldr	r3, [r3, #4]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f7ff fef4 	bl	801bb2c <varint_size>
 801bd44:	4603      	mov	r3, r0
 801bd46:	461a      	mov	r2, r3
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	4413      	add	r3, r2
 801bd4c:	60bb      	str	r3, [r7, #8]
        break;
 801bd4e:	e00d      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	3304      	adds	r3, #4
 801bd54:	60bb      	str	r3, [r7, #8]
        break;
 801bd56:	e009      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801bd58:	68bb      	ldr	r3, [r7, #8]
 801bd5a:	3302      	adds	r3, #2
 801bd5c:	60bb      	str	r3, [r7, #8]
        break;
 801bd5e:	e005      	b.n	801bd6c <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801bd60:	68bb      	ldr	r3, [r7, #8]
 801bd62:	3301      	adds	r3, #1
 801bd64:	60bb      	str	r3, [r7, #8]
        break;
 801bd66:	e001      	b.n	801bd6c <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	e007      	b.n	801bd7c <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	3301      	adds	r3, #1
 801bd70:	60fb      	str	r3, [r7, #12]
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	429a      	cmp	r2, r3
 801bd78:	d380      	bcc.n	801bc7c <get_properties_length+0x14>
    }
  }

  return size;
 801bd7a:	68bb      	ldr	r3, [r7, #8]
}
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	3710      	adds	r7, #16
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}

0801bd84 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 801bd8e:	6839      	ldr	r1, [r7, #0]
 801bd90:	6878      	ldr	r0, [r7, #4]
 801bd92:	f7ff ff69 	bl	801bc68 <get_properties_length>
 801bd96:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 801bd98:	68f8      	ldr	r0, [r7, #12]
 801bd9a:	f7ff fec7 	bl	801bb2c <varint_size>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	461a      	mov	r2, r3
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	4413      	add	r3, r2
 801bda6:	60fb      	str	r3, [r7, #12]
  return size;
 801bda8:	68fb      	ldr	r3, [r7, #12]
}
 801bdaa:	4618      	mov	r0, r3
 801bdac:	3710      	adds	r7, #16
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}
	...

0801bdb4 <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b08a      	sub	sp, #40	@ 0x28
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 801bdc0:	6879      	ldr	r1, [r7, #4]
 801bdc2:	68b8      	ldr	r0, [r7, #8]
 801bdc4:	f7ff ff50 	bl	801bc68 <get_properties_length>
 801bdc8:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 801bdca:	2300      	movs	r3, #0
 801bdcc:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 801bdce:	2300      	movs	r3, #0
 801bdd0:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 801bdd2:	f107 0314 	add.w	r3, r7, #20
 801bdd6:	6a39      	ldr	r1, [r7, #32]
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7ff febd 	bl	801bb58 <encode_varint>
 801bdde:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 801bde0:	f107 0314 	add.w	r3, r7, #20
 801bde4:	69fa      	ldr	r2, [r7, #28]
 801bde6:	4619      	mov	r1, r3
 801bde8:	68f8      	ldr	r0, [r7, #12]
 801bdea:	f004 fc69 	bl	80206c0 <mg_send>
  for (i = 0; i < nprops; i++) {
 801bdee:	2300      	movs	r3, #0
 801bdf0:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdf2:	e11f      	b.n	801c034 <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 801bdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bdf6:	4613      	mov	r3, r2
 801bdf8:	005b      	lsls	r3, r3, #1
 801bdfa:	4413      	add	r3, r2
 801bdfc:	00db      	lsls	r3, r3, #3
 801bdfe:	461a      	mov	r2, r3
 801be00:	68bb      	ldr	r3, [r7, #8]
 801be02:	4413      	add	r3, r2
 801be04:	2201      	movs	r2, #1
 801be06:	4619      	mov	r1, r3
 801be08:	68f8      	ldr	r0, [r7, #12]
 801be0a:	f004 fc59 	bl	80206c0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801be0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be10:	4613      	mov	r3, r2
 801be12:	005b      	lsls	r3, r3, #1
 801be14:	4413      	add	r3, r2
 801be16:	00db      	lsls	r3, r3, #3
 801be18:	461a      	mov	r2, r3
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	4413      	add	r3, r2
 801be1e:	781b      	ldrb	r3, [r3, #0]
 801be20:	4618      	mov	r0, r3
 801be22:	f7ff fef9 	bl	801bc18 <mqtt_prop_type_by_id>
 801be26:	4603      	mov	r3, r0
 801be28:	2b06      	cmp	r3, #6
 801be2a:	f200 8100 	bhi.w	801c02e <mg_send_mqtt_properties+0x27a>
 801be2e:	a201      	add	r2, pc, #4	@ (adr r2, 801be34 <mg_send_mqtt_properties+0x80>)
 801be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be34:	0801bef3 	.word	0x0801bef3
 801be38:	0801bf5b 	.word	0x0801bf5b
 801be3c:	0801be51 	.word	0x0801be51
 801be40:	0801bfad 	.word	0x0801bfad
 801be44:	0801bfff 	.word	0x0801bfff
 801be48:	0801bf37 	.word	0x0801bf37
 801be4c:	0801bf11 	.word	0x0801bf11
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 801be50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be52:	4613      	mov	r3, r2
 801be54:	005b      	lsls	r3, r3, #1
 801be56:	4413      	add	r3, r2
 801be58:	00db      	lsls	r3, r3, #3
 801be5a:	461a      	mov	r2, r3
 801be5c:	68bb      	ldr	r3, [r7, #8]
 801be5e:	4413      	add	r3, r2
 801be60:	68db      	ldr	r3, [r3, #12]
 801be62:	b29b      	uxth	r3, r3
 801be64:	4618      	mov	r0, r3
 801be66:	f005 ff1c 	bl	8021ca2 <mg_ntohs>
 801be6a:	4603      	mov	r3, r0
 801be6c:	4619      	mov	r1, r3
 801be6e:	68f8      	ldr	r0, [r7, #12]
 801be70:	f7ff fe3d 	bl	801baee <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 801be74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be76:	4613      	mov	r3, r2
 801be78:	005b      	lsls	r3, r3, #1
 801be7a:	4413      	add	r3, r2
 801be7c:	00db      	lsls	r3, r3, #3
 801be7e:	461a      	mov	r2, r3
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	4413      	add	r3, r2
 801be84:	6899      	ldr	r1, [r3, #8]
 801be86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be88:	4613      	mov	r3, r2
 801be8a:	005b      	lsls	r3, r3, #1
 801be8c:	4413      	add	r3, r2
 801be8e:	00db      	lsls	r3, r3, #3
 801be90:	461a      	mov	r2, r3
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	4413      	add	r3, r2
 801be96:	68db      	ldr	r3, [r3, #12]
 801be98:	461a      	mov	r2, r3
 801be9a:	68f8      	ldr	r0, [r7, #12]
 801be9c:	f004 fc10 	bl	80206c0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801bea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bea2:	4613      	mov	r3, r2
 801bea4:	005b      	lsls	r3, r3, #1
 801bea6:	4413      	add	r3, r2
 801bea8:	00db      	lsls	r3, r3, #3
 801beaa:	461a      	mov	r2, r3
 801beac:	68bb      	ldr	r3, [r7, #8]
 801beae:	4413      	add	r3, r2
 801beb0:	695b      	ldr	r3, [r3, #20]
 801beb2:	b29b      	uxth	r3, r3
 801beb4:	4618      	mov	r0, r3
 801beb6:	f005 fef4 	bl	8021ca2 <mg_ntohs>
 801beba:	4603      	mov	r3, r0
 801bebc:	4619      	mov	r1, r3
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	f7ff fe15 	bl	801baee <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801bec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bec6:	4613      	mov	r3, r2
 801bec8:	005b      	lsls	r3, r3, #1
 801beca:	4413      	add	r3, r2
 801becc:	00db      	lsls	r3, r3, #3
 801bece:	461a      	mov	r2, r3
 801bed0:	68bb      	ldr	r3, [r7, #8]
 801bed2:	4413      	add	r3, r2
 801bed4:	6919      	ldr	r1, [r3, #16]
 801bed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bed8:	4613      	mov	r3, r2
 801beda:	005b      	lsls	r3, r3, #1
 801bedc:	4413      	add	r3, r2
 801bede:	00db      	lsls	r3, r3, #3
 801bee0:	461a      	mov	r2, r3
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	4413      	add	r3, r2
 801bee6:	695b      	ldr	r3, [r3, #20]
 801bee8:	461a      	mov	r2, r3
 801beea:	68f8      	ldr	r0, [r7, #12]
 801beec:	f004 fbe8 	bl	80206c0 <mg_send>
        break;
 801bef0:	e09d      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 801bef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bef4:	4613      	mov	r3, r2
 801bef6:	005b      	lsls	r3, r3, #1
 801bef8:	4413      	add	r3, r2
 801befa:	00db      	lsls	r3, r3, #3
 801befc:	461a      	mov	r2, r3
 801befe:	68bb      	ldr	r3, [r7, #8]
 801bf00:	4413      	add	r3, r2
 801bf02:	3304      	adds	r3, #4
 801bf04:	2201      	movs	r2, #1
 801bf06:	4619      	mov	r1, r3
 801bf08:	68f8      	ldr	r0, [r7, #12]
 801bf0a:	f004 fbd9 	bl	80206c0 <mg_send>
        break;
 801bf0e:	e08e      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 801bf10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf12:	4613      	mov	r3, r2
 801bf14:	005b      	lsls	r3, r3, #1
 801bf16:	4413      	add	r3, r2
 801bf18:	00db      	lsls	r3, r3, #3
 801bf1a:	461a      	mov	r2, r3
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	4413      	add	r3, r2
 801bf20:	685b      	ldr	r3, [r3, #4]
 801bf22:	b29b      	uxth	r3, r3
 801bf24:	4618      	mov	r0, r3
 801bf26:	f005 febc 	bl	8021ca2 <mg_ntohs>
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	4619      	mov	r1, r3
 801bf2e:	68f8      	ldr	r0, [r7, #12]
 801bf30:	f7ff fddd 	bl	801baee <mg_send_u16>
        break;
 801bf34:	e07b      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 801bf36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf38:	4613      	mov	r3, r2
 801bf3a:	005b      	lsls	r3, r3, #1
 801bf3c:	4413      	add	r3, r2
 801bf3e:	00db      	lsls	r3, r3, #3
 801bf40:	461a      	mov	r2, r3
 801bf42:	68bb      	ldr	r3, [r7, #8]
 801bf44:	4413      	add	r3, r2
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f005 fe91 	bl	8021c70 <mg_ntohl>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	4619      	mov	r1, r3
 801bf52:	68f8      	ldr	r0, [r7, #12]
 801bf54:	f7ff fddb 	bl	801bb0e <mg_send_u32>
        break;
 801bf58:	e069      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801bf5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf5c:	4613      	mov	r3, r2
 801bf5e:	005b      	lsls	r3, r3, #1
 801bf60:	4413      	add	r3, r2
 801bf62:	00db      	lsls	r3, r3, #3
 801bf64:	461a      	mov	r2, r3
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	4413      	add	r3, r2
 801bf6a:	695b      	ldr	r3, [r3, #20]
 801bf6c:	b29b      	uxth	r3, r3
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f005 fe97 	bl	8021ca2 <mg_ntohs>
 801bf74:	4603      	mov	r3, r0
 801bf76:	4619      	mov	r1, r3
 801bf78:	68f8      	ldr	r0, [r7, #12]
 801bf7a:	f7ff fdb8 	bl	801baee <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801bf7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf80:	4613      	mov	r3, r2
 801bf82:	005b      	lsls	r3, r3, #1
 801bf84:	4413      	add	r3, r2
 801bf86:	00db      	lsls	r3, r3, #3
 801bf88:	461a      	mov	r2, r3
 801bf8a:	68bb      	ldr	r3, [r7, #8]
 801bf8c:	4413      	add	r3, r2
 801bf8e:	6919      	ldr	r1, [r3, #16]
 801bf90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf92:	4613      	mov	r3, r2
 801bf94:	005b      	lsls	r3, r3, #1
 801bf96:	4413      	add	r3, r2
 801bf98:	00db      	lsls	r3, r3, #3
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	4413      	add	r3, r2
 801bfa0:	695b      	ldr	r3, [r3, #20]
 801bfa2:	461a      	mov	r2, r3
 801bfa4:	68f8      	ldr	r0, [r7, #12]
 801bfa6:	f004 fb8b 	bl	80206c0 <mg_send>
        break;
 801bfaa:	e040      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801bfac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfae:	4613      	mov	r3, r2
 801bfb0:	005b      	lsls	r3, r3, #1
 801bfb2:	4413      	add	r3, r2
 801bfb4:	00db      	lsls	r3, r3, #3
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	4413      	add	r3, r2
 801bfbc:	695b      	ldr	r3, [r3, #20]
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f005 fe6e 	bl	8021ca2 <mg_ntohs>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	4619      	mov	r1, r3
 801bfca:	68f8      	ldr	r0, [r7, #12]
 801bfcc:	f7ff fd8f 	bl	801baee <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801bfd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfd2:	4613      	mov	r3, r2
 801bfd4:	005b      	lsls	r3, r3, #1
 801bfd6:	4413      	add	r3, r2
 801bfd8:	00db      	lsls	r3, r3, #3
 801bfda:	461a      	mov	r2, r3
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	4413      	add	r3, r2
 801bfe0:	6919      	ldr	r1, [r3, #16]
 801bfe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfe4:	4613      	mov	r3, r2
 801bfe6:	005b      	lsls	r3, r3, #1
 801bfe8:	4413      	add	r3, r2
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	461a      	mov	r2, r3
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	4413      	add	r3, r2
 801bff2:	695b      	ldr	r3, [r3, #20]
 801bff4:	461a      	mov	r2, r3
 801bff6:	68f8      	ldr	r0, [r7, #12]
 801bff8:	f004 fb62 	bl	80206c0 <mg_send>
        break;
 801bffc:	e017      	b.n	801c02e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 801bffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c000:	4613      	mov	r3, r2
 801c002:	005b      	lsls	r3, r3, #1
 801c004:	4413      	add	r3, r2
 801c006:	00db      	lsls	r3, r3, #3
 801c008:	461a      	mov	r2, r3
 801c00a:	68bb      	ldr	r3, [r7, #8]
 801c00c:	4413      	add	r3, r2
 801c00e:	685a      	ldr	r2, [r3, #4]
 801c010:	f107 0318 	add.w	r3, r7, #24
 801c014:	4611      	mov	r1, r2
 801c016:	4618      	mov	r0, r3
 801c018:	f7ff fd9e 	bl	801bb58 <encode_varint>
 801c01c:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 801c01e:	f107 0318 	add.w	r3, r7, #24
 801c022:	69fa      	ldr	r2, [r7, #28]
 801c024:	4619      	mov	r1, r3
 801c026:	68f8      	ldr	r0, [r7, #12]
 801c028:	f004 fb4a 	bl	80206c0 <mg_send>
        break;
 801c02c:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 801c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c030:	3301      	adds	r3, #1
 801c032:	627b      	str	r3, [r7, #36]	@ 0x24
 801c034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	429a      	cmp	r2, r3
 801c03a:	f4ff aedb 	bcc.w	801bdf4 <mg_send_mqtt_properties+0x40>
    }
  }
}
 801c03e:	bf00      	nop
 801c040:	bf00      	nop
 801c042:	3728      	adds	r7, #40	@ 0x28
 801c044:	46bd      	mov	sp, r7
 801c046:	bd80      	pop	{r7, pc}

0801c048 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c048:	b580      	push	{r7, lr}
 801c04a:	b08e      	sub	sp, #56	@ 0x38
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
 801c050:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 801c052:	683a      	ldr	r2, [r7, #0]
 801c054:	f107 0314 	add.w	r3, r7, #20
 801c058:	3210      	adds	r2, #16
 801c05a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c05e:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 801c062:	230c      	movs	r3, #12
 801c064:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 801c066:	2300      	movs	r3, #0
 801c068:	733b      	strb	r3, [r7, #12]
 801c06a:	2304      	movs	r3, #4
 801c06c:	737b      	strb	r3, [r7, #13]
 801c06e:	234d      	movs	r3, #77	@ 0x4d
 801c070:	73bb      	strb	r3, [r7, #14]
 801c072:	2351      	movs	r3, #81	@ 0x51
 801c074:	73fb      	strb	r3, [r7, #15]
 801c076:	2354      	movs	r3, #84	@ 0x54
 801c078:	743b      	strb	r3, [r7, #16]
 801c07a:	2354      	movs	r3, #84	@ 0x54
 801c07c:	747b      	strb	r3, [r7, #17]
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801c084:	74bb      	strb	r3, [r7, #18]
 801c086:	2300      	movs	r3, #0
 801c088:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 801c08a:	69bb      	ldr	r3, [r7, #24]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d110      	bne.n	801c0b2 <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 801c090:	f107 031c 	add.w	r3, r7, #28
 801c094:	2114      	movs	r1, #20
 801c096:	4618      	mov	r0, r3
 801c098:	f005 fda4 	bl	8021be4 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 801c09c:	2300      	movs	r3, #0
 801c09e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 801c0a2:	f107 0314 	add.w	r3, r7, #20
 801c0a6:	f107 021c 	add.w	r2, r7, #28
 801c0aa:	4611      	mov	r1, r2
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	f004 fe55 	bl	8020d5c <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 801c0b2:	7cbb      	ldrb	r3, [r7, #18]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d101      	bne.n	801c0bc <mg_mqtt_login+0x74>
 801c0b8:	2304      	movs	r3, #4
 801c0ba:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 801c0bc:	7cbb      	ldrb	r3, [r7, #18]
 801c0be:	2b05      	cmp	r3, #5
 801c0c0:	bf0c      	ite	eq
 801c0c2:	2301      	moveq	r3, #1
 801c0c4:	2300      	movne	r3, #0
 801c0c6:	b2d9      	uxtb	r1, r3
 801c0c8:	687a      	ldr	r2, [r7, #4]
 801c0ca:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c0ce:	f361 0382 	bfi	r3, r1, #2, #1
 801c0d2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c0dc:	00db      	lsls	r3, r3, #3
 801c0de:	b2db      	uxtb	r3, r3
 801c0e0:	f003 0318 	and.w	r3, r3, #24
 801c0e4:	b2db      	uxtb	r3, r3
 801c0e6:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	685b      	ldr	r3, [r3, #4]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d00a      	beq.n	801c106 <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 801c0f0:	683b      	ldr	r3, [r7, #0]
 801c0f2:	685a      	ldr	r2, [r3, #4]
 801c0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c0f6:	4413      	add	r3, r2
 801c0f8:	3302      	adds	r3, #2
 801c0fa:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 801c0fc:	7cfb      	ldrb	r3, [r7, #19]
 801c0fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c102:	b2db      	uxtb	r3, r3
 801c104:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	68db      	ldr	r3, [r3, #12]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d00a      	beq.n	801c124 <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	68da      	ldr	r2, [r3, #12]
 801c112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c114:	4413      	add	r3, r2
 801c116:	3302      	adds	r3, #2
 801c118:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 801c11a:	7cfb      	ldrb	r3, [r7, #19]
 801c11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c120:	b2db      	uxtb	r3, r3
 801c122:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 801c124:	683b      	ldr	r3, [r7, #0]
 801c126:	69db      	ldr	r3, [r3, #28]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d00d      	beq.n	801c148 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 801c12c:	683b      	ldr	r3, [r7, #0]
 801c12e:	69da      	ldr	r2, [r3, #28]
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c134:	441a      	add	r2, r3
 801c136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c138:	4413      	add	r3, r2
 801c13a:	3304      	adds	r3, #4
 801c13c:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 801c13e:	7cfb      	ldrb	r3, [r7, #19]
 801c140:	f043 0304 	orr.w	r3, r3, #4
 801c144:	b2db      	uxtb	r3, r3
 801c146:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 801c148:	683b      	ldr	r3, [r7, #0]
 801c14a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d102      	bne.n	801c158 <mg_mqtt_login+0x110>
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d104      	bne.n	801c162 <mg_mqtt_login+0x11a>
 801c158:	7cfb      	ldrb	r3, [r7, #19]
 801c15a:	f043 0302 	orr.w	r3, r3, #2
 801c15e:	b2db      	uxtb	r3, r3
 801c160:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d004      	beq.n	801c176 <mg_mqtt_login+0x12e>
 801c16c:	7cfb      	ldrb	r3, [r7, #19]
 801c16e:	f043 0320 	orr.w	r3, r3, #32
 801c172:	b2db      	uxtb	r3, r3
 801c174:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 801c176:	69bb      	ldr	r3, [r7, #24]
 801c178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c17a:	4413      	add	r3, r2
 801c17c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c184:	f003 0304 	and.w	r3, r3, #4
 801c188:	b2db      	uxtb	r3, r3
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d01c      	beq.n	801c1c8 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c192:	683b      	ldr	r3, [r7, #0]
 801c194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c196:	4619      	mov	r1, r3
 801c198:	4610      	mov	r0, r2
 801c19a:	f7ff fdf3 	bl	801bd84 <get_props_size>
 801c19e:	4602      	mov	r2, r0
 801c1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1a2:	4413      	add	r3, r2
 801c1a4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 801c1a6:	7cfb      	ldrb	r3, [r7, #19]
 801c1a8:	f003 0304 	and.w	r3, r3, #4
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d00b      	beq.n	801c1c8 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 801c1b0:	683b      	ldr	r3, [r7, #0]
 801c1b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c1b4:	683b      	ldr	r3, [r7, #0]
 801c1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1b8:	4619      	mov	r1, r3
 801c1ba:	4610      	mov	r0, r2
 801c1bc:	f7ff fde2 	bl	801bd84 <get_props_size>
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1c4:	4413      	add	r3, r2
 801c1c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 801c1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	2101      	movs	r1, #1
 801c1ce:	6878      	ldr	r0, [r7, #4]
 801c1d0:	f7ff fc48 	bl	801ba64 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 801c1d4:	f107 030c 	add.w	r3, r7, #12
 801c1d8:	2208      	movs	r2, #8
 801c1da:	4619      	mov	r1, r3
 801c1dc:	6878      	ldr	r0, [r7, #4]
 801c1de:	f004 fa6f 	bl	80206c0 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c1e6:	4618      	mov	r0, r3
 801c1e8:	f005 fd5b 	bl	8021ca2 <mg_ntohs>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	4619      	mov	r1, r3
 801c1f0:	6878      	ldr	r0, [r7, #4]
 801c1f2:	f7ff fc7c 	bl	801baee <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c1fc:	f003 0304 	and.w	r3, r3, #4
 801c200:	b2db      	uxtb	r3, r3
 801c202:	2b00      	cmp	r3, #0
 801c204:	d007      	beq.n	801c216 <mg_mqtt_login+0x1ce>
 801c206:	683b      	ldr	r3, [r7, #0]
 801c208:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c20e:	461a      	mov	r2, r3
 801c210:	6878      	ldr	r0, [r7, #4]
 801c212:	f7ff fdcf 	bl	801bdb4 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 801c216:	69bb      	ldr	r3, [r7, #24]
 801c218:	b29b      	uxth	r3, r3
 801c21a:	4618      	mov	r0, r3
 801c21c:	f005 fd41 	bl	8021ca2 <mg_ntohs>
 801c220:	4603      	mov	r3, r0
 801c222:	4619      	mov	r1, r3
 801c224:	6878      	ldr	r0, [r7, #4]
 801c226:	f7ff fc62 	bl	801baee <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 801c22a:	697b      	ldr	r3, [r7, #20]
 801c22c:	69ba      	ldr	r2, [r7, #24]
 801c22e:	4619      	mov	r1, r3
 801c230:	6878      	ldr	r0, [r7, #4]
 801c232:	f004 fa45 	bl	80206c0 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 801c236:	7cfb      	ldrb	r3, [r7, #19]
 801c238:	f003 0304 	and.w	r3, r3, #4
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d035      	beq.n	801c2ac <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c246:	f003 0304 	and.w	r3, r3, #4
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d007      	beq.n	801c260 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c258:	461a      	mov	r2, r3
 801c25a:	6878      	ldr	r0, [r7, #4]
 801c25c:	f7ff fdaa 	bl	801bdb4 <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c260:	683b      	ldr	r3, [r7, #0]
 801c262:	69db      	ldr	r3, [r3, #28]
 801c264:	b29b      	uxth	r3, r3
 801c266:	4618      	mov	r0, r3
 801c268:	f005 fd1b 	bl	8021ca2 <mg_ntohs>
 801c26c:	4603      	mov	r3, r0
 801c26e:	4619      	mov	r1, r3
 801c270:	6878      	ldr	r0, [r7, #4]
 801c272:	f7ff fc3c 	bl	801baee <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 801c276:	683b      	ldr	r3, [r7, #0]
 801c278:	6999      	ldr	r1, [r3, #24]
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	69db      	ldr	r3, [r3, #28]
 801c27e:	461a      	mov	r2, r3
 801c280:	6878      	ldr	r0, [r7, #4]
 801c282:	f004 fa1d 	bl	80206c0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 801c286:	683b      	ldr	r3, [r7, #0]
 801c288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c28a:	b29b      	uxth	r3, r3
 801c28c:	4618      	mov	r0, r3
 801c28e:	f005 fd08 	bl	8021ca2 <mg_ntohs>
 801c292:	4603      	mov	r3, r0
 801c294:	4619      	mov	r1, r3
 801c296:	6878      	ldr	r0, [r7, #4]
 801c298:	f7ff fc29 	bl	801baee <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 801c29c:	683b      	ldr	r3, [r7, #0]
 801c29e:	6a19      	ldr	r1, [r3, #32]
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2a4:	461a      	mov	r2, r3
 801c2a6:	6878      	ldr	r0, [r7, #4]
 801c2a8:	f004 fa0a 	bl	80206c0 <mg_send>
  }
  if (opts->user.len > 0) {
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	685b      	ldr	r3, [r3, #4]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d012      	beq.n	801c2da <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	685b      	ldr	r3, [r3, #4]
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f005 fcf1 	bl	8021ca2 <mg_ntohs>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	4619      	mov	r1, r3
 801c2c4:	6878      	ldr	r0, [r7, #4]
 801c2c6:	f7ff fc12 	bl	801baee <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	6819      	ldr	r1, [r3, #0]
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	685b      	ldr	r3, [r3, #4]
 801c2d2:	461a      	mov	r2, r3
 801c2d4:	6878      	ldr	r0, [r7, #4]
 801c2d6:	f004 f9f3 	bl	80206c0 <mg_send>
  }
  if (opts->pass.len > 0) {
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	68db      	ldr	r3, [r3, #12]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d012      	beq.n	801c308 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	68db      	ldr	r3, [r3, #12]
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f005 fcda 	bl	8021ca2 <mg_ntohs>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	4619      	mov	r1, r3
 801c2f2:	6878      	ldr	r0, [r7, #4]
 801c2f4:	f7ff fbfb 	bl	801baee <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 801c2f8:	683b      	ldr	r3, [r7, #0]
 801c2fa:	6899      	ldr	r1, [r3, #8]
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	68db      	ldr	r3, [r3, #12]
 801c300:	461a      	mov	r2, r3
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f004 f9dc 	bl	80206c0 <mg_send>
  }
}
 801c308:	bf00      	nop
 801c30a:	3738      	adds	r7, #56	@ 0x38
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}

0801c310 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c310:	b590      	push	{r4, r7, lr}
 801c312:	b087      	sub	sp, #28
 801c314:	af02      	add	r7, sp, #8
 801c316:	6078      	str	r0, [r7, #4]
 801c318:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c31e:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c326:	005b      	lsls	r3, r3, #1
 801c328:	b25b      	sxtb	r3, r3
 801c32a:	f003 0306 	and.w	r3, r3, #6
 801c32e:	b25b      	sxtb	r3, r3
 801c330:	683a      	ldr	r2, [r7, #0]
 801c332:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 801c336:	2a00      	cmp	r2, #0
 801c338:	d001      	beq.n	801c33e <mg_mqtt_pub+0x2e>
 801c33a:	2201      	movs	r2, #1
 801c33c:	e000      	b.n	801c340 <mg_mqtt_pub+0x30>
 801c33e:	2200      	movs	r2, #0
 801c340:	4313      	orrs	r3, r2
 801c342:	b25b      	sxtb	r3, r3
 801c344:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	69da      	ldr	r2, [r3, #28]
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c34e:	4413      	add	r3, r2
 801c350:	3302      	adds	r3, #2
 801c352:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 801c354:	4b51      	ldr	r3, [pc, #324]	@ (801c49c <mg_mqtt_pub+0x18c>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b02      	cmp	r3, #2
 801c35a:	dd19      	ble.n	801c390 <mg_mqtt_pub+0x80>
 801c35c:	4b50      	ldr	r3, [pc, #320]	@ (801c4a0 <mg_mqtt_pub+0x190>)
 801c35e:	f241 123c 	movw	r2, #4412	@ 0x113c
 801c362:	4950      	ldr	r1, [pc, #320]	@ (801c4a4 <mg_mqtt_pub+0x194>)
 801c364:	2003      	movs	r0, #3
 801c366:	f7fe fa7d 	bl	801a864 <mg_log_prefix>
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	69db      	ldr	r3, [r3, #28]
 801c372:	461c      	mov	r4, r3
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	699a      	ldr	r2, [r3, #24]
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c37c:	4618      	mov	r0, r3
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	6a1b      	ldr	r3, [r3, #32]
 801c382:	9301      	str	r3, [sp, #4]
 801c384:	9000      	str	r0, [sp, #0]
 801c386:	4613      	mov	r3, r2
 801c388:	4622      	mov	r2, r4
 801c38a:	4847      	ldr	r0, [pc, #284]	@ (801c4a8 <mg_mqtt_pub+0x198>)
 801c38c:	f7fe faba 	bl	801a904 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c396:	2b00      	cmp	r3, #0
 801c398:	d002      	beq.n	801c3a0 <mg_mqtt_pub+0x90>
 801c39a:	68bb      	ldr	r3, [r7, #8]
 801c39c:	3302      	adds	r3, #2
 801c39e:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c3a6:	f003 0304 	and.w	r3, r3, #4
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d00b      	beq.n	801c3c8 <mg_mqtt_pub+0xb8>
 801c3b0:	683b      	ldr	r3, [r7, #0]
 801c3b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c3b8:	4619      	mov	r1, r3
 801c3ba:	4610      	mov	r0, r2
 801c3bc:	f7ff fce2 	bl	801bd84 <get_props_size>
 801c3c0:	4602      	mov	r2, r0
 801c3c2:	68bb      	ldr	r3, [r7, #8]
 801c3c4:	4413      	add	r3, r2
 801c3c6:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 801c3c8:	683b      	ldr	r3, [r7, #0]
 801c3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d006      	beq.n	801c3e0 <mg_mqtt_pub+0xd0>
 801c3d2:	89fb      	ldrh	r3, [r7, #14]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d003      	beq.n	801c3e0 <mg_mqtt_pub+0xd0>
 801c3d8:	7b7b      	ldrb	r3, [r7, #13]
 801c3da:	f043 0308 	orr.w	r3, r3, #8
 801c3de:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 801c3e0:	7b7a      	ldrb	r2, [r7, #13]
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	2103      	movs	r1, #3
 801c3e6:	6878      	ldr	r0, [r7, #4]
 801c3e8:	f7ff fb3c 	bl	801ba64 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	69db      	ldr	r3, [r3, #28]
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f005 fc55 	bl	8021ca2 <mg_ntohs>
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	4619      	mov	r1, r3
 801c3fc:	6878      	ldr	r0, [r7, #4]
 801c3fe:	f7ff fb76 	bl	801baee <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801c402:	683b      	ldr	r3, [r7, #0]
 801c404:	6999      	ldr	r1, [r3, #24]
 801c406:	683b      	ldr	r3, [r7, #0]
 801c408:	69db      	ldr	r3, [r3, #28]
 801c40a:	461a      	mov	r2, r3
 801c40c:	6878      	ldr	r0, [r7, #4]
 801c40e:	f004 f957 	bl	80206c0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 801c412:	683b      	ldr	r3, [r7, #0]
 801c414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d01e      	beq.n	801c45a <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 801c41c:	89fb      	ldrh	r3, [r7, #14]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d112      	bne.n	801c448 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c428:	3201      	adds	r2, #1
 801c42a:	b292      	uxth	r2, r2
 801c42c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801c42e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c430:	2b00      	cmp	r3, #0
 801c432:	d105      	bne.n	801c440 <mg_mqtt_pub+0x130>
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	685b      	ldr	r3, [r3, #4]
 801c438:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c43a:	3201      	adds	r2, #1
 801c43c:	b292      	uxth	r2, r2
 801c43e:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c446:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 801c448:	89fb      	ldrh	r3, [r7, #14]
 801c44a:	4618      	mov	r0, r3
 801c44c:	f005 fc29 	bl	8021ca2 <mg_ntohs>
 801c450:	4603      	mov	r3, r0
 801c452:	4619      	mov	r1, r3
 801c454:	6878      	ldr	r0, [r7, #4]
 801c456:	f7ff fb4a 	bl	801baee <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c460:	f003 0304 	and.w	r3, r3, #4
 801c464:	b2db      	uxtb	r3, r3
 801c466:	2b00      	cmp	r3, #0
 801c468:	d007      	beq.n	801c47a <mg_mqtt_pub+0x16a>
 801c46a:	683b      	ldr	r3, [r7, #0]
 801c46c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c472:	461a      	mov	r2, r3
 801c474:	6878      	ldr	r0, [r7, #4]
 801c476:	f7ff fc9d 	bl	801bdb4 <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d007      	beq.n	801c492 <mg_mqtt_pub+0x182>
 801c482:	683b      	ldr	r3, [r7, #0]
 801c484:	6a19      	ldr	r1, [r3, #32]
 801c486:	683b      	ldr	r3, [r7, #0]
 801c488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c48a:	461a      	mov	r2, r3
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f004 f917 	bl	80206c0 <mg_send>
  return id;
 801c492:	89fb      	ldrh	r3, [r7, #14]
}
 801c494:	4618      	mov	r0, r3
 801c496:	3714      	adds	r7, #20
 801c498:	46bd      	mov	sp, r7
 801c49a:	bd90      	pop	{r4, r7, pc}
 801c49c:	20000294 	.word	0x20000294
 801c4a0:	08029690 	.word	0x08029690
 801c4a4:	08026838 	.word	0x08026838
 801c4a8:	08027cc8 	.word	0x08027cc8

0801c4ac <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b086      	sub	sp, #24
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
 801c4b4:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c4bc:	f003 0303 	and.w	r3, r3, #3
 801c4c0:	b2db      	uxtb	r3, r3
 801c4c2:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c4ca:	f003 0304 	and.w	r3, r3, #4
 801c4ce:	b2db      	uxtb	r3, r3
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d009      	beq.n	801c4e8 <mg_mqtt_sub+0x3c>
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c4dc:	4619      	mov	r1, r3
 801c4de:	4610      	mov	r0, r2
 801c4e0:	f7ff fc50 	bl	801bd84 <get_props_size>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	e000      	b.n	801c4ea <mg_mqtt_sub+0x3e>
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	69da      	ldr	r2, [r3, #28]
 801c4f0:	697b      	ldr	r3, [r7, #20]
 801c4f2:	4413      	add	r3, r2
 801c4f4:	3305      	adds	r3, #5
 801c4f6:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 801c4f8:	693b      	ldr	r3, [r7, #16]
 801c4fa:	2202      	movs	r2, #2
 801c4fc:	2108      	movs	r1, #8
 801c4fe:	6878      	ldr	r0, [r7, #4]
 801c500:	f7ff fab0 	bl	801ba64 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	685b      	ldr	r3, [r3, #4]
 801c508:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c50a:	3201      	adds	r2, #1
 801c50c:	b292      	uxth	r2, r2
 801c50e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801c510:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c512:	2b00      	cmp	r3, #0
 801c514:	d105      	bne.n	801c522 <mg_mqtt_sub+0x76>
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	685b      	ldr	r3, [r3, #4]
 801c51a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c51c:	3201      	adds	r2, #1
 801c51e:	b292      	uxth	r2, r2
 801c520:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	685b      	ldr	r3, [r3, #4]
 801c526:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c528:	4618      	mov	r0, r3
 801c52a:	f005 fbba 	bl	8021ca2 <mg_ntohs>
 801c52e:	4603      	mov	r3, r0
 801c530:	4619      	mov	r1, r3
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f7ff fadb 	bl	801baee <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c53e:	f003 0304 	and.w	r3, r3, #4
 801c542:	b2db      	uxtb	r3, r3
 801c544:	2b00      	cmp	r3, #0
 801c546:	d007      	beq.n	801c558 <mg_mqtt_sub+0xac>
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c54c:	683b      	ldr	r3, [r7, #0]
 801c54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c550:	461a      	mov	r2, r3
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f7ff fc2e 	bl	801bdb4 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	69db      	ldr	r3, [r3, #28]
 801c55c:	b29b      	uxth	r3, r3
 801c55e:	4618      	mov	r0, r3
 801c560:	f005 fb9f 	bl	8021ca2 <mg_ntohs>
 801c564:	4603      	mov	r3, r0
 801c566:	4619      	mov	r1, r3
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7ff fac0 	bl	801baee <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	6999      	ldr	r1, [r3, #24]
 801c572:	683b      	ldr	r3, [r7, #0]
 801c574:	69db      	ldr	r3, [r3, #28]
 801c576:	461a      	mov	r2, r3
 801c578:	6878      	ldr	r0, [r7, #4]
 801c57a:	f004 f8a1 	bl	80206c0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 801c57e:	f107 030f 	add.w	r3, r7, #15
 801c582:	2201      	movs	r2, #1
 801c584:	4619      	mov	r1, r3
 801c586:	6878      	ldr	r0, [r7, #4]
 801c588:	f004 f89a 	bl	80206c0 <mg_send>
}
 801c58c:	bf00      	nop
 801c58e:	3718      	adds	r7, #24
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}

0801c594 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 801c594:	b580      	push	{r7, lr}
 801c596:	b08a      	sub	sp, #40	@ 0x28
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	603b      	str	r3, [r7, #0]
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	61fb      	str	r3, [r7, #28]
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 801c5b2:	2228      	movs	r2, #40	@ 0x28
 801c5b4:	2100      	movs	r1, #0
 801c5b6:	6838      	ldr	r0, [r7, #0]
 801c5b8:	f006 fc4e 	bl	8022e58 <memset>
  m->dgram.buf = (char *) buf;
 801c5bc:	683b      	ldr	r3, [r7, #0]
 801c5be:	68fa      	ldr	r2, [r7, #12]
 801c5c0:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 801c5c2:	68bb      	ldr	r3, [r7, #8]
 801c5c4:	2b01      	cmp	r3, #1
 801c5c6:	d801      	bhi.n	801c5cc <mg_mqtt_parse+0x38>
 801c5c8:	2301      	movs	r3, #1
 801c5ca:	e104      	b.n	801c7d6 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	781b      	ldrb	r3, [r3, #0]
 801c5d0:	091b      	lsrs	r3, r3, #4
 801c5d2:	b2da      	uxtb	r2, r3
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	781b      	ldrb	r3, [r3, #0]
 801c5dc:	085b      	lsrs	r3, r3, #1
 801c5de:	b2db      	uxtb	r3, r3
 801c5e0:	f003 0303 	and.w	r3, r3, #3
 801c5e4:	b2da      	uxtb	r2, r3
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	61bb      	str	r3, [r7, #24]
 801c5ee:	69bb      	ldr	r3, [r7, #24]
 801c5f0:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	3301      	adds	r3, #1
 801c5f6:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 801c5f8:	e01f      	b.n	801c63a <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 801c5fa:	6a3b      	ldr	r3, [r7, #32]
 801c5fc:	1c5a      	adds	r2, r3, #1
 801c5fe:	623a      	str	r2, [r7, #32]
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 801c606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c60a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 801c60e:	69ba      	ldr	r2, [r7, #24]
 801c610:	4613      	mov	r3, r2
 801c612:	00db      	lsls	r3, r3, #3
 801c614:	1a9b      	subs	r3, r3, r2
 801c616:	fa01 f303 	lsl.w	r3, r1, r3
 801c61a:	461a      	mov	r2, r3
 801c61c:	69fb      	ldr	r3, [r7, #28]
 801c61e:	4413      	add	r3, r2
 801c620:	61fb      	str	r3, [r7, #28]
    len_len++;
 801c622:	69bb      	ldr	r3, [r7, #24]
 801c624:	3301      	adds	r3, #1
 801c626:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 801c628:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	da0c      	bge.n	801c64a <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 801c630:	69bb      	ldr	r3, [r7, #24]
 801c632:	2b03      	cmp	r3, #3
 801c634:	d901      	bls.n	801c63a <mg_mqtt_parse+0xa6>
 801c636:	2302      	movs	r3, #2
 801c638:	e0cd      	b.n	801c7d6 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 801c63a:	6a3a      	ldr	r2, [r7, #32]
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	1ad3      	subs	r3, r2, r3
 801c640:	461a      	mov	r2, r3
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	4293      	cmp	r3, r2
 801c646:	d8d8      	bhi.n	801c5fa <mg_mqtt_parse+0x66>
 801c648:	e000      	b.n	801c64c <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 801c64a:	bf00      	nop
  }
  end = p + n;
 801c64c:	6a3a      	ldr	r2, [r7, #32]
 801c64e:	69fb      	ldr	r3, [r7, #28]
 801c650:	4413      	add	r3, r2
 801c652:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 801c654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801c658:	2b00      	cmp	r3, #0
 801c65a:	db05      	blt.n	801c668 <mg_mqtt_parse+0xd4>
 801c65c:	68fa      	ldr	r2, [r7, #12]
 801c65e:	68bb      	ldr	r3, [r7, #8]
 801c660:	4413      	add	r3, r2
 801c662:	697a      	ldr	r2, [r7, #20]
 801c664:	429a      	cmp	r2, r3
 801c666:	d901      	bls.n	801c66c <mg_mqtt_parse+0xd8>
 801c668:	2301      	movs	r3, #1
 801c66a:	e0b4      	b.n	801c7d6 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 801c66c:	697a      	ldr	r2, [r7, #20]
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	1ad3      	subs	r3, r2, r3
 801c672:	461a      	mov	r2, r3
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 801c678:	683b      	ldr	r3, [r7, #0]
 801c67a:	7e9b      	ldrb	r3, [r3, #26]
 801c67c:	2b0b      	cmp	r3, #11
 801c67e:	f300 80a8 	bgt.w	801c7d2 <mg_mqtt_parse+0x23e>
 801c682:	2b04      	cmp	r3, #4
 801c684:	da10      	bge.n	801c6a8 <mg_mqtt_parse+0x114>
 801c686:	2b02      	cmp	r3, #2
 801c688:	d002      	beq.n	801c690 <mg_mqtt_parse+0xfc>
 801c68a:	2b03      	cmp	r3, #3
 801c68c:	d024      	beq.n	801c6d8 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 801c68e:	e0a0      	b.n	801c7d2 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 801c690:	697a      	ldr	r2, [r7, #20]
 801c692:	6a3b      	ldr	r3, [r7, #32]
 801c694:	1ad3      	subs	r3, r2, r3
 801c696:	2b01      	cmp	r3, #1
 801c698:	dc01      	bgt.n	801c69e <mg_mqtt_parse+0x10a>
 801c69a:	2302      	movs	r3, #2
 801c69c:	e09b      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 801c69e:	6a3b      	ldr	r3, [r7, #32]
 801c6a0:	785a      	ldrb	r2, [r3, #1]
 801c6a2:	683b      	ldr	r3, [r7, #0]
 801c6a4:	771a      	strb	r2, [r3, #28]
      break;
 801c6a6:	e095      	b.n	801c7d4 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801c6a8:	6a3b      	ldr	r3, [r7, #32]
 801c6aa:	3302      	adds	r3, #2
 801c6ac:	697a      	ldr	r2, [r7, #20]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d201      	bcs.n	801c6b6 <mg_mqtt_parse+0x122>
 801c6b2:	2302      	movs	r3, #2
 801c6b4:	e08f      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801c6b6:	6a3b      	ldr	r3, [r7, #32]
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	021b      	lsls	r3, r3, #8
 801c6bc:	b21a      	sxth	r2, r3
 801c6be:	6a3b      	ldr	r3, [r7, #32]
 801c6c0:	3301      	adds	r3, #1
 801c6c2:	781b      	ldrb	r3, [r3, #0]
 801c6c4:	b21b      	sxth	r3, r3
 801c6c6:	4313      	orrs	r3, r2
 801c6c8:	b21b      	sxth	r3, r3
 801c6ca:	b29a      	uxth	r2, r3
 801c6cc:	683b      	ldr	r3, [r7, #0]
 801c6ce:	831a      	strh	r2, [r3, #24]
      p += 2;
 801c6d0:	6a3b      	ldr	r3, [r7, #32]
 801c6d2:	3302      	adds	r3, #2
 801c6d4:	623b      	str	r3, [r7, #32]
      break;
 801c6d6:	e07d      	b.n	801c7d4 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801c6d8:	6a3b      	ldr	r3, [r7, #32]
 801c6da:	3302      	adds	r3, #2
 801c6dc:	697a      	ldr	r2, [r7, #20]
 801c6de:	429a      	cmp	r2, r3
 801c6e0:	d201      	bcs.n	801c6e6 <mg_mqtt_parse+0x152>
 801c6e2:	2302      	movs	r3, #2
 801c6e4:	e077      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801c6e6:	6a3b      	ldr	r3, [r7, #32]
 801c6e8:	781b      	ldrb	r3, [r3, #0]
 801c6ea:	021b      	lsls	r3, r3, #8
 801c6ec:	b21a      	sxth	r2, r3
 801c6ee:	6a3b      	ldr	r3, [r7, #32]
 801c6f0:	3301      	adds	r3, #1
 801c6f2:	781b      	ldrb	r3, [r3, #0]
 801c6f4:	b21b      	sxth	r3, r3
 801c6f6:	4313      	orrs	r3, r2
 801c6f8:	b21b      	sxth	r3, r3
 801c6fa:	b29b      	uxth	r3, r3
 801c6fc:	461a      	mov	r2, r3
 801c6fe:	683b      	ldr	r3, [r7, #0]
 801c700:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 801c702:	6a3b      	ldr	r3, [r7, #32]
 801c704:	1c9a      	adds	r2, r3, #2
 801c706:	683b      	ldr	r3, [r7, #0]
 801c708:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 801c70a:	683b      	ldr	r3, [r7, #0]
 801c70c:	685b      	ldr	r3, [r3, #4]
 801c70e:	3302      	adds	r3, #2
 801c710:	6a3a      	ldr	r2, [r7, #32]
 801c712:	4413      	add	r3, r2
 801c714:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801c716:	6a3a      	ldr	r2, [r7, #32]
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d901      	bls.n	801c722 <mg_mqtt_parse+0x18e>
 801c71e:	2302      	movs	r3, #2
 801c720:	e059      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 801c722:	683b      	ldr	r3, [r7, #0]
 801c724:	7edb      	ldrb	r3, [r3, #27]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d016      	beq.n	801c758 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 801c72a:	6a3b      	ldr	r3, [r7, #32]
 801c72c:	3302      	adds	r3, #2
 801c72e:	697a      	ldr	r2, [r7, #20]
 801c730:	429a      	cmp	r2, r3
 801c732:	d201      	bcs.n	801c738 <mg_mqtt_parse+0x1a4>
 801c734:	2302      	movs	r3, #2
 801c736:	e04e      	b.n	801c7d6 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801c738:	6a3b      	ldr	r3, [r7, #32]
 801c73a:	781b      	ldrb	r3, [r3, #0]
 801c73c:	021b      	lsls	r3, r3, #8
 801c73e:	b21a      	sxth	r2, r3
 801c740:	6a3b      	ldr	r3, [r7, #32]
 801c742:	3301      	adds	r3, #1
 801c744:	781b      	ldrb	r3, [r3, #0]
 801c746:	b21b      	sxth	r3, r3
 801c748:	4313      	orrs	r3, r2
 801c74a:	b21b      	sxth	r3, r3
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	831a      	strh	r2, [r3, #24]
        p += 2;
 801c752:	6a3b      	ldr	r3, [r7, #32]
 801c754:	3302      	adds	r3, #2
 801c756:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801c758:	6a3a      	ldr	r2, [r7, #32]
 801c75a:	697b      	ldr	r3, [r7, #20]
 801c75c:	429a      	cmp	r2, r3
 801c75e:	d901      	bls.n	801c764 <mg_mqtt_parse+0x1d0>
 801c760:	2302      	movs	r3, #2
 801c762:	e038      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 801c764:	79fb      	ldrb	r3, [r7, #7]
 801c766:	2b05      	cmp	r3, #5
 801c768:	d123      	bne.n	801c7b2 <mg_mqtt_parse+0x21e>
 801c76a:	6a3b      	ldr	r3, [r7, #32]
 801c76c:	3302      	adds	r3, #2
 801c76e:	697a      	ldr	r2, [r7, #20]
 801c770:	429a      	cmp	r2, r3
 801c772:	d91e      	bls.n	801c7b2 <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 801c774:	697a      	ldr	r2, [r7, #20]
 801c776:	6a3b      	ldr	r3, [r7, #32]
 801c778:	1ad3      	subs	r3, r2, r3
 801c77a:	4619      	mov	r1, r3
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	3324      	adds	r3, #36	@ 0x24
 801c780:	461a      	mov	r2, r3
 801c782:	6a38      	ldr	r0, [r7, #32]
 801c784:	f7ff fa0f 	bl	801bba6 <decode_varint>
 801c788:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 801c78a:	69bb      	ldr	r3, [r7, #24]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d101      	bne.n	801c794 <mg_mqtt_parse+0x200>
 801c790:	2302      	movs	r3, #2
 801c792:	e020      	b.n	801c7d6 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 801c794:	6a3a      	ldr	r2, [r7, #32]
 801c796:	69bb      	ldr	r3, [r7, #24]
 801c798:	441a      	add	r2, r3
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	1ad3      	subs	r3, r2, r3
 801c79e:	461a      	mov	r2, r3
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c7a8:	69bb      	ldr	r3, [r7, #24]
 801c7aa:	4413      	add	r3, r2
 801c7ac:	6a3a      	ldr	r2, [r7, #32]
 801c7ae:	4413      	add	r3, r2
 801c7b0:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801c7b2:	6a3a      	ldr	r2, [r7, #32]
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d901      	bls.n	801c7be <mg_mqtt_parse+0x22a>
 801c7ba:	2302      	movs	r3, #2
 801c7bc:	e00b      	b.n	801c7d6 <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	6a3a      	ldr	r2, [r7, #32]
 801c7c2:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 801c7c4:	697a      	ldr	r2, [r7, #20]
 801c7c6:	6a3b      	ldr	r3, [r7, #32]
 801c7c8:	1ad3      	subs	r3, r2, r3
 801c7ca:	461a      	mov	r2, r3
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	60da      	str	r2, [r3, #12]
      break;
 801c7d0:	e000      	b.n	801c7d4 <mg_mqtt_parse+0x240>
      break;
 801c7d2:	bf00      	nop
  }
  return MQTT_OK;
 801c7d4:	2300      	movs	r3, #0
}
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	3728      	adds	r7, #40	@ 0x28
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
	...

0801c7e0 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 801c7e0:	b590      	push	{r4, r7, lr}
 801c7e2:	b099      	sub	sp, #100	@ 0x64
 801c7e4:	af02      	add	r7, sp, #8
 801c7e6:	60f8      	str	r0, [r7, #12]
 801c7e8:	60b9      	str	r1, [r7, #8]
 801c7ea:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	2b07      	cmp	r3, #7
 801c7f0:	f040 8124 	bne.w	801ca3c <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c7fa:	f003 0304 	and.w	r3, r3, #4
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	2b00      	cmp	r3, #0
 801c802:	d001      	beq.n	801c808 <mqtt_cb+0x28>
 801c804:	2305      	movs	r3, #5
 801c806:	e000      	b.n	801c80a <mqtt_cb+0x2a>
 801c808:	2304      	movs	r3, #4
 801c80a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801c816:	f107 0314 	add.w	r3, r7, #20
 801c81a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801c81e:	f7ff feb9 	bl	801c594 <mg_mqtt_parse>
 801c822:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 801c824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c826:	2b02      	cmp	r3, #2
 801c828:	d118      	bne.n	801c85c <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 801c82a:	4b86      	ldr	r3, [pc, #536]	@ (801ca44 <mqtt_cb+0x264>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	dd0c      	ble.n	801c84c <mqtt_cb+0x6c>
 801c832:	4b85      	ldr	r3, [pc, #532]	@ (801ca48 <mqtt_cb+0x268>)
 801c834:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 801c838:	4984      	ldr	r1, [pc, #528]	@ (801ca4c <mqtt_cb+0x26c>)
 801c83a:	2001      	movs	r0, #1
 801c83c:	f7fe f812 	bl	801a864 <mg_log_prefix>
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c844:	4619      	mov	r1, r3
 801c846:	4882      	ldr	r0, [pc, #520]	@ (801ca50 <mqtt_cb+0x270>)
 801c848:	f7fe f85c 	bl	801a904 <mg_log>
        c->is_closing = 1;
 801c84c:	68fa      	ldr	r2, [r7, #12]
 801c84e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c852:	f043 0320 	orr.w	r3, r3, #32
 801c856:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 801c85a:	e0ef      	b.n	801ca3c <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 801c85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c85e:	2b00      	cmp	r3, #0
 801c860:	f040 80eb 	bne.w	801ca3a <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 801c864:	4b77      	ldr	r3, [pc, #476]	@ (801ca44 <mqtt_cb+0x264>)
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	2b03      	cmp	r3, #3
 801c86a:	dd17      	ble.n	801c89c <mqtt_cb+0xbc>
 801c86c:	4b76      	ldr	r3, [pc, #472]	@ (801ca48 <mqtt_cb+0x268>)
 801c86e:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 801c872:	4976      	ldr	r1, [pc, #472]	@ (801ca4c <mqtt_cb+0x26c>)
 801c874:	2004      	movs	r0, #4
 801c876:	f7fd fff5 	bl	801a864 <mg_log_prefix>
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c87e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801c882:	4618      	mov	r0, r3
 801c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c886:	461c      	mov	r4, r3
 801c888:	6a3b      	ldr	r3, [r7, #32]
 801c88a:	461a      	mov	r2, r3
 801c88c:	69fb      	ldr	r3, [r7, #28]
 801c88e:	9301      	str	r3, [sp, #4]
 801c890:	9200      	str	r2, [sp, #0]
 801c892:	4623      	mov	r3, r4
 801c894:	4602      	mov	r2, r0
 801c896:	486f      	ldr	r0, [pc, #444]	@ (801ca54 <mqtt_cb+0x274>)
 801c898:	f7fe f834 	bl	801a904 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 801c89c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801c8a0:	3b02      	subs	r3, #2
 801c8a2:	2b04      	cmp	r3, #4
 801c8a4:	f200 80ba 	bhi.w	801ca1c <mqtt_cb+0x23c>
 801c8a8:	a201      	add	r2, pc, #4	@ (adr r2, 801c8b0 <mqtt_cb+0xd0>)
 801c8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8ae:	bf00      	nop
 801c8b0:	0801c8c5 	.word	0x0801c8c5
 801c8b4:	0801c939 	.word	0x0801c939
 801c8b8:	0801ca1d 	.word	0x0801ca1d
 801c8bc:	0801c9c3 	.word	0x0801c9c3
 801c8c0:	0801c9ef 	.word	0x0801c9ef
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 801c8c4:	f107 0314 	add.w	r3, r7, #20
 801c8c8:	331c      	adds	r3, #28
 801c8ca:	461a      	mov	r2, r3
 801c8cc:	2111      	movs	r1, #17
 801c8ce:	68f8      	ldr	r0, [r7, #12]
 801c8d0:	f7f8 fbe4 	bl	801509c <mg_call>
            if (mm.ack == 0) {
 801c8d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d112      	bne.n	801c902 <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 801c8dc:	4b59      	ldr	r3, [pc, #356]	@ (801ca44 <mqtt_cb+0x264>)
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	2b02      	cmp	r3, #2
 801c8e2:	f340 809a 	ble.w	801ca1a <mqtt_cb+0x23a>
 801c8e6:	4b58      	ldr	r3, [pc, #352]	@ (801ca48 <mqtt_cb+0x268>)
 801c8e8:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 801c8ec:	4957      	ldr	r1, [pc, #348]	@ (801ca4c <mqtt_cb+0x26c>)
 801c8ee:	2003      	movs	r0, #3
 801c8f0:	f7fd ffb8 	bl	801a864 <mg_log_prefix>
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	4857      	ldr	r0, [pc, #348]	@ (801ca58 <mqtt_cb+0x278>)
 801c8fc:	f7fe f802 	bl	801a904 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 801c900:	e08b      	b.n	801ca1a <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 801c902:	4b50      	ldr	r3, [pc, #320]	@ (801ca44 <mqtt_cb+0x264>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	2b00      	cmp	r3, #0
 801c908:	dd0e      	ble.n	801c928 <mqtt_cb+0x148>
 801c90a:	4b4f      	ldr	r3, [pc, #316]	@ (801ca48 <mqtt_cb+0x268>)
 801c90c:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 801c910:	494e      	ldr	r1, [pc, #312]	@ (801ca4c <mqtt_cb+0x26c>)
 801c912:	2001      	movs	r0, #1
 801c914:	f7fd ffa6 	bl	801a864 <mg_log_prefix>
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c91c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801c920:	4619      	mov	r1, r3
 801c922:	484e      	ldr	r0, [pc, #312]	@ (801ca5c <mqtt_cb+0x27c>)
 801c924:	f7fd ffee 	bl	801a904 <mg_log>
              c->is_closing = 1;
 801c928:	68fa      	ldr	r2, [r7, #12]
 801c92a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c92e:	f043 0320 	orr.w	r3, r3, #32
 801c932:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 801c936:	e070      	b.n	801ca1a <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 801c938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d038      	beq.n	801c9b2 <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 801c940:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c942:	4618      	mov	r0, r3
 801c944:	f005 f9ad 	bl	8021ca2 <mg_ntohs>
 801c948:	4603      	mov	r3, r0
 801c94a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 801c94e:	2302      	movs	r3, #2
 801c950:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c958:	f003 0304 	and.w	r3, r3, #4
 801c95c:	b2db      	uxtb	r3, r3
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d002      	beq.n	801c968 <mqtt_cb+0x188>
 801c962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c964:	3302      	adds	r3, #2
 801c966:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 801c968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 801c96c:	2b02      	cmp	r3, #2
 801c96e:	d101      	bne.n	801c974 <mqtt_cb+0x194>
 801c970:	2105      	movs	r1, #5
 801c972:	e000      	b.n	801c976 <mqtt_cb+0x196>
 801c974:	2104      	movs	r1, #4
 801c976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c978:	2200      	movs	r2, #0
 801c97a:	68f8      	ldr	r0, [r7, #12]
 801c97c:	f7ff f872 	bl	801ba64 <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 801c980:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 801c984:	2202      	movs	r2, #2
 801c986:	4619      	mov	r1, r3
 801c988:	68f8      	ldr	r0, [r7, #12]
 801c98a:	f003 fe99 	bl	80206c0 <mg_send>

              if (c->is_mqtt5) {
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c994:	f003 0304 	and.w	r3, r3, #4
 801c998:	b2db      	uxtb	r3, r3
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d009      	beq.n	801c9b2 <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 801c99e:	2300      	movs	r3, #0
 801c9a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 801c9a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c9a8:	2202      	movs	r2, #2
 801c9aa:	4619      	mov	r1, r3
 801c9ac:	68f8      	ldr	r0, [r7, #12]
 801c9ae:	f003 fe87 	bl	80206c0 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 801c9b2:	f107 0314 	add.w	r3, r7, #20
 801c9b6:	461a      	mov	r2, r3
 801c9b8:	2110      	movs	r1, #16
 801c9ba:	68f8      	ldr	r0, [r7, #12]
 801c9bc:	f7f8 fb6e 	bl	801509c <mg_call>
            break;
 801c9c0:	e02c      	b.n	801ca1c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801c9c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f005 f96c 	bl	8021ca2 <mg_ntohs>
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 801c9ce:	2302      	movs	r3, #2
 801c9d0:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 801c9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c9d4:	2202      	movs	r2, #2
 801c9d6:	2106      	movs	r1, #6
 801c9d8:	68f8      	ldr	r0, [r7, #12]
 801c9da:	f7ff f843 	bl	801ba64 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 801c9de:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 801c9e2:	2202      	movs	r2, #2
 801c9e4:	4619      	mov	r1, r3
 801c9e6:	68f8      	ldr	r0, [r7, #12]
 801c9e8:	f003 fe6a 	bl	80206c0 <mg_send>
            break;
 801c9ec:	e016      	b.n	801ca1c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801c9ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	f005 f956 	bl	8021ca2 <mg_ntohs>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 801c9fa:	2302      	movs	r3, #2
 801c9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 801c9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ca00:	2200      	movs	r2, #0
 801ca02:	2107      	movs	r1, #7
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ff f82d 	bl	801ba64 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 801ca0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801ca0e:	2202      	movs	r2, #2
 801ca10:	4619      	mov	r1, r3
 801ca12:	68f8      	ldr	r0, [r7, #12]
 801ca14:	f003 fe54 	bl	80206c0 <mg_send>
            break;
 801ca18:	e000      	b.n	801ca1c <mqtt_cb+0x23c>
            break;
 801ca1a:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 801ca1c:	f107 0314 	add.w	r3, r7, #20
 801ca20:	461a      	mov	r2, r3
 801ca22:	210f      	movs	r1, #15
 801ca24:	68f8      	ldr	r0, [r7, #12]
 801ca26:	f7f8 fb39 	bl	801509c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	3338      	adds	r3, #56	@ 0x38
 801ca2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ca30:	2100      	movs	r1, #0
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7fd f804 	bl	8019a40 <mg_iobuf_del>
    for (;;) {
 801ca38:	e6dc      	b.n	801c7f4 <mqtt_cb+0x14>
      } else {
        break;
 801ca3a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801ca3c:	bf00      	nop
 801ca3e:	375c      	adds	r7, #92	@ 0x5c
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd90      	pop	{r4, r7, pc}
 801ca44:	20000294 	.word	0x20000294
 801ca48:	0802969c 	.word	0x0802969c
 801ca4c:	08026838 	.word	0x08026838
 801ca50:	08027ce0 	.word	0x08027ce0
 801ca54:	08027cfc 	.word	0x08027cfc
 801ca58:	08027d1c 	.word	0x08027d1c
 801ca5c:	08027d2c 	.word	0x08027d2c

0801ca60 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b096      	sub	sp, #88	@ 0x58
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	60f8      	str	r0, [r7, #12]
 801ca68:	60b9      	str	r1, [r7, #8]
 801ca6a:	607a      	str	r2, [r7, #4]
 801ca6c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 801ca6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ca70:	683a      	ldr	r2, [r7, #0]
 801ca72:	68b9      	ldr	r1, [r7, #8]
 801ca74:	68f8      	ldr	r0, [r7, #12]
 801ca76:	f000 fb5f 	bl	801d138 <mg_connect>
 801ca7a:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 801ca7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d015      	beq.n	801caae <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 801ca82:	f107 0314 	add.w	r3, r7, #20
 801ca86:	2240      	movs	r2, #64	@ 0x40
 801ca88:	2100      	movs	r1, #0
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f006 f9e4 	bl	8022e58 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d102      	bne.n	801ca9c <mg_mqtt_connect+0x3c>
 801ca96:	f107 0314 	add.w	r3, r7, #20
 801ca9a:	e000      	b.n	801ca9e <mg_mqtt_connect+0x3e>
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	4619      	mov	r1, r3
 801caa0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801caa2:	f7ff fad1 	bl	801c048 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 801caa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801caa8:	4a03      	ldr	r2, [pc, #12]	@ (801cab8 <mg_mqtt_connect+0x58>)
 801caaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 801caae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801cab0:	4618      	mov	r0, r3
 801cab2:	3758      	adds	r7, #88	@ 0x58
 801cab4:	46bd      	mov	sp, r7
 801cab6:	bd80      	pop	{r7, pc}
 801cab8:	0801c7e1 	.word	0x0801c7e1

0801cabc <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b086      	sub	sp, #24
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	60f8      	str	r0, [r7, #12]
 801cac4:	60b9      	str	r1, [r7, #8]
 801cac6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cacc:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	68ba      	ldr	r2, [r7, #8]
 801cad8:	4805      	ldr	r0, [pc, #20]	@ (801caf0 <mg_vprintf+0x34>)
 801cada:	f7f9 f80f 	bl	8015afc <mg_vxprintf>
  return c->send.len - old;
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801cae2:	697b      	ldr	r3, [r7, #20]
 801cae4:	1ad3      	subs	r3, r2, r3
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3718      	adds	r7, #24
 801caea:	46bd      	mov	sp, r7
 801caec:	bd80      	pop	{r7, pc}
 801caee:	bf00      	nop
 801caf0:	0802082d 	.word	0x0802082d

0801caf4 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 801caf4:	b40e      	push	{r1, r2, r3}
 801caf6:	b580      	push	{r7, lr}
 801caf8:	b085      	sub	sp, #20
 801cafa:	af00      	add	r7, sp, #0
 801cafc:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 801cafe:	2300      	movs	r3, #0
 801cb00:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801cb02:	f107 0320 	add.w	r3, r7, #32
 801cb06:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 801cb08:	f107 0308 	add.w	r3, r7, #8
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	69f9      	ldr	r1, [r7, #28]
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f7ff ffd3 	bl	801cabc <mg_vprintf>
 801cb16:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 801cb18:	68fb      	ldr	r3, [r7, #12]
}
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	3714      	adds	r7, #20
 801cb1e:	46bd      	mov	sp, r7
 801cb20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cb24:	b003      	add	sp, #12
 801cb26:	4770      	bx	lr

0801cb28 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b088      	sub	sp, #32
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	f107 0308 	add.w	r3, r7, #8
 801cb32:	e883 0003 	stmia.w	r3, {r0, r1}
 801cb36:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 801cb38:	4811      	ldr	r0, [pc, #68]	@ (801cb80 <mg_atonl+0x58>)
 801cb3a:	f005 f899 	bl	8021c70 <mg_ntohl>
 801cb3e:	4603      	mov	r3, r0
 801cb40:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 801cb42:	f107 0318 	add.w	r3, r7, #24
 801cb46:	490f      	ldr	r1, [pc, #60]	@ (801cb84 <mg_atonl+0x5c>)
 801cb48:	4618      	mov	r0, r3
 801cb4a:	f004 f907 	bl	8020d5c <mg_str_s>
 801cb4e:	f107 0318 	add.w	r3, r7, #24
 801cb52:	cb0c      	ldmia	r3, {r2, r3}
 801cb54:	f107 0108 	add.w	r1, r7, #8
 801cb58:	c903      	ldmia	r1, {r0, r1}
 801cb5a:	f004 f98b 	bl	8020e74 <mg_strcasecmp>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d001      	beq.n	801cb68 <mg_atonl+0x40>
 801cb64:	2300      	movs	r3, #0
 801cb66:	e006      	b.n	801cb76 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	697a      	ldr	r2, [r7, #20]
 801cb6c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2200      	movs	r2, #0
 801cb72:	74da      	strb	r2, [r3, #19]
  return true;
 801cb74:	2301      	movs	r3, #1
}
 801cb76:	4618      	mov	r0, r3
 801cb78:	3720      	adds	r7, #32
 801cb7a:	46bd      	mov	sp, r7
 801cb7c:	bd80      	pop	{r7, pc}
 801cb7e:	bf00      	nop
 801cb80:	7f000001 	.word	0x7f000001
 801cb84:	08027d4c 	.word	0x08027d4c

0801cb88 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b084      	sub	sp, #16
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	f107 0308 	add.w	r3, r7, #8
 801cb92:	e883 0003 	stmia.w	r3, {r0, r1}
 801cb96:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d001      	beq.n	801cba2 <mg_atone+0x1a>
 801cb9e:	2300      	movs	r3, #0
 801cba0:	e009      	b.n	801cbb6 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	2210      	movs	r2, #16
 801cba6:	2100      	movs	r1, #0
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f006 f955 	bl	8022e58 <memset>
  addr->is_ip6 = false;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	74da      	strb	r2, [r3, #19]
  return true;
 801cbb4:	2301      	movs	r3, #1
}
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	3710      	adds	r7, #16
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	bd80      	pop	{r7, pc}

0801cbbe <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801cbbe:	b480      	push	{r7}
 801cbc0:	b089      	sub	sp, #36	@ 0x24
 801cbc2:	af00      	add	r7, sp, #0
 801cbc4:	f107 0308 	add.w	r3, r7, #8
 801cbc8:	e883 0003 	stmia.w	r3, {r0, r1}
 801cbcc:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801cbce:	2300      	movs	r3, #0
 801cbd0:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	61fb      	str	r3, [r7, #28]
 801cbda:	e049      	b.n	801cc70 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801cbdc:	68ba      	ldr	r2, [r7, #8]
 801cbde:	69fb      	ldr	r3, [r7, #28]
 801cbe0:	4413      	add	r3, r2
 801cbe2:	781b      	ldrb	r3, [r3, #0]
 801cbe4:	2b2f      	cmp	r3, #47	@ 0x2f
 801cbe6:	d925      	bls.n	801cc34 <mg_aton4+0x76>
 801cbe8:	68ba      	ldr	r2, [r7, #8]
 801cbea:	69fb      	ldr	r3, [r7, #28]
 801cbec:	4413      	add	r3, r2
 801cbee:	781b      	ldrb	r3, [r3, #0]
 801cbf0:	2b39      	cmp	r3, #57	@ 0x39
 801cbf2:	d81f      	bhi.n	801cc34 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801cbf4:	f107 0210 	add.w	r2, r7, #16
 801cbf8:	69bb      	ldr	r3, [r7, #24]
 801cbfa:	4413      	add	r3, r2
 801cbfc:	781b      	ldrb	r3, [r3, #0]
 801cbfe:	461a      	mov	r2, r3
 801cc00:	4613      	mov	r3, r2
 801cc02:	009b      	lsls	r3, r3, #2
 801cc04:	4413      	add	r3, r2
 801cc06:	005b      	lsls	r3, r3, #1
 801cc08:	4619      	mov	r1, r3
 801cc0a:	68ba      	ldr	r2, [r7, #8]
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	4413      	add	r3, r2
 801cc10:	781b      	ldrb	r3, [r3, #0]
 801cc12:	3b30      	subs	r3, #48	@ 0x30
 801cc14:	440b      	add	r3, r1
 801cc16:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 801cc18:	697b      	ldr	r3, [r7, #20]
 801cc1a:	2bff      	cmp	r3, #255	@ 0xff
 801cc1c:	dd01      	ble.n	801cc22 <mg_aton4+0x64>
 801cc1e:	2300      	movs	r3, #0
 801cc20:	e03d      	b.n	801cc9e <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 801cc22:	697b      	ldr	r3, [r7, #20]
 801cc24:	b2d9      	uxtb	r1, r3
 801cc26:	f107 0210 	add.w	r2, r7, #16
 801cc2a:	69bb      	ldr	r3, [r7, #24]
 801cc2c:	4413      	add	r3, r2
 801cc2e:	460a      	mov	r2, r1
 801cc30:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801cc32:	e01a      	b.n	801cc6a <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 801cc34:	68ba      	ldr	r2, [r7, #8]
 801cc36:	69fb      	ldr	r3, [r7, #28]
 801cc38:	4413      	add	r3, r2
 801cc3a:	781b      	ldrb	r3, [r3, #0]
 801cc3c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc3e:	d112      	bne.n	801cc66 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801cc40:	69bb      	ldr	r3, [r7, #24]
 801cc42:	2b02      	cmp	r3, #2
 801cc44:	d809      	bhi.n	801cc5a <mg_aton4+0x9c>
 801cc46:	69fb      	ldr	r3, [r7, #28]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d006      	beq.n	801cc5a <mg_aton4+0x9c>
 801cc4c:	68ba      	ldr	r2, [r7, #8]
 801cc4e:	69fb      	ldr	r3, [r7, #28]
 801cc50:	3b01      	subs	r3, #1
 801cc52:	4413      	add	r3, r2
 801cc54:	781b      	ldrb	r3, [r3, #0]
 801cc56:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc58:	d101      	bne.n	801cc5e <mg_aton4+0xa0>
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	e01f      	b.n	801cc9e <mg_aton4+0xe0>
      num_dots++;
 801cc5e:	69bb      	ldr	r3, [r7, #24]
 801cc60:	3301      	adds	r3, #1
 801cc62:	61bb      	str	r3, [r7, #24]
 801cc64:	e001      	b.n	801cc6a <mg_aton4+0xac>
    } else {
      return false;
 801cc66:	2300      	movs	r3, #0
 801cc68:	e019      	b.n	801cc9e <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 801cc6a:	69fb      	ldr	r3, [r7, #28]
 801cc6c:	3301      	adds	r3, #1
 801cc6e:	61fb      	str	r3, [r7, #28]
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	69fa      	ldr	r2, [r7, #28]
 801cc74:	429a      	cmp	r2, r3
 801cc76:	d3b1      	bcc.n	801cbdc <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801cc78:	69bb      	ldr	r3, [r7, #24]
 801cc7a:	2b03      	cmp	r3, #3
 801cc7c:	d106      	bne.n	801cc8c <mg_aton4+0xce>
 801cc7e:	68ba      	ldr	r2, [r7, #8]
 801cc80:	69fb      	ldr	r3, [r7, #28]
 801cc82:	3b01      	subs	r3, #1
 801cc84:	4413      	add	r3, r2
 801cc86:	781b      	ldrb	r3, [r3, #0]
 801cc88:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc8a:	d101      	bne.n	801cc90 <mg_aton4+0xd2>
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	e006      	b.n	801cc9e <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	693a      	ldr	r2, [r7, #16]
 801cc94:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	2200      	movs	r2, #0
 801cc9a:	74da      	strb	r2, [r3, #19]
  return true;
 801cc9c:	2301      	movs	r3, #1
}
 801cc9e:	4618      	mov	r0, r3
 801cca0:	3724      	adds	r7, #36	@ 0x24
 801cca2:	46bd      	mov	sp, r7
 801cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cca8:	4770      	bx	lr

0801ccaa <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 801ccaa:	b580      	push	{r7, lr}
 801ccac:	b088      	sub	sp, #32
 801ccae:	af00      	add	r7, sp, #0
 801ccb0:	f107 0308 	add.w	r3, r7, #8
 801ccb4:	e883 0003 	stmia.w	r3, {r0, r1}
 801ccb8:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	2b0d      	cmp	r3, #13
 801ccbe:	d801      	bhi.n	801ccc4 <mg_v4mapped+0x1a>
 801ccc0:	2300      	movs	r3, #0
 801ccc2:	e056      	b.n	801cd72 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 801ccc4:	68bb      	ldr	r3, [r7, #8]
 801ccc6:	781b      	ldrb	r3, [r3, #0]
 801ccc8:	2b3a      	cmp	r3, #58	@ 0x3a
 801ccca:	d109      	bne.n	801cce0 <mg_v4mapped+0x36>
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	3301      	adds	r3, #1
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b3a      	cmp	r3, #58	@ 0x3a
 801ccd4:	d104      	bne.n	801cce0 <mg_v4mapped+0x36>
 801ccd6:	68bb      	ldr	r3, [r7, #8]
 801ccd8:	3306      	adds	r3, #6
 801ccda:	781b      	ldrb	r3, [r3, #0]
 801ccdc:	2b3a      	cmp	r3, #58	@ 0x3a
 801ccde:	d001      	beq.n	801cce4 <mg_v4mapped+0x3a>
 801cce0:	2300      	movs	r3, #0
 801cce2:	e046      	b.n	801cd72 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801cce4:	2302      	movs	r3, #2
 801cce6:	61fb      	str	r3, [r7, #28]
 801cce8:	e010      	b.n	801cd0c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 801ccea:	68ba      	ldr	r2, [r7, #8]
 801ccec:	69fb      	ldr	r3, [r7, #28]
 801ccee:	4413      	add	r3, r2
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	2b66      	cmp	r3, #102	@ 0x66
 801ccf4:	d007      	beq.n	801cd06 <mg_v4mapped+0x5c>
 801ccf6:	68ba      	ldr	r2, [r7, #8]
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	4413      	add	r3, r2
 801ccfc:	781b      	ldrb	r3, [r3, #0]
 801ccfe:	2b46      	cmp	r3, #70	@ 0x46
 801cd00:	d001      	beq.n	801cd06 <mg_v4mapped+0x5c>
 801cd02:	2300      	movs	r3, #0
 801cd04:	e035      	b.n	801cd72 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801cd06:	69fb      	ldr	r3, [r7, #28]
 801cd08:	3301      	adds	r3, #1
 801cd0a:	61fb      	str	r3, [r7, #28]
 801cd0c:	69fb      	ldr	r3, [r7, #28]
 801cd0e:	2b05      	cmp	r3, #5
 801cd10:	ddeb      	ble.n	801ccea <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 801cd12:	68bb      	ldr	r3, [r7, #8]
 801cd14:	1dd9      	adds	r1, r3, #7
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	1fda      	subs	r2, r3, #7
 801cd1a:	f107 0314 	add.w	r3, r7, #20
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f004 f839 	bl	8020d96 <mg_str_n>
 801cd24:	687a      	ldr	r2, [r7, #4]
 801cd26:	f107 0314 	add.w	r3, r7, #20
 801cd2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cd2e:	f7ff ff46 	bl	801cbbe <mg_aton4>
 801cd32:	4603      	mov	r3, r0
 801cd34:	f083 0301 	eor.w	r3, r3, #1
 801cd38:	b2db      	uxtb	r3, r3
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d001      	beq.n	801cd42 <mg_v4mapped+0x98>
 801cd3e:	2300      	movs	r3, #0
 801cd40:	e017      	b.n	801cd72 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	2210      	movs	r2, #16
 801cd4c:	2100      	movs	r1, #0
 801cd4e:	4618      	mov	r0, r3
 801cd50:	f006 f882 	bl	8022e58 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	22ff      	movs	r2, #255	@ 0xff
 801cd58:	72da      	strb	r2, [r3, #11]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	7ada      	ldrb	r2, [r3, #11]
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	330c      	adds	r3, #12
 801cd66:	693a      	ldr	r2, [r7, #16]
 801cd68:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	2201      	movs	r2, #1
 801cd6e:	74da      	strb	r2, [r3, #19]
  return true;
 801cd70:	2301      	movs	r3, #1
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	3720      	adds	r7, #32
 801cd76:	46bd      	mov	sp, r7
 801cd78:	bd80      	pop	{r7, pc}

0801cd7a <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 801cd7a:	b580      	push	{r7, lr}
 801cd7c:	b090      	sub	sp, #64	@ 0x40
 801cd7e:	af02      	add	r7, sp, #8
 801cd80:	f107 0308 	add.w	r3, r7, #8
 801cd84:	e883 0003 	stmia.w	r3, {r0, r1}
 801cd88:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 801cd8a:	2300      	movs	r3, #0
 801cd8c:	633b      	str	r3, [r7, #48]	@ 0x30
 801cd8e:	2300      	movs	r3, #0
 801cd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd92:	232a      	movs	r3, #42	@ 0x2a
 801cd94:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	2200      	movs	r2, #0
 801cd9a:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	2b02      	cmp	r3, #2
 801cda0:	d909      	bls.n	801cdb6 <mg_aton6+0x3c>
 801cda2:	68bb      	ldr	r3, [r7, #8]
 801cda4:	781b      	ldrb	r3, [r3, #0]
 801cda6:	2b5b      	cmp	r3, #91	@ 0x5b
 801cda8:	d105      	bne.n	801cdb6 <mg_aton6+0x3c>
 801cdaa:	68bb      	ldr	r3, [r7, #8]
 801cdac:	3301      	adds	r3, #1
 801cdae:	60bb      	str	r3, [r7, #8]
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	3b02      	subs	r3, #2
 801cdb4:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 801cdb6:	687a      	ldr	r2, [r7, #4]
 801cdb8:	f107 0308 	add.w	r3, r7, #8
 801cdbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cdc0:	f7ff ff73 	bl	801ccaa <mg_v4mapped>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d001      	beq.n	801cdce <mg_aton6+0x54>
 801cdca:	2301      	movs	r3, #1
 801cdcc:	e0e1      	b.n	801cf92 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801cdce:	2300      	movs	r3, #0
 801cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
 801cdd2:	e0b0      	b.n	801cf36 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801cdd4:	68ba      	ldr	r2, [r7, #8]
 801cdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdd8:	4413      	add	r3, r2
 801cdda:	781b      	ldrb	r3, [r3, #0]
 801cddc:	2b2f      	cmp	r3, #47	@ 0x2f
 801cdde:	d905      	bls.n	801cdec <mg_aton6+0x72>
 801cde0:	68ba      	ldr	r2, [r7, #8]
 801cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cde4:	4413      	add	r3, r2
 801cde6:	781b      	ldrb	r3, [r3, #0]
 801cde8:	2b39      	cmp	r3, #57	@ 0x39
 801cdea:	d917      	bls.n	801ce1c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801cdec:	68ba      	ldr	r2, [r7, #8]
 801cdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdf0:	4413      	add	r3, r2
 801cdf2:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801cdf4:	2b60      	cmp	r3, #96	@ 0x60
 801cdf6:	d905      	bls.n	801ce04 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801cdf8:	68ba      	ldr	r2, [r7, #8]
 801cdfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdfc:	4413      	add	r3, r2
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	2b66      	cmp	r3, #102	@ 0x66
 801ce02:	d90b      	bls.n	801ce1c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801ce04:	68ba      	ldr	r2, [r7, #8]
 801ce06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce08:	4413      	add	r3, r2
 801ce0a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801ce0c:	2b40      	cmp	r3, #64	@ 0x40
 801ce0e:	d933      	bls.n	801ce78 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801ce10:	68ba      	ldr	r2, [r7, #8]
 801ce12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce14:	4413      	add	r3, r2
 801ce16:	781b      	ldrb	r3, [r3, #0]
 801ce18:	2b46      	cmp	r3, #70	@ 0x46
 801ce1a:	d82d      	bhi.n	801ce78 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 801ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce22:	3303      	adds	r3, #3
 801ce24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce26:	429a      	cmp	r2, r3
 801ce28:	d901      	bls.n	801ce2e <mg_aton6+0xb4>
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	e0b1      	b.n	801cf92 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 801ce2e:	68ba      	ldr	r2, [r7, #8]
 801ce30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce32:	18d1      	adds	r1, r2, r3
 801ce34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce38:	1ad3      	subs	r3, r2, r3
 801ce3a:	1c5a      	adds	r2, r3, #1
 801ce3c:	f107 0318 	add.w	r3, r7, #24
 801ce40:	4618      	mov	r0, r3
 801ce42:	f003 ffa8 	bl	8020d96 <mg_str_n>
 801ce46:	f107 0314 	add.w	r3, r7, #20
 801ce4a:	2204      	movs	r2, #4
 801ce4c:	9200      	str	r2, [sp, #0]
 801ce4e:	2210      	movs	r2, #16
 801ce50:	f107 0118 	add.w	r1, r7, #24
 801ce54:	c903      	ldmia	r1, {r0, r1}
 801ce56:	f004 f9a5 	bl	80211a4 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	0a1b      	lsrs	r3, r3, #8
 801ce5e:	b2d9      	uxtb	r1, r3
 801ce60:	687a      	ldr	r2, [r7, #4]
 801ce62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce64:	4413      	add	r3, r2
 801ce66:	460a      	mov	r2, r1
 801ce68:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 801ce6a:	697a      	ldr	r2, [r7, #20]
 801ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce6e:	3301      	adds	r3, #1
 801ce70:	b2d1      	uxtb	r1, r2
 801ce72:	687a      	ldr	r2, [r7, #4]
 801ce74:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801ce76:	e05b      	b.n	801cf30 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 801ce78:	68ba      	ldr	r2, [r7, #8]
 801ce7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce7c:	4413      	add	r3, r2
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce82:	d134      	bne.n	801ceee <mg_aton6+0x174>
      j = i + 1;
 801ce84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce86:	3301      	adds	r3, #1
 801ce88:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 801ce8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d014      	beq.n	801ceba <mg_aton6+0x140>
 801ce90:	68ba      	ldr	r2, [r7, #8]
 801ce92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce94:	3b01      	subs	r3, #1
 801ce96:	4413      	add	r3, r2
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce9c:	d10d      	bne.n	801ceba <mg_aton6+0x140>
        dc = n;  // Double colon
 801ce9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cea0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801cea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cea4:	2b01      	cmp	r3, #1
 801cea6:	d90f      	bls.n	801cec8 <mg_aton6+0x14e>
 801cea8:	68ba      	ldr	r2, [r7, #8]
 801ceaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ceac:	3b02      	subs	r3, #2
 801ceae:	4413      	add	r3, r2
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	2b3a      	cmp	r3, #58	@ 0x3a
 801ceb4:	d108      	bne.n	801cec8 <mg_aton6+0x14e>
 801ceb6:	2300      	movs	r3, #0
 801ceb8:	e06b      	b.n	801cf92 <mg_aton6+0x218>
      } else if (i > 0) {
 801ceba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d004      	beq.n	801ceca <mg_aton6+0x150>
        n += 2;
 801cec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cec2:	3302      	adds	r3, #2
 801cec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cec6:	e000      	b.n	801ceca <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801cec8:	bf00      	nop
      }
      if (n > 14) return false;
 801ceca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cecc:	2b0e      	cmp	r3, #14
 801cece:	d901      	bls.n	801ced4 <mg_aton6+0x15a>
 801ced0:	2300      	movs	r3, #0
 801ced2:	e05e      	b.n	801cf92 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 801ced4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ced6:	3301      	adds	r3, #1
 801ced8:	687a      	ldr	r2, [r7, #4]
 801ceda:	2100      	movs	r1, #0
 801cedc:	54d1      	strb	r1, [r2, r3]
 801cede:	687a      	ldr	r2, [r7, #4]
 801cee0:	5cd1      	ldrb	r1, [r2, r3]
 801cee2:	687a      	ldr	r2, [r7, #4]
 801cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cee6:	4413      	add	r3, r2
 801cee8:	460a      	mov	r2, r1
 801ceea:	701a      	strb	r2, [r3, #0]
 801ceec:	e020      	b.n	801cf30 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 801ceee:	68ba      	ldr	r2, [r7, #8]
 801cef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cef2:	4413      	add	r3, r2
 801cef4:	781b      	ldrb	r3, [r3, #0]
 801cef6:	2b25      	cmp	r3, #37	@ 0x25
 801cef8:	d118      	bne.n	801cf2c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801cefa:	68ba      	ldr	r2, [r7, #8]
 801cefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cefe:	3301      	adds	r3, #1
 801cf00:	18d1      	adds	r1, r2, r3
 801cf02:	68fa      	ldr	r2, [r7, #12]
 801cf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf06:	1ad3      	subs	r3, r2, r3
 801cf08:	1e5a      	subs	r2, r3, #1
 801cf0a:	f107 0320 	add.w	r3, r7, #32
 801cf0e:	4618      	mov	r0, r3
 801cf10:	f003 ff41 	bl	8020d96 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801cf18:	2201      	movs	r2, #1
 801cf1a:	9200      	str	r2, [sp, #0]
 801cf1c:	220a      	movs	r2, #10
 801cf1e:	f107 0120 	add.w	r1, r7, #32
 801cf22:	c903      	ldmia	r1, {r0, r1}
 801cf24:	f004 f93e 	bl	80211a4 <mg_str_to_num>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	e032      	b.n	801cf92 <mg_aton6+0x218>
    } else {
      return false;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	e030      	b.n	801cf92 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801cf30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf32:	3301      	adds	r3, #1
 801cf34:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cf3a:	429a      	cmp	r2, r3
 801cf3c:	f4ff af4a 	bcc.w	801cdd4 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 801cf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf42:	2b0d      	cmp	r3, #13
 801cf44:	d804      	bhi.n	801cf50 <mg_aton6+0x1d6>
 801cf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf48:	2b2a      	cmp	r3, #42	@ 0x2a
 801cf4a:	d101      	bne.n	801cf50 <mg_aton6+0x1d6>
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	e020      	b.n	801cf92 <mg_aton6+0x218>
  if (n < 14) {
 801cf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf52:	2b0d      	cmp	r3, #13
 801cf54:	d819      	bhi.n	801cf8a <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 801cf56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf5a:	1ad3      	subs	r3, r2, r3
 801cf5c:	330e      	adds	r3, #14
 801cf5e:	687a      	ldr	r2, [r7, #4]
 801cf60:	18d0      	adds	r0, r2, r3
 801cf62:	687a      	ldr	r2, [r7, #4]
 801cf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf66:	18d1      	adds	r1, r2, r3
 801cf68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf6c:	1ad3      	subs	r3, r2, r3
 801cf6e:	3302      	adds	r3, #2
 801cf70:	461a      	mov	r2, r3
 801cf72:	f005 ff57 	bl	8022e24 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 801cf76:	687a      	ldr	r2, [r7, #4]
 801cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf7a:	18d0      	adds	r0, r2, r3
 801cf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf7e:	f1c3 030e 	rsb	r3, r3, #14
 801cf82:	461a      	mov	r2, r3
 801cf84:	2100      	movs	r1, #0
 801cf86:	f005 ff67 	bl	8022e58 <memset>
  }

  addr->is_ip6 = true;
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2201      	movs	r2, #1
 801cf8e:	74da      	strb	r2, [r3, #19]
  return true;
 801cf90:	2301      	movs	r3, #1
}
 801cf92:	4618      	mov	r0, r3
 801cf94:	3738      	adds	r7, #56	@ 0x38
 801cf96:	46bd      	mov	sp, r7
 801cf98:	bd80      	pop	{r7, pc}

0801cf9a <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 801cf9a:	b580      	push	{r7, lr}
 801cf9c:	b084      	sub	sp, #16
 801cf9e:	af00      	add	r7, sp, #0
 801cfa0:	f107 0308 	add.w	r3, r7, #8
 801cfa4:	e883 0003 	stmia.w	r3, {r0, r1}
 801cfa8:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801cfaa:	687a      	ldr	r2, [r7, #4]
 801cfac:	f107 0308 	add.w	r3, r7, #8
 801cfb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfb4:	f7ff fde8 	bl	801cb88 <mg_atone>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d11d      	bne.n	801cffa <mg_aton+0x60>
 801cfbe:	687a      	ldr	r2, [r7, #4]
 801cfc0:	f107 0308 	add.w	r3, r7, #8
 801cfc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfc8:	f7ff fdae 	bl	801cb28 <mg_atonl>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d113      	bne.n	801cffa <mg_aton+0x60>
 801cfd2:	687a      	ldr	r2, [r7, #4]
 801cfd4:	f107 0308 	add.w	r3, r7, #8
 801cfd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfdc:	f7ff fdef 	bl	801cbbe <mg_aton4>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d109      	bne.n	801cffa <mg_aton+0x60>
         mg_aton6(str, addr);
 801cfe6:	687a      	ldr	r2, [r7, #4]
 801cfe8:	f107 0308 	add.w	r3, r7, #8
 801cfec:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cff0:	f7ff fec3 	bl	801cd7a <mg_aton6>
 801cff4:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d001      	beq.n	801cffe <mg_aton+0x64>
 801cffa:	2301      	movs	r3, #1
 801cffc:	e000      	b.n	801d000 <mg_aton+0x66>
 801cffe:	2300      	movs	r3, #0
 801d000:	f003 0301 	and.w	r3, r3, #1
 801d004:	b2db      	uxtb	r3, r3
}
 801d006:	4618      	mov	r0, r3
 801d008:	3710      	adds	r7, #16
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bd80      	pop	{r7, pc}

0801d00e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 801d00e:	b580      	push	{r7, lr}
 801d010:	b084      	sub	sp, #16
 801d012:	af00      	add	r7, sp, #0
 801d014:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d01a:	33b0      	adds	r3, #176	@ 0xb0
 801d01c:	4619      	mov	r1, r3
 801d01e:	2001      	movs	r0, #1
 801d020:	f7f7 fa5c 	bl	80144dc <mg_calloc>
 801d024:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d017      	beq.n	801d05c <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	687a      	ldr	r2, [r7, #4]
 801d030:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d038:	675a      	str	r2, [r3, #116]	@ 0x74
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	645a      	str	r2, [r3, #68]	@ 0x44
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	69db      	ldr	r3, [r3, #28]
 801d04e:	1c5a      	adds	r2, r3, #1
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	61da      	str	r2, [r3, #28]
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	69da      	ldr	r2, [r3, #28]
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 801d05c:	68fb      	ldr	r3, [r7, #12]
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3710      	adds	r7, #16
 801d062:	46bd      	mov	sp, r7
 801d064:	bd80      	pop	{r7, pc}
	...

0801d068 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 801d068:	b580      	push	{r7, lr}
 801d06a:	b084      	sub	sp, #16
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f7f7 fa6c 	bl	801454e <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	685b      	ldr	r3, [r3, #4]
 801d07a:	60fb      	str	r3, [r7, #12]
 801d07c:	e002      	b.n	801d084 <mg_close_conn+0x1c>
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	60fb      	str	r3, [r7, #12]
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	429a      	cmp	r2, r3
 801d08c:	d1f7      	bne.n	801d07e <mg_close_conn+0x16>
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	681a      	ldr	r2, [r3, #0]
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	685b      	ldr	r3, [r3, #4]
 801d09a:	689b      	ldr	r3, [r3, #8]
 801d09c:	687a      	ldr	r2, [r7, #4]
 801d09e:	429a      	cmp	r2, r3
 801d0a0:	d103      	bne.n	801d0aa <mg_close_conn+0x42>
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	685b      	ldr	r3, [r3, #4]
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	691b      	ldr	r3, [r3, #16]
 801d0b0:	687a      	ldr	r2, [r7, #4]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d103      	bne.n	801d0be <mg_close_conn+0x56>
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	685b      	ldr	r3, [r3, #4]
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 801d0be:	2200      	movs	r2, #0
 801d0c0:	2109      	movs	r1, #9
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	f7f7 ffea 	bl	801509c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 801d0c8:	4b17      	ldr	r3, [pc, #92]	@ (801d128 <mg_close_conn+0xc0>)
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	2b02      	cmp	r3, #2
 801d0ce:	dd0e      	ble.n	801d0ee <mg_close_conn+0x86>
 801d0d0:	4b16      	ldr	r3, [pc, #88]	@ (801d12c <mg_close_conn+0xc4>)
 801d0d2:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 801d0d6:	4916      	ldr	r1, [pc, #88]	@ (801d130 <mg_close_conn+0xc8>)
 801d0d8:	2003      	movs	r0, #3
 801d0da:	f7fd fbc3 	bl	801a864 <mg_log_prefix>
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0e6:	461a      	mov	r2, r3
 801d0e8:	4812      	ldr	r0, [pc, #72]	@ (801d134 <mg_close_conn+0xcc>)
 801d0ea:	f7fd fc0b 	bl	801a904 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 801d0ee:	6878      	ldr	r0, [r7, #4]
 801d0f0:	f004 fb8c 	bl	802180c <mg_tls_free>
  mg_iobuf_free(&c->recv);
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	3338      	adds	r3, #56	@ 0x38
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7fc fcec 	bl	8019ad6 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	3348      	adds	r3, #72	@ 0x48
 801d102:	4618      	mov	r0, r3
 801d104:	f7fc fce7 	bl	8019ad6 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	3368      	adds	r3, #104	@ 0x68
 801d10c:	4618      	mov	r0, r3
 801d10e:	f7fc fce2 	bl	8019ad6 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801d112:	21b0      	movs	r1, #176	@ 0xb0
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f004 fd2b 	bl	8021b70 <mg_bzero>
  free(c);
 801d11a:	6878      	ldr	r0, [r7, #4]
 801d11c:	f7ee fe6c 	bl	800bdf8 <vPortFree>
}
 801d120:	bf00      	nop
 801d122:	3710      	adds	r7, #16
 801d124:	46bd      	mov	sp, r7
 801d126:	bd80      	pop	{r7, pc}
 801d128:	20000294 	.word	0x20000294
 801d12c:	080296a4 	.word	0x080296a4
 801d130:	08026838 	.word	0x08026838
 801d134:	08027d58 	.word	0x08027d58

0801d138 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 801d138:	b580      	push	{r7, lr}
 801d13a:	b086      	sub	sp, #24
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	60f8      	str	r0, [r7, #12]
 801d140:	60b9      	str	r1, [r7, #8]
 801d142:	607a      	str	r2, [r7, #4]
 801d144:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d146:	2300      	movs	r3, #0
 801d148:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 801d14a:	68bb      	ldr	r3, [r7, #8]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d003      	beq.n	801d158 <mg_connect+0x20>
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	781b      	ldrb	r3, [r3, #0]
 801d154:	2b00      	cmp	r3, #0
 801d156:	d10e      	bne.n	801d176 <mg_connect+0x3e>
    MG_ERROR(("null url"));
 801d158:	4b37      	ldr	r3, [pc, #220]	@ (801d238 <mg_connect+0x100>)
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	dd66      	ble.n	801d22e <mg_connect+0xf6>
 801d160:	4b36      	ldr	r3, [pc, #216]	@ (801d23c <mg_connect+0x104>)
 801d162:	f241 22be 	movw	r2, #4798	@ 0x12be
 801d166:	4936      	ldr	r1, [pc, #216]	@ (801d240 <mg_connect+0x108>)
 801d168:	2001      	movs	r0, #1
 801d16a:	f7fd fb7b 	bl	801a864 <mg_log_prefix>
 801d16e:	4835      	ldr	r0, [pc, #212]	@ (801d244 <mg_connect+0x10c>)
 801d170:	f7fd fbc8 	bl	801a904 <mg_log>
 801d174:	e05b      	b.n	801d22e <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d176:	68f8      	ldr	r0, [r7, #12]
 801d178:	f7ff ff49 	bl	801d00e <mg_alloc_conn>
 801d17c:	6178      	str	r0, [r7, #20]
 801d17e:	697b      	ldr	r3, [r7, #20]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d10e      	bne.n	801d1a2 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801d184:	4b2c      	ldr	r3, [pc, #176]	@ (801d238 <mg_connect+0x100>)
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	dd50      	ble.n	801d22e <mg_connect+0xf6>
 801d18c:	4b2b      	ldr	r3, [pc, #172]	@ (801d23c <mg_connect+0x104>)
 801d18e:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 801d192:	492b      	ldr	r1, [pc, #172]	@ (801d240 <mg_connect+0x108>)
 801d194:	2001      	movs	r0, #1
 801d196:	f7fd fb65 	bl	801a864 <mg_log_prefix>
 801d19a:	482b      	ldr	r0, [pc, #172]	@ (801d248 <mg_connect+0x110>)
 801d19c:	f7fd fbb2 	bl	801a904 <mg_log>
 801d1a0:	e045      	b.n	801d22e <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	681a      	ldr	r2, [r3, #0]
 801d1a6:	697b      	ldr	r3, [r7, #20]
 801d1a8:	601a      	str	r2, [r3, #0]
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	697a      	ldr	r2, [r7, #20]
 801d1ae:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 801d1b0:	2204      	movs	r2, #4
 801d1b2:	4926      	ldr	r1, [pc, #152]	@ (801d24c <mg_connect+0x114>)
 801d1b4:	68b8      	ldr	r0, [r7, #8]
 801d1b6:	f005 fdc4 	bl	8022d42 <strncmp>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	bf0c      	ite	eq
 801d1c0:	2301      	moveq	r3, #1
 801d1c2:	2300      	movne	r3, #0
 801d1c4:	b2d9      	uxtb	r1, r3
 801d1c6:	697a      	ldr	r2, [r7, #20]
 801d1c8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d1cc:	f361 0300 	bfi	r3, r1, #0, #1
 801d1d0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1da:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 801d1dc:	697b      	ldr	r3, [r7, #20]
 801d1de:	687a      	ldr	r2, [r7, #4]
 801d1e0:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 801d1e2:	697a      	ldr	r2, [r7, #20]
 801d1e4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d1e8:	f043 0302 	orr.w	r3, r3, #2
 801d1ec:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 801d1f0:	697b      	ldr	r3, [r7, #20]
 801d1f2:	683a      	ldr	r2, [r7, #0]
 801d1f4:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d1f6:	4b10      	ldr	r3, [pc, #64]	@ (801d238 <mg_connect+0x100>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	2b02      	cmp	r3, #2
 801d1fc:	dd0e      	ble.n	801d21c <mg_connect+0xe4>
 801d1fe:	4b0f      	ldr	r3, [pc, #60]	@ (801d23c <mg_connect+0x104>)
 801d200:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 801d204:	490e      	ldr	r1, [pc, #56]	@ (801d240 <mg_connect+0x108>)
 801d206:	2003      	movs	r0, #3
 801d208:	f7fd fb2c 	bl	801a864 <mg_log_prefix>
 801d20c:	697b      	ldr	r3, [r7, #20]
 801d20e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d210:	697b      	ldr	r3, [r7, #20]
 801d212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d214:	68bb      	ldr	r3, [r7, #8]
 801d216:	480e      	ldr	r0, [pc, #56]	@ (801d250 <mg_connect+0x118>)
 801d218:	f7fd fb74 	bl	801a904 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 801d21c:	68ba      	ldr	r2, [r7, #8]
 801d21e:	2101      	movs	r1, #1
 801d220:	6978      	ldr	r0, [r7, #20]
 801d222:	f7f7 ff3b 	bl	801509c <mg_call>
    mg_resolve(c, url);
 801d226:	68b9      	ldr	r1, [r7, #8]
 801d228:	6978      	ldr	r0, [r7, #20]
 801d22a:	f7f7 fef3 	bl	8015014 <mg_resolve>
  }
  return c;
 801d22e:	697b      	ldr	r3, [r7, #20]
}
 801d230:	4618      	mov	r0, r3
 801d232:	3718      	adds	r7, #24
 801d234:	46bd      	mov	sp, r7
 801d236:	bd80      	pop	{r7, pc}
 801d238:	20000294 	.word	0x20000294
 801d23c:	080296b4 	.word	0x080296b4
 801d240:	08026838 	.word	0x08026838
 801d244:	08027d68 	.word	0x08027d68
 801d248:	08027d74 	.word	0x08027d74
 801d24c:	08027d78 	.word	0x08027d78
 801d250:	08026994 	.word	0x08026994

0801d254 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801d254:	b580      	push	{r7, lr}
 801d256:	b086      	sub	sp, #24
 801d258:	af00      	add	r7, sp, #0
 801d25a:	60f8      	str	r0, [r7, #12]
 801d25c:	60b9      	str	r1, [r7, #8]
 801d25e:	607a      	str	r2, [r7, #4]
 801d260:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d262:	2300      	movs	r3, #0
 801d264:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d266:	68f8      	ldr	r0, [r7, #12]
 801d268:	f7ff fed1 	bl	801d00e <mg_alloc_conn>
 801d26c:	6178      	str	r0, [r7, #20]
 801d26e:	697b      	ldr	r3, [r7, #20]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d10f      	bne.n	801d294 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801d274:	4b41      	ldr	r3, [pc, #260]	@ (801d37c <mg_listen+0x128>)
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	dd7a      	ble.n	801d372 <mg_listen+0x11e>
 801d27c:	4b40      	ldr	r3, [pc, #256]	@ (801d380 <mg_listen+0x12c>)
 801d27e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 801d282:	4940      	ldr	r1, [pc, #256]	@ (801d384 <mg_listen+0x130>)
 801d284:	2001      	movs	r0, #1
 801d286:	f7fd faed 	bl	801a864 <mg_log_prefix>
 801d28a:	68b9      	ldr	r1, [r7, #8]
 801d28c:	483e      	ldr	r0, [pc, #248]	@ (801d388 <mg_listen+0x134>)
 801d28e:	f7fd fb39 	bl	801a904 <mg_log>
 801d292:	e06e      	b.n	801d372 <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 801d294:	68b9      	ldr	r1, [r7, #8]
 801d296:	6978      	ldr	r0, [r7, #20]
 801d298:	f003 f852 	bl	8020340 <mg_open_listener>
 801d29c:	4603      	mov	r3, r0
 801d29e:	f083 0301 	eor.w	r3, r3, #1
 801d2a2:	b2db      	uxtb	r3, r3
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d019      	beq.n	801d2dc <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 801d2a8:	4b34      	ldr	r3, [pc, #208]	@ (801d37c <mg_listen+0x128>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	dd0f      	ble.n	801d2d0 <mg_listen+0x7c>
 801d2b0:	4b33      	ldr	r3, [pc, #204]	@ (801d380 <mg_listen+0x12c>)
 801d2b2:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 801d2b6:	4933      	ldr	r1, [pc, #204]	@ (801d384 <mg_listen+0x130>)
 801d2b8:	2001      	movs	r0, #1
 801d2ba:	f7fd fad3 	bl	801a864 <mg_log_prefix>
 801d2be:	f005 fe7f 	bl	8022fc0 <__errno>
 801d2c2:	4603      	mov	r3, r0
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	461a      	mov	r2, r3
 801d2c8:	68b9      	ldr	r1, [r7, #8]
 801d2ca:	4830      	ldr	r0, [pc, #192]	@ (801d38c <mg_listen+0x138>)
 801d2cc:	f7fd fb1a 	bl	801a904 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 801d2d0:	6978      	ldr	r0, [r7, #20]
 801d2d2:	f7ee fd91 	bl	800bdf8 <vPortFree>
    c = NULL;
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	617b      	str	r3, [r7, #20]
 801d2da:	e04a      	b.n	801d372 <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 801d2dc:	697a      	ldr	r2, [r7, #20]
 801d2de:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d2e2:	f043 0301 	orr.w	r3, r3, #1
 801d2e6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 801d2ea:	2204      	movs	r2, #4
 801d2ec:	4928      	ldr	r1, [pc, #160]	@ (801d390 <mg_listen+0x13c>)
 801d2ee:	68b8      	ldr	r0, [r7, #8]
 801d2f0:	f005 fd27 	bl	8022d42 <strncmp>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	bf0c      	ite	eq
 801d2fa:	2301      	moveq	r3, #1
 801d2fc:	2300      	movne	r3, #0
 801d2fe:	b2d9      	uxtb	r1, r3
 801d300:	697a      	ldr	r2, [r7, #20]
 801d302:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d306:	f361 0300 	bfi	r3, r1, #0, #1
 801d30a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	681a      	ldr	r2, [r3, #0]
 801d312:	697b      	ldr	r3, [r7, #20]
 801d314:	601a      	str	r2, [r3, #0]
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	697a      	ldr	r2, [r7, #20]
 801d31a:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 801d31c:	697b      	ldr	r3, [r7, #20]
 801d31e:	687a      	ldr	r2, [r7, #4]
 801d320:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801d322:	697b      	ldr	r3, [r7, #20]
 801d324:	683a      	ldr	r2, [r7, #0]
 801d326:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 801d328:	2200      	movs	r2, #0
 801d32a:	2101      	movs	r1, #1
 801d32c:	6978      	ldr	r0, [r7, #20]
 801d32e:	f7f7 feb5 	bl	801509c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 801d332:	68b8      	ldr	r0, [r7, #8]
 801d334:	f004 fabc 	bl	80218b0 <mg_url_is_ssl>
 801d338:	4603      	mov	r3, r0
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d006      	beq.n	801d34c <mg_listen+0xf8>
 801d33e:	697a      	ldr	r2, [r7, #20]
 801d340:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d348:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d34c:	4b0b      	ldr	r3, [pc, #44]	@ (801d37c <mg_listen+0x128>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	2b02      	cmp	r3, #2
 801d352:	dd0e      	ble.n	801d372 <mg_listen+0x11e>
 801d354:	4b0a      	ldr	r3, [pc, #40]	@ (801d380 <mg_listen+0x12c>)
 801d356:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 801d35a:	490a      	ldr	r1, [pc, #40]	@ (801d384 <mg_listen+0x130>)
 801d35c:	2003      	movs	r0, #3
 801d35e:	f7fd fa81 	bl	801a864 <mg_log_prefix>
 801d362:	697b      	ldr	r3, [r7, #20]
 801d364:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d366:	697b      	ldr	r3, [r7, #20]
 801d368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	4809      	ldr	r0, [pc, #36]	@ (801d394 <mg_listen+0x140>)
 801d36e:	f7fd fac9 	bl	801a904 <mg_log>
  }
  return c;
 801d372:	697b      	ldr	r3, [r7, #20]
}
 801d374:	4618      	mov	r0, r3
 801d376:	3718      	adds	r7, #24
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	20000294 	.word	0x20000294
 801d380:	080296c0 	.word	0x080296c0
 801d384:	08026838 	.word	0x08026838
 801d388:	08027d80 	.word	0x08027d80
 801d38c:	08027d88 	.word	0x08027d88
 801d390:	08027d78 	.word	0x08027d78
 801d394:	08026994 	.word	0x08026994

0801d398 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 801d398:	b580      	push	{r7, lr}
 801d39a:	b08a      	sub	sp, #40	@ 0x28
 801d39c:	af04      	add	r7, sp, #16
 801d39e:	60f8      	str	r0, [r7, #12]
 801d3a0:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 801d3a4:	2128      	movs	r1, #40	@ 0x28
 801d3a6:	2001      	movs	r0, #1
 801d3a8:	f7f7 f898 	bl	80144dc <mg_calloc>
 801d3ac:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 801d3ae:	697b      	ldr	r3, [r7, #20]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d014      	beq.n	801d3de <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3bc:	9302      	str	r3, [sp, #8]
 801d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3c0:	9301      	str	r3, [sp, #4]
 801d3c2:	6a3b      	ldr	r3, [r7, #32]
 801d3c4:	9300      	str	r3, [sp, #0]
 801d3c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3ca:	6979      	ldr	r1, [r7, #20]
 801d3cc:	f004 f91d 	bl	802160a <mg_timer_init>
    t->id = mgr->timerid++;
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	6a1b      	ldr	r3, [r3, #32]
 801d3d4:	1c59      	adds	r1, r3, #1
 801d3d6:	68fa      	ldr	r2, [r7, #12]
 801d3d8:	6211      	str	r1, [r2, #32]
 801d3da:	697a      	ldr	r2, [r7, #20]
 801d3dc:	6013      	str	r3, [r2, #0]
  }
  return t;
 801d3de:	697b      	ldr	r3, [r7, #20]
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3718      	adds	r7, #24
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}

0801d3e8 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b082      	sub	sp, #8
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801d3f0:	2248      	movs	r2, #72	@ 0x48
 801d3f2:	2100      	movs	r1, #0
 801d3f4:	6878      	ldr	r0, [r7, #4]
 801d3f6:	f005 fd2f 	bl	8022e58 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d400:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d408:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801d410:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	4a05      	ldr	r2, [pc, #20]	@ (801d42c <mg_mgr_init+0x44>)
 801d416:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	4a05      	ldr	r2, [pc, #20]	@ (801d430 <mg_mgr_init+0x48>)
 801d41c:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f004 fa3b 	bl	802189a <mg_tls_ctx_init>
}
 801d424:	bf00      	nop
 801d426:	3708      	adds	r7, #8
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}
 801d42c:	08027db8 	.word	0x08027db8
 801d430:	08027dcc 	.word	0x08027dcc

0801d434 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801d434:	b580      	push	{r7, lr}
 801d436:	b084      	sub	sp, #16
 801d438:	af00      	add	r7, sp, #0
 801d43a:	60f8      	str	r0, [r7, #12]
 801d43c:	60b9      	str	r1, [r7, #8]
 801d43e:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d444:	2b00      	cmp	r3, #0
 801d446:	d005      	beq.n	801d454 <mg_tcpip_call+0x20>
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d44c:	687a      	ldr	r2, [r7, #4]
 801d44e:	68b9      	ldr	r1, [r7, #8]
 801d450:	68f8      	ldr	r0, [r7, #12]
 801d452:	4798      	blx	r3
}
 801d454:	bf00      	nop
 801d456:	3710      	adds	r7, #16
 801d458:	46bd      	mov	sp, r7
 801d45a:	bd80      	pop	{r7, pc}

0801d45c <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 801d45c:	b590      	push	{r4, r7, lr}
 801d45e:	b085      	sub	sp, #20
 801d460:	af00      	add	r7, sp, #0
 801d462:	60f8      	str	r0, [r7, #12]
 801d464:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	681a      	ldr	r2, [r3, #0]
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	441a      	add	r2, r3
 801d470:	68bb      	ldr	r3, [r7, #8]
 801d472:	1ad3      	subs	r3, r2, r3
 801d474:	461a      	mov	r2, r3
 801d476:	68fc      	ldr	r4, [r7, #12]
 801d478:	463b      	mov	r3, r7
 801d47a:	68b9      	ldr	r1, [r7, #8]
 801d47c:	4618      	mov	r0, r3
 801d47e:	f003 fc8a 	bl	8020d96 <mg_str_n>
 801d482:	f104 0308 	add.w	r3, r4, #8
 801d486:	463a      	mov	r2, r7
 801d488:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d48c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801d490:	bf00      	nop
 801d492:	3714      	adds	r7, #20
 801d494:	46bd      	mov	sp, r7
 801d496:	bd90      	pop	{r4, r7, pc}

0801d498 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 801d498:	b480      	push	{r7}
 801d49a:	b087      	sub	sp, #28
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	60f8      	str	r0, [r7, #12]
 801d4a0:	60b9      	str	r1, [r7, #8]
 801d4a2:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 801d4a4:	68bb      	ldr	r3, [r7, #8]
 801d4a6:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	617b      	str	r3, [r7, #20]
 801d4ac:	e014      	b.n	801d4d8 <csumup+0x40>
 801d4ae:	697b      	ldr	r3, [r7, #20]
 801d4b0:	f003 0301 	and.w	r3, r3, #1
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d004      	beq.n	801d4c2 <csumup+0x2a>
 801d4b8:	693a      	ldr	r2, [r7, #16]
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	4413      	add	r3, r2
 801d4be:	781b      	ldrb	r3, [r3, #0]
 801d4c0:	e004      	b.n	801d4cc <csumup+0x34>
 801d4c2:	693a      	ldr	r2, [r7, #16]
 801d4c4:	697b      	ldr	r3, [r7, #20]
 801d4c6:	4413      	add	r3, r2
 801d4c8:	781b      	ldrb	r3, [r3, #0]
 801d4ca:	021b      	lsls	r3, r3, #8
 801d4cc:	68fa      	ldr	r2, [r7, #12]
 801d4ce:	4413      	add	r3, r2
 801d4d0:	60fb      	str	r3, [r7, #12]
 801d4d2:	697b      	ldr	r3, [r7, #20]
 801d4d4:	3301      	adds	r3, #1
 801d4d6:	617b      	str	r3, [r7, #20]
 801d4d8:	697a      	ldr	r2, [r7, #20]
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	429a      	cmp	r2, r3
 801d4de:	d3e6      	bcc.n	801d4ae <csumup+0x16>
  return sum;
 801d4e0:	68fb      	ldr	r3, [r7, #12]
}
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	371c      	adds	r7, #28
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ec:	4770      	bx	lr

0801d4ee <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 801d4ee:	b580      	push	{r7, lr}
 801d4f0:	b082      	sub	sp, #8
 801d4f2:	af00      	add	r7, sp, #0
 801d4f4:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 801d4f6:	e005      	b.n	801d504 <csumfin+0x16>
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	b29a      	uxth	r2, r3
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	0c1b      	lsrs	r3, r3, #16
 801d500:	4413      	add	r3, r2
 801d502:	607b      	str	r3, [r7, #4]
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	0c1b      	lsrs	r3, r3, #16
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d1f5      	bne.n	801d4f8 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	b29b      	uxth	r3, r3
 801d510:	43db      	mvns	r3, r3
 801d512:	b29b      	uxth	r3, r3
 801d514:	4618      	mov	r0, r3
 801d516:	f004 fbc4 	bl	8021ca2 <mg_ntohs>
 801d51a:	4603      	mov	r3, r0
}
 801d51c:	4618      	mov	r0, r3
 801d51e:	3708      	adds	r7, #8
 801d520:	46bd      	mov	sp, r7
 801d522:	bd80      	pop	{r7, pc}

0801d524 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 801d524:	b580      	push	{r7, lr}
 801d526:	b084      	sub	sp, #16
 801d528:	af00      	add	r7, sp, #0
 801d52a:	6078      	str	r0, [r7, #4]
 801d52c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801d52e:	683a      	ldr	r2, [r7, #0]
 801d530:	6879      	ldr	r1, [r7, #4]
 801d532:	2000      	movs	r0, #0
 801d534:	f7ff ffb0 	bl	801d498 <csumup>
 801d538:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 801d53a:	68f8      	ldr	r0, [r7, #12]
 801d53c:	f7ff ffd7 	bl	801d4ee <csumfin>
 801d540:	4603      	mov	r3, r0
}
 801d542:	4618      	mov	r0, r3
 801d544:	3710      	adds	r7, #16
 801d546:	46bd      	mov	sp, r7
 801d548:	bd80      	pop	{r7, pc}
	...

0801d54c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 801d54c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801d550:	b088      	sub	sp, #32
 801d552:	af02      	add	r7, sp, #8
 801d554:	6078      	str	r0, [r7, #4]
 801d556:	460b      	mov	r3, r1
 801d558:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	685b      	ldr	r3, [r3, #4]
 801d55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d560:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	33b0      	adds	r3, #176	@ 0xb0
 801d566:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 801d568:	78fb      	ldrb	r3, [r7, #3]
 801d56a:	2b01      	cmp	r3, #1
 801d56c:	d013      	beq.n	801d596 <settmout+0x4a>
 801d56e:	78fb      	ldrb	r3, [r7, #3]
 801d570:	2b02      	cmp	r3, #2
 801d572:	d00e      	beq.n	801d592 <settmout+0x46>
 801d574:	78fb      	ldrb	r3, [r7, #3]
 801d576:	2b03      	cmp	r3, #3
 801d578:	d008      	beq.n	801d58c <settmout+0x40>
 801d57a:	78fb      	ldrb	r3, [r7, #3]
 801d57c:	2b04      	cmp	r3, #4
 801d57e:	d102      	bne.n	801d586 <settmout+0x3a>
 801d580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d584:	e008      	b.n	801d598 <settmout+0x4c>
 801d586:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 801d58a:	e005      	b.n	801d598 <settmout+0x4c>
 801d58c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801d590:	e002      	b.n	801d598 <settmout+0x4c>
 801d592:	2364      	movs	r3, #100	@ 0x64
 801d594:	e000      	b.n	801d598 <settmout+0x4c>
 801d596:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 801d598:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801d5a0:	68f9      	ldr	r1, [r7, #12]
 801d5a2:	2000      	movs	r0, #0
 801d5a4:	460c      	mov	r4, r1
 801d5a6:	4605      	mov	r5, r0
 801d5a8:	eb12 0804 	adds.w	r8, r2, r4
 801d5ac:	eb43 0905 	adc.w	r9, r3, r5
 801d5b0:	693b      	ldr	r3, [r7, #16]
 801d5b2:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 801d5b6:	693b      	ldr	r3, [r7, #16]
 801d5b8:	78fa      	ldrb	r2, [r7, #3]
 801d5ba:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 801d5bc:	4b0d      	ldr	r3, [pc, #52]	@ (801d5f4 <settmout+0xa8>)
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	2b03      	cmp	r3, #3
 801d5c2:	dd12      	ble.n	801d5ea <settmout+0x9e>
 801d5c4:	4b0c      	ldr	r3, [pc, #48]	@ (801d5f8 <settmout+0xac>)
 801d5c6:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 801d5ca:	490c      	ldr	r1, [pc, #48]	@ (801d5fc <settmout+0xb0>)
 801d5cc:	2004      	movs	r0, #4
 801d5ce:	f7fd f949 	bl	801a864 <mg_log_prefix>
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d5d6:	78f8      	ldrb	r0, [r7, #3]
 801d5d8:	693b      	ldr	r3, [r7, #16]
 801d5da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d5de:	e9cd 2300 	strd	r2, r3, [sp]
 801d5e2:	4602      	mov	r2, r0
 801d5e4:	4806      	ldr	r0, [pc, #24]	@ (801d600 <settmout+0xb4>)
 801d5e6:	f7fd f98d 	bl	801a904 <mg_log>
}
 801d5ea:	bf00      	nop
 801d5ec:	3718      	adds	r7, #24
 801d5ee:	46bd      	mov	sp, r7
 801d5f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801d5f4:	20000294 	.word	0x20000294
 801d5f8:	080296cc 	.word	0x080296cc
 801d5fc:	08026838 	.word	0x08026838
 801d600:	08027dec 	.word	0x08027dec

0801d604 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801d604:	b580      	push	{r7, lr}
 801d606:	b084      	sub	sp, #16
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
 801d60c:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d612:	685b      	ldr	r3, [r3, #4]
 801d614:	687a      	ldr	r2, [r7, #4]
 801d616:	6950      	ldr	r0, [r2, #20]
 801d618:	687a      	ldr	r2, [r7, #4]
 801d61a:	6839      	ldr	r1, [r7, #0]
 801d61c:	4798      	blx	r3
 801d61e:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801d620:	68fa      	ldr	r2, [r7, #12]
 801d622:	683b      	ldr	r3, [r7, #0]
 801d624:	429a      	cmp	r2, r3
 801d626:	d104      	bne.n	801d632 <ether_output+0x2e>
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d62c:	1c5a      	adds	r2, r3, #1
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 801d632:	68fb      	ldr	r3, [r7, #12]
}
 801d634:	4618      	mov	r0, r3
 801d636:	3710      	adds	r7, #16
 801d638:	46bd      	mov	sp, r7
 801d63a:	bd80      	pop	{r7, pc}

0801d63c <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b084      	sub	sp, #16
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
 801d644:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	695b      	ldr	r3, [r3, #20]
 801d64a:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	330e      	adds	r3, #14
 801d650:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	2206      	movs	r2, #6
 801d656:	21ff      	movs	r1, #255	@ 0xff
 801d658:	4618      	mov	r0, r3
 801d65a:	f005 fbfd 	bl	8022e58 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	3306      	adds	r3, #6
 801d662:	6879      	ldr	r1, [r7, #4]
 801d664:	2206      	movs	r2, #6
 801d666:	4618      	mov	r0, r3
 801d668:	f005 fcd7 	bl	802301a <memcpy>
  eth->type = mg_htons(0x806);
 801d66c:	f640 0006 	movw	r0, #2054	@ 0x806
 801d670:	f004 fb17 	bl	8021ca2 <mg_ntohs>
 801d674:	4603      	mov	r3, r0
 801d676:	461a      	mov	r2, r3
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801d67c:	221c      	movs	r2, #28
 801d67e:	2100      	movs	r1, #0
 801d680:	68b8      	ldr	r0, [r7, #8]
 801d682:	f005 fbe9 	bl	8022e58 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 801d686:	2001      	movs	r0, #1
 801d688:	f004 fb0b 	bl	8021ca2 <mg_ntohs>
 801d68c:	4603      	mov	r3, r0
 801d68e:	461a      	mov	r2, r3
 801d690:	68bb      	ldr	r3, [r7, #8]
 801d692:	801a      	strh	r2, [r3, #0]
 801d694:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801d698:	f004 fb03 	bl	8021ca2 <mg_ntohs>
 801d69c:	4603      	mov	r3, r0
 801d69e:	461a      	mov	r2, r3
 801d6a0:	68bb      	ldr	r3, [r7, #8]
 801d6a2:	805a      	strh	r2, [r3, #2]
 801d6a4:	68bb      	ldr	r3, [r7, #8]
 801d6a6:	2206      	movs	r2, #6
 801d6a8:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 801d6aa:	68bb      	ldr	r3, [r7, #8]
 801d6ac:	2204      	movs	r2, #4
 801d6ae:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 801d6b0:	2001      	movs	r0, #1
 801d6b2:	f004 faf6 	bl	8021ca2 <mg_ntohs>
 801d6b6:	4603      	mov	r3, r0
 801d6b8:	461a      	mov	r2, r3
 801d6ba:	68bb      	ldr	r3, [r7, #8]
 801d6bc:	80da      	strh	r2, [r3, #6]
 801d6be:	68bb      	ldr	r3, [r7, #8]
 801d6c0:	683a      	ldr	r2, [r7, #0]
 801d6c2:	619a      	str	r2, [r3, #24]
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	689a      	ldr	r2, [r3, #8]
 801d6c8:	68bb      	ldr	r3, [r7, #8]
 801d6ca:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 801d6ce:	68bb      	ldr	r3, [r7, #8]
 801d6d0:	3308      	adds	r3, #8
 801d6d2:	6879      	ldr	r1, [r7, #4]
 801d6d4:	2206      	movs	r2, #6
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f005 fc9f 	bl	802301a <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801d6dc:	68bb      	ldr	r3, [r7, #8]
 801d6de:	f103 021c 	add.w	r2, r3, #28
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	1ad3      	subs	r3, r2, r3
 801d6e6:	4619      	mov	r1, r3
 801d6e8:	6878      	ldr	r0, [r7, #4]
 801d6ea:	f7ff ff8b 	bl	801d604 <ether_output>
}
 801d6ee:	bf00      	nop
 801d6f0:	3710      	adds	r7, #16
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bd80      	pop	{r7, pc}
	...

0801d6f8 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b082      	sub	sp, #8
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801d706:	2b03      	cmp	r3, #3
 801d708:	d13b      	bne.n	801d782 <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801d70a:	4b3b      	ldr	r3, [pc, #236]	@ (801d7f8 <onstatechange+0x100>)
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	2b01      	cmp	r3, #1
 801d710:	dd0d      	ble.n	801d72e <onstatechange+0x36>
 801d712:	4b3a      	ldr	r3, [pc, #232]	@ (801d7fc <onstatechange+0x104>)
 801d714:	f241 4201 	movw	r2, #5121	@ 0x1401
 801d718:	4939      	ldr	r1, [pc, #228]	@ (801d800 <onstatechange+0x108>)
 801d71a:	2002      	movs	r0, #2
 801d71c:	f7fd f8a2 	bl	801a864 <mg_log_prefix>
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	3308      	adds	r3, #8
 801d724:	461a      	mov	r2, r3
 801d726:	4937      	ldr	r1, [pc, #220]	@ (801d804 <onstatechange+0x10c>)
 801d728:	4837      	ldr	r0, [pc, #220]	@ (801d808 <onstatechange+0x110>)
 801d72a:	f7fd f8eb 	bl	801a904 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801d72e:	4b32      	ldr	r3, [pc, #200]	@ (801d7f8 <onstatechange+0x100>)
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	2b01      	cmp	r3, #1
 801d734:	dd0d      	ble.n	801d752 <onstatechange+0x5a>
 801d736:	4b31      	ldr	r3, [pc, #196]	@ (801d7fc <onstatechange+0x104>)
 801d738:	f241 4202 	movw	r2, #5122	@ 0x1402
 801d73c:	4930      	ldr	r1, [pc, #192]	@ (801d800 <onstatechange+0x108>)
 801d73e:	2002      	movs	r0, #2
 801d740:	f7fd f890 	bl	801a864 <mg_log_prefix>
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	3310      	adds	r3, #16
 801d748:	461a      	mov	r2, r3
 801d74a:	492e      	ldr	r1, [pc, #184]	@ (801d804 <onstatechange+0x10c>)
 801d74c:	482f      	ldr	r0, [pc, #188]	@ (801d80c <onstatechange+0x114>)
 801d74e:	f7fd f8d9 	bl	801a904 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 801d752:	4b29      	ldr	r3, [pc, #164]	@ (801d7f8 <onstatechange+0x100>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	2b01      	cmp	r3, #1
 801d758:	dd0c      	ble.n	801d774 <onstatechange+0x7c>
 801d75a:	4b28      	ldr	r3, [pc, #160]	@ (801d7fc <onstatechange+0x104>)
 801d75c:	f241 4203 	movw	r2, #5123	@ 0x1403
 801d760:	4927      	ldr	r1, [pc, #156]	@ (801d800 <onstatechange+0x108>)
 801d762:	2002      	movs	r0, #2
 801d764:	f7fd f87e 	bl	801a864 <mg_log_prefix>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	461a      	mov	r2, r3
 801d76c:	4928      	ldr	r1, [pc, #160]	@ (801d810 <onstatechange+0x118>)
 801d76e:	4829      	ldr	r0, [pc, #164]	@ (801d814 <onstatechange+0x11c>)
 801d770:	f7fd f8c8 	bl	801a904 <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	691b      	ldr	r3, [r3, #16]
 801d778:	4619      	mov	r1, r3
 801d77a:	6878      	ldr	r0, [r7, #4]
 801d77c:	f7ff ff5e 	bl	801d63c <arp_ask>
 801d780:	e02e      	b.n	801d7e0 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801d788:	2b01      	cmp	r3, #1
 801d78a:	d116      	bne.n	801d7ba <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 801d78c:	4b1a      	ldr	r3, [pc, #104]	@ (801d7f8 <onstatechange+0x100>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	2b00      	cmp	r3, #0
 801d792:	dd09      	ble.n	801d7a8 <onstatechange+0xb0>
 801d794:	4b19      	ldr	r3, [pc, #100]	@ (801d7fc <onstatechange+0x104>)
 801d796:	f241 4206 	movw	r2, #5126	@ 0x1406
 801d79a:	4919      	ldr	r1, [pc, #100]	@ (801d800 <onstatechange+0x108>)
 801d79c:	2001      	movs	r0, #1
 801d79e:	f7fd f861 	bl	801a864 <mg_log_prefix>
 801d7a2:	481d      	ldr	r0, [pc, #116]	@ (801d818 <onstatechange+0x120>)
 801d7a4:	f7fd f8ae 	bl	801a904 <mg_log>
    srand((unsigned int) mg_millis());
 801d7a8:	f004 fb0c 	bl	8021dc4 <mg_millis>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	4613      	mov	r3, r2
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f005 f820 	bl	80227f8 <srand>
 801d7b8:	e012      	b.n	801d7e0 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d10d      	bne.n	801d7e0 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 801d7c4:	4b0c      	ldr	r3, [pc, #48]	@ (801d7f8 <onstatechange+0x100>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	dd09      	ble.n	801d7e0 <onstatechange+0xe8>
 801d7cc:	4b0b      	ldr	r3, [pc, #44]	@ (801d7fc <onstatechange+0x104>)
 801d7ce:	f241 4209 	movw	r2, #5129	@ 0x1409
 801d7d2:	490b      	ldr	r1, [pc, #44]	@ (801d800 <onstatechange+0x108>)
 801d7d4:	2001      	movs	r0, #1
 801d7d6:	f7fd f845 	bl	801a864 <mg_log_prefix>
 801d7da:	4810      	ldr	r0, [pc, #64]	@ (801d81c <onstatechange+0x124>)
 801d7dc:	f7fd f892 	bl	801a904 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	337c      	adds	r3, #124	@ 0x7c
 801d7e4:	461a      	mov	r2, r3
 801d7e6:	2100      	movs	r1, #0
 801d7e8:	6878      	ldr	r0, [r7, #4]
 801d7ea:	f7ff fe23 	bl	801d434 <mg_tcpip_call>
}
 801d7ee:	bf00      	nop
 801d7f0:	3708      	adds	r7, #8
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	bd80      	pop	{r7, pc}
 801d7f6:	bf00      	nop
 801d7f8:	20000294 	.word	0x20000294
 801d7fc:	080296d8 	.word	0x080296d8
 801d800:	08026838 	.word	0x08026838
 801d804:	08020a55 	.word	0x08020a55
 801d808:	08027dfc 	.word	0x08027dfc
 801d80c:	08027e0c 	.word	0x08027e0c
 801d810:	08020b19 	.word	0x08020b19
 801d814:	08027e1c 	.word	0x08027e1c
 801d818:	08027e2c 	.word	0x08027e2c
 801d81c:	08027e34 	.word	0x08027e34

0801d820 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801d820:	b580      	push	{r7, lr}
 801d822:	b086      	sub	sp, #24
 801d824:	af00      	add	r7, sp, #0
 801d826:	60f8      	str	r0, [r7, #12]
 801d828:	60b9      	str	r1, [r7, #8]
 801d82a:	603b      	str	r3, [r7, #0]
 801d82c:	4613      	mov	r3, r2
 801d82e:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	695b      	ldr	r3, [r3, #20]
 801d834:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 801d836:	697b      	ldr	r3, [r7, #20]
 801d838:	330e      	adds	r3, #14
 801d83a:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 801d83c:	697b      	ldr	r3, [r7, #20]
 801d83e:	2206      	movs	r2, #6
 801d840:	68b9      	ldr	r1, [r7, #8]
 801d842:	4618      	mov	r0, r3
 801d844:	f005 fbe9 	bl	802301a <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 801d848:	697b      	ldr	r3, [r7, #20]
 801d84a:	3306      	adds	r3, #6
 801d84c:	68f9      	ldr	r1, [r7, #12]
 801d84e:	2206      	movs	r2, #6
 801d850:	4618      	mov	r0, r3
 801d852:	f005 fbe2 	bl	802301a <memcpy>
  eth->type = mg_htons(0x800);
 801d856:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801d85a:	f004 fa22 	bl	8021ca2 <mg_ntohs>
 801d85e:	4603      	mov	r3, r0
 801d860:	461a      	mov	r2, r3
 801d862:	697b      	ldr	r3, [r7, #20]
 801d864:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 801d866:	2214      	movs	r2, #20
 801d868:	2100      	movs	r1, #0
 801d86a:	6938      	ldr	r0, [r7, #16]
 801d86c:	f005 faf4 	bl	8022e58 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 801d870:	693b      	ldr	r3, [r7, #16]
 801d872:	2245      	movs	r2, #69	@ 0x45
 801d874:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 801d876:	693b      	ldr	r3, [r7, #16]
 801d878:	2200      	movs	r2, #0
 801d87a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801d87e:	719a      	strb	r2, [r3, #6]
 801d880:	2200      	movs	r2, #0
 801d882:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 801d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d886:	b29b      	uxth	r3, r3
 801d888:	3314      	adds	r3, #20
 801d88a:	b29b      	uxth	r3, r3
 801d88c:	4618      	mov	r0, r3
 801d88e:	f004 fa08 	bl	8021ca2 <mg_ntohs>
 801d892:	4603      	mov	r3, r0
 801d894:	461a      	mov	r2, r3
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 801d89a:	693b      	ldr	r3, [r7, #16]
 801d89c:	2240      	movs	r2, #64	@ 0x40
 801d89e:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 801d8a0:	693b      	ldr	r3, [r7, #16]
 801d8a2:	79fa      	ldrb	r2, [r7, #7]
 801d8a4:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 801d8a6:	693b      	ldr	r3, [r7, #16]
 801d8a8:	683a      	ldr	r2, [r7, #0]
 801d8aa:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801d8ac:	693b      	ldr	r3, [r7, #16]
 801d8ae:	6a3a      	ldr	r2, [r7, #32]
 801d8b0:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 801d8b2:	2114      	movs	r1, #20
 801d8b4:	6938      	ldr	r0, [r7, #16]
 801d8b6:	f7ff fe35 	bl	801d524 <ipcsum>
 801d8ba:	4603      	mov	r3, r0
 801d8bc:	461a      	mov	r2, r3
 801d8be:	693b      	ldr	r3, [r7, #16]
 801d8c0:	815a      	strh	r2, [r3, #10]
  return ip;
 801d8c2:	693b      	ldr	r3, [r7, #16]
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	3718      	adds	r7, #24
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd80      	pop	{r7, pc}

0801d8cc <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801d8cc:	b580      	push	{r7, lr}
 801d8ce:	b08a      	sub	sp, #40	@ 0x28
 801d8d0:	af02      	add	r7, sp, #8
 801d8d2:	60f8      	str	r0, [r7, #12]
 801d8d4:	60b9      	str	r1, [r7, #8]
 801d8d6:	607a      	str	r2, [r7, #4]
 801d8d8:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 801d8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8dc:	3308      	adds	r3, #8
 801d8de:	9301      	str	r3, [sp, #4]
 801d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8e2:	9300      	str	r3, [sp, #0]
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	2211      	movs	r2, #17
 801d8e8:	68b9      	ldr	r1, [r7, #8]
 801d8ea:	68f8      	ldr	r0, [r7, #12]
 801d8ec:	f7ff ff98 	bl	801d820 <tx_ip>
 801d8f0:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 801d8f2:	69fb      	ldr	r3, [r7, #28]
 801d8f4:	3314      	adds	r3, #20
 801d8f6:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 801d8f8:	69bb      	ldr	r3, [r7, #24]
 801d8fa:	887a      	ldrh	r2, [r7, #2]
 801d8fc:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801d8fe:	69bb      	ldr	r3, [r7, #24]
 801d900:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801d902:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 801d904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d906:	b29b      	uxth	r3, r3
 801d908:	3308      	adds	r3, #8
 801d90a:	b29b      	uxth	r3, r3
 801d90c:	4618      	mov	r0, r3
 801d90e:	f004 f9c8 	bl	8021ca2 <mg_ntohs>
 801d912:	4603      	mov	r3, r0
 801d914:	461a      	mov	r2, r3
 801d916:	69bb      	ldr	r3, [r7, #24]
 801d918:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 801d91a:	69bb      	ldr	r3, [r7, #24]
 801d91c:	2200      	movs	r2, #0
 801d91e:	719a      	strb	r2, [r3, #6]
 801d920:	2200      	movs	r2, #0
 801d922:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 801d924:	2208      	movs	r2, #8
 801d926:	69b9      	ldr	r1, [r7, #24]
 801d928:	2000      	movs	r0, #0
 801d92a:	f7ff fdb5 	bl	801d498 <csumup>
 801d92e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801d930:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d932:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d934:	6978      	ldr	r0, [r7, #20]
 801d936:	f7ff fdaf 	bl	801d498 <csumup>
 801d93a:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801d93c:	69fb      	ldr	r3, [r7, #28]
 801d93e:	330c      	adds	r3, #12
 801d940:	2204      	movs	r2, #4
 801d942:	4619      	mov	r1, r3
 801d944:	6978      	ldr	r0, [r7, #20]
 801d946:	f7ff fda7 	bl	801d498 <csumup>
 801d94a:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801d94c:	69fb      	ldr	r3, [r7, #28]
 801d94e:	3310      	adds	r3, #16
 801d950:	2204      	movs	r2, #4
 801d952:	4619      	mov	r1, r3
 801d954:	6978      	ldr	r0, [r7, #20]
 801d956:	f7ff fd9f 	bl	801d498 <csumup>
 801d95a:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 801d95c:	69fb      	ldr	r3, [r7, #28]
 801d95e:	7a5b      	ldrb	r3, [r3, #9]
 801d960:	461a      	mov	r2, r3
 801d962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d964:	441a      	add	r2, r3
 801d966:	697b      	ldr	r3, [r7, #20]
 801d968:	4413      	add	r3, r2
 801d96a:	3308      	adds	r3, #8
 801d96c:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 801d96e:	6978      	ldr	r0, [r7, #20]
 801d970:	f7ff fdbd 	bl	801d4ee <csumfin>
 801d974:	4603      	mov	r3, r0
 801d976:	461a      	mov	r2, r3
 801d978:	69bb      	ldr	r3, [r7, #24]
 801d97a:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 801d97c:	69bb      	ldr	r3, [r7, #24]
 801d97e:	3308      	adds	r3, #8
 801d980:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d984:	4618      	mov	r0, r3
 801d986:	f005 fa4d 	bl	8022e24 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 801d98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d98c:	332a      	adds	r3, #42	@ 0x2a
 801d98e:	4619      	mov	r1, r3
 801d990:	68f8      	ldr	r0, [r7, #12]
 801d992:	f7ff fe37 	bl	801d604 <ether_output>
}
 801d996:	bf00      	nop
 801d998:	3720      	adds	r7, #32
 801d99a:	46bd      	mov	sp, r7
 801d99c:	bd80      	pop	{r7, pc}
	...

0801d9a0 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 801d9a0:	b5b0      	push	{r4, r5, r7, lr}
 801d9a2:	b0cc      	sub	sp, #304	@ 0x130
 801d9a4:	af04      	add	r7, sp, #16
 801d9a6:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801d9aa:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 801d9ae:	6020      	str	r0, [r4, #0]
 801d9b0:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801d9b4:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 801d9b8:	6001      	str	r1, [r0, #0]
 801d9ba:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801d9be:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801d9c2:	600a      	str	r2, [r1, #0]
 801d9c4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801d9c8:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801d9cc:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801d9ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801d9d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d9d6:	4a38      	ldr	r2, [pc, #224]	@ (801dab8 <tx_dhcp+0x118>)
 801d9d8:	4618      	mov	r0, r3
 801d9da:	4611      	mov	r1, r2
 801d9dc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801d9e0:	461a      	mov	r2, r3
 801d9e2:	f005 fb1a 	bl	802301a <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 801d9e6:	4835      	ldr	r0, [pc, #212]	@ (801dabc <tx_dhcp+0x11c>)
 801d9e8:	f004 f942 	bl	8021c70 <mg_ntohl>
 801d9ec:	4602      	mov	r2, r0
 801d9ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801d9f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d9f6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 801d9fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801d9fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801da02:	6819      	ldr	r1, [r3, #0]
 801da04:	f107 0310 	add.w	r3, r7, #16
 801da08:	331c      	adds	r3, #28
 801da0a:	2206      	movs	r2, #6
 801da0c:	4618      	mov	r0, r3
 801da0e:	f005 fb04 	bl	802301a <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 801da12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	3302      	adds	r3, #2
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	461a      	mov	r2, r3
 801da22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801da2a:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 801da2c:	f107 0310 	add.w	r3, r7, #16
 801da30:	33f0      	adds	r3, #240	@ 0xf0
 801da32:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801da36:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801da3a:	4618      	mov	r0, r3
 801da3c:	f005 faed 	bl	802301a <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 801da40:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 801da44:	2b00      	cmp	r3, #0
 801da46:	d009      	beq.n	801da5c <tx_dhcp+0xbc>
 801da48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801da50:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801da54:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801da58:	6812      	ldr	r2, [r2, #0]
 801da5a:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 801da5c:	2044      	movs	r0, #68	@ 0x44
 801da5e:	f004 f920 	bl	8021ca2 <mg_ntohs>
 801da62:	4603      	mov	r3, r0
 801da64:	461d      	mov	r5, r3
 801da66:	2043      	movs	r0, #67	@ 0x43
 801da68:	f004 f91b 	bl	8021ca2 <mg_ntohs>
 801da6c:	4603      	mov	r3, r0
 801da6e:	461c      	mov	r4, r3
 801da70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da74:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 801da78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da7c:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 801da80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da84:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801da88:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801da8c:	9303      	str	r3, [sp, #12]
 801da8e:	f107 0310 	add.w	r3, r7, #16
 801da92:	9302      	str	r3, [sp, #8]
 801da94:	9401      	str	r4, [sp, #4]
 801da96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801da9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	9300      	str	r3, [sp, #0]
 801daa2:	462b      	mov	r3, r5
 801daa4:	6812      	ldr	r2, [r2, #0]
 801daa6:	6809      	ldr	r1, [r1, #0]
 801daa8:	6800      	ldr	r0, [r0, #0]
 801daaa:	f7ff ff0f 	bl	801d8cc <tx_udp>
         sizeof(dhcp));
}
 801daae:	bf00      	nop
 801dab0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801dab4:	46bd      	mov	sp, r7
 801dab6:	bdb0      	pop	{r4, r5, r7, pc}
 801dab8:	08027e40 	.word	0x08027e40
 801dabc:	63825363 	.word	0x63825363

0801dac0 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 801dac0:	b5b0      	push	{r4, r5, r7, lr}
 801dac2:	b090      	sub	sp, #64	@ 0x40
 801dac4:	af04      	add	r7, sp, #16
 801dac6:	60f8      	str	r0, [r7, #12]
 801dac8:	60b9      	str	r1, [r7, #8]
 801daca:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 801dacc:	4b31      	ldr	r3, [pc, #196]	@ (801db94 <tx_dhcp_request_sel+0xd4>)
 801dace:	f107 0414 	add.w	r4, r7, #20
 801dad2:	461d      	mov	r5, r3
 801dad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dadc:	c403      	stmia	r4!, {r0, r1}
 801dade:	8022      	strh	r2, [r4, #0]
 801dae0:	3402      	adds	r4, #2
 801dae2:	0c13      	lsrs	r3, r2, #16
 801dae4:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 801dae6:	2300      	movs	r3, #0
 801dae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 801daec:	f107 0314 	add.w	r3, r7, #20
 801daf0:	330a      	adds	r3, #10
 801daf2:	687a      	ldr	r2, [r7, #4]
 801daf4:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 801daf6:	f107 0314 	add.w	r3, r7, #20
 801dafa:	3310      	adds	r3, #16
 801dafc:	68ba      	ldr	r2, [r7, #8]
 801dafe:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	7fdb      	ldrb	r3, [r3, #31]
 801db04:	2b00      	cmp	r3, #0
 801db06:	d00a      	beq.n	801db1e <tx_dhcp_request_sel+0x5e>
 801db08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801db0c:	1c5a      	adds	r2, r3, #1
 801db0e:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801db12:	3318      	adds	r3, #24
 801db14:	3330      	adds	r3, #48	@ 0x30
 801db16:	443b      	add	r3, r7
 801db18:	2206      	movs	r2, #6
 801db1a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	f893 3020 	ldrb.w	r3, [r3, #32]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d00a      	beq.n	801db3e <tx_dhcp_request_sel+0x7e>
 801db28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801db2c:	1c5a      	adds	r2, r3, #1
 801db2e:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801db32:	3318      	adds	r3, #24
 801db34:	3330      	adds	r3, #48	@ 0x30
 801db36:	443b      	add	r3, r7
 801db38:	222a      	movs	r2, #42	@ 0x2a
 801db3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 801db3e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 801db42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801db46:	4413      	add	r3, r2
 801db48:	b2db      	uxtb	r3, r3
 801db4a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 801db4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801db52:	3319      	adds	r3, #25
 801db54:	2200      	movs	r2, #0
 801db56:	9202      	str	r2, [sp, #8]
 801db58:	9301      	str	r3, [sp, #4]
 801db5a:	f107 0314 	add.w	r3, r7, #20
 801db5e:	9300      	str	r3, [sp, #0]
 801db60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801db64:	2200      	movs	r2, #0
 801db66:	490c      	ldr	r1, [pc, #48]	@ (801db98 <tx_dhcp_request_sel+0xd8>)
 801db68:	68f8      	ldr	r0, [r7, #12]
 801db6a:	f7ff ff19 	bl	801d9a0 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 801db6e:	4b0b      	ldr	r3, [pc, #44]	@ (801db9c <tx_dhcp_request_sel+0xdc>)
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	2b02      	cmp	r3, #2
 801db74:	dd09      	ble.n	801db8a <tx_dhcp_request_sel+0xca>
 801db76:	4b0a      	ldr	r3, [pc, #40]	@ (801dba0 <tx_dhcp_request_sel+0xe0>)
 801db78:	f241 425b 	movw	r2, #5211	@ 0x145b
 801db7c:	4909      	ldr	r1, [pc, #36]	@ (801dba4 <tx_dhcp_request_sel+0xe4>)
 801db7e:	2003      	movs	r0, #3
 801db80:	f7fc fe70 	bl	801a864 <mg_log_prefix>
 801db84:	4808      	ldr	r0, [pc, #32]	@ (801dba8 <tx_dhcp_request_sel+0xe8>)
 801db86:	f7fc febd 	bl	801a904 <mg_log>
}
 801db8a:	bf00      	nop
 801db8c:	3730      	adds	r7, #48	@ 0x30
 801db8e:	46bd      	mov	sp, r7
 801db90:	bdb0      	pop	{r4, r5, r7, pc}
 801db92:	bf00      	nop
 801db94:	08027f60 	.word	0x08027f60
 801db98:	0802960c 	.word	0x0802960c
 801db9c:	20000294 	.word	0x20000294
 801dba0:	080296e8 	.word	0x080296e8
 801dba4:	08026838 	.word	0x08026838
 801dba8:	08027f50 	.word	0x08027f50

0801dbac <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 801dbac:	b580      	push	{r7, lr}
 801dbae:	b08a      	sub	sp, #40	@ 0x28
 801dbb0:	af04      	add	r7, sp, #16
 801dbb2:	60f8      	str	r0, [r7, #12]
 801dbb4:	60b9      	str	r1, [r7, #8]
 801dbb6:	607a      	str	r2, [r7, #4]
 801dbb8:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 801dbba:	4b10      	ldr	r3, [pc, #64]	@ (801dbfc <tx_dhcp_request_re+0x50>)
 801dbbc:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 801dbbe:	2301      	movs	r3, #1
 801dbc0:	9302      	str	r3, [sp, #8]
 801dbc2:	2304      	movs	r3, #4
 801dbc4:	9301      	str	r3, [sp, #4]
 801dbc6:	f107 0314 	add.w	r3, r7, #20
 801dbca:	9300      	str	r3, [sp, #0]
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	687a      	ldr	r2, [r7, #4]
 801dbd0:	68b9      	ldr	r1, [r7, #8]
 801dbd2:	68f8      	ldr	r0, [r7, #12]
 801dbd4:	f7ff fee4 	bl	801d9a0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 801dbd8:	4b09      	ldr	r3, [pc, #36]	@ (801dc00 <tx_dhcp_request_re+0x54>)
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	2b02      	cmp	r3, #2
 801dbde:	dd09      	ble.n	801dbf4 <tx_dhcp_request_re+0x48>
 801dbe0:	4b08      	ldr	r3, [pc, #32]	@ (801dc04 <tx_dhcp_request_re+0x58>)
 801dbe2:	f241 4266 	movw	r2, #5222	@ 0x1466
 801dbe6:	4908      	ldr	r1, [pc, #32]	@ (801dc08 <tx_dhcp_request_re+0x5c>)
 801dbe8:	2003      	movs	r0, #3
 801dbea:	f7fc fe3b 	bl	801a864 <mg_log_prefix>
 801dbee:	4807      	ldr	r0, [pc, #28]	@ (801dc0c <tx_dhcp_request_re+0x60>)
 801dbf0:	f7fc fe88 	bl	801a904 <mg_log>
}
 801dbf4:	bf00      	nop
 801dbf6:	3718      	adds	r7, #24
 801dbf8:	46bd      	mov	sp, r7
 801dbfa:	bd80      	pop	{r7, pc}
 801dbfc:	ff030135 	.word	0xff030135
 801dc00:	20000294 	.word	0x20000294
 801dc04:	080296fc 	.word	0x080296fc
 801dc08:	08026838 	.word	0x08026838
 801dc0c:	08027f50 	.word	0x08027f50

0801dc10 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 801dc10:	b580      	push	{r7, lr}
 801dc12:	b088      	sub	sp, #32
 801dc14:	af04      	add	r7, sp, #16
 801dc16:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 801dc18:	4a14      	ldr	r2, [pc, #80]	@ (801dc6c <tx_dhcp_discover+0x5c>)
 801dc1a:	f107 0308 	add.w	r3, r7, #8
 801dc1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dc22:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 801dc26:	2300      	movs	r3, #0
 801dc28:	9302      	str	r3, [sp, #8]
 801dc2a:	2308      	movs	r3, #8
 801dc2c:	9301      	str	r3, [sp, #4]
 801dc2e:	f107 0308 	add.w	r3, r7, #8
 801dc32:	9300      	str	r3, [sp, #0]
 801dc34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc38:	2200      	movs	r2, #0
 801dc3a:	490d      	ldr	r1, [pc, #52]	@ (801dc70 <tx_dhcp_discover+0x60>)
 801dc3c:	6878      	ldr	r0, [r7, #4]
 801dc3e:	f7ff feaf 	bl	801d9a0 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 801dc42:	4b0c      	ldr	r3, [pc, #48]	@ (801dc74 <tx_dhcp_discover+0x64>)
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	2b02      	cmp	r3, #2
 801dc48:	dd0c      	ble.n	801dc64 <tx_dhcp_discover+0x54>
 801dc4a:	4b0b      	ldr	r3, [pc, #44]	@ (801dc78 <tx_dhcp_discover+0x68>)
 801dc4c:	f241 4270 	movw	r2, #5232	@ 0x1470
 801dc50:	490a      	ldr	r1, [pc, #40]	@ (801dc7c <tx_dhcp_discover+0x6c>)
 801dc52:	2003      	movs	r0, #3
 801dc54:	f7fc fe06 	bl	801a864 <mg_log_prefix>
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	461a      	mov	r2, r3
 801dc5c:	4908      	ldr	r1, [pc, #32]	@ (801dc80 <tx_dhcp_discover+0x70>)
 801dc5e:	4809      	ldr	r0, [pc, #36]	@ (801dc84 <tx_dhcp_discover+0x74>)
 801dc60:	f7fc fe50 	bl	801a904 <mg_log>
}
 801dc64:	bf00      	nop
 801dc66:	3710      	adds	r7, #16
 801dc68:	46bd      	mov	sp, r7
 801dc6a:	bd80      	pop	{r7, pc}
 801dc6c:	08027f9c 	.word	0x08027f9c
 801dc70:	0802960c 	.word	0x0802960c
 801dc74:	20000294 	.word	0x20000294
 801dc78:	08029710 	.word	0x08029710
 801dc7c:	08026838 	.word	0x08026838
 801dc80:	08020b19 	.word	0x08020b19
 801dc84:	08027f7c 	.word	0x08027f7c

0801dc88 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 801dc88:	b580      	push	{r7, lr}
 801dc8a:	b086      	sub	sp, #24
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	60f8      	str	r0, [r7, #12]
 801dc90:	60b9      	str	r1, [r7, #8]
 801dc92:	4613      	mov	r3, r2
 801dc94:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 801dc96:	2300      	movs	r3, #0
 801dc98:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	617b      	str	r3, [r7, #20]
 801dca0:	e057      	b.n	801dd52 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 801dca2:	697b      	ldr	r3, [r7, #20]
 801dca4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801dca8:	f003 0310 	and.w	r3, r3, #16
 801dcac:	b2db      	uxtb	r3, r3
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d010      	beq.n	801dcd4 <getpeer+0x4c>
 801dcb2:	68bb      	ldr	r3, [r7, #8]
 801dcb4:	699b      	ldr	r3, [r3, #24]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d00c      	beq.n	801dcd4 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801dcba:	68bb      	ldr	r3, [r7, #8]
 801dcbc:	699b      	ldr	r3, [r3, #24]
 801dcbe:	f103 000e 	add.w	r0, r3, #14
 801dcc2:	697b      	ldr	r3, [r7, #20]
 801dcc4:	331c      	adds	r3, #28
 801dcc6:	2204      	movs	r2, #4
 801dcc8:	4619      	mov	r1, r3
 801dcca:	f005 f89b 	bl	8022e04 <memcmp>
 801dcce:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d042      	beq.n	801dd5a <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801dcda:	f003 0301 	and.w	r3, r3, #1
 801dcde:	b2db      	uxtb	r3, r3
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d00b      	beq.n	801dcfc <getpeer+0x74>
 801dce4:	68bb      	ldr	r3, [r7, #8]
 801dce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d007      	beq.n	801dcfc <getpeer+0x74>
 801dcec:	697b      	ldr	r3, [r7, #20]
 801dcee:	8b1a      	ldrh	r2, [r3, #24]
 801dcf0:	68bb      	ldr	r3, [r7, #8]
 801dcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcf4:	885b      	ldrh	r3, [r3, #2]
 801dcf6:	b29b      	uxth	r3, r3
 801dcf8:	429a      	cmp	r2, r3
 801dcfa:	d030      	beq.n	801dd5e <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801dcfc:	697b      	ldr	r3, [r7, #20]
 801dcfe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801dd02:	f003 0301 	and.w	r3, r3, #1
 801dd06:	b2db      	uxtb	r3, r3
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d11f      	bne.n	801dd4c <getpeer+0xc4>
 801dd0c:	68bb      	ldr	r3, [r7, #8]
 801dd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d01b      	beq.n	801dd4c <getpeer+0xc4>
 801dd14:	697b      	ldr	r3, [r7, #20]
 801dd16:	8b1a      	ldrh	r2, [r3, #24]
 801dd18:	68bb      	ldr	r3, [r7, #8]
 801dd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd1c:	885b      	ldrh	r3, [r3, #2]
 801dd1e:	b29b      	uxth	r3, r3
 801dd20:	429a      	cmp	r2, r3
 801dd22:	d113      	bne.n	801dd4c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801dd24:	697b      	ldr	r3, [r7, #20]
 801dd26:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801dd2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dd2e:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801dd30:	79fa      	ldrb	r2, [r7, #7]
 801dd32:	429a      	cmp	r2, r3
 801dd34:	d10a      	bne.n	801dd4c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801dd36:	79fb      	ldrb	r3, [r7, #7]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d111      	bne.n	801dd60 <getpeer+0xd8>
 801dd3c:	697b      	ldr	r3, [r7, #20]
 801dd3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801dd40:	68bb      	ldr	r3, [r7, #8]
 801dd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd44:	881b      	ldrh	r3, [r3, #0]
 801dd46:	b29b      	uxth	r3, r3
 801dd48:	429a      	cmp	r2, r3
 801dd4a:	d009      	beq.n	801dd60 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 801dd4c:	697b      	ldr	r3, [r7, #20]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	617b      	str	r3, [r7, #20]
 801dd52:	697b      	ldr	r3, [r7, #20]
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d1a4      	bne.n	801dca2 <getpeer+0x1a>
 801dd58:	e002      	b.n	801dd60 <getpeer+0xd8>
      break;
 801dd5a:	bf00      	nop
 801dd5c:	e000      	b.n	801dd60 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801dd5e:	bf00      	nop
      break;
  }
  return c;
 801dd60:	697b      	ldr	r3, [r7, #20]
}
 801dd62:	4618      	mov	r0, r3
 801dd64:	3718      	adds	r7, #24
 801dd66:	46bd      	mov	sp, r7
 801dd68:	bd80      	pop	{r7, pc}
	...

0801dd6c <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801dd6c:	b5b0      	push	{r4, r5, r7, lr}
 801dd6e:	b088      	sub	sp, #32
 801dd70:	af02      	add	r7, sp, #8
 801dd72:	6078      	str	r0, [r7, #4]
 801dd74:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	699b      	ldr	r3, [r3, #24]
 801dd7a:	88db      	ldrh	r3, [r3, #6]
 801dd7c:	b29c      	uxth	r4, r3
 801dd7e:	2001      	movs	r0, #1
 801dd80:	f003 ff8f 	bl	8021ca2 <mg_ntohs>
 801dd84:	4603      	mov	r3, r0
 801dd86:	429c      	cmp	r4, r3
 801dd88:	d176      	bne.n	801de78 <rx_arp+0x10c>
 801dd8a:	683b      	ldr	r3, [r7, #0]
 801dd8c:	699b      	ldr	r3, [r3, #24]
 801dd8e:	699a      	ldr	r2, [r3, #24]
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	689b      	ldr	r3, [r3, #8]
 801dd94:	429a      	cmp	r2, r3
 801dd96:	d16f      	bne.n	801de78 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	695b      	ldr	r3, [r3, #20]
 801dd9c:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801dd9e:	697b      	ldr	r3, [r7, #20]
 801dda0:	330e      	adds	r3, #14
 801dda2:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 801dda4:	6978      	ldr	r0, [r7, #20]
 801dda6:	683b      	ldr	r3, [r7, #0]
 801dda8:	691b      	ldr	r3, [r3, #16]
 801ddaa:	3306      	adds	r3, #6
 801ddac:	2206      	movs	r2, #6
 801ddae:	4619      	mov	r1, r3
 801ddb0:	f005 f933 	bl	802301a <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801ddb4:	697b      	ldr	r3, [r7, #20]
 801ddb6:	3306      	adds	r3, #6
 801ddb8:	6879      	ldr	r1, [r7, #4]
 801ddba:	2206      	movs	r2, #6
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	f005 f92c 	bl	802301a <memcpy>
    eth->type = mg_htons(0x806);
 801ddc2:	f640 0006 	movw	r0, #2054	@ 0x806
 801ddc6:	f003 ff6c 	bl	8021ca2 <mg_ntohs>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	461a      	mov	r2, r3
 801ddce:	697b      	ldr	r3, [r7, #20]
 801ddd0:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	699a      	ldr	r2, [r3, #24]
 801ddd6:	693b      	ldr	r3, [r7, #16]
 801ddd8:	6814      	ldr	r4, [r2, #0]
 801ddda:	6850      	ldr	r0, [r2, #4]
 801dddc:	6891      	ldr	r1, [r2, #8]
 801ddde:	68d5      	ldr	r5, [r2, #12]
 801dde0:	601c      	str	r4, [r3, #0]
 801dde2:	6058      	str	r0, [r3, #4]
 801dde4:	6099      	str	r1, [r3, #8]
 801dde6:	60dd      	str	r5, [r3, #12]
 801dde8:	6914      	ldr	r4, [r2, #16]
 801ddea:	6950      	ldr	r0, [r2, #20]
 801ddec:	6991      	ldr	r1, [r2, #24]
 801ddee:	611c      	str	r4, [r3, #16]
 801ddf0:	6158      	str	r0, [r3, #20]
 801ddf2:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801ddf4:	2002      	movs	r0, #2
 801ddf6:	f003 ff54 	bl	8021ca2 <mg_ntohs>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	461a      	mov	r2, r3
 801ddfe:	693b      	ldr	r3, [r7, #16]
 801de00:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801de02:	693b      	ldr	r3, [r7, #16]
 801de04:	f103 0012 	add.w	r0, r3, #18
 801de08:	683b      	ldr	r3, [r7, #0]
 801de0a:	699b      	ldr	r3, [r3, #24]
 801de0c:	3308      	adds	r3, #8
 801de0e:	2206      	movs	r2, #6
 801de10:	4619      	mov	r1, r3
 801de12:	f005 f902 	bl	802301a <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801de16:	693b      	ldr	r3, [r7, #16]
 801de18:	3308      	adds	r3, #8
 801de1a:	6879      	ldr	r1, [r7, #4]
 801de1c:	2206      	movs	r2, #6
 801de1e:	4618      	mov	r0, r3
 801de20:	f005 f8fb 	bl	802301a <memcpy>
    arp->tpa = pkt->arp->spa;
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	699b      	ldr	r3, [r3, #24]
 801de28:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801de2c:	693b      	ldr	r3, [r7, #16]
 801de2e:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	689a      	ldr	r2, [r3, #8]
 801de34:	693b      	ldr	r3, [r7, #16]
 801de36:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 801de3a:	4b4a      	ldr	r3, [pc, #296]	@ (801df64 <rx_arp+0x1f8>)
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	2b02      	cmp	r3, #2
 801de40:	dd10      	ble.n	801de64 <rx_arp+0xf8>
 801de42:	4b49      	ldr	r3, [pc, #292]	@ (801df68 <rx_arp+0x1fc>)
 801de44:	f241 4292 	movw	r2, #5266	@ 0x1492
 801de48:	4948      	ldr	r1, [pc, #288]	@ (801df6c <rx_arp+0x200>)
 801de4a:	2003      	movs	r0, #3
 801de4c:	f7fc fd0a 	bl	801a864 <mg_log_prefix>
 801de50:	693b      	ldr	r3, [r7, #16]
 801de52:	f103 0218 	add.w	r2, r3, #24
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	9300      	str	r3, [sp, #0]
 801de5a:	4b45      	ldr	r3, [pc, #276]	@ (801df70 <rx_arp+0x204>)
 801de5c:	4945      	ldr	r1, [pc, #276]	@ (801df74 <rx_arp+0x208>)
 801de5e:	4846      	ldr	r0, [pc, #280]	@ (801df78 <rx_arp+0x20c>)
 801de60:	f7fc fd50 	bl	801a904 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 801de64:	693b      	ldr	r3, [r7, #16]
 801de66:	f103 021c 	add.w	r2, r3, #28
 801de6a:	697b      	ldr	r3, [r7, #20]
 801de6c:	1ad3      	subs	r3, r2, r3
 801de6e:	4619      	mov	r1, r3
 801de70:	6878      	ldr	r0, [r7, #4]
 801de72:	f7ff fbc7 	bl	801d604 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801de76:	e071      	b.n	801df5c <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	699b      	ldr	r3, [r3, #24]
 801de7c:	88db      	ldrh	r3, [r3, #6]
 801de7e:	b29c      	uxth	r4, r3
 801de80:	2002      	movs	r0, #2
 801de82:	f003 ff0e 	bl	8021ca2 <mg_ntohs>
 801de86:	4603      	mov	r3, r0
 801de88:	429c      	cmp	r4, r3
 801de8a:	d167      	bne.n	801df5c <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801de8c:	683b      	ldr	r3, [r7, #0]
 801de8e:	699b      	ldr	r3, [r3, #24]
 801de90:	3312      	adds	r3, #18
 801de92:	6879      	ldr	r1, [r7, #4]
 801de94:	2206      	movs	r2, #6
 801de96:	4618      	mov	r0, r3
 801de98:	f004 ffb4 	bl	8022e04 <memcmp>
 801de9c:	4603      	mov	r3, r0
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d15b      	bne.n	801df5a <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 801dea2:	683b      	ldr	r3, [r7, #0]
 801dea4:	699b      	ldr	r3, [r3, #24]
 801dea6:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	691b      	ldr	r3, [r3, #16]
 801deae:	429a      	cmp	r2, r3
 801deb0:	d10a      	bne.n	801dec8 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801deb8:	683b      	ldr	r3, [r7, #0]
 801deba:	699b      	ldr	r3, [r3, #24]
 801debc:	3308      	adds	r3, #8
 801debe:	2206      	movs	r2, #6
 801dec0:	4619      	mov	r1, r3
 801dec2:	f005 f8aa 	bl	802301a <memcpy>
 801dec6:	e049      	b.n	801df5c <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801decc:	2200      	movs	r2, #0
 801dece:	6839      	ldr	r1, [r7, #0]
 801ded0:	4618      	mov	r0, r3
 801ded2:	f7ff fed9 	bl	801dc88 <getpeer>
 801ded6:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d03e      	beq.n	801df5c <rx_arp+0x1f0>
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801dee4:	f003 0310 	and.w	r3, r3, #16
 801dee8:	b2db      	uxtb	r3, r3
 801deea:	2b00      	cmp	r3, #0
 801deec:	d036      	beq.n	801df5c <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	33b0      	adds	r3, #176	@ 0xb0
 801def2:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	f103 0018 	add.w	r0, r3, #24
 801defa:	683b      	ldr	r3, [r7, #0]
 801defc:	699b      	ldr	r3, [r3, #24]
 801defe:	3308      	adds	r3, #8
 801df00:	2206      	movs	r2, #6
 801df02:	4619      	mov	r1, r3
 801df04:	f005 f889 	bl	802301a <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 801df08:	4b16      	ldr	r3, [pc, #88]	@ (801df64 <rx_arp+0x1f8>)
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	2b02      	cmp	r3, #2
 801df0e:	dd15      	ble.n	801df3c <rx_arp+0x1d0>
 801df10:	4b15      	ldr	r3, [pc, #84]	@ (801df68 <rx_arp+0x1fc>)
 801df12:	f241 429f 	movw	r2, #5279	@ 0x149f
 801df16:	4915      	ldr	r1, [pc, #84]	@ (801df6c <rx_arp+0x200>)
 801df18:	2003      	movs	r0, #3
 801df1a:	f7fc fca3 	bl	801a864 <mg_log_prefix>
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	f103 021c 	add.w	r2, r3, #28
 801df28:	68bb      	ldr	r3, [r7, #8]
 801df2a:	3318      	adds	r3, #24
 801df2c:	9301      	str	r3, [sp, #4]
 801df2e:	4b10      	ldr	r3, [pc, #64]	@ (801df70 <rx_arp+0x204>)
 801df30:	9300      	str	r3, [sp, #0]
 801df32:	4613      	mov	r3, r2
 801df34:	4a0f      	ldr	r2, [pc, #60]	@ (801df74 <rx_arp+0x208>)
 801df36:	4811      	ldr	r0, [pc, #68]	@ (801df7c <rx_arp+0x210>)
 801df38:	f7fc fce4 	bl	801a904 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801df3c:	68fa      	ldr	r2, [r7, #12]
 801df3e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801df42:	f36f 1304 	bfc	r3, #4, #1
 801df46:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 801df4a:	68f8      	ldr	r0, [r7, #12]
 801df4c:	f002 f8ac 	bl	80200a8 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 801df50:	2103      	movs	r1, #3
 801df52:	68f8      	ldr	r0, [r7, #12]
 801df54:	f7ff fafa 	bl	801d54c <settmout>
 801df58:	e000      	b.n	801df5c <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801df5a:	bf00      	nop
      }
    }
  }
}
 801df5c:	3718      	adds	r7, #24
 801df5e:	46bd      	mov	sp, r7
 801df60:	bdb0      	pop	{r4, r5, r7, pc}
 801df62:	bf00      	nop
 801df64:	20000294 	.word	0x20000294
 801df68:	08029724 	.word	0x08029724
 801df6c:	08026838 	.word	0x08026838
 801df70:	08020b19 	.word	0x08020b19
 801df74:	08020a55 	.word	0x08020a55
 801df78:	08027fa4 	.word	0x08027fa4
 801df7c:	08027fbc 	.word	0x08027fbc

0801df80 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801df80:	b580      	push	{r7, lr}
 801df82:	b08a      	sub	sp, #40	@ 0x28
 801df84:	af02      	add	r7, sp, #8
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801df8a:	683b      	ldr	r3, [r7, #0]
 801df8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801df8e:	781b      	ldrb	r3, [r3, #0]
 801df90:	2b08      	cmp	r3, #8
 801df92:	d14d      	bne.n	801e030 <rx_icmp+0xb0>
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	69db      	ldr	r3, [r3, #28]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d049      	beq.n	801e030 <rx_icmp+0xb0>
 801df9c:	683b      	ldr	r3, [r7, #0]
 801df9e:	69db      	ldr	r3, [r3, #28]
 801dfa0:	691a      	ldr	r2, [r3, #16]
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	689b      	ldr	r3, [r3, #8]
 801dfa6:	429a      	cmp	r2, r3
 801dfa8:	d142      	bne.n	801e030 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801dfaa:	2326      	movs	r3, #38	@ 0x26
 801dfac:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	699a      	ldr	r2, [r3, #24]
 801dfb2:	69bb      	ldr	r3, [r7, #24]
 801dfb4:	1ad3      	subs	r3, r2, r3
 801dfb6:	617b      	str	r3, [r7, #20]
 801dfb8:	683b      	ldr	r3, [r7, #0]
 801dfba:	68db      	ldr	r3, [r3, #12]
 801dfbc:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801dfbe:	69fa      	ldr	r2, [r7, #28]
 801dfc0:	697b      	ldr	r3, [r7, #20]
 801dfc2:	429a      	cmp	r2, r3
 801dfc4:	d901      	bls.n	801dfca <rx_icmp+0x4a>
 801dfc6:	697b      	ldr	r3, [r7, #20]
 801dfc8:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801dfca:	683b      	ldr	r3, [r7, #0]
 801dfcc:	691b      	ldr	r3, [r3, #16]
 801dfce:	1d99      	adds	r1, r3, #6
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	6898      	ldr	r0, [r3, #8]
 801dfd4:	683b      	ldr	r3, [r7, #0]
 801dfd6:	69db      	ldr	r3, [r3, #28]
 801dfd8:	68db      	ldr	r3, [r3, #12]
 801dfda:	69fa      	ldr	r2, [r7, #28]
 801dfdc:	3204      	adds	r2, #4
 801dfde:	9201      	str	r2, [sp, #4]
 801dfe0:	9300      	str	r3, [sp, #0]
 801dfe2:	4603      	mov	r3, r0
 801dfe4:	2201      	movs	r2, #1
 801dfe6:	6878      	ldr	r0, [r7, #4]
 801dfe8:	f7ff fc1a 	bl	801d820 <tx_ip>
 801dfec:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	3314      	adds	r3, #20
 801dff2:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801dff4:	2204      	movs	r2, #4
 801dff6:	2100      	movs	r1, #0
 801dff8:	68f8      	ldr	r0, [r7, #12]
 801dffa:	f004 ff2d 	bl	8022e58 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	1d18      	adds	r0, r3, #4
 801e002:	683b      	ldr	r3, [r7, #0]
 801e004:	689b      	ldr	r3, [r3, #8]
 801e006:	69fa      	ldr	r2, [r7, #28]
 801e008:	4619      	mov	r1, r3
 801e00a:	f005 f806 	bl	802301a <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801e00e:	69fb      	ldr	r3, [r7, #28]
 801e010:	3304      	adds	r3, #4
 801e012:	4619      	mov	r1, r3
 801e014:	68f8      	ldr	r0, [r7, #12]
 801e016:	f7ff fa85 	bl	801d524 <ipcsum>
 801e01a:	4603      	mov	r3, r0
 801e01c:	461a      	mov	r2, r3
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801e022:	69ba      	ldr	r2, [r7, #24]
 801e024:	69fb      	ldr	r3, [r7, #28]
 801e026:	4413      	add	r3, r2
 801e028:	4619      	mov	r1, r3
 801e02a:	6878      	ldr	r0, [r7, #4]
 801e02c:	f7ff faea 	bl	801d604 <ether_output>
  }
}
 801e030:	bf00      	nop
 801e032:	3720      	adds	r7, #32
 801e034:	46bd      	mov	sp, r7
 801e036:	bd80      	pop	{r7, pc}

0801e038 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e03c:	b090      	sub	sp, #64	@ 0x40
 801e03e:	af00      	add	r7, sp, #0
 801e040:	60f8      	str	r0, [r7, #12]
 801e042:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801e044:	2300      	movs	r3, #0
 801e046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e048:	2300      	movs	r3, #0
 801e04a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e04c:	2300      	movs	r3, #0
 801e04e:	627b      	str	r3, [r7, #36]	@ 0x24
 801e050:	2300      	movs	r3, #0
 801e052:	623b      	str	r3, [r7, #32]
 801e054:	2300      	movs	r3, #0
 801e056:	61fb      	str	r3, [r7, #28]
 801e058:	2300      	movs	r3, #0
 801e05a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801e05c:	2300      	movs	r3, #0
 801e05e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e068:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801e06c:	68bb      	ldr	r3, [r7, #8]
 801e06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e070:	33f0      	adds	r3, #240	@ 0xf0
 801e072:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801e074:	68bb      	ldr	r3, [r7, #8]
 801e076:	681a      	ldr	r2, [r3, #0]
 801e078:	68bb      	ldr	r3, [r7, #8]
 801e07a:	685b      	ldr	r3, [r3, #4]
 801e07c:	4413      	add	r3, r2
 801e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e080:	68bb      	ldr	r3, [r7, #8]
 801e082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e084:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801e088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e08a:	429a      	cmp	r2, r3
 801e08c:	f0c0 81ac 	bcc.w	801e3e8 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e090:	68bb      	ldr	r3, [r7, #8]
 801e092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e094:	1d18      	adds	r0, r3, #4
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	3302      	adds	r3, #2
 801e09a:	2204      	movs	r2, #4
 801e09c:	4619      	mov	r1, r3
 801e09e:	f004 feb1 	bl	8022e04 <memcmp>
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	f040 81a1 	bne.w	801e3ec <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e0aa:	e08a      	b.n	801e1c2 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801e0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0ae:	781b      	ldrb	r3, [r3, #0]
 801e0b0:	2b01      	cmp	r3, #1
 801e0b2:	d10e      	bne.n	801e0d2 <rx_dhcp_client+0x9a>
 801e0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0b6:	3301      	adds	r3, #1
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	2b04      	cmp	r3, #4
 801e0bc:	d109      	bne.n	801e0d2 <rx_dhcp_client+0x9a>
 801e0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0c0:	3306      	adds	r3, #6
 801e0c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	d904      	bls.n	801e0d2 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 801e0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0ca:	3302      	adds	r3, #2
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 801e0d0:	e070      	b.n	801e1b4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801e0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0d4:	781b      	ldrb	r3, [r3, #0]
 801e0d6:	2b03      	cmp	r3, #3
 801e0d8:	d112      	bne.n	801e100 <rx_dhcp_client+0xc8>
 801e0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0dc:	3301      	adds	r3, #1
 801e0de:	781b      	ldrb	r3, [r3, #0]
 801e0e0:	2b04      	cmp	r3, #4
 801e0e2:	d10d      	bne.n	801e100 <rx_dhcp_client+0xc8>
 801e0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0e6:	3306      	adds	r3, #6
 801e0e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e0ea:	429a      	cmp	r2, r3
 801e0ec:	d908      	bls.n	801e100 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801e0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0f0:	3302      	adds	r3, #2
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801e0f6:	68bb      	ldr	r3, [r7, #8]
 801e0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e0fa:	691b      	ldr	r3, [r3, #16]
 801e0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e0fe:	e059      	b.n	801e1b4 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	7fdb      	ldrb	r3, [r3, #31]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d012      	beq.n	801e12e <rx_dhcp_client+0xf6>
 801e108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e10a:	781b      	ldrb	r3, [r3, #0]
 801e10c:	2b06      	cmp	r3, #6
 801e10e:	d10e      	bne.n	801e12e <rx_dhcp_client+0xf6>
 801e110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e112:	3301      	adds	r3, #1
 801e114:	781b      	ldrb	r3, [r3, #0]
 801e116:	2b04      	cmp	r3, #4
 801e118:	d109      	bne.n	801e12e <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801e11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e11c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e120:	429a      	cmp	r2, r3
 801e122:	d904      	bls.n	801e12e <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801e124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e126:	3302      	adds	r3, #2
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	61fb      	str	r3, [r7, #28]
 801e12c:	e042      	b.n	801e1b4 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d012      	beq.n	801e15e <rx_dhcp_client+0x126>
 801e138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e13a:	781b      	ldrb	r3, [r3, #0]
 801e13c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e13e:	d10e      	bne.n	801e15e <rx_dhcp_client+0x126>
 801e140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e142:	3301      	adds	r3, #1
 801e144:	781b      	ldrb	r3, [r3, #0]
 801e146:	2b04      	cmp	r3, #4
 801e148:	d109      	bne.n	801e15e <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801e14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e14c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e14e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e150:	429a      	cmp	r2, r3
 801e152:	d904      	bls.n	801e15e <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 801e154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e156:	3302      	adds	r3, #2
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	61bb      	str	r3, [r7, #24]
 801e15c:	e02a      	b.n	801e1b4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801e15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e160:	781b      	ldrb	r3, [r3, #0]
 801e162:	2b33      	cmp	r3, #51	@ 0x33
 801e164:	d114      	bne.n	801e190 <rx_dhcp_client+0x158>
 801e166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e168:	3301      	adds	r3, #1
 801e16a:	781b      	ldrb	r3, [r3, #0]
 801e16c:	2b04      	cmp	r3, #4
 801e16e:	d10f      	bne.n	801e190 <rx_dhcp_client+0x158>
 801e170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e172:	3306      	adds	r3, #6
 801e174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e176:	429a      	cmp	r2, r3
 801e178:	d90a      	bls.n	801e190 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801e17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e17c:	3302      	adds	r3, #2
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 801e182:	6a3b      	ldr	r3, [r7, #32]
 801e184:	4618      	mov	r0, r3
 801e186:	f003 fd73 	bl	8021c70 <mg_ntohl>
 801e18a:	4603      	mov	r3, r0
 801e18c:	623b      	str	r3, [r7, #32]
 801e18e:	e011      	b.n	801e1b4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 801e190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e192:	781b      	ldrb	r3, [r3, #0]
 801e194:	2b35      	cmp	r3, #53	@ 0x35
 801e196:	d10d      	bne.n	801e1b4 <rx_dhcp_client+0x17c>
 801e198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e19a:	3301      	adds	r3, #1
 801e19c:	781b      	ldrb	r3, [r3, #0]
 801e19e:	2b01      	cmp	r3, #1
 801e1a0:	d108      	bne.n	801e1b4 <rx_dhcp_client+0x17c>
 801e1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1a4:	3306      	adds	r3, #6
 801e1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1a8:	429a      	cmp	r2, r3
 801e1aa:	d903      	bls.n	801e1b4 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801e1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1ae:	789b      	ldrb	r3, [r3, #2]
 801e1b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801e1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1b6:	3301      	adds	r3, #1
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	3302      	adds	r3, #2
 801e1bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1be:	4413      	add	r3, r2
 801e1c0:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1c4:	3301      	adds	r3, #1
 801e1c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1c8:	429a      	cmp	r2, r3
 801e1ca:	d904      	bls.n	801e1d6 <rx_dhcp_client+0x19e>
 801e1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1ce:	781b      	ldrb	r3, [r3, #0]
 801e1d0:	2bff      	cmp	r3, #255	@ 0xff
 801e1d2:	f47f af6b 	bne.w	801e0ac <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801e1d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e1da:	2b06      	cmp	r3, #6
 801e1dc:	d10c      	bne.n	801e1f8 <rx_dhcp_client+0x1c0>
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	689b      	ldr	r3, [r3, #8]
 801e1e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e1e4:	429a      	cmp	r2, r3
 801e1e6:	d107      	bne.n	801e1f8 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	609a      	str	r2, [r3, #8]
 801e1f6:	e0ec      	b.n	801e3d2 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 801e1f8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e1fc:	2b02      	cmp	r3, #2
 801e1fe:	d123      	bne.n	801e248 <rx_dhcp_client+0x210>
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e206:	2b01      	cmp	r3, #1
 801e208:	d11e      	bne.n	801e248 <rx_dhcp_client+0x210>
 801e20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d01b      	beq.n	801e248 <rx_dhcp_client+0x210>
 801e210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e212:	2b00      	cmp	r3, #0
 801e214:	d018      	beq.n	801e248 <rx_dhcp_client+0x210>
 801e216:	6a3b      	ldr	r3, [r7, #32]
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d015      	beq.n	801e248 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e220:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801e222:	2b00      	cmp	r3, #0
 801e224:	d003      	beq.n	801e22e <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e226:	68bb      	ldr	r3, [r7, #8]
 801e228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801e22a:	695b      	ldr	r3, [r3, #20]
 801e22c:	e002      	b.n	801e234 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e22e:	68bb      	ldr	r3, [r7, #8]
 801e230:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801e232:	68db      	ldr	r3, [r3, #12]
 801e234:	461a      	mov	r2, r3
 801e236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e238:	68f8      	ldr	r0, [r7, #12]
 801e23a:	f7ff fc41 	bl	801dac0 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	2202      	movs	r2, #2
 801e242:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e246:	e0c4      	b.n	801e3d2 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 801e248:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e24c:	2b05      	cmp	r3, #5
 801e24e:	f040 80c0 	bne.w	801e3d2 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e252:	68fb      	ldr	r3, [r7, #12]
 801e254:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e258:	2b02      	cmp	r3, #2
 801e25a:	f040 8081 	bne.w	801e360 <rx_dhcp_client+0x328>
 801e25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e260:	2b00      	cmp	r3, #0
 801e262:	d07d      	beq.n	801e360 <rx_dhcp_client+0x328>
 801e264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e266:	2b00      	cmp	r3, #0
 801e268:	d07a      	beq.n	801e360 <rx_dhcp_client+0x328>
 801e26a:	6a3b      	ldr	r3, [r7, #32]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d077      	beq.n	801e360 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e276:	6a39      	ldr	r1, [r7, #32]
 801e278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e27c:	fb00 f101 	mul.w	r1, r0, r1
 801e280:	2000      	movs	r0, #0
 801e282:	4688      	mov	r8, r1
 801e284:	4681      	mov	r9, r0
 801e286:	eb12 0108 	adds.w	r1, r2, r8
 801e28a:	6039      	str	r1, [r7, #0]
 801e28c:	eb43 0309 	adc.w	r3, r3, r9
 801e290:	607b      	str	r3, [r7, #4]
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e298:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e29c:	4b56      	ldr	r3, [pc, #344]	@ (801e3f8 <rx_dhcp_client+0x3c0>)
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	2b01      	cmp	r3, #1
 801e2a2:	dd16      	ble.n	801e2d2 <rx_dhcp_client+0x29a>
 801e2a4:	4b55      	ldr	r3, [pc, #340]	@ (801e3fc <rx_dhcp_client+0x3c4>)
 801e2a6:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 801e2aa:	4955      	ldr	r1, [pc, #340]	@ (801e400 <rx_dhcp_client+0x3c8>)
 801e2ac:	2002      	movs	r0, #2
 801e2ae:	f7fc fad9 	bl	801a864 <mg_log_prefix>
 801e2b2:	6a3c      	ldr	r4, [r7, #32]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e2ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e2be:	f04f 0300 	mov.w	r3, #0
 801e2c2:	f7e2 fc8d 	bl	8000be0 <__aeabi_uldivmod>
 801e2c6:	4602      	mov	r2, r0
 801e2c8:	460b      	mov	r3, r1
 801e2ca:	4621      	mov	r1, r4
 801e2cc:	484d      	ldr	r0, [pc, #308]	@ (801e404 <rx_dhcp_client+0x3cc>)
 801e2ce:	f7fc fb19 	bl	801a904 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e2d8:	68bb      	ldr	r3, [r7, #8]
 801e2da:	691b      	ldr	r3, [r3, #16]
 801e2dc:	3306      	adds	r3, #6
 801e2de:	2206      	movs	r2, #6
 801e2e0:	4619      	mov	r1, r3
 801e2e2:	f004 fe9a 	bl	802301a <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e2ea:	609a      	str	r2, [r3, #8]
 801e2ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	611a      	str	r2, [r3, #16]
 801e2f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 801e2f8:	68fb      	ldr	r3, [r7, #12]
 801e2fa:	2203      	movs	r2, #3
 801e2fc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 801e300:	f107 0310 	add.w	r3, r7, #16
 801e304:	2108      	movs	r1, #8
 801e306:	4618      	mov	r0, r3
 801e308:	f003 fc4b 	bl	8021ba2 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801e30c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e310:	4614      	mov	r4, r2
 801e312:	f003 fd57 	bl	8021dc4 <mg_millis>
 801e316:	4602      	mov	r2, r0
 801e318:	460b      	mov	r3, r1
 801e31a:	4613      	mov	r3, r2
 801e31c:	4423      	add	r3, r4
 801e31e:	4618      	mov	r0, r3
 801e320:	f004 fa6a 	bl	80227f8 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	7fdb      	ldrb	r3, [r3, #31]
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d009      	beq.n	801e340 <rx_dhcp_client+0x308>
 801e32c:	69fb      	ldr	r3, [r7, #28]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d006      	beq.n	801e340 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801e332:	f107 031c 	add.w	r3, r7, #28
 801e336:	461a      	mov	r2, r3
 801e338:	2101      	movs	r1, #1
 801e33a:	68f8      	ldr	r0, [r7, #12]
 801e33c:	f7ff f87a 	bl	801d434 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d042      	beq.n	801e3d0 <rx_dhcp_client+0x398>
 801e34a:	69bb      	ldr	r3, [r7, #24]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d03f      	beq.n	801e3d0 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 801e350:	f107 0318 	add.w	r3, r7, #24
 801e354:	461a      	mov	r2, r3
 801e356:	2102      	movs	r1, #2
 801e358:	68f8      	ldr	r0, [r7, #12]
 801e35a:	f7ff f86b 	bl	801d434 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e35e:	e037      	b.n	801e3d0 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e366:	2b03      	cmp	r3, #3
 801e368:	d133      	bne.n	801e3d2 <rx_dhcp_client+0x39a>
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	689b      	ldr	r3, [r3, #8]
 801e36e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e370:	429a      	cmp	r2, r3
 801e372:	d12e      	bne.n	801e3d2 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e37a:	6a39      	ldr	r1, [r7, #32]
 801e37c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e380:	fb00 f101 	mul.w	r1, r0, r1
 801e384:	2000      	movs	r0, #0
 801e386:	460c      	mov	r4, r1
 801e388:	4605      	mov	r5, r0
 801e38a:	eb12 0a04 	adds.w	sl, r2, r4
 801e38e:	eb43 0b05 	adc.w	fp, r3, r5
 801e392:	68fb      	ldr	r3, [r7, #12]
 801e394:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e398:	4b17      	ldr	r3, [pc, #92]	@ (801e3f8 <rx_dhcp_client+0x3c0>)
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	2b01      	cmp	r3, #1
 801e39e:	dd18      	ble.n	801e3d2 <rx_dhcp_client+0x39a>
 801e3a0:	4b16      	ldr	r3, [pc, #88]	@ (801e3fc <rx_dhcp_client+0x3c4>)
 801e3a2:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 801e3a6:	4916      	ldr	r1, [pc, #88]	@ (801e400 <rx_dhcp_client+0x3c8>)
 801e3a8:	2002      	movs	r0, #2
 801e3aa:	f7fc fa5b 	bl	801a864 <mg_log_prefix>
 801e3ae:	6a3c      	ldr	r4, [r7, #32]
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e3b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e3ba:	f04f 0300 	mov.w	r3, #0
 801e3be:	f7e2 fc0f 	bl	8000be0 <__aeabi_uldivmod>
 801e3c2:	4602      	mov	r2, r0
 801e3c4:	460b      	mov	r3, r1
 801e3c6:	4621      	mov	r1, r4
 801e3c8:	480e      	ldr	r0, [pc, #56]	@ (801e404 <rx_dhcp_client+0x3cc>)
 801e3ca:	f7fc fa9b 	bl	801a904 <mg_log>
 801e3ce:	e000      	b.n	801e3d2 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e3d0:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e3d8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801e3dc:	429a      	cmp	r2, r3
 801e3de:	d006      	beq.n	801e3ee <rx_dhcp_client+0x3b6>
 801e3e0:	68f8      	ldr	r0, [r7, #12]
 801e3e2:	f7ff f989 	bl	801d6f8 <onstatechange>
 801e3e6:	e002      	b.n	801e3ee <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e3e8:	bf00      	nop
 801e3ea:	e000      	b.n	801e3ee <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e3ec:	bf00      	nop
}
 801e3ee:	3740      	adds	r7, #64	@ 0x40
 801e3f0:	46bd      	mov	sp, r7
 801e3f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e3f6:	bf00      	nop
 801e3f8:	20000294 	.word	0x20000294
 801e3fc:	0802972c 	.word	0x0802972c
 801e400:	08026838 	.word	0x08026838
 801e404:	08027fd8 	.word	0x08027fd8

0801e408 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e40c:	b0d6      	sub	sp, #344	@ 0x158
 801e40e:	af04      	add	r7, sp, #16
 801e410:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e414:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e418:	6018      	str	r0, [r3, #0]
 801e41a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e41e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e422:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801e424:	2300      	movs	r3, #0
 801e426:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 801e42a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e42e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e436:	33f0      	adds	r3, #240	@ 0xf0
 801e438:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801e43c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e440:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	681a      	ldr	r2, [r3, #0]
 801e448:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e44c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	4413      	add	r3, r2
 801e456:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e45a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e45e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e466:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801e46a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801e46e:	429a      	cmp	r2, r3
 801e470:	f0c0 81b0 	bcc.w	801e7d4 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801e474:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e478:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e47c:	4ad8      	ldr	r2, [pc, #864]	@ (801e7e0 <rx_dhcp_server+0x3d8>)
 801e47e:	4618      	mov	r0, r3
 801e480:	4611      	mov	r1, r2
 801e482:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e486:	461a      	mov	r2, r3
 801e488:	f004 fdc7 	bl	802301a <memcpy>
  res.yiaddr = ifp->ip;
 801e48c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e490:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	689a      	ldr	r2, [r3, #8]
 801e498:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e49c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e4a0:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 801e4a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801e4a6:	3310      	adds	r3, #16
 801e4a8:	3303      	adds	r3, #3
 801e4aa:	781a      	ldrb	r2, [r3, #0]
 801e4ac:	3201      	adds	r2, #1
 801e4ae:	b2d2      	uxtb	r2, r2
 801e4b0:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801e4b2:	e020      	b.n	801e4f6 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801e4b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4b8:	781b      	ldrb	r3, [r3, #0]
 801e4ba:	2b35      	cmp	r3, #53	@ 0x35
 801e4bc:	d111      	bne.n	801e4e2 <rx_dhcp_server+0xda>
 801e4be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4c2:	3301      	adds	r3, #1
 801e4c4:	781b      	ldrb	r3, [r3, #0]
 801e4c6:	2b01      	cmp	r3, #1
 801e4c8:	d10b      	bne.n	801e4e2 <rx_dhcp_server+0xda>
 801e4ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4ce:	3302      	adds	r3, #2
 801e4d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801e4d4:	429a      	cmp	r2, r3
 801e4d6:	d904      	bls.n	801e4e2 <rx_dhcp_server+0xda>
      op = p[2];
 801e4d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4dc:	789b      	ldrb	r3, [r3, #2]
 801e4de:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 801e4e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4e6:	3301      	adds	r3, #1
 801e4e8:	781b      	ldrb	r3, [r3, #0]
 801e4ea:	3302      	adds	r3, #2
 801e4ec:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801e4f0:	4413      	add	r3, r2
 801e4f2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801e4f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e4fa:	3301      	adds	r3, #1
 801e4fc:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801e500:	429a      	cmp	r2, r3
 801e502:	d904      	bls.n	801e50e <rx_dhcp_server+0x106>
 801e504:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801e508:	781b      	ldrb	r3, [r3, #0]
 801e50a:	2bff      	cmp	r3, #255	@ 0xff
 801e50c:	d1d2      	bne.n	801e4b4 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801e50e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801e512:	2b01      	cmp	r3, #1
 801e514:	d004      	beq.n	801e520 <rx_dhcp_server+0x118>
 801e516:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801e51a:	2b03      	cmp	r3, #3
 801e51c:	f040 815b 	bne.w	801e7d6 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 801e520:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801e524:	2b01      	cmp	r3, #1
 801e526:	d101      	bne.n	801e52c <rx_dhcp_server+0x124>
 801e528:	2302      	movs	r3, #2
 801e52a:	e000      	b.n	801e52e <rx_dhcp_server+0x126>
 801e52c:	2305      	movs	r3, #5
 801e52e:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 801e532:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e536:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e53a:	2235      	movs	r2, #53	@ 0x35
 801e53c:	701a      	strb	r2, [r3, #0]
 801e53e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e542:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e546:	2201      	movs	r2, #1
 801e548:	705a      	strb	r2, [r3, #1]
 801e54a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e54e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e552:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 801e556:	709a      	strb	r2, [r3, #2]
 801e558:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e55c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e560:	2201      	movs	r2, #1
 801e562:	70da      	strb	r2, [r3, #3]
 801e564:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e568:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e56c:	2204      	movs	r2, #4
 801e56e:	711a      	strb	r2, [r3, #4]
 801e570:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e574:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e578:	2200      	movs	r2, #0
 801e57a:	715a      	strb	r2, [r3, #5]
 801e57c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e580:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e584:	2200      	movs	r2, #0
 801e586:	719a      	strb	r2, [r3, #6]
 801e588:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e58c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e590:	2200      	movs	r2, #0
 801e592:	71da      	strb	r2, [r3, #7]
 801e594:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e598:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e59c:	2200      	movs	r2, #0
 801e59e:	721a      	strb	r2, [r3, #8]
 801e5a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5a8:	2236      	movs	r2, #54	@ 0x36
 801e5aa:	725a      	strb	r2, [r3, #9]
 801e5ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5b4:	2204      	movs	r2, #4
 801e5b6:	729a      	strb	r2, [r3, #10]
 801e5b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5c0:	2200      	movs	r2, #0
 801e5c2:	72da      	strb	r2, [r3, #11]
 801e5c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	731a      	strb	r2, [r3, #12]
 801e5d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5d8:	2200      	movs	r2, #0
 801e5da:	735a      	strb	r2, [r3, #13]
 801e5dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5e4:	2200      	movs	r2, #0
 801e5e6:	739a      	strb	r2, [r3, #14]
 801e5e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5f0:	220c      	movs	r2, #12
 801e5f2:	73da      	strb	r2, [r3, #15]
 801e5f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e5f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e5fc:	2203      	movs	r2, #3
 801e5fe:	741a      	strb	r2, [r3, #16]
 801e600:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e604:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e608:	226d      	movs	r2, #109	@ 0x6d
 801e60a:	745a      	strb	r2, [r3, #17]
 801e60c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e610:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e614:	2269      	movs	r2, #105	@ 0x69
 801e616:	749a      	strb	r2, [r3, #18]
 801e618:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e61c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e620:	2270      	movs	r2, #112	@ 0x70
 801e622:	74da      	strb	r2, [r3, #19]
 801e624:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e628:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e62c:	2233      	movs	r2, #51	@ 0x33
 801e62e:	751a      	strb	r2, [r3, #20]
 801e630:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e634:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e638:	2204      	movs	r2, #4
 801e63a:	755a      	strb	r2, [r3, #21]
 801e63c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e640:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e644:	22ff      	movs	r2, #255	@ 0xff
 801e646:	759a      	strb	r2, [r3, #22]
 801e648:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e64c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e650:	22ff      	movs	r2, #255	@ 0xff
 801e652:	75da      	strb	r2, [r3, #23]
 801e654:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e658:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e65c:	22ff      	movs	r2, #255	@ 0xff
 801e65e:	761a      	strb	r2, [r3, #24]
 801e660:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e664:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e668:	22ff      	movs	r2, #255	@ 0xff
 801e66a:	765a      	strb	r2, [r3, #25]
 801e66c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e670:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801e674:	22ff      	movs	r2, #255	@ 0xff
 801e676:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 801e678:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e67c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e684:	f103 011c 	add.w	r1, r3, #28
 801e688:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801e68c:	331c      	adds	r3, #28
 801e68e:	2206      	movs	r2, #6
 801e690:	4618      	mov	r0, r3
 801e692:	f004 fcc2 	bl	802301a <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 801e696:	f107 030c 	add.w	r3, r7, #12
 801e69a:	3305      	adds	r3, #5
 801e69c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801e6a0:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801e6a4:	6812      	ldr	r2, [r2, #0]
 801e6a6:	320c      	adds	r2, #12
 801e6a8:	6812      	ldr	r2, [r2, #0]
 801e6aa:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801e6ac:	f107 030c 	add.w	r3, r7, #12
 801e6b0:	330b      	adds	r3, #11
 801e6b2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801e6b6:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801e6ba:	6812      	ldr	r2, [r2, #0]
 801e6bc:	3208      	adds	r2, #8
 801e6be:	6812      	ldr	r2, [r2, #0]
 801e6c0:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 801e6c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e6c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e6ca:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801e6ce:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801e6d2:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 801e6d6:	4615      	mov	r5, r2
 801e6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e6dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e6e0:	c403      	stmia	r4!, {r0, r1}
 801e6e2:	8022      	strh	r2, [r4, #0]
 801e6e4:	3402      	adds	r4, #2
 801e6e6:	0c13      	lsrs	r3, r2, #16
 801e6e8:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801e6ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e6ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e6f6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801e6fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e6fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e702:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 801e706:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e70a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e712:	685a      	ldr	r2, [r3, #4]
 801e714:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e718:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e71c:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801e71e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e722:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	7f9b      	ldrb	r3, [r3, #30]
 801e72a:	2b00      	cmp	r3, #0
 801e72c:	d01c      	beq.n	801e768 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 801e72e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e732:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e736:	691a      	ldr	r2, [r3, #16]
 801e738:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e73c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801e744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e748:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e752:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e756:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	691b      	ldr	r3, [r3, #16]
 801e75e:	3306      	adds	r3, #6
 801e760:	2206      	movs	r2, #6
 801e762:	4619      	mov	r1, r3
 801e764:	f004 fc59 	bl	802301a <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 801e768:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e76c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	691b      	ldr	r3, [r3, #16]
 801e774:	1d9d      	adds	r5, r3, #6
 801e776:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e77a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	689e      	ldr	r6, [r3, #8]
 801e782:	2043      	movs	r0, #67	@ 0x43
 801e784:	f003 fa8d 	bl	8021ca2 <mg_ntohs>
 801e788:	4603      	mov	r3, r0
 801e78a:	4698      	mov	r8, r3
 801e78c:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801e790:	2b01      	cmp	r3, #1
 801e792:	d005      	beq.n	801e7a0 <rx_dhcp_server+0x398>
 801e794:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e798:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e79c:	691c      	ldr	r4, [r3, #16]
 801e79e:	e001      	b.n	801e7a4 <rx_dhcp_server+0x39c>
 801e7a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801e7a4:	2044      	movs	r0, #68	@ 0x44
 801e7a6:	f003 fa7c 	bl	8021ca2 <mg_ntohs>
 801e7aa:	4603      	mov	r3, r0
 801e7ac:	461a      	mov	r2, r3
 801e7ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e7b2:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 801e7b6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e7ba:	9303      	str	r3, [sp, #12]
 801e7bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801e7c0:	9302      	str	r3, [sp, #8]
 801e7c2:	9201      	str	r2, [sp, #4]
 801e7c4:	9400      	str	r4, [sp, #0]
 801e7c6:	4643      	mov	r3, r8
 801e7c8:	4632      	mov	r2, r6
 801e7ca:	4629      	mov	r1, r5
 801e7cc:	6800      	ldr	r0, [r0, #0]
 801e7ce:	f7ff f87d 	bl	801d8cc <tx_udp>
 801e7d2:	e000      	b.n	801e7d6 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e7d4:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 801e7d6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7e0:	08027ff0 	.word	0x08027ff0

0801e7e4 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e7e4:	b580      	push	{r7, lr}
 801e7e6:	b084      	sub	sp, #16
 801e7e8:	af00      	add	r7, sp, #0
 801e7ea:	6078      	str	r0, [r7, #4]
 801e7ec:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e7f2:	2201      	movs	r2, #1
 801e7f4:	6839      	ldr	r1, [r7, #0]
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f7ff fa46 	bl	801dc88 <getpeer>
 801e7fc:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	2b00      	cmp	r3, #0
 801e802:	d059      	beq.n	801e8b8 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 801e804:	683b      	ldr	r3, [r7, #0]
 801e806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e808:	881b      	ldrh	r3, [r3, #0]
 801e80a:	b29a      	uxth	r2, r3
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	331c      	adds	r3, #28
 801e814:	683a      	ldr	r2, [r7, #0]
 801e816:	69d2      	ldr	r2, [r2, #28]
 801e818:	320c      	adds	r2, #12
 801e81a:	6812      	ldr	r2, [r2, #0]
 801e81c:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	33b0      	adds	r3, #176	@ 0xb0
 801e822:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801e824:	68bb      	ldr	r3, [r7, #8]
 801e826:	f103 0018 	add.w	r0, r3, #24
 801e82a:	683b      	ldr	r3, [r7, #0]
 801e82c:	691b      	ldr	r3, [r3, #16]
 801e82e:	3306      	adds	r3, #6
 801e830:	2206      	movs	r2, #6
 801e832:	4619      	mov	r1, r3
 801e834:	f004 fbf1 	bl	802301a <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e83c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e840:	d304      	bcc.n	801e84c <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 801e842:	491f      	ldr	r1, [pc, #124]	@ (801e8c0 <rx_udp+0xdc>)
 801e844:	68f8      	ldr	r0, [r7, #12]
 801e846:	f7f6 fc49 	bl	80150dc <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801e84a:	e035      	b.n	801e8b8 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e854:	1ad2      	subs	r2, r2, r3
 801e856:	683b      	ldr	r3, [r7, #0]
 801e858:	68db      	ldr	r3, [r3, #12]
 801e85a:	429a      	cmp	r2, r3
 801e85c:	d212      	bcs.n	801e884 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e868:	683b      	ldr	r3, [r7, #0]
 801e86a:	68db      	ldr	r3, [r3, #12]
 801e86c:	4413      	add	r3, r2
 801e86e:	4619      	mov	r1, r3
 801e870:	f7fb f808 	bl	8019884 <mg_iobuf_resize>
 801e874:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801e876:	2b00      	cmp	r3, #0
 801e878:	d104      	bne.n	801e884 <rx_udp+0xa0>
      mg_error(c, "oom");
 801e87a:	4912      	ldr	r1, [pc, #72]	@ (801e8c4 <rx_udp+0xe0>)
 801e87c:	68f8      	ldr	r0, [r7, #12]
 801e87e:	f7f6 fc2d 	bl	80150dc <mg_error>
}
 801e882:	e019      	b.n	801e8b8 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e88c:	18d0      	adds	r0, r2, r3
 801e88e:	683b      	ldr	r3, [r7, #0]
 801e890:	6899      	ldr	r1, [r3, #8]
 801e892:	683b      	ldr	r3, [r7, #0]
 801e894:	68db      	ldr	r3, [r3, #12]
 801e896:	461a      	mov	r2, r3
 801e898:	f004 fbbf 	bl	802301a <memcpy>
      c->recv.len += pkt->pay.len;
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e8a0:	683b      	ldr	r3, [r7, #0]
 801e8a2:	68db      	ldr	r3, [r3, #12]
 801e8a4:	441a      	add	r2, r3
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801e8aa:	683b      	ldr	r3, [r7, #0]
 801e8ac:	330c      	adds	r3, #12
 801e8ae:	461a      	mov	r2, r3
 801e8b0:	2107      	movs	r1, #7
 801e8b2:	68f8      	ldr	r0, [r7, #12]
 801e8b4:	f7f6 fbf2 	bl	801509c <mg_call>
}
 801e8b8:	bf00      	nop
 801e8ba:	3710      	adds	r7, #16
 801e8bc:	46bd      	mov	sp, r7
 801e8be:	bd80      	pop	{r7, pc}
 801e8c0:	08028100 	.word	0x08028100
 801e8c4:	0802811c 	.word	0x0802811c

0801e8c8 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 801e8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8ca:	b091      	sub	sp, #68	@ 0x44
 801e8cc:	af06      	add	r7, sp, #24
 801e8ce:	60f8      	str	r0, [r7, #12]
 801e8d0:	60b9      	str	r1, [r7, #8]
 801e8d2:	607a      	str	r2, [r7, #4]
 801e8d4:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801e8d6:	68fb      	ldr	r3, [r7, #12]
 801e8d8:	689a      	ldr	r2, [r3, #8]
 801e8da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e8dc:	3314      	adds	r3, #20
 801e8de:	9301      	str	r3, [sp, #4]
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	9300      	str	r3, [sp, #0]
 801e8e4:	4613      	mov	r3, r2
 801e8e6:	2206      	movs	r2, #6
 801e8e8:	68b9      	ldr	r1, [r7, #8]
 801e8ea:	68f8      	ldr	r0, [r7, #12]
 801e8ec:	f7fe ff98 	bl	801d820 <tx_ip>
 801e8f0:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 801e8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8f4:	3314      	adds	r3, #20
 801e8f6:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 801e8f8:	2214      	movs	r2, #20
 801e8fa:	2100      	movs	r1, #0
 801e8fc:	6a38      	ldr	r0, [r7, #32]
 801e8fe:	f004 faab 	bl	8022e58 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801e902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e904:	2b00      	cmp	r3, #0
 801e906:	d009      	beq.n	801e91c <tx_tcp+0x54>
 801e908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d006      	beq.n	801e91c <tx_tcp+0x54>
 801e90e:	6a3b      	ldr	r3, [r7, #32]
 801e910:	3314      	adds	r3, #20
 801e912:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e914:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e916:	4618      	mov	r0, r3
 801e918:	f004 fa84 	bl	8022e24 <memmove>
  tcp->sport = sport;
 801e91c:	6a3b      	ldr	r3, [r7, #32]
 801e91e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e922:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801e924:	6a3b      	ldr	r3, [r7, #32]
 801e926:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e92a:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 801e92c:	6a3b      	ldr	r3, [r7, #32]
 801e92e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e930:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801e932:	6a3b      	ldr	r3, [r7, #32]
 801e934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e936:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 801e938:	6a3b      	ldr	r3, [r7, #32]
 801e93a:	78fa      	ldrb	r2, [r7, #3]
 801e93c:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 801e93e:	f241 7070 	movw	r0, #6000	@ 0x1770
 801e942:	f003 f9ae 	bl	8021ca2 <mg_ntohs>
 801e946:	4603      	mov	r3, r0
 801e948:	461a      	mov	r2, r3
 801e94a:	6a3b      	ldr	r3, [r7, #32]
 801e94c:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 801e94e:	6a3b      	ldr	r3, [r7, #32]
 801e950:	2250      	movs	r2, #80	@ 0x50
 801e952:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 801e954:	2300      	movs	r3, #0
 801e956:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 801e958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	3314      	adds	r3, #20
 801e95e:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 801e960:	2300      	movs	r3, #0
 801e962:	753b      	strb	r3, [r7, #20]
 801e964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e966:	7a5b      	ldrb	r3, [r3, #9]
 801e968:	757b      	strb	r3, [r7, #21]
 801e96a:	8b7b      	ldrh	r3, [r7, #26]
 801e96c:	0a1b      	lsrs	r3, r3, #8
 801e96e:	b29b      	uxth	r3, r3
 801e970:	b2db      	uxtb	r3, r3
 801e972:	75bb      	strb	r3, [r7, #22]
 801e974:	8b7b      	ldrh	r3, [r7, #26]
 801e976:	b2db      	uxtb	r3, r3
 801e978:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 801e97a:	8b7b      	ldrh	r3, [r7, #26]
 801e97c:	461a      	mov	r2, r3
 801e97e:	6a39      	ldr	r1, [r7, #32]
 801e980:	69f8      	ldr	r0, [r7, #28]
 801e982:	f7fe fd89 	bl	801d498 <csumup>
 801e986:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e98a:	330c      	adds	r3, #12
 801e98c:	2204      	movs	r2, #4
 801e98e:	4619      	mov	r1, r3
 801e990:	69f8      	ldr	r0, [r7, #28]
 801e992:	f7fe fd81 	bl	801d498 <csumup>
 801e996:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801e998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e99a:	3310      	adds	r3, #16
 801e99c:	2204      	movs	r2, #4
 801e99e:	4619      	mov	r1, r3
 801e9a0:	69f8      	ldr	r0, [r7, #28]
 801e9a2:	f7fe fd79 	bl	801d498 <csumup>
 801e9a6:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 801e9a8:	f107 0314 	add.w	r3, r7, #20
 801e9ac:	2204      	movs	r2, #4
 801e9ae:	4619      	mov	r1, r3
 801e9b0:	69f8      	ldr	r0, [r7, #28]
 801e9b2:	f7fe fd71 	bl	801d498 <csumup>
 801e9b6:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 801e9b8:	69f8      	ldr	r0, [r7, #28]
 801e9ba:	f7fe fd98 	bl	801d4ee <csumfin>
 801e9be:	4603      	mov	r3, r0
 801e9c0:	461a      	mov	r2, r3
 801e9c2:	6a3b      	ldr	r3, [r7, #32]
 801e9c4:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 801e9c6:	4b21      	ldr	r3, [pc, #132]	@ (801ea4c <tx_tcp+0x184>)
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	2b03      	cmp	r3, #3
 801e9cc:	dd2c      	ble.n	801ea28 <tx_tcp+0x160>
 801e9ce:	4b20      	ldr	r3, [pc, #128]	@ (801ea50 <tx_tcp+0x188>)
 801e9d0:	f241 5254 	movw	r2, #5460	@ 0x1554
 801e9d4:	491f      	ldr	r1, [pc, #124]	@ (801ea54 <tx_tcp+0x18c>)
 801e9d6:	2004      	movs	r0, #4
 801e9d8:	f7fb ff44 	bl	801a864 <mg_log_prefix>
 801e9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9de:	f103 050c 	add.w	r5, r3, #12
 801e9e2:	6a3b      	ldr	r3, [r7, #32]
 801e9e4:	881b      	ldrh	r3, [r3, #0]
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	4618      	mov	r0, r3
 801e9ea:	f003 f95a 	bl	8021ca2 <mg_ntohs>
 801e9ee:	4603      	mov	r3, r0
 801e9f0:	461e      	mov	r6, r3
 801e9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9f4:	f103 0410 	add.w	r4, r3, #16
 801e9f8:	6a3b      	ldr	r3, [r7, #32]
 801e9fa:	885b      	ldrh	r3, [r3, #2]
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	4618      	mov	r0, r3
 801ea00:	f003 f94f 	bl	8021ca2 <mg_ntohs>
 801ea04:	4603      	mov	r3, r0
 801ea06:	461a      	mov	r2, r3
 801ea08:	6a3b      	ldr	r3, [r7, #32]
 801ea0a:	7b5b      	ldrb	r3, [r3, #13]
 801ea0c:	4619      	mov	r1, r3
 801ea0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea10:	9304      	str	r3, [sp, #16]
 801ea12:	9103      	str	r1, [sp, #12]
 801ea14:	9202      	str	r2, [sp, #8]
 801ea16:	9401      	str	r4, [sp, #4]
 801ea18:	4b0f      	ldr	r3, [pc, #60]	@ (801ea58 <tx_tcp+0x190>)
 801ea1a:	9300      	str	r3, [sp, #0]
 801ea1c:	4633      	mov	r3, r6
 801ea1e:	462a      	mov	r2, r5
 801ea20:	490d      	ldr	r1, [pc, #52]	@ (801ea58 <tx_tcp+0x190>)
 801ea22:	480e      	ldr	r0, [pc, #56]	@ (801ea5c <tx_tcp+0x194>)
 801ea24:	f7fb ff6e 	bl	801a904 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 801ea28:	6a3b      	ldr	r3, [r7, #32]
 801ea2a:	f103 0214 	add.w	r2, r3, #20
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	695b      	ldr	r3, [r3, #20]
 801ea32:	1ad3      	subs	r3, r2, r3
 801ea34:	461a      	mov	r2, r3
 801ea36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea38:	4413      	add	r3, r2
 801ea3a:	4619      	mov	r1, r3
 801ea3c:	68f8      	ldr	r0, [r7, #12]
 801ea3e:	f7fe fde1 	bl	801d604 <ether_output>
 801ea42:	4603      	mov	r3, r0
}
 801ea44:	4618      	mov	r0, r3
 801ea46:	372c      	adds	r7, #44	@ 0x2c
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea4c:	20000294 	.word	0x20000294
 801ea50:	0802973c 	.word	0x0802973c
 801ea54:	08026838 	.word	0x08026838
 801ea58:	08020a55 	.word	0x08020a55
 801ea5c:	08028120 	.word	0x08028120

0801ea60 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 801ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea64:	b08c      	sub	sp, #48	@ 0x30
 801ea66:	af06      	add	r7, sp, #24
 801ea68:	60f8      	str	r0, [r7, #12]
 801ea6a:	60b9      	str	r1, [r7, #8]
 801ea6c:	603b      	str	r3, [r7, #0]
 801ea6e:	4613      	mov	r3, r2
 801ea70:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 801ea72:	68bb      	ldr	r3, [r7, #8]
 801ea74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea76:	7b5b      	ldrb	r3, [r3, #13]
 801ea78:	f003 0303 	and.w	r3, r3, #3
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	bf14      	ite	ne
 801ea80:	2301      	movne	r3, #1
 801ea82:	2300      	moveq	r3, #0
 801ea84:	b2db      	uxtb	r3, r3
 801ea86:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801ea88:	68bb      	ldr	r3, [r7, #8]
 801ea8a:	691b      	ldr	r3, [r3, #16]
 801ea8c:	1d9e      	adds	r6, r3, #6
 801ea8e:	68bb      	ldr	r3, [r7, #8]
 801ea90:	69db      	ldr	r3, [r3, #28]
 801ea92:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801ea96:	68bb      	ldr	r3, [r7, #8]
 801ea98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea9a:	885b      	ldrh	r3, [r3, #2]
 801ea9c:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801ea9e:	68bb      	ldr	r3, [r7, #8]
 801eaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801eaa2:	881b      	ldrh	r3, [r3, #0]
 801eaa4:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801eaa6:	68bb      	ldr	r3, [r7, #8]
 801eaa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eaaa:	685b      	ldr	r3, [r3, #4]
 801eaac:	4618      	mov	r0, r3
 801eaae:	f003 f8df 	bl	8021c70 <mg_ntohl>
 801eab2:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801eab4:	697b      	ldr	r3, [r7, #20]
 801eab6:	4413      	add	r3, r2
 801eab8:	4618      	mov	r0, r3
 801eaba:	f003 f8d9 	bl	8021c70 <mg_ntohl>
 801eabe:	4601      	mov	r1, r0
 801eac0:	79fa      	ldrb	r2, [r7, #7]
 801eac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eac4:	9305      	str	r3, [sp, #20]
 801eac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eac8:	9304      	str	r3, [sp, #16]
 801eaca:	9103      	str	r1, [sp, #12]
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	9302      	str	r3, [sp, #8]
 801ead0:	9501      	str	r5, [sp, #4]
 801ead2:	9400      	str	r4, [sp, #0]
 801ead4:	4613      	mov	r3, r2
 801ead6:	4642      	mov	r2, r8
 801ead8:	4631      	mov	r1, r6
 801eada:	68f8      	ldr	r0, [r7, #12]
 801eadc:	f7ff fef4 	bl	801e8c8 <tx_tcp>
 801eae0:	4603      	mov	r3, r0
                buf, len);
}
 801eae2:	4618      	mov	r0, r3
 801eae4:	3718      	adds	r7, #24
 801eae6:	46bd      	mov	sp, r7
 801eae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801eaec <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801eaec:	b5b0      	push	{r4, r5, r7, lr}
 801eaee:	b084      	sub	sp, #16
 801eaf0:	af00      	add	r7, sp, #0
 801eaf2:	6078      	str	r0, [r7, #4]
 801eaf4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	685b      	ldr	r3, [r3, #4]
 801eafa:	4618      	mov	r0, r3
 801eafc:	f7fe fa87 	bl	801d00e <mg_alloc_conn>
 801eb00:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801eb02:	68fb      	ldr	r3, [r7, #12]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d10f      	bne.n	801eb28 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 801eb08:	4b4e      	ldr	r3, [pc, #312]	@ (801ec44 <accept_conn+0x158>)
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	dd09      	ble.n	801eb24 <accept_conn+0x38>
 801eb10:	4b4d      	ldr	r3, [pc, #308]	@ (801ec48 <accept_conn+0x15c>)
 801eb12:	f241 5268 	movw	r2, #5480	@ 0x1568
 801eb16:	494d      	ldr	r1, [pc, #308]	@ (801ec4c <accept_conn+0x160>)
 801eb18:	2001      	movs	r0, #1
 801eb1a:	f7fb fea3 	bl	801a864 <mg_log_prefix>
 801eb1e:	484c      	ldr	r0, [pc, #304]	@ (801ec50 <accept_conn+0x164>)
 801eb20:	f7fb fef0 	bl	801a904 <mg_log>
    return NULL;
 801eb24:	2300      	movs	r3, #0
 801eb26:	e088      	b.n	801ec3a <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	33b0      	adds	r3, #176	@ 0xb0
 801eb2c:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 801eb2e:	683b      	ldr	r3, [r7, #0]
 801eb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb32:	689b      	ldr	r3, [r3, #8]
 801eb34:	4618      	mov	r0, r3
 801eb36:	f003 f89b 	bl	8021c70 <mg_ntohl>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	68bb      	ldr	r3, [r7, #8]
 801eb3e:	601a      	str	r2, [r3, #0]
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb44:	685b      	ldr	r3, [r3, #4]
 801eb46:	4618      	mov	r0, r3
 801eb48:	f003 f892 	bl	8021c70 <mg_ntohl>
 801eb4c:	4602      	mov	r2, r0
 801eb4e:	68bb      	ldr	r3, [r7, #8]
 801eb50:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801eb52:	68bb      	ldr	r3, [r7, #8]
 801eb54:	f103 0018 	add.w	r0, r3, #24
 801eb58:	683b      	ldr	r3, [r7, #0]
 801eb5a:	691b      	ldr	r3, [r3, #16]
 801eb5c:	3306      	adds	r3, #6
 801eb5e:	2206      	movs	r2, #6
 801eb60:	4619      	mov	r1, r3
 801eb62:	f004 fa5a 	bl	802301a <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 801eb66:	2100      	movs	r1, #0
 801eb68:	68f8      	ldr	r0, [r7, #12]
 801eb6a:	f7fe fcef 	bl	801d54c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	331c      	adds	r3, #28
 801eb72:	683a      	ldr	r2, [r7, #0]
 801eb74:	69d2      	ldr	r2, [r2, #28]
 801eb76:	320c      	adds	r2, #12
 801eb78:	6812      	ldr	r2, [r2, #0]
 801eb7a:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 801eb7c:	683b      	ldr	r3, [r7, #0]
 801eb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb80:	881b      	ldrh	r3, [r3, #0]
 801eb82:	b29a      	uxth	r2, r3
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 801eb88:	4b2e      	ldr	r3, [pc, #184]	@ (801ec44 <accept_conn+0x158>)
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	2b02      	cmp	r3, #2
 801eb8e:	dd0e      	ble.n	801ebae <accept_conn+0xc2>
 801eb90:	4b2d      	ldr	r3, [pc, #180]	@ (801ec48 <accept_conn+0x15c>)
 801eb92:	f241 5271 	movw	r2, #5489	@ 0x1571
 801eb96:	492d      	ldr	r1, [pc, #180]	@ (801ec4c <accept_conn+0x160>)
 801eb98:	2003      	movs	r0, #3
 801eb9a:	f7fb fe63 	bl	801a864 <mg_log_prefix>
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	331c      	adds	r3, #28
 801eba6:	4a2b      	ldr	r2, [pc, #172]	@ (801ec54 <accept_conn+0x168>)
 801eba8:	482b      	ldr	r0, [pc, #172]	@ (801ec58 <accept_conn+0x16c>)
 801ebaa:	f7fb feab 	bl	801a904 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	685b      	ldr	r3, [r3, #4]
 801ebb2:	681a      	ldr	r2, [r3, #0]
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	601a      	str	r2, [r3, #0]
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	685b      	ldr	r3, [r3, #4]
 801ebbc:	68fa      	ldr	r2, [r7, #12]
 801ebbe:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 801ebc0:	68fa      	ldr	r2, [r7, #12]
 801ebc2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801ebc6:	f043 0304 	orr.w	r3, r3, #4
 801ebca:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ebd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ebd8:	b2d9      	uxtb	r1, r3
 801ebda:	68fa      	ldr	r2, [r7, #12]
 801ebdc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ebe0:	f361 03c3 	bfi	r3, r1, #3, #1
 801ebe4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801ebf4:	68fa      	ldr	r2, [r7, #12]
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	f102 0408 	add.w	r4, r2, #8
 801ebfc:	f103 0508 	add.w	r5, r3, #8
 801ec00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ec02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ec04:	682b      	ldr	r3, [r5, #0]
 801ec06:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 801ec24:	2200      	movs	r2, #0
 801ec26:	2101      	movs	r1, #1
 801ec28:	68f8      	ldr	r0, [r7, #12]
 801ec2a:	f7f6 fa37 	bl	801509c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 801ec2e:	2200      	movs	r2, #0
 801ec30:	2105      	movs	r1, #5
 801ec32:	68f8      	ldr	r0, [r7, #12]
 801ec34:	f7f6 fa32 	bl	801509c <mg_call>
  return c;
 801ec38:	68fb      	ldr	r3, [r7, #12]
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	3710      	adds	r7, #16
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bdb0      	pop	{r4, r5, r7, pc}
 801ec42:	bf00      	nop
 801ec44:	20000294 	.word	0x20000294
 801ec48:	08029744 	.word	0x08029744
 801ec4c:	08026838 	.word	0x08026838
 801ec50:	08027d74 	.word	0x08027d74
 801ec54:	08020acd 	.word	0x08020acd
 801ec58:	08028144 	.word	0x08028144

0801ec5c <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801ec5c:	b580      	push	{r7, lr}
 801ec5e:	b08a      	sub	sp, #40	@ 0x28
 801ec60:	af00      	add	r7, sp, #0
 801ec62:	6078      	str	r0, [r7, #4]
 801ec64:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	685b      	ldr	r3, [r3, #4]
 801ec6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ec6c:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801ec6e:	230e      	movs	r3, #14
 801ec70:	623b      	str	r3, [r7, #32]
 801ec72:	2318      	movs	r3, #24
 801ec74:	61fb      	str	r3, [r7, #28]
 801ec76:	233c      	movs	r3, #60	@ 0x3c
 801ec78:	61bb      	str	r3, [r7, #24]
 801ec7a:	2308      	movs	r3, #8
 801ec7c:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801ec7e:	6a3a      	ldr	r2, [r7, #32]
 801ec80:	69fb      	ldr	r3, [r7, #28]
 801ec82:	441a      	add	r2, r3
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ec8a:	f003 0301 	and.w	r3, r3, #1
 801ec8e:	b2db      	uxtb	r3, r3
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d001      	beq.n	801ec98 <trim_len+0x3c>
 801ec94:	697b      	ldr	r3, [r7, #20]
 801ec96:	e000      	b.n	801ec9a <trim_len+0x3e>
 801ec98:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801ec9a:	4413      	add	r3, r2
 801ec9c:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801eca4:	f003 0301 	and.w	r3, r3, #1
 801eca8:	b2db      	uxtb	r3, r3
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d103      	bne.n	801ecb6 <trim_len+0x5a>
 801ecae:	693a      	ldr	r2, [r7, #16]
 801ecb0:	6a3b      	ldr	r3, [r7, #32]
 801ecb2:	1ad3      	subs	r3, r2, r3
 801ecb4:	e000      	b.n	801ecb8 <trim_len+0x5c>
 801ecb6:	2344      	movs	r3, #68	@ 0x44
 801ecb8:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801ecba:	683a      	ldr	r2, [r7, #0]
 801ecbc:	693b      	ldr	r3, [r7, #16]
 801ecbe:	441a      	add	r2, r3
 801ecc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecc2:	699b      	ldr	r3, [r3, #24]
 801ecc4:	429a      	cmp	r2, r3
 801ecc6:	d904      	bls.n	801ecd2 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 801ecc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecca:	699a      	ldr	r2, [r3, #24]
 801eccc:	693b      	ldr	r3, [r7, #16]
 801ecce:	1ad3      	subs	r3, r2, r3
 801ecd0:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 801ecd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801ecd8:	461a      	mov	r2, r3
 801ecda:	68fb      	ldr	r3, [r7, #12]
 801ecdc:	4293      	cmp	r3, r2
 801ecde:	d913      	bls.n	801ed08 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 801ece0:	4b20      	ldr	r3, [pc, #128]	@ (801ed64 <trim_len+0x108>)
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	dd0a      	ble.n	801ecfe <trim_len+0xa2>
 801ece8:	4b1f      	ldr	r3, [pc, #124]	@ (801ed68 <trim_len+0x10c>)
 801ecea:	f241 528c 	movw	r2, #5516	@ 0x158c
 801ecee:	491f      	ldr	r1, [pc, #124]	@ (801ed6c <trim_len+0x110>)
 801ecf0:	2001      	movs	r0, #1
 801ecf2:	f7fb fdb7 	bl	801a864 <mg_log_prefix>
 801ecf6:	68f9      	ldr	r1, [r7, #12]
 801ecf8:	481d      	ldr	r0, [pc, #116]	@ (801ed70 <trim_len+0x114>)
 801ecfa:	f7fb fe03 	bl	801a904 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801ecfe:	68fb      	ldr	r3, [r7, #12]
 801ed00:	b29a      	uxth	r2, r3
 801ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 801ed08:	683a      	ldr	r2, [r7, #0]
 801ed0a:	693b      	ldr	r3, [r7, #16]
 801ed0c:	441a      	add	r2, r3
 801ed0e:	6a3b      	ldr	r3, [r7, #32]
 801ed10:	1ad3      	subs	r3, r2, r3
 801ed12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed14:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 801ed18:	4293      	cmp	r3, r2
 801ed1a:	d91e      	bls.n	801ed5a <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 801ed1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801ed22:	461a      	mov	r2, r3
 801ed24:	693b      	ldr	r3, [r7, #16]
 801ed26:	1ad3      	subs	r3, r2, r3
 801ed28:	6a3a      	ldr	r2, [r7, #32]
 801ed2a:	4413      	add	r3, r2
 801ed2c:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ed34:	f003 0301 	and.w	r3, r3, #1
 801ed38:	b2db      	uxtb	r3, r3
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d00d      	beq.n	801ed5a <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801ed3e:	4b09      	ldr	r3, [pc, #36]	@ (801ed64 <trim_len+0x108>)
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	dd09      	ble.n	801ed5a <trim_len+0xfe>
 801ed46:	4b08      	ldr	r3, [pc, #32]	@ (801ed68 <trim_len+0x10c>)
 801ed48:	f241 5293 	movw	r2, #5523	@ 0x1593
 801ed4c:	4907      	ldr	r1, [pc, #28]	@ (801ed6c <trim_len+0x110>)
 801ed4e:	2001      	movs	r0, #1
 801ed50:	f7fb fd88 	bl	801a864 <mg_log_prefix>
 801ed54:	4807      	ldr	r0, [pc, #28]	@ (801ed74 <trim_len+0x118>)
 801ed56:	f7fb fdd5 	bl	801a904 <mg_log>
    }
  }

  return len;
 801ed5a:	683b      	ldr	r3, [r7, #0]
}
 801ed5c:	4618      	mov	r0, r3
 801ed5e:	3728      	adds	r7, #40	@ 0x28
 801ed60:	46bd      	mov	sp, r7
 801ed62:	bd80      	pop	{r7, pc}
 801ed64:	20000294 	.word	0x20000294
 801ed68:	08029750 	.word	0x08029750
 801ed6c:	08026838 	.word	0x08026838
 801ed70:	08028154 	.word	0x08028154
 801ed74:	08028180 	.word	0x08028180

0801ed78 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed7a:	b08f      	sub	sp, #60	@ 0x3c
 801ed7c:	af06      	add	r7, sp, #24
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	685b      	ldr	r3, [r3, #4]
 801ed88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ed8a:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801ed8c:	68fb      	ldr	r3, [r7, #12]
 801ed8e:	33b0      	adds	r3, #176	@ 0xb0
 801ed90:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 801ed92:	68fb      	ldr	r3, [r7, #12]
 801ed94:	331c      	adds	r3, #28
 801ed96:	681b      	ldr	r3, [r3, #0]
 801ed98:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801ed9a:	6879      	ldr	r1, [r7, #4]
 801ed9c:	68f8      	ldr	r0, [r7, #12]
 801ed9e:	f7ff ff5d 	bl	801ec5c <trim_len>
 801eda2:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801edaa:	f003 0301 	and.w	r3, r3, #1
 801edae:	b2db      	uxtb	r3, r3
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d015      	beq.n	801ede0 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 801edb4:	69bb      	ldr	r3, [r7, #24]
 801edb6:	f103 0118 	add.w	r1, r3, #24
 801edba:	69fb      	ldr	r3, [r7, #28]
 801edbc:	6898      	ldr	r0, [r3, #8]
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	8b1c      	ldrh	r4, [r3, #24]
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801edc6:	687a      	ldr	r2, [r7, #4]
 801edc8:	9203      	str	r2, [sp, #12]
 801edca:	68ba      	ldr	r2, [r7, #8]
 801edcc:	9202      	str	r2, [sp, #8]
 801edce:	9301      	str	r3, [sp, #4]
 801edd0:	697b      	ldr	r3, [r7, #20]
 801edd2:	9300      	str	r3, [sp, #0]
 801edd4:	4623      	mov	r3, r4
 801edd6:	4602      	mov	r2, r0
 801edd8:	69f8      	ldr	r0, [r7, #28]
 801edda:	f7fe fd77 	bl	801d8cc <tx_udp>
 801edde:	e03d      	b.n	801ee5c <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 801ede0:	69bb      	ldr	r3, [r7, #24]
 801ede2:	f103 0618 	add.w	r6, r3, #24
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	8b1c      	ldrh	r4, [r3, #24]
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801edee:	69bb      	ldr	r3, [r7, #24]
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	4618      	mov	r0, r3
 801edf4:	f002 ff3c 	bl	8021c70 <mg_ntohl>
 801edf8:	6038      	str	r0, [r7, #0]
 801edfa:	69bb      	ldr	r3, [r7, #24]
 801edfc:	685b      	ldr	r3, [r3, #4]
 801edfe:	4618      	mov	r0, r3
 801ee00:	f002 ff36 	bl	8021c70 <mg_ntohl>
 801ee04:	4602      	mov	r2, r0
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	9305      	str	r3, [sp, #20]
 801ee0a:	68bb      	ldr	r3, [r7, #8]
 801ee0c:	9304      	str	r3, [sp, #16]
 801ee0e:	9203      	str	r2, [sp, #12]
 801ee10:	683b      	ldr	r3, [r7, #0]
 801ee12:	9302      	str	r3, [sp, #8]
 801ee14:	9501      	str	r5, [sp, #4]
 801ee16:	9400      	str	r4, [sp, #0]
 801ee18:	2318      	movs	r3, #24
 801ee1a:	697a      	ldr	r2, [r7, #20]
 801ee1c:	4631      	mov	r1, r6
 801ee1e:	69f8      	ldr	r0, [r7, #28]
 801ee20:	f7ff fd52 	bl	801e8c8 <tx_tcp>
 801ee24:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801ee26:	693b      	ldr	r3, [r7, #16]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d102      	bne.n	801ee32 <mg_io_send+0xba>
      return MG_IO_WAIT;
 801ee2c:	f06f 0301 	mvn.w	r3, #1
 801ee30:	e015      	b.n	801ee5e <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 801ee32:	693b      	ldr	r3, [r7, #16]
 801ee34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ee38:	d102      	bne.n	801ee40 <mg_io_send+0xc8>
      return MG_IO_ERR;
 801ee3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee3e:	e00e      	b.n	801ee5e <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 801ee40:	69bb      	ldr	r3, [r7, #24]
 801ee42:	681a      	ldr	r2, [r3, #0]
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	441a      	add	r2, r3
 801ee48:	69bb      	ldr	r3, [r7, #24]
 801ee4a:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801ee4c:	69bb      	ldr	r3, [r7, #24]
 801ee4e:	7f9b      	ldrb	r3, [r3, #30]
 801ee50:	2b01      	cmp	r3, #1
 801ee52:	d103      	bne.n	801ee5c <mg_io_send+0xe4>
 801ee54:	2100      	movs	r1, #0
 801ee56:	68f8      	ldr	r0, [r7, #12]
 801ee58:	f7fe fb78 	bl	801d54c <settmout>
    }
  }
  return (long) len;
 801ee5c:	687b      	ldr	r3, [r7, #4]
}
 801ee5e:	4618      	mov	r0, r3
 801ee60:	3724      	adds	r7, #36	@ 0x24
 801ee62:	46bd      	mov	sp, r7
 801ee64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ee68 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 801ee68:	b580      	push	{r7, lr}
 801ee6a:	b084      	sub	sp, #16
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
 801ee70:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 801ee72:	683b      	ldr	r3, [r7, #0]
 801ee74:	681a      	ldr	r2, [r3, #0]
 801ee76:	683b      	ldr	r3, [r7, #0]
 801ee78:	689b      	ldr	r3, [r3, #8]
 801ee7a:	18d1      	adds	r1, r2, r3
 801ee7c:	683b      	ldr	r3, [r7, #0]
 801ee7e:	685a      	ldr	r2, [r3, #4]
 801ee80:	683b      	ldr	r3, [r7, #0]
 801ee82:	689b      	ldr	r3, [r3, #8]
 801ee84:	1ad3      	subs	r3, r2, r3
 801ee86:	461a      	mov	r2, r3
 801ee88:	6878      	ldr	r0, [r7, #4]
 801ee8a:	f002 fcc9 	bl	8021820 <mg_tls_recv>
 801ee8e:	4603      	mov	r3, r0
 801ee90:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 801ee92:	68fb      	ldr	r3, [r7, #12]
 801ee94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ee98:	d104      	bne.n	801eea4 <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 801ee9a:	490c      	ldr	r1, [pc, #48]	@ (801eecc <handle_tls_recv+0x64>)
 801ee9c:	6878      	ldr	r0, [r7, #4]
 801ee9e:	f7f6 f91d 	bl	80150dc <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 801eea2:	e00f      	b.n	801eec4 <handle_tls_recv+0x5c>
  } else if (n > 0) {
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	dd0c      	ble.n	801eec4 <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 801eeaa:	683b      	ldr	r3, [r7, #0]
 801eeac:	689b      	ldr	r3, [r3, #8]
 801eeae:	68fa      	ldr	r2, [r7, #12]
 801eeb0:	441a      	add	r2, r3
 801eeb2:	683b      	ldr	r3, [r7, #0]
 801eeb4:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 801eeb6:	f107 030c 	add.w	r3, r7, #12
 801eeba:	461a      	mov	r2, r3
 801eebc:	2107      	movs	r1, #7
 801eebe:	6878      	ldr	r0, [r7, #4]
 801eec0:	f7f6 f8ec 	bl	801509c <mg_call>
}
 801eec4:	bf00      	nop
 801eec6:	3710      	adds	r7, #16
 801eec8:	46bd      	mov	sp, r7
 801eeca:	bd80      	pop	{r7, pc}
 801eecc:	080281ac 	.word	0x080281ac

0801eed0 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801eed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eed4:	b090      	sub	sp, #64	@ 0x40
 801eed6:	af06      	add	r7, sp, #24
 801eed8:	60f8      	str	r0, [r7, #12]
 801eeda:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801eedc:	68fb      	ldr	r3, [r7, #12]
 801eede:	33b0      	adds	r3, #176	@ 0xb0
 801eee0:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801eee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801eeec:	b2db      	uxtb	r3, r3
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d002      	beq.n	801eef8 <read_conn+0x28>
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	3368      	adds	r3, #104	@ 0x68
 801eef6:	e001      	b.n	801eefc <read_conn+0x2c>
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	3338      	adds	r3, #56	@ 0x38
 801eefc:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801eefe:	68bb      	ldr	r3, [r7, #8]
 801ef00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef02:	685b      	ldr	r3, [r3, #4]
 801ef04:	4618      	mov	r0, r3
 801ef06:	f002 feb3 	bl	8021c70 <mg_ntohl>
 801ef0a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	331c      	adds	r3, #28
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 801ef14:	68bb      	ldr	r3, [r7, #8]
 801ef16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef18:	7b5b      	ldrb	r3, [r3, #13]
 801ef1a:	f003 0301 	and.w	r3, r3, #1
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d070      	beq.n	801f004 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801ef22:	2310      	movs	r3, #16
 801ef24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801ef28:	68bb      	ldr	r3, [r7, #8]
 801ef2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef2c:	685b      	ldr	r3, [r3, #4]
 801ef2e:	4618      	mov	r0, r3
 801ef30:	f002 fe9e 	bl	8021c70 <mg_ntohl>
 801ef34:	4602      	mov	r2, r0
 801ef36:	68bb      	ldr	r3, [r7, #8]
 801ef38:	68db      	ldr	r3, [r3, #12]
 801ef3a:	4413      	add	r3, r2
 801ef3c:	1c5a      	adds	r2, r3, #1
 801ef3e:	6a3b      	ldr	r3, [r7, #32]
 801ef40:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ef48:	f003 0310 	and.w	r3, r3, #16
 801ef4c:	b2db      	uxtb	r3, r3
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d01e      	beq.n	801ef90 <read_conn+0xc0>
 801ef52:	6a3b      	ldr	r3, [r7, #32]
 801ef54:	7f9b      	ldrb	r3, [r3, #30]
 801ef56:	2b04      	cmp	r3, #4
 801ef58:	d11a      	bne.n	801ef90 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801ef5a:	6a3b      	ldr	r3, [r7, #32]
 801ef5c:	681c      	ldr	r4, [r3, #0]
 801ef5e:	68bb      	ldr	r3, [r7, #8]
 801ef60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef62:	689b      	ldr	r3, [r3, #8]
 801ef64:	4618      	mov	r0, r3
 801ef66:	f002 fe83 	bl	8021c70 <mg_ntohl>
 801ef6a:	4603      	mov	r3, r0
 801ef6c:	429c      	cmp	r4, r3
 801ef6e:	d105      	bne.n	801ef7c <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 801ef70:	6a3b      	ldr	r3, [r7, #32]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	1c5a      	adds	r2, r3, #1
 801ef76:	6a3b      	ldr	r3, [r7, #32]
 801ef78:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801ef7a:	e01a      	b.n	801efb2 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 801ef7c:	68bb      	ldr	r3, [r7, #8]
 801ef7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef80:	689b      	ldr	r3, [r3, #8]
 801ef82:	4618      	mov	r0, r3
 801ef84:	f002 fe74 	bl	8021c70 <mg_ntohl>
 801ef88:	4602      	mov	r2, r0
 801ef8a:	6a3b      	ldr	r3, [r7, #32]
 801ef8c:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801ef8e:	e010      	b.n	801efb2 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 801ef90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ef94:	f043 0301 	orr.w	r3, r3, #1
 801ef98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801ef9c:	68fa      	ldr	r2, [r7, #12]
 801ef9e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801efa2:	f043 0310 	orr.w	r3, r3, #16
 801efa6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 801efaa:	2104      	movs	r1, #4
 801efac:	68f8      	ldr	r0, [r7, #12]
 801efae:	f7fe facd 	bl	801d54c <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	685b      	ldr	r3, [r3, #4]
 801efb6:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801efb8:	6a3b      	ldr	r3, [r7, #32]
 801efba:	f103 0818 	add.w	r8, r3, #24
 801efbe:	693b      	ldr	r3, [r7, #16]
 801efc0:	607b      	str	r3, [r7, #4]
 801efc2:	68fb      	ldr	r3, [r7, #12]
 801efc4:	8b1c      	ldrh	r4, [r3, #24]
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801efca:	6a3b      	ldr	r3, [r7, #32]
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	4618      	mov	r0, r3
 801efd0:	f002 fe4e 	bl	8021c70 <mg_ntohl>
 801efd4:	6038      	str	r0, [r7, #0]
 801efd6:	6a3b      	ldr	r3, [r7, #32]
 801efd8:	685b      	ldr	r3, [r3, #4]
 801efda:	4618      	mov	r0, r3
 801efdc:	f002 fe48 	bl	8021c70 <mg_ntohl>
 801efe0:	4602      	mov	r2, r0
 801efe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801efe6:	2100      	movs	r1, #0
 801efe8:	9105      	str	r1, [sp, #20]
 801efea:	4990      	ldr	r1, [pc, #576]	@ (801f22c <read_conn+0x35c>)
 801efec:	9104      	str	r1, [sp, #16]
 801efee:	9203      	str	r2, [sp, #12]
 801eff0:	6839      	ldr	r1, [r7, #0]
 801eff2:	9102      	str	r1, [sp, #8]
 801eff4:	9501      	str	r5, [sp, #4]
 801eff6:	9400      	str	r4, [sp, #0]
 801eff8:	687a      	ldr	r2, [r7, #4]
 801effa:	4641      	mov	r1, r8
 801effc:	4630      	mov	r0, r6
 801effe:	f7ff fc63 	bl	801e8c8 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801f002:	e173      	b.n	801f2ec <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 801f004:	68bb      	ldr	r3, [r7, #8]
 801f006:	68db      	ldr	r3, [r3, #12]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	f000 816f 	beq.w	801f2ec <read_conn+0x41c>
  } else if (seq != s->ack) {
 801f00e:	6a3b      	ldr	r3, [r7, #32]
 801f010:	685b      	ldr	r3, [r3, #4]
 801f012:	69ba      	ldr	r2, [r7, #24]
 801f014:	429a      	cmp	r2, r3
 801f016:	d059      	beq.n	801f0cc <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f018:	68bb      	ldr	r3, [r7, #8]
 801f01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f01c:	685b      	ldr	r3, [r3, #4]
 801f01e:	4618      	mov	r0, r3
 801f020:	f002 fe26 	bl	8021c70 <mg_ntohl>
 801f024:	4602      	mov	r2, r0
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	68db      	ldr	r3, [r3, #12]
 801f02a:	4413      	add	r3, r2
 801f02c:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801f02e:	6a3b      	ldr	r3, [r7, #32]
 801f030:	685b      	ldr	r3, [r3, #4]
 801f032:	697a      	ldr	r2, [r7, #20]
 801f034:	429a      	cmp	r2, r3
 801f036:	d10f      	bne.n	801f058 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 801f038:	4b7d      	ldr	r3, [pc, #500]	@ (801f230 <read_conn+0x360>)
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	2b03      	cmp	r3, #3
 801f03e:	f340 8155 	ble.w	801f2ec <read_conn+0x41c>
 801f042:	4b7c      	ldr	r3, [pc, #496]	@ (801f234 <read_conn+0x364>)
 801f044:	f241 52da 	movw	r2, #5594	@ 0x15da
 801f048:	497b      	ldr	r1, [pc, #492]	@ (801f238 <read_conn+0x368>)
 801f04a:	2004      	movs	r0, #4
 801f04c:	f7fb fc0a 	bl	801a864 <mg_log_prefix>
 801f050:	487a      	ldr	r0, [pc, #488]	@ (801f23c <read_conn+0x36c>)
 801f052:	f7fb fc57 	bl	801a904 <mg_log>
}
 801f056:	e149      	b.n	801f2ec <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 801f058:	4b75      	ldr	r3, [pc, #468]	@ (801f230 <read_conn+0x360>)
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	2b03      	cmp	r3, #3
 801f05e:	dd0d      	ble.n	801f07c <read_conn+0x1ac>
 801f060:	4b74      	ldr	r3, [pc, #464]	@ (801f234 <read_conn+0x364>)
 801f062:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 801f066:	4974      	ldr	r1, [pc, #464]	@ (801f238 <read_conn+0x368>)
 801f068:	2004      	movs	r0, #4
 801f06a:	f7fb fbfb 	bl	801a864 <mg_log_prefix>
 801f06e:	6a3b      	ldr	r3, [r7, #32]
 801f070:	685a      	ldr	r2, [r3, #4]
 801f072:	697b      	ldr	r3, [r7, #20]
 801f074:	69b9      	ldr	r1, [r7, #24]
 801f076:	4872      	ldr	r0, [pc, #456]	@ (801f240 <read_conn+0x370>)
 801f078:	f7fb fc44 	bl	801a904 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f07c:	68fb      	ldr	r3, [r7, #12]
 801f07e:	685b      	ldr	r3, [r3, #4]
 801f080:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f082:	6a3b      	ldr	r3, [r7, #32]
 801f084:	f103 0818 	add.w	r8, r3, #24
 801f088:	693b      	ldr	r3, [r7, #16]
 801f08a:	607b      	str	r3, [r7, #4]
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	8b1c      	ldrh	r4, [r3, #24]
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f094:	6a3b      	ldr	r3, [r7, #32]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	4618      	mov	r0, r3
 801f09a:	f002 fde9 	bl	8021c70 <mg_ntohl>
 801f09e:	6038      	str	r0, [r7, #0]
 801f0a0:	6a3b      	ldr	r3, [r7, #32]
 801f0a2:	685b      	ldr	r3, [r3, #4]
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	f002 fde3 	bl	8021c70 <mg_ntohl>
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	9205      	str	r2, [sp, #20]
 801f0b0:	4a5e      	ldr	r2, [pc, #376]	@ (801f22c <read_conn+0x35c>)
 801f0b2:	9204      	str	r2, [sp, #16]
 801f0b4:	9303      	str	r3, [sp, #12]
 801f0b6:	6839      	ldr	r1, [r7, #0]
 801f0b8:	9102      	str	r1, [sp, #8]
 801f0ba:	9501      	str	r5, [sp, #4]
 801f0bc:	9400      	str	r4, [sp, #0]
 801f0be:	2310      	movs	r3, #16
 801f0c0:	687a      	ldr	r2, [r7, #4]
 801f0c2:	4641      	mov	r1, r8
 801f0c4:	4630      	mov	r0, r6
 801f0c6:	f7ff fbff 	bl	801e8c8 <tx_tcp>
}
 801f0ca:	e10f      	b.n	801f2ec <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 801f0cc:	69fb      	ldr	r3, [r7, #28]
 801f0ce:	685a      	ldr	r2, [r3, #4]
 801f0d0:	69fb      	ldr	r3, [r7, #28]
 801f0d2:	689b      	ldr	r3, [r3, #8]
 801f0d4:	1ad2      	subs	r2, r2, r3
 801f0d6:	68bb      	ldr	r3, [r7, #8]
 801f0d8:	68db      	ldr	r3, [r3, #12]
 801f0da:	429a      	cmp	r2, r3
 801f0dc:	d210      	bcs.n	801f100 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f0de:	69fb      	ldr	r3, [r7, #28]
 801f0e0:	689a      	ldr	r2, [r3, #8]
 801f0e2:	68bb      	ldr	r3, [r7, #8]
 801f0e4:	68db      	ldr	r3, [r3, #12]
 801f0e6:	4413      	add	r3, r2
 801f0e8:	4619      	mov	r1, r3
 801f0ea:	69f8      	ldr	r0, [r7, #28]
 801f0ec:	f7fa fbca 	bl	8019884 <mg_iobuf_resize>
 801f0f0:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	d104      	bne.n	801f100 <read_conn+0x230>
    mg_error(c, "oom");
 801f0f6:	4953      	ldr	r1, [pc, #332]	@ (801f244 <read_conn+0x374>)
 801f0f8:	68f8      	ldr	r0, [r7, #12]
 801f0fa:	f7f5 ffef 	bl	80150dc <mg_error>
 801f0fe:	e0f5      	b.n	801f2ec <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801f100:	69fb      	ldr	r3, [r7, #28]
 801f102:	681a      	ldr	r2, [r3, #0]
 801f104:	69fb      	ldr	r3, [r7, #28]
 801f106:	689b      	ldr	r3, [r3, #8]
 801f108:	18d0      	adds	r0, r2, r3
 801f10a:	68bb      	ldr	r3, [r7, #8]
 801f10c:	6899      	ldr	r1, [r3, #8]
 801f10e:	68bb      	ldr	r3, [r7, #8]
 801f110:	68db      	ldr	r3, [r3, #12]
 801f112:	461a      	mov	r2, r3
 801f114:	f003 ff81 	bl	802301a <memcpy>
    io->len += pkt->pay.len;
 801f118:	69fb      	ldr	r3, [r7, #28]
 801f11a:	689a      	ldr	r2, [r3, #8]
 801f11c:	68bb      	ldr	r3, [r7, #8]
 801f11e:	68db      	ldr	r3, [r3, #12]
 801f120:	441a      	add	r2, r3
 801f122:	69fb      	ldr	r3, [r7, #28]
 801f124:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801f126:	4b42      	ldr	r3, [pc, #264]	@ (801f230 <read_conn+0x360>)
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	2b03      	cmp	r3, #3
 801f12c:	dd15      	ble.n	801f15a <read_conn+0x28a>
 801f12e:	4b41      	ldr	r3, [pc, #260]	@ (801f234 <read_conn+0x364>)
 801f130:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 801f134:	4940      	ldr	r1, [pc, #256]	@ (801f238 <read_conn+0x368>)
 801f136:	2004      	movs	r0, #4
 801f138:	f7fb fb94 	bl	801a864 <mg_log_prefix>
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801f140:	68bb      	ldr	r3, [r7, #8]
 801f142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f144:	685b      	ldr	r3, [r3, #4]
 801f146:	4618      	mov	r0, r3
 801f148:	f002 fd92 	bl	8021c70 <mg_ntohl>
 801f14c:	4602      	mov	r2, r0
 801f14e:	6a3b      	ldr	r3, [r7, #32]
 801f150:	685b      	ldr	r3, [r3, #4]
 801f152:	4621      	mov	r1, r4
 801f154:	483c      	ldr	r0, [pc, #240]	@ (801f248 <read_conn+0x378>)
 801f156:	f7fb fbd5 	bl	801a904 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f15a:	68bb      	ldr	r3, [r7, #8]
 801f15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f15e:	685b      	ldr	r3, [r3, #4]
 801f160:	4618      	mov	r0, r3
 801f162:	f002 fd85 	bl	8021c70 <mg_ntohl>
 801f166:	4602      	mov	r2, r0
 801f168:	68bb      	ldr	r3, [r7, #8]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	441a      	add	r2, r3
 801f16e:	6a3b      	ldr	r3, [r7, #32]
 801f170:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 801f172:	6a3b      	ldr	r3, [r7, #32]
 801f174:	695a      	ldr	r2, [r3, #20]
 801f176:	68bb      	ldr	r3, [r7, #8]
 801f178:	68db      	ldr	r3, [r3, #12]
 801f17a:	441a      	add	r2, r3
 801f17c:	6a3b      	ldr	r3, [r7, #32]
 801f17e:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 801f180:	6a3b      	ldr	r3, [r7, #32]
 801f182:	695b      	ldr	r3, [r3, #20]
 801f184:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801f188:	4293      	cmp	r3, r2
 801f18a:	d961      	bls.n	801f250 <read_conn+0x380>
 801f18c:	6a3b      	ldr	r3, [r7, #32]
 801f18e:	691a      	ldr	r2, [r3, #16]
 801f190:	6a3b      	ldr	r3, [r7, #32]
 801f192:	685b      	ldr	r3, [r3, #4]
 801f194:	429a      	cmp	r2, r3
 801f196:	d05b      	beq.n	801f250 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 801f198:	4b25      	ldr	r3, [pc, #148]	@ (801f230 <read_conn+0x360>)
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	2b03      	cmp	r3, #3
 801f19e:	dd0e      	ble.n	801f1be <read_conn+0x2ee>
 801f1a0:	4b24      	ldr	r3, [pc, #144]	@ (801f234 <read_conn+0x364>)
 801f1a2:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 801f1a6:	4924      	ldr	r1, [pc, #144]	@ (801f238 <read_conn+0x368>)
 801f1a8:	2004      	movs	r0, #4
 801f1aa:	f7fb fb5b 	bl	801a864 <mg_log_prefix>
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f1b2:	6a3b      	ldr	r3, [r7, #32]
 801f1b4:	691b      	ldr	r3, [r3, #16]
 801f1b6:	461a      	mov	r2, r3
 801f1b8:	4824      	ldr	r0, [pc, #144]	@ (801f24c <read_conn+0x37c>)
 801f1ba:	f7fb fba3 	bl	801a904 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	685b      	ldr	r3, [r3, #4]
 801f1c2:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f1c4:	6a3b      	ldr	r3, [r7, #32]
 801f1c6:	f103 0818 	add.w	r8, r3, #24
 801f1ca:	693b      	ldr	r3, [r7, #16]
 801f1cc:	607b      	str	r3, [r7, #4]
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	8b1c      	ldrh	r4, [r3, #24]
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f1d6:	6a3b      	ldr	r3, [r7, #32]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f002 fd48 	bl	8021c70 <mg_ntohl>
 801f1e0:	6038      	str	r0, [r7, #0]
 801f1e2:	6a3b      	ldr	r3, [r7, #32]
 801f1e4:	685b      	ldr	r3, [r3, #4]
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f002 fd42 	bl	8021c70 <mg_ntohl>
 801f1ec:	4603      	mov	r3, r0
 801f1ee:	2200      	movs	r2, #0
 801f1f0:	9205      	str	r2, [sp, #20]
 801f1f2:	2200      	movs	r2, #0
 801f1f4:	9204      	str	r2, [sp, #16]
 801f1f6:	9303      	str	r3, [sp, #12]
 801f1f8:	6839      	ldr	r1, [r7, #0]
 801f1fa:	9102      	str	r1, [sp, #8]
 801f1fc:	9501      	str	r5, [sp, #4]
 801f1fe:	9400      	str	r4, [sp, #0]
 801f200:	2310      	movs	r3, #16
 801f202:	687a      	ldr	r2, [r7, #4]
 801f204:	4641      	mov	r1, r8
 801f206:	4630      	mov	r0, r6
 801f208:	f7ff fb5e 	bl	801e8c8 <tx_tcp>
      s->unacked = 0;
 801f20c:	6a3b      	ldr	r3, [r7, #32]
 801f20e:	2200      	movs	r2, #0
 801f210:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 801f212:	6a3b      	ldr	r3, [r7, #32]
 801f214:	685a      	ldr	r2, [r3, #4]
 801f216:	6a3b      	ldr	r3, [r7, #32]
 801f218:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f21a:	6a3b      	ldr	r3, [r7, #32]
 801f21c:	7f9b      	ldrb	r3, [r3, #30]
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d01e      	beq.n	801f260 <read_conn+0x390>
 801f222:	2100      	movs	r1, #0
 801f224:	68f8      	ldr	r0, [r7, #12]
 801f226:	f7fe f991 	bl	801d54c <settmout>
 801f22a:	e019      	b.n	801f260 <read_conn+0x390>
 801f22c:	08026f18 	.word	0x08026f18
 801f230:	20000294 	.word	0x20000294
 801f234:	0802975c 	.word	0x0802975c
 801f238:	08026838 	.word	0x08026838
 801f23c:	080281bc 	.word	0x080281bc
 801f240:	080281d4 	.word	0x080281d4
 801f244:	0802811c 	.word	0x0802811c
 801f248:	080281ec 	.word	0x080281ec
 801f24c:	08028200 	.word	0x08028200
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801f250:	6a3b      	ldr	r3, [r7, #32]
 801f252:	7f9b      	ldrb	r3, [r3, #30]
 801f254:	2b01      	cmp	r3, #1
 801f256:	d003      	beq.n	801f260 <read_conn+0x390>
 801f258:	2101      	movs	r1, #1
 801f25a:	68f8      	ldr	r0, [r7, #12]
 801f25c:	f7fe f976 	bl	801d54c <settmout>
    if (c->is_tls && c->is_tls_hs) {
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f26a:	b2db      	uxtb	r3, r3
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d00b      	beq.n	801f288 <read_conn+0x3b8>
 801f270:	68fb      	ldr	r3, [r7, #12]
 801f272:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f276:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f27a:	b2db      	uxtb	r3, r3
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d003      	beq.n	801f288 <read_conn+0x3b8>
      mg_tls_handshake(c);
 801f280:	68f8      	ldr	r0, [r7, #12]
 801f282:	f002 fab9 	bl	80217f8 <mg_tls_handshake>
 801f286:	e031      	b.n	801f2ec <read_conn+0x41c>
    } else if (c->is_tls) {
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f28e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f292:	b2db      	uxtb	r3, r3
 801f294:	2b00      	cmp	r3, #0
 801f296:	d021      	beq.n	801f2dc <read_conn+0x40c>
      io = &c->recv;
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	3338      	adds	r3, #56	@ 0x38
 801f29c:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 801f29e:	69fb      	ldr	r3, [r7, #28]
 801f2a0:	685a      	ldr	r2, [r3, #4]
 801f2a2:	69fb      	ldr	r3, [r7, #28]
 801f2a4:	689b      	ldr	r3, [r3, #8]
 801f2a6:	1ad2      	subs	r2, r2, r3
 801f2a8:	68bb      	ldr	r3, [r7, #8]
 801f2aa:	68db      	ldr	r3, [r3, #12]
 801f2ac:	429a      	cmp	r2, r3
 801f2ae:	d210      	bcs.n	801f2d2 <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f2b0:	69fb      	ldr	r3, [r7, #28]
 801f2b2:	689a      	ldr	r2, [r3, #8]
 801f2b4:	68bb      	ldr	r3, [r7, #8]
 801f2b6:	68db      	ldr	r3, [r3, #12]
 801f2b8:	4413      	add	r3, r2
 801f2ba:	4619      	mov	r1, r3
 801f2bc:	69f8      	ldr	r0, [r7, #28]
 801f2be:	f7fa fae1 	bl	8019884 <mg_iobuf_resize>
 801f2c2:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d104      	bne.n	801f2d2 <read_conn+0x402>
        mg_error(c, "oom");
 801f2c8:	490b      	ldr	r1, [pc, #44]	@ (801f2f8 <read_conn+0x428>)
 801f2ca:	68f8      	ldr	r0, [r7, #12]
 801f2cc:	f7f5 ff06 	bl	80150dc <mg_error>
 801f2d0:	e00c      	b.n	801f2ec <read_conn+0x41c>
        handle_tls_recv(c, io);
 801f2d2:	69f9      	ldr	r1, [r7, #28]
 801f2d4:	68f8      	ldr	r0, [r7, #12]
 801f2d6:	f7ff fdc7 	bl	801ee68 <handle_tls_recv>
}
 801f2da:	e007      	b.n	801f2ec <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801f2dc:	68bb      	ldr	r3, [r7, #8]
 801f2de:	330c      	adds	r3, #12
 801f2e0:	461a      	mov	r2, r3
 801f2e2:	2107      	movs	r1, #7
 801f2e4:	68f8      	ldr	r0, [r7, #12]
 801f2e6:	f7f5 fed9 	bl	801509c <mg_call>
}
 801f2ea:	e7ff      	b.n	801f2ec <read_conn+0x41c>
 801f2ec:	bf00      	nop
 801f2ee:	3728      	adds	r7, #40	@ 0x28
 801f2f0:	46bd      	mov	sp, r7
 801f2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2f6:	bf00      	nop
 801f2f8:	0802811c 	.word	0x0802811c

0801f2fc <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f2fc:	b590      	push	{r4, r7, lr}
 801f2fe:	b089      	sub	sp, #36	@ 0x24
 801f300:	af02      	add	r7, sp, #8
 801f302:	6078      	str	r0, [r7, #4]
 801f304:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f30a:	2200      	movs	r2, #0
 801f30c:	6839      	ldr	r1, [r7, #0]
 801f30e:	4618      	mov	r0, r3
 801f310:	f7fe fcba 	bl	801dc88 <getpeer>
 801f314:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801f316:	697b      	ldr	r3, [r7, #20]
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d002      	beq.n	801f322 <rx_tcp+0x26>
 801f31c:	697b      	ldr	r3, [r7, #20]
 801f31e:	33b0      	adds	r3, #176	@ 0xb0
 801f320:	e000      	b.n	801f324 <rx_tcp+0x28>
 801f322:	2300      	movs	r3, #0
 801f324:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801f326:	697b      	ldr	r3, [r7, #20]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d048      	beq.n	801f3be <rx_tcp+0xc2>
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f332:	f003 0320 	and.w	r3, r3, #32
 801f336:	b2db      	uxtb	r3, r3
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d040      	beq.n	801f3be <rx_tcp+0xc2>
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f340:	7b5b      	ldrb	r3, [r3, #13]
 801f342:	2b12      	cmp	r3, #18
 801f344:	d13b      	bne.n	801f3be <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801f346:	683b      	ldr	r3, [r7, #0]
 801f348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f34a:	689b      	ldr	r3, [r3, #8]
 801f34c:	4618      	mov	r0, r3
 801f34e:	f002 fc8f 	bl	8021c70 <mg_ntohl>
 801f352:	4602      	mov	r2, r0
 801f354:	693b      	ldr	r3, [r7, #16]
 801f356:	601a      	str	r2, [r3, #0]
 801f358:	683b      	ldr	r3, [r7, #0]
 801f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f35c:	685b      	ldr	r3, [r3, #4]
 801f35e:	4618      	mov	r0, r3
 801f360:	f002 fc86 	bl	8021c70 <mg_ntohl>
 801f364:	4603      	mov	r3, r0
 801f366:	1c5a      	adds	r2, r3, #1
 801f368:	693b      	ldr	r3, [r7, #16]
 801f36a:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801f36c:	683b      	ldr	r3, [r7, #0]
 801f36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f370:	689b      	ldr	r3, [r3, #8]
 801f372:	2200      	movs	r2, #0
 801f374:	9201      	str	r2, [sp, #4]
 801f376:	2200      	movs	r2, #0
 801f378:	9200      	str	r2, [sp, #0]
 801f37a:	2210      	movs	r2, #16
 801f37c:	6839      	ldr	r1, [r7, #0]
 801f37e:	6878      	ldr	r0, [r7, #4]
 801f380:	f7ff fb6e 	bl	801ea60 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801f384:	697a      	ldr	r2, [r7, #20]
 801f386:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f38a:	f36f 1345 	bfc	r3, #5, #1
 801f38e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801f392:	2100      	movs	r1, #0
 801f394:	6978      	ldr	r0, [r7, #20]
 801f396:	f7fe f8d9 	bl	801d54c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801f39a:	2200      	movs	r2, #0
 801f39c:	2104      	movs	r1, #4
 801f39e:	6978      	ldr	r0, [r7, #20]
 801f3a0:	f7f5 fe7c 	bl	801509c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801f3a4:	697b      	ldr	r3, [r7, #20]
 801f3a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f3aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f3ae:	b2db      	uxtb	r3, r3
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	f000 80cd 	beq.w	801f550 <rx_tcp+0x254>
 801f3b6:	6978      	ldr	r0, [r7, #20]
 801f3b8:	f002 fa1e 	bl	80217f8 <mg_tls_handshake>
 801f3bc:	e0c8      	b.n	801f550 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 801f3be:	697b      	ldr	r3, [r7, #20]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d019      	beq.n	801f3f8 <rx_tcp+0xfc>
 801f3c4:	697b      	ldr	r3, [r7, #20]
 801f3c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f3ca:	f003 0320 	and.w	r3, r3, #32
 801f3ce:	b2db      	uxtb	r3, r3
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d011      	beq.n	801f3f8 <rx_tcp+0xfc>
 801f3d4:	683b      	ldr	r3, [r7, #0]
 801f3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3d8:	7b5b      	ldrb	r3, [r3, #13]
 801f3da:	2b10      	cmp	r3, #16
 801f3dc:	d00c      	beq.n	801f3f8 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f3de:	683b      	ldr	r3, [r7, #0]
 801f3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3e2:	689b      	ldr	r3, [r3, #8]
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	9201      	str	r2, [sp, #4]
 801f3e8:	2200      	movs	r2, #0
 801f3ea:	9200      	str	r2, [sp, #0]
 801f3ec:	2214      	movs	r2, #20
 801f3ee:	6839      	ldr	r1, [r7, #0]
 801f3f0:	6878      	ldr	r0, [r7, #4]
 801f3f2:	f7ff fb35 	bl	801ea60 <tx_tcp_pkt>
 801f3f6:	e0ab      	b.n	801f550 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801f3f8:	697b      	ldr	r3, [r7, #20]
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d00b      	beq.n	801f416 <rx_tcp+0x11a>
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f402:	7b5b      	ldrb	r3, [r3, #13]
 801f404:	f003 0304 	and.w	r3, r3, #4
 801f408:	2b00      	cmp	r3, #0
 801f40a:	d004      	beq.n	801f416 <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801f40c:	4952      	ldr	r1, [pc, #328]	@ (801f558 <rx_tcp+0x25c>)
 801f40e:	6978      	ldr	r0, [r7, #20]
 801f410:	f7f5 fe64 	bl	80150dc <mg_error>
 801f414:	e09c      	b.n	801f550 <rx_tcp+0x254>
  } else if (c != NULL) {
 801f416:	697b      	ldr	r3, [r7, #20]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d00f      	beq.n	801f43c <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801f41c:	693b      	ldr	r3, [r7, #16]
 801f41e:	2200      	movs	r2, #0
 801f420:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801f422:	693b      	ldr	r3, [r7, #16]
 801f424:	7f9b      	ldrb	r3, [r3, #30]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d103      	bne.n	801f432 <rx_tcp+0x136>
      settmout(c,
 801f42a:	2100      	movs	r1, #0
 801f42c:	6978      	ldr	r0, [r7, #20]
 801f42e:	f7fe f88d 	bl	801d54c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801f432:	6839      	ldr	r1, [r7, #0]
 801f434:	6978      	ldr	r0, [r7, #20]
 801f436:	f7ff fd4b 	bl	801eed0 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801f43a:	e089      	b.n	801f550 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f440:	2201      	movs	r2, #1
 801f442:	6839      	ldr	r1, [r7, #0]
 801f444:	4618      	mov	r0, r3
 801f446:	f7fe fc1f 	bl	801dc88 <getpeer>
 801f44a:	6178      	str	r0, [r7, #20]
 801f44c:	697b      	ldr	r3, [r7, #20]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d10c      	bne.n	801f46c <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f456:	689b      	ldr	r3, [r3, #8]
 801f458:	2200      	movs	r2, #0
 801f45a:	9201      	str	r2, [sp, #4]
 801f45c:	2200      	movs	r2, #0
 801f45e:	9200      	str	r2, [sp, #0]
 801f460:	2214      	movs	r2, #20
 801f462:	6839      	ldr	r1, [r7, #0]
 801f464:	6878      	ldr	r0, [r7, #4]
 801f466:	f7ff fafb 	bl	801ea60 <tx_tcp_pkt>
}
 801f46a:	e071      	b.n	801f550 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 801f46c:	683b      	ldr	r3, [r7, #0]
 801f46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f470:	7b5b      	ldrb	r3, [r3, #13]
 801f472:	f003 0304 	and.w	r3, r3, #4
 801f476:	2b00      	cmp	r3, #0
 801f478:	d00c      	beq.n	801f494 <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801f47a:	697b      	ldr	r3, [r7, #20]
 801f47c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f480:	f003 0304 	and.w	r3, r3, #4
 801f484:	b2db      	uxtb	r3, r3
 801f486:	2b00      	cmp	r3, #0
 801f488:	d062      	beq.n	801f550 <rx_tcp+0x254>
 801f48a:	4933      	ldr	r1, [pc, #204]	@ (801f558 <rx_tcp+0x25c>)
 801f48c:	6978      	ldr	r0, [r7, #20]
 801f48e:	f7f5 fe25 	bl	80150dc <mg_error>
}
 801f492:	e05d      	b.n	801f550 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 801f494:	683b      	ldr	r3, [r7, #0]
 801f496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f498:	7b5b      	ldrb	r3, [r3, #13]
 801f49a:	f003 0302 	and.w	r3, r3, #2
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d016      	beq.n	801f4d0 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801f4a2:	683b      	ldr	r3, [r7, #0]
 801f4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4a6:	881b      	ldrh	r3, [r3, #0]
 801f4a8:	b29b      	uxth	r3, r3
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	f002 fbf9 	bl	8021ca2 <mg_ntohs>
 801f4b0:	4603      	mov	r3, r0
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	f002 fbdc 	bl	8021c70 <mg_ntohl>
 801f4b8:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	9301      	str	r3, [sp, #4]
 801f4be:	2300      	movs	r3, #0
 801f4c0:	9300      	str	r3, [sp, #0]
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	2212      	movs	r2, #18
 801f4c6:	6839      	ldr	r1, [r7, #0]
 801f4c8:	6878      	ldr	r0, [r7, #4]
 801f4ca:	f7ff fac9 	bl	801ea60 <tx_tcp_pkt>
}
 801f4ce:	e03f      	b.n	801f550 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 801f4d0:	683b      	ldr	r3, [r7, #0]
 801f4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4d4:	7b5b      	ldrb	r3, [r3, #13]
 801f4d6:	f003 0301 	and.w	r3, r3, #1
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d00c      	beq.n	801f4f8 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f4de:	683b      	ldr	r3, [r7, #0]
 801f4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4e2:	689b      	ldr	r3, [r3, #8]
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	9201      	str	r2, [sp, #4]
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	9200      	str	r2, [sp, #0]
 801f4ec:	2211      	movs	r2, #17
 801f4ee:	6839      	ldr	r1, [r7, #0]
 801f4f0:	6878      	ldr	r0, [r7, #4]
 801f4f2:	f7ff fab5 	bl	801ea60 <tx_tcp_pkt>
}
 801f4f6:	e02b      	b.n	801f550 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 801f4f8:	683b      	ldr	r3, [r7, #0]
 801f4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4fc:	689b      	ldr	r3, [r3, #8]
 801f4fe:	4618      	mov	r0, r3
 801f500:	f002 fbb6 	bl	8021c70 <mg_ntohl>
 801f504:	4604      	mov	r4, r0
 801f506:	683b      	ldr	r3, [r7, #0]
 801f508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f50a:	881b      	ldrh	r3, [r3, #0]
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	4618      	mov	r0, r3
 801f510:	f002 fbc7 	bl	8021ca2 <mg_ntohs>
 801f514:	4603      	mov	r3, r0
 801f516:	3301      	adds	r3, #1
 801f518:	429c      	cmp	r4, r3
 801f51a:	d104      	bne.n	801f526 <rx_tcp+0x22a>
    accept_conn(c, pkt);
 801f51c:	6839      	ldr	r1, [r7, #0]
 801f51e:	6978      	ldr	r0, [r7, #20]
 801f520:	f7ff fae4 	bl	801eaec <accept_conn>
}
 801f524:	e014      	b.n	801f550 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f52c:	f003 0304 	and.w	r3, r3, #4
 801f530:	b2db      	uxtb	r3, r3
 801f532:	2b00      	cmp	r3, #0
 801f534:	d10c      	bne.n	801f550 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f53a:	689b      	ldr	r3, [r3, #8]
 801f53c:	2200      	movs	r2, #0
 801f53e:	9201      	str	r2, [sp, #4]
 801f540:	2200      	movs	r2, #0
 801f542:	9200      	str	r2, [sp, #0]
 801f544:	2214      	movs	r2, #20
 801f546:	6839      	ldr	r1, [r7, #0]
 801f548:	6878      	ldr	r0, [r7, #4]
 801f54a:	f7ff fa89 	bl	801ea60 <tx_tcp_pkt>
}
 801f54e:	e7ff      	b.n	801f550 <rx_tcp+0x254>
 801f550:	bf00      	nop
 801f552:	371c      	adds	r7, #28
 801f554:	46bd      	mov	sp, r7
 801f556:	bd90      	pop	{r4, r7, pc}
 801f558:	08028210 	.word	0x08028210

0801f55c <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f55e:	b089      	sub	sp, #36	@ 0x24
 801f560:	af04      	add	r7, sp, #16
 801f562:	6078      	str	r0, [r7, #4]
 801f564:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801f566:	683b      	ldr	r3, [r7, #0]
 801f568:	69db      	ldr	r3, [r3, #28]
 801f56a:	88db      	ldrh	r3, [r3, #6]
 801f56c:	b29b      	uxth	r3, r3
 801f56e:	f003 0320 	and.w	r3, r3, #32
 801f572:	2b00      	cmp	r3, #0
 801f574:	d109      	bne.n	801f58a <rx_ip+0x2e>
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	69db      	ldr	r3, [r3, #28]
 801f57a:	88db      	ldrh	r3, [r3, #6]
 801f57c:	b29b      	uxth	r3, r3
 801f57e:	461a      	mov	r2, r3
 801f580:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 801f584:	4013      	ands	r3, r2
 801f586:	2b00      	cmp	r3, #0
 801f588:	d026      	beq.n	801f5d8 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 801f58a:	683b      	ldr	r3, [r7, #0]
 801f58c:	69db      	ldr	r3, [r3, #28]
 801f58e:	7a5b      	ldrb	r3, [r3, #9]
 801f590:	2b11      	cmp	r3, #17
 801f592:	d105      	bne.n	801f5a0 <rx_ip+0x44>
 801f594:	683b      	ldr	r3, [r7, #0]
 801f596:	69db      	ldr	r3, [r3, #28]
 801f598:	f103 0214 	add.w	r2, r3, #20
 801f59c:	683b      	ldr	r3, [r7, #0]
 801f59e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801f5a0:	683b      	ldr	r3, [r7, #0]
 801f5a2:	69db      	ldr	r3, [r3, #28]
 801f5a4:	7a5b      	ldrb	r3, [r3, #9]
 801f5a6:	2b06      	cmp	r3, #6
 801f5a8:	d105      	bne.n	801f5b6 <rx_ip+0x5a>
 801f5aa:	683b      	ldr	r3, [r7, #0]
 801f5ac:	69db      	ldr	r3, [r3, #28]
 801f5ae:	f103 0214 	add.w	r2, r3, #20
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f5ba:	2200      	movs	r2, #0
 801f5bc:	6839      	ldr	r1, [r7, #0]
 801f5be:	4618      	mov	r0, r3
 801f5c0:	f7fe fb62 	bl	801dc88 <getpeer>
 801f5c4:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 801f5c6:	68bb      	ldr	r3, [r7, #8]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	f000 811b 	beq.w	801f804 <rx_ip+0x2a8>
 801f5ce:	4992      	ldr	r1, [pc, #584]	@ (801f818 <rx_ip+0x2bc>)
 801f5d0:	68b8      	ldr	r0, [r7, #8]
 801f5d2:	f7f5 fd83 	bl	80150dc <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801f5d6:	e115      	b.n	801f804 <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 801f5d8:	683b      	ldr	r3, [r7, #0]
 801f5da:	69db      	ldr	r3, [r3, #28]
 801f5dc:	7a5b      	ldrb	r3, [r3, #9]
 801f5de:	2b01      	cmp	r3, #1
 801f5e0:	d116      	bne.n	801f610 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	69db      	ldr	r3, [r3, #28]
 801f5e6:	f103 0214 	add.w	r2, r3, #20
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801f5ee:	683b      	ldr	r3, [r7, #0]
 801f5f0:	68db      	ldr	r3, [r3, #12]
 801f5f2:	2b03      	cmp	r3, #3
 801f5f4:	f240 8108 	bls.w	801f808 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 801f5f8:	683b      	ldr	r3, [r7, #0]
 801f5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f5fc:	3304      	adds	r3, #4
 801f5fe:	4619      	mov	r1, r3
 801f600:	6838      	ldr	r0, [r7, #0]
 801f602:	f7fd ff2b 	bl	801d45c <mkpay>
    rx_icmp(ifp, pkt);
 801f606:	6839      	ldr	r1, [r7, #0]
 801f608:	6878      	ldr	r0, [r7, #4]
 801f60a:	f7fe fcb9 	bl	801df80 <rx_icmp>
 801f60e:	e100      	b.n	801f812 <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 801f610:	683b      	ldr	r3, [r7, #0]
 801f612:	69db      	ldr	r3, [r3, #28]
 801f614:	7a5b      	ldrb	r3, [r3, #9]
 801f616:	2b11      	cmp	r3, #17
 801f618:	f040 808b 	bne.w	801f732 <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801f61c:	683b      	ldr	r3, [r7, #0]
 801f61e:	69db      	ldr	r3, [r3, #28]
 801f620:	f103 0214 	add.w	r2, r3, #20
 801f624:	683b      	ldr	r3, [r7, #0]
 801f626:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801f628:	683b      	ldr	r3, [r7, #0]
 801f62a:	68db      	ldr	r3, [r3, #12]
 801f62c:	2b07      	cmp	r3, #7
 801f62e:	f240 80ed 	bls.w	801f80c <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f636:	3308      	adds	r3, #8
 801f638:	4619      	mov	r1, r3
 801f63a:	6838      	ldr	r0, [r7, #0]
 801f63c:	f7fd ff0e 	bl	801d45c <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801f640:	4b76      	ldr	r3, [pc, #472]	@ (801f81c <rx_ip+0x2c0>)
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	2b03      	cmp	r3, #3
 801f646:	dd2d      	ble.n	801f6a4 <rx_ip+0x148>
 801f648:	4b75      	ldr	r3, [pc, #468]	@ (801f820 <rx_ip+0x2c4>)
 801f64a:	f241 6255 	movw	r2, #5717	@ 0x1655
 801f64e:	4975      	ldr	r1, [pc, #468]	@ (801f824 <rx_ip+0x2c8>)
 801f650:	2004      	movs	r0, #4
 801f652:	f7fb f907 	bl	801a864 <mg_log_prefix>
 801f656:	683b      	ldr	r3, [r7, #0]
 801f658:	69db      	ldr	r3, [r3, #28]
 801f65a:	f103 050c 	add.w	r5, r3, #12
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f662:	881b      	ldrh	r3, [r3, #0]
 801f664:	b29b      	uxth	r3, r3
 801f666:	4618      	mov	r0, r3
 801f668:	f002 fb1b 	bl	8021ca2 <mg_ntohs>
 801f66c:	4603      	mov	r3, r0
 801f66e:	461e      	mov	r6, r3
 801f670:	683b      	ldr	r3, [r7, #0]
 801f672:	69db      	ldr	r3, [r3, #28]
 801f674:	f103 0410 	add.w	r4, r3, #16
 801f678:	683b      	ldr	r3, [r7, #0]
 801f67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f67c:	885b      	ldrh	r3, [r3, #2]
 801f67e:	b29b      	uxth	r3, r3
 801f680:	4618      	mov	r0, r3
 801f682:	f002 fb0e 	bl	8021ca2 <mg_ntohs>
 801f686:	4603      	mov	r3, r0
 801f688:	461a      	mov	r2, r3
 801f68a:	683b      	ldr	r3, [r7, #0]
 801f68c:	68db      	ldr	r3, [r3, #12]
 801f68e:	9303      	str	r3, [sp, #12]
 801f690:	9202      	str	r2, [sp, #8]
 801f692:	9401      	str	r4, [sp, #4]
 801f694:	4b64      	ldr	r3, [pc, #400]	@ (801f828 <rx_ip+0x2cc>)
 801f696:	9300      	str	r3, [sp, #0]
 801f698:	4633      	mov	r3, r6
 801f69a:	462a      	mov	r2, r5
 801f69c:	4962      	ldr	r1, [pc, #392]	@ (801f828 <rx_ip+0x2cc>)
 801f69e:	4863      	ldr	r0, [pc, #396]	@ (801f82c <rx_ip+0x2d0>)
 801f6a0:	f7fb f930 	bl	801a904 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	7f1b      	ldrb	r3, [r3, #28]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d01c      	beq.n	801f6e6 <rx_ip+0x18a>
 801f6ac:	683b      	ldr	r3, [r7, #0]
 801f6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6b0:	885b      	ldrh	r3, [r3, #2]
 801f6b2:	b29c      	uxth	r4, r3
 801f6b4:	2044      	movs	r0, #68	@ 0x44
 801f6b6:	f002 faf4 	bl	8021ca2 <mg_ntohs>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	429c      	cmp	r4, r3
 801f6be:	d112      	bne.n	801f6e6 <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801f6c0:	683b      	ldr	r3, [r7, #0]
 801f6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6c4:	f103 0208 	add.w	r2, r3, #8
 801f6c8:	683b      	ldr	r3, [r7, #0]
 801f6ca:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801f6cc:	683b      	ldr	r3, [r7, #0]
 801f6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f6d0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801f6d4:	4619      	mov	r1, r3
 801f6d6:	6838      	ldr	r0, [r7, #0]
 801f6d8:	f7fd fec0 	bl	801d45c <mkpay>
      rx_dhcp_client(ifp, pkt);
 801f6dc:	6839      	ldr	r1, [r7, #0]
 801f6de:	6878      	ldr	r0, [r7, #4]
 801f6e0:	f7fe fcaa 	bl	801e038 <rx_dhcp_client>
 801f6e4:	e095      	b.n	801f812 <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	7f5b      	ldrb	r3, [r3, #29]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d01c      	beq.n	801f728 <rx_ip+0x1cc>
 801f6ee:	683b      	ldr	r3, [r7, #0]
 801f6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6f2:	885b      	ldrh	r3, [r3, #2]
 801f6f4:	b29c      	uxth	r4, r3
 801f6f6:	2043      	movs	r0, #67	@ 0x43
 801f6f8:	f002 fad3 	bl	8021ca2 <mg_ntohs>
 801f6fc:	4603      	mov	r3, r0
 801f6fe:	429c      	cmp	r4, r3
 801f700:	d112      	bne.n	801f728 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f706:	f103 0208 	add.w	r2, r3, #8
 801f70a:	683b      	ldr	r3, [r7, #0]
 801f70c:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f712:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801f716:	4619      	mov	r1, r3
 801f718:	6838      	ldr	r0, [r7, #0]
 801f71a:	f7fd fe9f 	bl	801d45c <mkpay>
      rx_dhcp_server(ifp, pkt);
 801f71e:	6839      	ldr	r1, [r7, #0]
 801f720:	6878      	ldr	r0, [r7, #4]
 801f722:	f7fe fe71 	bl	801e408 <rx_dhcp_server>
 801f726:	e074      	b.n	801f812 <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 801f728:	6839      	ldr	r1, [r7, #0]
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	f7ff f85a 	bl	801e7e4 <rx_udp>
 801f730:	e06f      	b.n	801f812 <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 801f732:	683b      	ldr	r3, [r7, #0]
 801f734:	69db      	ldr	r3, [r3, #28]
 801f736:	7a5b      	ldrb	r3, [r3, #9]
 801f738:	2b06      	cmp	r3, #6
 801f73a:	d16a      	bne.n	801f812 <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801f73c:	683b      	ldr	r3, [r7, #0]
 801f73e:	69db      	ldr	r3, [r3, #28]
 801f740:	f103 0214 	add.w	r2, r3, #20
 801f744:	683b      	ldr	r3, [r7, #0]
 801f746:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801f748:	683b      	ldr	r3, [r7, #0]
 801f74a:	68db      	ldr	r3, [r3, #12]
 801f74c:	2b13      	cmp	r3, #19
 801f74e:	d95f      	bls.n	801f810 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 801f750:	683b      	ldr	r3, [r7, #0]
 801f752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f754:	3314      	adds	r3, #20
 801f756:	4619      	mov	r1, r3
 801f758:	6838      	ldr	r0, [r7, #0]
 801f75a:	f7fd fe7f 	bl	801d45c <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	69db      	ldr	r3, [r3, #28]
 801f762:	885b      	ldrh	r3, [r3, #2]
 801f764:	b29b      	uxth	r3, r3
 801f766:	4618      	mov	r0, r3
 801f768:	f002 fa9b 	bl	8021ca2 <mg_ntohs>
 801f76c:	4603      	mov	r3, r0
 801f76e:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 801f770:	683b      	ldr	r3, [r7, #0]
 801f772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f774:	7b1b      	ldrb	r3, [r3, #12]
 801f776:	091b      	lsrs	r3, r3, #4
 801f778:	b2db      	uxtb	r3, r3
 801f77a:	3305      	adds	r3, #5
 801f77c:	b29b      	uxth	r3, r3
 801f77e:	009b      	lsls	r3, r3, #2
 801f780:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 801f782:	89fa      	ldrh	r2, [r7, #14]
 801f784:	89bb      	ldrh	r3, [r7, #12]
 801f786:	429a      	cmp	r2, r3
 801f788:	d305      	bcc.n	801f796 <rx_ip+0x23a>
 801f78a:	89fa      	ldrh	r2, [r7, #14]
 801f78c:	89bb      	ldrh	r3, [r7, #12]
 801f78e:	1ad3      	subs	r3, r2, r3
 801f790:	461a      	mov	r2, r3
 801f792:	683b      	ldr	r3, [r7, #0]
 801f794:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801f796:	4b21      	ldr	r3, [pc, #132]	@ (801f81c <rx_ip+0x2c0>)
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	2b03      	cmp	r3, #3
 801f79c:	dd2d      	ble.n	801f7fa <rx_ip+0x29e>
 801f79e:	4b20      	ldr	r3, [pc, #128]	@ (801f820 <rx_ip+0x2c4>)
 801f7a0:	f241 626a 	movw	r2, #5738	@ 0x166a
 801f7a4:	491f      	ldr	r1, [pc, #124]	@ (801f824 <rx_ip+0x2c8>)
 801f7a6:	2004      	movs	r0, #4
 801f7a8:	f7fb f85c 	bl	801a864 <mg_log_prefix>
 801f7ac:	683b      	ldr	r3, [r7, #0]
 801f7ae:	69db      	ldr	r3, [r3, #28]
 801f7b0:	f103 050c 	add.w	r5, r3, #12
 801f7b4:	683b      	ldr	r3, [r7, #0]
 801f7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7b8:	881b      	ldrh	r3, [r3, #0]
 801f7ba:	b29b      	uxth	r3, r3
 801f7bc:	4618      	mov	r0, r3
 801f7be:	f002 fa70 	bl	8021ca2 <mg_ntohs>
 801f7c2:	4603      	mov	r3, r0
 801f7c4:	461e      	mov	r6, r3
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	69db      	ldr	r3, [r3, #28]
 801f7ca:	f103 0410 	add.w	r4, r3, #16
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7d2:	885b      	ldrh	r3, [r3, #2]
 801f7d4:	b29b      	uxth	r3, r3
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	f002 fa63 	bl	8021ca2 <mg_ntohs>
 801f7dc:	4603      	mov	r3, r0
 801f7de:	461a      	mov	r2, r3
 801f7e0:	683b      	ldr	r3, [r7, #0]
 801f7e2:	68db      	ldr	r3, [r3, #12]
 801f7e4:	9303      	str	r3, [sp, #12]
 801f7e6:	9202      	str	r2, [sp, #8]
 801f7e8:	9401      	str	r4, [sp, #4]
 801f7ea:	4b0f      	ldr	r3, [pc, #60]	@ (801f828 <rx_ip+0x2cc>)
 801f7ec:	9300      	str	r3, [sp, #0]
 801f7ee:	4633      	mov	r3, r6
 801f7f0:	462a      	mov	r2, r5
 801f7f2:	490d      	ldr	r1, [pc, #52]	@ (801f828 <rx_ip+0x2cc>)
 801f7f4:	480e      	ldr	r0, [pc, #56]	@ (801f830 <rx_ip+0x2d4>)
 801f7f6:	f7fb f885 	bl	801a904 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 801f7fa:	6839      	ldr	r1, [r7, #0]
 801f7fc:	6878      	ldr	r0, [r7, #4]
 801f7fe:	f7ff fd7d 	bl	801f2fc <rx_tcp>
 801f802:	e006      	b.n	801f812 <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801f804:	bf00      	nop
 801f806:	e004      	b.n	801f812 <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801f808:	bf00      	nop
 801f80a:	e002      	b.n	801f812 <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801f80c:	bf00      	nop
 801f80e:	e000      	b.n	801f812 <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801f810:	bf00      	nop
  }
}
 801f812:	3714      	adds	r7, #20
 801f814:	46bd      	mov	sp, r7
 801f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f818:	0802821c 	.word	0x0802821c
 801f81c:	20000294 	.word	0x20000294
 801f820:	08029768 	.word	0x08029768
 801f824:	08026838 	.word	0x08026838
 801f828:	08020a55 	.word	0x08020a55
 801f82c:	08028238 	.word	0x08028238
 801f830:	08028254 	.word	0x08028254

0801f834 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f834:	b580      	push	{r7, lr}
 801f836:	b082      	sub	sp, #8
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
 801f83c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 801f83e:	683b      	ldr	r3, [r7, #0]
 801f840:	6a1b      	ldr	r3, [r3, #32]
 801f842:	799b      	ldrb	r3, [r3, #6]
 801f844:	2b01      	cmp	r3, #1
 801f846:	d004      	beq.n	801f852 <rx_ip6+0x1e>
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	6a1b      	ldr	r3, [r3, #32]
 801f84c:	799b      	ldrb	r3, [r3, #6]
 801f84e:	2b3a      	cmp	r3, #58	@ 0x3a
 801f850:	d115      	bne.n	801f87e <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 801f852:	683b      	ldr	r3, [r7, #0]
 801f854:	6a1b      	ldr	r3, [r3, #32]
 801f856:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801f85a:	683b      	ldr	r3, [r7, #0]
 801f85c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	68db      	ldr	r3, [r3, #12]
 801f862:	2b03      	cmp	r3, #3
 801f864:	d922      	bls.n	801f8ac <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 801f866:	683b      	ldr	r3, [r7, #0]
 801f868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f86a:	3304      	adds	r3, #4
 801f86c:	4619      	mov	r1, r3
 801f86e:	6838      	ldr	r0, [r7, #0]
 801f870:	f7fd fdf4 	bl	801d45c <mkpay>
    rx_icmp(ifp, pkt);
 801f874:	6839      	ldr	r1, [r7, #0]
 801f876:	6878      	ldr	r0, [r7, #4]
 801f878:	f7fe fb82 	bl	801df80 <rx_icmp>
 801f87c:	e019      	b.n	801f8b2 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 801f87e:	683b      	ldr	r3, [r7, #0]
 801f880:	6a1b      	ldr	r3, [r3, #32]
 801f882:	799b      	ldrb	r3, [r3, #6]
 801f884:	2b11      	cmp	r3, #17
 801f886:	d114      	bne.n	801f8b2 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 801f888:	683b      	ldr	r3, [r7, #0]
 801f88a:	6a1b      	ldr	r3, [r3, #32]
 801f88c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801f894:	683b      	ldr	r3, [r7, #0]
 801f896:	68db      	ldr	r3, [r3, #12]
 801f898:	2b07      	cmp	r3, #7
 801f89a:	d909      	bls.n	801f8b0 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 801f89c:	683b      	ldr	r3, [r7, #0]
 801f89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8a0:	3308      	adds	r3, #8
 801f8a2:	4619      	mov	r1, r3
 801f8a4:	6838      	ldr	r0, [r7, #0]
 801f8a6:	f7fd fdd9 	bl	801d45c <mkpay>
 801f8aa:	e002      	b.n	801f8b2 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801f8ac:	bf00      	nop
 801f8ae:	e000      	b.n	801f8b2 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801f8b0:	bf00      	nop
  }
}
 801f8b2:	3708      	adds	r7, #8
 801f8b4:	46bd      	mov	sp, r7
 801f8b6:	bd80      	pop	{r7, pc}

0801f8b8 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 801f8b8:	b590      	push	{r4, r7, lr}
 801f8ba:	b093      	sub	sp, #76	@ 0x4c
 801f8bc:	af00      	add	r7, sp, #0
 801f8be:	60f8      	str	r0, [r7, #12]
 801f8c0:	60b9      	str	r1, [r7, #8]
 801f8c2:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 801f8c4:	f107 0314 	add.w	r3, r7, #20
 801f8c8:	2234      	movs	r2, #52	@ 0x34
 801f8ca:	2100      	movs	r1, #0
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	f003 fac3 	bl	8022e58 <memset>
  pkt.raw.buf = (char *) buf;
 801f8d2:	68bb      	ldr	r3, [r7, #8]
 801f8d4:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 801f8da:	68bb      	ldr	r3, [r7, #8]
 801f8dc:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801f8de:	69bb      	ldr	r3, [r7, #24]
 801f8e0:	2b0d      	cmp	r3, #13
 801f8e2:	f240 80d8 	bls.w	801fa96 <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d013      	beq.n	801f918 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	2206      	movs	r2, #6
 801f8f8:	4619      	mov	r1, r3
 801f8fa:	f003 fa83 	bl	8022e04 <memcmp>
 801f8fe:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 801f900:	2b00      	cmp	r3, #0
 801f902:	d009      	beq.n	801f918 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 801f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f906:	2206      	movs	r2, #6
 801f908:	496d      	ldr	r1, [pc, #436]	@ (801fac0 <mg_tcpip_rx+0x208>)
 801f90a:	4618      	mov	r0, r3
 801f90c:	f003 fa7a 	bl	8022e04 <memcmp>
 801f910:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801f912:	2b00      	cmp	r3, #0
 801f914:	f040 80c1 	bne.w	801fa9a <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d01a      	beq.n	801f958 <mg_tcpip_rx+0xa0>
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2b04      	cmp	r3, #4
 801f926:	d917      	bls.n	801f958 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	3b04      	subs	r3, #4
 801f92c:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 801f92e:	687a      	ldr	r2, [r7, #4]
 801f930:	68b9      	ldr	r1, [r7, #8]
 801f932:	2000      	movs	r0, #0
 801f934:	f002 f9cc 	bl	8021cd0 <mg_crc32>
 801f938:	4603      	mov	r3, r0
 801f93a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801f93c:	68ba      	ldr	r2, [r7, #8]
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	4413      	add	r3, r2
 801f942:	4618      	mov	r0, r3
 801f944:	f107 0310 	add.w	r3, r7, #16
 801f948:	2204      	movs	r2, #4
 801f94a:	4619      	mov	r1, r3
 801f94c:	f003 fa5a 	bl	8022e04 <memcmp>
 801f950:	4603      	mov	r3, r0
 801f952:	2b00      	cmp	r3, #0
 801f954:	f040 80a3 	bne.w	801fa9e <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801f958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f95a:	899b      	ldrh	r3, [r3, #12]
 801f95c:	b29c      	uxth	r4, r3
 801f95e:	f640 0006 	movw	r0, #2054	@ 0x806
 801f962:	f002 f99e 	bl	8021ca2 <mg_ntohs>
 801f966:	4603      	mov	r3, r0
 801f968:	429c      	cmp	r4, r3
 801f96a:	d10d      	bne.n	801f988 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 801f96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f96e:	330e      	adds	r3, #14
 801f970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801f972:	69bb      	ldr	r3, [r7, #24]
 801f974:	2b29      	cmp	r3, #41	@ 0x29
 801f976:	f240 8094 	bls.w	801faa2 <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 801f97a:	f107 0314 	add.w	r3, r7, #20
 801f97e:	4619      	mov	r1, r3
 801f980:	68f8      	ldr	r0, [r7, #12]
 801f982:	f7fe f9f3 	bl	801dd6c <rx_arp>
 801f986:	e097      	b.n	801fab8 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 801f988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f98a:	899b      	ldrh	r3, [r3, #12]
 801f98c:	b29c      	uxth	r4, r3
 801f98e:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 801f992:	f002 f986 	bl	8021ca2 <mg_ntohs>
 801f996:	4603      	mov	r3, r0
 801f998:	429c      	cmp	r4, r3
 801f99a:	d11b      	bne.n	801f9d4 <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 801f99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f99e:	330e      	adds	r3, #14
 801f9a0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801f9a2:	69bb      	ldr	r3, [r7, #24]
 801f9a4:	2b35      	cmp	r3, #53	@ 0x35
 801f9a6:	d97e      	bls.n	801faa6 <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801f9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9aa:	781b      	ldrb	r3, [r3, #0]
 801f9ac:	091b      	lsrs	r3, r3, #4
 801f9ae:	b2db      	uxtb	r3, r3
 801f9b0:	2b06      	cmp	r3, #6
 801f9b2:	d17a      	bne.n	801faaa <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 801f9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9b6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801f9ba:	f107 0314 	add.w	r3, r7, #20
 801f9be:	4611      	mov	r1, r2
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	f7fd fd4b 	bl	801d45c <mkpay>
    rx_ip6(ifp, &pkt);
 801f9c6:	f107 0314 	add.w	r3, r7, #20
 801f9ca:	4619      	mov	r1, r3
 801f9cc:	68f8      	ldr	r0, [r7, #12]
 801f9ce:	f7ff ff31 	bl	801f834 <rx_ip6>
 801f9d2:	e071      	b.n	801fab8 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 801f9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9d6:	899b      	ldrh	r3, [r3, #12]
 801f9d8:	b29c      	uxth	r4, r3
 801f9da:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801f9de:	f002 f960 	bl	8021ca2 <mg_ntohs>
 801f9e2:	4603      	mov	r3, r0
 801f9e4:	429c      	cmp	r4, r3
 801f9e6:	d133      	bne.n	801fa50 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801f9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9ea:	330e      	adds	r3, #14
 801f9ec:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801f9ee:	69bb      	ldr	r3, [r7, #24]
 801f9f0:	2b21      	cmp	r3, #33	@ 0x21
 801f9f2:	d95c      	bls.n	801faae <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 801f9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9f6:	885b      	ldrh	r3, [r3, #2]
 801f9f8:	b29b      	uxth	r3, r3
 801f9fa:	4618      	mov	r0, r3
 801f9fc:	f002 f951 	bl	8021ca2 <mg_ntohs>
 801fa00:	4603      	mov	r3, r0
 801fa02:	f103 020e 	add.w	r2, r3, #14
 801fa06:	69bb      	ldr	r3, [r7, #24]
 801fa08:	429a      	cmp	r2, r3
 801fa0a:	d208      	bcs.n	801fa1e <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 801fa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa0e:	885b      	ldrh	r3, [r3, #2]
 801fa10:	b29b      	uxth	r3, r3
 801fa12:	4618      	mov	r0, r3
 801fa14:	f002 f945 	bl	8021ca2 <mg_ntohs>
 801fa18:	4603      	mov	r3, r0
 801fa1a:	330e      	adds	r3, #14
 801fa1c:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801fa1e:	69bb      	ldr	r3, [r7, #24]
 801fa20:	2b21      	cmp	r3, #33	@ 0x21
 801fa22:	d946      	bls.n	801fab2 <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801fa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa26:	781b      	ldrb	r3, [r3, #0]
 801fa28:	091b      	lsrs	r3, r3, #4
 801fa2a:	b2db      	uxtb	r3, r3
 801fa2c:	2b04      	cmp	r3, #4
 801fa2e:	d142      	bne.n	801fab6 <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 801fa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa32:	f103 0214 	add.w	r2, r3, #20
 801fa36:	f107 0314 	add.w	r3, r7, #20
 801fa3a:	4611      	mov	r1, r2
 801fa3c:	4618      	mov	r0, r3
 801fa3e:	f7fd fd0d 	bl	801d45c <mkpay>
    rx_ip(ifp, &pkt);
 801fa42:	f107 0314 	add.w	r3, r7, #20
 801fa46:	4619      	mov	r1, r3
 801fa48:	68f8      	ldr	r0, [r7, #12]
 801fa4a:	f7ff fd87 	bl	801f55c <rx_ip>
 801fa4e:	e033      	b.n	801fab8 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 801fa50:	4b1c      	ldr	r3, [pc, #112]	@ (801fac4 <mg_tcpip_rx+0x20c>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	2b02      	cmp	r3, #2
 801fa56:	dd11      	ble.n	801fa7c <mg_tcpip_rx+0x1c4>
 801fa58:	4b1b      	ldr	r3, [pc, #108]	@ (801fac8 <mg_tcpip_rx+0x210>)
 801fa5a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 801fa5e:	491b      	ldr	r1, [pc, #108]	@ (801facc <mg_tcpip_rx+0x214>)
 801fa60:	2003      	movs	r0, #3
 801fa62:	f7fa feff 	bl	801a864 <mg_log_prefix>
 801fa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa68:	899b      	ldrh	r3, [r3, #12]
 801fa6a:	b29b      	uxth	r3, r3
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	f002 f918 	bl	8021ca2 <mg_ntohs>
 801fa72:	4603      	mov	r3, r0
 801fa74:	4619      	mov	r1, r3
 801fa76:	4816      	ldr	r0, [pc, #88]	@ (801fad0 <mg_tcpip_rx+0x218>)
 801fa78:	f7fa ff44 	bl	801a904 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 801fa7c:	4b11      	ldr	r3, [pc, #68]	@ (801fac4 <mg_tcpip_rx+0x20c>)
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	2b03      	cmp	r3, #3
 801fa82:	dd19      	ble.n	801fab8 <mg_tcpip_rx+0x200>
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	2b20      	cmp	r3, #32
 801fa88:	bf28      	it	cs
 801fa8a:	2320      	movcs	r3, #32
 801fa8c:	4619      	mov	r1, r3
 801fa8e:	68b8      	ldr	r0, [r7, #8]
 801fa90:	f7fa ff6e 	bl	801a970 <mg_hexdump>
 801fa94:	e010      	b.n	801fab8 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801fa96:	bf00      	nop
 801fa98:	e00e      	b.n	801fab8 <mg_tcpip_rx+0x200>
    return;
 801fa9a:	bf00      	nop
 801fa9c:	e00c      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801fa9e:	bf00      	nop
 801faa0:	e00a      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801faa2:	bf00      	nop
 801faa4:	e008      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801faa6:	bf00      	nop
 801faa8:	e006      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801faaa:	bf00      	nop
 801faac:	e004      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801faae:	bf00      	nop
 801fab0:	e002      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801fab2:	bf00      	nop
 801fab4:	e000      	b.n	801fab8 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801fab6:	bf00      	nop
  }
}
 801fab8:	374c      	adds	r7, #76	@ 0x4c
 801faba:	46bd      	mov	sp, r7
 801fabc:	bd90      	pop	{r4, r7, pc}
 801fabe:	bf00      	nop
 801fac0:	0802960c 	.word	0x0802960c
 801fac4:	20000294 	.word	0x20000294
 801fac8:	08029770 	.word	0x08029770
 801facc:	08026838 	.word	0x08026838
 801fad0:	08028270 	.word	0x08028270

0801fad4 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 801fad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fad6:	b095      	sub	sp, #84	@ 0x54
 801fad8:	af06      	add	r7, sp, #24
 801fada:	6178      	str	r0, [r7, #20]
 801fadc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 801fae0:	697b      	ldr	r3, [r7, #20]
 801fae2:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 801fae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801faea:	e9cd 2300 	strd	r2, r3, [sp]
 801faee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801faf2:	f04f 0300 	mov.w	r3, #0
 801faf6:	4608      	mov	r0, r1
 801faf8:	f001 fdb3 	bl	8021662 <mg_timer_expired>
 801fafc:	4603      	mov	r3, r0
 801fafe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 801fb02:	6979      	ldr	r1, [r7, #20]
 801fb04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fb08:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 801fb0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d052      	beq.n	801fbba <mg_tcpip_poll+0xe6>
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fb18:	68db      	ldr	r3, [r3, #12]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d04d      	beq.n	801fbba <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 801fb1e:	697b      	ldr	r3, [r7, #20]
 801fb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fb22:	68db      	ldr	r3, [r3, #12]
 801fb24:	6978      	ldr	r0, [r7, #20]
 801fb26:	4798      	blx	r3
 801fb28:	4603      	mov	r3, r0
 801fb2a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 801fb2e:	697b      	ldr	r3, [r7, #20]
 801fb30:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	bf14      	ite	ne
 801fb38:	2301      	movne	r3, #1
 801fb3a:	2300      	moveq	r3, #0
 801fb3c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 801fb40:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 801fb44:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801fb48:	429a      	cmp	r2, r3
 801fb4a:	d023      	beq.n	801fb94 <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 801fb4c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fb50:	f083 0301 	eor.w	r3, r3, #1
 801fb54:	b2db      	uxtb	r3, r3
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d001      	beq.n	801fb5e <mg_tcpip_poll+0x8a>
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	e006      	b.n	801fb6c <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 801fb5e:	697b      	ldr	r3, [r7, #20]
 801fb60:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d001      	beq.n	801fb6a <mg_tcpip_poll+0x96>
 801fb66:	2301      	movs	r3, #1
 801fb68:	e000      	b.n	801fb6c <mg_tcpip_poll+0x98>
 801fb6a:	2303      	movs	r3, #3
 801fb6c:	697a      	ldr	r2, [r7, #20]
 801fb6e:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 801fb72:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fb76:	f083 0301 	eor.w	r3, r3, #1
 801fb7a:	b2db      	uxtb	r3, r3
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	d006      	beq.n	801fb8e <mg_tcpip_poll+0xba>
 801fb80:	697b      	ldr	r3, [r7, #20]
 801fb82:	7f1b      	ldrb	r3, [r3, #28]
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d002      	beq.n	801fb8e <mg_tcpip_poll+0xba>
 801fb88:	697b      	ldr	r3, [r7, #20]
 801fb8a:	2200      	movs	r2, #0
 801fb8c:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 801fb8e:	6978      	ldr	r0, [r7, #20]
 801fb90:	f7fd fdb2 	bl	801d6f8 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 801fb94:	697b      	ldr	r3, [r7, #20]
 801fb96:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d10d      	bne.n	801fbba <mg_tcpip_poll+0xe6>
 801fb9e:	4ba4      	ldr	r3, [pc, #656]	@ (801fe30 <mg_tcpip_poll+0x35c>)
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	dd09      	ble.n	801fbba <mg_tcpip_poll+0xe6>
 801fba6:	4ba3      	ldr	r3, [pc, #652]	@ (801fe34 <mg_tcpip_poll+0x360>)
 801fba8:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 801fbac:	49a2      	ldr	r1, [pc, #648]	@ (801fe38 <mg_tcpip_poll+0x364>)
 801fbae:	2001      	movs	r0, #1
 801fbb0:	f7fa fe58 	bl	801a864 <mg_log_prefix>
 801fbb4:	48a1      	ldr	r0, [pc, #644]	@ (801fe3c <mg_tcpip_poll+0x368>)
 801fbb6:	f7fa fea5 	bl	801a904 <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 801fbba:	697b      	ldr	r3, [r7, #20]
 801fbbc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	f000 818d 	beq.w	801fee0 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 801fbc6:	697b      	ldr	r3, [r7, #20]
 801fbc8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801fbcc:	2b01      	cmp	r3, #1
 801fbce:	d107      	bne.n	801fbe0 <mg_tcpip_poll+0x10c>
 801fbd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d003      	beq.n	801fbe0 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 801fbd8:	6978      	ldr	r0, [r7, #20]
 801fbda:	f7fe f819 	bl	801dc10 <tx_dhcp_discover>
 801fbde:	e04c      	b.n	801fc7a <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 801fbe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d048      	beq.n	801fc7a <mg_tcpip_poll+0x1a6>
 801fbe8:	697b      	ldr	r3, [r7, #20]
 801fbea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801fbee:	2b03      	cmp	r3, #3
 801fbf0:	d143      	bne.n	801fc7a <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 801fbf2:	697b      	ldr	r3, [r7, #20]
 801fbf4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 801fbf8:	4313      	orrs	r3, r2
 801fbfa:	d03e      	beq.n	801fc7a <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 801fbfc:	697b      	ldr	r3, [r7, #20]
 801fbfe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 801fc02:	697b      	ldr	r3, [r7, #20]
 801fc04:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 801fc08:	4290      	cmp	r0, r2
 801fc0a:	eb71 0303 	sbcs.w	r3, r1, r3
 801fc0e:	d30a      	bcc.n	801fc26 <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 801fc10:	697b      	ldr	r3, [r7, #20]
 801fc12:	2201      	movs	r2, #1
 801fc14:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801fc18:	697b      	ldr	r3, [r7, #20]
 801fc1a:	2200      	movs	r2, #0
 801fc1c:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 801fc1e:	6978      	ldr	r0, [r7, #20]
 801fc20:	f7fd fd6a 	bl	801d6f8 <onstatechange>
 801fc24:	e029      	b.n	801fc7a <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801fc26:	697b      	ldr	r3, [r7, #20]
 801fc28:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801fc2c:	4984      	ldr	r1, [pc, #528]	@ (801fe40 <mg_tcpip_poll+0x36c>)
 801fc2e:	1854      	adds	r4, r2, r1
 801fc30:	f143 0500 	adc.w	r5, r3, #0
 801fc34:	697b      	ldr	r3, [r7, #20]
 801fc36:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 801fc3a:	42a2      	cmp	r2, r4
 801fc3c:	41ab      	sbcs	r3, r5
 801fc3e:	d21c      	bcs.n	801fc7a <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 801fc46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801fc4a:	f04f 0300 	mov.w	r3, #0
 801fc4e:	f7e0 ffc7 	bl	8000be0 <__aeabi_uldivmod>
 801fc52:	4602      	mov	r2, r0
 801fc54:	460b      	mov	r3, r1
 801fc56:	4610      	mov	r0, r2
 801fc58:	4619      	mov	r1, r3
 801fc5a:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 801fc5e:	f04f 0300 	mov.w	r3, #0
 801fc62:	f7e0 ffbd 	bl	8000be0 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801fc66:	4313      	orrs	r3, r2
 801fc68:	d107      	bne.n	801fc7a <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 801fc6a:	697b      	ldr	r3, [r7, #20]
 801fc6c:	689a      	ldr	r2, [r3, #8]
 801fc6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc72:	4974      	ldr	r1, [pc, #464]	@ (801fe44 <mg_tcpip_poll+0x370>)
 801fc74:	6978      	ldr	r0, [r7, #20]
 801fc76:	f7fd ff99 	bl	801dbac <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 801fc7a:	697b      	ldr	r3, [r7, #20]
 801fc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fc7e:	689b      	ldr	r3, [r3, #8]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d019      	beq.n	801fcb8 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 801fc84:	697b      	ldr	r3, [r7, #20]
 801fc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fc88:	689b      	ldr	r3, [r3, #8]
 801fc8a:	697a      	ldr	r2, [r7, #20]
 801fc8c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801fc8e:	697a      	ldr	r2, [r7, #20]
 801fc90:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 801fc92:	697a      	ldr	r2, [r7, #20]
 801fc94:	4798      	blx	r3
 801fc96:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 801fc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d024      	beq.n	801fce8 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 801fc9e:	697b      	ldr	r3, [r7, #20]
 801fca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fca2:	1c5a      	adds	r2, r3, #1
 801fca4:	697b      	ldr	r3, [r7, #20]
 801fca6:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 801fca8:	697b      	ldr	r3, [r7, #20]
 801fcaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fcac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fcae:	4619      	mov	r1, r3
 801fcb0:	6978      	ldr	r0, [r7, #20]
 801fcb2:	f7ff fe01 	bl	801f8b8 <mg_tcpip_rx>
 801fcb6:	e017      	b.n	801fce8 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 801fcb8:	697b      	ldr	r3, [r7, #20]
 801fcba:	3334      	adds	r3, #52	@ 0x34
 801fcbc:	f107 0220 	add.w	r2, r7, #32
 801fcc0:	4611      	mov	r1, r2
 801fcc2:	4618      	mov	r0, r3
 801fcc4:	f000 ffcc 	bl	8020c60 <mg_queue_next>
 801fcc8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 801fcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d00b      	beq.n	801fce8 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 801fcd0:	6a3b      	ldr	r3, [r7, #32]
 801fcd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fcd4:	4619      	mov	r1, r3
 801fcd6:	6978      	ldr	r0, [r7, #20]
 801fcd8:	f7ff fdee 	bl	801f8b8 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 801fcdc:	697b      	ldr	r3, [r7, #20]
 801fcde:	3334      	adds	r3, #52	@ 0x34
 801fce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801fce2:	4618      	mov	r0, r3
 801fce4:	f001 f802 	bl	8020cec <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801fce8:	697b      	ldr	r3, [r7, #20]
 801fcea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	637b      	str	r3, [r7, #52]	@ 0x34
 801fcf0:	e0f1      	b.n	801fed6 <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 801fcf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fcf4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801fcf8:	f003 0301 	and.w	r3, r3, #1
 801fcfc:	b2db      	uxtb	r3, r3
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	f040 80e5 	bne.w	801fece <mg_tcpip_poll+0x3fa>
 801fd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fd0a:	f003 0301 	and.w	r3, r3, #1
 801fd0e:	b2db      	uxtb	r3, r3
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	f040 80dc 	bne.w	801fece <mg_tcpip_poll+0x3fa>
 801fd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd18:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fd1c:	f003 0308 	and.w	r3, r3, #8
 801fd20:	b2db      	uxtb	r3, r3
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f040 80d3 	bne.w	801fece <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 801fd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd2a:	33b0      	adds	r3, #176	@ 0xb0
 801fd2c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801fd2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd30:	331c      	adds	r3, #28
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 801fd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801fd3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fd40:	4290      	cmp	r0, r2
 801fd42:	eb71 0303 	sbcs.w	r3, r1, r3
 801fd46:	f080 80c3 	bcs.w	801fed0 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 801fd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd4c:	7f9b      	ldrb	r3, [r3, #30]
 801fd4e:	2b01      	cmp	r3, #1
 801fd50:	d142      	bne.n	801fdd8 <mg_tcpip_poll+0x304>
 801fd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd54:	691a      	ldr	r2, [r3, #16]
 801fd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd58:	685b      	ldr	r3, [r3, #4]
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	d03c      	beq.n	801fdd8 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 801fd5e:	4b34      	ldr	r3, [pc, #208]	@ (801fe30 <mg_tcpip_poll+0x35c>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	2b03      	cmp	r3, #3
 801fd64:	dd0f      	ble.n	801fd86 <mg_tcpip_poll+0x2b2>
 801fd66:	4b33      	ldr	r3, [pc, #204]	@ (801fe34 <mg_tcpip_poll+0x360>)
 801fd68:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 801fd6c:	4932      	ldr	r1, [pc, #200]	@ (801fe38 <mg_tcpip_poll+0x364>)
 801fd6e:	2004      	movs	r0, #4
 801fd70:	f7fa fd78 	bl	801a864 <mg_log_prefix>
 801fd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801fd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd7a:	681a      	ldr	r2, [r3, #0]
 801fd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd7e:	685b      	ldr	r3, [r3, #4]
 801fd80:	4831      	ldr	r0, [pc, #196]	@ (801fe48 <mg_tcpip_poll+0x374>)
 801fd82:	f7fa fdbf 	bl	801a904 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801fd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd88:	f103 0618 	add.w	r6, r3, #24
 801fd8c:	69fb      	ldr	r3, [r7, #28]
 801fd8e:	613b      	str	r3, [r7, #16]
 801fd90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd92:	8b1c      	ldrh	r4, [r3, #24]
 801fd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fd96:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801fd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	4618      	mov	r0, r3
 801fd9e:	f001 ff67 	bl	8021c70 <mg_ntohl>
 801fda2:	6078      	str	r0, [r7, #4]
 801fda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fda6:	685b      	ldr	r3, [r3, #4]
 801fda8:	4618      	mov	r0, r3
 801fdaa:	f001 ff61 	bl	8021c70 <mg_ntohl>
 801fdae:	4603      	mov	r3, r0
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	9205      	str	r2, [sp, #20]
 801fdb4:	2200      	movs	r2, #0
 801fdb6:	9204      	str	r2, [sp, #16]
 801fdb8:	9303      	str	r3, [sp, #12]
 801fdba:	6879      	ldr	r1, [r7, #4]
 801fdbc:	9102      	str	r1, [sp, #8]
 801fdbe:	9501      	str	r5, [sp, #4]
 801fdc0:	9400      	str	r4, [sp, #0]
 801fdc2:	2310      	movs	r3, #16
 801fdc4:	693a      	ldr	r2, [r7, #16]
 801fdc6:	4631      	mov	r1, r6
 801fdc8:	6978      	ldr	r0, [r7, #20]
 801fdca:	f7fe fd7d 	bl	801e8c8 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 801fdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdd0:	685a      	ldr	r2, [r3, #4]
 801fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdd4:	611a      	str	r2, [r3, #16]
 801fdd6:	e075      	b.n	801fec4 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 801fdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdda:	7f9b      	ldrb	r3, [r3, #30]
 801fddc:	2b02      	cmp	r3, #2
 801fdde:	d104      	bne.n	801fdea <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 801fde0:	491a      	ldr	r1, [pc, #104]	@ (801fe4c <mg_tcpip_poll+0x378>)
 801fde2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fde4:	f7f5 f97a 	bl	80150dc <mg_error>
 801fde8:	e06c      	b.n	801fec4 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 801fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdec:	7f9b      	ldrb	r3, [r3, #30]
 801fdee:	2b03      	cmp	r3, #3
 801fdf0:	d104      	bne.n	801fdfc <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 801fdf2:	4917      	ldr	r1, [pc, #92]	@ (801fe50 <mg_tcpip_poll+0x37c>)
 801fdf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fdf6:	f7f5 f971 	bl	80150dc <mg_error>
 801fdfa:	e063      	b.n	801fec4 <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 801fdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdfe:	7f9b      	ldrb	r3, [r3, #30]
 801fe00:	2b04      	cmp	r3, #4
 801fe02:	d107      	bne.n	801fe14 <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 801fe04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fe06:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fe0a:	f043 0320 	orr.w	r3, r3, #32
 801fe0e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 801fe12:	e05d      	b.n	801fed0 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 801fe14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe16:	7fdb      	ldrb	r3, [r3, #31]
 801fe18:	1c5a      	adds	r2, r3, #1
 801fe1a:	b2d1      	uxtb	r1, r2
 801fe1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fe1e:	77d1      	strb	r1, [r2, #31]
 801fe20:	2b02      	cmp	r3, #2
 801fe22:	d919      	bls.n	801fe58 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 801fe24:	490b      	ldr	r1, [pc, #44]	@ (801fe54 <mg_tcpip_poll+0x380>)
 801fe26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fe28:	f7f5 f958 	bl	80150dc <mg_error>
 801fe2c:	e04a      	b.n	801fec4 <mg_tcpip_poll+0x3f0>
 801fe2e:	bf00      	nop
 801fe30:	20000294 	.word	0x20000294
 801fe34:	0802977c 	.word	0x0802977c
 801fe38:	08026838 	.word	0x08026838
 801fe3c:	08028284 	.word	0x08028284
 801fe40:	001b7740 	.word	0x001b7740
 801fe44:	0802960c 	.word	0x0802960c
 801fe48:	08028294 	.word	0x08028294
 801fe4c:	080282a4 	.word	0x080282a4
 801fe50:	080282b0 	.word	0x080282b0
 801fe54:	080282c4 	.word	0x080282c4
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 801fe58:	4b23      	ldr	r3, [pc, #140]	@ (801fee8 <mg_tcpip_poll+0x414>)
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	2b03      	cmp	r3, #3
 801fe5e:	dd0c      	ble.n	801fe7a <mg_tcpip_poll+0x3a6>
 801fe60:	4b22      	ldr	r3, [pc, #136]	@ (801feec <mg_tcpip_poll+0x418>)
 801fe62:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 801fe66:	4922      	ldr	r1, [pc, #136]	@ (801fef0 <mg_tcpip_poll+0x41c>)
 801fe68:	2004      	movs	r0, #4
 801fe6a:	f7fa fcfb 	bl	801a864 <mg_log_prefix>
 801fe6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe72:	4619      	mov	r1, r3
 801fe74:	481f      	ldr	r0, [pc, #124]	@ (801fef4 <mg_tcpip_poll+0x420>)
 801fe76:	f7fa fd45 	bl	801a904 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe7c:	f103 0618 	add.w	r6, r3, #24
 801fe80:	69fb      	ldr	r3, [r7, #28]
 801fe82:	613b      	str	r3, [r7, #16]
 801fe84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe86:	8b1c      	ldrh	r4, [r3, #24]
 801fe88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe8a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 801fe8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe8e:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801fe90:	3b01      	subs	r3, #1
 801fe92:	4618      	mov	r0, r3
 801fe94:	f001 feec 	bl	8021c70 <mg_ntohl>
 801fe98:	6078      	str	r0, [r7, #4]
 801fe9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe9c:	685b      	ldr	r3, [r3, #4]
 801fe9e:	4618      	mov	r0, r3
 801fea0:	f001 fee6 	bl	8021c70 <mg_ntohl>
 801fea4:	4603      	mov	r3, r0
 801fea6:	2200      	movs	r2, #0
 801fea8:	9205      	str	r2, [sp, #20]
 801feaa:	2200      	movs	r2, #0
 801feac:	9204      	str	r2, [sp, #16]
 801feae:	9303      	str	r3, [sp, #12]
 801feb0:	6879      	ldr	r1, [r7, #4]
 801feb2:	9102      	str	r1, [sp, #8]
 801feb4:	9501      	str	r5, [sp, #4]
 801feb6:	9400      	str	r4, [sp, #0]
 801feb8:	2310      	movs	r3, #16
 801feba:	693a      	ldr	r2, [r7, #16]
 801febc:	4631      	mov	r1, r6
 801febe:	6978      	ldr	r0, [r7, #20]
 801fec0:	f7fe fd02 	bl	801e8c8 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 801fec4:	2100      	movs	r1, #0
 801fec6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fec8:	f7fd fb40 	bl	801d54c <settmout>
 801fecc:	e000      	b.n	801fed0 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 801fece:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801fed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	637b      	str	r3, [r7, #52]	@ 0x34
 801fed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fed8:	2b00      	cmp	r3, #0
 801feda:	f47f af0a 	bne.w	801fcf2 <mg_tcpip_poll+0x21e>
 801fede:	e000      	b.n	801fee2 <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 801fee0:	bf00      	nop
    }
  }
}
 801fee2:	373c      	adds	r7, #60	@ 0x3c
 801fee4:	46bd      	mov	sp, r7
 801fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fee8:	20000294 	.word	0x20000294
 801feec:	0802977c 	.word	0x0802977c
 801fef0:	08026838 	.word	0x08026838
 801fef4:	080282d0 	.word	0x080282d0

0801fef8 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b084      	sub	sp, #16
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	6078      	str	r0, [r7, #4]
 801ff00:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	781b      	ldrb	r3, [r3, #0]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d12d      	bne.n	801ff66 <mg_tcpip_init+0x6e>
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	785b      	ldrb	r3, [r3, #1]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d129      	bne.n	801ff66 <mg_tcpip_init+0x6e>
 801ff12:	683b      	ldr	r3, [r7, #0]
 801ff14:	789b      	ldrb	r3, [r3, #2]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d125      	bne.n	801ff66 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801ff1a:	683b      	ldr	r3, [r7, #0]
 801ff1c:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d121      	bne.n	801ff66 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	791b      	ldrb	r3, [r3, #4]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d11d      	bne.n	801ff66 <mg_tcpip_init+0x6e>
 801ff2a:	683b      	ldr	r3, [r7, #0]
 801ff2c:	795b      	ldrb	r3, [r3, #5]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d119      	bne.n	801ff66 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	2202      	movs	r2, #2
 801ff36:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 801ff38:	683b      	ldr	r3, [r7, #0]
 801ff3a:	3301      	adds	r3, #1
 801ff3c:	2105      	movs	r1, #5
 801ff3e:	4618      	mov	r0, r3
 801ff40:	f001 fe2f 	bl	8021ba2 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 801ff44:	4b51      	ldr	r3, [pc, #324]	@ (802008c <mg_tcpip_init+0x194>)
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	2b01      	cmp	r3, #1
 801ff4a:	dd0c      	ble.n	801ff66 <mg_tcpip_init+0x6e>
 801ff4c:	4b50      	ldr	r3, [pc, #320]	@ (8020090 <mg_tcpip_init+0x198>)
 801ff4e:	f241 721f 	movw	r2, #5919	@ 0x171f
 801ff52:	4950      	ldr	r1, [pc, #320]	@ (8020094 <mg_tcpip_init+0x19c>)
 801ff54:	2002      	movs	r0, #2
 801ff56:	f7fa fc85 	bl	801a864 <mg_log_prefix>
 801ff5a:	683b      	ldr	r3, [r7, #0]
 801ff5c:	461a      	mov	r2, r3
 801ff5e:	494e      	ldr	r1, [pc, #312]	@ (8020098 <mg_tcpip_init+0x1a0>)
 801ff60:	484e      	ldr	r0, [pc, #312]	@ (802009c <mg_tcpip_init+0x1a4>)
 801ff62:	f7fa fccf 	bl	801a904 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 801ff66:	683b      	ldr	r3, [r7, #0]
 801ff68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d019      	beq.n	801ffa4 <mg_tcpip_init+0xac>
 801ff70:	683b      	ldr	r3, [r7, #0]
 801ff72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	6838      	ldr	r0, [r7, #0]
 801ff78:	4798      	blx	r3
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	f083 0301 	eor.w	r3, r3, #1
 801ff80:	b2db      	uxtb	r3, r3
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d00e      	beq.n	801ffa4 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 801ff86:	4b41      	ldr	r3, [pc, #260]	@ (802008c <mg_tcpip_init+0x194>)
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	dd7a      	ble.n	8020084 <mg_tcpip_init+0x18c>
 801ff8e:	4b40      	ldr	r3, [pc, #256]	@ (8020090 <mg_tcpip_init+0x198>)
 801ff90:	f241 7223 	movw	r2, #5923	@ 0x1723
 801ff94:	493f      	ldr	r1, [pc, #252]	@ (8020094 <mg_tcpip_init+0x19c>)
 801ff96:	2001      	movs	r0, #1
 801ff98:	f7fa fc64 	bl	801a864 <mg_log_prefix>
 801ff9c:	4840      	ldr	r0, [pc, #256]	@ (80200a0 <mg_tcpip_init+0x1a8>)
 801ff9e:	f7fa fcb1 	bl	801a904 <mg_log>
 801ffa2:	e06f      	b.n	8020084 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 801ffa4:	f240 6304 	movw	r3, #1540	@ 0x604
 801ffa8:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 801ffaa:	68f9      	ldr	r1, [r7, #12]
 801ffac:	2001      	movs	r0, #1
 801ffae:	f7f4 fa95 	bl	80144dc <mg_calloc>
 801ffb2:	4602      	mov	r2, r0
 801ffb4:	683b      	ldr	r3, [r7, #0]
 801ffb6:	615a      	str	r2, [r3, #20]
 801ffb8:	683b      	ldr	r3, [r7, #0]
 801ffba:	68fa      	ldr	r2, [r7, #12]
 801ffbc:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 801ffbe:	683b      	ldr	r3, [r7, #0]
 801ffc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d10a      	bne.n	801ffdc <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 801ffc6:	683b      	ldr	r3, [r7, #0]
 801ffc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ffca:	689b      	ldr	r3, [r3, #8]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d001      	beq.n	801ffd4 <mg_tcpip_init+0xdc>
 801ffd0:	68fb      	ldr	r3, [r7, #12]
 801ffd2:	e001      	b.n	801ffd8 <mg_tcpip_init+0xe0>
 801ffd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801ffd8:	683a      	ldr	r2, [r7, #0]
 801ffda:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 801ffdc:	683b      	ldr	r3, [r7, #0]
 801ffde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ffe0:	4619      	mov	r1, r3
 801ffe2:	2001      	movs	r0, #1
 801ffe4:	f7f4 fa7a 	bl	80144dc <mg_calloc>
 801ffe8:	4602      	mov	r2, r0
 801ffea:	683b      	ldr	r3, [r7, #0]
 801ffec:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 801ffee:	f001 fee9 	bl	8021dc4 <mg_millis>
 801fff2:	4602      	mov	r2, r0
 801fff4:	460b      	mov	r3, r1
 801fff6:	6839      	ldr	r1, [r7, #0]
 801fff8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	683a      	ldr	r2, [r7, #0]
 8020000:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 8020002:	683b      	ldr	r3, [r7, #0]
 8020004:	687a      	ldr	r2, [r7, #4]
 8020006:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8020008:	683b      	ldr	r3, [r7, #0]
 802000a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 802000e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	2230      	movs	r2, #48	@ 0x30
 8020016:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8020018:	683b      	ldr	r3, [r7, #0]
 802001a:	689b      	ldr	r3, [r3, #8]
 802001c:	2b00      	cmp	r3, #0
 802001e:	d102      	bne.n	8020026 <mg_tcpip_init+0x12e>
 8020020:	683b      	ldr	r3, [r7, #0]
 8020022:	2201      	movs	r2, #1
 8020024:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	3346      	adds	r3, #70	@ 0x46
 802002a:	2206      	movs	r2, #6
 802002c:	21ff      	movs	r1, #255	@ 0xff
 802002e:	4618      	mov	r0, r3
 8020030:	f002 ff12 	bl	8022e58 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8020034:	683b      	ldr	r3, [r7, #0]
 8020036:	3368      	adds	r3, #104	@ 0x68
 8020038:	2102      	movs	r1, #2
 802003a:	4618      	mov	r0, r3
 802003c:	f001 fdb1 	bl	8021ba2 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8020040:	683b      	ldr	r3, [r7, #0]
 8020042:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 802004a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802004e:	b29a      	uxth	r2, r3
 8020050:	683b      	ldr	r3, [r7, #0]
 8020052:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8020056:	683b      	ldr	r3, [r7, #0]
 8020058:	695b      	ldr	r3, [r3, #20]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d003      	beq.n	8020066 <mg_tcpip_init+0x16e>
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020062:	2b00      	cmp	r3, #0
 8020064:	d10e      	bne.n	8020084 <mg_tcpip_init+0x18c>
 8020066:	4b09      	ldr	r3, [pc, #36]	@ (802008c <mg_tcpip_init+0x194>)
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	2b00      	cmp	r3, #0
 802006c:	dd0a      	ble.n	8020084 <mg_tcpip_init+0x18c>
 802006e:	4b08      	ldr	r3, [pc, #32]	@ (8020090 <mg_tcpip_init+0x198>)
 8020070:	f241 7234 	movw	r2, #5940	@ 0x1734
 8020074:	4907      	ldr	r1, [pc, #28]	@ (8020094 <mg_tcpip_init+0x19c>)
 8020076:	2001      	movs	r0, #1
 8020078:	f7fa fbf4 	bl	801a864 <mg_log_prefix>
 802007c:	4809      	ldr	r0, [pc, #36]	@ (80200a4 <mg_tcpip_init+0x1ac>)
 802007e:	f7fa fc41 	bl	801a904 <mg_log>
  }
}
 8020082:	e7ff      	b.n	8020084 <mg_tcpip_init+0x18c>
 8020084:	bf00      	nop
 8020086:	3710      	adds	r7, #16
 8020088:	46bd      	mov	sp, r7
 802008a:	bd80      	pop	{r7, pc}
 802008c:	20000294 	.word	0x20000294
 8020090:	0802978c 	.word	0x0802978c
 8020094:	08026838 	.word	0x08026838
 8020098:	08020b19 	.word	0x08020b19
 802009c:	080282e0 	.word	0x080282e0
 80200a0:	08028304 	.word	0x08028304
 80200a4:	08027d74 	.word	0x08027d74

080200a8 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 80200a8:	b590      	push	{r4, r7, lr}
 80200aa:	b08d      	sub	sp, #52	@ 0x34
 80200ac:	af06      	add	r7, sp, #24
 80200ae:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	33b0      	adds	r3, #176	@ 0xb0
 80200b4:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	8b1b      	ldrh	r3, [r3, #24]
 80200ba:	4618      	mov	r0, r3
 80200bc:	f001 fdf1 	bl	8021ca2 <mg_ntohs>
 80200c0:	4603      	mov	r3, r0
 80200c2:	4618      	mov	r0, r3
 80200c4:	f001 fdd4 	bl	8021c70 <mg_ntohl>
 80200c8:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	685b      	ldr	r3, [r3, #4]
 80200ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80200d0:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	331c      	adds	r3, #28
 80200d6:	681b      	ldr	r3, [r3, #0]
 80200d8:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80200da:	697b      	ldr	r3, [r7, #20]
 80200dc:	f103 0018 	add.w	r0, r3, #24
 80200e0:	68bc      	ldr	r4, [r7, #8]
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	8b1b      	ldrh	r3, [r3, #24]
 80200e6:	687a      	ldr	r2, [r7, #4]
 80200e8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80200ea:	2100      	movs	r1, #0
 80200ec:	9105      	str	r1, [sp, #20]
 80200ee:	2100      	movs	r1, #0
 80200f0:	9104      	str	r1, [sp, #16]
 80200f2:	2100      	movs	r1, #0
 80200f4:	9103      	str	r1, [sp, #12]
 80200f6:	6939      	ldr	r1, [r7, #16]
 80200f8:	9102      	str	r1, [sp, #8]
 80200fa:	9201      	str	r2, [sp, #4]
 80200fc:	9300      	str	r3, [sp, #0]
 80200fe:	2302      	movs	r3, #2
 8020100:	4622      	mov	r2, r4
 8020102:	4601      	mov	r1, r0
 8020104:	68f8      	ldr	r0, [r7, #12]
 8020106:	f7fe fbdf 	bl	801e8c8 <tx_tcp>
         0);
}
 802010a:	bf00      	nop
 802010c:	371c      	adds	r7, #28
 802010e:	46bd      	mov	sp, r7
 8020110:	bd90      	pop	{r4, r7, pc}
	...

08020114 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8020114:	b580      	push	{r7, lr}
 8020116:	b08a      	sub	sp, #40	@ 0x28
 8020118:	af02      	add	r7, sp, #8
 802011a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	685b      	ldr	r3, [r3, #4]
 8020120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020122:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	331c      	adds	r3, #28
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 802012c:	687a      	ldr	r2, [r7, #4]
 802012e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020132:	f36f 03c3 	bfc	r3, #3, #1
 8020136:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802013a:	69fb      	ldr	r3, [r7, #28]
 802013c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020140:	b21b      	sxth	r3, r3
 8020142:	2b00      	cmp	r3, #0
 8020144:	db04      	blt.n	8020150 <mg_connect_resolved+0x3c>
 8020146:	69fb      	ldr	r3, [r7, #28]
 8020148:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802014c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8020150:	687b      	ldr	r3, [r7, #4]
 8020152:	3308      	adds	r3, #8
 8020154:	69fa      	ldr	r2, [r7, #28]
 8020156:	3208      	adds	r2, #8
 8020158:	6812      	ldr	r2, [r2, #0]
 802015a:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 802015c:	69fb      	ldr	r3, [r7, #28]
 802015e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020162:	1c5a      	adds	r2, r3, #1
 8020164:	b291      	uxth	r1, r2
 8020166:	69fa      	ldr	r2, [r7, #28]
 8020168:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 802016c:	4618      	mov	r0, r3
 802016e:	f001 fd98 	bl	8021ca2 <mg_ntohs>
 8020172:	4603      	mov	r3, r0
 8020174:	461a      	mov	r2, r3
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 802017a:	4b6a      	ldr	r3, [pc, #424]	@ (8020324 <mg_connect_resolved+0x210>)
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	2b02      	cmp	r3, #2
 8020180:	dd15      	ble.n	80201ae <mg_connect_resolved+0x9a>
 8020182:	4b69      	ldr	r3, [pc, #420]	@ (8020328 <mg_connect_resolved+0x214>)
 8020184:	f241 724f 	movw	r2, #5967	@ 0x174f
 8020188:	4968      	ldr	r1, [pc, #416]	@ (802032c <mg_connect_resolved+0x218>)
 802018a:	2003      	movs	r0, #3
 802018c:	f7fa fb6a 	bl	801a864 <mg_log_prefix>
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	f103 0208 	add.w	r2, r3, #8
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	331c      	adds	r3, #28
 802019e:	9301      	str	r3, [sp, #4]
 80201a0:	4b63      	ldr	r3, [pc, #396]	@ (8020330 <mg_connect_resolved+0x21c>)
 80201a2:	9300      	str	r3, [sp, #0]
 80201a4:	4613      	mov	r3, r2
 80201a6:	4a62      	ldr	r2, [pc, #392]	@ (8020330 <mg_connect_resolved+0x21c>)
 80201a8:	4862      	ldr	r0, [pc, #392]	@ (8020334 <mg_connect_resolved+0x220>)
 80201aa:	f7fa fbab 	bl	801a904 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 80201ae:	2200      	movs	r2, #0
 80201b0:	2103      	movs	r1, #3
 80201b2:	6878      	ldr	r0, [r7, #4]
 80201b4:	f7f4 ff72 	bl	801509c <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80201be:	f003 0301 	and.w	r3, r3, #1
 80201c2:	b2db      	uxtb	r3, r3
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d017      	beq.n	80201f8 <mg_connect_resolved+0xe4>
 80201c8:	68fb      	ldr	r3, [r7, #12]
 80201ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80201ce:	d008      	beq.n	80201e2 <mg_connect_resolved+0xce>
 80201d0:	69fb      	ldr	r3, [r7, #28]
 80201d2:	689a      	ldr	r2, [r3, #8]
 80201d4:	69fb      	ldr	r3, [r7, #28]
 80201d6:	68db      	ldr	r3, [r3, #12]
 80201d8:	43db      	mvns	r3, r3
 80201da:	431a      	orrs	r2, r3
 80201dc:	68fb      	ldr	r3, [r7, #12]
 80201de:	429a      	cmp	r2, r3
 80201e0:	d10a      	bne.n	80201f8 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	33b0      	adds	r3, #176	@ 0xb0
 80201e6:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80201e8:	69bb      	ldr	r3, [r7, #24]
 80201ea:	3318      	adds	r3, #24
 80201ec:	2206      	movs	r2, #6
 80201ee:	21ff      	movs	r1, #255	@ 0xff
 80201f0:	4618      	mov	r0, r3
 80201f2:	f002 fe31 	bl	8022e58 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80201f6:	e091      	b.n	802031c <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80201f8:	69fb      	ldr	r3, [r7, #28]
 80201fa:	689b      	ldr	r3, [r3, #8]
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d036      	beq.n	802026e <mg_connect_resolved+0x15a>
 8020200:	69fb      	ldr	r3, [r7, #28]
 8020202:	689a      	ldr	r2, [r3, #8]
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	405a      	eors	r2, r3
 8020208:	69fb      	ldr	r3, [r7, #28]
 802020a:	68db      	ldr	r3, [r3, #12]
 802020c:	4013      	ands	r3, r2
 802020e:	2b00      	cmp	r3, #0
 8020210:	d12d      	bne.n	802026e <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8020212:	69fb      	ldr	r3, [r7, #28]
 8020214:	691a      	ldr	r2, [r3, #16]
 8020216:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8020218:	429a      	cmp	r2, r3
 802021a:	d028      	beq.n	802026e <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802021c:	4b41      	ldr	r3, [pc, #260]	@ (8020324 <mg_connect_resolved+0x210>)
 802021e:	681b      	ldr	r3, [r3, #0]
 8020220:	2b02      	cmp	r3, #2
 8020222:	dd0c      	ble.n	802023e <mg_connect_resolved+0x12a>
 8020224:	4b40      	ldr	r3, [pc, #256]	@ (8020328 <mg_connect_resolved+0x214>)
 8020226:	f241 7258 	movw	r2, #5976	@ 0x1758
 802022a:	4940      	ldr	r1, [pc, #256]	@ (802032c <mg_connect_resolved+0x218>)
 802022c:	2003      	movs	r0, #3
 802022e:	f7fa fb19 	bl	801a864 <mg_log_prefix>
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020236:	4619      	mov	r1, r3
 8020238:	483f      	ldr	r0, [pc, #252]	@ (8020338 <mg_connect_resolved+0x224>)
 802023a:	f7fa fb63 	bl	801a904 <mg_log>
    arp_ask(ifp, rem_ip);
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	4619      	mov	r1, r3
 8020242:	69f8      	ldr	r0, [r7, #28]
 8020244:	f7fd f9fa 	bl	801d63c <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8020248:	2102      	movs	r1, #2
 802024a:	6878      	ldr	r0, [r7, #4]
 802024c:	f7fd f97e 	bl	801d54c <settmout>
    c->is_arplooking = 1;
 8020250:	687a      	ldr	r2, [r7, #4]
 8020252:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020256:	f043 0310 	orr.w	r3, r3, #16
 802025a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 802025e:	687a      	ldr	r2, [r7, #4]
 8020260:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020264:	f043 0320 	orr.w	r3, r3, #32
 8020268:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 802026c:	e056      	b.n	802031c <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 802026e:	f107 030c 	add.w	r3, r7, #12
 8020272:	781b      	ldrb	r3, [r3, #0]
 8020274:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8020278:	2be0      	cmp	r3, #224	@ 0xe0
 802027a:	d126      	bne.n	80202ca <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	33b0      	adds	r3, #176	@ 0xb0
 8020280:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8020282:	4a2e      	ldr	r2, [pc, #184]	@ (802033c <mg_connect_resolved+0x228>)
 8020284:	f107 0308 	add.w	r3, r7, #8
 8020288:	6812      	ldr	r2, [r2, #0]
 802028a:	4611      	mov	r1, r2
 802028c:	8019      	strh	r1, [r3, #0]
 802028e:	3302      	adds	r3, #2
 8020290:	0c12      	lsrs	r2, r2, #16
 8020292:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 8020294:	693b      	ldr	r3, [r7, #16]
 8020296:	3318      	adds	r3, #24
 8020298:	461a      	mov	r2, r3
 802029a:	f107 0308 	add.w	r3, r7, #8
 802029e:	8819      	ldrh	r1, [r3, #0]
 80202a0:	789b      	ldrb	r3, [r3, #2]
 80202a2:	8011      	strh	r1, [r2, #0]
 80202a4:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80202a6:	693b      	ldr	r3, [r7, #16]
 80202a8:	3318      	adds	r3, #24
 80202aa:	1cd8      	adds	r0, r3, #3
 80202ac:	f107 030c 	add.w	r3, r7, #12
 80202b0:	3301      	adds	r3, #1
 80202b2:	2203      	movs	r2, #3
 80202b4:	4619      	mov	r1, r3
 80202b6:	f002 feb0 	bl	802301a <memcpy>
    s->mac[3] &= 0x7F;
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	7edb      	ldrb	r3, [r3, #27]
 80202be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80202c2:	b2da      	uxtb	r2, r3
 80202c4:	693b      	ldr	r3, [r7, #16]
 80202c6:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 80202c8:	e028      	b.n	802031c <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	33b0      	adds	r3, #176	@ 0xb0
 80202ce:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80202d0:	697b      	ldr	r3, [r7, #20]
 80202d2:	f103 0018 	add.w	r0, r3, #24
 80202d6:	69fb      	ldr	r3, [r7, #28]
 80202d8:	3346      	adds	r3, #70	@ 0x46
 80202da:	2206      	movs	r2, #6
 80202dc:	4619      	mov	r1, r3
 80202de:	f002 fe9c 	bl	802301a <memcpy>
    if (c->is_udp) {
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80202e8:	f003 0301 	and.w	r3, r3, #1
 80202ec:	b2db      	uxtb	r3, r3
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d005      	beq.n	80202fe <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 80202f2:	2200      	movs	r2, #0
 80202f4:	2104      	movs	r1, #4
 80202f6:	6878      	ldr	r0, [r7, #4]
 80202f8:	f7f4 fed0 	bl	801509c <mg_call>
}
 80202fc:	e00e      	b.n	802031c <mg_connect_resolved+0x208>
      send_syn(c);
 80202fe:	6878      	ldr	r0, [r7, #4]
 8020300:	f7ff fed2 	bl	80200a8 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8020304:	2103      	movs	r1, #3
 8020306:	6878      	ldr	r0, [r7, #4]
 8020308:	f7fd f920 	bl	801d54c <settmout>
      c->is_connecting = 1;
 802030c:	687a      	ldr	r2, [r7, #4]
 802030e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020312:	f043 0320 	orr.w	r3, r3, #32
 8020316:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 802031a:	e7ff      	b.n	802031c <mg_connect_resolved+0x208>
 802031c:	bf00      	nop
 802031e:	3720      	adds	r7, #32
 8020320:	46bd      	mov	sp, r7
 8020322:	bd80      	pop	{r7, pc}
 8020324:	20000294 	.word	0x20000294
 8020328:	0802979c 	.word	0x0802979c
 802032c:	08026838 	.word	0x08026838
 8020330:	08020acd 	.word	0x08020acd
 8020334:	08028318 	.word	0x08028318
 8020338:	08028328 	.word	0x08028328
 802033c:	0802833c 	.word	0x0802833c

08020340 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8020340:	b580      	push	{r7, lr}
 8020342:	b082      	sub	sp, #8
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
 8020348:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 802034a:	6838      	ldr	r0, [r7, #0]
 802034c:	f001 fbac 	bl	8021aa8 <mg_url_port>
 8020350:	4603      	mov	r3, r0
 8020352:	4618      	mov	r0, r3
 8020354:	f001 fca5 	bl	8021ca2 <mg_ntohs>
 8020358:	4603      	mov	r3, r0
 802035a:	461a      	mov	r2, r3
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	831a      	strh	r2, [r3, #24]
  return true;
 8020360:	2301      	movs	r3, #1
}
 8020362:	4618      	mov	r0, r3
 8020364:	3708      	adds	r7, #8
 8020366:	46bd      	mov	sp, r7
 8020368:	bd80      	pop	{r7, pc}
	...

0802036c <write_conn>:

static void write_conn(struct mg_connection *c) {
 802036c:	b580      	push	{r7, lr}
 802036e:	b084      	sub	sp, #16
 8020370:	af00      	add	r7, sp, #0
 8020372:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802037a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802037e:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020380:	2b00      	cmp	r3, #0
 8020382:	d009      	beq.n	8020398 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802038c:	461a      	mov	r2, r3
 802038e:	6878      	ldr	r0, [r7, #4]
 8020390:	f001 fa5f 	bl	8021852 <mg_tls_send>
 8020394:	4603      	mov	r3, r0
 8020396:	e008      	b.n	80203aa <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80203a0:	461a      	mov	r2, r3
 80203a2:	6878      	ldr	r0, [r7, #4]
 80203a4:	f7fe fce8 	bl	801ed78 <mg_io_send>
 80203a8:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80203aa:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80203b2:	d104      	bne.n	80203be <write_conn+0x52>
    mg_error(c, "tx err");
 80203b4:	490c      	ldr	r1, [pc, #48]	@ (80203e8 <write_conn+0x7c>)
 80203b6:	6878      	ldr	r0, [r7, #4]
 80203b8:	f7f4 fe90 	bl	80150dc <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 80203bc:	e010      	b.n	80203e0 <write_conn+0x74>
  } else if (len > 0) {
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	dd0d      	ble.n	80203e0 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	3348      	adds	r3, #72	@ 0x48
 80203c8:	68fa      	ldr	r2, [r7, #12]
 80203ca:	2100      	movs	r1, #0
 80203cc:	4618      	mov	r0, r3
 80203ce:	f7f9 fb37 	bl	8019a40 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80203d2:	f107 030c 	add.w	r3, r7, #12
 80203d6:	461a      	mov	r2, r3
 80203d8:	2108      	movs	r1, #8
 80203da:	6878      	ldr	r0, [r7, #4]
 80203dc:	f7f4 fe5e 	bl	801509c <mg_call>
}
 80203e0:	bf00      	nop
 80203e2:	3710      	adds	r7, #16
 80203e4:	46bd      	mov	sp, r7
 80203e6:	bd80      	pop	{r7, pc}
 80203e8:	08028340 	.word	0x08028340

080203ec <init_closure>:

static void init_closure(struct mg_connection *c) {
 80203ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203ee:	b08f      	sub	sp, #60	@ 0x3c
 80203f0:	af06      	add	r7, sp, #24
 80203f2:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	33b0      	adds	r3, #176	@ 0xb0
 80203f8:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 80203fa:	68fb      	ldr	r3, [r7, #12]
 80203fc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020400:	f003 0301 	and.w	r3, r3, #1
 8020404:	b2db      	uxtb	r3, r3
 8020406:	2b00      	cmp	r3, #0
 8020408:	d13f      	bne.n	802048a <init_closure+0x9e>
 802040a:	68fb      	ldr	r3, [r7, #12]
 802040c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020410:	f003 0301 	and.w	r3, r3, #1
 8020414:	b2db      	uxtb	r3, r3
 8020416:	2b00      	cmp	r3, #0
 8020418:	d137      	bne.n	802048a <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020420:	f003 0320 	and.w	r3, r3, #32
 8020424:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8020426:	2b00      	cmp	r3, #0
 8020428:	d12f      	bne.n	802048a <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 802042e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020430:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	331c      	adds	r3, #28
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 802043a:	69fb      	ldr	r3, [r7, #28]
 802043c:	f103 0618 	add.w	r6, r3, #24
 8020440:	697b      	ldr	r3, [r7, #20]
 8020442:	60bb      	str	r3, [r7, #8]
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	8b1c      	ldrh	r4, [r3, #24]
 8020448:	68fb      	ldr	r3, [r7, #12]
 802044a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802044c:	69fb      	ldr	r3, [r7, #28]
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	4618      	mov	r0, r3
 8020452:	f001 fc0d 	bl	8021c70 <mg_ntohl>
 8020456:	6078      	str	r0, [r7, #4]
 8020458:	69fb      	ldr	r3, [r7, #28]
 802045a:	685b      	ldr	r3, [r3, #4]
 802045c:	4618      	mov	r0, r3
 802045e:	f001 fc07 	bl	8021c70 <mg_ntohl>
 8020462:	4603      	mov	r3, r0
 8020464:	2200      	movs	r2, #0
 8020466:	9205      	str	r2, [sp, #20]
 8020468:	2200      	movs	r2, #0
 802046a:	9204      	str	r2, [sp, #16]
 802046c:	9303      	str	r3, [sp, #12]
 802046e:	6879      	ldr	r1, [r7, #4]
 8020470:	9102      	str	r1, [sp, #8]
 8020472:	9501      	str	r5, [sp, #4]
 8020474:	9400      	str	r4, [sp, #0]
 8020476:	2311      	movs	r3, #17
 8020478:	68ba      	ldr	r2, [r7, #8]
 802047a:	4631      	mov	r1, r6
 802047c:	69b8      	ldr	r0, [r7, #24]
 802047e:	f7fe fa23 	bl	801e8c8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8020482:	2104      	movs	r1, #4
 8020484:	68f8      	ldr	r0, [r7, #12]
 8020486:	f7fd f861 	bl	801d54c <settmout>
  }
}
 802048a:	bf00      	nop
 802048c:	3724      	adds	r7, #36	@ 0x24
 802048e:	46bd      	mov	sp, r7
 8020490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020492 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8020492:	b580      	push	{r7, lr}
 8020494:	b084      	sub	sp, #16
 8020496:	af00      	add	r7, sp, #0
 8020498:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	33b0      	adds	r3, #176	@ 0xb0
 802049e:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 80204a0:	68fb      	ldr	r3, [r7, #12]
 80204a2:	3320      	adds	r3, #32
 80204a4:	4618      	mov	r0, r3
 80204a6:	f7f9 fb16 	bl	8019ad6 <mg_iobuf_free>
  mg_close_conn(c);
 80204aa:	6878      	ldr	r0, [r7, #4]
 80204ac:	f7fc fddc 	bl	801d068 <mg_close_conn>
}
 80204b0:	bf00      	nop
 80204b2:	3710      	adds	r7, #16
 80204b4:	46bd      	mov	sp, r7
 80204b6:	bd80      	pop	{r7, pc}

080204b8 <can_write>:

static bool can_write(struct mg_connection *c) {
 80204b8:	b480      	push	{r7}
 80204ba:	b083      	sub	sp, #12
 80204bc:	af00      	add	r7, sp, #0
 80204be:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80204c6:	f003 0320 	and.w	r3, r3, #32
 80204ca:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d11d      	bne.n	802050c <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80204d6:	f003 0308 	and.w	r3, r3, #8
 80204da:	b2db      	uxtb	r3, r3
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d115      	bne.n	802050c <can_write+0x54>
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d011      	beq.n	802050c <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80204ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80204f2:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d109      	bne.n	802050c <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80204fe:	f003 0310 	and.w	r3, r3, #16
 8020502:	b2db      	uxtb	r3, r3
 8020504:	2b00      	cmp	r3, #0
 8020506:	d101      	bne.n	802050c <can_write+0x54>
 8020508:	2301      	movs	r3, #1
 802050a:	e000      	b.n	802050e <can_write+0x56>
 802050c:	2300      	movs	r3, #0
 802050e:	f003 0301 	and.w	r3, r3, #1
 8020512:	b2db      	uxtb	r3, r3
}
 8020514:	4618      	mov	r0, r3
 8020516:	370c      	adds	r7, #12
 8020518:	46bd      	mov	sp, r7
 802051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802051e:	4770      	bx	lr

08020520 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8020520:	b5b0      	push	{r4, r5, r7, lr}
 8020522:	b08c      	sub	sp, #48	@ 0x30
 8020524:	af04      	add	r7, sp, #16
 8020526:	6078      	str	r0, [r7, #4]
 8020528:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802052e:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8020530:	f001 fc48 	bl	8021dc4 <mg_millis>
 8020534:	4602      	mov	r2, r0
 8020536:	460b      	mov	r3, r1
 8020538:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8020542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020546:	4608      	mov	r0, r1
 8020548:	f001 f8ef 	bl	802172a <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 802054c:	69bb      	ldr	r3, [r7, #24]
 802054e:	2b00      	cmp	r3, #0
 8020550:	f000 80aa 	beq.w	80206a8 <mg_mgr_poll+0x188>
 8020554:	69bb      	ldr	r3, [r7, #24]
 8020556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020558:	2b00      	cmp	r3, #0
 802055a:	f000 80a5 	beq.w	80206a8 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 802055e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020562:	69b8      	ldr	r0, [r7, #24]
 8020564:	f7ff fab6 	bl	801fad4 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	61fb      	str	r3, [r7, #28]
 802056e:	e096      	b.n	802069e <mg_mgr_poll+0x17e>
    tmp = c->next;
 8020570:	69fb      	ldr	r3, [r7, #28]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8020576:	69fb      	ldr	r3, [r7, #28]
 8020578:	33b0      	adds	r3, #176	@ 0xb0
 802057a:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 802057c:	f107 0308 	add.w	r3, r7, #8
 8020580:	461a      	mov	r2, r3
 8020582:	2102      	movs	r1, #2
 8020584:	69f8      	ldr	r0, [r7, #28]
 8020586:	f7f4 fd89 	bl	801509c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802058a:	4b49      	ldr	r3, [pc, #292]	@ (80206b0 <mg_mgr_poll+0x190>)
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	2b03      	cmp	r3, #3
 8020590:	dd48      	ble.n	8020624 <mg_mgr_poll+0x104>
 8020592:	4b48      	ldr	r3, [pc, #288]	@ (80206b4 <mg_mgr_poll+0x194>)
 8020594:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8020598:	4947      	ldr	r1, [pc, #284]	@ (80206b8 <mg_mgr_poll+0x198>)
 802059a:	2004      	movs	r0, #4
 802059c:	f7fa f962 	bl	801a864 <mg_log_prefix>
 80205a0:	69fb      	ldr	r3, [r7, #28]
 80205a2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80205a4:	69fb      	ldr	r3, [r7, #28]
 80205a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80205aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80205ae:	b2db      	uxtb	r3, r3
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d001      	beq.n	80205b8 <mg_mgr_poll+0x98>
 80205b4:	2454      	movs	r4, #84	@ 0x54
 80205b6:	e000      	b.n	80205ba <mg_mgr_poll+0x9a>
 80205b8:	2474      	movs	r4, #116	@ 0x74
 80205ba:	69fb      	ldr	r3, [r7, #28]
 80205bc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80205c0:	f003 0320 	and.w	r3, r3, #32
 80205c4:	b2db      	uxtb	r3, r3
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d001      	beq.n	80205ce <mg_mgr_poll+0xae>
 80205ca:	2543      	movs	r5, #67	@ 0x43
 80205cc:	e000      	b.n	80205d0 <mg_mgr_poll+0xb0>
 80205ce:	2563      	movs	r5, #99	@ 0x63
 80205d0:	69fb      	ldr	r3, [r7, #28]
 80205d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80205d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80205da:	b2db      	uxtb	r3, r3
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d001      	beq.n	80205e4 <mg_mgr_poll+0xc4>
 80205e0:	2348      	movs	r3, #72	@ 0x48
 80205e2:	e000      	b.n	80205e6 <mg_mgr_poll+0xc6>
 80205e4:	2368      	movs	r3, #104	@ 0x68
 80205e6:	69fa      	ldr	r2, [r7, #28]
 80205e8:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 80205ec:	f002 0208 	and.w	r2, r2, #8
 80205f0:	b2d2      	uxtb	r2, r2
 80205f2:	2a00      	cmp	r2, #0
 80205f4:	d001      	beq.n	80205fa <mg_mgr_poll+0xda>
 80205f6:	2252      	movs	r2, #82	@ 0x52
 80205f8:	e000      	b.n	80205fc <mg_mgr_poll+0xdc>
 80205fa:	2272      	movs	r2, #114	@ 0x72
 80205fc:	69f9      	ldr	r1, [r7, #28]
 80205fe:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8020602:	f001 0120 	and.w	r1, r1, #32
 8020606:	b2c9      	uxtb	r1, r1
 8020608:	2900      	cmp	r1, #0
 802060a:	d001      	beq.n	8020610 <mg_mgr_poll+0xf0>
 802060c:	2143      	movs	r1, #67	@ 0x43
 802060e:	e000      	b.n	8020612 <mg_mgr_poll+0xf2>
 8020610:	2163      	movs	r1, #99	@ 0x63
 8020612:	9102      	str	r1, [sp, #8]
 8020614:	9201      	str	r2, [sp, #4]
 8020616:	9300      	str	r3, [sp, #0]
 8020618:	462b      	mov	r3, r5
 802061a:	4622      	mov	r2, r4
 802061c:	4601      	mov	r1, r0
 802061e:	4827      	ldr	r0, [pc, #156]	@ (80206bc <mg_mgr_poll+0x19c>)
 8020620:	f7fa f970 	bl	801a904 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8020624:	69fb      	ldr	r3, [r7, #28]
 8020626:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802062a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802062e:	b2db      	uxtb	r3, r3
 8020630:	2b00      	cmp	r3, #0
 8020632:	d00b      	beq.n	802064c <mg_mgr_poll+0x12c>
 8020634:	69f8      	ldr	r0, [r7, #28]
 8020636:	f001 f925 	bl	8021884 <mg_tls_pending>
 802063a:	4603      	mov	r3, r0
 802063c:	2b00      	cmp	r3, #0
 802063e:	d005      	beq.n	802064c <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8020640:	69fb      	ldr	r3, [r7, #28]
 8020642:	3368      	adds	r3, #104	@ 0x68
 8020644:	4619      	mov	r1, r3
 8020646:	69f8      	ldr	r0, [r7, #28]
 8020648:	f7fe fc0e 	bl	801ee68 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 802064c:	69f8      	ldr	r0, [r7, #28]
 802064e:	f7ff ff33 	bl	80204b8 <can_write>
 8020652:	4603      	mov	r3, r0
 8020654:	2b00      	cmp	r3, #0
 8020656:	d002      	beq.n	802065e <mg_mgr_poll+0x13e>
 8020658:	69f8      	ldr	r0, [r7, #28]
 802065a:	f7ff fe87 	bl	802036c <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 802065e:	69fb      	ldr	r3, [r7, #28]
 8020660:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020664:	f003 0310 	and.w	r3, r3, #16
 8020668:	b2db      	uxtb	r3, r3
 802066a:	2b00      	cmp	r3, #0
 802066c:	d00a      	beq.n	8020684 <mg_mgr_poll+0x164>
 802066e:	69fb      	ldr	r3, [r7, #28]
 8020670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020672:	2b00      	cmp	r3, #0
 8020674:	d106      	bne.n	8020684 <mg_mgr_poll+0x164>
 8020676:	693b      	ldr	r3, [r7, #16]
 8020678:	7f9b      	ldrb	r3, [r3, #30]
 802067a:	2b04      	cmp	r3, #4
 802067c:	d002      	beq.n	8020684 <mg_mgr_poll+0x164>
      init_closure(c);
 802067e:	69f8      	ldr	r0, [r7, #28]
 8020680:	f7ff feb4 	bl	80203ec <init_closure>
    if (c->is_closing) close_conn(c);
 8020684:	69fb      	ldr	r3, [r7, #28]
 8020686:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802068a:	f003 0320 	and.w	r3, r3, #32
 802068e:	b2db      	uxtb	r3, r3
 8020690:	2b00      	cmp	r3, #0
 8020692:	d002      	beq.n	802069a <mg_mgr_poll+0x17a>
 8020694:	69f8      	ldr	r0, [r7, #28]
 8020696:	f7ff fefc 	bl	8020492 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 802069a:	697b      	ldr	r3, [r7, #20]
 802069c:	61fb      	str	r3, [r7, #28]
 802069e:	69fb      	ldr	r3, [r7, #28]
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	f47f af65 	bne.w	8020570 <mg_mgr_poll+0x50>
 80206a6:	e000      	b.n	80206aa <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 80206a8:	bf00      	nop
  }
  (void) ms;
}
 80206aa:	3720      	adds	r7, #32
 80206ac:	46bd      	mov	sp, r7
 80206ae:	bdb0      	pop	{r4, r5, r7, pc}
 80206b0:	20000294 	.word	0x20000294
 80206b4:	080297b0 	.word	0x080297b0
 80206b8:	08026838 	.word	0x08026838
 80206bc:	08028348 	.word	0x08028348

080206c0 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80206c0:	b5b0      	push	{r4, r5, r7, lr}
 80206c2:	b08c      	sub	sp, #48	@ 0x30
 80206c4:	af04      	add	r7, sp, #16
 80206c6:	60f8      	str	r0, [r7, #12]
 80206c8:	60b9      	str	r1, [r7, #8]
 80206ca:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80206cc:	68fb      	ldr	r3, [r7, #12]
 80206ce:	685b      	ldr	r3, [r3, #4]
 80206d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206d2:	61bb      	str	r3, [r7, #24]
  bool res = false;
 80206d4:	2300      	movs	r3, #0
 80206d6:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80206d8:	68fb      	ldr	r3, [r7, #12]
 80206da:	331c      	adds	r3, #28
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 80206e0:	69bb      	ldr	r3, [r7, #24]
 80206e2:	689b      	ldr	r3, [r3, #8]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d004      	beq.n	80206f2 <mg_send+0x32>
 80206e8:	69bb      	ldr	r3, [r7, #24]
 80206ea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80206ee:	2b03      	cmp	r3, #3
 80206f0:	d004      	beq.n	80206fc <mg_send+0x3c>
    mg_error(c, "net down");
 80206f2:	4921      	ldr	r1, [pc, #132]	@ (8020778 <mg_send+0xb8>)
 80206f4:	68f8      	ldr	r0, [r7, #12]
 80206f6:	f7f4 fcf1 	bl	80150dc <mg_error>
 80206fa:	e037      	b.n	802076c <mg_send+0xac>
  } else if (c->is_udp) {
 80206fc:	68fb      	ldr	r3, [r7, #12]
 80206fe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020702:	f003 0301 	and.w	r3, r3, #1
 8020706:	b2db      	uxtb	r3, r3
 8020708:	2b00      	cmp	r3, #0
 802070a:	d020      	beq.n	802074e <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 802070c:	68fb      	ldr	r3, [r7, #12]
 802070e:	33b0      	adds	r3, #176	@ 0xb0
 8020710:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8020712:	6879      	ldr	r1, [r7, #4]
 8020714:	68f8      	ldr	r0, [r7, #12]
 8020716:	f7fe faa1 	bl	801ec5c <trim_len>
 802071a:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 802071c:	697b      	ldr	r3, [r7, #20]
 802071e:	f103 0018 	add.w	r0, r3, #24
 8020722:	69bb      	ldr	r3, [r7, #24]
 8020724:	689c      	ldr	r4, [r3, #8]
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	8b1d      	ldrh	r5, [r3, #24]
 802072a:	693b      	ldr	r3, [r7, #16]
 802072c:	68fa      	ldr	r2, [r7, #12]
 802072e:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8020730:	6879      	ldr	r1, [r7, #4]
 8020732:	9103      	str	r1, [sp, #12]
 8020734:	68b9      	ldr	r1, [r7, #8]
 8020736:	9102      	str	r1, [sp, #8]
 8020738:	9201      	str	r2, [sp, #4]
 802073a:	9300      	str	r3, [sp, #0]
 802073c:	462b      	mov	r3, r5
 802073e:	4622      	mov	r2, r4
 8020740:	4601      	mov	r1, r0
 8020742:	69b8      	ldr	r0, [r7, #24]
 8020744:	f7fd f8c2 	bl	801d8cc <tx_udp>
    res = true;
 8020748:	2301      	movs	r3, #1
 802074a:	77fb      	strb	r3, [r7, #31]
 802074c:	e00e      	b.n	802076c <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 802074e:	68fb      	ldr	r3, [r7, #12]
 8020750:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8020754:	68fb      	ldr	r3, [r7, #12]
 8020756:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	68ba      	ldr	r2, [r7, #8]
 802075c:	f7f9 f91e 	bl	801999c <mg_iobuf_add>
 8020760:	4603      	mov	r3, r0
 8020762:	2b00      	cmp	r3, #0
 8020764:	bf14      	ite	ne
 8020766:	2301      	movne	r3, #1
 8020768:	2300      	moveq	r3, #0
 802076a:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 802076c:	7ffb      	ldrb	r3, [r7, #31]
}
 802076e:	4618      	mov	r0, r3
 8020770:	3720      	adds	r7, #32
 8020772:	46bd      	mov	sp, r7
 8020774:	bdb0      	pop	{r4, r5, r7, pc}
 8020776:	bf00      	nop
 8020778:	0802835c 	.word	0x0802835c

0802077c <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 802077c:	b580      	push	{r7, lr}
 802077e:	b084      	sub	sp, #16
 8020780:	af00      	add	r7, sp, #0
 8020782:	4603      	mov	r3, r0
 8020784:	6039      	str	r1, [r7, #0]
 8020786:	71fb      	strb	r3, [r7, #7]
 8020788:	4613      	mov	r3, r2
 802078a:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 802078c:	683b      	ldr	r3, [r7, #0]
 802078e:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8020790:	79bb      	ldrb	r3, [r7, #6]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d00d      	beq.n	80207b2 <mg_pfn_iobuf_private+0x36>
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	689b      	ldr	r3, [r3, #8]
 802079a:	1c9a      	adds	r2, r3, #2
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	685b      	ldr	r3, [r3, #4]
 80207a0:	429a      	cmp	r2, r3
 80207a2:	d906      	bls.n	80207b2 <mg_pfn_iobuf_private+0x36>
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	689b      	ldr	r3, [r3, #8]
 80207a8:	3302      	adds	r3, #2
 80207aa:	4619      	mov	r1, r3
 80207ac:	68f8      	ldr	r0, [r7, #12]
 80207ae:	f7f9 f869 	bl	8019884 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	689b      	ldr	r3, [r3, #8]
 80207b6:	1c9a      	adds	r2, r3, #2
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	429a      	cmp	r2, r3
 80207be:	d811      	bhi.n	80207e4 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	681a      	ldr	r2, [r3, #0]
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	689b      	ldr	r3, [r3, #8]
 80207c8:	1c58      	adds	r0, r3, #1
 80207ca:	68f9      	ldr	r1, [r7, #12]
 80207cc:	6088      	str	r0, [r1, #8]
 80207ce:	4413      	add	r3, r2
 80207d0:	79fa      	ldrb	r2, [r7, #7]
 80207d2:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	681a      	ldr	r2, [r3, #0]
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	689b      	ldr	r3, [r3, #8]
 80207dc:	4413      	add	r3, r2
 80207de:	2200      	movs	r2, #0
 80207e0:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 80207e2:	e00f      	b.n	8020804 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	689a      	ldr	r2, [r3, #8]
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	685b      	ldr	r3, [r3, #4]
 80207ec:	429a      	cmp	r2, r3
 80207ee:	d209      	bcs.n	8020804 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	681a      	ldr	r2, [r3, #0]
 80207f4:	68fb      	ldr	r3, [r7, #12]
 80207f6:	689b      	ldr	r3, [r3, #8]
 80207f8:	1c58      	adds	r0, r3, #1
 80207fa:	68f9      	ldr	r1, [r7, #12]
 80207fc:	6088      	str	r0, [r1, #8]
 80207fe:	4413      	add	r3, r2
 8020800:	2200      	movs	r2, #0
 8020802:	701a      	strb	r2, [r3, #0]
}
 8020804:	bf00      	nop
 8020806:	3710      	adds	r7, #16
 8020808:	46bd      	mov	sp, r7
 802080a:	bd80      	pop	{r7, pc}

0802080c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 802080c:	b580      	push	{r7, lr}
 802080e:	b082      	sub	sp, #8
 8020810:	af00      	add	r7, sp, #0
 8020812:	4603      	mov	r3, r0
 8020814:	6039      	str	r1, [r7, #0]
 8020816:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8020818:	79fb      	ldrb	r3, [r7, #7]
 802081a:	2200      	movs	r2, #0
 802081c:	6839      	ldr	r1, [r7, #0]
 802081e:	4618      	mov	r0, r3
 8020820:	f7ff ffac 	bl	802077c <mg_pfn_iobuf_private>
}
 8020824:	bf00      	nop
 8020826:	3708      	adds	r7, #8
 8020828:	46bd      	mov	sp, r7
 802082a:	bd80      	pop	{r7, pc}

0802082c <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 802082c:	b580      	push	{r7, lr}
 802082e:	b082      	sub	sp, #8
 8020830:	af00      	add	r7, sp, #0
 8020832:	4603      	mov	r3, r0
 8020834:	6039      	str	r1, [r7, #0]
 8020836:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8020838:	79fb      	ldrb	r3, [r7, #7]
 802083a:	2201      	movs	r2, #1
 802083c:	6839      	ldr	r1, [r7, #0]
 802083e:	4618      	mov	r0, r3
 8020840:	f7ff ff9c 	bl	802077c <mg_pfn_iobuf_private>
}
 8020844:	bf00      	nop
 8020846:	3708      	adds	r7, #8
 8020848:	46bd      	mov	sp, r7
 802084a:	bd80      	pop	{r7, pc}

0802084c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 802084c:	b580      	push	{r7, lr}
 802084e:	b08a      	sub	sp, #40	@ 0x28
 8020850:	af00      	add	r7, sp, #0
 8020852:	60f8      	str	r0, [r7, #12]
 8020854:	60b9      	str	r1, [r7, #8]
 8020856:	607a      	str	r2, [r7, #4]
 8020858:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	617b      	str	r3, [r7, #20]
 802085e:	68bb      	ldr	r3, [r7, #8]
 8020860:	61bb      	str	r3, [r7, #24]
 8020862:	2300      	movs	r3, #0
 8020864:	61fb      	str	r3, [r7, #28]
 8020866:	2300      	movs	r3, #0
 8020868:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802086a:	f107 0114 	add.w	r1, r7, #20
 802086e:	683b      	ldr	r3, [r7, #0]
 8020870:	687a      	ldr	r2, [r7, #4]
 8020872:	4809      	ldr	r0, [pc, #36]	@ (8020898 <mg_vsnprintf+0x4c>)
 8020874:	f7f5 f942 	bl	8015afc <mg_vxprintf>
 8020878:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 802087a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802087c:	68bb      	ldr	r3, [r7, #8]
 802087e:	429a      	cmp	r2, r3
 8020880:	d204      	bcs.n	802088c <mg_vsnprintf+0x40>
 8020882:	68fa      	ldr	r2, [r7, #12]
 8020884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020886:	4413      	add	r3, r2
 8020888:	2200      	movs	r2, #0
 802088a:	701a      	strb	r2, [r3, #0]
  return n;
 802088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802088e:	4618      	mov	r0, r3
 8020890:	3728      	adds	r7, #40	@ 0x28
 8020892:	46bd      	mov	sp, r7
 8020894:	bd80      	pop	{r7, pc}
 8020896:	bf00      	nop
 8020898:	0802080d 	.word	0x0802080d

0802089c <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 802089c:	b40c      	push	{r2, r3}
 802089e:	b580      	push	{r7, lr}
 80208a0:	b084      	sub	sp, #16
 80208a2:	af00      	add	r7, sp, #0
 80208a4:	6078      	str	r0, [r7, #4]
 80208a6:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 80208a8:	f107 031c 	add.w	r3, r7, #28
 80208ac:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80208ae:	f107 0308 	add.w	r3, r7, #8
 80208b2:	69ba      	ldr	r2, [r7, #24]
 80208b4:	6839      	ldr	r1, [r7, #0]
 80208b6:	6878      	ldr	r0, [r7, #4]
 80208b8:	f7ff ffc8 	bl	802084c <mg_vsnprintf>
 80208bc:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 80208be:	68fb      	ldr	r3, [r7, #12]
}
 80208c0:	4618      	mov	r0, r3
 80208c2:	3710      	adds	r7, #16
 80208c4:	46bd      	mov	sp, r7
 80208c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80208ca:	b002      	add	sp, #8
 80208cc:	4770      	bx	lr
	...

080208d0 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 80208d0:	b580      	push	{r7, lr}
 80208d2:	b086      	sub	sp, #24
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	6078      	str	r0, [r7, #4]
 80208d8:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 80208da:	2300      	movs	r3, #0
 80208dc:	60bb      	str	r3, [r7, #8]
 80208de:	2300      	movs	r3, #0
 80208e0:	60fb      	str	r3, [r7, #12]
 80208e2:	2300      	movs	r3, #0
 80208e4:	613b      	str	r3, [r7, #16]
 80208e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80208ea:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80208ec:	f107 0108 	add.w	r1, r7, #8
 80208f0:	683b      	ldr	r3, [r7, #0]
 80208f2:	687a      	ldr	r2, [r7, #4]
 80208f4:	4803      	ldr	r0, [pc, #12]	@ (8020904 <mg_vmprintf+0x34>)
 80208f6:	f7f5 f901 	bl	8015afc <mg_vxprintf>
  return (char *) io.buf;
 80208fa:	68bb      	ldr	r3, [r7, #8]
}
 80208fc:	4618      	mov	r0, r3
 80208fe:	3718      	adds	r7, #24
 8020900:	46bd      	mov	sp, r7
 8020902:	bd80      	pop	{r7, pc}
 8020904:	0802082d 	.word	0x0802082d

08020908 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8020908:	b40f      	push	{r0, r1, r2, r3}
 802090a:	b580      	push	{r7, lr}
 802090c:	b082      	sub	sp, #8
 802090e:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8020910:	f107 0314 	add.w	r3, r7, #20
 8020914:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 8020916:	463b      	mov	r3, r7
 8020918:	4619      	mov	r1, r3
 802091a:	6938      	ldr	r0, [r7, #16]
 802091c:	f7ff ffd8 	bl	80208d0 <mg_vmprintf>
 8020920:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8020922:	687b      	ldr	r3, [r7, #4]
}
 8020924:	4618      	mov	r0, r3
 8020926:	3708      	adds	r7, #8
 8020928:	46bd      	mov	sp, r7
 802092a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802092e:	b004      	add	sp, #16
 8020930:	4770      	bx	lr

08020932 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8020932:	b580      	push	{r7, lr}
 8020934:	b082      	sub	sp, #8
 8020936:	af00      	add	r7, sp, #0
 8020938:	4603      	mov	r3, r0
 802093a:	6039      	str	r1, [r7, #0]
 802093c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 802093e:	79fb      	ldrb	r3, [r7, #7]
 8020940:	4618      	mov	r0, r3
 8020942:	f002 f96b 	bl	8022c1c <putchar>
  (void) param;
}
 8020946:	bf00      	nop
 8020948:	3708      	adds	r7, #8
 802094a:	46bd      	mov	sp, r7
 802094c:	bd80      	pop	{r7, pc}
	...

08020950 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8020950:	b580      	push	{r7, lr}
 8020952:	b088      	sub	sp, #32
 8020954:	af04      	add	r7, sp, #16
 8020956:	60f8      	str	r0, [r7, #12]
 8020958:	60b9      	str	r1, [r7, #8]
 802095a:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	781b      	ldrb	r3, [r3, #0]
 8020960:	4618      	mov	r0, r3
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	3301      	adds	r3, #1
 8020966:	781b      	ldrb	r3, [r3, #0]
 8020968:	461a      	mov	r2, r3
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	3302      	adds	r3, #2
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	4619      	mov	r1, r3
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	3303      	adds	r3, #3
 8020976:	781b      	ldrb	r3, [r3, #0]
 8020978:	9302      	str	r3, [sp, #8]
 802097a:	9101      	str	r1, [sp, #4]
 802097c:	9200      	str	r2, [sp, #0]
 802097e:	4603      	mov	r3, r0
 8020980:	4a04      	ldr	r2, [pc, #16]	@ (8020994 <print_ip4+0x44>)
 8020982:	68b9      	ldr	r1, [r7, #8]
 8020984:	68f8      	ldr	r0, [r7, #12]
 8020986:	f7f5 f89e 	bl	8015ac6 <mg_xprintf>
 802098a:	4603      	mov	r3, r0
}
 802098c:	4618      	mov	r0, r3
 802098e:	3710      	adds	r7, #16
 8020990:	46bd      	mov	sp, r7
 8020992:	bd80      	pop	{r7, pc}
 8020994:	08028368 	.word	0x08028368

08020998 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8020998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802099c:	b08e      	sub	sp, #56	@ 0x38
 802099e:	af08      	add	r7, sp, #32
 80209a0:	6178      	str	r0, [r7, #20]
 80209a2:	6139      	str	r1, [r7, #16]
 80209a4:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	881b      	ldrh	r3, [r3, #0]
 80209aa:	4618      	mov	r0, r3
 80209ac:	f001 f979 	bl	8021ca2 <mg_ntohs>
 80209b0:	4603      	mov	r3, r0
 80209b2:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	3302      	adds	r3, #2
 80209b8:	881b      	ldrh	r3, [r3, #0]
 80209ba:	4618      	mov	r0, r3
 80209bc:	f001 f971 	bl	8021ca2 <mg_ntohs>
 80209c0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80209c2:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80209c4:	68fb      	ldr	r3, [r7, #12]
 80209c6:	3304      	adds	r3, #4
 80209c8:	881b      	ldrh	r3, [r3, #0]
 80209ca:	4618      	mov	r0, r3
 80209cc:	f001 f969 	bl	8021ca2 <mg_ntohs>
 80209d0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80209d2:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	3306      	adds	r3, #6
 80209d8:	881b      	ldrh	r3, [r3, #0]
 80209da:	4618      	mov	r0, r3
 80209dc:	f001 f961 	bl	8021ca2 <mg_ntohs>
 80209e0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80209e2:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80209e4:	68fb      	ldr	r3, [r7, #12]
 80209e6:	3308      	adds	r3, #8
 80209e8:	881b      	ldrh	r3, [r3, #0]
 80209ea:	4618      	mov	r0, r3
 80209ec:	f001 f959 	bl	8021ca2 <mg_ntohs>
 80209f0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80209f2:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	330a      	adds	r3, #10
 80209f8:	881b      	ldrh	r3, [r3, #0]
 80209fa:	4618      	mov	r0, r3
 80209fc:	f001 f951 	bl	8021ca2 <mg_ntohs>
 8020a00:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020a02:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	330c      	adds	r3, #12
 8020a08:	881b      	ldrh	r3, [r3, #0]
 8020a0a:	4618      	mov	r0, r3
 8020a0c:	f001 f949 	bl	8021ca2 <mg_ntohs>
 8020a10:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020a12:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8020a14:	68fb      	ldr	r3, [r7, #12]
 8020a16:	330e      	adds	r3, #14
 8020a18:	881b      	ldrh	r3, [r3, #0]
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	f001 f941 	bl	8021ca2 <mg_ntohs>
 8020a20:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020a22:	9306      	str	r3, [sp, #24]
 8020a24:	683a      	ldr	r2, [r7, #0]
 8020a26:	9205      	str	r2, [sp, #20]
 8020a28:	687a      	ldr	r2, [r7, #4]
 8020a2a:	9204      	str	r2, [sp, #16]
 8020a2c:	68bb      	ldr	r3, [r7, #8]
 8020a2e:	9303      	str	r3, [sp, #12]
 8020a30:	9602      	str	r6, [sp, #8]
 8020a32:	9501      	str	r5, [sp, #4]
 8020a34:	9400      	str	r4, [sp, #0]
 8020a36:	4643      	mov	r3, r8
 8020a38:	4a05      	ldr	r2, [pc, #20]	@ (8020a50 <print_ip6+0xb8>)
 8020a3a:	6939      	ldr	r1, [r7, #16]
 8020a3c:	6978      	ldr	r0, [r7, #20]
 8020a3e:	f7f5 f842 	bl	8015ac6 <mg_xprintf>
 8020a42:	4603      	mov	r3, r0
}
 8020a44:	4618      	mov	r0, r3
 8020a46:	3718      	adds	r7, #24
 8020a48:	46bd      	mov	sp, r7
 8020a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a4e:	bf00      	nop
 8020a50:	08028374 	.word	0x08028374

08020a54 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8020a54:	b580      	push	{r7, lr}
 8020a56:	b086      	sub	sp, #24
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	60f8      	str	r0, [r7, #12]
 8020a5c:	60b9      	str	r1, [r7, #8]
 8020a5e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	681b      	ldr	r3, [r3, #0]
 8020a64:	1d19      	adds	r1, r3, #4
 8020a66:	687a      	ldr	r2, [r7, #4]
 8020a68:	6011      	str	r1, [r2, #0]
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8020a6e:	697a      	ldr	r2, [r7, #20]
 8020a70:	68b9      	ldr	r1, [r7, #8]
 8020a72:	68f8      	ldr	r0, [r7, #12]
 8020a74:	f7ff ff6c 	bl	8020950 <print_ip4>
 8020a78:	4603      	mov	r3, r0
}
 8020a7a:	4618      	mov	r0, r3
 8020a7c:	3718      	adds	r7, #24
 8020a7e:	46bd      	mov	sp, r7
 8020a80:	bd80      	pop	{r7, pc}

08020a82 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8020a82:	b580      	push	{r7, lr}
 8020a84:	b086      	sub	sp, #24
 8020a86:	af00      	add	r7, sp, #0
 8020a88:	60f8      	str	r0, [r7, #12]
 8020a8a:	60b9      	str	r1, [r7, #8]
 8020a8c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	1d19      	adds	r1, r3, #4
 8020a94:	687a      	ldr	r2, [r7, #4]
 8020a96:	6011      	str	r1, [r2, #0]
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8020a9c:	697b      	ldr	r3, [r7, #20]
 8020a9e:	7cdb      	ldrb	r3, [r3, #19]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d007      	beq.n	8020ab4 <mg_print_ip+0x32>
 8020aa4:	697b      	ldr	r3, [r7, #20]
 8020aa6:	461a      	mov	r2, r3
 8020aa8:	68b9      	ldr	r1, [r7, #8]
 8020aaa:	68f8      	ldr	r0, [r7, #12]
 8020aac:	f7ff ff74 	bl	8020998 <print_ip6>
 8020ab0:	4603      	mov	r3, r0
 8020ab2:	e006      	b.n	8020ac2 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8020ab4:	697b      	ldr	r3, [r7, #20]
 8020ab6:	461a      	mov	r2, r3
 8020ab8:	68b9      	ldr	r1, [r7, #8]
 8020aba:	68f8      	ldr	r0, [r7, #12]
 8020abc:	f7ff ff48 	bl	8020950 <print_ip4>
 8020ac0:	4603      	mov	r3, r0
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3718      	adds	r7, #24
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}
	...

08020acc <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b088      	sub	sp, #32
 8020ad0:	af02      	add	r7, sp, #8
 8020ad2:	60f8      	str	r0, [r7, #12]
 8020ad4:	60b9      	str	r1, [r7, #8]
 8020ad6:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	1d19      	adds	r1, r3, #4
 8020ade:	687a      	ldr	r2, [r7, #4]
 8020ae0:	6011      	str	r1, [r2, #0]
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8020ae6:	697b      	ldr	r3, [r7, #20]
 8020ae8:	8a1b      	ldrh	r3, [r3, #16]
 8020aea:	4618      	mov	r0, r3
 8020aec:	f001 f8d9 	bl	8021ca2 <mg_ntohs>
 8020af0:	4603      	mov	r3, r0
 8020af2:	9301      	str	r3, [sp, #4]
 8020af4:	697b      	ldr	r3, [r7, #20]
 8020af6:	9300      	str	r3, [sp, #0]
 8020af8:	4b05      	ldr	r3, [pc, #20]	@ (8020b10 <mg_print_ip_port+0x44>)
 8020afa:	4a06      	ldr	r2, [pc, #24]	@ (8020b14 <mg_print_ip_port+0x48>)
 8020afc:	68b9      	ldr	r1, [r7, #8]
 8020afe:	68f8      	ldr	r0, [r7, #12]
 8020b00:	f7f4 ffe1 	bl	8015ac6 <mg_xprintf>
 8020b04:	4603      	mov	r3, r0
}
 8020b06:	4618      	mov	r0, r3
 8020b08:	3718      	adds	r7, #24
 8020b0a:	46bd      	mov	sp, r7
 8020b0c:	bd80      	pop	{r7, pc}
 8020b0e:	bf00      	nop
 8020b10:	08020a83 	.word	0x08020a83
 8020b14:	08028390 	.word	0x08028390

08020b18 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8020b18:	b5b0      	push	{r4, r5, r7, lr}
 8020b1a:	b08c      	sub	sp, #48	@ 0x30
 8020b1c:	af06      	add	r7, sp, #24
 8020b1e:	60f8      	str	r0, [r7, #12]
 8020b20:	60b9      	str	r1, [r7, #8]
 8020b22:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	1d19      	adds	r1, r3, #4
 8020b2a:	687a      	ldr	r2, [r7, #4]
 8020b2c:	6011      	str	r1, [r2, #0]
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8020b32:	697b      	ldr	r3, [r7, #20]
 8020b34:	781b      	ldrb	r3, [r3, #0]
 8020b36:	461d      	mov	r5, r3
 8020b38:	697b      	ldr	r3, [r7, #20]
 8020b3a:	3301      	adds	r3, #1
 8020b3c:	781b      	ldrb	r3, [r3, #0]
 8020b3e:	461a      	mov	r2, r3
 8020b40:	697b      	ldr	r3, [r7, #20]
 8020b42:	3302      	adds	r3, #2
 8020b44:	781b      	ldrb	r3, [r3, #0]
 8020b46:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8020b48:	697b      	ldr	r3, [r7, #20]
 8020b4a:	3303      	adds	r3, #3
 8020b4c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8020b4e:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8020b50:	697b      	ldr	r3, [r7, #20]
 8020b52:	3304      	adds	r3, #4
 8020b54:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8020b56:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8020b58:	697b      	ldr	r3, [r7, #20]
 8020b5a:	3305      	adds	r3, #5
 8020b5c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8020b5e:	9304      	str	r3, [sp, #16]
 8020b60:	9403      	str	r4, [sp, #12]
 8020b62:	9002      	str	r0, [sp, #8]
 8020b64:	9101      	str	r1, [sp, #4]
 8020b66:	9200      	str	r2, [sp, #0]
 8020b68:	462b      	mov	r3, r5
 8020b6a:	4a05      	ldr	r2, [pc, #20]	@ (8020b80 <mg_print_mac+0x68>)
 8020b6c:	68b9      	ldr	r1, [r7, #8]
 8020b6e:	68f8      	ldr	r0, [r7, #12]
 8020b70:	f7f4 ffa9 	bl	8015ac6 <mg_xprintf>
 8020b74:	4603      	mov	r3, r0
}
 8020b76:	4618      	mov	r0, r3
 8020b78:	3718      	adds	r7, #24
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8020b7e:	bf00      	nop
 8020b80:	08028398 	.word	0x08028398

08020b84 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8020b84:	b580      	push	{r7, lr}
 8020b86:	b088      	sub	sp, #32
 8020b88:	af00      	add	r7, sp, #0
 8020b8a:	60f8      	str	r0, [r7, #12]
 8020b8c:	60b9      	str	r1, [r7, #8]
 8020b8e:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	1d19      	adds	r1, r3, #4
 8020b96:	687a      	ldr	r2, [r7, #4]
 8020b98:	6011      	str	r1, [r2, #0]
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	1d19      	adds	r1, r3, #4
 8020ba4:	687a      	ldr	r2, [r7, #4]
 8020ba6:	6011      	str	r1, [r2, #0]
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8020bac:	4b16      	ldr	r3, [pc, #88]	@ (8020c08 <mg_print_hex+0x84>)
 8020bae:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8020bb0:	2300      	movs	r3, #0
 8020bb2:	61fb      	str	r3, [r7, #28]
 8020bb4:	e01e      	b.n	8020bf4 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8020bb6:	697a      	ldr	r2, [r7, #20]
 8020bb8:	69fb      	ldr	r3, [r7, #28]
 8020bba:	4413      	add	r3, r2
 8020bbc:	781b      	ldrb	r3, [r3, #0]
 8020bbe:	091b      	lsrs	r3, r3, #4
 8020bc0:	b2db      	uxtb	r3, r3
 8020bc2:	f003 030f 	and.w	r3, r3, #15
 8020bc6:	693a      	ldr	r2, [r7, #16]
 8020bc8:	4413      	add	r3, r2
 8020bca:	781a      	ldrb	r2, [r3, #0]
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	68b9      	ldr	r1, [r7, #8]
 8020bd0:	4610      	mov	r0, r2
 8020bd2:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8020bd4:	697a      	ldr	r2, [r7, #20]
 8020bd6:	69fb      	ldr	r3, [r7, #28]
 8020bd8:	4413      	add	r3, r2
 8020bda:	781b      	ldrb	r3, [r3, #0]
 8020bdc:	f003 030f 	and.w	r3, r3, #15
 8020be0:	693a      	ldr	r2, [r7, #16]
 8020be2:	4413      	add	r3, r2
 8020be4:	781a      	ldrb	r2, [r3, #0]
 8020be6:	68fb      	ldr	r3, [r7, #12]
 8020be8:	68b9      	ldr	r1, [r7, #8]
 8020bea:	4610      	mov	r0, r2
 8020bec:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8020bee:	69fb      	ldr	r3, [r7, #28]
 8020bf0:	3301      	adds	r3, #1
 8020bf2:	61fb      	str	r3, [r7, #28]
 8020bf4:	69fa      	ldr	r2, [r7, #28]
 8020bf6:	69bb      	ldr	r3, [r7, #24]
 8020bf8:	429a      	cmp	r2, r3
 8020bfa:	d3dc      	bcc.n	8020bb6 <mg_print_hex+0x32>
  }
  return 2 * bl;
 8020bfc:	69bb      	ldr	r3, [r7, #24]
 8020bfe:	005b      	lsls	r3, r3, #1
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	3720      	adds	r7, #32
 8020c04:	46bd      	mov	sp, r7
 8020c06:	bd80      	pop	{r7, pc}
 8020c08:	080269c0 	.word	0x080269c0

08020c0c <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8020c0c:	b580      	push	{r7, lr}
 8020c0e:	b084      	sub	sp, #16
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8020c14:	2300      	movs	r3, #0
 8020c16:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8020c18:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	681a      	ldr	r2, [r3, #0]
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	689b      	ldr	r3, [r3, #8]
 8020c24:	4413      	add	r3, r2
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	689a      	ldr	r2, [r3, #8]
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	4413      	add	r3, r2
 8020c32:	1d1a      	adds	r2, r3, #4
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	685b      	ldr	r3, [r3, #4]
 8020c38:	429a      	cmp	r2, r3
 8020c3a:	d906      	bls.n	8020c4a <mg_queue_read_len+0x3e>
 8020c3c:	4b05      	ldr	r3, [pc, #20]	@ (8020c54 <mg_queue_read_len+0x48>)
 8020c3e:	4a06      	ldr	r2, [pc, #24]	@ (8020c58 <mg_queue_read_len+0x4c>)
 8020c40:	f641 11d6 	movw	r1, #6614	@ 0x19d6
 8020c44:	4805      	ldr	r0, [pc, #20]	@ (8020c5c <mg_queue_read_len+0x50>)
 8020c46:	f001 fc3b 	bl	80224c0 <__assert_func>
  return n;
 8020c4a:	68fb      	ldr	r3, [r7, #12]
}
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	3710      	adds	r7, #16
 8020c50:	46bd      	mov	sp, r7
 8020c52:	bd80      	pop	{r7, pc}
 8020c54:	080283fc 	.word	0x080283fc
 8020c58:	080297bc 	.word	0x080297bc
 8020c5c:	08026838 	.word	0x08026838

08020c60 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b084      	sub	sp, #16
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
 8020c68:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	689a      	ldr	r2, [r3, #8]
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	68db      	ldr	r3, [r3, #12]
 8020c76:	429a      	cmp	r2, r3
 8020c78:	d013      	beq.n	8020ca2 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8020c7a:	6878      	ldr	r0, [r7, #4]
 8020c7c:	f7ff ffc6 	bl	8020c0c <mg_queue_read_len>
 8020c80:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8020c82:	68fb      	ldr	r3, [r7, #12]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d10c      	bne.n	8020ca2 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	68da      	ldr	r2, [r3, #12]
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	689b      	ldr	r3, [r3, #8]
 8020c96:	429a      	cmp	r2, r3
 8020c98:	d903      	bls.n	8020ca2 <mg_queue_next+0x42>
 8020c9a:	6878      	ldr	r0, [r7, #4]
 8020c9c:	f7ff ffb6 	bl	8020c0c <mg_queue_read_len>
 8020ca0:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8020ca2:	683b      	ldr	r3, [r7, #0]
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d007      	beq.n	8020cb8 <mg_queue_next+0x58>
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	681a      	ldr	r2, [r3, #0]
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	689b      	ldr	r3, [r3, #8]
 8020cb0:	3304      	adds	r3, #4
 8020cb2:	441a      	add	r2, r3
 8020cb4:	683b      	ldr	r3, [r7, #0]
 8020cb6:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	689a      	ldr	r2, [r3, #8]
 8020cbc:	68fb      	ldr	r3, [r7, #12]
 8020cbe:	441a      	add	r2, r3
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	685b      	ldr	r3, [r3, #4]
 8020cc4:	429a      	cmp	r2, r3
 8020cc6:	d906      	bls.n	8020cd6 <mg_queue_next+0x76>
 8020cc8:	4b05      	ldr	r3, [pc, #20]	@ (8020ce0 <mg_queue_next+0x80>)
 8020cca:	4a06      	ldr	r2, [pc, #24]	@ (8020ce4 <mg_queue_next+0x84>)
 8020ccc:	f641 11f7 	movw	r1, #6647	@ 0x19f7
 8020cd0:	4805      	ldr	r0, [pc, #20]	@ (8020ce8 <mg_queue_next+0x88>)
 8020cd2:	f001 fbf5 	bl	80224c0 <__assert_func>
  return len;
 8020cd6:	68fb      	ldr	r3, [r7, #12]
}
 8020cd8:	4618      	mov	r0, r3
 8020cda:	3710      	adds	r7, #16
 8020cdc:	46bd      	mov	sp, r7
 8020cde:	bd80      	pop	{r7, pc}
 8020ce0:	08028420 	.word	0x08028420
 8020ce4:	080297d0 	.word	0x080297d0
 8020ce8:	08026838 	.word	0x08026838

08020cec <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8020cec:	b580      	push	{r7, lr}
 8020cee:	b082      	sub	sp, #8
 8020cf0:	af00      	add	r7, sp, #0
 8020cf2:	6078      	str	r0, [r7, #4]
 8020cf4:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	689a      	ldr	r2, [r3, #8]
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	4413      	add	r3, r2
 8020cfe:	1d1a      	adds	r2, r3, #4
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	689b      	ldr	r3, [r3, #8]
 8020d08:	1d1a      	adds	r2, r3, #4
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	685b      	ldr	r3, [r3, #4]
 8020d0e:	429a      	cmp	r2, r3
 8020d10:	d906      	bls.n	8020d20 <mg_queue_del+0x34>
 8020d12:	4b05      	ldr	r3, [pc, #20]	@ (8020d28 <mg_queue_del+0x3c>)
 8020d14:	4a05      	ldr	r2, [pc, #20]	@ (8020d2c <mg_queue_del+0x40>)
 8020d16:	f641 2104 	movw	r1, #6660	@ 0x1a04
 8020d1a:	4805      	ldr	r0, [pc, #20]	@ (8020d30 <mg_queue_del+0x44>)
 8020d1c:	f001 fbd0 	bl	80224c0 <__assert_func>
}
 8020d20:	bf00      	nop
 8020d22:	3708      	adds	r7, #8
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd80      	pop	{r7, pc}
 8020d28:	08028474 	.word	0x08028474
 8020d2c:	080297e0 	.word	0x080297e0
 8020d30:	08026838 	.word	0x08026838

08020d34 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8020d34:	b580      	push	{r7, lr}
 8020d36:	b084      	sub	sp, #16
 8020d38:	af00      	add	r7, sp, #0
 8020d3a:	60f8      	str	r0, [r7, #12]
 8020d3c:	60b9      	str	r1, [r7, #8]
 8020d3e:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8020d40:	4b05      	ldr	r3, [pc, #20]	@ (8020d58 <mg_http_serve_ssi+0x24>)
 8020d42:	2200      	movs	r2, #0
 8020d44:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8020d48:	68f8      	ldr	r0, [r7, #12]
 8020d4a:	f7f6 fde3 	bl	8017914 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8020d4e:	bf00      	nop
 8020d50:	3710      	adds	r7, #16
 8020d52:	46bd      	mov	sp, r7
 8020d54:	bd80      	pop	{r7, pc}
 8020d56:	bf00      	nop
 8020d58:	080285fc 	.word	0x080285fc

08020d5c <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8020d5c:	b580      	push	{r7, lr}
 8020d5e:	b084      	sub	sp, #16
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	6078      	str	r0, [r7, #4]
 8020d64:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8020d66:	683b      	ldr	r3, [r7, #0]
 8020d68:	60bb      	str	r3, [r7, #8]
 8020d6a:	683b      	ldr	r3, [r7, #0]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d004      	beq.n	8020d7a <mg_str_s+0x1e>
 8020d70:	6838      	ldr	r0, [r7, #0]
 8020d72:	f7df fa85 	bl	8000280 <strlen>
 8020d76:	4603      	mov	r3, r0
 8020d78:	e000      	b.n	8020d7c <mg_str_s+0x20>
 8020d7a:	2300      	movs	r3, #0
 8020d7c:	60fb      	str	r3, [r7, #12]
  return str;
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	461a      	mov	r2, r3
 8020d82:	f107 0308 	add.w	r3, r7, #8
 8020d86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020d8a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8020d8e:	6878      	ldr	r0, [r7, #4]
 8020d90:	3710      	adds	r7, #16
 8020d92:	46bd      	mov	sp, r7
 8020d94:	bd80      	pop	{r7, pc}

08020d96 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8020d96:	b480      	push	{r7}
 8020d98:	b087      	sub	sp, #28
 8020d9a:	af00      	add	r7, sp, #0
 8020d9c:	60f8      	str	r0, [r7, #12]
 8020d9e:	60b9      	str	r1, [r7, #8]
 8020da0:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8020da2:	68bb      	ldr	r3, [r7, #8]
 8020da4:	613b      	str	r3, [r7, #16]
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	617b      	str	r3, [r7, #20]
  return str;
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	461a      	mov	r2, r3
 8020dae:	f107 0310 	add.w	r3, r7, #16
 8020db2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020db6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8020dba:	68f8      	ldr	r0, [r7, #12]
 8020dbc:	371c      	adds	r7, #28
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc4:	4770      	bx	lr

08020dc6 <mg_tolc>:

static int mg_tolc(char c) {
 8020dc6:	b480      	push	{r7}
 8020dc8:	b083      	sub	sp, #12
 8020dca:	af00      	add	r7, sp, #0
 8020dcc:	4603      	mov	r3, r0
 8020dce:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8020dd0:	79fb      	ldrb	r3, [r7, #7]
 8020dd2:	2b40      	cmp	r3, #64	@ 0x40
 8020dd4:	d905      	bls.n	8020de2 <mg_tolc+0x1c>
 8020dd6:	79fb      	ldrb	r3, [r7, #7]
 8020dd8:	2b5a      	cmp	r3, #90	@ 0x5a
 8020dda:	d802      	bhi.n	8020de2 <mg_tolc+0x1c>
 8020ddc:	79fb      	ldrb	r3, [r7, #7]
 8020dde:	3320      	adds	r3, #32
 8020de0:	e000      	b.n	8020de4 <mg_tolc+0x1e>
 8020de2:	79fb      	ldrb	r3, [r7, #7]
}
 8020de4:	4618      	mov	r0, r3
 8020de6:	370c      	adds	r7, #12
 8020de8:	46bd      	mov	sp, r7
 8020dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dee:	4770      	bx	lr

08020df0 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8020df0:	b490      	push	{r4, r7}
 8020df2:	b088      	sub	sp, #32
 8020df4:	af00      	add	r7, sp, #0
 8020df6:	f107 0408 	add.w	r4, r7, #8
 8020dfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8020dfe:	4639      	mov	r1, r7
 8020e00:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8020e04:	2300      	movs	r3, #0
 8020e06:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8020e08:	e019      	b.n	8020e3e <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8020e0a:	68ba      	ldr	r2, [r7, #8]
 8020e0c:	69fb      	ldr	r3, [r7, #28]
 8020e0e:	4413      	add	r3, r2
 8020e10:	781b      	ldrb	r3, [r3, #0]
 8020e12:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8020e14:	683a      	ldr	r2, [r7, #0]
 8020e16:	69fb      	ldr	r3, [r7, #28]
 8020e18:	4413      	add	r3, r2
 8020e1a:	781b      	ldrb	r3, [r3, #0]
 8020e1c:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8020e1e:	69ba      	ldr	r2, [r7, #24]
 8020e20:	697b      	ldr	r3, [r7, #20]
 8020e22:	429a      	cmp	r2, r3
 8020e24:	da02      	bge.n	8020e2c <mg_strcmp+0x3c>
 8020e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020e2a:	e01e      	b.n	8020e6a <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8020e2c:	69ba      	ldr	r2, [r7, #24]
 8020e2e:	697b      	ldr	r3, [r7, #20]
 8020e30:	429a      	cmp	r2, r3
 8020e32:	dd01      	ble.n	8020e38 <mg_strcmp+0x48>
 8020e34:	2301      	movs	r3, #1
 8020e36:	e018      	b.n	8020e6a <mg_strcmp+0x7a>
    i++;
 8020e38:	69fb      	ldr	r3, [r7, #28]
 8020e3a:	3301      	adds	r3, #1
 8020e3c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8020e3e:	68fb      	ldr	r3, [r7, #12]
 8020e40:	69fa      	ldr	r2, [r7, #28]
 8020e42:	429a      	cmp	r2, r3
 8020e44:	d203      	bcs.n	8020e4e <mg_strcmp+0x5e>
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	69fa      	ldr	r2, [r7, #28]
 8020e4a:	429a      	cmp	r2, r3
 8020e4c:	d3dd      	bcc.n	8020e0a <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	69fa      	ldr	r2, [r7, #28]
 8020e52:	429a      	cmp	r2, r3
 8020e54:	d201      	bcs.n	8020e5a <mg_strcmp+0x6a>
 8020e56:	2301      	movs	r3, #1
 8020e58:	e007      	b.n	8020e6a <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	69fa      	ldr	r2, [r7, #28]
 8020e5e:	429a      	cmp	r2, r3
 8020e60:	d202      	bcs.n	8020e68 <mg_strcmp+0x78>
 8020e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020e66:	e000      	b.n	8020e6a <mg_strcmp+0x7a>
  return 0;
 8020e68:	2300      	movs	r3, #0
}
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	3720      	adds	r7, #32
 8020e6e:	46bd      	mov	sp, r7
 8020e70:	bc90      	pop	{r4, r7}
 8020e72:	4770      	bx	lr

08020e74 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8020e74:	b590      	push	{r4, r7, lr}
 8020e76:	b089      	sub	sp, #36	@ 0x24
 8020e78:	af00      	add	r7, sp, #0
 8020e7a:	f107 0408 	add.w	r4, r7, #8
 8020e7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8020e82:	4639      	mov	r1, r7
 8020e84:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8020e88:	2300      	movs	r3, #0
 8020e8a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8020e8c:	e01f      	b.n	8020ece <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8020e8e:	68ba      	ldr	r2, [r7, #8]
 8020e90:	69fb      	ldr	r3, [r7, #28]
 8020e92:	4413      	add	r3, r2
 8020e94:	781b      	ldrb	r3, [r3, #0]
 8020e96:	4618      	mov	r0, r3
 8020e98:	f7ff ff95 	bl	8020dc6 <mg_tolc>
 8020e9c:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8020e9e:	683a      	ldr	r2, [r7, #0]
 8020ea0:	69fb      	ldr	r3, [r7, #28]
 8020ea2:	4413      	add	r3, r2
 8020ea4:	781b      	ldrb	r3, [r3, #0]
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	f7ff ff8d 	bl	8020dc6 <mg_tolc>
 8020eac:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8020eae:	69ba      	ldr	r2, [r7, #24]
 8020eb0:	697b      	ldr	r3, [r7, #20]
 8020eb2:	429a      	cmp	r2, r3
 8020eb4:	da02      	bge.n	8020ebc <mg_strcasecmp+0x48>
 8020eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020eba:	e01e      	b.n	8020efa <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8020ebc:	69ba      	ldr	r2, [r7, #24]
 8020ebe:	697b      	ldr	r3, [r7, #20]
 8020ec0:	429a      	cmp	r2, r3
 8020ec2:	dd01      	ble.n	8020ec8 <mg_strcasecmp+0x54>
 8020ec4:	2301      	movs	r3, #1
 8020ec6:	e018      	b.n	8020efa <mg_strcasecmp+0x86>
    i++;
 8020ec8:	69fb      	ldr	r3, [r7, #28]
 8020eca:	3301      	adds	r3, #1
 8020ecc:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	69fa      	ldr	r2, [r7, #28]
 8020ed2:	429a      	cmp	r2, r3
 8020ed4:	d203      	bcs.n	8020ede <mg_strcasecmp+0x6a>
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	69fa      	ldr	r2, [r7, #28]
 8020eda:	429a      	cmp	r2, r3
 8020edc:	d3d7      	bcc.n	8020e8e <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	69fa      	ldr	r2, [r7, #28]
 8020ee2:	429a      	cmp	r2, r3
 8020ee4:	d201      	bcs.n	8020eea <mg_strcasecmp+0x76>
 8020ee6:	2301      	movs	r3, #1
 8020ee8:	e007      	b.n	8020efa <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	69fa      	ldr	r2, [r7, #28]
 8020eee:	429a      	cmp	r2, r3
 8020ef0:	d202      	bcs.n	8020ef8 <mg_strcasecmp+0x84>
 8020ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020ef6:	e000      	b.n	8020efa <mg_strcasecmp+0x86>
  return 0;
 8020ef8:	2300      	movs	r3, #0
}
 8020efa:	4618      	mov	r0, r3
 8020efc:	3724      	adds	r7, #36	@ 0x24
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd90      	pop	{r4, r7, pc}

08020f02 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8020f02:	b490      	push	{r4, r7}
 8020f04:	b088      	sub	sp, #32
 8020f06:	af00      	add	r7, sp, #0
 8020f08:	f107 0408 	add.w	r4, r7, #8
 8020f0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8020f10:	4639      	mov	r1, r7
 8020f12:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8020f16:	2300      	movs	r3, #0
 8020f18:	61fb      	str	r3, [r7, #28]
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	61bb      	str	r3, [r7, #24]
 8020f1e:	2300      	movs	r3, #0
 8020f20:	617b      	str	r3, [r7, #20]
 8020f22:	2300      	movs	r3, #0
 8020f24:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8020f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	f000 80ba 	beq.w	80210a2 <mg_match+0x1a0>
 8020f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f30:	2200      	movs	r2, #0
 8020f32:	601a      	str	r2, [r3, #0]
 8020f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f36:	2200      	movs	r2, #0
 8020f38:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8020f3a:	e0b2      	b.n	80210a2 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	69fa      	ldr	r2, [r7, #28]
 8020f40:	429a      	cmp	r2, r3
 8020f42:	d25b      	bcs.n	8020ffc <mg_match+0xfa>
 8020f44:	68fb      	ldr	r3, [r7, #12]
 8020f46:	69ba      	ldr	r2, [r7, #24]
 8020f48:	429a      	cmp	r2, r3
 8020f4a:	d257      	bcs.n	8020ffc <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8020f4c:	683a      	ldr	r2, [r7, #0]
 8020f4e:	69fb      	ldr	r3, [r7, #28]
 8020f50:	4413      	add	r3, r2
 8020f52:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8020f54:	2b3f      	cmp	r3, #63	@ 0x3f
 8020f56:	d015      	beq.n	8020f84 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8020f58:	683a      	ldr	r2, [r7, #0]
 8020f5a:	69fb      	ldr	r3, [r7, #28]
 8020f5c:	4413      	add	r3, r2
 8020f5e:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8020f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8020f62:	d04b      	beq.n	8020ffc <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8020f64:	683a      	ldr	r2, [r7, #0]
 8020f66:	69fb      	ldr	r3, [r7, #28]
 8020f68:	4413      	add	r3, r2
 8020f6a:	781b      	ldrb	r3, [r3, #0]
 8020f6c:	2b23      	cmp	r3, #35	@ 0x23
 8020f6e:	d045      	beq.n	8020ffc <mg_match+0xfa>
 8020f70:	68ba      	ldr	r2, [r7, #8]
 8020f72:	69bb      	ldr	r3, [r7, #24]
 8020f74:	4413      	add	r3, r2
 8020f76:	781a      	ldrb	r2, [r3, #0]
 8020f78:	6839      	ldr	r1, [r7, #0]
 8020f7a:	69fb      	ldr	r3, [r7, #28]
 8020f7c:	440b      	add	r3, r1
 8020f7e:	781b      	ldrb	r3, [r3, #0]
 8020f80:	429a      	cmp	r2, r3
 8020f82:	d13b      	bne.n	8020ffc <mg_match+0xfa>
      if (caps == NULL) {
 8020f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d031      	beq.n	8020fee <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8020f8a:	683a      	ldr	r2, [r7, #0]
 8020f8c:	69fb      	ldr	r3, [r7, #28]
 8020f8e:	4413      	add	r3, r2
 8020f90:	781b      	ldrb	r3, [r3, #0]
 8020f92:	2b3f      	cmp	r3, #63	@ 0x3f
 8020f94:	d111      	bne.n	8020fba <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8020f96:	68ba      	ldr	r2, [r7, #8]
 8020f98:	69bb      	ldr	r3, [r7, #24]
 8020f9a:	441a      	add	r2, r3
 8020f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f9e:	601a      	str	r2, [r3, #0]
 8020fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fa2:	2201      	movs	r2, #1
 8020fa4:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8020fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fa8:	3308      	adds	r3, #8
 8020faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fae:	2200      	movs	r2, #0
 8020fb0:	601a      	str	r2, [r3, #0]
 8020fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fb4:	2200      	movs	r2, #0
 8020fb6:	605a      	str	r2, [r3, #4]
 8020fb8:	e019      	b.n	8020fee <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8020fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d015      	beq.n	8020fee <mg_match+0xec>
 8020fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fc4:	685b      	ldr	r3, [r3, #4]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d111      	bne.n	8020fee <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8020fca:	68ba      	ldr	r2, [r7, #8]
 8020fcc:	69bb      	ldr	r3, [r7, #24]
 8020fce:	441a      	add	r2, r3
 8020fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	1ad3      	subs	r3, r2, r3
 8020fd6:	461a      	mov	r2, r3
 8020fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fda:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8020fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fde:	3308      	adds	r3, #8
 8020fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fea:	2200      	movs	r2, #0
 8020fec:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8020fee:	69fb      	ldr	r3, [r7, #28]
 8020ff0:	3301      	adds	r3, #1
 8020ff2:	61fb      	str	r3, [r7, #28]
 8020ff4:	69bb      	ldr	r3, [r7, #24]
 8020ff6:	3301      	adds	r3, #1
 8020ff8:	61bb      	str	r3, [r7, #24]
 8020ffa:	e052      	b.n	80210a2 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	69fa      	ldr	r2, [r7, #28]
 8021000:	429a      	cmp	r2, r3
 8021002:	d222      	bcs.n	802104a <mg_match+0x148>
 8021004:	683a      	ldr	r2, [r7, #0]
 8021006:	69fb      	ldr	r3, [r7, #28]
 8021008:	4413      	add	r3, r2
 802100a:	781b      	ldrb	r3, [r3, #0]
 802100c:	2b2a      	cmp	r3, #42	@ 0x2a
 802100e:	d005      	beq.n	802101c <mg_match+0x11a>
 8021010:	683a      	ldr	r2, [r7, #0]
 8021012:	69fb      	ldr	r3, [r7, #28]
 8021014:	4413      	add	r3, r2
 8021016:	781b      	ldrb	r3, [r3, #0]
 8021018:	2b23      	cmp	r3, #35	@ 0x23
 802101a:	d116      	bne.n	802104a <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 802101c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802101e:	2b00      	cmp	r3, #0
 8021020:	d00b      	beq.n	802103a <mg_match+0x138>
 8021022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	2b00      	cmp	r3, #0
 8021028:	d107      	bne.n	802103a <mg_match+0x138>
 802102a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802102c:	2200      	movs	r2, #0
 802102e:	605a      	str	r2, [r3, #4]
 8021030:	68ba      	ldr	r2, [r7, #8]
 8021032:	69bb      	ldr	r3, [r7, #24]
 8021034:	441a      	add	r2, r3
 8021036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021038:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 802103a:	69fb      	ldr	r3, [r7, #28]
 802103c:	1c5a      	adds	r2, r3, #1
 802103e:	61fa      	str	r2, [r7, #28]
 8021040:	617b      	str	r3, [r7, #20]
 8021042:	69bb      	ldr	r3, [r7, #24]
 8021044:	3301      	adds	r3, #1
 8021046:	613b      	str	r3, [r7, #16]
 8021048:	e02b      	b.n	80210a2 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 802104a:	693b      	ldr	r3, [r7, #16]
 802104c:	2b00      	cmp	r3, #0
 802104e:	d025      	beq.n	802109c <mg_match+0x19a>
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	693a      	ldr	r2, [r7, #16]
 8021054:	429a      	cmp	r2, r3
 8021056:	d821      	bhi.n	802109c <mg_match+0x19a>
 8021058:	683a      	ldr	r2, [r7, #0]
 802105a:	697b      	ldr	r3, [r7, #20]
 802105c:	4413      	add	r3, r2
 802105e:	781b      	ldrb	r3, [r3, #0]
 8021060:	2b23      	cmp	r3, #35	@ 0x23
 8021062:	d005      	beq.n	8021070 <mg_match+0x16e>
 8021064:	68ba      	ldr	r2, [r7, #8]
 8021066:	69bb      	ldr	r3, [r7, #24]
 8021068:	4413      	add	r3, r2
 802106a:	781b      	ldrb	r3, [r3, #0]
 802106c:	2b2f      	cmp	r3, #47	@ 0x2f
 802106e:	d015      	beq.n	802109c <mg_match+0x19a>
      i = ni, j = nj;
 8021070:	697b      	ldr	r3, [r7, #20]
 8021072:	61fb      	str	r3, [r7, #28]
 8021074:	693b      	ldr	r3, [r7, #16]
 8021076:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802107a:	2b00      	cmp	r3, #0
 802107c:	d010      	beq.n	80210a0 <mg_match+0x19e>
 802107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	2b00      	cmp	r3, #0
 8021084:	d10c      	bne.n	80210a0 <mg_match+0x19e>
 8021086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021088:	685b      	ldr	r3, [r3, #4]
 802108a:	2b00      	cmp	r3, #0
 802108c:	d108      	bne.n	80210a0 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 802108e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021090:	3b08      	subs	r3, #8
 8021092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021096:	2200      	movs	r2, #0
 8021098:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 802109a:	e001      	b.n	80210a0 <mg_match+0x19e>
      }
    } else {
      return false;
 802109c:	2300      	movs	r3, #0
 802109e:	e01f      	b.n	80210e0 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80210a0:	bf00      	nop
  while (i < p.len || j < s.len) {
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	69fa      	ldr	r2, [r7, #28]
 80210a6:	429a      	cmp	r2, r3
 80210a8:	f4ff af48 	bcc.w	8020f3c <mg_match+0x3a>
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	69ba      	ldr	r2, [r7, #24]
 80210b0:	429a      	cmp	r2, r3
 80210b2:	f4ff af43 	bcc.w	8020f3c <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 80210b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d010      	beq.n	80210de <mg_match+0x1dc>
 80210bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210be:	681b      	ldr	r3, [r3, #0]
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d00c      	beq.n	80210de <mg_match+0x1dc>
 80210c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210c6:	685b      	ldr	r3, [r3, #4]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d108      	bne.n	80210de <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 80210cc:	68ba      	ldr	r2, [r7, #8]
 80210ce:	69bb      	ldr	r3, [r7, #24]
 80210d0:	441a      	add	r2, r3
 80210d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	1ad3      	subs	r3, r2, r3
 80210d8:	461a      	mov	r2, r3
 80210da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210dc:	605a      	str	r2, [r3, #4]
  }
  return true;
 80210de:	2301      	movs	r3, #1
}
 80210e0:	4618      	mov	r0, r3
 80210e2:	3720      	adds	r7, #32
 80210e4:	46bd      	mov	sp, r7
 80210e6:	bc90      	pop	{r4, r7}
 80210e8:	4770      	bx	lr

080210ea <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 80210ea:	b590      	push	{r4, r7, lr}
 80210ec:	b089      	sub	sp, #36	@ 0x24
 80210ee:	af00      	add	r7, sp, #0
 80210f0:	f107 0410 	add.w	r4, r7, #16
 80210f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80210f8:	60fa      	str	r2, [r7, #12]
 80210fa:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 80210fc:	697b      	ldr	r3, [r7, #20]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d002      	beq.n	8021108 <mg_span+0x1e>
 8021102:	693b      	ldr	r3, [r7, #16]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d101      	bne.n	802110c <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8021108:	2300      	movs	r3, #0
 802110a:	e047      	b.n	802119c <mg_span+0xb2>
  } else {
    size_t len = 0;
 802110c:	2300      	movs	r3, #0
 802110e:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021110:	e002      	b.n	8021118 <mg_span+0x2e>
 8021112:	69fb      	ldr	r3, [r7, #28]
 8021114:	3301      	adds	r3, #1
 8021116:	61fb      	str	r3, [r7, #28]
 8021118:	697b      	ldr	r3, [r7, #20]
 802111a:	69fa      	ldr	r2, [r7, #28]
 802111c:	429a      	cmp	r2, r3
 802111e:	d207      	bcs.n	8021130 <mg_span+0x46>
 8021120:	693a      	ldr	r2, [r7, #16]
 8021122:	69fb      	ldr	r3, [r7, #28]
 8021124:	4413      	add	r3, r2
 8021126:	781b      	ldrb	r3, [r3, #0]
 8021128:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802112c:	429a      	cmp	r2, r3
 802112e:	d1f0      	bne.n	8021112 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021130:	68fb      	ldr	r3, [r7, #12]
 8021132:	2b00      	cmp	r3, #0
 8021134:	d00c      	beq.n	8021150 <mg_span+0x66>
 8021136:	6939      	ldr	r1, [r7, #16]
 8021138:	68fc      	ldr	r4, [r7, #12]
 802113a:	463b      	mov	r3, r7
 802113c:	69fa      	ldr	r2, [r7, #28]
 802113e:	4618      	mov	r0, r3
 8021140:	f7ff fe29 	bl	8020d96 <mg_str_n>
 8021144:	4622      	mov	r2, r4
 8021146:	463b      	mov	r3, r7
 8021148:	e893 0003 	ldmia.w	r3, {r0, r1}
 802114c:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021150:	68bb      	ldr	r3, [r7, #8]
 8021152:	2b00      	cmp	r3, #0
 8021154:	d010      	beq.n	8021178 <mg_span+0x8e>
 8021156:	693a      	ldr	r2, [r7, #16]
 8021158:	69fb      	ldr	r3, [r7, #28]
 802115a:	18d1      	adds	r1, r2, r3
 802115c:	697a      	ldr	r2, [r7, #20]
 802115e:	69fb      	ldr	r3, [r7, #28]
 8021160:	1ad2      	subs	r2, r2, r3
 8021162:	68bc      	ldr	r4, [r7, #8]
 8021164:	463b      	mov	r3, r7
 8021166:	4618      	mov	r0, r3
 8021168:	f7ff fe15 	bl	8020d96 <mg_str_n>
 802116c:	4622      	mov	r2, r4
 802116e:	463b      	mov	r3, r7
 8021170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021174:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021178:	68bb      	ldr	r3, [r7, #8]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d00d      	beq.n	802119a <mg_span+0xb0>
 802117e:	697b      	ldr	r3, [r7, #20]
 8021180:	69fa      	ldr	r2, [r7, #28]
 8021182:	429a      	cmp	r2, r3
 8021184:	d209      	bcs.n	802119a <mg_span+0xb0>
 8021186:	68bb      	ldr	r3, [r7, #8]
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	1c5a      	adds	r2, r3, #1
 802118c:	68bb      	ldr	r3, [r7, #8]
 802118e:	601a      	str	r2, [r3, #0]
 8021190:	68bb      	ldr	r3, [r7, #8]
 8021192:	685b      	ldr	r3, [r3, #4]
 8021194:	1e5a      	subs	r2, r3, #1
 8021196:	68bb      	ldr	r3, [r7, #8]
 8021198:	605a      	str	r2, [r3, #4]
    return true;
 802119a:	2301      	movs	r3, #1
  }
}
 802119c:	4618      	mov	r0, r3
 802119e:	3724      	adds	r7, #36	@ 0x24
 80211a0:	46bd      	mov	sp, r7
 80211a2:	bd90      	pop	{r4, r7, pc}

080211a4 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80211a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a8:	b0a5      	sub	sp, #148	@ 0x94
 80211aa:	af00      	add	r7, sp, #0
 80211ac:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80211b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80211b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80211b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 80211b8:	2300      	movs	r3, #0
 80211ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80211be:	2300      	movs	r3, #0
 80211c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80211c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80211c8:	2b01      	cmp	r3, #1
 80211ca:	d016      	beq.n	80211fa <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80211cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80211d0:	2b02      	cmp	r3, #2
 80211d2:	d00d      	beq.n	80211f0 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 80211d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80211d8:	2b04      	cmp	r3, #4
 80211da:	d104      	bne.n	80211e6 <mg_str_to_num+0x42>
 80211dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80211e0:	f04f 0300 	mov.w	r3, #0
 80211e4:	e00d      	b.n	8021202 <mg_str_to_num+0x5e>
 80211e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80211ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80211ee:	e008      	b.n	8021202 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80211f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80211f4:	f04f 0300 	mov.w	r3, #0
 80211f8:	e003      	b.n	8021202 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80211fa:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 80211fe:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8021202:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8021206:	f04f 0200 	mov.w	r2, #0
 802120a:	f04f 0300 	mov.w	r3, #0
 802120e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8021212:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8021216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802121a:	bf08      	it	eq
 802121c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8021220:	d105      	bne.n	802122e <mg_str_to_num+0x8a>
 8021222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021226:	2b08      	cmp	r3, #8
 8021228:	d001      	beq.n	802122e <mg_str_to_num+0x8a>
 802122a:	2300      	movs	r3, #0
 802122c:	e1e8      	b.n	8021600 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 802122e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021230:	2b00      	cmp	r3, #0
 8021232:	d12d      	bne.n	8021290 <mg_str_to_num+0xec>
 8021234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021236:	2b01      	cmp	r3, #1
 8021238:	d92a      	bls.n	8021290 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 802123a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802123c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021240:	4413      	add	r3, r2
 8021242:	781b      	ldrb	r3, [r3, #0]
 8021244:	2b30      	cmp	r3, #48	@ 0x30
 8021246:	d121      	bne.n	802128c <mg_str_to_num+0xe8>
      i++;
 8021248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802124c:	3301      	adds	r3, #1
 802124e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8021252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021258:	4413      	add	r3, r2
 802125a:	781b      	ldrb	r3, [r3, #0]
 802125c:	2b62      	cmp	r3, #98	@ 0x62
 802125e:	d00a      	beq.n	8021276 <mg_str_to_num+0xd2>
 8021260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021266:	4413      	add	r3, r2
 8021268:	781b      	ldrb	r3, [r3, #0]
 802126a:	2b78      	cmp	r3, #120	@ 0x78
 802126c:	d101      	bne.n	8021272 <mg_str_to_num+0xce>
 802126e:	2310      	movs	r3, #16
 8021270:	e002      	b.n	8021278 <mg_str_to_num+0xd4>
 8021272:	230a      	movs	r3, #10
 8021274:	e000      	b.n	8021278 <mg_str_to_num+0xd4>
 8021276:	2302      	movs	r3, #2
 8021278:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 802127a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802127c:	2b0a      	cmp	r3, #10
 802127e:	d007      	beq.n	8021290 <mg_str_to_num+0xec>
 8021280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021284:	3301      	adds	r3, #1
 8021286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802128a:	e001      	b.n	8021290 <mg_str_to_num+0xec>
    } else {
      base = 10;
 802128c:	230a      	movs	r3, #10
 802128e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8021290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021292:	2b10      	cmp	r3, #16
 8021294:	f000 8178 	beq.w	8021588 <mg_str_to_num+0x3e4>
 8021298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802129a:	2b10      	cmp	r3, #16
 802129c:	f300 817d 	bgt.w	802159a <mg_str_to_num+0x3f6>
 80212a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80212a2:	2b02      	cmp	r3, #2
 80212a4:	d052      	beq.n	802134c <mg_str_to_num+0x1a8>
 80212a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80212a8:	2b0a      	cmp	r3, #10
 80212aa:	f000 80cd 	beq.w	8021448 <mg_str_to_num+0x2a4>
 80212ae:	e174      	b.n	802159a <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80212b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80212b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80212b6:	4413      	add	r3, r2
 80212b8:	781b      	ldrb	r3, [r3, #0]
 80212ba:	3b30      	subs	r3, #48	@ 0x30
 80212bc:	17da      	asrs	r2, r3, #31
 80212be:	633b      	str	r3, [r7, #48]	@ 0x30
 80212c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80212c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80212c6:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 80212ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80212ce:	f04f 0200 	mov.w	r2, #0
 80212d2:	f04f 0300 	mov.w	r3, #0
 80212d6:	0842      	lsrs	r2, r0, #1
 80212d8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80212dc:	084b      	lsrs	r3, r1, #1
 80212de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80212e2:	4282      	cmp	r2, r0
 80212e4:	418b      	sbcs	r3, r1
 80212e6:	d201      	bcs.n	80212ec <mg_str_to_num+0x148>
 80212e8:	2300      	movs	r3, #0
 80212ea:	e189      	b.n	8021600 <mg_str_to_num+0x45c>
        result *= 2;
 80212ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80212f0:	1891      	adds	r1, r2, r2
 80212f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80212f4:	415b      	adcs	r3, r3
 80212f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80212f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80212fc:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8021300:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021308:	1a85      	subs	r5, r0, r2
 802130a:	eb61 0603 	sbc.w	r6, r1, r3
 802130e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021312:	4295      	cmp	r5, r2
 8021314:	eb76 0303 	sbcs.w	r3, r6, r3
 8021318:	d201      	bcs.n	802131e <mg_str_to_num+0x17a>
 802131a:	2300      	movs	r3, #0
 802131c:	e170      	b.n	8021600 <mg_str_to_num+0x45c>
        result += digit;
 802131e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021326:	1884      	adds	r4, r0, r2
 8021328:	623c      	str	r4, [r7, #32]
 802132a:	eb41 0303 	adc.w	r3, r1, r3
 802132e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021330:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8021334:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802133c:	3301      	adds	r3, #1
 802133e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021342:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021346:	3301      	adds	r3, #1
 8021348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 802134c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802134e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021352:	429a      	cmp	r2, r3
 8021354:	f080 8123 	bcs.w	802159e <mg_str_to_num+0x3fa>
 8021358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802135a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802135e:	4413      	add	r3, r2
 8021360:	781b      	ldrb	r3, [r3, #0]
 8021362:	2b30      	cmp	r3, #48	@ 0x30
 8021364:	d0a4      	beq.n	80212b0 <mg_str_to_num+0x10c>
 8021366:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802136c:	4413      	add	r3, r2
 802136e:	781b      	ldrb	r3, [r3, #0]
 8021370:	2b31      	cmp	r3, #49	@ 0x31
 8021372:	d09d      	beq.n	80212b0 <mg_str_to_num+0x10c>
      }
      break;
 8021374:	e113      	b.n	802159e <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8021376:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802137c:	4413      	add	r3, r2
 802137e:	781b      	ldrb	r3, [r3, #0]
 8021380:	3b30      	subs	r3, #48	@ 0x30
 8021382:	17da      	asrs	r2, r3, #31
 8021384:	61bb      	str	r3, [r7, #24]
 8021386:	61fa      	str	r2, [r7, #28]
 8021388:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802138c:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8021390:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021394:	f04f 020a 	mov.w	r2, #10
 8021398:	f04f 0300 	mov.w	r3, #0
 802139c:	f7df fc20 	bl	8000be0 <__aeabi_uldivmod>
 80213a0:	4602      	mov	r2, r0
 80213a2:	460b      	mov	r3, r1
 80213a4:	4610      	mov	r0, r2
 80213a6:	4619      	mov	r1, r3
 80213a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80213ac:	4290      	cmp	r0, r2
 80213ae:	eb71 0303 	sbcs.w	r3, r1, r3
 80213b2:	d201      	bcs.n	80213b8 <mg_str_to_num+0x214>
 80213b4:	2300      	movs	r3, #0
 80213b6:	e123      	b.n	8021600 <mg_str_to_num+0x45c>
        result *= 10;
 80213b8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80213bc:	4622      	mov	r2, r4
 80213be:	462b      	mov	r3, r5
 80213c0:	f04f 0000 	mov.w	r0, #0
 80213c4:	f04f 0100 	mov.w	r1, #0
 80213c8:	0099      	lsls	r1, r3, #2
 80213ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80213ce:	0090      	lsls	r0, r2, #2
 80213d0:	4602      	mov	r2, r0
 80213d2:	460b      	mov	r3, r1
 80213d4:	eb12 0804 	adds.w	r8, r2, r4
 80213d8:	eb43 0905 	adc.w	r9, r3, r5
 80213dc:	eb18 0308 	adds.w	r3, r8, r8
 80213e0:	613b      	str	r3, [r7, #16]
 80213e2:	eb49 0309 	adc.w	r3, r9, r9
 80213e6:	617b      	str	r3, [r7, #20]
 80213e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80213ec:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80213f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80213f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80213f8:	1a84      	subs	r4, r0, r2
 80213fa:	63bc      	str	r4, [r7, #56]	@ 0x38
 80213fc:	eb61 0303 	sbc.w	r3, r1, r3
 8021400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021402:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021406:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 802140a:	4621      	mov	r1, r4
 802140c:	4291      	cmp	r1, r2
 802140e:	4629      	mov	r1, r5
 8021410:	eb71 0303 	sbcs.w	r3, r1, r3
 8021414:	d201      	bcs.n	802141a <mg_str_to_num+0x276>
 8021416:	2300      	movs	r3, #0
 8021418:	e0f2      	b.n	8021600 <mg_str_to_num+0x45c>
        result += digit;
 802141a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802141e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8021422:	1884      	adds	r4, r0, r2
 8021424:	60bc      	str	r4, [r7, #8]
 8021426:	eb41 0303 	adc.w	r3, r1, r3
 802142a:	60fb      	str	r3, [r7, #12]
 802142c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8021430:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021438:	3301      	adds	r3, #1
 802143a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802143e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021442:	3301      	adds	r3, #1
 8021444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8021448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802144a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802144e:	429a      	cmp	r2, r3
 8021450:	f080 80a7 	bcs.w	80215a2 <mg_str_to_num+0x3fe>
 8021454:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802145a:	4413      	add	r3, r2
 802145c:	781b      	ldrb	r3, [r3, #0]
 802145e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021460:	f240 809f 	bls.w	80215a2 <mg_str_to_num+0x3fe>
 8021464:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802146a:	4413      	add	r3, r2
 802146c:	781b      	ldrb	r3, [r3, #0]
 802146e:	2b39      	cmp	r3, #57	@ 0x39
 8021470:	d981      	bls.n	8021376 <mg_str_to_num+0x1d2>
      }
      break;
 8021472:	e096      	b.n	80215a2 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8021474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802147a:	4413      	add	r3, r2
 802147c:	781b      	ldrb	r3, [r3, #0]
 802147e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021482:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021486:	2b2f      	cmp	r3, #47	@ 0x2f
 8021488:	d90a      	bls.n	80214a0 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802148a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802148e:	2b39      	cmp	r3, #57	@ 0x39
 8021490:	d806      	bhi.n	80214a0 <mg_str_to_num+0x2fc>
 8021492:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021496:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021498:	17da      	asrs	r2, r3, #31
 802149a:	643b      	str	r3, [r7, #64]	@ 0x40
 802149c:	647a      	str	r2, [r7, #68]	@ 0x44
 802149e:	e023      	b.n	80214e8 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80214a0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214a4:	2b40      	cmp	r3, #64	@ 0x40
 80214a6:	d90a      	bls.n	80214be <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80214a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214ac:	2b46      	cmp	r3, #70	@ 0x46
 80214ae:	d806      	bhi.n	80214be <mg_str_to_num+0x31a>
 80214b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214b4:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80214b6:	17da      	asrs	r2, r3, #31
 80214b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80214ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80214bc:	e014      	b.n	80214e8 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 80214be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214c2:	2b60      	cmp	r3, #96	@ 0x60
 80214c4:	d90a      	bls.n	80214dc <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80214c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214ca:	2b66      	cmp	r3, #102	@ 0x66
 80214cc:	d806      	bhi.n	80214dc <mg_str_to_num+0x338>
 80214ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80214d2:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80214d4:	17da      	asrs	r2, r3, #31
 80214d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80214d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80214da:	e005      	b.n	80214e8 <mg_str_to_num+0x344>
 80214dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80214e0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80214e4:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80214e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80214ec:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 80214f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80214f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80214f8:	bf08      	it	eq
 80214fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80214fe:	d04a      	beq.n	8021596 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8021500:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021504:	f04f 0200 	mov.w	r2, #0
 8021508:	f04f 0300 	mov.w	r3, #0
 802150c:	0902      	lsrs	r2, r0, #4
 802150e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8021512:	090b      	lsrs	r3, r1, #4
 8021514:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021518:	4282      	cmp	r2, r0
 802151a:	418b      	sbcs	r3, r1
 802151c:	d201      	bcs.n	8021522 <mg_str_to_num+0x37e>
 802151e:	2300      	movs	r3, #0
 8021520:	e06e      	b.n	8021600 <mg_str_to_num+0x45c>
        result *= 16;
 8021522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021526:	f04f 0200 	mov.w	r2, #0
 802152a:	f04f 0300 	mov.w	r3, #0
 802152e:	010b      	lsls	r3, r1, #4
 8021530:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8021534:	0102      	lsls	r2, r0, #4
 8021536:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 802153a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 802153e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8021542:	ebb0 0a02 	subs.w	sl, r0, r2
 8021546:	eb61 0b03 	sbc.w	fp, r1, r3
 802154a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 802154e:	4592      	cmp	sl, r2
 8021550:	eb7b 0303 	sbcs.w	r3, fp, r3
 8021554:	d201      	bcs.n	802155a <mg_str_to_num+0x3b6>
 8021556:	2300      	movs	r3, #0
 8021558:	e052      	b.n	8021600 <mg_str_to_num+0x45c>
        result += digit;
 802155a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802155e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8021562:	1884      	adds	r4, r0, r2
 8021564:	603c      	str	r4, [r7, #0]
 8021566:	eb41 0303 	adc.w	r3, r1, r3
 802156a:	607b      	str	r3, [r7, #4]
 802156c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021570:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021578:	3301      	adds	r3, #1
 802157a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802157e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021582:	3301      	adds	r3, #1
 8021584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8021588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802158a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802158e:	429a      	cmp	r2, r3
 8021590:	f4ff af70 	bcc.w	8021474 <mg_str_to_num+0x2d0>
      }
      break;
 8021594:	e006      	b.n	80215a4 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8021596:	bf00      	nop
      break;
 8021598:	e004      	b.n	80215a4 <mg_str_to_num+0x400>
    default:
      return false;
 802159a:	2300      	movs	r3, #0
 802159c:	e030      	b.n	8021600 <mg_str_to_num+0x45c>
      break;
 802159e:	bf00      	nop
 80215a0:	e000      	b.n	80215a4 <mg_str_to_num+0x400>
      break;
 80215a2:	bf00      	nop
  }
  if (ndigits == 0) return false;
 80215a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d101      	bne.n	80215b0 <mg_str_to_num+0x40c>
 80215ac:	2300      	movs	r3, #0
 80215ae:	e027      	b.n	8021600 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 80215b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80215b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80215b6:	429a      	cmp	r2, r3
 80215b8:	d001      	beq.n	80215be <mg_str_to_num+0x41a>
 80215ba:	2300      	movs	r3, #0
 80215bc:	e020      	b.n	8021600 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 80215be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80215c2:	2b01      	cmp	r3, #1
 80215c4:	d104      	bne.n	80215d0 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80215c6:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80215ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80215cc:	701a      	strb	r2, [r3, #0]
 80215ce:	e016      	b.n	80215fe <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80215d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80215d4:	2b02      	cmp	r3, #2
 80215d6:	d104      	bne.n	80215e2 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80215d8:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80215dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80215de:	801a      	strh	r2, [r3, #0]
 80215e0:	e00d      	b.n	80215fe <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80215e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80215e6:	2b04      	cmp	r3, #4
 80215e8:	d104      	bne.n	80215f4 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80215ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80215ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80215f0:	601a      	str	r2, [r3, #0]
 80215f2:	e004      	b.n	80215fe <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80215f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80215f6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80215fa:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80215fe:	2301      	movs	r3, #1
}
 8021600:	4618      	mov	r0, r3
 8021602:	3794      	adds	r7, #148	@ 0x94
 8021604:	46bd      	mov	sp, r7
 8021606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802160a <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 802160a:	b480      	push	{r7}
 802160c:	b085      	sub	sp, #20
 802160e:	af00      	add	r7, sp, #0
 8021610:	60f8      	str	r0, [r7, #12]
 8021612:	60b9      	str	r1, [r7, #8]
 8021614:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8021618:	68bb      	ldr	r3, [r7, #8]
 802161a:	2200      	movs	r2, #0
 802161c:	601a      	str	r2, [r3, #0]
 802161e:	68b9      	ldr	r1, [r7, #8]
 8021620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021624:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8021628:	68b9      	ldr	r1, [r7, #8]
 802162a:	f04f 0200 	mov.w	r2, #0
 802162e:	f04f 0300 	mov.w	r3, #0
 8021632:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8021636:	68bb      	ldr	r3, [r7, #8]
 8021638:	69ba      	ldr	r2, [r7, #24]
 802163a:	619a      	str	r2, [r3, #24]
 802163c:	68bb      	ldr	r3, [r7, #8]
 802163e:	69fa      	ldr	r2, [r7, #28]
 8021640:	61da      	str	r2, [r3, #28]
 8021642:	68bb      	ldr	r3, [r7, #8]
 8021644:	6a3a      	ldr	r2, [r7, #32]
 8021646:	621a      	str	r2, [r3, #32]
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	681a      	ldr	r2, [r3, #0]
 802164c:	68bb      	ldr	r3, [r7, #8]
 802164e:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	68ba      	ldr	r2, [r7, #8]
 8021654:	601a      	str	r2, [r3, #0]
}
 8021656:	bf00      	nop
 8021658:	3714      	adds	r7, #20
 802165a:	46bd      	mov	sp, r7
 802165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021660:	4770      	bx	lr

08021662 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8021662:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021666:	b086      	sub	sp, #24
 8021668:	af00      	add	r7, sp, #0
 802166a:	6178      	str	r0, [r7, #20]
 802166c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8021670:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8021674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021678:	eb10 0a02 	adds.w	sl, r0, r2
 802167c:	eb41 0b03 	adc.w	fp, r1, r3
 8021680:	697b      	ldr	r3, [r7, #20]
 8021682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021686:	4592      	cmp	sl, r2
 8021688:	eb7b 0303 	sbcs.w	r3, fp, r3
 802168c:	d206      	bcs.n	802169c <mg_timer_expired+0x3a>
 802168e:	6979      	ldr	r1, [r7, #20]
 8021690:	f04f 0200 	mov.w	r2, #0
 8021694:	f04f 0300 	mov.w	r3, #0
 8021698:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 802169c:	697b      	ldr	r3, [r7, #20]
 802169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216a2:	4313      	orrs	r3, r2
 80216a4:	d10d      	bne.n	80216c2 <mg_timer_expired+0x60>
 80216a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80216aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80216ae:	1886      	adds	r6, r0, r2
 80216b0:	603e      	str	r6, [r7, #0]
 80216b2:	eb41 0303 	adc.w	r3, r1, r3
 80216b6:	607b      	str	r3, [r7, #4]
 80216b8:	697b      	ldr	r3, [r7, #20]
 80216ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80216be:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80216c2:	697b      	ldr	r3, [r7, #20]
 80216c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80216cc:	4290      	cmp	r0, r2
 80216ce:	eb71 0303 	sbcs.w	r3, r1, r3
 80216d2:	d201      	bcs.n	80216d8 <mg_timer_expired+0x76>
 80216d4:	2300      	movs	r3, #0
 80216d6:	e022      	b.n	802171e <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80216d8:	697b      	ldr	r3, [r7, #20]
 80216da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80216e2:	ebb0 0802 	subs.w	r8, r0, r2
 80216e6:	eb61 0903 	sbc.w	r9, r1, r3
 80216ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80216ee:	4542      	cmp	r2, r8
 80216f0:	eb73 0309 	sbcs.w	r3, r3, r9
 80216f4:	d207      	bcs.n	8021706 <mg_timer_expired+0xa4>
 80216f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80216fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80216fe:	1884      	adds	r4, r0, r2
 8021700:	eb41 0503 	adc.w	r5, r1, r3
 8021704:	e007      	b.n	8021716 <mg_timer_expired+0xb4>
 8021706:	697b      	ldr	r3, [r7, #20]
 8021708:	e9d3 0100 	ldrd	r0, r1, [r3]
 802170c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021710:	1884      	adds	r4, r0, r2
 8021712:	eb41 0503 	adc.w	r5, r1, r3
 8021716:	697b      	ldr	r3, [r7, #20]
 8021718:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 802171c:	2301      	movs	r3, #1
}
 802171e:	4618      	mov	r0, r3
 8021720:	3718      	adds	r7, #24
 8021722:	46bd      	mov	sp, r7
 8021724:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021728:	4770      	bx	lr

0802172a <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 802172a:	b590      	push	{r4, r7, lr}
 802172c:	b08b      	sub	sp, #44	@ 0x2c
 802172e:	af02      	add	r7, sp, #8
 8021730:	60f8      	str	r0, [r7, #12]
 8021732:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	61fb      	str	r3, [r7, #28]
 802173c:	e054      	b.n	80217e8 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802173e:	69fb      	ldr	r3, [r7, #28]
 8021740:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021744:	4313      	orrs	r3, r2
 8021746:	d10d      	bne.n	8021764 <mg_timer_poll+0x3a>
 8021748:	69fb      	ldr	r3, [r7, #28]
 802174a:	699b      	ldr	r3, [r3, #24]
 802174c:	f003 0302 	and.w	r3, r3, #2
 8021750:	2b00      	cmp	r3, #0
 8021752:	d007      	beq.n	8021764 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8021754:	69fb      	ldr	r3, [r7, #28]
 8021756:	699b      	ldr	r3, [r3, #24]
 8021758:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802175c:	2b00      	cmp	r3, #0
 802175e:	d101      	bne.n	8021764 <mg_timer_poll+0x3a>
 8021760:	2301      	movs	r3, #1
 8021762:	e000      	b.n	8021766 <mg_timer_poll+0x3c>
 8021764:	2300      	movs	r3, #0
 8021766:	76fb      	strb	r3, [r7, #27]
 8021768:	7efb      	ldrb	r3, [r7, #27]
 802176a:	f003 0301 	and.w	r3, r3, #1
 802176e:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8021770:	69fb      	ldr	r3, [r7, #28]
 8021772:	f103 0410 	add.w	r4, r3, #16
 8021776:	69fb      	ldr	r3, [r7, #28]
 8021778:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 802177c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021780:	e9cd 2300 	strd	r2, r3, [sp]
 8021784:	4602      	mov	r2, r0
 8021786:	460b      	mov	r3, r1
 8021788:	4620      	mov	r0, r4
 802178a:	f7ff ff6a 	bl	8021662 <mg_timer_expired>
 802178e:	4603      	mov	r3, r0
 8021790:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8021792:	69fb      	ldr	r3, [r7, #28]
 8021794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021796:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8021798:	7efb      	ldrb	r3, [r7, #27]
 802179a:	f083 0301 	eor.w	r3, r3, #1
 802179e:	b2db      	uxtb	r3, r3
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	d005      	beq.n	80217b0 <mg_timer_poll+0x86>
 80217a4:	7ebb      	ldrb	r3, [r7, #26]
 80217a6:	f083 0301 	eor.w	r3, r3, #1
 80217aa:	b2db      	uxtb	r3, r3
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d118      	bne.n	80217e2 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80217b0:	69fb      	ldr	r3, [r7, #28]
 80217b2:	699b      	ldr	r3, [r3, #24]
 80217b4:	f003 0301 	and.w	r3, r3, #1
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d105      	bne.n	80217c8 <mg_timer_poll+0x9e>
 80217bc:	69fb      	ldr	r3, [r7, #28]
 80217be:	699b      	ldr	r3, [r3, #24]
 80217c0:	f003 0304 	and.w	r3, r3, #4
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	d105      	bne.n	80217d4 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80217c8:	69fb      	ldr	r3, [r7, #28]
 80217ca:	69db      	ldr	r3, [r3, #28]
 80217cc:	69fa      	ldr	r2, [r7, #28]
 80217ce:	6a12      	ldr	r2, [r2, #32]
 80217d0:	4610      	mov	r0, r2
 80217d2:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80217d4:	69fb      	ldr	r3, [r7, #28]
 80217d6:	699b      	ldr	r3, [r3, #24]
 80217d8:	f043 0204 	orr.w	r2, r3, #4
 80217dc:	69fb      	ldr	r3, [r7, #28]
 80217de:	619a      	str	r2, [r3, #24]
 80217e0:	e000      	b.n	80217e4 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80217e2:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80217e4:	697b      	ldr	r3, [r7, #20]
 80217e6:	61fb      	str	r3, [r7, #28]
 80217e8:	69fb      	ldr	r3, [r7, #28]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d1a7      	bne.n	802173e <mg_timer_poll+0x14>
  }
}
 80217ee:	bf00      	nop
 80217f0:	bf00      	nop
 80217f2:	3724      	adds	r7, #36	@ 0x24
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd90      	pop	{r4, r7, pc}

080217f8 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 80217f8:	b480      	push	{r7}
 80217fa:	b083      	sub	sp, #12
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8021800:	bf00      	nop
 8021802:	370c      	adds	r7, #12
 8021804:	46bd      	mov	sp, r7
 8021806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802180a:	4770      	bx	lr

0802180c <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 802180c:	b480      	push	{r7}
 802180e:	b083      	sub	sp, #12
 8021810:	af00      	add	r7, sp, #0
 8021812:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8021814:	bf00      	nop
 8021816:	370c      	adds	r7, #12
 8021818:	46bd      	mov	sp, r7
 802181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181e:	4770      	bx	lr

08021820 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8021820:	b480      	push	{r7}
 8021822:	b085      	sub	sp, #20
 8021824:	af00      	add	r7, sp, #0
 8021826:	60f8      	str	r0, [r7, #12]
 8021828:	60b9      	str	r1, [r7, #8]
 802182a:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802182c:	68fb      	ldr	r3, [r7, #12]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d005      	beq.n	802183e <mg_tls_recv+0x1e>
 8021832:	68bb      	ldr	r3, [r7, #8]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d002      	beq.n	802183e <mg_tls_recv+0x1e>
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	2b00      	cmp	r3, #0
 802183c:	d101      	bne.n	8021842 <mg_tls_recv+0x22>
 802183e:	2300      	movs	r3, #0
 8021840:	e001      	b.n	8021846 <mg_tls_recv+0x26>
 8021842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8021846:	4618      	mov	r0, r3
 8021848:	3714      	adds	r7, #20
 802184a:	46bd      	mov	sp, r7
 802184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021850:	4770      	bx	lr

08021852 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8021852:	b480      	push	{r7}
 8021854:	b085      	sub	sp, #20
 8021856:	af00      	add	r7, sp, #0
 8021858:	60f8      	str	r0, [r7, #12]
 802185a:	60b9      	str	r1, [r7, #8]
 802185c:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802185e:	68fb      	ldr	r3, [r7, #12]
 8021860:	2b00      	cmp	r3, #0
 8021862:	d005      	beq.n	8021870 <mg_tls_send+0x1e>
 8021864:	68bb      	ldr	r3, [r7, #8]
 8021866:	2b00      	cmp	r3, #0
 8021868:	d002      	beq.n	8021870 <mg_tls_send+0x1e>
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d101      	bne.n	8021874 <mg_tls_send+0x22>
 8021870:	2300      	movs	r3, #0
 8021872:	e001      	b.n	8021878 <mg_tls_send+0x26>
 8021874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8021878:	4618      	mov	r0, r3
 802187a:	3714      	adds	r7, #20
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr

08021884 <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 8021884:	b480      	push	{r7}
 8021886:	b083      	sub	sp, #12
 8021888:	af00      	add	r7, sp, #0
 802188a:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 802188c:	2300      	movs	r3, #0
}
 802188e:	4618      	mov	r0, r3
 8021890:	370c      	adds	r7, #12
 8021892:	46bd      	mov	sp, r7
 8021894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021898:	4770      	bx	lr

0802189a <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 802189a:	b480      	push	{r7}
 802189c:	b083      	sub	sp, #12
 802189e:	af00      	add	r7, sp, #0
 80218a0:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 80218a2:	bf00      	nop
 80218a4:	370c      	adds	r7, #12
 80218a6:	46bd      	mov	sp, r7
 80218a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ac:	4770      	bx	lr
	...

080218b0 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b082      	sub	sp, #8
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80218b8:	2204      	movs	r2, #4
 80218ba:	491b      	ldr	r1, [pc, #108]	@ (8021928 <mg_url_is_ssl+0x78>)
 80218bc:	6878      	ldr	r0, [r7, #4]
 80218be:	f001 fa40 	bl	8022d42 <strncmp>
 80218c2:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d027      	beq.n	8021918 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80218c8:	2206      	movs	r2, #6
 80218ca:	4918      	ldr	r1, [pc, #96]	@ (802192c <mg_url_is_ssl+0x7c>)
 80218cc:	6878      	ldr	r0, [r7, #4]
 80218ce:	f001 fa38 	bl	8022d42 <strncmp>
 80218d2:	4603      	mov	r3, r0
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d01f      	beq.n	8021918 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80218d8:	2206      	movs	r2, #6
 80218da:	4915      	ldr	r1, [pc, #84]	@ (8021930 <mg_url_is_ssl+0x80>)
 80218dc:	6878      	ldr	r0, [r7, #4]
 80218de:	f001 fa30 	bl	8022d42 <strncmp>
 80218e2:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	d017      	beq.n	8021918 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80218e8:	2204      	movs	r2, #4
 80218ea:	4912      	ldr	r1, [pc, #72]	@ (8021934 <mg_url_is_ssl+0x84>)
 80218ec:	6878      	ldr	r0, [r7, #4]
 80218ee:	f001 fa28 	bl	8022d42 <strncmp>
 80218f2:	4603      	mov	r3, r0
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d00f      	beq.n	8021918 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80218f8:	2204      	movs	r2, #4
 80218fa:	490f      	ldr	r1, [pc, #60]	@ (8021938 <mg_url_is_ssl+0x88>)
 80218fc:	6878      	ldr	r0, [r7, #4]
 80218fe:	f001 fa20 	bl	8022d42 <strncmp>
 8021902:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021904:	2b00      	cmp	r3, #0
 8021906:	d007      	beq.n	8021918 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8021908:	2205      	movs	r2, #5
 802190a:	490c      	ldr	r1, [pc, #48]	@ (802193c <mg_url_is_ssl+0x8c>)
 802190c:	6878      	ldr	r0, [r7, #4]
 802190e:	f001 fa18 	bl	8022d42 <strncmp>
 8021912:	4603      	mov	r3, r0
 8021914:	2b00      	cmp	r3, #0
 8021916:	d101      	bne.n	802191c <mg_url_is_ssl+0x6c>
 8021918:	2301      	movs	r3, #1
 802191a:	e000      	b.n	802191e <mg_url_is_ssl+0x6e>
 802191c:	2300      	movs	r3, #0
}
 802191e:	4618      	mov	r0, r3
 8021920:	3708      	adds	r7, #8
 8021922:	46bd      	mov	sp, r7
 8021924:	bd80      	pop	{r7, pc}
 8021926:	bf00      	nop
 8021928:	08028620 	.word	0x08028620
 802192c:	08028628 	.word	0x08028628
 8021930:	08028630 	.word	0x08028630
 8021934:	08028638 	.word	0x08028638
 8021938:	08028640 	.word	0x08028640
 802193c:	08028648 	.word	0x08028648

08021940 <urlparse>:

static struct url urlparse(const char *url) {
 8021940:	b5b0      	push	{r4, r5, r7, lr}
 8021942:	b08a      	sub	sp, #40	@ 0x28
 8021944:	af00      	add	r7, sp, #0
 8021946:	6078      	str	r0, [r7, #4]
 8021948:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 802194a:	f107 0308 	add.w	r3, r7, #8
 802194e:	221c      	movs	r2, #28
 8021950:	2100      	movs	r1, #0
 8021952:	4618      	mov	r0, r3
 8021954:	f001 fa80 	bl	8022e58 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8021958:	2300      	movs	r3, #0
 802195a:	627b      	str	r3, [r7, #36]	@ 0x24
 802195c:	e05b      	b.n	8021a16 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 802195e:	683a      	ldr	r2, [r7, #0]
 8021960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021962:	4413      	add	r3, r2
 8021964:	781b      	ldrb	r3, [r3, #0]
 8021966:	2b2f      	cmp	r3, #47	@ 0x2f
 8021968:	d112      	bne.n	8021990 <urlparse+0x50>
 802196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802196c:	2b00      	cmp	r3, #0
 802196e:	d00f      	beq.n	8021990 <urlparse+0x50>
 8021970:	697b      	ldr	r3, [r7, #20]
 8021972:	2b00      	cmp	r3, #0
 8021974:	d10c      	bne.n	8021990 <urlparse+0x50>
 8021976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021978:	3b01      	subs	r3, #1
 802197a:	683a      	ldr	r2, [r7, #0]
 802197c:	4413      	add	r3, r2
 802197e:	781b      	ldrb	r3, [r3, #0]
 8021980:	2b2f      	cmp	r3, #47	@ 0x2f
 8021982:	d105      	bne.n	8021990 <urlparse+0x50>
      u.host = i + 1;
 8021984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021986:	3301      	adds	r3, #1
 8021988:	617b      	str	r3, [r7, #20]
      u.port = 0;
 802198a:	2300      	movs	r3, #0
 802198c:	61bb      	str	r3, [r7, #24]
 802198e:	e03f      	b.n	8021a10 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8021990:	683a      	ldr	r2, [r7, #0]
 8021992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021994:	4413      	add	r3, r2
 8021996:	781b      	ldrb	r3, [r3, #0]
 8021998:	2b5d      	cmp	r3, #93	@ 0x5d
 802199a:	d102      	bne.n	80219a2 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 802199c:	2300      	movs	r3, #0
 802199e:	61bb      	str	r3, [r7, #24]
 80219a0:	e036      	b.n	8021a10 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80219a2:	683a      	ldr	r2, [r7, #0]
 80219a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80219a6:	4413      	add	r3, r2
 80219a8:	781b      	ldrb	r3, [r3, #0]
 80219aa:	2b3a      	cmp	r3, #58	@ 0x3a
 80219ac:	d109      	bne.n	80219c2 <urlparse+0x82>
 80219ae:	69bb      	ldr	r3, [r7, #24]
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d106      	bne.n	80219c2 <urlparse+0x82>
 80219b4:	69fb      	ldr	r3, [r7, #28]
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d103      	bne.n	80219c2 <urlparse+0x82>
      u.port = i + 1;
 80219ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80219bc:	3301      	adds	r3, #1
 80219be:	61bb      	str	r3, [r7, #24]
 80219c0:	e026      	b.n	8021a10 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80219c2:	683a      	ldr	r2, [r7, #0]
 80219c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80219c6:	4413      	add	r3, r2
 80219c8:	781b      	ldrb	r3, [r3, #0]
 80219ca:	2b40      	cmp	r3, #64	@ 0x40
 80219cc:	d112      	bne.n	80219f4 <urlparse+0xb4>
 80219ce:	68fb      	ldr	r3, [r7, #12]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d10f      	bne.n	80219f4 <urlparse+0xb4>
 80219d4:	693b      	ldr	r3, [r7, #16]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d10c      	bne.n	80219f4 <urlparse+0xb4>
 80219da:	69fb      	ldr	r3, [r7, #28]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d109      	bne.n	80219f4 <urlparse+0xb4>
      u.user = u.host;
 80219e0:	697b      	ldr	r3, [r7, #20]
 80219e2:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80219e4:	69bb      	ldr	r3, [r7, #24]
 80219e6:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80219e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80219ea:	3301      	adds	r3, #1
 80219ec:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80219ee:	2300      	movs	r3, #0
 80219f0:	61bb      	str	r3, [r7, #24]
 80219f2:	e00d      	b.n	8021a10 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80219f4:	683a      	ldr	r2, [r7, #0]
 80219f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80219f8:	4413      	add	r3, r2
 80219fa:	781b      	ldrb	r3, [r3, #0]
 80219fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80219fe:	d107      	bne.n	8021a10 <urlparse+0xd0>
 8021a00:	697b      	ldr	r3, [r7, #20]
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d004      	beq.n	8021a10 <urlparse+0xd0>
 8021a06:	69fb      	ldr	r3, [r7, #28]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d101      	bne.n	8021a10 <urlparse+0xd0>
      u.uri = i;
 8021a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a0e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a12:	3301      	adds	r3, #1
 8021a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8021a16:	683a      	ldr	r2, [r7, #0]
 8021a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a1a:	4413      	add	r3, r2
 8021a1c:	781b      	ldrb	r3, [r3, #0]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d19d      	bne.n	802195e <urlparse+0x1e>
    }
  }
  u.end = i;
 8021a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a24:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	461d      	mov	r5, r3
 8021a2a:	f107 0408 	add.w	r4, r7, #8
 8021a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021a32:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8021a36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8021a3a:	6878      	ldr	r0, [r7, #4]
 8021a3c:	3728      	adds	r7, #40	@ 0x28
 8021a3e:	46bd      	mov	sp, r7
 8021a40:	bdb0      	pop	{r4, r5, r7, pc}

08021a42 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8021a42:	b580      	push	{r7, lr}
 8021a44:	b08c      	sub	sp, #48	@ 0x30
 8021a46:	af00      	add	r7, sp, #0
 8021a48:	6078      	str	r0, [r7, #4]
 8021a4a:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8021a4c:	f107 0310 	add.w	r3, r7, #16
 8021a50:	6839      	ldr	r1, [r7, #0]
 8021a52:	4618      	mov	r0, r3
 8021a54:	f7ff ff74 	bl	8021940 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8021a58:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d004      	beq.n	8021a68 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8021a5e:	6a3a      	ldr	r2, [r7, #32]
 8021a60:	69fb      	ldr	r3, [r7, #28]
 8021a62:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8021a64:	3b01      	subs	r3, #1
 8021a66:	e009      	b.n	8021a7c <mg_url_host+0x3a>
 8021a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d003      	beq.n	8021a76 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8021a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021a70:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8021a72:	1ad3      	subs	r3, r2, r3
 8021a74:	e002      	b.n	8021a7c <mg_url_host+0x3a>
 8021a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021a78:	69fb      	ldr	r3, [r7, #28]
 8021a7a:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8021a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8021a7e:	69fb      	ldr	r3, [r7, #28]
 8021a80:	683a      	ldr	r2, [r7, #0]
 8021a82:	18d1      	adds	r1, r2, r3
 8021a84:	f107 0308 	add.w	r3, r7, #8
 8021a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f7ff f983 	bl	8020d96 <mg_str_n>
  return s;
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	461a      	mov	r2, r3
 8021a94:	f107 0308 	add.w	r3, r7, #8
 8021a98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021a9c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021aa0:	6878      	ldr	r0, [r7, #4]
 8021aa2:	3730      	adds	r7, #48	@ 0x30
 8021aa4:	46bd      	mov	sp, r7
 8021aa6:	bd80      	pop	{r7, pc}

08021aa8 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8021aa8:	b580      	push	{r7, lr}
 8021aaa:	b08a      	sub	sp, #40	@ 0x28
 8021aac:	af00      	add	r7, sp, #0
 8021aae:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8021ab0:	f107 0308 	add.w	r3, r7, #8
 8021ab4:	6879      	ldr	r1, [r7, #4]
 8021ab6:	4618      	mov	r0, r3
 8021ab8:	f7ff ff42 	bl	8021940 <urlparse>
  unsigned short port = 0;
 8021abc:	2300      	movs	r3, #0
 8021abe:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8021ac0:	2205      	movs	r2, #5
 8021ac2:	4925      	ldr	r1, [pc, #148]	@ (8021b58 <mg_url_port+0xb0>)
 8021ac4:	6878      	ldr	r0, [r7, #4]
 8021ac6:	f001 f93c 	bl	8022d42 <strncmp>
 8021aca:	4603      	mov	r3, r0
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d007      	beq.n	8021ae0 <mg_url_port+0x38>
 8021ad0:	2203      	movs	r2, #3
 8021ad2:	4922      	ldr	r1, [pc, #136]	@ (8021b5c <mg_url_port+0xb4>)
 8021ad4:	6878      	ldr	r0, [r7, #4]
 8021ad6:	f001 f934 	bl	8022d42 <strncmp>
 8021ada:	4603      	mov	r3, r0
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d101      	bne.n	8021ae4 <mg_url_port+0x3c>
 8021ae0:	2350      	movs	r3, #80	@ 0x50
 8021ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8021ae4:	2204      	movs	r2, #4
 8021ae6:	491e      	ldr	r1, [pc, #120]	@ (8021b60 <mg_url_port+0xb8>)
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f001 f92a 	bl	8022d42 <strncmp>
 8021aee:	4603      	mov	r3, r0
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d007      	beq.n	8021b04 <mg_url_port+0x5c>
 8021af4:	2206      	movs	r2, #6
 8021af6:	491b      	ldr	r1, [pc, #108]	@ (8021b64 <mg_url_port+0xbc>)
 8021af8:	6878      	ldr	r0, [r7, #4]
 8021afa:	f001 f922 	bl	8022d42 <strncmp>
 8021afe:	4603      	mov	r3, r0
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	d102      	bne.n	8021b0a <mg_url_port+0x62>
    port = 443;
 8021b04:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8021b08:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8021b0a:	2205      	movs	r2, #5
 8021b0c:	4916      	ldr	r1, [pc, #88]	@ (8021b68 <mg_url_port+0xc0>)
 8021b0e:	6878      	ldr	r0, [r7, #4]
 8021b10:	f001 f917 	bl	8022d42 <strncmp>
 8021b14:	4603      	mov	r3, r0
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d102      	bne.n	8021b20 <mg_url_port+0x78>
 8021b1a:	f240 735b 	movw	r3, #1883	@ 0x75b
 8021b1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8021b20:	2206      	movs	r2, #6
 8021b22:	4912      	ldr	r1, [pc, #72]	@ (8021b6c <mg_url_port+0xc4>)
 8021b24:	6878      	ldr	r0, [r7, #4]
 8021b26:	f001 f90c 	bl	8022d42 <strncmp>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d102      	bne.n	8021b36 <mg_url_port+0x8e>
 8021b30:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8021b34:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8021b36:	69bb      	ldr	r3, [r7, #24]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d007      	beq.n	8021b4c <mg_url_port+0xa4>
 8021b3c:	69bb      	ldr	r3, [r7, #24]
 8021b3e:	687a      	ldr	r2, [r7, #4]
 8021b40:	4413      	add	r3, r2
 8021b42:	4618      	mov	r0, r3
 8021b44:	f000 fcda 	bl	80224fc <atoi>
 8021b48:	4603      	mov	r3, r0
 8021b4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8021b4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8021b4e:	4618      	mov	r0, r3
 8021b50:	3728      	adds	r7, #40	@ 0x28
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	08028650 	.word	0x08028650
 8021b5c:	08028658 	.word	0x08028658
 8021b60:	08028620 	.word	0x08028620
 8021b64:	08028628 	.word	0x08028628
 8021b68:	0802865c 	.word	0x0802865c
 8021b6c:	08028630 	.word	0x08028630

08021b70 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8021b70:	b480      	push	{r7}
 8021b72:	b083      	sub	sp, #12
 8021b74:	af00      	add	r7, sp, #0
 8021b76:	6078      	str	r0, [r7, #4]
 8021b78:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d00a      	beq.n	8021b96 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8021b80:	e004      	b.n	8021b8c <mg_bzero+0x1c>
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	1c5a      	adds	r2, r3, #1
 8021b86:	607a      	str	r2, [r7, #4]
 8021b88:	2200      	movs	r2, #0
 8021b8a:	701a      	strb	r2, [r3, #0]
 8021b8c:	683b      	ldr	r3, [r7, #0]
 8021b8e:	1e5a      	subs	r2, r3, #1
 8021b90:	603a      	str	r2, [r7, #0]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d1f5      	bne.n	8021b82 <mg_bzero+0x12>
  }
}
 8021b96:	bf00      	nop
 8021b98:	370c      	adds	r7, #12
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba0:	4770      	bx	lr

08021ba2 <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 8021ba2:	b580      	push	{r7, lr}
 8021ba4:	b084      	sub	sp, #16
 8021ba6:	af00      	add	r7, sp, #0
 8021ba8:	6078      	str	r0, [r7, #4]
 8021baa:	6039      	str	r1, [r7, #0]
  bool done = false;
 8021bac:	2300      	movs	r3, #0
 8021bae:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8021bb4:	e007      	b.n	8021bc6 <mg_random+0x24>
 8021bb6:	f000 fe4d 	bl	8022854 <rand>
 8021bba:	4601      	mov	r1, r0
 8021bbc:	68fb      	ldr	r3, [r7, #12]
 8021bbe:	1c5a      	adds	r2, r3, #1
 8021bc0:	60fa      	str	r2, [r7, #12]
 8021bc2:	b2ca      	uxtb	r2, r1
 8021bc4:	701a      	strb	r2, [r3, #0]
 8021bc6:	7afb      	ldrb	r3, [r7, #11]
 8021bc8:	f083 0301 	eor.w	r3, r3, #1
 8021bcc:	b2db      	uxtb	r3, r3
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d004      	beq.n	8021bdc <mg_random+0x3a>
 8021bd2:	683b      	ldr	r3, [r7, #0]
 8021bd4:	1e5a      	subs	r2, r3, #1
 8021bd6:	603a      	str	r2, [r7, #0]
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	d1ec      	bne.n	8021bb6 <mg_random+0x14>
}
 8021bdc:	bf00      	nop
 8021bde:	3710      	adds	r7, #16
 8021be0:	46bd      	mov	sp, r7
 8021be2:	bd80      	pop	{r7, pc}

08021be4 <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 8021be4:	b580      	push	{r7, lr}
 8021be6:	b084      	sub	sp, #16
 8021be8:	af00      	add	r7, sp, #0
 8021bea:	6078      	str	r0, [r7, #4]
 8021bec:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8021bee:	6839      	ldr	r1, [r7, #0]
 8021bf0:	6878      	ldr	r0, [r7, #4]
 8021bf2:	f7ff ffd6 	bl	8021ba2 <mg_random>
  for (i = 0; i < len; i++) {
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	60fb      	str	r3, [r7, #12]
 8021bfa:	e02d      	b.n	8021c58 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8021bfc:	687a      	ldr	r2, [r7, #4]
 8021bfe:	68fb      	ldr	r3, [r7, #12]
 8021c00:	4413      	add	r3, r2
 8021c02:	781a      	ldrb	r2, [r3, #0]
 8021c04:	0853      	lsrs	r3, r2, #1
 8021c06:	4919      	ldr	r1, [pc, #100]	@ (8021c6c <mg_random_str+0x88>)
 8021c08:	fba1 1303 	umull	r1, r3, r1, r3
 8021c0c:	0919      	lsrs	r1, r3, #4
 8021c0e:	460b      	mov	r3, r1
 8021c10:	015b      	lsls	r3, r3, #5
 8021c12:	1a5b      	subs	r3, r3, r1
 8021c14:	005b      	lsls	r3, r3, #1
 8021c16:	1ad3      	subs	r3, r2, r3
 8021c18:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8021c1a:	683b      	ldr	r3, [r7, #0]
 8021c1c:	3b01      	subs	r3, #1
 8021c1e:	68fa      	ldr	r2, [r7, #12]
 8021c20:	429a      	cmp	r2, r3
 8021c22:	d011      	beq.n	8021c48 <mg_random_str+0x64>
 8021c24:	7afb      	ldrb	r3, [r7, #11]
 8021c26:	2b19      	cmp	r3, #25
 8021c28:	d803      	bhi.n	8021c32 <mg_random_str+0x4e>
 8021c2a:	7afb      	ldrb	r3, [r7, #11]
 8021c2c:	3361      	adds	r3, #97	@ 0x61
 8021c2e:	b2db      	uxtb	r3, r3
 8021c30:	e00b      	b.n	8021c4a <mg_random_str+0x66>
 8021c32:	7afb      	ldrb	r3, [r7, #11]
 8021c34:	2b33      	cmp	r3, #51	@ 0x33
 8021c36:	d803      	bhi.n	8021c40 <mg_random_str+0x5c>
 8021c38:	7afb      	ldrb	r3, [r7, #11]
 8021c3a:	3327      	adds	r3, #39	@ 0x27
 8021c3c:	b2db      	uxtb	r3, r3
 8021c3e:	e004      	b.n	8021c4a <mg_random_str+0x66>
 8021c40:	7afb      	ldrb	r3, [r7, #11]
 8021c42:	3b04      	subs	r3, #4
 8021c44:	b2db      	uxtb	r3, r3
 8021c46:	e000      	b.n	8021c4a <mg_random_str+0x66>
 8021c48:	2300      	movs	r3, #0
 8021c4a:	6879      	ldr	r1, [r7, #4]
 8021c4c:	68fa      	ldr	r2, [r7, #12]
 8021c4e:	440a      	add	r2, r1
 8021c50:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8021c52:	68fb      	ldr	r3, [r7, #12]
 8021c54:	3301      	adds	r3, #1
 8021c56:	60fb      	str	r3, [r7, #12]
 8021c58:	68fa      	ldr	r2, [r7, #12]
 8021c5a:	683b      	ldr	r3, [r7, #0]
 8021c5c:	429a      	cmp	r2, r3
 8021c5e:	d3cd      	bcc.n	8021bfc <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8021c60:	687b      	ldr	r3, [r7, #4]
}
 8021c62:	4618      	mov	r0, r3
 8021c64:	3710      	adds	r7, #16
 8021c66:	46bd      	mov	sp, r7
 8021c68:	bd80      	pop	{r7, pc}
 8021c6a:	bf00      	nop
 8021c6c:	84210843 	.word	0x84210843

08021c70 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8021c70:	b480      	push	{r7}
 8021c72:	b085      	sub	sp, #20
 8021c74:	af00      	add	r7, sp, #0
 8021c76:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8021c78:	2300      	movs	r3, #0
 8021c7a:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8021c80:	7bfb      	ldrb	r3, [r7, #15]
 8021c82:	461a      	mov	r2, r3
 8021c84:	7bbb      	ldrb	r3, [r7, #14]
 8021c86:	021b      	lsls	r3, r3, #8
 8021c88:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8021c8a:	7b7b      	ldrb	r3, [r7, #13]
 8021c8c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8021c8e:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8021c90:	7b3b      	ldrb	r3, [r7, #12]
 8021c92:	061b      	lsls	r3, r3, #24
 8021c94:	4313      	orrs	r3, r2
}
 8021c96:	4618      	mov	r0, r3
 8021c98:	3714      	adds	r7, #20
 8021c9a:	46bd      	mov	sp, r7
 8021c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca0:	4770      	bx	lr

08021ca2 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8021ca2:	b480      	push	{r7}
 8021ca4:	b085      	sub	sp, #20
 8021ca6:	af00      	add	r7, sp, #0
 8021ca8:	4603      	mov	r3, r0
 8021caa:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8021cac:	2300      	movs	r3, #0
 8021cae:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8021cb0:	88fb      	ldrh	r3, [r7, #6]
 8021cb2:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8021cb4:	7b7b      	ldrb	r3, [r7, #13]
 8021cb6:	b21a      	sxth	r2, r3
 8021cb8:	7b3b      	ldrb	r3, [r7, #12]
 8021cba:	021b      	lsls	r3, r3, #8
 8021cbc:	b21b      	sxth	r3, r3
 8021cbe:	4313      	orrs	r3, r2
 8021cc0:	b21b      	sxth	r3, r3
 8021cc2:	b29b      	uxth	r3, r3
}
 8021cc4:	4618      	mov	r0, r3
 8021cc6:	3714      	adds	r7, #20
 8021cc8:	46bd      	mov	sp, r7
 8021cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cce:	4770      	bx	lr

08021cd0 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8021cd0:	b480      	push	{r7}
 8021cd2:	b087      	sub	sp, #28
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	60f8      	str	r0, [r7, #12]
 8021cd8:	60b9      	str	r1, [r7, #8]
 8021cda:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	43db      	mvns	r3, r3
 8021ce0:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021ce2:	e01f      	b.n	8021d24 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8021ce4:	68bb      	ldr	r3, [r7, #8]
 8021ce6:	1c5a      	adds	r2, r3, #1
 8021ce8:	60ba      	str	r2, [r7, #8]
 8021cea:	781b      	ldrb	r3, [r3, #0]
 8021cec:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8021cee:	7dfa      	ldrb	r2, [r7, #23]
 8021cf0:	68fb      	ldr	r3, [r7, #12]
 8021cf2:	4053      	eors	r3, r2
 8021cf4:	f003 030f 	and.w	r3, r3, #15
 8021cf8:	4a11      	ldr	r2, [pc, #68]	@ (8021d40 <mg_crc32+0x70>)
 8021cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021cfe:	68fb      	ldr	r3, [r7, #12]
 8021d00:	091b      	lsrs	r3, r3, #4
 8021d02:	4053      	eors	r3, r2
 8021d04:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8021d06:	7dfb      	ldrb	r3, [r7, #23]
 8021d08:	091b      	lsrs	r3, r3, #4
 8021d0a:	b2db      	uxtb	r3, r3
 8021d0c:	461a      	mov	r2, r3
 8021d0e:	68fb      	ldr	r3, [r7, #12]
 8021d10:	4053      	eors	r3, r2
 8021d12:	f003 030f 	and.w	r3, r3, #15
 8021d16:	4a0a      	ldr	r2, [pc, #40]	@ (8021d40 <mg_crc32+0x70>)
 8021d18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	091b      	lsrs	r3, r3, #4
 8021d20:	4053      	eors	r3, r2
 8021d22:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	1e5a      	subs	r2, r3, #1
 8021d28:	607a      	str	r2, [r7, #4]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d1da      	bne.n	8021ce4 <mg_crc32+0x14>
  }
  return ~crc;
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	43db      	mvns	r3, r3
}
 8021d32:	4618      	mov	r0, r3
 8021d34:	371c      	adds	r7, #28
 8021d36:	46bd      	mov	sp, r7
 8021d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d3c:	4770      	bx	lr
 8021d3e:	bf00      	nop
 8021d40:	080297f0 	.word	0x080297f0

08021d44 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8021d44:	b480      	push	{r7}
 8021d46:	b085      	sub	sp, #20
 8021d48:	af00      	add	r7, sp, #0
 8021d4a:	463b      	mov	r3, r7
 8021d4c:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8021d50:	683b      	ldr	r3, [r7, #0]
 8021d52:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8021d58:	683b      	ldr	r3, [r7, #0]
 8021d5a:	781b      	ldrb	r3, [r3, #0]
 8021d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d5e:	d123      	bne.n	8021da8 <mg_path_is_sane+0x64>
 8021d60:	683b      	ldr	r3, [r7, #0]
 8021d62:	3301      	adds	r3, #1
 8021d64:	781b      	ldrb	r3, [r3, #0]
 8021d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d68:	d11e      	bne.n	8021da8 <mg_path_is_sane+0x64>
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	e024      	b.n	8021db8 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8021d6e:	68fb      	ldr	r3, [r7, #12]
 8021d70:	781b      	ldrb	r3, [r3, #0]
 8021d72:	2b2f      	cmp	r3, #47	@ 0x2f
 8021d74:	d003      	beq.n	8021d7e <mg_path_is_sane+0x3a>
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	781b      	ldrb	r3, [r3, #0]
 8021d7a:	2b5c      	cmp	r3, #92	@ 0x5c
 8021d7c:	d10e      	bne.n	8021d9c <mg_path_is_sane+0x58>
 8021d7e:	68bb      	ldr	r3, [r7, #8]
 8021d80:	2b01      	cmp	r3, #1
 8021d82:	d90b      	bls.n	8021d9c <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	3301      	adds	r3, #1
 8021d88:	781b      	ldrb	r3, [r3, #0]
 8021d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d8c:	d106      	bne.n	8021d9c <mg_path_is_sane+0x58>
 8021d8e:	68fb      	ldr	r3, [r7, #12]
 8021d90:	3302      	adds	r3, #2
 8021d92:	781b      	ldrb	r3, [r3, #0]
 8021d94:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d96:	d101      	bne.n	8021d9c <mg_path_is_sane+0x58>
 8021d98:	2300      	movs	r3, #0
 8021d9a:	e00d      	b.n	8021db8 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8021d9c:	68fb      	ldr	r3, [r7, #12]
 8021d9e:	3301      	adds	r3, #1
 8021da0:	60fb      	str	r3, [r7, #12]
 8021da2:	68bb      	ldr	r3, [r7, #8]
 8021da4:	3b01      	subs	r3, #1
 8021da6:	60bb      	str	r3, [r7, #8]
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	781b      	ldrb	r3, [r3, #0]
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d002      	beq.n	8021db6 <mg_path_is_sane+0x72>
 8021db0:	68bb      	ldr	r3, [r7, #8]
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d1db      	bne.n	8021d6e <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8021db6:	2301      	movs	r3, #1
}
 8021db8:	4618      	mov	r0, r3
 8021dba:	3714      	adds	r7, #20
 8021dbc:	46bd      	mov	sp, r7
 8021dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc2:	4770      	bx	lr

08021dc4 <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8021dc4:	b5b0      	push	{r4, r5, r7, lr}
 8021dc6:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8021dc8:	f7e8 fc5e 	bl	800a688 <xTaskGetTickCount>
 8021dcc:	4603      	mov	r3, r0
 8021dce:	2200      	movs	r2, #0
 8021dd0:	461c      	mov	r4, r3
 8021dd2:	4615      	mov	r5, r2
 8021dd4:	4622      	mov	r2, r4
 8021dd6:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8021dd8:	4610      	mov	r0, r2
 8021dda:	4619      	mov	r1, r3
 8021ddc:	bdb0      	pop	{r4, r5, r7, pc}

08021dde <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021dde:	b580      	push	{r7, lr}
 8021de0:	b086      	sub	sp, #24
 8021de2:	af00      	add	r7, sp, #0
 8021de4:	6078      	str	r0, [r7, #4]
 8021de6:	4608      	mov	r0, r1
 8021de8:	4611      	mov	r1, r2
 8021dea:	461a      	mov	r2, r3
 8021dec:	4603      	mov	r3, r0
 8021dee:	70fb      	strb	r3, [r7, #3]
 8021df0:	460b      	mov	r3, r1
 8021df2:	803b      	strh	r3, [r7, #0]
 8021df4:	4613      	mov	r3, r2
 8021df6:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 8021df8:	6a3b      	ldr	r3, [r7, #32]
 8021dfa:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021dfc:	883b      	ldrh	r3, [r7, #0]
 8021dfe:	0a1b      	lsrs	r3, r3, #8
 8021e00:	b29b      	uxth	r3, r3
 8021e02:	b2db      	uxtb	r3, r3
 8021e04:	733b      	strb	r3, [r7, #12]
 8021e06:	883b      	ldrh	r3, [r7, #0]
 8021e08:	b2db      	uxtb	r3, r3
 8021e0a:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021e0c:	78fb      	ldrb	r3, [r7, #3]
 8021e0e:	00db      	lsls	r3, r3, #3
 8021e10:	b25b      	sxtb	r3, r3
 8021e12:	78ba      	ldrb	r2, [r7, #2]
 8021e14:	2a00      	cmp	r2, #0
 8021e16:	d001      	beq.n	8021e1c <w5500_txn+0x3e>
 8021e18:	2204      	movs	r2, #4
 8021e1a:	e000      	b.n	8021e1e <w5500_txn+0x40>
 8021e1c:	2200      	movs	r2, #0
 8021e1e:	4313      	orrs	r3, r2
 8021e20:	b25b      	sxtb	r3, r3
 8021e22:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021e24:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	685b      	ldr	r3, [r3, #4]
 8021e2a:	687a      	ldr	r2, [r7, #4]
 8021e2c:	6812      	ldr	r2, [r2, #0]
 8021e2e:	4610      	mov	r0, r2
 8021e30:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021e32:	2300      	movs	r3, #0
 8021e34:	617b      	str	r3, [r7, #20]
 8021e36:	e00d      	b.n	8021e54 <w5500_txn+0x76>
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	68db      	ldr	r3, [r3, #12]
 8021e3c:	687a      	ldr	r2, [r7, #4]
 8021e3e:	6810      	ldr	r0, [r2, #0]
 8021e40:	f107 010c 	add.w	r1, r7, #12
 8021e44:	697a      	ldr	r2, [r7, #20]
 8021e46:	440a      	add	r2, r1
 8021e48:	7812      	ldrb	r2, [r2, #0]
 8021e4a:	4611      	mov	r1, r2
 8021e4c:	4798      	blx	r3
 8021e4e:	697b      	ldr	r3, [r7, #20]
 8021e50:	3301      	adds	r3, #1
 8021e52:	617b      	str	r3, [r7, #20]
 8021e54:	697b      	ldr	r3, [r7, #20]
 8021e56:	2b02      	cmp	r3, #2
 8021e58:	d9ee      	bls.n	8021e38 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8021e5a:	2300      	movs	r3, #0
 8021e5c:	617b      	str	r3, [r7, #20]
 8021e5e:	e019      	b.n	8021e94 <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	68db      	ldr	r3, [r3, #12]
 8021e64:	687a      	ldr	r2, [r7, #4]
 8021e66:	6810      	ldr	r0, [r2, #0]
 8021e68:	6939      	ldr	r1, [r7, #16]
 8021e6a:	697a      	ldr	r2, [r7, #20]
 8021e6c:	440a      	add	r2, r1
 8021e6e:	7812      	ldrb	r2, [r2, #0]
 8021e70:	4611      	mov	r1, r2
 8021e72:	4798      	blx	r3
 8021e74:	4603      	mov	r3, r0
 8021e76:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8021e78:	78bb      	ldrb	r3, [r7, #2]
 8021e7a:	f083 0301 	eor.w	r3, r3, #1
 8021e7e:	b2db      	uxtb	r3, r3
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d004      	beq.n	8021e8e <w5500_txn+0xb0>
 8021e84:	693a      	ldr	r2, [r7, #16]
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	4413      	add	r3, r2
 8021e8a:	7bfa      	ldrb	r2, [r7, #15]
 8021e8c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8021e8e:	697b      	ldr	r3, [r7, #20]
 8021e90:	3301      	adds	r3, #1
 8021e92:	617b      	str	r3, [r7, #20]
 8021e94:	697a      	ldr	r2, [r7, #20]
 8021e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e98:	429a      	cmp	r2, r3
 8021e9a:	d3e1      	bcc.n	8021e60 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	689b      	ldr	r3, [r3, #8]
 8021ea0:	687a      	ldr	r2, [r7, #4]
 8021ea2:	6812      	ldr	r2, [r2, #0]
 8021ea4:	4610      	mov	r0, r2
 8021ea6:	4798      	blx	r3
}
 8021ea8:	bf00      	nop
 8021eaa:	3718      	adds	r7, #24
 8021eac:	46bd      	mov	sp, r7
 8021eae:	bd80      	pop	{r7, pc}

08021eb0 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b086      	sub	sp, #24
 8021eb4:	af02      	add	r7, sp, #8
 8021eb6:	60f8      	str	r0, [r7, #12]
 8021eb8:	607b      	str	r3, [r7, #4]
 8021eba:	460b      	mov	r3, r1
 8021ebc:	72fb      	strb	r3, [r7, #11]
 8021ebe:	4613      	mov	r3, r2
 8021ec0:	813b      	strh	r3, [r7, #8]
 8021ec2:	893a      	ldrh	r2, [r7, #8]
 8021ec4:	7af9      	ldrb	r1, [r7, #11]
 8021ec6:	69bb      	ldr	r3, [r7, #24]
 8021ec8:	9301      	str	r3, [sp, #4]
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	9300      	str	r3, [sp, #0]
 8021ece:	2301      	movs	r3, #1
 8021ed0:	68f8      	ldr	r0, [r7, #12]
 8021ed2:	f7ff ff84 	bl	8021dde <w5500_txn>
 8021ed6:	bf00      	nop
 8021ed8:	3710      	adds	r7, #16
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bd80      	pop	{r7, pc}

08021ede <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8021ede:	b580      	push	{r7, lr}
 8021ee0:	b084      	sub	sp, #16
 8021ee2:	af02      	add	r7, sp, #8
 8021ee4:	6078      	str	r0, [r7, #4]
 8021ee6:	4608      	mov	r0, r1
 8021ee8:	4611      	mov	r1, r2
 8021eea:	461a      	mov	r2, r3
 8021eec:	4603      	mov	r3, r0
 8021eee:	70fb      	strb	r3, [r7, #3]
 8021ef0:	460b      	mov	r3, r1
 8021ef2:	803b      	strh	r3, [r7, #0]
 8021ef4:	4613      	mov	r3, r2
 8021ef6:	70bb      	strb	r3, [r7, #2]
 8021ef8:	1cbb      	adds	r3, r7, #2
 8021efa:	883a      	ldrh	r2, [r7, #0]
 8021efc:	78f9      	ldrb	r1, [r7, #3]
 8021efe:	2001      	movs	r0, #1
 8021f00:	9000      	str	r0, [sp, #0]
 8021f02:	6878      	ldr	r0, [r7, #4]
 8021f04:	f7ff ffd4 	bl	8021eb0 <w5500_wn>
 8021f08:	bf00      	nop
 8021f0a:	3708      	adds	r7, #8
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	bd80      	pop	{r7, pc}

08021f10 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8021f10:	b580      	push	{r7, lr}
 8021f12:	b088      	sub	sp, #32
 8021f14:	af02      	add	r7, sp, #8
 8021f16:	60f8      	str	r0, [r7, #12]
 8021f18:	4608      	mov	r0, r1
 8021f1a:	4611      	mov	r1, r2
 8021f1c:	461a      	mov	r2, r3
 8021f1e:	4603      	mov	r3, r0
 8021f20:	72fb      	strb	r3, [r7, #11]
 8021f22:	460b      	mov	r3, r1
 8021f24:	813b      	strh	r3, [r7, #8]
 8021f26:	4613      	mov	r3, r2
 8021f28:	80fb      	strh	r3, [r7, #6]
 8021f2a:	88fb      	ldrh	r3, [r7, #6]
 8021f2c:	0a1b      	lsrs	r3, r3, #8
 8021f2e:	b29b      	uxth	r3, r3
 8021f30:	b2db      	uxtb	r3, r3
 8021f32:	753b      	strb	r3, [r7, #20]
 8021f34:	88fb      	ldrh	r3, [r7, #6]
 8021f36:	b2db      	uxtb	r3, r3
 8021f38:	757b      	strb	r3, [r7, #21]
 8021f3a:	f107 0314 	add.w	r3, r7, #20
 8021f3e:	893a      	ldrh	r2, [r7, #8]
 8021f40:	7af9      	ldrb	r1, [r7, #11]
 8021f42:	2002      	movs	r0, #2
 8021f44:	9000      	str	r0, [sp, #0]
 8021f46:	68f8      	ldr	r0, [r7, #12]
 8021f48:	f7ff ffb2 	bl	8021eb0 <w5500_wn>
 8021f4c:	bf00      	nop
 8021f4e:	3718      	adds	r7, #24
 8021f50:	46bd      	mov	sp, r7
 8021f52:	bd80      	pop	{r7, pc}

08021f54 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b086      	sub	sp, #24
 8021f58:	af02      	add	r7, sp, #8
 8021f5a:	60f8      	str	r0, [r7, #12]
 8021f5c:	607b      	str	r3, [r7, #4]
 8021f5e:	460b      	mov	r3, r1
 8021f60:	72fb      	strb	r3, [r7, #11]
 8021f62:	4613      	mov	r3, r2
 8021f64:	813b      	strh	r3, [r7, #8]
 8021f66:	893a      	ldrh	r2, [r7, #8]
 8021f68:	7af9      	ldrb	r1, [r7, #11]
 8021f6a:	69bb      	ldr	r3, [r7, #24]
 8021f6c:	9301      	str	r3, [sp, #4]
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	9300      	str	r3, [sp, #0]
 8021f72:	2300      	movs	r3, #0
 8021f74:	68f8      	ldr	r0, [r7, #12]
 8021f76:	f7ff ff32 	bl	8021dde <w5500_txn>
 8021f7a:	bf00      	nop
 8021f7c:	3710      	adds	r7, #16
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	bd80      	pop	{r7, pc}

08021f82 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8021f82:	b580      	push	{r7, lr}
 8021f84:	b086      	sub	sp, #24
 8021f86:	af02      	add	r7, sp, #8
 8021f88:	6078      	str	r0, [r7, #4]
 8021f8a:	460b      	mov	r3, r1
 8021f8c:	70fb      	strb	r3, [r7, #3]
 8021f8e:	4613      	mov	r3, r2
 8021f90:	803b      	strh	r3, [r7, #0]
 8021f92:	2300      	movs	r3, #0
 8021f94:	73fb      	strb	r3, [r7, #15]
 8021f96:	f107 030f 	add.w	r3, r7, #15
 8021f9a:	883a      	ldrh	r2, [r7, #0]
 8021f9c:	78f9      	ldrb	r1, [r7, #3]
 8021f9e:	2001      	movs	r0, #1
 8021fa0:	9000      	str	r0, [sp, #0]
 8021fa2:	6878      	ldr	r0, [r7, #4]
 8021fa4:	f7ff ffd6 	bl	8021f54 <w5500_rn>
 8021fa8:	7bfb      	ldrb	r3, [r7, #15]
 8021faa:	4618      	mov	r0, r3
 8021fac:	3710      	adds	r7, #16
 8021fae:	46bd      	mov	sp, r7
 8021fb0:	bd80      	pop	{r7, pc}

08021fb2 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b086      	sub	sp, #24
 8021fb6:	af02      	add	r7, sp, #8
 8021fb8:	6078      	str	r0, [r7, #4]
 8021fba:	460b      	mov	r3, r1
 8021fbc:	70fb      	strb	r3, [r7, #3]
 8021fbe:	4613      	mov	r3, r2
 8021fc0:	803b      	strh	r3, [r7, #0]
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	81bb      	strh	r3, [r7, #12]
 8021fc6:	f107 030c 	add.w	r3, r7, #12
 8021fca:	883a      	ldrh	r2, [r7, #0]
 8021fcc:	78f9      	ldrb	r1, [r7, #3]
 8021fce:	2002      	movs	r0, #2
 8021fd0:	9000      	str	r0, [sp, #0]
 8021fd2:	6878      	ldr	r0, [r7, #4]
 8021fd4:	f7ff ffbe 	bl	8021f54 <w5500_rn>
 8021fd8:	7b3b      	ldrb	r3, [r7, #12]
 8021fda:	021b      	lsls	r3, r3, #8
 8021fdc:	b21a      	sxth	r2, r3
 8021fde:	7b7b      	ldrb	r3, [r7, #13]
 8021fe0:	b21b      	sxth	r3, r3
 8021fe2:	4313      	orrs	r3, r2
 8021fe4:	b21b      	sxth	r3, r3
 8021fe6:	b29b      	uxth	r3, r3
 8021fe8:	4618      	mov	r0, r3
 8021fea:	3710      	adds	r7, #16
 8021fec:	46bd      	mov	sp, r7
 8021fee:	bd80      	pop	{r7, pc}

08021ff0 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b08a      	sub	sp, #40	@ 0x28
 8021ff4:	af02      	add	r7, sp, #8
 8021ff6:	60f8      	str	r0, [r7, #12]
 8021ff8:	60b9      	str	r1, [r7, #8]
 8021ffa:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022000:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022002:	2300      	movs	r3, #0
 8022004:	83fb      	strh	r3, [r7, #30]
 8022006:	2300      	movs	r3, #0
 8022008:	83bb      	strh	r3, [r7, #28]
 802200a:	68bb      	ldr	r3, [r7, #8]
 802200c:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 802200e:	e001      	b.n	8022014 <w5500_rx+0x24>
 8022010:	8abb      	ldrh	r3, [r7, #20]
 8022012:	83bb      	strh	r3, [r7, #28]
 8022014:	2226      	movs	r2, #38	@ 0x26
 8022016:	2101      	movs	r1, #1
 8022018:	69b8      	ldr	r0, [r7, #24]
 802201a:	f7ff ffca 	bl	8021fb2 <w5500_r2>
 802201e:	4603      	mov	r3, r0
 8022020:	82bb      	strh	r3, [r7, #20]
 8022022:	8aba      	ldrh	r2, [r7, #20]
 8022024:	8bbb      	ldrh	r3, [r7, #28]
 8022026:	429a      	cmp	r2, r3
 8022028:	d8f2      	bhi.n	8022010 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 802202a:	8bbb      	ldrh	r3, [r7, #28]
 802202c:	2b00      	cmp	r3, #0
 802202e:	d032      	beq.n	8022096 <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8022030:	2228      	movs	r2, #40	@ 0x28
 8022032:	2101      	movs	r1, #1
 8022034:	69b8      	ldr	r0, [r7, #24]
 8022036:	f7ff ffbc 	bl	8021fb2 <w5500_r2>
 802203a:	4603      	mov	r3, r0
 802203c:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 802203e:	8a7b      	ldrh	r3, [r7, #18]
 8022040:	461a      	mov	r2, r3
 8022042:	2103      	movs	r1, #3
 8022044:	69b8      	ldr	r0, [r7, #24]
 8022046:	f7ff ffb4 	bl	8021fb2 <w5500_r2>
 802204a:	4603      	mov	r3, r0
 802204c:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 802204e:	8bba      	ldrh	r2, [r7, #28]
 8022050:	8afb      	ldrh	r3, [r7, #22]
 8022052:	3302      	adds	r3, #2
 8022054:	429a      	cmp	r2, r3
 8022056:	dc0f      	bgt.n	8022078 <w5500_rx+0x88>
 8022058:	8bbb      	ldrh	r3, [r7, #28]
 802205a:	2b01      	cmp	r3, #1
 802205c:	d90c      	bls.n	8022078 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 802205e:	8bbb      	ldrh	r3, [r7, #28]
 8022060:	3b02      	subs	r3, #2
 8022062:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022064:	8a7b      	ldrh	r3, [r7, #18]
 8022066:	3302      	adds	r3, #2
 8022068:	b29a      	uxth	r2, r3
 802206a:	8bfb      	ldrh	r3, [r7, #30]
 802206c:	9300      	str	r3, [sp, #0]
 802206e:	68fb      	ldr	r3, [r7, #12]
 8022070:	2103      	movs	r1, #3
 8022072:	69b8      	ldr	r0, [r7, #24]
 8022074:	f7ff ff6e 	bl	8021f54 <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8022078:	8a7a      	ldrh	r2, [r7, #18]
 802207a:	8bbb      	ldrh	r3, [r7, #28]
 802207c:	4413      	add	r3, r2
 802207e:	b29b      	uxth	r3, r3
 8022080:	2228      	movs	r2, #40	@ 0x28
 8022082:	2101      	movs	r1, #1
 8022084:	69b8      	ldr	r0, [r7, #24]
 8022086:	f7ff ff43 	bl	8021f10 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 802208a:	2340      	movs	r3, #64	@ 0x40
 802208c:	2201      	movs	r2, #1
 802208e:	2101      	movs	r1, #1
 8022090:	69b8      	ldr	r0, [r7, #24]
 8022092:	f7ff ff24 	bl	8021ede <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 8022096:	8bfb      	ldrh	r3, [r7, #30]
}
 8022098:	4618      	mov	r0, r3
 802209a:	3720      	adds	r7, #32
 802209c:	46bd      	mov	sp, r7
 802209e:	bd80      	pop	{r7, pc}

080220a0 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 80220a0:	b580      	push	{r7, lr}
 80220a2:	b08a      	sub	sp, #40	@ 0x28
 80220a4:	af02      	add	r7, sp, #8
 80220a6:	60f8      	str	r0, [r7, #12]
 80220a8:	60b9      	str	r1, [r7, #8]
 80220aa:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80220b0:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 80220b2:	2300      	movs	r3, #0
 80220b4:	83bb      	strh	r3, [r7, #28]
 80220b6:	68bb      	ldr	r3, [r7, #8]
 80220b8:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 80220ba:	e006      	b.n	80220ca <w5500_tx+0x2a>
 80220bc:	2220      	movs	r2, #32
 80220be:	2101      	movs	r1, #1
 80220c0:	6978      	ldr	r0, [r7, #20]
 80220c2:	f7ff ff76 	bl	8021fb2 <w5500_r2>
 80220c6:	4603      	mov	r3, r0
 80220c8:	83bb      	strh	r3, [r7, #28]
 80220ca:	8bba      	ldrh	r2, [r7, #28]
 80220cc:	8b7b      	ldrh	r3, [r7, #26]
 80220ce:	429a      	cmp	r2, r3
 80220d0:	d3f4      	bcc.n	80220bc <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 80220d2:	2224      	movs	r2, #36	@ 0x24
 80220d4:	2101      	movs	r1, #1
 80220d6:	6978      	ldr	r0, [r7, #20]
 80220d8:	f7ff ff6b 	bl	8021fb2 <w5500_r2>
 80220dc:	4603      	mov	r3, r0
 80220de:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 80220e0:	8b7b      	ldrh	r3, [r7, #26]
 80220e2:	8a7a      	ldrh	r2, [r7, #18]
 80220e4:	9300      	str	r3, [sp, #0]
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	2102      	movs	r1, #2
 80220ea:	6978      	ldr	r0, [r7, #20]
 80220ec:	f7ff fee0 	bl	8021eb0 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 80220f0:	8a7a      	ldrh	r2, [r7, #18]
 80220f2:	8b7b      	ldrh	r3, [r7, #26]
 80220f4:	4413      	add	r3, r2
 80220f6:	b29b      	uxth	r3, r3
 80220f8:	2224      	movs	r2, #36	@ 0x24
 80220fa:	2101      	movs	r1, #1
 80220fc:	6978      	ldr	r0, [r7, #20]
 80220fe:	f7ff ff07 	bl	8021f10 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022102:	2320      	movs	r3, #32
 8022104:	2201      	movs	r2, #1
 8022106:	2101      	movs	r1, #1
 8022108:	6978      	ldr	r0, [r7, #20]
 802210a:	f7ff fee8 	bl	8021ede <w5500_w1>
  for (i = 0; i < 40; i++) {
 802210e:	2300      	movs	r3, #0
 8022110:	83fb      	strh	r3, [r7, #30]
 8022112:	e020      	b.n	8022156 <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8022114:	2202      	movs	r2, #2
 8022116:	2101      	movs	r1, #1
 8022118:	6978      	ldr	r0, [r7, #20]
 802211a:	f7ff ff32 	bl	8021f82 <w5500_r1>
 802211e:	4603      	mov	r3, r0
 8022120:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 8022122:	7c7b      	ldrb	r3, [r7, #17]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d012      	beq.n	802214e <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8022128:	7c7b      	ldrb	r3, [r7, #17]
 802212a:	2202      	movs	r2, #2
 802212c:	2101      	movs	r1, #1
 802212e:	6978      	ldr	r0, [r7, #20]
 8022130:	f7ff fed5 	bl	8021ede <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8022134:	7c7b      	ldrb	r3, [r7, #17]
 8022136:	f003 0308 	and.w	r3, r3, #8
 802213a:	2b00      	cmp	r3, #0
 802213c:	d001      	beq.n	8022142 <w5500_tx+0xa2>
 802213e:	2300      	movs	r3, #0
 8022140:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022142:	7c7b      	ldrb	r3, [r7, #17]
 8022144:	f003 0318 	and.w	r3, r3, #24
 8022148:	2b00      	cmp	r3, #0
 802214a:	d108      	bne.n	802215e <w5500_tx+0xbe>
 802214c:	e000      	b.n	8022150 <w5500_tx+0xb0>
    if (ir == 0) continue;
 802214e:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8022150:	8bfb      	ldrh	r3, [r7, #30]
 8022152:	3301      	adds	r3, #1
 8022154:	83fb      	strh	r3, [r7, #30]
 8022156:	8bfb      	ldrh	r3, [r7, #30]
 8022158:	2b27      	cmp	r3, #39	@ 0x27
 802215a:	d9db      	bls.n	8022114 <w5500_tx+0x74>
 802215c:	e000      	b.n	8022160 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 802215e:	bf00      	nop
  }
  return len;
 8022160:	8b7b      	ldrh	r3, [r7, #26]
}
 8022162:	4618      	mov	r0, r3
 8022164:	3720      	adds	r7, #32
 8022166:	46bd      	mov	sp, r7
 8022168:	bd80      	pop	{r7, pc}

0802216a <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 802216a:	b580      	push	{r7, lr}
 802216c:	b084      	sub	sp, #16
 802216e:	af00      	add	r7, sp, #0
 8022170:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022176:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8022178:	68fb      	ldr	r3, [r7, #12]
 802217a:	689b      	ldr	r3, [r3, #8]
 802217c:	68fa      	ldr	r2, [r7, #12]
 802217e:	6812      	ldr	r2, [r2, #0]
 8022180:	4610      	mov	r0, r2
 8022182:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8022184:	2380      	movs	r3, #128	@ 0x80
 8022186:	2200      	movs	r2, #0
 8022188:	2100      	movs	r1, #0
 802218a:	68f8      	ldr	r0, [r7, #12]
 802218c:	f7ff fea7 	bl	8021ede <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8022190:	2300      	movs	r3, #0
 8022192:	222e      	movs	r2, #46	@ 0x2e
 8022194:	2100      	movs	r1, #0
 8022196:	68f8      	ldr	r0, [r7, #12]
 8022198:	f7ff fea1 	bl	8021ede <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 802219c:	23f8      	movs	r3, #248	@ 0xf8
 802219e:	222e      	movs	r2, #46	@ 0x2e
 80221a0:	2100      	movs	r1, #0
 80221a2:	68f8      	ldr	r0, [r7, #12]
 80221a4:	f7ff fe9b 	bl	8021ede <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 80221a8:	2310      	movs	r3, #16
 80221aa:	221e      	movs	r2, #30
 80221ac:	2101      	movs	r1, #1
 80221ae:	68f8      	ldr	r0, [r7, #12]
 80221b0:	f7ff fe95 	bl	8021ede <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 80221b4:	2310      	movs	r3, #16
 80221b6:	221f      	movs	r2, #31
 80221b8:	2101      	movs	r1, #1
 80221ba:	68f8      	ldr	r0, [r7, #12]
 80221bc:	f7ff fe8f 	bl	8021ede <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 80221c0:	2304      	movs	r3, #4
 80221c2:	2200      	movs	r2, #0
 80221c4:	2101      	movs	r1, #1
 80221c6:	68f8      	ldr	r0, [r7, #12]
 80221c8:	f7ff fe89 	bl	8021ede <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 80221cc:	2301      	movs	r3, #1
 80221ce:	2201      	movs	r2, #1
 80221d0:	2101      	movs	r1, #1
 80221d2:	68f8      	ldr	r0, [r7, #12]
 80221d4:	f7ff fe83 	bl	8021ede <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 80221d8:	2203      	movs	r2, #3
 80221da:	2101      	movs	r1, #1
 80221dc:	68f8      	ldr	r0, [r7, #12]
 80221de:	f7ff fed0 	bl	8021f82 <w5500_r1>
 80221e2:	4603      	mov	r3, r0
 80221e4:	2b42      	cmp	r3, #66	@ 0x42
 80221e6:	bf0c      	ite	eq
 80221e8:	2301      	moveq	r3, #1
 80221ea:	2300      	movne	r3, #0
 80221ec:	b2db      	uxtb	r3, r3
}
 80221ee:	4618      	mov	r0, r3
 80221f0:	3710      	adds	r7, #16
 80221f2:	46bd      	mov	sp, r7
 80221f4:	bd80      	pop	{r7, pc}

080221f6 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 80221f6:	b580      	push	{r7, lr}
 80221f8:	b084      	sub	sp, #16
 80221fa:	af00      	add	r7, sp, #0
 80221fc:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022202:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022204:	222e      	movs	r2, #46	@ 0x2e
 8022206:	2100      	movs	r1, #0
 8022208:	68f8      	ldr	r0, [r7, #12]
 802220a:	f7ff feba 	bl	8021f82 <w5500_r1>
 802220e:	4603      	mov	r3, r0
 8022210:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 8022212:	7afb      	ldrb	r3, [r7, #11]
 8022214:	f003 0301 	and.w	r3, r3, #1
 8022218:	2b00      	cmp	r3, #0
 802221a:	bf14      	ite	ne
 802221c:	2301      	movne	r3, #1
 802221e:	2300      	moveq	r3, #0
 8022220:	b2db      	uxtb	r3, r3
}
 8022222:	4618      	mov	r0, r3
 8022224:	3710      	adds	r7, #16
 8022226:	46bd      	mov	sp, r7
 8022228:	bd80      	pop	{r7, pc}
	...

0802222c <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 802222c:	b580      	push	{r7, lr}
 802222e:	b082      	sub	sp, #8
 8022230:	af00      	add	r7, sp, #0
 8022232:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8022234:	2207      	movs	r2, #7
 8022236:	4907      	ldr	r1, [pc, #28]	@ (8022254 <has_mqtt_prefix+0x28>)
 8022238:	6878      	ldr	r0, [r7, #4]
 802223a:	f000 fd82 	bl	8022d42 <strncmp>
 802223e:	4603      	mov	r3, r0
 8022240:	2b00      	cmp	r3, #0
 8022242:	bf0c      	ite	eq
 8022244:	2301      	moveq	r3, #1
 8022246:	2300      	movne	r3, #0
 8022248:	b2db      	uxtb	r3, r3
}
 802224a:	4618      	mov	r0, r3
 802224c:	3708      	adds	r7, #8
 802224e:	46bd      	mov	sp, r7
 8022250:	bd80      	pop	{r7, pc}
 8022252:	bf00      	nop
 8022254:	080288a8 	.word	0x080288a8

08022258 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8022258:	b580      	push	{r7, lr}
 802225a:	b08a      	sub	sp, #40	@ 0x28
 802225c:	af00      	add	r7, sp, #0
 802225e:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 8022260:	2300      	movs	r3, #0
 8022262:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 8022264:	2301      	movs	r3, #1
 8022266:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8022268:	2300      	movs	r3, #0
 802226a:	61fb      	str	r3, [r7, #28]
 802226c:	e01b      	b.n	80222a6 <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 802226e:	69fb      	ldr	r3, [r7, #28]
 8022270:	687a      	ldr	r2, [r7, #4]
 8022272:	4413      	add	r3, r2
 8022274:	781b      	ldrb	r3, [r3, #0]
 8022276:	2b2e      	cmp	r3, #46	@ 0x2e
 8022278:	d103      	bne.n	8022282 <is_valid_ip_or_domain+0x2a>
            dot_count++;
 802227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802227c:	3301      	adds	r3, #1
 802227e:	627b      	str	r3, [r7, #36]	@ 0x24
 8022280:	e00e      	b.n	80222a0 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 8022282:	69fb      	ldr	r3, [r7, #28]
 8022284:	687a      	ldr	r2, [r7, #4]
 8022286:	4413      	add	r3, r2
 8022288:	781b      	ldrb	r3, [r3, #0]
 802228a:	3301      	adds	r3, #1
 802228c:	4a39      	ldr	r2, [pc, #228]	@ (8022374 <is_valid_ip_or_domain+0x11c>)
 802228e:	4413      	add	r3, r2
 8022290:	781b      	ldrb	r3, [r3, #0]
 8022292:	f003 0304 	and.w	r3, r3, #4
 8022296:	2b00      	cmp	r3, #0
 8022298:	d102      	bne.n	80222a0 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 802229a:	2300      	movs	r3, #0
 802229c:	623b      	str	r3, [r7, #32]
            break;
 802229e:	e008      	b.n	80222b2 <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 80222a0:	69fb      	ldr	r3, [r7, #28]
 80222a2:	3301      	adds	r3, #1
 80222a4:	61fb      	str	r3, [r7, #28]
 80222a6:	69fb      	ldr	r3, [r7, #28]
 80222a8:	687a      	ldr	r2, [r7, #4]
 80222aa:	4413      	add	r3, r2
 80222ac:	781b      	ldrb	r3, [r3, #0]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d1dd      	bne.n	802226e <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 80222b2:	6a3b      	ldr	r3, [r7, #32]
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d026      	beq.n	8022306 <is_valid_ip_or_domain+0xae>
 80222b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222ba:	2b03      	cmp	r3, #3
 80222bc:	d123      	bne.n	8022306 <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 80222c2:	2300      	movs	r3, #0
 80222c4:	617b      	str	r3, [r7, #20]
 80222c6:	e019      	b.n	80222fc <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 80222c8:	69b8      	ldr	r0, [r7, #24]
 80222ca:	f000 f917 	bl	80224fc <atoi>
 80222ce:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 80222d0:	68fb      	ldr	r3, [r7, #12]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	db02      	blt.n	80222dc <is_valid_ip_or_domain+0x84>
 80222d6:	68fb      	ldr	r3, [r7, #12]
 80222d8:	2bff      	cmp	r3, #255	@ 0xff
 80222da:	dd01      	ble.n	80222e0 <is_valid_ip_or_domain+0x88>
 80222dc:	2300      	movs	r3, #0
 80222de:	e044      	b.n	802236a <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 80222e0:	212e      	movs	r1, #46	@ 0x2e
 80222e2:	69b8      	ldr	r0, [r7, #24]
 80222e4:	f000 fd0f 	bl	8022d06 <strchr>
 80222e8:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 80222ea:	69bb      	ldr	r3, [r7, #24]
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d002      	beq.n	80222f6 <is_valid_ip_or_domain+0x9e>
 80222f0:	69bb      	ldr	r3, [r7, #24]
 80222f2:	3301      	adds	r3, #1
 80222f4:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 80222f6:	697b      	ldr	r3, [r7, #20]
 80222f8:	3301      	adds	r3, #1
 80222fa:	617b      	str	r3, [r7, #20]
 80222fc:	697b      	ldr	r3, [r7, #20]
 80222fe:	2b03      	cmp	r3, #3
 8022300:	dde2      	ble.n	80222c8 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 8022302:	2301      	movs	r3, #1
 8022304:	e031      	b.n	802236a <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 8022306:	2300      	movs	r3, #0
 8022308:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 802230a:	2300      	movs	r3, #0
 802230c:	613b      	str	r3, [r7, #16]
 802230e:	e020      	b.n	8022352 <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8022310:	693b      	ldr	r3, [r7, #16]
 8022312:	687a      	ldr	r2, [r7, #4]
 8022314:	4413      	add	r3, r2
 8022316:	781b      	ldrb	r3, [r3, #0]
 8022318:	2b2e      	cmp	r3, #46	@ 0x2e
 802231a:	d103      	bne.n	8022324 <is_valid_ip_or_domain+0xcc>
            dot_count++;
 802231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802231e:	3301      	adds	r3, #1
 8022320:	627b      	str	r3, [r7, #36]	@ 0x24
 8022322:	e013      	b.n	802234c <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8022324:	693b      	ldr	r3, [r7, #16]
 8022326:	687a      	ldr	r2, [r7, #4]
 8022328:	4413      	add	r3, r2
 802232a:	781b      	ldrb	r3, [r3, #0]
 802232c:	3301      	adds	r3, #1
 802232e:	4a11      	ldr	r2, [pc, #68]	@ (8022374 <is_valid_ip_or_domain+0x11c>)
 8022330:	4413      	add	r3, r2
 8022332:	781b      	ldrb	r3, [r3, #0]
 8022334:	f003 0307 	and.w	r3, r3, #7
 8022338:	2b00      	cmp	r3, #0
 802233a:	d107      	bne.n	802234c <is_valid_ip_or_domain+0xf4>
 802233c:	693b      	ldr	r3, [r7, #16]
 802233e:	687a      	ldr	r2, [r7, #4]
 8022340:	4413      	add	r3, r2
 8022342:	781b      	ldrb	r3, [r3, #0]
 8022344:	2b2d      	cmp	r3, #45	@ 0x2d
 8022346:	d001      	beq.n	802234c <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 8022348:	2300      	movs	r3, #0
 802234a:	e00e      	b.n	802236a <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 802234c:	693b      	ldr	r3, [r7, #16]
 802234e:	3301      	adds	r3, #1
 8022350:	613b      	str	r3, [r7, #16]
 8022352:	693b      	ldr	r3, [r7, #16]
 8022354:	687a      	ldr	r2, [r7, #4]
 8022356:	4413      	add	r3, r2
 8022358:	781b      	ldrb	r3, [r3, #0]
 802235a:	2b00      	cmp	r3, #0
 802235c:	d1d8      	bne.n	8022310 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 802235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022360:	2b00      	cmp	r3, #0
 8022362:	bfcc      	ite	gt
 8022364:	2301      	movgt	r3, #1
 8022366:	2300      	movle	r3, #0
 8022368:	b2db      	uxtb	r3, r3
}
 802236a:	4618      	mov	r0, r3
 802236c:	3728      	adds	r7, #40	@ 0x28
 802236e:	46bd      	mov	sp, r7
 8022370:	bd80      	pop	{r7, pc}
 8022372:	bf00      	nop
 8022374:	080298db 	.word	0x080298db

08022378 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8022378:	b580      	push	{r7, lr}
 802237a:	b084      	sub	sp, #16
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8022380:	6878      	ldr	r0, [r7, #4]
 8022382:	f000 f8bb 	bl	80224fc <atoi>
 8022386:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8022388:	68fb      	ldr	r3, [r7, #12]
 802238a:	2b00      	cmp	r3, #0
 802238c:	dd03      	ble.n	8022396 <is_valid_port+0x1e>
 802238e:	68fb      	ldr	r3, [r7, #12]
 8022390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022394:	db10      	blt.n	80223b8 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 8022396:	2300      	movs	r3, #0
 8022398:	e013      	b.n	80223c2 <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	781b      	ldrb	r3, [r3, #0]
 802239e:	3301      	adds	r3, #1
 80223a0:	4a0a      	ldr	r2, [pc, #40]	@ (80223cc <is_valid_port+0x54>)
 80223a2:	4413      	add	r3, r2
 80223a4:	781b      	ldrb	r3, [r3, #0]
 80223a6:	f003 0304 	and.w	r3, r3, #4
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d101      	bne.n	80223b2 <is_valid_port+0x3a>
            return 0;
 80223ae:	2300      	movs	r3, #0
 80223b0:	e007      	b.n	80223c2 <is_valid_port+0x4a>
        }
        port_str++;
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	3301      	adds	r3, #1
 80223b6:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 80223b8:	687b      	ldr	r3, [r7, #4]
 80223ba:	781b      	ldrb	r3, [r3, #0]
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d1ec      	bne.n	802239a <is_valid_port+0x22>
    }
    return 1;
 80223c0:	2301      	movs	r3, #1
}
 80223c2:	4618      	mov	r0, r3
 80223c4:	3710      	adds	r7, #16
 80223c6:	46bd      	mov	sp, r7
 80223c8:	bd80      	pop	{r7, pc}
 80223ca:	bf00      	nop
 80223cc:	080298db 	.word	0x080298db

080223d0 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 80223d0:	b580      	push	{r7, lr}
 80223d2:	b0c6      	sub	sp, #280	@ 0x118
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80223da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80223de:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 80223e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80223e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80223e8:	6818      	ldr	r0, [r3, #0]
 80223ea:	f7ff ff1f 	bl	802222c <has_mqtt_prefix>
 80223ee:	4603      	mov	r3, r0
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d105      	bne.n	8022400 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 80223f4:	482e      	ldr	r0, [pc, #184]	@ (80224b0 <is_valid_mqtt_url+0xe0>)
 80223f6:	f000 fc6f 	bl	8022cd8 <puts>
        return -1;
 80223fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80223fe:	e051      	b.n	80224a4 <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8022400:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022404:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	3307      	adds	r3, #7
 802240c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8022410:	213a      	movs	r1, #58	@ 0x3a
 8022412:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8022416:	f000 fc76 	bl	8022d06 <strchr>
 802241a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 802241e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022422:	2b00      	cmp	r3, #0
 8022424:	d105      	bne.n	8022432 <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 8022426:	4823      	ldr	r0, [pc, #140]	@ (80224b4 <is_valid_mqtt_url+0xe4>)
 8022428:	f000 fc56 	bl	8022cd8 <puts>
        return -2;
 802242c:	f06f 0301 	mvn.w	r3, #1
 8022430:	e038      	b.n	80224a4 <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8022432:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802243a:	1ad3      	subs	r3, r2, r3
 802243c:	461a      	mov	r2, r3
 802243e:	f107 030c 	add.w	r3, r7, #12
 8022442:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8022446:	4618      	mov	r0, r3
 8022448:	f000 fc8d 	bl	8022d66 <strncpy>
    host[colon - host_start] = '\0';
 802244c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8022454:	1ad3      	subs	r3, r2, r3
 8022456:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 802245a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 802245e:	2100      	movs	r1, #0
 8022460:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 8022462:	f107 030c 	add.w	r3, r7, #12
 8022466:	4618      	mov	r0, r3
 8022468:	f7ff fef6 	bl	8022258 <is_valid_ip_or_domain>
 802246c:	4603      	mov	r3, r0
 802246e:	2b00      	cmp	r3, #0
 8022470:	d105      	bne.n	802247e <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 8022472:	4811      	ldr	r0, [pc, #68]	@ (80224b8 <is_valid_mqtt_url+0xe8>)
 8022474:	f000 fc30 	bl	8022cd8 <puts>
        return -3;
 8022478:	f06f 0302 	mvn.w	r3, #2
 802247c:	e012      	b.n	80224a4 <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 802247e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022482:	3301      	adds	r3, #1
 8022484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8022488:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 802248c:	f7ff ff74 	bl	8022378 <is_valid_port>
 8022490:	4603      	mov	r3, r0
 8022492:	2b00      	cmp	r3, #0
 8022494:	d105      	bne.n	80224a2 <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 8022496:	4809      	ldr	r0, [pc, #36]	@ (80224bc <is_valid_mqtt_url+0xec>)
 8022498:	f000 fc1e 	bl	8022cd8 <puts>
        return -4;
 802249c:	f06f 0303 	mvn.w	r3, #3
 80224a0:	e000      	b.n	80224a4 <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 80224a2:	2300      	movs	r3, #0
}
 80224a4:	4618      	mov	r0, r3
 80224a6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80224aa:	46bd      	mov	sp, r7
 80224ac:	bd80      	pop	{r7, pc}
 80224ae:	bf00      	nop
 80224b0:	080288b0 	.word	0x080288b0
 80224b4:	080288dc 	.word	0x080288dc
 80224b8:	08028910 	.word	0x08028910
 80224bc:	08028934 	.word	0x08028934

080224c0 <__assert_func>:
 80224c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80224c2:	4614      	mov	r4, r2
 80224c4:	461a      	mov	r2, r3
 80224c6:	4b09      	ldr	r3, [pc, #36]	@ (80224ec <__assert_func+0x2c>)
 80224c8:	681b      	ldr	r3, [r3, #0]
 80224ca:	4605      	mov	r5, r0
 80224cc:	68d8      	ldr	r0, [r3, #12]
 80224ce:	b954      	cbnz	r4, 80224e6 <__assert_func+0x26>
 80224d0:	4b07      	ldr	r3, [pc, #28]	@ (80224f0 <__assert_func+0x30>)
 80224d2:	461c      	mov	r4, r3
 80224d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80224d8:	9100      	str	r1, [sp, #0]
 80224da:	462b      	mov	r3, r5
 80224dc:	4905      	ldr	r1, [pc, #20]	@ (80224f4 <__assert_func+0x34>)
 80224de:	f000 fa9b 	bl	8022a18 <fiprintf>
 80224e2:	f000 fdb0 	bl	8023046 <abort>
 80224e6:	4b04      	ldr	r3, [pc, #16]	@ (80224f8 <__assert_func+0x38>)
 80224e8:	e7f4      	b.n	80224d4 <__assert_func+0x14>
 80224ea:	bf00      	nop
 80224ec:	200002b8 	.word	0x200002b8
 80224f0:	0802986b 	.word	0x0802986b
 80224f4:	0802983d 	.word	0x0802983d
 80224f8:	08029830 	.word	0x08029830

080224fc <atoi>:
 80224fc:	220a      	movs	r2, #10
 80224fe:	2100      	movs	r1, #0
 8022500:	f000 bb18 	b.w	8022b34 <strtol>

08022504 <malloc>:
 8022504:	4b02      	ldr	r3, [pc, #8]	@ (8022510 <malloc+0xc>)
 8022506:	4601      	mov	r1, r0
 8022508:	6818      	ldr	r0, [r3, #0]
 802250a:	f000 b825 	b.w	8022558 <_malloc_r>
 802250e:	bf00      	nop
 8022510:	200002b8 	.word	0x200002b8

08022514 <sbrk_aligned>:
 8022514:	b570      	push	{r4, r5, r6, lr}
 8022516:	4e0f      	ldr	r6, [pc, #60]	@ (8022554 <sbrk_aligned+0x40>)
 8022518:	460c      	mov	r4, r1
 802251a:	6831      	ldr	r1, [r6, #0]
 802251c:	4605      	mov	r5, r0
 802251e:	b911      	cbnz	r1, 8022526 <sbrk_aligned+0x12>
 8022520:	f000 fd2c 	bl	8022f7c <_sbrk_r>
 8022524:	6030      	str	r0, [r6, #0]
 8022526:	4621      	mov	r1, r4
 8022528:	4628      	mov	r0, r5
 802252a:	f000 fd27 	bl	8022f7c <_sbrk_r>
 802252e:	1c43      	adds	r3, r0, #1
 8022530:	d103      	bne.n	802253a <sbrk_aligned+0x26>
 8022532:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8022536:	4620      	mov	r0, r4
 8022538:	bd70      	pop	{r4, r5, r6, pc}
 802253a:	1cc4      	adds	r4, r0, #3
 802253c:	f024 0403 	bic.w	r4, r4, #3
 8022540:	42a0      	cmp	r0, r4
 8022542:	d0f8      	beq.n	8022536 <sbrk_aligned+0x22>
 8022544:	1a21      	subs	r1, r4, r0
 8022546:	4628      	mov	r0, r5
 8022548:	f000 fd18 	bl	8022f7c <_sbrk_r>
 802254c:	3001      	adds	r0, #1
 802254e:	d1f2      	bne.n	8022536 <sbrk_aligned+0x22>
 8022550:	e7ef      	b.n	8022532 <sbrk_aligned+0x1e>
 8022552:	bf00      	nop
 8022554:	200178d0 	.word	0x200178d0

08022558 <_malloc_r>:
 8022558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802255c:	1ccd      	adds	r5, r1, #3
 802255e:	f025 0503 	bic.w	r5, r5, #3
 8022562:	3508      	adds	r5, #8
 8022564:	2d0c      	cmp	r5, #12
 8022566:	bf38      	it	cc
 8022568:	250c      	movcc	r5, #12
 802256a:	2d00      	cmp	r5, #0
 802256c:	4606      	mov	r6, r0
 802256e:	db01      	blt.n	8022574 <_malloc_r+0x1c>
 8022570:	42a9      	cmp	r1, r5
 8022572:	d904      	bls.n	802257e <_malloc_r+0x26>
 8022574:	230c      	movs	r3, #12
 8022576:	6033      	str	r3, [r6, #0]
 8022578:	2000      	movs	r0, #0
 802257a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802257e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022654 <_malloc_r+0xfc>
 8022582:	f000 f89d 	bl	80226c0 <__malloc_lock>
 8022586:	f8d8 3000 	ldr.w	r3, [r8]
 802258a:	461c      	mov	r4, r3
 802258c:	bb44      	cbnz	r4, 80225e0 <_malloc_r+0x88>
 802258e:	4629      	mov	r1, r5
 8022590:	4630      	mov	r0, r6
 8022592:	f7ff ffbf 	bl	8022514 <sbrk_aligned>
 8022596:	1c43      	adds	r3, r0, #1
 8022598:	4604      	mov	r4, r0
 802259a:	d158      	bne.n	802264e <_malloc_r+0xf6>
 802259c:	f8d8 4000 	ldr.w	r4, [r8]
 80225a0:	4627      	mov	r7, r4
 80225a2:	2f00      	cmp	r7, #0
 80225a4:	d143      	bne.n	802262e <_malloc_r+0xd6>
 80225a6:	2c00      	cmp	r4, #0
 80225a8:	d04b      	beq.n	8022642 <_malloc_r+0xea>
 80225aa:	6823      	ldr	r3, [r4, #0]
 80225ac:	4639      	mov	r1, r7
 80225ae:	4630      	mov	r0, r6
 80225b0:	eb04 0903 	add.w	r9, r4, r3
 80225b4:	f000 fce2 	bl	8022f7c <_sbrk_r>
 80225b8:	4581      	cmp	r9, r0
 80225ba:	d142      	bne.n	8022642 <_malloc_r+0xea>
 80225bc:	6821      	ldr	r1, [r4, #0]
 80225be:	1a6d      	subs	r5, r5, r1
 80225c0:	4629      	mov	r1, r5
 80225c2:	4630      	mov	r0, r6
 80225c4:	f7ff ffa6 	bl	8022514 <sbrk_aligned>
 80225c8:	3001      	adds	r0, #1
 80225ca:	d03a      	beq.n	8022642 <_malloc_r+0xea>
 80225cc:	6823      	ldr	r3, [r4, #0]
 80225ce:	442b      	add	r3, r5
 80225d0:	6023      	str	r3, [r4, #0]
 80225d2:	f8d8 3000 	ldr.w	r3, [r8]
 80225d6:	685a      	ldr	r2, [r3, #4]
 80225d8:	bb62      	cbnz	r2, 8022634 <_malloc_r+0xdc>
 80225da:	f8c8 7000 	str.w	r7, [r8]
 80225de:	e00f      	b.n	8022600 <_malloc_r+0xa8>
 80225e0:	6822      	ldr	r2, [r4, #0]
 80225e2:	1b52      	subs	r2, r2, r5
 80225e4:	d420      	bmi.n	8022628 <_malloc_r+0xd0>
 80225e6:	2a0b      	cmp	r2, #11
 80225e8:	d917      	bls.n	802261a <_malloc_r+0xc2>
 80225ea:	1961      	adds	r1, r4, r5
 80225ec:	42a3      	cmp	r3, r4
 80225ee:	6025      	str	r5, [r4, #0]
 80225f0:	bf18      	it	ne
 80225f2:	6059      	strne	r1, [r3, #4]
 80225f4:	6863      	ldr	r3, [r4, #4]
 80225f6:	bf08      	it	eq
 80225f8:	f8c8 1000 	streq.w	r1, [r8]
 80225fc:	5162      	str	r2, [r4, r5]
 80225fe:	604b      	str	r3, [r1, #4]
 8022600:	4630      	mov	r0, r6
 8022602:	f000 f863 	bl	80226cc <__malloc_unlock>
 8022606:	f104 000b 	add.w	r0, r4, #11
 802260a:	1d23      	adds	r3, r4, #4
 802260c:	f020 0007 	bic.w	r0, r0, #7
 8022610:	1ac2      	subs	r2, r0, r3
 8022612:	bf1c      	itt	ne
 8022614:	1a1b      	subne	r3, r3, r0
 8022616:	50a3      	strne	r3, [r4, r2]
 8022618:	e7af      	b.n	802257a <_malloc_r+0x22>
 802261a:	6862      	ldr	r2, [r4, #4]
 802261c:	42a3      	cmp	r3, r4
 802261e:	bf0c      	ite	eq
 8022620:	f8c8 2000 	streq.w	r2, [r8]
 8022624:	605a      	strne	r2, [r3, #4]
 8022626:	e7eb      	b.n	8022600 <_malloc_r+0xa8>
 8022628:	4623      	mov	r3, r4
 802262a:	6864      	ldr	r4, [r4, #4]
 802262c:	e7ae      	b.n	802258c <_malloc_r+0x34>
 802262e:	463c      	mov	r4, r7
 8022630:	687f      	ldr	r7, [r7, #4]
 8022632:	e7b6      	b.n	80225a2 <_malloc_r+0x4a>
 8022634:	461a      	mov	r2, r3
 8022636:	685b      	ldr	r3, [r3, #4]
 8022638:	42a3      	cmp	r3, r4
 802263a:	d1fb      	bne.n	8022634 <_malloc_r+0xdc>
 802263c:	2300      	movs	r3, #0
 802263e:	6053      	str	r3, [r2, #4]
 8022640:	e7de      	b.n	8022600 <_malloc_r+0xa8>
 8022642:	230c      	movs	r3, #12
 8022644:	6033      	str	r3, [r6, #0]
 8022646:	4630      	mov	r0, r6
 8022648:	f000 f840 	bl	80226cc <__malloc_unlock>
 802264c:	e794      	b.n	8022578 <_malloc_r+0x20>
 802264e:	6005      	str	r5, [r0, #0]
 8022650:	e7d6      	b.n	8022600 <_malloc_r+0xa8>
 8022652:	bf00      	nop
 8022654:	200178d4 	.word	0x200178d4

08022658 <sniprintf>:
 8022658:	b40c      	push	{r2, r3}
 802265a:	b530      	push	{r4, r5, lr}
 802265c:	4b17      	ldr	r3, [pc, #92]	@ (80226bc <sniprintf+0x64>)
 802265e:	1e0c      	subs	r4, r1, #0
 8022660:	681d      	ldr	r5, [r3, #0]
 8022662:	b09d      	sub	sp, #116	@ 0x74
 8022664:	da08      	bge.n	8022678 <sniprintf+0x20>
 8022666:	238b      	movs	r3, #139	@ 0x8b
 8022668:	602b      	str	r3, [r5, #0]
 802266a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802266e:	b01d      	add	sp, #116	@ 0x74
 8022670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022674:	b002      	add	sp, #8
 8022676:	4770      	bx	lr
 8022678:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802267c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022680:	bf14      	ite	ne
 8022682:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022686:	4623      	moveq	r3, r4
 8022688:	9304      	str	r3, [sp, #16]
 802268a:	9307      	str	r3, [sp, #28]
 802268c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022690:	9002      	str	r0, [sp, #8]
 8022692:	9006      	str	r0, [sp, #24]
 8022694:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022698:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802269a:	ab21      	add	r3, sp, #132	@ 0x84
 802269c:	a902      	add	r1, sp, #8
 802269e:	4628      	mov	r0, r5
 80226a0:	9301      	str	r3, [sp, #4]
 80226a2:	f000 fd7d 	bl	80231a0 <_svfiprintf_r>
 80226a6:	1c43      	adds	r3, r0, #1
 80226a8:	bfbc      	itt	lt
 80226aa:	238b      	movlt	r3, #139	@ 0x8b
 80226ac:	602b      	strlt	r3, [r5, #0]
 80226ae:	2c00      	cmp	r4, #0
 80226b0:	d0dd      	beq.n	802266e <sniprintf+0x16>
 80226b2:	9b02      	ldr	r3, [sp, #8]
 80226b4:	2200      	movs	r2, #0
 80226b6:	701a      	strb	r2, [r3, #0]
 80226b8:	e7d9      	b.n	802266e <sniprintf+0x16>
 80226ba:	bf00      	nop
 80226bc:	200002b8 	.word	0x200002b8

080226c0 <__malloc_lock>:
 80226c0:	4801      	ldr	r0, [pc, #4]	@ (80226c8 <__malloc_lock+0x8>)
 80226c2:	f000 bca8 	b.w	8023016 <__retarget_lock_acquire_recursive>
 80226c6:	bf00      	nop
 80226c8:	20017a18 	.word	0x20017a18

080226cc <__malloc_unlock>:
 80226cc:	4801      	ldr	r0, [pc, #4]	@ (80226d4 <__malloc_unlock+0x8>)
 80226ce:	f000 bca3 	b.w	8023018 <__retarget_lock_release_recursive>
 80226d2:	bf00      	nop
 80226d4:	20017a18 	.word	0x20017a18

080226d8 <siprintf>:
 80226d8:	b40e      	push	{r1, r2, r3}
 80226da:	b500      	push	{lr}
 80226dc:	b09c      	sub	sp, #112	@ 0x70
 80226de:	ab1d      	add	r3, sp, #116	@ 0x74
 80226e0:	9002      	str	r0, [sp, #8]
 80226e2:	9006      	str	r0, [sp, #24]
 80226e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80226e8:	4809      	ldr	r0, [pc, #36]	@ (8022710 <siprintf+0x38>)
 80226ea:	9107      	str	r1, [sp, #28]
 80226ec:	9104      	str	r1, [sp, #16]
 80226ee:	4909      	ldr	r1, [pc, #36]	@ (8022714 <siprintf+0x3c>)
 80226f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80226f4:	9105      	str	r1, [sp, #20]
 80226f6:	6800      	ldr	r0, [r0, #0]
 80226f8:	9301      	str	r3, [sp, #4]
 80226fa:	a902      	add	r1, sp, #8
 80226fc:	f000 fd50 	bl	80231a0 <_svfiprintf_r>
 8022700:	9b02      	ldr	r3, [sp, #8]
 8022702:	2200      	movs	r2, #0
 8022704:	701a      	strb	r2, [r3, #0]
 8022706:	b01c      	add	sp, #112	@ 0x70
 8022708:	f85d eb04 	ldr.w	lr, [sp], #4
 802270c:	b003      	add	sp, #12
 802270e:	4770      	bx	lr
 8022710:	200002b8 	.word	0x200002b8
 8022714:	ffff0208 	.word	0xffff0208

08022718 <siscanf>:
 8022718:	b40e      	push	{r1, r2, r3}
 802271a:	b530      	push	{r4, r5, lr}
 802271c:	b09c      	sub	sp, #112	@ 0x70
 802271e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8022720:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8022724:	f854 5b04 	ldr.w	r5, [r4], #4
 8022728:	f8ad 2014 	strh.w	r2, [sp, #20]
 802272c:	9002      	str	r0, [sp, #8]
 802272e:	9006      	str	r0, [sp, #24]
 8022730:	f7dd fda6 	bl	8000280 <strlen>
 8022734:	4b0b      	ldr	r3, [pc, #44]	@ (8022764 <siscanf+0x4c>)
 8022736:	9003      	str	r0, [sp, #12]
 8022738:	9007      	str	r0, [sp, #28]
 802273a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802273c:	480a      	ldr	r0, [pc, #40]	@ (8022768 <siscanf+0x50>)
 802273e:	9401      	str	r4, [sp, #4]
 8022740:	2300      	movs	r3, #0
 8022742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022744:	9314      	str	r3, [sp, #80]	@ 0x50
 8022746:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802274a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802274e:	462a      	mov	r2, r5
 8022750:	4623      	mov	r3, r4
 8022752:	a902      	add	r1, sp, #8
 8022754:	6800      	ldr	r0, [r0, #0]
 8022756:	f000 fe77 	bl	8023448 <__ssvfiscanf_r>
 802275a:	b01c      	add	sp, #112	@ 0x70
 802275c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022760:	b003      	add	sp, #12
 8022762:	4770      	bx	lr
 8022764:	0802278f 	.word	0x0802278f
 8022768:	200002b8 	.word	0x200002b8

0802276c <__sread>:
 802276c:	b510      	push	{r4, lr}
 802276e:	460c      	mov	r4, r1
 8022770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022774:	f000 fbf0 	bl	8022f58 <_read_r>
 8022778:	2800      	cmp	r0, #0
 802277a:	bfab      	itete	ge
 802277c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802277e:	89a3      	ldrhlt	r3, [r4, #12]
 8022780:	181b      	addge	r3, r3, r0
 8022782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022786:	bfac      	ite	ge
 8022788:	6563      	strge	r3, [r4, #84]	@ 0x54
 802278a:	81a3      	strhlt	r3, [r4, #12]
 802278c:	bd10      	pop	{r4, pc}

0802278e <__seofread>:
 802278e:	2000      	movs	r0, #0
 8022790:	4770      	bx	lr

08022792 <__swrite>:
 8022792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022796:	461f      	mov	r7, r3
 8022798:	898b      	ldrh	r3, [r1, #12]
 802279a:	05db      	lsls	r3, r3, #23
 802279c:	4605      	mov	r5, r0
 802279e:	460c      	mov	r4, r1
 80227a0:	4616      	mov	r6, r2
 80227a2:	d505      	bpl.n	80227b0 <__swrite+0x1e>
 80227a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227a8:	2302      	movs	r3, #2
 80227aa:	2200      	movs	r2, #0
 80227ac:	f000 fbc2 	bl	8022f34 <_lseek_r>
 80227b0:	89a3      	ldrh	r3, [r4, #12]
 80227b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80227ba:	81a3      	strh	r3, [r4, #12]
 80227bc:	4632      	mov	r2, r6
 80227be:	463b      	mov	r3, r7
 80227c0:	4628      	mov	r0, r5
 80227c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80227c6:	f000 bbe9 	b.w	8022f9c <_write_r>

080227ca <__sseek>:
 80227ca:	b510      	push	{r4, lr}
 80227cc:	460c      	mov	r4, r1
 80227ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227d2:	f000 fbaf 	bl	8022f34 <_lseek_r>
 80227d6:	1c43      	adds	r3, r0, #1
 80227d8:	89a3      	ldrh	r3, [r4, #12]
 80227da:	bf15      	itete	ne
 80227dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80227de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80227e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80227e6:	81a3      	strheq	r3, [r4, #12]
 80227e8:	bf18      	it	ne
 80227ea:	81a3      	strhne	r3, [r4, #12]
 80227ec:	bd10      	pop	{r4, pc}

080227ee <__sclose>:
 80227ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227f2:	f000 bb39 	b.w	8022e68 <_close_r>
	...

080227f8 <srand>:
 80227f8:	b538      	push	{r3, r4, r5, lr}
 80227fa:	4b10      	ldr	r3, [pc, #64]	@ (802283c <srand+0x44>)
 80227fc:	681d      	ldr	r5, [r3, #0]
 80227fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022800:	4604      	mov	r4, r0
 8022802:	b9b3      	cbnz	r3, 8022832 <srand+0x3a>
 8022804:	2018      	movs	r0, #24
 8022806:	f7ff fe7d 	bl	8022504 <malloc>
 802280a:	4602      	mov	r2, r0
 802280c:	6328      	str	r0, [r5, #48]	@ 0x30
 802280e:	b920      	cbnz	r0, 802281a <srand+0x22>
 8022810:	4b0b      	ldr	r3, [pc, #44]	@ (8022840 <srand+0x48>)
 8022812:	480c      	ldr	r0, [pc, #48]	@ (8022844 <srand+0x4c>)
 8022814:	2146      	movs	r1, #70	@ 0x46
 8022816:	f7ff fe53 	bl	80224c0 <__assert_func>
 802281a:	490b      	ldr	r1, [pc, #44]	@ (8022848 <srand+0x50>)
 802281c:	4b0b      	ldr	r3, [pc, #44]	@ (802284c <srand+0x54>)
 802281e:	e9c0 1300 	strd	r1, r3, [r0]
 8022822:	4b0b      	ldr	r3, [pc, #44]	@ (8022850 <srand+0x58>)
 8022824:	6083      	str	r3, [r0, #8]
 8022826:	230b      	movs	r3, #11
 8022828:	8183      	strh	r3, [r0, #12]
 802282a:	2100      	movs	r1, #0
 802282c:	2001      	movs	r0, #1
 802282e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022832:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022834:	2200      	movs	r2, #0
 8022836:	611c      	str	r4, [r3, #16]
 8022838:	615a      	str	r2, [r3, #20]
 802283a:	bd38      	pop	{r3, r4, r5, pc}
 802283c:	200002b8 	.word	0x200002b8
 8022840:	0802986c 	.word	0x0802986c
 8022844:	08029883 	.word	0x08029883
 8022848:	abcd330e 	.word	0xabcd330e
 802284c:	e66d1234 	.word	0xe66d1234
 8022850:	0005deec 	.word	0x0005deec

08022854 <rand>:
 8022854:	4b16      	ldr	r3, [pc, #88]	@ (80228b0 <rand+0x5c>)
 8022856:	b510      	push	{r4, lr}
 8022858:	681c      	ldr	r4, [r3, #0]
 802285a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802285c:	b9b3      	cbnz	r3, 802288c <rand+0x38>
 802285e:	2018      	movs	r0, #24
 8022860:	f7ff fe50 	bl	8022504 <malloc>
 8022864:	4602      	mov	r2, r0
 8022866:	6320      	str	r0, [r4, #48]	@ 0x30
 8022868:	b920      	cbnz	r0, 8022874 <rand+0x20>
 802286a:	4b12      	ldr	r3, [pc, #72]	@ (80228b4 <rand+0x60>)
 802286c:	4812      	ldr	r0, [pc, #72]	@ (80228b8 <rand+0x64>)
 802286e:	2152      	movs	r1, #82	@ 0x52
 8022870:	f7ff fe26 	bl	80224c0 <__assert_func>
 8022874:	4911      	ldr	r1, [pc, #68]	@ (80228bc <rand+0x68>)
 8022876:	4b12      	ldr	r3, [pc, #72]	@ (80228c0 <rand+0x6c>)
 8022878:	e9c0 1300 	strd	r1, r3, [r0]
 802287c:	4b11      	ldr	r3, [pc, #68]	@ (80228c4 <rand+0x70>)
 802287e:	6083      	str	r3, [r0, #8]
 8022880:	230b      	movs	r3, #11
 8022882:	8183      	strh	r3, [r0, #12]
 8022884:	2100      	movs	r1, #0
 8022886:	2001      	movs	r0, #1
 8022888:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802288c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802288e:	480e      	ldr	r0, [pc, #56]	@ (80228c8 <rand+0x74>)
 8022890:	690b      	ldr	r3, [r1, #16]
 8022892:	694c      	ldr	r4, [r1, #20]
 8022894:	4a0d      	ldr	r2, [pc, #52]	@ (80228cc <rand+0x78>)
 8022896:	4358      	muls	r0, r3
 8022898:	fb02 0004 	mla	r0, r2, r4, r0
 802289c:	fba3 3202 	umull	r3, r2, r3, r2
 80228a0:	3301      	adds	r3, #1
 80228a2:	eb40 0002 	adc.w	r0, r0, r2
 80228a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80228aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80228ae:	bd10      	pop	{r4, pc}
 80228b0:	200002b8 	.word	0x200002b8
 80228b4:	0802986c 	.word	0x0802986c
 80228b8:	08029883 	.word	0x08029883
 80228bc:	abcd330e 	.word	0xabcd330e
 80228c0:	e66d1234 	.word	0xe66d1234
 80228c4:	0005deec 	.word	0x0005deec
 80228c8:	5851f42d 	.word	0x5851f42d
 80228cc:	4c957f2d 	.word	0x4c957f2d

080228d0 <std>:
 80228d0:	2300      	movs	r3, #0
 80228d2:	b510      	push	{r4, lr}
 80228d4:	4604      	mov	r4, r0
 80228d6:	e9c0 3300 	strd	r3, r3, [r0]
 80228da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80228de:	6083      	str	r3, [r0, #8]
 80228e0:	8181      	strh	r1, [r0, #12]
 80228e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80228e4:	81c2      	strh	r2, [r0, #14]
 80228e6:	6183      	str	r3, [r0, #24]
 80228e8:	4619      	mov	r1, r3
 80228ea:	2208      	movs	r2, #8
 80228ec:	305c      	adds	r0, #92	@ 0x5c
 80228ee:	f000 fab3 	bl	8022e58 <memset>
 80228f2:	4b0d      	ldr	r3, [pc, #52]	@ (8022928 <std+0x58>)
 80228f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80228f6:	4b0d      	ldr	r3, [pc, #52]	@ (802292c <std+0x5c>)
 80228f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80228fa:	4b0d      	ldr	r3, [pc, #52]	@ (8022930 <std+0x60>)
 80228fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80228fe:	4b0d      	ldr	r3, [pc, #52]	@ (8022934 <std+0x64>)
 8022900:	6323      	str	r3, [r4, #48]	@ 0x30
 8022902:	4b0d      	ldr	r3, [pc, #52]	@ (8022938 <std+0x68>)
 8022904:	6224      	str	r4, [r4, #32]
 8022906:	429c      	cmp	r4, r3
 8022908:	d006      	beq.n	8022918 <std+0x48>
 802290a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802290e:	4294      	cmp	r4, r2
 8022910:	d002      	beq.n	8022918 <std+0x48>
 8022912:	33d0      	adds	r3, #208	@ 0xd0
 8022914:	429c      	cmp	r4, r3
 8022916:	d105      	bne.n	8022924 <std+0x54>
 8022918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022920:	f000 bb78 	b.w	8023014 <__retarget_lock_init_recursive>
 8022924:	bd10      	pop	{r4, pc}
 8022926:	bf00      	nop
 8022928:	0802276d 	.word	0x0802276d
 802292c:	08022793 	.word	0x08022793
 8022930:	080227cb 	.word	0x080227cb
 8022934:	080227ef 	.word	0x080227ef
 8022938:	200178d8 	.word	0x200178d8

0802293c <stdio_exit_handler>:
 802293c:	4a02      	ldr	r2, [pc, #8]	@ (8022948 <stdio_exit_handler+0xc>)
 802293e:	4903      	ldr	r1, [pc, #12]	@ (802294c <stdio_exit_handler+0x10>)
 8022940:	4803      	ldr	r0, [pc, #12]	@ (8022950 <stdio_exit_handler+0x14>)
 8022942:	f000 b901 	b.w	8022b48 <_fwalk_sglue>
 8022946:	bf00      	nop
 8022948:	200002ac 	.word	0x200002ac
 802294c:	080240e9 	.word	0x080240e9
 8022950:	200002bc 	.word	0x200002bc

08022954 <cleanup_stdio>:
 8022954:	6841      	ldr	r1, [r0, #4]
 8022956:	4b0c      	ldr	r3, [pc, #48]	@ (8022988 <cleanup_stdio+0x34>)
 8022958:	4299      	cmp	r1, r3
 802295a:	b510      	push	{r4, lr}
 802295c:	4604      	mov	r4, r0
 802295e:	d001      	beq.n	8022964 <cleanup_stdio+0x10>
 8022960:	f001 fbc2 	bl	80240e8 <_fflush_r>
 8022964:	68a1      	ldr	r1, [r4, #8]
 8022966:	4b09      	ldr	r3, [pc, #36]	@ (802298c <cleanup_stdio+0x38>)
 8022968:	4299      	cmp	r1, r3
 802296a:	d002      	beq.n	8022972 <cleanup_stdio+0x1e>
 802296c:	4620      	mov	r0, r4
 802296e:	f001 fbbb 	bl	80240e8 <_fflush_r>
 8022972:	68e1      	ldr	r1, [r4, #12]
 8022974:	4b06      	ldr	r3, [pc, #24]	@ (8022990 <cleanup_stdio+0x3c>)
 8022976:	4299      	cmp	r1, r3
 8022978:	d004      	beq.n	8022984 <cleanup_stdio+0x30>
 802297a:	4620      	mov	r0, r4
 802297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022980:	f001 bbb2 	b.w	80240e8 <_fflush_r>
 8022984:	bd10      	pop	{r4, pc}
 8022986:	bf00      	nop
 8022988:	200178d8 	.word	0x200178d8
 802298c:	20017940 	.word	0x20017940
 8022990:	200179a8 	.word	0x200179a8

08022994 <global_stdio_init.part.0>:
 8022994:	b510      	push	{r4, lr}
 8022996:	4b0b      	ldr	r3, [pc, #44]	@ (80229c4 <global_stdio_init.part.0+0x30>)
 8022998:	4c0b      	ldr	r4, [pc, #44]	@ (80229c8 <global_stdio_init.part.0+0x34>)
 802299a:	4a0c      	ldr	r2, [pc, #48]	@ (80229cc <global_stdio_init.part.0+0x38>)
 802299c:	601a      	str	r2, [r3, #0]
 802299e:	4620      	mov	r0, r4
 80229a0:	2200      	movs	r2, #0
 80229a2:	2104      	movs	r1, #4
 80229a4:	f7ff ff94 	bl	80228d0 <std>
 80229a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80229ac:	2201      	movs	r2, #1
 80229ae:	2109      	movs	r1, #9
 80229b0:	f7ff ff8e 	bl	80228d0 <std>
 80229b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80229b8:	2202      	movs	r2, #2
 80229ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229be:	2112      	movs	r1, #18
 80229c0:	f7ff bf86 	b.w	80228d0 <std>
 80229c4:	20017a10 	.word	0x20017a10
 80229c8:	200178d8 	.word	0x200178d8
 80229cc:	0802293d 	.word	0x0802293d

080229d0 <__sfp_lock_acquire>:
 80229d0:	4801      	ldr	r0, [pc, #4]	@ (80229d8 <__sfp_lock_acquire+0x8>)
 80229d2:	f000 bb20 	b.w	8023016 <__retarget_lock_acquire_recursive>
 80229d6:	bf00      	nop
 80229d8:	20017a19 	.word	0x20017a19

080229dc <__sfp_lock_release>:
 80229dc:	4801      	ldr	r0, [pc, #4]	@ (80229e4 <__sfp_lock_release+0x8>)
 80229de:	f000 bb1b 	b.w	8023018 <__retarget_lock_release_recursive>
 80229e2:	bf00      	nop
 80229e4:	20017a19 	.word	0x20017a19

080229e8 <__sinit>:
 80229e8:	b510      	push	{r4, lr}
 80229ea:	4604      	mov	r4, r0
 80229ec:	f7ff fff0 	bl	80229d0 <__sfp_lock_acquire>
 80229f0:	6a23      	ldr	r3, [r4, #32]
 80229f2:	b11b      	cbz	r3, 80229fc <__sinit+0x14>
 80229f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229f8:	f7ff bff0 	b.w	80229dc <__sfp_lock_release>
 80229fc:	4b04      	ldr	r3, [pc, #16]	@ (8022a10 <__sinit+0x28>)
 80229fe:	6223      	str	r3, [r4, #32]
 8022a00:	4b04      	ldr	r3, [pc, #16]	@ (8022a14 <__sinit+0x2c>)
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	d1f5      	bne.n	80229f4 <__sinit+0xc>
 8022a08:	f7ff ffc4 	bl	8022994 <global_stdio_init.part.0>
 8022a0c:	e7f2      	b.n	80229f4 <__sinit+0xc>
 8022a0e:	bf00      	nop
 8022a10:	08022955 	.word	0x08022955
 8022a14:	20017a10 	.word	0x20017a10

08022a18 <fiprintf>:
 8022a18:	b40e      	push	{r1, r2, r3}
 8022a1a:	b503      	push	{r0, r1, lr}
 8022a1c:	4601      	mov	r1, r0
 8022a1e:	ab03      	add	r3, sp, #12
 8022a20:	4805      	ldr	r0, [pc, #20]	@ (8022a38 <fiprintf+0x20>)
 8022a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a26:	6800      	ldr	r0, [r0, #0]
 8022a28:	9301      	str	r3, [sp, #4]
 8022a2a:	f000 feab 	bl	8023784 <_vfiprintf_r>
 8022a2e:	b002      	add	sp, #8
 8022a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a34:	b003      	add	sp, #12
 8022a36:	4770      	bx	lr
 8022a38:	200002b8 	.word	0x200002b8

08022a3c <_strtol_l.constprop.0>:
 8022a3c:	2b24      	cmp	r3, #36	@ 0x24
 8022a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a42:	4686      	mov	lr, r0
 8022a44:	4690      	mov	r8, r2
 8022a46:	d801      	bhi.n	8022a4c <_strtol_l.constprop.0+0x10>
 8022a48:	2b01      	cmp	r3, #1
 8022a4a:	d106      	bne.n	8022a5a <_strtol_l.constprop.0+0x1e>
 8022a4c:	f000 fab8 	bl	8022fc0 <__errno>
 8022a50:	2316      	movs	r3, #22
 8022a52:	6003      	str	r3, [r0, #0]
 8022a54:	2000      	movs	r0, #0
 8022a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a5a:	4834      	ldr	r0, [pc, #208]	@ (8022b2c <_strtol_l.constprop.0+0xf0>)
 8022a5c:	460d      	mov	r5, r1
 8022a5e:	462a      	mov	r2, r5
 8022a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022a64:	5d06      	ldrb	r6, [r0, r4]
 8022a66:	f016 0608 	ands.w	r6, r6, #8
 8022a6a:	d1f8      	bne.n	8022a5e <_strtol_l.constprop.0+0x22>
 8022a6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8022a6e:	d12d      	bne.n	8022acc <_strtol_l.constprop.0+0x90>
 8022a70:	782c      	ldrb	r4, [r5, #0]
 8022a72:	2601      	movs	r6, #1
 8022a74:	1c95      	adds	r5, r2, #2
 8022a76:	f033 0210 	bics.w	r2, r3, #16
 8022a7a:	d109      	bne.n	8022a90 <_strtol_l.constprop.0+0x54>
 8022a7c:	2c30      	cmp	r4, #48	@ 0x30
 8022a7e:	d12a      	bne.n	8022ad6 <_strtol_l.constprop.0+0x9a>
 8022a80:	782a      	ldrb	r2, [r5, #0]
 8022a82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8022a86:	2a58      	cmp	r2, #88	@ 0x58
 8022a88:	d125      	bne.n	8022ad6 <_strtol_l.constprop.0+0x9a>
 8022a8a:	786c      	ldrb	r4, [r5, #1]
 8022a8c:	2310      	movs	r3, #16
 8022a8e:	3502      	adds	r5, #2
 8022a90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8022a94:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8022a98:	2200      	movs	r2, #0
 8022a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8022a9e:	4610      	mov	r0, r2
 8022aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8022aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8022aa8:	2f09      	cmp	r7, #9
 8022aaa:	d81b      	bhi.n	8022ae4 <_strtol_l.constprop.0+0xa8>
 8022aac:	463c      	mov	r4, r7
 8022aae:	42a3      	cmp	r3, r4
 8022ab0:	dd27      	ble.n	8022b02 <_strtol_l.constprop.0+0xc6>
 8022ab2:	1c57      	adds	r7, r2, #1
 8022ab4:	d007      	beq.n	8022ac6 <_strtol_l.constprop.0+0x8a>
 8022ab6:	4581      	cmp	r9, r0
 8022ab8:	d320      	bcc.n	8022afc <_strtol_l.constprop.0+0xc0>
 8022aba:	d101      	bne.n	8022ac0 <_strtol_l.constprop.0+0x84>
 8022abc:	45a2      	cmp	sl, r4
 8022abe:	db1d      	blt.n	8022afc <_strtol_l.constprop.0+0xc0>
 8022ac0:	fb00 4003 	mla	r0, r0, r3, r4
 8022ac4:	2201      	movs	r2, #1
 8022ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022aca:	e7eb      	b.n	8022aa4 <_strtol_l.constprop.0+0x68>
 8022acc:	2c2b      	cmp	r4, #43	@ 0x2b
 8022ace:	bf04      	itt	eq
 8022ad0:	782c      	ldrbeq	r4, [r5, #0]
 8022ad2:	1c95      	addeq	r5, r2, #2
 8022ad4:	e7cf      	b.n	8022a76 <_strtol_l.constprop.0+0x3a>
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d1da      	bne.n	8022a90 <_strtol_l.constprop.0+0x54>
 8022ada:	2c30      	cmp	r4, #48	@ 0x30
 8022adc:	bf0c      	ite	eq
 8022ade:	2308      	moveq	r3, #8
 8022ae0:	230a      	movne	r3, #10
 8022ae2:	e7d5      	b.n	8022a90 <_strtol_l.constprop.0+0x54>
 8022ae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8022ae8:	2f19      	cmp	r7, #25
 8022aea:	d801      	bhi.n	8022af0 <_strtol_l.constprop.0+0xb4>
 8022aec:	3c37      	subs	r4, #55	@ 0x37
 8022aee:	e7de      	b.n	8022aae <_strtol_l.constprop.0+0x72>
 8022af0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8022af4:	2f19      	cmp	r7, #25
 8022af6:	d804      	bhi.n	8022b02 <_strtol_l.constprop.0+0xc6>
 8022af8:	3c57      	subs	r4, #87	@ 0x57
 8022afa:	e7d8      	b.n	8022aae <_strtol_l.constprop.0+0x72>
 8022afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022b00:	e7e1      	b.n	8022ac6 <_strtol_l.constprop.0+0x8a>
 8022b02:	1c53      	adds	r3, r2, #1
 8022b04:	d108      	bne.n	8022b18 <_strtol_l.constprop.0+0xdc>
 8022b06:	2322      	movs	r3, #34	@ 0x22
 8022b08:	f8ce 3000 	str.w	r3, [lr]
 8022b0c:	4660      	mov	r0, ip
 8022b0e:	f1b8 0f00 	cmp.w	r8, #0
 8022b12:	d0a0      	beq.n	8022a56 <_strtol_l.constprop.0+0x1a>
 8022b14:	1e69      	subs	r1, r5, #1
 8022b16:	e006      	b.n	8022b26 <_strtol_l.constprop.0+0xea>
 8022b18:	b106      	cbz	r6, 8022b1c <_strtol_l.constprop.0+0xe0>
 8022b1a:	4240      	negs	r0, r0
 8022b1c:	f1b8 0f00 	cmp.w	r8, #0
 8022b20:	d099      	beq.n	8022a56 <_strtol_l.constprop.0+0x1a>
 8022b22:	2a00      	cmp	r2, #0
 8022b24:	d1f6      	bne.n	8022b14 <_strtol_l.constprop.0+0xd8>
 8022b26:	f8c8 1000 	str.w	r1, [r8]
 8022b2a:	e794      	b.n	8022a56 <_strtol_l.constprop.0+0x1a>
 8022b2c:	080298dc 	.word	0x080298dc

08022b30 <_strtol_r>:
 8022b30:	f7ff bf84 	b.w	8022a3c <_strtol_l.constprop.0>

08022b34 <strtol>:
 8022b34:	4613      	mov	r3, r2
 8022b36:	460a      	mov	r2, r1
 8022b38:	4601      	mov	r1, r0
 8022b3a:	4802      	ldr	r0, [pc, #8]	@ (8022b44 <strtol+0x10>)
 8022b3c:	6800      	ldr	r0, [r0, #0]
 8022b3e:	f7ff bf7d 	b.w	8022a3c <_strtol_l.constprop.0>
 8022b42:	bf00      	nop
 8022b44:	200002b8 	.word	0x200002b8

08022b48 <_fwalk_sglue>:
 8022b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b4c:	4607      	mov	r7, r0
 8022b4e:	4688      	mov	r8, r1
 8022b50:	4614      	mov	r4, r2
 8022b52:	2600      	movs	r6, #0
 8022b54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022b58:	f1b9 0901 	subs.w	r9, r9, #1
 8022b5c:	d505      	bpl.n	8022b6a <_fwalk_sglue+0x22>
 8022b5e:	6824      	ldr	r4, [r4, #0]
 8022b60:	2c00      	cmp	r4, #0
 8022b62:	d1f7      	bne.n	8022b54 <_fwalk_sglue+0xc>
 8022b64:	4630      	mov	r0, r6
 8022b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b6a:	89ab      	ldrh	r3, [r5, #12]
 8022b6c:	2b01      	cmp	r3, #1
 8022b6e:	d907      	bls.n	8022b80 <_fwalk_sglue+0x38>
 8022b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022b74:	3301      	adds	r3, #1
 8022b76:	d003      	beq.n	8022b80 <_fwalk_sglue+0x38>
 8022b78:	4629      	mov	r1, r5
 8022b7a:	4638      	mov	r0, r7
 8022b7c:	47c0      	blx	r8
 8022b7e:	4306      	orrs	r6, r0
 8022b80:	3568      	adds	r5, #104	@ 0x68
 8022b82:	e7e9      	b.n	8022b58 <_fwalk_sglue+0x10>

08022b84 <_vsniprintf_r>:
 8022b84:	b530      	push	{r4, r5, lr}
 8022b86:	4614      	mov	r4, r2
 8022b88:	2c00      	cmp	r4, #0
 8022b8a:	b09b      	sub	sp, #108	@ 0x6c
 8022b8c:	4605      	mov	r5, r0
 8022b8e:	461a      	mov	r2, r3
 8022b90:	da05      	bge.n	8022b9e <_vsniprintf_r+0x1a>
 8022b92:	238b      	movs	r3, #139	@ 0x8b
 8022b94:	6003      	str	r3, [r0, #0]
 8022b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022b9a:	b01b      	add	sp, #108	@ 0x6c
 8022b9c:	bd30      	pop	{r4, r5, pc}
 8022b9e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022ba2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022ba6:	bf14      	ite	ne
 8022ba8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022bac:	4623      	moveq	r3, r4
 8022bae:	9302      	str	r3, [sp, #8]
 8022bb0:	9305      	str	r3, [sp, #20]
 8022bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022bb6:	9100      	str	r1, [sp, #0]
 8022bb8:	9104      	str	r1, [sp, #16]
 8022bba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022bbe:	4669      	mov	r1, sp
 8022bc0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022bc2:	f000 faed 	bl	80231a0 <_svfiprintf_r>
 8022bc6:	1c43      	adds	r3, r0, #1
 8022bc8:	bfbc      	itt	lt
 8022bca:	238b      	movlt	r3, #139	@ 0x8b
 8022bcc:	602b      	strlt	r3, [r5, #0]
 8022bce:	2c00      	cmp	r4, #0
 8022bd0:	d0e3      	beq.n	8022b9a <_vsniprintf_r+0x16>
 8022bd2:	9b00      	ldr	r3, [sp, #0]
 8022bd4:	2200      	movs	r2, #0
 8022bd6:	701a      	strb	r2, [r3, #0]
 8022bd8:	e7df      	b.n	8022b9a <_vsniprintf_r+0x16>
	...

08022bdc <vsniprintf>:
 8022bdc:	b507      	push	{r0, r1, r2, lr}
 8022bde:	9300      	str	r3, [sp, #0]
 8022be0:	4613      	mov	r3, r2
 8022be2:	460a      	mov	r2, r1
 8022be4:	4601      	mov	r1, r0
 8022be6:	4803      	ldr	r0, [pc, #12]	@ (8022bf4 <vsniprintf+0x18>)
 8022be8:	6800      	ldr	r0, [r0, #0]
 8022bea:	f7ff ffcb 	bl	8022b84 <_vsniprintf_r>
 8022bee:	b003      	add	sp, #12
 8022bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8022bf4:	200002b8 	.word	0x200002b8

08022bf8 <iprintf>:
 8022bf8:	b40f      	push	{r0, r1, r2, r3}
 8022bfa:	b507      	push	{r0, r1, r2, lr}
 8022bfc:	4906      	ldr	r1, [pc, #24]	@ (8022c18 <iprintf+0x20>)
 8022bfe:	ab04      	add	r3, sp, #16
 8022c00:	6808      	ldr	r0, [r1, #0]
 8022c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c06:	6881      	ldr	r1, [r0, #8]
 8022c08:	9301      	str	r3, [sp, #4]
 8022c0a:	f000 fdbb 	bl	8023784 <_vfiprintf_r>
 8022c0e:	b003      	add	sp, #12
 8022c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c14:	b004      	add	sp, #16
 8022c16:	4770      	bx	lr
 8022c18:	200002b8 	.word	0x200002b8

08022c1c <putchar>:
 8022c1c:	4b02      	ldr	r3, [pc, #8]	@ (8022c28 <putchar+0xc>)
 8022c1e:	4601      	mov	r1, r0
 8022c20:	6818      	ldr	r0, [r3, #0]
 8022c22:	6882      	ldr	r2, [r0, #8]
 8022c24:	f001 bc56 	b.w	80244d4 <_putc_r>
 8022c28:	200002b8 	.word	0x200002b8

08022c2c <_puts_r>:
 8022c2c:	6a03      	ldr	r3, [r0, #32]
 8022c2e:	b570      	push	{r4, r5, r6, lr}
 8022c30:	6884      	ldr	r4, [r0, #8]
 8022c32:	4605      	mov	r5, r0
 8022c34:	460e      	mov	r6, r1
 8022c36:	b90b      	cbnz	r3, 8022c3c <_puts_r+0x10>
 8022c38:	f7ff fed6 	bl	80229e8 <__sinit>
 8022c3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022c3e:	07db      	lsls	r3, r3, #31
 8022c40:	d405      	bmi.n	8022c4e <_puts_r+0x22>
 8022c42:	89a3      	ldrh	r3, [r4, #12]
 8022c44:	0598      	lsls	r0, r3, #22
 8022c46:	d402      	bmi.n	8022c4e <_puts_r+0x22>
 8022c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c4a:	f000 f9e4 	bl	8023016 <__retarget_lock_acquire_recursive>
 8022c4e:	89a3      	ldrh	r3, [r4, #12]
 8022c50:	0719      	lsls	r1, r3, #28
 8022c52:	d502      	bpl.n	8022c5a <_puts_r+0x2e>
 8022c54:	6923      	ldr	r3, [r4, #16]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d135      	bne.n	8022cc6 <_puts_r+0x9a>
 8022c5a:	4621      	mov	r1, r4
 8022c5c:	4628      	mov	r0, r5
 8022c5e:	f001 fb81 	bl	8024364 <__swsetup_r>
 8022c62:	b380      	cbz	r0, 8022cc6 <_puts_r+0x9a>
 8022c64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8022c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022c6a:	07da      	lsls	r2, r3, #31
 8022c6c:	d405      	bmi.n	8022c7a <_puts_r+0x4e>
 8022c6e:	89a3      	ldrh	r3, [r4, #12]
 8022c70:	059b      	lsls	r3, r3, #22
 8022c72:	d402      	bmi.n	8022c7a <_puts_r+0x4e>
 8022c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c76:	f000 f9cf 	bl	8023018 <__retarget_lock_release_recursive>
 8022c7a:	4628      	mov	r0, r5
 8022c7c:	bd70      	pop	{r4, r5, r6, pc}
 8022c7e:	2b00      	cmp	r3, #0
 8022c80:	da04      	bge.n	8022c8c <_puts_r+0x60>
 8022c82:	69a2      	ldr	r2, [r4, #24]
 8022c84:	429a      	cmp	r2, r3
 8022c86:	dc17      	bgt.n	8022cb8 <_puts_r+0x8c>
 8022c88:	290a      	cmp	r1, #10
 8022c8a:	d015      	beq.n	8022cb8 <_puts_r+0x8c>
 8022c8c:	6823      	ldr	r3, [r4, #0]
 8022c8e:	1c5a      	adds	r2, r3, #1
 8022c90:	6022      	str	r2, [r4, #0]
 8022c92:	7019      	strb	r1, [r3, #0]
 8022c94:	68a3      	ldr	r3, [r4, #8]
 8022c96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022c9a:	3b01      	subs	r3, #1
 8022c9c:	60a3      	str	r3, [r4, #8]
 8022c9e:	2900      	cmp	r1, #0
 8022ca0:	d1ed      	bne.n	8022c7e <_puts_r+0x52>
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	da11      	bge.n	8022cca <_puts_r+0x9e>
 8022ca6:	4622      	mov	r2, r4
 8022ca8:	210a      	movs	r1, #10
 8022caa:	4628      	mov	r0, r5
 8022cac:	f001 fb1c 	bl	80242e8 <__swbuf_r>
 8022cb0:	3001      	adds	r0, #1
 8022cb2:	d0d7      	beq.n	8022c64 <_puts_r+0x38>
 8022cb4:	250a      	movs	r5, #10
 8022cb6:	e7d7      	b.n	8022c68 <_puts_r+0x3c>
 8022cb8:	4622      	mov	r2, r4
 8022cba:	4628      	mov	r0, r5
 8022cbc:	f001 fb14 	bl	80242e8 <__swbuf_r>
 8022cc0:	3001      	adds	r0, #1
 8022cc2:	d1e7      	bne.n	8022c94 <_puts_r+0x68>
 8022cc4:	e7ce      	b.n	8022c64 <_puts_r+0x38>
 8022cc6:	3e01      	subs	r6, #1
 8022cc8:	e7e4      	b.n	8022c94 <_puts_r+0x68>
 8022cca:	6823      	ldr	r3, [r4, #0]
 8022ccc:	1c5a      	adds	r2, r3, #1
 8022cce:	6022      	str	r2, [r4, #0]
 8022cd0:	220a      	movs	r2, #10
 8022cd2:	701a      	strb	r2, [r3, #0]
 8022cd4:	e7ee      	b.n	8022cb4 <_puts_r+0x88>
	...

08022cd8 <puts>:
 8022cd8:	4b02      	ldr	r3, [pc, #8]	@ (8022ce4 <puts+0xc>)
 8022cda:	4601      	mov	r1, r0
 8022cdc:	6818      	ldr	r0, [r3, #0]
 8022cde:	f7ff bfa5 	b.w	8022c2c <_puts_r>
 8022ce2:	bf00      	nop
 8022ce4:	200002b8 	.word	0x200002b8

08022ce8 <strcat>:
 8022ce8:	b510      	push	{r4, lr}
 8022cea:	4602      	mov	r2, r0
 8022cec:	7814      	ldrb	r4, [r2, #0]
 8022cee:	4613      	mov	r3, r2
 8022cf0:	3201      	adds	r2, #1
 8022cf2:	2c00      	cmp	r4, #0
 8022cf4:	d1fa      	bne.n	8022cec <strcat+0x4>
 8022cf6:	3b01      	subs	r3, #1
 8022cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022cfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022d00:	2a00      	cmp	r2, #0
 8022d02:	d1f9      	bne.n	8022cf8 <strcat+0x10>
 8022d04:	bd10      	pop	{r4, pc}

08022d06 <strchr>:
 8022d06:	b2c9      	uxtb	r1, r1
 8022d08:	4603      	mov	r3, r0
 8022d0a:	4618      	mov	r0, r3
 8022d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d10:	b112      	cbz	r2, 8022d18 <strchr+0x12>
 8022d12:	428a      	cmp	r2, r1
 8022d14:	d1f9      	bne.n	8022d0a <strchr+0x4>
 8022d16:	4770      	bx	lr
 8022d18:	2900      	cmp	r1, #0
 8022d1a:	bf18      	it	ne
 8022d1c:	2000      	movne	r0, #0
 8022d1e:	4770      	bx	lr

08022d20 <strcspn>:
 8022d20:	b570      	push	{r4, r5, r6, lr}
 8022d22:	4603      	mov	r3, r0
 8022d24:	461e      	mov	r6, r3
 8022d26:	f813 4b01 	ldrb.w	r4, [r3], #1
 8022d2a:	b144      	cbz	r4, 8022d3e <strcspn+0x1e>
 8022d2c:	1e4a      	subs	r2, r1, #1
 8022d2e:	e001      	b.n	8022d34 <strcspn+0x14>
 8022d30:	42a5      	cmp	r5, r4
 8022d32:	d004      	beq.n	8022d3e <strcspn+0x1e>
 8022d34:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8022d38:	2d00      	cmp	r5, #0
 8022d3a:	d1f9      	bne.n	8022d30 <strcspn+0x10>
 8022d3c:	e7f2      	b.n	8022d24 <strcspn+0x4>
 8022d3e:	1a30      	subs	r0, r6, r0
 8022d40:	bd70      	pop	{r4, r5, r6, pc}

08022d42 <strncmp>:
 8022d42:	b510      	push	{r4, lr}
 8022d44:	b16a      	cbz	r2, 8022d62 <strncmp+0x20>
 8022d46:	3901      	subs	r1, #1
 8022d48:	1884      	adds	r4, r0, r2
 8022d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d4e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022d52:	429a      	cmp	r2, r3
 8022d54:	d103      	bne.n	8022d5e <strncmp+0x1c>
 8022d56:	42a0      	cmp	r0, r4
 8022d58:	d001      	beq.n	8022d5e <strncmp+0x1c>
 8022d5a:	2a00      	cmp	r2, #0
 8022d5c:	d1f5      	bne.n	8022d4a <strncmp+0x8>
 8022d5e:	1ad0      	subs	r0, r2, r3
 8022d60:	bd10      	pop	{r4, pc}
 8022d62:	4610      	mov	r0, r2
 8022d64:	e7fc      	b.n	8022d60 <strncmp+0x1e>

08022d66 <strncpy>:
 8022d66:	b510      	push	{r4, lr}
 8022d68:	3901      	subs	r1, #1
 8022d6a:	4603      	mov	r3, r0
 8022d6c:	b132      	cbz	r2, 8022d7c <strncpy+0x16>
 8022d6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022d72:	f803 4b01 	strb.w	r4, [r3], #1
 8022d76:	3a01      	subs	r2, #1
 8022d78:	2c00      	cmp	r4, #0
 8022d7a:	d1f7      	bne.n	8022d6c <strncpy+0x6>
 8022d7c:	441a      	add	r2, r3
 8022d7e:	2100      	movs	r1, #0
 8022d80:	4293      	cmp	r3, r2
 8022d82:	d100      	bne.n	8022d86 <strncpy+0x20>
 8022d84:	bd10      	pop	{r4, pc}
 8022d86:	f803 1b01 	strb.w	r1, [r3], #1
 8022d8a:	e7f9      	b.n	8022d80 <strncpy+0x1a>

08022d8c <strrchr>:
 8022d8c:	b538      	push	{r3, r4, r5, lr}
 8022d8e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8022d92:	4603      	mov	r3, r0
 8022d94:	d10e      	bne.n	8022db4 <strrchr+0x28>
 8022d96:	4621      	mov	r1, r4
 8022d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022d9c:	f7ff bfb3 	b.w	8022d06 <strchr>
 8022da0:	1c43      	adds	r3, r0, #1
 8022da2:	4605      	mov	r5, r0
 8022da4:	4621      	mov	r1, r4
 8022da6:	4618      	mov	r0, r3
 8022da8:	f7ff ffad 	bl	8022d06 <strchr>
 8022dac:	2800      	cmp	r0, #0
 8022dae:	d1f7      	bne.n	8022da0 <strrchr+0x14>
 8022db0:	4628      	mov	r0, r5
 8022db2:	bd38      	pop	{r3, r4, r5, pc}
 8022db4:	2500      	movs	r5, #0
 8022db6:	e7f5      	b.n	8022da4 <strrchr+0x18>

08022db8 <strspn>:
 8022db8:	b570      	push	{r4, r5, r6, lr}
 8022dba:	4603      	mov	r3, r0
 8022dbc:	461e      	mov	r6, r3
 8022dbe:	f813 4b01 	ldrb.w	r4, [r3], #1
 8022dc2:	b13c      	cbz	r4, 8022dd4 <strspn+0x1c>
 8022dc4:	1e4a      	subs	r2, r1, #1
 8022dc6:	e001      	b.n	8022dcc <strspn+0x14>
 8022dc8:	42a5      	cmp	r5, r4
 8022dca:	d0f7      	beq.n	8022dbc <strspn+0x4>
 8022dcc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8022dd0:	2d00      	cmp	r5, #0
 8022dd2:	d1f9      	bne.n	8022dc8 <strspn+0x10>
 8022dd4:	1a30      	subs	r0, r6, r0
 8022dd6:	bd70      	pop	{r4, r5, r6, pc}

08022dd8 <strstr>:
 8022dd8:	780a      	ldrb	r2, [r1, #0]
 8022dda:	b570      	push	{r4, r5, r6, lr}
 8022ddc:	b96a      	cbnz	r2, 8022dfa <strstr+0x22>
 8022dde:	bd70      	pop	{r4, r5, r6, pc}
 8022de0:	429a      	cmp	r2, r3
 8022de2:	d109      	bne.n	8022df8 <strstr+0x20>
 8022de4:	460c      	mov	r4, r1
 8022de6:	4605      	mov	r5, r0
 8022de8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022dec:	2b00      	cmp	r3, #0
 8022dee:	d0f6      	beq.n	8022dde <strstr+0x6>
 8022df0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022df4:	429e      	cmp	r6, r3
 8022df6:	d0f7      	beq.n	8022de8 <strstr+0x10>
 8022df8:	3001      	adds	r0, #1
 8022dfa:	7803      	ldrb	r3, [r0, #0]
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d1ef      	bne.n	8022de0 <strstr+0x8>
 8022e00:	4618      	mov	r0, r3
 8022e02:	e7ec      	b.n	8022dde <strstr+0x6>

08022e04 <memcmp>:
 8022e04:	b510      	push	{r4, lr}
 8022e06:	3901      	subs	r1, #1
 8022e08:	4402      	add	r2, r0
 8022e0a:	4290      	cmp	r0, r2
 8022e0c:	d101      	bne.n	8022e12 <memcmp+0xe>
 8022e0e:	2000      	movs	r0, #0
 8022e10:	e005      	b.n	8022e1e <memcmp+0x1a>
 8022e12:	7803      	ldrb	r3, [r0, #0]
 8022e14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022e18:	42a3      	cmp	r3, r4
 8022e1a:	d001      	beq.n	8022e20 <memcmp+0x1c>
 8022e1c:	1b18      	subs	r0, r3, r4
 8022e1e:	bd10      	pop	{r4, pc}
 8022e20:	3001      	adds	r0, #1
 8022e22:	e7f2      	b.n	8022e0a <memcmp+0x6>

08022e24 <memmove>:
 8022e24:	4288      	cmp	r0, r1
 8022e26:	b510      	push	{r4, lr}
 8022e28:	eb01 0402 	add.w	r4, r1, r2
 8022e2c:	d902      	bls.n	8022e34 <memmove+0x10>
 8022e2e:	4284      	cmp	r4, r0
 8022e30:	4623      	mov	r3, r4
 8022e32:	d807      	bhi.n	8022e44 <memmove+0x20>
 8022e34:	1e43      	subs	r3, r0, #1
 8022e36:	42a1      	cmp	r1, r4
 8022e38:	d008      	beq.n	8022e4c <memmove+0x28>
 8022e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022e42:	e7f8      	b.n	8022e36 <memmove+0x12>
 8022e44:	4402      	add	r2, r0
 8022e46:	4601      	mov	r1, r0
 8022e48:	428a      	cmp	r2, r1
 8022e4a:	d100      	bne.n	8022e4e <memmove+0x2a>
 8022e4c:	bd10      	pop	{r4, pc}
 8022e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022e56:	e7f7      	b.n	8022e48 <memmove+0x24>

08022e58 <memset>:
 8022e58:	4402      	add	r2, r0
 8022e5a:	4603      	mov	r3, r0
 8022e5c:	4293      	cmp	r3, r2
 8022e5e:	d100      	bne.n	8022e62 <memset+0xa>
 8022e60:	4770      	bx	lr
 8022e62:	f803 1b01 	strb.w	r1, [r3], #1
 8022e66:	e7f9      	b.n	8022e5c <memset+0x4>

08022e68 <_close_r>:
 8022e68:	b538      	push	{r3, r4, r5, lr}
 8022e6a:	4d06      	ldr	r5, [pc, #24]	@ (8022e84 <_close_r+0x1c>)
 8022e6c:	2300      	movs	r3, #0
 8022e6e:	4604      	mov	r4, r0
 8022e70:	4608      	mov	r0, r1
 8022e72:	602b      	str	r3, [r5, #0]
 8022e74:	f7df faee 	bl	8002454 <_close>
 8022e78:	1c43      	adds	r3, r0, #1
 8022e7a:	d102      	bne.n	8022e82 <_close_r+0x1a>
 8022e7c:	682b      	ldr	r3, [r5, #0]
 8022e7e:	b103      	cbz	r3, 8022e82 <_close_r+0x1a>
 8022e80:	6023      	str	r3, [r4, #0]
 8022e82:	bd38      	pop	{r3, r4, r5, pc}
 8022e84:	20017a14 	.word	0x20017a14

08022e88 <_reclaim_reent>:
 8022e88:	4b29      	ldr	r3, [pc, #164]	@ (8022f30 <_reclaim_reent+0xa8>)
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	4283      	cmp	r3, r0
 8022e8e:	b570      	push	{r4, r5, r6, lr}
 8022e90:	4604      	mov	r4, r0
 8022e92:	d04b      	beq.n	8022f2c <_reclaim_reent+0xa4>
 8022e94:	69c3      	ldr	r3, [r0, #28]
 8022e96:	b1ab      	cbz	r3, 8022ec4 <_reclaim_reent+0x3c>
 8022e98:	68db      	ldr	r3, [r3, #12]
 8022e9a:	b16b      	cbz	r3, 8022eb8 <_reclaim_reent+0x30>
 8022e9c:	2500      	movs	r5, #0
 8022e9e:	69e3      	ldr	r3, [r4, #28]
 8022ea0:	68db      	ldr	r3, [r3, #12]
 8022ea2:	5959      	ldr	r1, [r3, r5]
 8022ea4:	2900      	cmp	r1, #0
 8022ea6:	d13b      	bne.n	8022f20 <_reclaim_reent+0x98>
 8022ea8:	3504      	adds	r5, #4
 8022eaa:	2d80      	cmp	r5, #128	@ 0x80
 8022eac:	d1f7      	bne.n	8022e9e <_reclaim_reent+0x16>
 8022eae:	69e3      	ldr	r3, [r4, #28]
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	68d9      	ldr	r1, [r3, #12]
 8022eb4:	f000 f8ce 	bl	8023054 <_free_r>
 8022eb8:	69e3      	ldr	r3, [r4, #28]
 8022eba:	6819      	ldr	r1, [r3, #0]
 8022ebc:	b111      	cbz	r1, 8022ec4 <_reclaim_reent+0x3c>
 8022ebe:	4620      	mov	r0, r4
 8022ec0:	f000 f8c8 	bl	8023054 <_free_r>
 8022ec4:	6961      	ldr	r1, [r4, #20]
 8022ec6:	b111      	cbz	r1, 8022ece <_reclaim_reent+0x46>
 8022ec8:	4620      	mov	r0, r4
 8022eca:	f000 f8c3 	bl	8023054 <_free_r>
 8022ece:	69e1      	ldr	r1, [r4, #28]
 8022ed0:	b111      	cbz	r1, 8022ed8 <_reclaim_reent+0x50>
 8022ed2:	4620      	mov	r0, r4
 8022ed4:	f000 f8be 	bl	8023054 <_free_r>
 8022ed8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022eda:	b111      	cbz	r1, 8022ee2 <_reclaim_reent+0x5a>
 8022edc:	4620      	mov	r0, r4
 8022ede:	f000 f8b9 	bl	8023054 <_free_r>
 8022ee2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022ee4:	b111      	cbz	r1, 8022eec <_reclaim_reent+0x64>
 8022ee6:	4620      	mov	r0, r4
 8022ee8:	f000 f8b4 	bl	8023054 <_free_r>
 8022eec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8022eee:	b111      	cbz	r1, 8022ef6 <_reclaim_reent+0x6e>
 8022ef0:	4620      	mov	r0, r4
 8022ef2:	f000 f8af 	bl	8023054 <_free_r>
 8022ef6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022ef8:	b111      	cbz	r1, 8022f00 <_reclaim_reent+0x78>
 8022efa:	4620      	mov	r0, r4
 8022efc:	f000 f8aa 	bl	8023054 <_free_r>
 8022f00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8022f02:	b111      	cbz	r1, 8022f0a <_reclaim_reent+0x82>
 8022f04:	4620      	mov	r0, r4
 8022f06:	f000 f8a5 	bl	8023054 <_free_r>
 8022f0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022f0c:	b111      	cbz	r1, 8022f14 <_reclaim_reent+0x8c>
 8022f0e:	4620      	mov	r0, r4
 8022f10:	f000 f8a0 	bl	8023054 <_free_r>
 8022f14:	6a23      	ldr	r3, [r4, #32]
 8022f16:	b14b      	cbz	r3, 8022f2c <_reclaim_reent+0xa4>
 8022f18:	4620      	mov	r0, r4
 8022f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f1e:	4718      	bx	r3
 8022f20:	680e      	ldr	r6, [r1, #0]
 8022f22:	4620      	mov	r0, r4
 8022f24:	f000 f896 	bl	8023054 <_free_r>
 8022f28:	4631      	mov	r1, r6
 8022f2a:	e7bb      	b.n	8022ea4 <_reclaim_reent+0x1c>
 8022f2c:	bd70      	pop	{r4, r5, r6, pc}
 8022f2e:	bf00      	nop
 8022f30:	200002b8 	.word	0x200002b8

08022f34 <_lseek_r>:
 8022f34:	b538      	push	{r3, r4, r5, lr}
 8022f36:	4d07      	ldr	r5, [pc, #28]	@ (8022f54 <_lseek_r+0x20>)
 8022f38:	4604      	mov	r4, r0
 8022f3a:	4608      	mov	r0, r1
 8022f3c:	4611      	mov	r1, r2
 8022f3e:	2200      	movs	r2, #0
 8022f40:	602a      	str	r2, [r5, #0]
 8022f42:	461a      	mov	r2, r3
 8022f44:	f7df faad 	bl	80024a2 <_lseek>
 8022f48:	1c43      	adds	r3, r0, #1
 8022f4a:	d102      	bne.n	8022f52 <_lseek_r+0x1e>
 8022f4c:	682b      	ldr	r3, [r5, #0]
 8022f4e:	b103      	cbz	r3, 8022f52 <_lseek_r+0x1e>
 8022f50:	6023      	str	r3, [r4, #0]
 8022f52:	bd38      	pop	{r3, r4, r5, pc}
 8022f54:	20017a14 	.word	0x20017a14

08022f58 <_read_r>:
 8022f58:	b538      	push	{r3, r4, r5, lr}
 8022f5a:	4d07      	ldr	r5, [pc, #28]	@ (8022f78 <_read_r+0x20>)
 8022f5c:	4604      	mov	r4, r0
 8022f5e:	4608      	mov	r0, r1
 8022f60:	4611      	mov	r1, r2
 8022f62:	2200      	movs	r2, #0
 8022f64:	602a      	str	r2, [r5, #0]
 8022f66:	461a      	mov	r2, r3
 8022f68:	f7df fa3b 	bl	80023e2 <_read>
 8022f6c:	1c43      	adds	r3, r0, #1
 8022f6e:	d102      	bne.n	8022f76 <_read_r+0x1e>
 8022f70:	682b      	ldr	r3, [r5, #0]
 8022f72:	b103      	cbz	r3, 8022f76 <_read_r+0x1e>
 8022f74:	6023      	str	r3, [r4, #0]
 8022f76:	bd38      	pop	{r3, r4, r5, pc}
 8022f78:	20017a14 	.word	0x20017a14

08022f7c <_sbrk_r>:
 8022f7c:	b538      	push	{r3, r4, r5, lr}
 8022f7e:	4d06      	ldr	r5, [pc, #24]	@ (8022f98 <_sbrk_r+0x1c>)
 8022f80:	2300      	movs	r3, #0
 8022f82:	4604      	mov	r4, r0
 8022f84:	4608      	mov	r0, r1
 8022f86:	602b      	str	r3, [r5, #0]
 8022f88:	f7df fa98 	bl	80024bc <_sbrk>
 8022f8c:	1c43      	adds	r3, r0, #1
 8022f8e:	d102      	bne.n	8022f96 <_sbrk_r+0x1a>
 8022f90:	682b      	ldr	r3, [r5, #0]
 8022f92:	b103      	cbz	r3, 8022f96 <_sbrk_r+0x1a>
 8022f94:	6023      	str	r3, [r4, #0]
 8022f96:	bd38      	pop	{r3, r4, r5, pc}
 8022f98:	20017a14 	.word	0x20017a14

08022f9c <_write_r>:
 8022f9c:	b538      	push	{r3, r4, r5, lr}
 8022f9e:	4d07      	ldr	r5, [pc, #28]	@ (8022fbc <_write_r+0x20>)
 8022fa0:	4604      	mov	r4, r0
 8022fa2:	4608      	mov	r0, r1
 8022fa4:	4611      	mov	r1, r2
 8022fa6:	2200      	movs	r2, #0
 8022fa8:	602a      	str	r2, [r5, #0]
 8022faa:	461a      	mov	r2, r3
 8022fac:	f7df fa36 	bl	800241c <_write>
 8022fb0:	1c43      	adds	r3, r0, #1
 8022fb2:	d102      	bne.n	8022fba <_write_r+0x1e>
 8022fb4:	682b      	ldr	r3, [r5, #0]
 8022fb6:	b103      	cbz	r3, 8022fba <_write_r+0x1e>
 8022fb8:	6023      	str	r3, [r4, #0]
 8022fba:	bd38      	pop	{r3, r4, r5, pc}
 8022fbc:	20017a14 	.word	0x20017a14

08022fc0 <__errno>:
 8022fc0:	4b01      	ldr	r3, [pc, #4]	@ (8022fc8 <__errno+0x8>)
 8022fc2:	6818      	ldr	r0, [r3, #0]
 8022fc4:	4770      	bx	lr
 8022fc6:	bf00      	nop
 8022fc8:	200002b8 	.word	0x200002b8

08022fcc <__libc_init_array>:
 8022fcc:	b570      	push	{r4, r5, r6, lr}
 8022fce:	4d0d      	ldr	r5, [pc, #52]	@ (8023004 <__libc_init_array+0x38>)
 8022fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8023008 <__libc_init_array+0x3c>)
 8022fd2:	1b64      	subs	r4, r4, r5
 8022fd4:	10a4      	asrs	r4, r4, #2
 8022fd6:	2600      	movs	r6, #0
 8022fd8:	42a6      	cmp	r6, r4
 8022fda:	d109      	bne.n	8022ff0 <__libc_init_array+0x24>
 8022fdc:	4d0b      	ldr	r5, [pc, #44]	@ (802300c <__libc_init_array+0x40>)
 8022fde:	4c0c      	ldr	r4, [pc, #48]	@ (8023010 <__libc_init_array+0x44>)
 8022fe0:	f001 fb1a 	bl	8024618 <_init>
 8022fe4:	1b64      	subs	r4, r4, r5
 8022fe6:	10a4      	asrs	r4, r4, #2
 8022fe8:	2600      	movs	r6, #0
 8022fea:	42a6      	cmp	r6, r4
 8022fec:	d105      	bne.n	8022ffa <__libc_init_array+0x2e>
 8022fee:	bd70      	pop	{r4, r5, r6, pc}
 8022ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ff4:	4798      	blx	r3
 8022ff6:	3601      	adds	r6, #1
 8022ff8:	e7ee      	b.n	8022fd8 <__libc_init_array+0xc>
 8022ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ffe:	4798      	blx	r3
 8023000:	3601      	adds	r6, #1
 8023002:	e7f2      	b.n	8022fea <__libc_init_array+0x1e>
 8023004:	08029a34 	.word	0x08029a34
 8023008:	08029a34 	.word	0x08029a34
 802300c:	08029a34 	.word	0x08029a34
 8023010:	08029a38 	.word	0x08029a38

08023014 <__retarget_lock_init_recursive>:
 8023014:	4770      	bx	lr

08023016 <__retarget_lock_acquire_recursive>:
 8023016:	4770      	bx	lr

08023018 <__retarget_lock_release_recursive>:
 8023018:	4770      	bx	lr

0802301a <memcpy>:
 802301a:	440a      	add	r2, r1
 802301c:	4291      	cmp	r1, r2
 802301e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8023022:	d100      	bne.n	8023026 <memcpy+0xc>
 8023024:	4770      	bx	lr
 8023026:	b510      	push	{r4, lr}
 8023028:	f811 4b01 	ldrb.w	r4, [r1], #1
 802302c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023030:	4291      	cmp	r1, r2
 8023032:	d1f9      	bne.n	8023028 <memcpy+0xe>
 8023034:	bd10      	pop	{r4, pc}

08023036 <strcpy>:
 8023036:	4603      	mov	r3, r0
 8023038:	f811 2b01 	ldrb.w	r2, [r1], #1
 802303c:	f803 2b01 	strb.w	r2, [r3], #1
 8023040:	2a00      	cmp	r2, #0
 8023042:	d1f9      	bne.n	8023038 <strcpy+0x2>
 8023044:	4770      	bx	lr

08023046 <abort>:
 8023046:	b508      	push	{r3, lr}
 8023048:	2006      	movs	r0, #6
 802304a:	f001 fac1 	bl	80245d0 <raise>
 802304e:	2001      	movs	r0, #1
 8023050:	f7df f9bc 	bl	80023cc <_exit>

08023054 <_free_r>:
 8023054:	b538      	push	{r3, r4, r5, lr}
 8023056:	4605      	mov	r5, r0
 8023058:	2900      	cmp	r1, #0
 802305a:	d041      	beq.n	80230e0 <_free_r+0x8c>
 802305c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023060:	1f0c      	subs	r4, r1, #4
 8023062:	2b00      	cmp	r3, #0
 8023064:	bfb8      	it	lt
 8023066:	18e4      	addlt	r4, r4, r3
 8023068:	f7ff fb2a 	bl	80226c0 <__malloc_lock>
 802306c:	4a1d      	ldr	r2, [pc, #116]	@ (80230e4 <_free_r+0x90>)
 802306e:	6813      	ldr	r3, [r2, #0]
 8023070:	b933      	cbnz	r3, 8023080 <_free_r+0x2c>
 8023072:	6063      	str	r3, [r4, #4]
 8023074:	6014      	str	r4, [r2, #0]
 8023076:	4628      	mov	r0, r5
 8023078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802307c:	f7ff bb26 	b.w	80226cc <__malloc_unlock>
 8023080:	42a3      	cmp	r3, r4
 8023082:	d908      	bls.n	8023096 <_free_r+0x42>
 8023084:	6820      	ldr	r0, [r4, #0]
 8023086:	1821      	adds	r1, r4, r0
 8023088:	428b      	cmp	r3, r1
 802308a:	bf01      	itttt	eq
 802308c:	6819      	ldreq	r1, [r3, #0]
 802308e:	685b      	ldreq	r3, [r3, #4]
 8023090:	1809      	addeq	r1, r1, r0
 8023092:	6021      	streq	r1, [r4, #0]
 8023094:	e7ed      	b.n	8023072 <_free_r+0x1e>
 8023096:	461a      	mov	r2, r3
 8023098:	685b      	ldr	r3, [r3, #4]
 802309a:	b10b      	cbz	r3, 80230a0 <_free_r+0x4c>
 802309c:	42a3      	cmp	r3, r4
 802309e:	d9fa      	bls.n	8023096 <_free_r+0x42>
 80230a0:	6811      	ldr	r1, [r2, #0]
 80230a2:	1850      	adds	r0, r2, r1
 80230a4:	42a0      	cmp	r0, r4
 80230a6:	d10b      	bne.n	80230c0 <_free_r+0x6c>
 80230a8:	6820      	ldr	r0, [r4, #0]
 80230aa:	4401      	add	r1, r0
 80230ac:	1850      	adds	r0, r2, r1
 80230ae:	4283      	cmp	r3, r0
 80230b0:	6011      	str	r1, [r2, #0]
 80230b2:	d1e0      	bne.n	8023076 <_free_r+0x22>
 80230b4:	6818      	ldr	r0, [r3, #0]
 80230b6:	685b      	ldr	r3, [r3, #4]
 80230b8:	6053      	str	r3, [r2, #4]
 80230ba:	4408      	add	r0, r1
 80230bc:	6010      	str	r0, [r2, #0]
 80230be:	e7da      	b.n	8023076 <_free_r+0x22>
 80230c0:	d902      	bls.n	80230c8 <_free_r+0x74>
 80230c2:	230c      	movs	r3, #12
 80230c4:	602b      	str	r3, [r5, #0]
 80230c6:	e7d6      	b.n	8023076 <_free_r+0x22>
 80230c8:	6820      	ldr	r0, [r4, #0]
 80230ca:	1821      	adds	r1, r4, r0
 80230cc:	428b      	cmp	r3, r1
 80230ce:	bf04      	itt	eq
 80230d0:	6819      	ldreq	r1, [r3, #0]
 80230d2:	685b      	ldreq	r3, [r3, #4]
 80230d4:	6063      	str	r3, [r4, #4]
 80230d6:	bf04      	itt	eq
 80230d8:	1809      	addeq	r1, r1, r0
 80230da:	6021      	streq	r1, [r4, #0]
 80230dc:	6054      	str	r4, [r2, #4]
 80230de:	e7ca      	b.n	8023076 <_free_r+0x22>
 80230e0:	bd38      	pop	{r3, r4, r5, pc}
 80230e2:	bf00      	nop
 80230e4:	200178d4 	.word	0x200178d4

080230e8 <__ssputs_r>:
 80230e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230ec:	688e      	ldr	r6, [r1, #8]
 80230ee:	461f      	mov	r7, r3
 80230f0:	42be      	cmp	r6, r7
 80230f2:	680b      	ldr	r3, [r1, #0]
 80230f4:	4682      	mov	sl, r0
 80230f6:	460c      	mov	r4, r1
 80230f8:	4690      	mov	r8, r2
 80230fa:	d82d      	bhi.n	8023158 <__ssputs_r+0x70>
 80230fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023104:	d026      	beq.n	8023154 <__ssputs_r+0x6c>
 8023106:	6965      	ldr	r5, [r4, #20]
 8023108:	6909      	ldr	r1, [r1, #16]
 802310a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802310e:	eba3 0901 	sub.w	r9, r3, r1
 8023112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023116:	1c7b      	adds	r3, r7, #1
 8023118:	444b      	add	r3, r9
 802311a:	106d      	asrs	r5, r5, #1
 802311c:	429d      	cmp	r5, r3
 802311e:	bf38      	it	cc
 8023120:	461d      	movcc	r5, r3
 8023122:	0553      	lsls	r3, r2, #21
 8023124:	d527      	bpl.n	8023176 <__ssputs_r+0x8e>
 8023126:	4629      	mov	r1, r5
 8023128:	f7ff fa16 	bl	8022558 <_malloc_r>
 802312c:	4606      	mov	r6, r0
 802312e:	b360      	cbz	r0, 802318a <__ssputs_r+0xa2>
 8023130:	6921      	ldr	r1, [r4, #16]
 8023132:	464a      	mov	r2, r9
 8023134:	f7ff ff71 	bl	802301a <memcpy>
 8023138:	89a3      	ldrh	r3, [r4, #12]
 802313a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802313e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023142:	81a3      	strh	r3, [r4, #12]
 8023144:	6126      	str	r6, [r4, #16]
 8023146:	6165      	str	r5, [r4, #20]
 8023148:	444e      	add	r6, r9
 802314a:	eba5 0509 	sub.w	r5, r5, r9
 802314e:	6026      	str	r6, [r4, #0]
 8023150:	60a5      	str	r5, [r4, #8]
 8023152:	463e      	mov	r6, r7
 8023154:	42be      	cmp	r6, r7
 8023156:	d900      	bls.n	802315a <__ssputs_r+0x72>
 8023158:	463e      	mov	r6, r7
 802315a:	6820      	ldr	r0, [r4, #0]
 802315c:	4632      	mov	r2, r6
 802315e:	4641      	mov	r1, r8
 8023160:	f7ff fe60 	bl	8022e24 <memmove>
 8023164:	68a3      	ldr	r3, [r4, #8]
 8023166:	1b9b      	subs	r3, r3, r6
 8023168:	60a3      	str	r3, [r4, #8]
 802316a:	6823      	ldr	r3, [r4, #0]
 802316c:	4433      	add	r3, r6
 802316e:	6023      	str	r3, [r4, #0]
 8023170:	2000      	movs	r0, #0
 8023172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023176:	462a      	mov	r2, r5
 8023178:	f001 f818 	bl	80241ac <_realloc_r>
 802317c:	4606      	mov	r6, r0
 802317e:	2800      	cmp	r0, #0
 8023180:	d1e0      	bne.n	8023144 <__ssputs_r+0x5c>
 8023182:	6921      	ldr	r1, [r4, #16]
 8023184:	4650      	mov	r0, sl
 8023186:	f7ff ff65 	bl	8023054 <_free_r>
 802318a:	230c      	movs	r3, #12
 802318c:	f8ca 3000 	str.w	r3, [sl]
 8023190:	89a3      	ldrh	r3, [r4, #12]
 8023192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023196:	81a3      	strh	r3, [r4, #12]
 8023198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802319c:	e7e9      	b.n	8023172 <__ssputs_r+0x8a>
	...

080231a0 <_svfiprintf_r>:
 80231a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231a4:	4698      	mov	r8, r3
 80231a6:	898b      	ldrh	r3, [r1, #12]
 80231a8:	061b      	lsls	r3, r3, #24
 80231aa:	b09d      	sub	sp, #116	@ 0x74
 80231ac:	4607      	mov	r7, r0
 80231ae:	460d      	mov	r5, r1
 80231b0:	4614      	mov	r4, r2
 80231b2:	d510      	bpl.n	80231d6 <_svfiprintf_r+0x36>
 80231b4:	690b      	ldr	r3, [r1, #16]
 80231b6:	b973      	cbnz	r3, 80231d6 <_svfiprintf_r+0x36>
 80231b8:	2140      	movs	r1, #64	@ 0x40
 80231ba:	f7ff f9cd 	bl	8022558 <_malloc_r>
 80231be:	6028      	str	r0, [r5, #0]
 80231c0:	6128      	str	r0, [r5, #16]
 80231c2:	b930      	cbnz	r0, 80231d2 <_svfiprintf_r+0x32>
 80231c4:	230c      	movs	r3, #12
 80231c6:	603b      	str	r3, [r7, #0]
 80231c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80231cc:	b01d      	add	sp, #116	@ 0x74
 80231ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231d2:	2340      	movs	r3, #64	@ 0x40
 80231d4:	616b      	str	r3, [r5, #20]
 80231d6:	2300      	movs	r3, #0
 80231d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80231da:	2320      	movs	r3, #32
 80231dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80231e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80231e4:	2330      	movs	r3, #48	@ 0x30
 80231e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8023384 <_svfiprintf_r+0x1e4>
 80231ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80231ee:	f04f 0901 	mov.w	r9, #1
 80231f2:	4623      	mov	r3, r4
 80231f4:	469a      	mov	sl, r3
 80231f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80231fa:	b10a      	cbz	r2, 8023200 <_svfiprintf_r+0x60>
 80231fc:	2a25      	cmp	r2, #37	@ 0x25
 80231fe:	d1f9      	bne.n	80231f4 <_svfiprintf_r+0x54>
 8023200:	ebba 0b04 	subs.w	fp, sl, r4
 8023204:	d00b      	beq.n	802321e <_svfiprintf_r+0x7e>
 8023206:	465b      	mov	r3, fp
 8023208:	4622      	mov	r2, r4
 802320a:	4629      	mov	r1, r5
 802320c:	4638      	mov	r0, r7
 802320e:	f7ff ff6b 	bl	80230e8 <__ssputs_r>
 8023212:	3001      	adds	r0, #1
 8023214:	f000 80a7 	beq.w	8023366 <_svfiprintf_r+0x1c6>
 8023218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802321a:	445a      	add	r2, fp
 802321c:	9209      	str	r2, [sp, #36]	@ 0x24
 802321e:	f89a 3000 	ldrb.w	r3, [sl]
 8023222:	2b00      	cmp	r3, #0
 8023224:	f000 809f 	beq.w	8023366 <_svfiprintf_r+0x1c6>
 8023228:	2300      	movs	r3, #0
 802322a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802322e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023232:	f10a 0a01 	add.w	sl, sl, #1
 8023236:	9304      	str	r3, [sp, #16]
 8023238:	9307      	str	r3, [sp, #28]
 802323a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802323e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023240:	4654      	mov	r4, sl
 8023242:	2205      	movs	r2, #5
 8023244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023248:	484e      	ldr	r0, [pc, #312]	@ (8023384 <_svfiprintf_r+0x1e4>)
 802324a:	f7dc ffc9 	bl	80001e0 <memchr>
 802324e:	9a04      	ldr	r2, [sp, #16]
 8023250:	b9d8      	cbnz	r0, 802328a <_svfiprintf_r+0xea>
 8023252:	06d0      	lsls	r0, r2, #27
 8023254:	bf44      	itt	mi
 8023256:	2320      	movmi	r3, #32
 8023258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802325c:	0711      	lsls	r1, r2, #28
 802325e:	bf44      	itt	mi
 8023260:	232b      	movmi	r3, #43	@ 0x2b
 8023262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023266:	f89a 3000 	ldrb.w	r3, [sl]
 802326a:	2b2a      	cmp	r3, #42	@ 0x2a
 802326c:	d015      	beq.n	802329a <_svfiprintf_r+0xfa>
 802326e:	9a07      	ldr	r2, [sp, #28]
 8023270:	4654      	mov	r4, sl
 8023272:	2000      	movs	r0, #0
 8023274:	f04f 0c0a 	mov.w	ip, #10
 8023278:	4621      	mov	r1, r4
 802327a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802327e:	3b30      	subs	r3, #48	@ 0x30
 8023280:	2b09      	cmp	r3, #9
 8023282:	d94b      	bls.n	802331c <_svfiprintf_r+0x17c>
 8023284:	b1b0      	cbz	r0, 80232b4 <_svfiprintf_r+0x114>
 8023286:	9207      	str	r2, [sp, #28]
 8023288:	e014      	b.n	80232b4 <_svfiprintf_r+0x114>
 802328a:	eba0 0308 	sub.w	r3, r0, r8
 802328e:	fa09 f303 	lsl.w	r3, r9, r3
 8023292:	4313      	orrs	r3, r2
 8023294:	9304      	str	r3, [sp, #16]
 8023296:	46a2      	mov	sl, r4
 8023298:	e7d2      	b.n	8023240 <_svfiprintf_r+0xa0>
 802329a:	9b03      	ldr	r3, [sp, #12]
 802329c:	1d19      	adds	r1, r3, #4
 802329e:	681b      	ldr	r3, [r3, #0]
 80232a0:	9103      	str	r1, [sp, #12]
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	bfbb      	ittet	lt
 80232a6:	425b      	neglt	r3, r3
 80232a8:	f042 0202 	orrlt.w	r2, r2, #2
 80232ac:	9307      	strge	r3, [sp, #28]
 80232ae:	9307      	strlt	r3, [sp, #28]
 80232b0:	bfb8      	it	lt
 80232b2:	9204      	strlt	r2, [sp, #16]
 80232b4:	7823      	ldrb	r3, [r4, #0]
 80232b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80232b8:	d10a      	bne.n	80232d0 <_svfiprintf_r+0x130>
 80232ba:	7863      	ldrb	r3, [r4, #1]
 80232bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80232be:	d132      	bne.n	8023326 <_svfiprintf_r+0x186>
 80232c0:	9b03      	ldr	r3, [sp, #12]
 80232c2:	1d1a      	adds	r2, r3, #4
 80232c4:	681b      	ldr	r3, [r3, #0]
 80232c6:	9203      	str	r2, [sp, #12]
 80232c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80232cc:	3402      	adds	r4, #2
 80232ce:	9305      	str	r3, [sp, #20]
 80232d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8023394 <_svfiprintf_r+0x1f4>
 80232d4:	7821      	ldrb	r1, [r4, #0]
 80232d6:	2203      	movs	r2, #3
 80232d8:	4650      	mov	r0, sl
 80232da:	f7dc ff81 	bl	80001e0 <memchr>
 80232de:	b138      	cbz	r0, 80232f0 <_svfiprintf_r+0x150>
 80232e0:	9b04      	ldr	r3, [sp, #16]
 80232e2:	eba0 000a 	sub.w	r0, r0, sl
 80232e6:	2240      	movs	r2, #64	@ 0x40
 80232e8:	4082      	lsls	r2, r0
 80232ea:	4313      	orrs	r3, r2
 80232ec:	3401      	adds	r4, #1
 80232ee:	9304      	str	r3, [sp, #16]
 80232f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232f4:	4824      	ldr	r0, [pc, #144]	@ (8023388 <_svfiprintf_r+0x1e8>)
 80232f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80232fa:	2206      	movs	r2, #6
 80232fc:	f7dc ff70 	bl	80001e0 <memchr>
 8023300:	2800      	cmp	r0, #0
 8023302:	d036      	beq.n	8023372 <_svfiprintf_r+0x1d2>
 8023304:	4b21      	ldr	r3, [pc, #132]	@ (802338c <_svfiprintf_r+0x1ec>)
 8023306:	bb1b      	cbnz	r3, 8023350 <_svfiprintf_r+0x1b0>
 8023308:	9b03      	ldr	r3, [sp, #12]
 802330a:	3307      	adds	r3, #7
 802330c:	f023 0307 	bic.w	r3, r3, #7
 8023310:	3308      	adds	r3, #8
 8023312:	9303      	str	r3, [sp, #12]
 8023314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023316:	4433      	add	r3, r6
 8023318:	9309      	str	r3, [sp, #36]	@ 0x24
 802331a:	e76a      	b.n	80231f2 <_svfiprintf_r+0x52>
 802331c:	fb0c 3202 	mla	r2, ip, r2, r3
 8023320:	460c      	mov	r4, r1
 8023322:	2001      	movs	r0, #1
 8023324:	e7a8      	b.n	8023278 <_svfiprintf_r+0xd8>
 8023326:	2300      	movs	r3, #0
 8023328:	3401      	adds	r4, #1
 802332a:	9305      	str	r3, [sp, #20]
 802332c:	4619      	mov	r1, r3
 802332e:	f04f 0c0a 	mov.w	ip, #10
 8023332:	4620      	mov	r0, r4
 8023334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023338:	3a30      	subs	r2, #48	@ 0x30
 802333a:	2a09      	cmp	r2, #9
 802333c:	d903      	bls.n	8023346 <_svfiprintf_r+0x1a6>
 802333e:	2b00      	cmp	r3, #0
 8023340:	d0c6      	beq.n	80232d0 <_svfiprintf_r+0x130>
 8023342:	9105      	str	r1, [sp, #20]
 8023344:	e7c4      	b.n	80232d0 <_svfiprintf_r+0x130>
 8023346:	fb0c 2101 	mla	r1, ip, r1, r2
 802334a:	4604      	mov	r4, r0
 802334c:	2301      	movs	r3, #1
 802334e:	e7f0      	b.n	8023332 <_svfiprintf_r+0x192>
 8023350:	ab03      	add	r3, sp, #12
 8023352:	9300      	str	r3, [sp, #0]
 8023354:	462a      	mov	r2, r5
 8023356:	4b0e      	ldr	r3, [pc, #56]	@ (8023390 <_svfiprintf_r+0x1f0>)
 8023358:	a904      	add	r1, sp, #16
 802335a:	4638      	mov	r0, r7
 802335c:	f3af 8000 	nop.w
 8023360:	1c42      	adds	r2, r0, #1
 8023362:	4606      	mov	r6, r0
 8023364:	d1d6      	bne.n	8023314 <_svfiprintf_r+0x174>
 8023366:	89ab      	ldrh	r3, [r5, #12]
 8023368:	065b      	lsls	r3, r3, #25
 802336a:	f53f af2d 	bmi.w	80231c8 <_svfiprintf_r+0x28>
 802336e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023370:	e72c      	b.n	80231cc <_svfiprintf_r+0x2c>
 8023372:	ab03      	add	r3, sp, #12
 8023374:	9300      	str	r3, [sp, #0]
 8023376:	462a      	mov	r2, r5
 8023378:	4b05      	ldr	r3, [pc, #20]	@ (8023390 <_svfiprintf_r+0x1f0>)
 802337a:	a904      	add	r1, sp, #16
 802337c:	4638      	mov	r0, r7
 802337e:	f000 fb87 	bl	8023a90 <_printf_i>
 8023382:	e7ed      	b.n	8023360 <_svfiprintf_r+0x1c0>
 8023384:	080299dc 	.word	0x080299dc
 8023388:	080299e6 	.word	0x080299e6
 802338c:	00000000 	.word	0x00000000
 8023390:	080230e9 	.word	0x080230e9
 8023394:	080299e2 	.word	0x080299e2

08023398 <_sungetc_r>:
 8023398:	b538      	push	{r3, r4, r5, lr}
 802339a:	1c4b      	adds	r3, r1, #1
 802339c:	4614      	mov	r4, r2
 802339e:	d103      	bne.n	80233a8 <_sungetc_r+0x10>
 80233a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80233a4:	4628      	mov	r0, r5
 80233a6:	bd38      	pop	{r3, r4, r5, pc}
 80233a8:	8993      	ldrh	r3, [r2, #12]
 80233aa:	f023 0320 	bic.w	r3, r3, #32
 80233ae:	8193      	strh	r3, [r2, #12]
 80233b0:	6853      	ldr	r3, [r2, #4]
 80233b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80233b4:	b2cd      	uxtb	r5, r1
 80233b6:	b18a      	cbz	r2, 80233dc <_sungetc_r+0x44>
 80233b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80233ba:	429a      	cmp	r2, r3
 80233bc:	dd08      	ble.n	80233d0 <_sungetc_r+0x38>
 80233be:	6823      	ldr	r3, [r4, #0]
 80233c0:	1e5a      	subs	r2, r3, #1
 80233c2:	6022      	str	r2, [r4, #0]
 80233c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80233c8:	6863      	ldr	r3, [r4, #4]
 80233ca:	3301      	adds	r3, #1
 80233cc:	6063      	str	r3, [r4, #4]
 80233ce:	e7e9      	b.n	80233a4 <_sungetc_r+0xc>
 80233d0:	4621      	mov	r1, r4
 80233d2:	f000 feb1 	bl	8024138 <__submore>
 80233d6:	2800      	cmp	r0, #0
 80233d8:	d0f1      	beq.n	80233be <_sungetc_r+0x26>
 80233da:	e7e1      	b.n	80233a0 <_sungetc_r+0x8>
 80233dc:	6921      	ldr	r1, [r4, #16]
 80233de:	6822      	ldr	r2, [r4, #0]
 80233e0:	b141      	cbz	r1, 80233f4 <_sungetc_r+0x5c>
 80233e2:	4291      	cmp	r1, r2
 80233e4:	d206      	bcs.n	80233f4 <_sungetc_r+0x5c>
 80233e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80233ea:	42a9      	cmp	r1, r5
 80233ec:	d102      	bne.n	80233f4 <_sungetc_r+0x5c>
 80233ee:	3a01      	subs	r2, #1
 80233f0:	6022      	str	r2, [r4, #0]
 80233f2:	e7ea      	b.n	80233ca <_sungetc_r+0x32>
 80233f4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80233f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80233fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80233fe:	2303      	movs	r3, #3
 8023400:	63a3      	str	r3, [r4, #56]	@ 0x38
 8023402:	4623      	mov	r3, r4
 8023404:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023408:	6023      	str	r3, [r4, #0]
 802340a:	2301      	movs	r3, #1
 802340c:	e7de      	b.n	80233cc <_sungetc_r+0x34>

0802340e <__ssrefill_r>:
 802340e:	b510      	push	{r4, lr}
 8023410:	460c      	mov	r4, r1
 8023412:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8023414:	b169      	cbz	r1, 8023432 <__ssrefill_r+0x24>
 8023416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802341a:	4299      	cmp	r1, r3
 802341c:	d001      	beq.n	8023422 <__ssrefill_r+0x14>
 802341e:	f7ff fe19 	bl	8023054 <_free_r>
 8023422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023424:	6063      	str	r3, [r4, #4]
 8023426:	2000      	movs	r0, #0
 8023428:	6360      	str	r0, [r4, #52]	@ 0x34
 802342a:	b113      	cbz	r3, 8023432 <__ssrefill_r+0x24>
 802342c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802342e:	6023      	str	r3, [r4, #0]
 8023430:	bd10      	pop	{r4, pc}
 8023432:	6923      	ldr	r3, [r4, #16]
 8023434:	6023      	str	r3, [r4, #0]
 8023436:	2300      	movs	r3, #0
 8023438:	6063      	str	r3, [r4, #4]
 802343a:	89a3      	ldrh	r3, [r4, #12]
 802343c:	f043 0320 	orr.w	r3, r3, #32
 8023440:	81a3      	strh	r3, [r4, #12]
 8023442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023446:	e7f3      	b.n	8023430 <__ssrefill_r+0x22>

08023448 <__ssvfiscanf_r>:
 8023448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802344c:	460c      	mov	r4, r1
 802344e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8023452:	2100      	movs	r1, #0
 8023454:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8023458:	49a5      	ldr	r1, [pc, #660]	@ (80236f0 <__ssvfiscanf_r+0x2a8>)
 802345a:	91a0      	str	r1, [sp, #640]	@ 0x280
 802345c:	f10d 0804 	add.w	r8, sp, #4
 8023460:	49a4      	ldr	r1, [pc, #656]	@ (80236f4 <__ssvfiscanf_r+0x2ac>)
 8023462:	4fa5      	ldr	r7, [pc, #660]	@ (80236f8 <__ssvfiscanf_r+0x2b0>)
 8023464:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8023468:	4606      	mov	r6, r0
 802346a:	91a1      	str	r1, [sp, #644]	@ 0x284
 802346c:	9300      	str	r3, [sp, #0]
 802346e:	7813      	ldrb	r3, [r2, #0]
 8023470:	2b00      	cmp	r3, #0
 8023472:	f000 8158 	beq.w	8023726 <__ssvfiscanf_r+0x2de>
 8023476:	5cf9      	ldrb	r1, [r7, r3]
 8023478:	f011 0108 	ands.w	r1, r1, #8
 802347c:	f102 0501 	add.w	r5, r2, #1
 8023480:	d019      	beq.n	80234b6 <__ssvfiscanf_r+0x6e>
 8023482:	6863      	ldr	r3, [r4, #4]
 8023484:	2b00      	cmp	r3, #0
 8023486:	dd0f      	ble.n	80234a8 <__ssvfiscanf_r+0x60>
 8023488:	6823      	ldr	r3, [r4, #0]
 802348a:	781a      	ldrb	r2, [r3, #0]
 802348c:	5cba      	ldrb	r2, [r7, r2]
 802348e:	0712      	lsls	r2, r2, #28
 8023490:	d401      	bmi.n	8023496 <__ssvfiscanf_r+0x4e>
 8023492:	462a      	mov	r2, r5
 8023494:	e7eb      	b.n	802346e <__ssvfiscanf_r+0x26>
 8023496:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8023498:	3201      	adds	r2, #1
 802349a:	9245      	str	r2, [sp, #276]	@ 0x114
 802349c:	6862      	ldr	r2, [r4, #4]
 802349e:	3301      	adds	r3, #1
 80234a0:	3a01      	subs	r2, #1
 80234a2:	6062      	str	r2, [r4, #4]
 80234a4:	6023      	str	r3, [r4, #0]
 80234a6:	e7ec      	b.n	8023482 <__ssvfiscanf_r+0x3a>
 80234a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80234aa:	4621      	mov	r1, r4
 80234ac:	4630      	mov	r0, r6
 80234ae:	4798      	blx	r3
 80234b0:	2800      	cmp	r0, #0
 80234b2:	d0e9      	beq.n	8023488 <__ssvfiscanf_r+0x40>
 80234b4:	e7ed      	b.n	8023492 <__ssvfiscanf_r+0x4a>
 80234b6:	2b25      	cmp	r3, #37	@ 0x25
 80234b8:	d012      	beq.n	80234e0 <__ssvfiscanf_r+0x98>
 80234ba:	4699      	mov	r9, r3
 80234bc:	6863      	ldr	r3, [r4, #4]
 80234be:	2b00      	cmp	r3, #0
 80234c0:	f340 8093 	ble.w	80235ea <__ssvfiscanf_r+0x1a2>
 80234c4:	6822      	ldr	r2, [r4, #0]
 80234c6:	7813      	ldrb	r3, [r2, #0]
 80234c8:	454b      	cmp	r3, r9
 80234ca:	f040 812c 	bne.w	8023726 <__ssvfiscanf_r+0x2de>
 80234ce:	6863      	ldr	r3, [r4, #4]
 80234d0:	3b01      	subs	r3, #1
 80234d2:	6063      	str	r3, [r4, #4]
 80234d4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80234d6:	3201      	adds	r2, #1
 80234d8:	3301      	adds	r3, #1
 80234da:	6022      	str	r2, [r4, #0]
 80234dc:	9345      	str	r3, [sp, #276]	@ 0x114
 80234de:	e7d8      	b.n	8023492 <__ssvfiscanf_r+0x4a>
 80234e0:	9141      	str	r1, [sp, #260]	@ 0x104
 80234e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80234e4:	7853      	ldrb	r3, [r2, #1]
 80234e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80234e8:	bf02      	ittt	eq
 80234ea:	2310      	moveq	r3, #16
 80234ec:	1c95      	addeq	r5, r2, #2
 80234ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80234f0:	220a      	movs	r2, #10
 80234f2:	46a9      	mov	r9, r5
 80234f4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80234f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80234fc:	2b09      	cmp	r3, #9
 80234fe:	d91e      	bls.n	802353e <__ssvfiscanf_r+0xf6>
 8023500:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80236fc <__ssvfiscanf_r+0x2b4>
 8023504:	2203      	movs	r2, #3
 8023506:	4650      	mov	r0, sl
 8023508:	f7dc fe6a 	bl	80001e0 <memchr>
 802350c:	b138      	cbz	r0, 802351e <__ssvfiscanf_r+0xd6>
 802350e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023510:	eba0 000a 	sub.w	r0, r0, sl
 8023514:	2301      	movs	r3, #1
 8023516:	4083      	lsls	r3, r0
 8023518:	4313      	orrs	r3, r2
 802351a:	9341      	str	r3, [sp, #260]	@ 0x104
 802351c:	464d      	mov	r5, r9
 802351e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023522:	2b78      	cmp	r3, #120	@ 0x78
 8023524:	d806      	bhi.n	8023534 <__ssvfiscanf_r+0xec>
 8023526:	2b57      	cmp	r3, #87	@ 0x57
 8023528:	d810      	bhi.n	802354c <__ssvfiscanf_r+0x104>
 802352a:	2b25      	cmp	r3, #37	@ 0x25
 802352c:	d0c5      	beq.n	80234ba <__ssvfiscanf_r+0x72>
 802352e:	d857      	bhi.n	80235e0 <__ssvfiscanf_r+0x198>
 8023530:	2b00      	cmp	r3, #0
 8023532:	d065      	beq.n	8023600 <__ssvfiscanf_r+0x1b8>
 8023534:	2303      	movs	r3, #3
 8023536:	9347      	str	r3, [sp, #284]	@ 0x11c
 8023538:	230a      	movs	r3, #10
 802353a:	9342      	str	r3, [sp, #264]	@ 0x108
 802353c:	e078      	b.n	8023630 <__ssvfiscanf_r+0x1e8>
 802353e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8023540:	fb02 1103 	mla	r1, r2, r3, r1
 8023544:	3930      	subs	r1, #48	@ 0x30
 8023546:	9143      	str	r1, [sp, #268]	@ 0x10c
 8023548:	464d      	mov	r5, r9
 802354a:	e7d2      	b.n	80234f2 <__ssvfiscanf_r+0xaa>
 802354c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8023550:	2a20      	cmp	r2, #32
 8023552:	d8ef      	bhi.n	8023534 <__ssvfiscanf_r+0xec>
 8023554:	a101      	add	r1, pc, #4	@ (adr r1, 802355c <__ssvfiscanf_r+0x114>)
 8023556:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802355a:	bf00      	nop
 802355c:	0802360f 	.word	0x0802360f
 8023560:	08023535 	.word	0x08023535
 8023564:	08023535 	.word	0x08023535
 8023568:	08023669 	.word	0x08023669
 802356c:	08023535 	.word	0x08023535
 8023570:	08023535 	.word	0x08023535
 8023574:	08023535 	.word	0x08023535
 8023578:	08023535 	.word	0x08023535
 802357c:	08023535 	.word	0x08023535
 8023580:	08023535 	.word	0x08023535
 8023584:	08023535 	.word	0x08023535
 8023588:	0802367f 	.word	0x0802367f
 802358c:	08023665 	.word	0x08023665
 8023590:	080235e7 	.word	0x080235e7
 8023594:	080235e7 	.word	0x080235e7
 8023598:	080235e7 	.word	0x080235e7
 802359c:	08023535 	.word	0x08023535
 80235a0:	08023621 	.word	0x08023621
 80235a4:	08023535 	.word	0x08023535
 80235a8:	08023535 	.word	0x08023535
 80235ac:	08023535 	.word	0x08023535
 80235b0:	08023535 	.word	0x08023535
 80235b4:	0802368f 	.word	0x0802368f
 80235b8:	08023629 	.word	0x08023629
 80235bc:	08023607 	.word	0x08023607
 80235c0:	08023535 	.word	0x08023535
 80235c4:	08023535 	.word	0x08023535
 80235c8:	0802368b 	.word	0x0802368b
 80235cc:	08023535 	.word	0x08023535
 80235d0:	08023665 	.word	0x08023665
 80235d4:	08023535 	.word	0x08023535
 80235d8:	08023535 	.word	0x08023535
 80235dc:	0802360f 	.word	0x0802360f
 80235e0:	3b45      	subs	r3, #69	@ 0x45
 80235e2:	2b02      	cmp	r3, #2
 80235e4:	d8a6      	bhi.n	8023534 <__ssvfiscanf_r+0xec>
 80235e6:	2305      	movs	r3, #5
 80235e8:	e021      	b.n	802362e <__ssvfiscanf_r+0x1e6>
 80235ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80235ec:	4621      	mov	r1, r4
 80235ee:	4630      	mov	r0, r6
 80235f0:	4798      	blx	r3
 80235f2:	2800      	cmp	r0, #0
 80235f4:	f43f af66 	beq.w	80234c4 <__ssvfiscanf_r+0x7c>
 80235f8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80235fa:	2800      	cmp	r0, #0
 80235fc:	f040 808b 	bne.w	8023716 <__ssvfiscanf_r+0x2ce>
 8023600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023604:	e08b      	b.n	802371e <__ssvfiscanf_r+0x2d6>
 8023606:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023608:	f042 0220 	orr.w	r2, r2, #32
 802360c:	9241      	str	r2, [sp, #260]	@ 0x104
 802360e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023614:	9241      	str	r2, [sp, #260]	@ 0x104
 8023616:	2210      	movs	r2, #16
 8023618:	2b6e      	cmp	r3, #110	@ 0x6e
 802361a:	9242      	str	r2, [sp, #264]	@ 0x108
 802361c:	d902      	bls.n	8023624 <__ssvfiscanf_r+0x1dc>
 802361e:	e005      	b.n	802362c <__ssvfiscanf_r+0x1e4>
 8023620:	2300      	movs	r3, #0
 8023622:	9342      	str	r3, [sp, #264]	@ 0x108
 8023624:	2303      	movs	r3, #3
 8023626:	e002      	b.n	802362e <__ssvfiscanf_r+0x1e6>
 8023628:	2308      	movs	r3, #8
 802362a:	9342      	str	r3, [sp, #264]	@ 0x108
 802362c:	2304      	movs	r3, #4
 802362e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8023630:	6863      	ldr	r3, [r4, #4]
 8023632:	2b00      	cmp	r3, #0
 8023634:	dd39      	ble.n	80236aa <__ssvfiscanf_r+0x262>
 8023636:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023638:	0659      	lsls	r1, r3, #25
 802363a:	d404      	bmi.n	8023646 <__ssvfiscanf_r+0x1fe>
 802363c:	6823      	ldr	r3, [r4, #0]
 802363e:	781a      	ldrb	r2, [r3, #0]
 8023640:	5cba      	ldrb	r2, [r7, r2]
 8023642:	0712      	lsls	r2, r2, #28
 8023644:	d438      	bmi.n	80236b8 <__ssvfiscanf_r+0x270>
 8023646:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8023648:	2b02      	cmp	r3, #2
 802364a:	dc47      	bgt.n	80236dc <__ssvfiscanf_r+0x294>
 802364c:	466b      	mov	r3, sp
 802364e:	4622      	mov	r2, r4
 8023650:	a941      	add	r1, sp, #260	@ 0x104
 8023652:	4630      	mov	r0, r6
 8023654:	f000 fb3c 	bl	8023cd0 <_scanf_chars>
 8023658:	2801      	cmp	r0, #1
 802365a:	d064      	beq.n	8023726 <__ssvfiscanf_r+0x2de>
 802365c:	2802      	cmp	r0, #2
 802365e:	f47f af18 	bne.w	8023492 <__ssvfiscanf_r+0x4a>
 8023662:	e7c9      	b.n	80235f8 <__ssvfiscanf_r+0x1b0>
 8023664:	220a      	movs	r2, #10
 8023666:	e7d7      	b.n	8023618 <__ssvfiscanf_r+0x1d0>
 8023668:	4629      	mov	r1, r5
 802366a:	4640      	mov	r0, r8
 802366c:	f000 fc7e 	bl	8023f6c <__sccl>
 8023670:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023676:	9341      	str	r3, [sp, #260]	@ 0x104
 8023678:	4605      	mov	r5, r0
 802367a:	2301      	movs	r3, #1
 802367c:	e7d7      	b.n	802362e <__ssvfiscanf_r+0x1e6>
 802367e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023684:	9341      	str	r3, [sp, #260]	@ 0x104
 8023686:	2300      	movs	r3, #0
 8023688:	e7d1      	b.n	802362e <__ssvfiscanf_r+0x1e6>
 802368a:	2302      	movs	r3, #2
 802368c:	e7cf      	b.n	802362e <__ssvfiscanf_r+0x1e6>
 802368e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8023690:	06c3      	lsls	r3, r0, #27
 8023692:	f53f aefe 	bmi.w	8023492 <__ssvfiscanf_r+0x4a>
 8023696:	9b00      	ldr	r3, [sp, #0]
 8023698:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802369a:	1d19      	adds	r1, r3, #4
 802369c:	9100      	str	r1, [sp, #0]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	07c0      	lsls	r0, r0, #31
 80236a2:	bf4c      	ite	mi
 80236a4:	801a      	strhmi	r2, [r3, #0]
 80236a6:	601a      	strpl	r2, [r3, #0]
 80236a8:	e6f3      	b.n	8023492 <__ssvfiscanf_r+0x4a>
 80236aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80236ac:	4621      	mov	r1, r4
 80236ae:	4630      	mov	r0, r6
 80236b0:	4798      	blx	r3
 80236b2:	2800      	cmp	r0, #0
 80236b4:	d0bf      	beq.n	8023636 <__ssvfiscanf_r+0x1ee>
 80236b6:	e79f      	b.n	80235f8 <__ssvfiscanf_r+0x1b0>
 80236b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80236ba:	3201      	adds	r2, #1
 80236bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80236be:	6862      	ldr	r2, [r4, #4]
 80236c0:	3a01      	subs	r2, #1
 80236c2:	2a00      	cmp	r2, #0
 80236c4:	6062      	str	r2, [r4, #4]
 80236c6:	dd02      	ble.n	80236ce <__ssvfiscanf_r+0x286>
 80236c8:	3301      	adds	r3, #1
 80236ca:	6023      	str	r3, [r4, #0]
 80236cc:	e7b6      	b.n	802363c <__ssvfiscanf_r+0x1f4>
 80236ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80236d0:	4621      	mov	r1, r4
 80236d2:	4630      	mov	r0, r6
 80236d4:	4798      	blx	r3
 80236d6:	2800      	cmp	r0, #0
 80236d8:	d0b0      	beq.n	802363c <__ssvfiscanf_r+0x1f4>
 80236da:	e78d      	b.n	80235f8 <__ssvfiscanf_r+0x1b0>
 80236dc:	2b04      	cmp	r3, #4
 80236de:	dc0f      	bgt.n	8023700 <__ssvfiscanf_r+0x2b8>
 80236e0:	466b      	mov	r3, sp
 80236e2:	4622      	mov	r2, r4
 80236e4:	a941      	add	r1, sp, #260	@ 0x104
 80236e6:	4630      	mov	r0, r6
 80236e8:	f000 fb4c 	bl	8023d84 <_scanf_i>
 80236ec:	e7b4      	b.n	8023658 <__ssvfiscanf_r+0x210>
 80236ee:	bf00      	nop
 80236f0:	08023399 	.word	0x08023399
 80236f4:	0802340f 	.word	0x0802340f
 80236f8:	080298dc 	.word	0x080298dc
 80236fc:	080299e2 	.word	0x080299e2
 8023700:	4b0a      	ldr	r3, [pc, #40]	@ (802372c <__ssvfiscanf_r+0x2e4>)
 8023702:	2b00      	cmp	r3, #0
 8023704:	f43f aec5 	beq.w	8023492 <__ssvfiscanf_r+0x4a>
 8023708:	466b      	mov	r3, sp
 802370a:	4622      	mov	r2, r4
 802370c:	a941      	add	r1, sp, #260	@ 0x104
 802370e:	4630      	mov	r0, r6
 8023710:	f3af 8000 	nop.w
 8023714:	e7a0      	b.n	8023658 <__ssvfiscanf_r+0x210>
 8023716:	89a3      	ldrh	r3, [r4, #12]
 8023718:	065b      	lsls	r3, r3, #25
 802371a:	f53f af71 	bmi.w	8023600 <__ssvfiscanf_r+0x1b8>
 802371e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8023722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023726:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8023728:	e7f9      	b.n	802371e <__ssvfiscanf_r+0x2d6>
 802372a:	bf00      	nop
 802372c:	00000000 	.word	0x00000000

08023730 <__sfputc_r>:
 8023730:	6893      	ldr	r3, [r2, #8]
 8023732:	3b01      	subs	r3, #1
 8023734:	2b00      	cmp	r3, #0
 8023736:	b410      	push	{r4}
 8023738:	6093      	str	r3, [r2, #8]
 802373a:	da08      	bge.n	802374e <__sfputc_r+0x1e>
 802373c:	6994      	ldr	r4, [r2, #24]
 802373e:	42a3      	cmp	r3, r4
 8023740:	db01      	blt.n	8023746 <__sfputc_r+0x16>
 8023742:	290a      	cmp	r1, #10
 8023744:	d103      	bne.n	802374e <__sfputc_r+0x1e>
 8023746:	f85d 4b04 	ldr.w	r4, [sp], #4
 802374a:	f000 bdcd 	b.w	80242e8 <__swbuf_r>
 802374e:	6813      	ldr	r3, [r2, #0]
 8023750:	1c58      	adds	r0, r3, #1
 8023752:	6010      	str	r0, [r2, #0]
 8023754:	7019      	strb	r1, [r3, #0]
 8023756:	4608      	mov	r0, r1
 8023758:	f85d 4b04 	ldr.w	r4, [sp], #4
 802375c:	4770      	bx	lr

0802375e <__sfputs_r>:
 802375e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023760:	4606      	mov	r6, r0
 8023762:	460f      	mov	r7, r1
 8023764:	4614      	mov	r4, r2
 8023766:	18d5      	adds	r5, r2, r3
 8023768:	42ac      	cmp	r4, r5
 802376a:	d101      	bne.n	8023770 <__sfputs_r+0x12>
 802376c:	2000      	movs	r0, #0
 802376e:	e007      	b.n	8023780 <__sfputs_r+0x22>
 8023770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023774:	463a      	mov	r2, r7
 8023776:	4630      	mov	r0, r6
 8023778:	f7ff ffda 	bl	8023730 <__sfputc_r>
 802377c:	1c43      	adds	r3, r0, #1
 802377e:	d1f3      	bne.n	8023768 <__sfputs_r+0xa>
 8023780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023784 <_vfiprintf_r>:
 8023784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023788:	460d      	mov	r5, r1
 802378a:	b09d      	sub	sp, #116	@ 0x74
 802378c:	4614      	mov	r4, r2
 802378e:	4698      	mov	r8, r3
 8023790:	4606      	mov	r6, r0
 8023792:	b118      	cbz	r0, 802379c <_vfiprintf_r+0x18>
 8023794:	6a03      	ldr	r3, [r0, #32]
 8023796:	b90b      	cbnz	r3, 802379c <_vfiprintf_r+0x18>
 8023798:	f7ff f926 	bl	80229e8 <__sinit>
 802379c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802379e:	07d9      	lsls	r1, r3, #31
 80237a0:	d405      	bmi.n	80237ae <_vfiprintf_r+0x2a>
 80237a2:	89ab      	ldrh	r3, [r5, #12]
 80237a4:	059a      	lsls	r2, r3, #22
 80237a6:	d402      	bmi.n	80237ae <_vfiprintf_r+0x2a>
 80237a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80237aa:	f7ff fc34 	bl	8023016 <__retarget_lock_acquire_recursive>
 80237ae:	89ab      	ldrh	r3, [r5, #12]
 80237b0:	071b      	lsls	r3, r3, #28
 80237b2:	d501      	bpl.n	80237b8 <_vfiprintf_r+0x34>
 80237b4:	692b      	ldr	r3, [r5, #16]
 80237b6:	b99b      	cbnz	r3, 80237e0 <_vfiprintf_r+0x5c>
 80237b8:	4629      	mov	r1, r5
 80237ba:	4630      	mov	r0, r6
 80237bc:	f000 fdd2 	bl	8024364 <__swsetup_r>
 80237c0:	b170      	cbz	r0, 80237e0 <_vfiprintf_r+0x5c>
 80237c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80237c4:	07dc      	lsls	r4, r3, #31
 80237c6:	d504      	bpl.n	80237d2 <_vfiprintf_r+0x4e>
 80237c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80237cc:	b01d      	add	sp, #116	@ 0x74
 80237ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237d2:	89ab      	ldrh	r3, [r5, #12]
 80237d4:	0598      	lsls	r0, r3, #22
 80237d6:	d4f7      	bmi.n	80237c8 <_vfiprintf_r+0x44>
 80237d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80237da:	f7ff fc1d 	bl	8023018 <__retarget_lock_release_recursive>
 80237de:	e7f3      	b.n	80237c8 <_vfiprintf_r+0x44>
 80237e0:	2300      	movs	r3, #0
 80237e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80237e4:	2320      	movs	r3, #32
 80237e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80237ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80237ee:	2330      	movs	r3, #48	@ 0x30
 80237f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80239a0 <_vfiprintf_r+0x21c>
 80237f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80237f8:	f04f 0901 	mov.w	r9, #1
 80237fc:	4623      	mov	r3, r4
 80237fe:	469a      	mov	sl, r3
 8023800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023804:	b10a      	cbz	r2, 802380a <_vfiprintf_r+0x86>
 8023806:	2a25      	cmp	r2, #37	@ 0x25
 8023808:	d1f9      	bne.n	80237fe <_vfiprintf_r+0x7a>
 802380a:	ebba 0b04 	subs.w	fp, sl, r4
 802380e:	d00b      	beq.n	8023828 <_vfiprintf_r+0xa4>
 8023810:	465b      	mov	r3, fp
 8023812:	4622      	mov	r2, r4
 8023814:	4629      	mov	r1, r5
 8023816:	4630      	mov	r0, r6
 8023818:	f7ff ffa1 	bl	802375e <__sfputs_r>
 802381c:	3001      	adds	r0, #1
 802381e:	f000 80a7 	beq.w	8023970 <_vfiprintf_r+0x1ec>
 8023822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023824:	445a      	add	r2, fp
 8023826:	9209      	str	r2, [sp, #36]	@ 0x24
 8023828:	f89a 3000 	ldrb.w	r3, [sl]
 802382c:	2b00      	cmp	r3, #0
 802382e:	f000 809f 	beq.w	8023970 <_vfiprintf_r+0x1ec>
 8023832:	2300      	movs	r3, #0
 8023834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802383c:	f10a 0a01 	add.w	sl, sl, #1
 8023840:	9304      	str	r3, [sp, #16]
 8023842:	9307      	str	r3, [sp, #28]
 8023844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023848:	931a      	str	r3, [sp, #104]	@ 0x68
 802384a:	4654      	mov	r4, sl
 802384c:	2205      	movs	r2, #5
 802384e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023852:	4853      	ldr	r0, [pc, #332]	@ (80239a0 <_vfiprintf_r+0x21c>)
 8023854:	f7dc fcc4 	bl	80001e0 <memchr>
 8023858:	9a04      	ldr	r2, [sp, #16]
 802385a:	b9d8      	cbnz	r0, 8023894 <_vfiprintf_r+0x110>
 802385c:	06d1      	lsls	r1, r2, #27
 802385e:	bf44      	itt	mi
 8023860:	2320      	movmi	r3, #32
 8023862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023866:	0713      	lsls	r3, r2, #28
 8023868:	bf44      	itt	mi
 802386a:	232b      	movmi	r3, #43	@ 0x2b
 802386c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023870:	f89a 3000 	ldrb.w	r3, [sl]
 8023874:	2b2a      	cmp	r3, #42	@ 0x2a
 8023876:	d015      	beq.n	80238a4 <_vfiprintf_r+0x120>
 8023878:	9a07      	ldr	r2, [sp, #28]
 802387a:	4654      	mov	r4, sl
 802387c:	2000      	movs	r0, #0
 802387e:	f04f 0c0a 	mov.w	ip, #10
 8023882:	4621      	mov	r1, r4
 8023884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023888:	3b30      	subs	r3, #48	@ 0x30
 802388a:	2b09      	cmp	r3, #9
 802388c:	d94b      	bls.n	8023926 <_vfiprintf_r+0x1a2>
 802388e:	b1b0      	cbz	r0, 80238be <_vfiprintf_r+0x13a>
 8023890:	9207      	str	r2, [sp, #28]
 8023892:	e014      	b.n	80238be <_vfiprintf_r+0x13a>
 8023894:	eba0 0308 	sub.w	r3, r0, r8
 8023898:	fa09 f303 	lsl.w	r3, r9, r3
 802389c:	4313      	orrs	r3, r2
 802389e:	9304      	str	r3, [sp, #16]
 80238a0:	46a2      	mov	sl, r4
 80238a2:	e7d2      	b.n	802384a <_vfiprintf_r+0xc6>
 80238a4:	9b03      	ldr	r3, [sp, #12]
 80238a6:	1d19      	adds	r1, r3, #4
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	9103      	str	r1, [sp, #12]
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	bfbb      	ittet	lt
 80238b0:	425b      	neglt	r3, r3
 80238b2:	f042 0202 	orrlt.w	r2, r2, #2
 80238b6:	9307      	strge	r3, [sp, #28]
 80238b8:	9307      	strlt	r3, [sp, #28]
 80238ba:	bfb8      	it	lt
 80238bc:	9204      	strlt	r2, [sp, #16]
 80238be:	7823      	ldrb	r3, [r4, #0]
 80238c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80238c2:	d10a      	bne.n	80238da <_vfiprintf_r+0x156>
 80238c4:	7863      	ldrb	r3, [r4, #1]
 80238c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80238c8:	d132      	bne.n	8023930 <_vfiprintf_r+0x1ac>
 80238ca:	9b03      	ldr	r3, [sp, #12]
 80238cc:	1d1a      	adds	r2, r3, #4
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	9203      	str	r2, [sp, #12]
 80238d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80238d6:	3402      	adds	r4, #2
 80238d8:	9305      	str	r3, [sp, #20]
 80238da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80239b0 <_vfiprintf_r+0x22c>
 80238de:	7821      	ldrb	r1, [r4, #0]
 80238e0:	2203      	movs	r2, #3
 80238e2:	4650      	mov	r0, sl
 80238e4:	f7dc fc7c 	bl	80001e0 <memchr>
 80238e8:	b138      	cbz	r0, 80238fa <_vfiprintf_r+0x176>
 80238ea:	9b04      	ldr	r3, [sp, #16]
 80238ec:	eba0 000a 	sub.w	r0, r0, sl
 80238f0:	2240      	movs	r2, #64	@ 0x40
 80238f2:	4082      	lsls	r2, r0
 80238f4:	4313      	orrs	r3, r2
 80238f6:	3401      	adds	r4, #1
 80238f8:	9304      	str	r3, [sp, #16]
 80238fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238fe:	4829      	ldr	r0, [pc, #164]	@ (80239a4 <_vfiprintf_r+0x220>)
 8023900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023904:	2206      	movs	r2, #6
 8023906:	f7dc fc6b 	bl	80001e0 <memchr>
 802390a:	2800      	cmp	r0, #0
 802390c:	d03f      	beq.n	802398e <_vfiprintf_r+0x20a>
 802390e:	4b26      	ldr	r3, [pc, #152]	@ (80239a8 <_vfiprintf_r+0x224>)
 8023910:	bb1b      	cbnz	r3, 802395a <_vfiprintf_r+0x1d6>
 8023912:	9b03      	ldr	r3, [sp, #12]
 8023914:	3307      	adds	r3, #7
 8023916:	f023 0307 	bic.w	r3, r3, #7
 802391a:	3308      	adds	r3, #8
 802391c:	9303      	str	r3, [sp, #12]
 802391e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023920:	443b      	add	r3, r7
 8023922:	9309      	str	r3, [sp, #36]	@ 0x24
 8023924:	e76a      	b.n	80237fc <_vfiprintf_r+0x78>
 8023926:	fb0c 3202 	mla	r2, ip, r2, r3
 802392a:	460c      	mov	r4, r1
 802392c:	2001      	movs	r0, #1
 802392e:	e7a8      	b.n	8023882 <_vfiprintf_r+0xfe>
 8023930:	2300      	movs	r3, #0
 8023932:	3401      	adds	r4, #1
 8023934:	9305      	str	r3, [sp, #20]
 8023936:	4619      	mov	r1, r3
 8023938:	f04f 0c0a 	mov.w	ip, #10
 802393c:	4620      	mov	r0, r4
 802393e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023942:	3a30      	subs	r2, #48	@ 0x30
 8023944:	2a09      	cmp	r2, #9
 8023946:	d903      	bls.n	8023950 <_vfiprintf_r+0x1cc>
 8023948:	2b00      	cmp	r3, #0
 802394a:	d0c6      	beq.n	80238da <_vfiprintf_r+0x156>
 802394c:	9105      	str	r1, [sp, #20]
 802394e:	e7c4      	b.n	80238da <_vfiprintf_r+0x156>
 8023950:	fb0c 2101 	mla	r1, ip, r1, r2
 8023954:	4604      	mov	r4, r0
 8023956:	2301      	movs	r3, #1
 8023958:	e7f0      	b.n	802393c <_vfiprintf_r+0x1b8>
 802395a:	ab03      	add	r3, sp, #12
 802395c:	9300      	str	r3, [sp, #0]
 802395e:	462a      	mov	r2, r5
 8023960:	4b12      	ldr	r3, [pc, #72]	@ (80239ac <_vfiprintf_r+0x228>)
 8023962:	a904      	add	r1, sp, #16
 8023964:	4630      	mov	r0, r6
 8023966:	f3af 8000 	nop.w
 802396a:	4607      	mov	r7, r0
 802396c:	1c78      	adds	r0, r7, #1
 802396e:	d1d6      	bne.n	802391e <_vfiprintf_r+0x19a>
 8023970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023972:	07d9      	lsls	r1, r3, #31
 8023974:	d405      	bmi.n	8023982 <_vfiprintf_r+0x1fe>
 8023976:	89ab      	ldrh	r3, [r5, #12]
 8023978:	059a      	lsls	r2, r3, #22
 802397a:	d402      	bmi.n	8023982 <_vfiprintf_r+0x1fe>
 802397c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802397e:	f7ff fb4b 	bl	8023018 <__retarget_lock_release_recursive>
 8023982:	89ab      	ldrh	r3, [r5, #12]
 8023984:	065b      	lsls	r3, r3, #25
 8023986:	f53f af1f 	bmi.w	80237c8 <_vfiprintf_r+0x44>
 802398a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802398c:	e71e      	b.n	80237cc <_vfiprintf_r+0x48>
 802398e:	ab03      	add	r3, sp, #12
 8023990:	9300      	str	r3, [sp, #0]
 8023992:	462a      	mov	r2, r5
 8023994:	4b05      	ldr	r3, [pc, #20]	@ (80239ac <_vfiprintf_r+0x228>)
 8023996:	a904      	add	r1, sp, #16
 8023998:	4630      	mov	r0, r6
 802399a:	f000 f879 	bl	8023a90 <_printf_i>
 802399e:	e7e4      	b.n	802396a <_vfiprintf_r+0x1e6>
 80239a0:	080299dc 	.word	0x080299dc
 80239a4:	080299e6 	.word	0x080299e6
 80239a8:	00000000 	.word	0x00000000
 80239ac:	0802375f 	.word	0x0802375f
 80239b0:	080299e2 	.word	0x080299e2

080239b4 <_printf_common>:
 80239b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239b8:	4616      	mov	r6, r2
 80239ba:	4698      	mov	r8, r3
 80239bc:	688a      	ldr	r2, [r1, #8]
 80239be:	690b      	ldr	r3, [r1, #16]
 80239c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80239c4:	4293      	cmp	r3, r2
 80239c6:	bfb8      	it	lt
 80239c8:	4613      	movlt	r3, r2
 80239ca:	6033      	str	r3, [r6, #0]
 80239cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80239d0:	4607      	mov	r7, r0
 80239d2:	460c      	mov	r4, r1
 80239d4:	b10a      	cbz	r2, 80239da <_printf_common+0x26>
 80239d6:	3301      	adds	r3, #1
 80239d8:	6033      	str	r3, [r6, #0]
 80239da:	6823      	ldr	r3, [r4, #0]
 80239dc:	0699      	lsls	r1, r3, #26
 80239de:	bf42      	ittt	mi
 80239e0:	6833      	ldrmi	r3, [r6, #0]
 80239e2:	3302      	addmi	r3, #2
 80239e4:	6033      	strmi	r3, [r6, #0]
 80239e6:	6825      	ldr	r5, [r4, #0]
 80239e8:	f015 0506 	ands.w	r5, r5, #6
 80239ec:	d106      	bne.n	80239fc <_printf_common+0x48>
 80239ee:	f104 0a19 	add.w	sl, r4, #25
 80239f2:	68e3      	ldr	r3, [r4, #12]
 80239f4:	6832      	ldr	r2, [r6, #0]
 80239f6:	1a9b      	subs	r3, r3, r2
 80239f8:	42ab      	cmp	r3, r5
 80239fa:	dc26      	bgt.n	8023a4a <_printf_common+0x96>
 80239fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023a00:	6822      	ldr	r2, [r4, #0]
 8023a02:	3b00      	subs	r3, #0
 8023a04:	bf18      	it	ne
 8023a06:	2301      	movne	r3, #1
 8023a08:	0692      	lsls	r2, r2, #26
 8023a0a:	d42b      	bmi.n	8023a64 <_printf_common+0xb0>
 8023a0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023a10:	4641      	mov	r1, r8
 8023a12:	4638      	mov	r0, r7
 8023a14:	47c8      	blx	r9
 8023a16:	3001      	adds	r0, #1
 8023a18:	d01e      	beq.n	8023a58 <_printf_common+0xa4>
 8023a1a:	6823      	ldr	r3, [r4, #0]
 8023a1c:	6922      	ldr	r2, [r4, #16]
 8023a1e:	f003 0306 	and.w	r3, r3, #6
 8023a22:	2b04      	cmp	r3, #4
 8023a24:	bf02      	ittt	eq
 8023a26:	68e5      	ldreq	r5, [r4, #12]
 8023a28:	6833      	ldreq	r3, [r6, #0]
 8023a2a:	1aed      	subeq	r5, r5, r3
 8023a2c:	68a3      	ldr	r3, [r4, #8]
 8023a2e:	bf0c      	ite	eq
 8023a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023a34:	2500      	movne	r5, #0
 8023a36:	4293      	cmp	r3, r2
 8023a38:	bfc4      	itt	gt
 8023a3a:	1a9b      	subgt	r3, r3, r2
 8023a3c:	18ed      	addgt	r5, r5, r3
 8023a3e:	2600      	movs	r6, #0
 8023a40:	341a      	adds	r4, #26
 8023a42:	42b5      	cmp	r5, r6
 8023a44:	d11a      	bne.n	8023a7c <_printf_common+0xc8>
 8023a46:	2000      	movs	r0, #0
 8023a48:	e008      	b.n	8023a5c <_printf_common+0xa8>
 8023a4a:	2301      	movs	r3, #1
 8023a4c:	4652      	mov	r2, sl
 8023a4e:	4641      	mov	r1, r8
 8023a50:	4638      	mov	r0, r7
 8023a52:	47c8      	blx	r9
 8023a54:	3001      	adds	r0, #1
 8023a56:	d103      	bne.n	8023a60 <_printf_common+0xac>
 8023a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a60:	3501      	adds	r5, #1
 8023a62:	e7c6      	b.n	80239f2 <_printf_common+0x3e>
 8023a64:	18e1      	adds	r1, r4, r3
 8023a66:	1c5a      	adds	r2, r3, #1
 8023a68:	2030      	movs	r0, #48	@ 0x30
 8023a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023a6e:	4422      	add	r2, r4
 8023a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023a78:	3302      	adds	r3, #2
 8023a7a:	e7c7      	b.n	8023a0c <_printf_common+0x58>
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	4622      	mov	r2, r4
 8023a80:	4641      	mov	r1, r8
 8023a82:	4638      	mov	r0, r7
 8023a84:	47c8      	blx	r9
 8023a86:	3001      	adds	r0, #1
 8023a88:	d0e6      	beq.n	8023a58 <_printf_common+0xa4>
 8023a8a:	3601      	adds	r6, #1
 8023a8c:	e7d9      	b.n	8023a42 <_printf_common+0x8e>
	...

08023a90 <_printf_i>:
 8023a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023a94:	7e0f      	ldrb	r7, [r1, #24]
 8023a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023a98:	2f78      	cmp	r7, #120	@ 0x78
 8023a9a:	4691      	mov	r9, r2
 8023a9c:	4680      	mov	r8, r0
 8023a9e:	460c      	mov	r4, r1
 8023aa0:	469a      	mov	sl, r3
 8023aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023aa6:	d807      	bhi.n	8023ab8 <_printf_i+0x28>
 8023aa8:	2f62      	cmp	r7, #98	@ 0x62
 8023aaa:	d80a      	bhi.n	8023ac2 <_printf_i+0x32>
 8023aac:	2f00      	cmp	r7, #0
 8023aae:	f000 80d2 	beq.w	8023c56 <_printf_i+0x1c6>
 8023ab2:	2f58      	cmp	r7, #88	@ 0x58
 8023ab4:	f000 80b9 	beq.w	8023c2a <_printf_i+0x19a>
 8023ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023ac0:	e03a      	b.n	8023b38 <_printf_i+0xa8>
 8023ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023ac6:	2b15      	cmp	r3, #21
 8023ac8:	d8f6      	bhi.n	8023ab8 <_printf_i+0x28>
 8023aca:	a101      	add	r1, pc, #4	@ (adr r1, 8023ad0 <_printf_i+0x40>)
 8023acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023ad0:	08023b29 	.word	0x08023b29
 8023ad4:	08023b3d 	.word	0x08023b3d
 8023ad8:	08023ab9 	.word	0x08023ab9
 8023adc:	08023ab9 	.word	0x08023ab9
 8023ae0:	08023ab9 	.word	0x08023ab9
 8023ae4:	08023ab9 	.word	0x08023ab9
 8023ae8:	08023b3d 	.word	0x08023b3d
 8023aec:	08023ab9 	.word	0x08023ab9
 8023af0:	08023ab9 	.word	0x08023ab9
 8023af4:	08023ab9 	.word	0x08023ab9
 8023af8:	08023ab9 	.word	0x08023ab9
 8023afc:	08023c3d 	.word	0x08023c3d
 8023b00:	08023b67 	.word	0x08023b67
 8023b04:	08023bf7 	.word	0x08023bf7
 8023b08:	08023ab9 	.word	0x08023ab9
 8023b0c:	08023ab9 	.word	0x08023ab9
 8023b10:	08023c5f 	.word	0x08023c5f
 8023b14:	08023ab9 	.word	0x08023ab9
 8023b18:	08023b67 	.word	0x08023b67
 8023b1c:	08023ab9 	.word	0x08023ab9
 8023b20:	08023ab9 	.word	0x08023ab9
 8023b24:	08023bff 	.word	0x08023bff
 8023b28:	6833      	ldr	r3, [r6, #0]
 8023b2a:	1d1a      	adds	r2, r3, #4
 8023b2c:	681b      	ldr	r3, [r3, #0]
 8023b2e:	6032      	str	r2, [r6, #0]
 8023b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023b38:	2301      	movs	r3, #1
 8023b3a:	e09d      	b.n	8023c78 <_printf_i+0x1e8>
 8023b3c:	6833      	ldr	r3, [r6, #0]
 8023b3e:	6820      	ldr	r0, [r4, #0]
 8023b40:	1d19      	adds	r1, r3, #4
 8023b42:	6031      	str	r1, [r6, #0]
 8023b44:	0606      	lsls	r6, r0, #24
 8023b46:	d501      	bpl.n	8023b4c <_printf_i+0xbc>
 8023b48:	681d      	ldr	r5, [r3, #0]
 8023b4a:	e003      	b.n	8023b54 <_printf_i+0xc4>
 8023b4c:	0645      	lsls	r5, r0, #25
 8023b4e:	d5fb      	bpl.n	8023b48 <_printf_i+0xb8>
 8023b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023b54:	2d00      	cmp	r5, #0
 8023b56:	da03      	bge.n	8023b60 <_printf_i+0xd0>
 8023b58:	232d      	movs	r3, #45	@ 0x2d
 8023b5a:	426d      	negs	r5, r5
 8023b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023b60:	4859      	ldr	r0, [pc, #356]	@ (8023cc8 <_printf_i+0x238>)
 8023b62:	230a      	movs	r3, #10
 8023b64:	e011      	b.n	8023b8a <_printf_i+0xfa>
 8023b66:	6821      	ldr	r1, [r4, #0]
 8023b68:	6833      	ldr	r3, [r6, #0]
 8023b6a:	0608      	lsls	r0, r1, #24
 8023b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8023b70:	d402      	bmi.n	8023b78 <_printf_i+0xe8>
 8023b72:	0649      	lsls	r1, r1, #25
 8023b74:	bf48      	it	mi
 8023b76:	b2ad      	uxthmi	r5, r5
 8023b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8023b7a:	4853      	ldr	r0, [pc, #332]	@ (8023cc8 <_printf_i+0x238>)
 8023b7c:	6033      	str	r3, [r6, #0]
 8023b7e:	bf14      	ite	ne
 8023b80:	230a      	movne	r3, #10
 8023b82:	2308      	moveq	r3, #8
 8023b84:	2100      	movs	r1, #0
 8023b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023b8a:	6866      	ldr	r6, [r4, #4]
 8023b8c:	60a6      	str	r6, [r4, #8]
 8023b8e:	2e00      	cmp	r6, #0
 8023b90:	bfa2      	ittt	ge
 8023b92:	6821      	ldrge	r1, [r4, #0]
 8023b94:	f021 0104 	bicge.w	r1, r1, #4
 8023b98:	6021      	strge	r1, [r4, #0]
 8023b9a:	b90d      	cbnz	r5, 8023ba0 <_printf_i+0x110>
 8023b9c:	2e00      	cmp	r6, #0
 8023b9e:	d04b      	beq.n	8023c38 <_printf_i+0x1a8>
 8023ba0:	4616      	mov	r6, r2
 8023ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8023ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8023baa:	5dc7      	ldrb	r7, [r0, r7]
 8023bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023bb0:	462f      	mov	r7, r5
 8023bb2:	42bb      	cmp	r3, r7
 8023bb4:	460d      	mov	r5, r1
 8023bb6:	d9f4      	bls.n	8023ba2 <_printf_i+0x112>
 8023bb8:	2b08      	cmp	r3, #8
 8023bba:	d10b      	bne.n	8023bd4 <_printf_i+0x144>
 8023bbc:	6823      	ldr	r3, [r4, #0]
 8023bbe:	07df      	lsls	r7, r3, #31
 8023bc0:	d508      	bpl.n	8023bd4 <_printf_i+0x144>
 8023bc2:	6923      	ldr	r3, [r4, #16]
 8023bc4:	6861      	ldr	r1, [r4, #4]
 8023bc6:	4299      	cmp	r1, r3
 8023bc8:	bfde      	ittt	le
 8023bca:	2330      	movle	r3, #48	@ 0x30
 8023bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023bd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8023bd4:	1b92      	subs	r2, r2, r6
 8023bd6:	6122      	str	r2, [r4, #16]
 8023bd8:	f8cd a000 	str.w	sl, [sp]
 8023bdc:	464b      	mov	r3, r9
 8023bde:	aa03      	add	r2, sp, #12
 8023be0:	4621      	mov	r1, r4
 8023be2:	4640      	mov	r0, r8
 8023be4:	f7ff fee6 	bl	80239b4 <_printf_common>
 8023be8:	3001      	adds	r0, #1
 8023bea:	d14a      	bne.n	8023c82 <_printf_i+0x1f2>
 8023bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023bf0:	b004      	add	sp, #16
 8023bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bf6:	6823      	ldr	r3, [r4, #0]
 8023bf8:	f043 0320 	orr.w	r3, r3, #32
 8023bfc:	6023      	str	r3, [r4, #0]
 8023bfe:	4833      	ldr	r0, [pc, #204]	@ (8023ccc <_printf_i+0x23c>)
 8023c00:	2778      	movs	r7, #120	@ 0x78
 8023c02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023c06:	6823      	ldr	r3, [r4, #0]
 8023c08:	6831      	ldr	r1, [r6, #0]
 8023c0a:	061f      	lsls	r7, r3, #24
 8023c0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8023c10:	d402      	bmi.n	8023c18 <_printf_i+0x188>
 8023c12:	065f      	lsls	r7, r3, #25
 8023c14:	bf48      	it	mi
 8023c16:	b2ad      	uxthmi	r5, r5
 8023c18:	6031      	str	r1, [r6, #0]
 8023c1a:	07d9      	lsls	r1, r3, #31
 8023c1c:	bf44      	itt	mi
 8023c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8023c22:	6023      	strmi	r3, [r4, #0]
 8023c24:	b11d      	cbz	r5, 8023c2e <_printf_i+0x19e>
 8023c26:	2310      	movs	r3, #16
 8023c28:	e7ac      	b.n	8023b84 <_printf_i+0xf4>
 8023c2a:	4827      	ldr	r0, [pc, #156]	@ (8023cc8 <_printf_i+0x238>)
 8023c2c:	e7e9      	b.n	8023c02 <_printf_i+0x172>
 8023c2e:	6823      	ldr	r3, [r4, #0]
 8023c30:	f023 0320 	bic.w	r3, r3, #32
 8023c34:	6023      	str	r3, [r4, #0]
 8023c36:	e7f6      	b.n	8023c26 <_printf_i+0x196>
 8023c38:	4616      	mov	r6, r2
 8023c3a:	e7bd      	b.n	8023bb8 <_printf_i+0x128>
 8023c3c:	6833      	ldr	r3, [r6, #0]
 8023c3e:	6825      	ldr	r5, [r4, #0]
 8023c40:	6961      	ldr	r1, [r4, #20]
 8023c42:	1d18      	adds	r0, r3, #4
 8023c44:	6030      	str	r0, [r6, #0]
 8023c46:	062e      	lsls	r6, r5, #24
 8023c48:	681b      	ldr	r3, [r3, #0]
 8023c4a:	d501      	bpl.n	8023c50 <_printf_i+0x1c0>
 8023c4c:	6019      	str	r1, [r3, #0]
 8023c4e:	e002      	b.n	8023c56 <_printf_i+0x1c6>
 8023c50:	0668      	lsls	r0, r5, #25
 8023c52:	d5fb      	bpl.n	8023c4c <_printf_i+0x1bc>
 8023c54:	8019      	strh	r1, [r3, #0]
 8023c56:	2300      	movs	r3, #0
 8023c58:	6123      	str	r3, [r4, #16]
 8023c5a:	4616      	mov	r6, r2
 8023c5c:	e7bc      	b.n	8023bd8 <_printf_i+0x148>
 8023c5e:	6833      	ldr	r3, [r6, #0]
 8023c60:	1d1a      	adds	r2, r3, #4
 8023c62:	6032      	str	r2, [r6, #0]
 8023c64:	681e      	ldr	r6, [r3, #0]
 8023c66:	6862      	ldr	r2, [r4, #4]
 8023c68:	2100      	movs	r1, #0
 8023c6a:	4630      	mov	r0, r6
 8023c6c:	f7dc fab8 	bl	80001e0 <memchr>
 8023c70:	b108      	cbz	r0, 8023c76 <_printf_i+0x1e6>
 8023c72:	1b80      	subs	r0, r0, r6
 8023c74:	6060      	str	r0, [r4, #4]
 8023c76:	6863      	ldr	r3, [r4, #4]
 8023c78:	6123      	str	r3, [r4, #16]
 8023c7a:	2300      	movs	r3, #0
 8023c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023c80:	e7aa      	b.n	8023bd8 <_printf_i+0x148>
 8023c82:	6923      	ldr	r3, [r4, #16]
 8023c84:	4632      	mov	r2, r6
 8023c86:	4649      	mov	r1, r9
 8023c88:	4640      	mov	r0, r8
 8023c8a:	47d0      	blx	sl
 8023c8c:	3001      	adds	r0, #1
 8023c8e:	d0ad      	beq.n	8023bec <_printf_i+0x15c>
 8023c90:	6823      	ldr	r3, [r4, #0]
 8023c92:	079b      	lsls	r3, r3, #30
 8023c94:	d413      	bmi.n	8023cbe <_printf_i+0x22e>
 8023c96:	68e0      	ldr	r0, [r4, #12]
 8023c98:	9b03      	ldr	r3, [sp, #12]
 8023c9a:	4298      	cmp	r0, r3
 8023c9c:	bfb8      	it	lt
 8023c9e:	4618      	movlt	r0, r3
 8023ca0:	e7a6      	b.n	8023bf0 <_printf_i+0x160>
 8023ca2:	2301      	movs	r3, #1
 8023ca4:	4632      	mov	r2, r6
 8023ca6:	4649      	mov	r1, r9
 8023ca8:	4640      	mov	r0, r8
 8023caa:	47d0      	blx	sl
 8023cac:	3001      	adds	r0, #1
 8023cae:	d09d      	beq.n	8023bec <_printf_i+0x15c>
 8023cb0:	3501      	adds	r5, #1
 8023cb2:	68e3      	ldr	r3, [r4, #12]
 8023cb4:	9903      	ldr	r1, [sp, #12]
 8023cb6:	1a5b      	subs	r3, r3, r1
 8023cb8:	42ab      	cmp	r3, r5
 8023cba:	dcf2      	bgt.n	8023ca2 <_printf_i+0x212>
 8023cbc:	e7eb      	b.n	8023c96 <_printf_i+0x206>
 8023cbe:	2500      	movs	r5, #0
 8023cc0:	f104 0619 	add.w	r6, r4, #25
 8023cc4:	e7f5      	b.n	8023cb2 <_printf_i+0x222>
 8023cc6:	bf00      	nop
 8023cc8:	080299ed 	.word	0x080299ed
 8023ccc:	080299fe 	.word	0x080299fe

08023cd0 <_scanf_chars>:
 8023cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023cd4:	4615      	mov	r5, r2
 8023cd6:	688a      	ldr	r2, [r1, #8]
 8023cd8:	4680      	mov	r8, r0
 8023cda:	460c      	mov	r4, r1
 8023cdc:	b932      	cbnz	r2, 8023cec <_scanf_chars+0x1c>
 8023cde:	698a      	ldr	r2, [r1, #24]
 8023ce0:	2a00      	cmp	r2, #0
 8023ce2:	bf14      	ite	ne
 8023ce4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8023ce8:	2201      	moveq	r2, #1
 8023cea:	608a      	str	r2, [r1, #8]
 8023cec:	6822      	ldr	r2, [r4, #0]
 8023cee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8023d80 <_scanf_chars+0xb0>
 8023cf2:	06d1      	lsls	r1, r2, #27
 8023cf4:	bf5f      	itttt	pl
 8023cf6:	681a      	ldrpl	r2, [r3, #0]
 8023cf8:	1d11      	addpl	r1, r2, #4
 8023cfa:	6019      	strpl	r1, [r3, #0]
 8023cfc:	6816      	ldrpl	r6, [r2, #0]
 8023cfe:	2700      	movs	r7, #0
 8023d00:	69a0      	ldr	r0, [r4, #24]
 8023d02:	b188      	cbz	r0, 8023d28 <_scanf_chars+0x58>
 8023d04:	2801      	cmp	r0, #1
 8023d06:	d107      	bne.n	8023d18 <_scanf_chars+0x48>
 8023d08:	682b      	ldr	r3, [r5, #0]
 8023d0a:	781a      	ldrb	r2, [r3, #0]
 8023d0c:	6963      	ldr	r3, [r4, #20]
 8023d0e:	5c9b      	ldrb	r3, [r3, r2]
 8023d10:	b953      	cbnz	r3, 8023d28 <_scanf_chars+0x58>
 8023d12:	2f00      	cmp	r7, #0
 8023d14:	d031      	beq.n	8023d7a <_scanf_chars+0xaa>
 8023d16:	e022      	b.n	8023d5e <_scanf_chars+0x8e>
 8023d18:	2802      	cmp	r0, #2
 8023d1a:	d120      	bne.n	8023d5e <_scanf_chars+0x8e>
 8023d1c:	682b      	ldr	r3, [r5, #0]
 8023d1e:	781b      	ldrb	r3, [r3, #0]
 8023d20:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023d24:	071b      	lsls	r3, r3, #28
 8023d26:	d41a      	bmi.n	8023d5e <_scanf_chars+0x8e>
 8023d28:	6823      	ldr	r3, [r4, #0]
 8023d2a:	06da      	lsls	r2, r3, #27
 8023d2c:	bf5e      	ittt	pl
 8023d2e:	682b      	ldrpl	r3, [r5, #0]
 8023d30:	781b      	ldrbpl	r3, [r3, #0]
 8023d32:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023d36:	682a      	ldr	r2, [r5, #0]
 8023d38:	686b      	ldr	r3, [r5, #4]
 8023d3a:	3201      	adds	r2, #1
 8023d3c:	602a      	str	r2, [r5, #0]
 8023d3e:	68a2      	ldr	r2, [r4, #8]
 8023d40:	3b01      	subs	r3, #1
 8023d42:	3a01      	subs	r2, #1
 8023d44:	606b      	str	r3, [r5, #4]
 8023d46:	3701      	adds	r7, #1
 8023d48:	60a2      	str	r2, [r4, #8]
 8023d4a:	b142      	cbz	r2, 8023d5e <_scanf_chars+0x8e>
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	dcd7      	bgt.n	8023d00 <_scanf_chars+0x30>
 8023d50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023d54:	4629      	mov	r1, r5
 8023d56:	4640      	mov	r0, r8
 8023d58:	4798      	blx	r3
 8023d5a:	2800      	cmp	r0, #0
 8023d5c:	d0d0      	beq.n	8023d00 <_scanf_chars+0x30>
 8023d5e:	6823      	ldr	r3, [r4, #0]
 8023d60:	f013 0310 	ands.w	r3, r3, #16
 8023d64:	d105      	bne.n	8023d72 <_scanf_chars+0xa2>
 8023d66:	68e2      	ldr	r2, [r4, #12]
 8023d68:	3201      	adds	r2, #1
 8023d6a:	60e2      	str	r2, [r4, #12]
 8023d6c:	69a2      	ldr	r2, [r4, #24]
 8023d6e:	b102      	cbz	r2, 8023d72 <_scanf_chars+0xa2>
 8023d70:	7033      	strb	r3, [r6, #0]
 8023d72:	6923      	ldr	r3, [r4, #16]
 8023d74:	443b      	add	r3, r7
 8023d76:	6123      	str	r3, [r4, #16]
 8023d78:	2000      	movs	r0, #0
 8023d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d7e:	bf00      	nop
 8023d80:	080298dc 	.word	0x080298dc

08023d84 <_scanf_i>:
 8023d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d88:	4698      	mov	r8, r3
 8023d8a:	4b74      	ldr	r3, [pc, #464]	@ (8023f5c <_scanf_i+0x1d8>)
 8023d8c:	460c      	mov	r4, r1
 8023d8e:	4682      	mov	sl, r0
 8023d90:	4616      	mov	r6, r2
 8023d92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023d96:	b087      	sub	sp, #28
 8023d98:	ab03      	add	r3, sp, #12
 8023d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023d9e:	4b70      	ldr	r3, [pc, #448]	@ (8023f60 <_scanf_i+0x1dc>)
 8023da0:	69a1      	ldr	r1, [r4, #24]
 8023da2:	4a70      	ldr	r2, [pc, #448]	@ (8023f64 <_scanf_i+0x1e0>)
 8023da4:	2903      	cmp	r1, #3
 8023da6:	bf08      	it	eq
 8023da8:	461a      	moveq	r2, r3
 8023daa:	68a3      	ldr	r3, [r4, #8]
 8023dac:	9201      	str	r2, [sp, #4]
 8023dae:	1e5a      	subs	r2, r3, #1
 8023db0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8023db4:	bf88      	it	hi
 8023db6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8023dba:	4627      	mov	r7, r4
 8023dbc:	bf82      	ittt	hi
 8023dbe:	eb03 0905 	addhi.w	r9, r3, r5
 8023dc2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8023dc6:	60a3      	strhi	r3, [r4, #8]
 8023dc8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023dcc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8023dd0:	bf98      	it	ls
 8023dd2:	f04f 0900 	movls.w	r9, #0
 8023dd6:	6023      	str	r3, [r4, #0]
 8023dd8:	463d      	mov	r5, r7
 8023dda:	f04f 0b00 	mov.w	fp, #0
 8023dde:	6831      	ldr	r1, [r6, #0]
 8023de0:	ab03      	add	r3, sp, #12
 8023de2:	7809      	ldrb	r1, [r1, #0]
 8023de4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023de8:	2202      	movs	r2, #2
 8023dea:	f7dc f9f9 	bl	80001e0 <memchr>
 8023dee:	b328      	cbz	r0, 8023e3c <_scanf_i+0xb8>
 8023df0:	f1bb 0f01 	cmp.w	fp, #1
 8023df4:	d159      	bne.n	8023eaa <_scanf_i+0x126>
 8023df6:	6862      	ldr	r2, [r4, #4]
 8023df8:	b92a      	cbnz	r2, 8023e06 <_scanf_i+0x82>
 8023dfa:	6822      	ldr	r2, [r4, #0]
 8023dfc:	2108      	movs	r1, #8
 8023dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023e02:	6061      	str	r1, [r4, #4]
 8023e04:	6022      	str	r2, [r4, #0]
 8023e06:	6822      	ldr	r2, [r4, #0]
 8023e08:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8023e0c:	6022      	str	r2, [r4, #0]
 8023e0e:	68a2      	ldr	r2, [r4, #8]
 8023e10:	1e51      	subs	r1, r2, #1
 8023e12:	60a1      	str	r1, [r4, #8]
 8023e14:	b192      	cbz	r2, 8023e3c <_scanf_i+0xb8>
 8023e16:	6832      	ldr	r2, [r6, #0]
 8023e18:	1c51      	adds	r1, r2, #1
 8023e1a:	6031      	str	r1, [r6, #0]
 8023e1c:	7812      	ldrb	r2, [r2, #0]
 8023e1e:	f805 2b01 	strb.w	r2, [r5], #1
 8023e22:	6872      	ldr	r2, [r6, #4]
 8023e24:	3a01      	subs	r2, #1
 8023e26:	2a00      	cmp	r2, #0
 8023e28:	6072      	str	r2, [r6, #4]
 8023e2a:	dc07      	bgt.n	8023e3c <_scanf_i+0xb8>
 8023e2c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8023e30:	4631      	mov	r1, r6
 8023e32:	4650      	mov	r0, sl
 8023e34:	4790      	blx	r2
 8023e36:	2800      	cmp	r0, #0
 8023e38:	f040 8085 	bne.w	8023f46 <_scanf_i+0x1c2>
 8023e3c:	f10b 0b01 	add.w	fp, fp, #1
 8023e40:	f1bb 0f03 	cmp.w	fp, #3
 8023e44:	d1cb      	bne.n	8023dde <_scanf_i+0x5a>
 8023e46:	6863      	ldr	r3, [r4, #4]
 8023e48:	b90b      	cbnz	r3, 8023e4e <_scanf_i+0xca>
 8023e4a:	230a      	movs	r3, #10
 8023e4c:	6063      	str	r3, [r4, #4]
 8023e4e:	6863      	ldr	r3, [r4, #4]
 8023e50:	4945      	ldr	r1, [pc, #276]	@ (8023f68 <_scanf_i+0x1e4>)
 8023e52:	6960      	ldr	r0, [r4, #20]
 8023e54:	1ac9      	subs	r1, r1, r3
 8023e56:	f000 f889 	bl	8023f6c <__sccl>
 8023e5a:	f04f 0b00 	mov.w	fp, #0
 8023e5e:	68a3      	ldr	r3, [r4, #8]
 8023e60:	6822      	ldr	r2, [r4, #0]
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	d03d      	beq.n	8023ee2 <_scanf_i+0x15e>
 8023e66:	6831      	ldr	r1, [r6, #0]
 8023e68:	6960      	ldr	r0, [r4, #20]
 8023e6a:	f891 c000 	ldrb.w	ip, [r1]
 8023e6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023e72:	2800      	cmp	r0, #0
 8023e74:	d035      	beq.n	8023ee2 <_scanf_i+0x15e>
 8023e76:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8023e7a:	d124      	bne.n	8023ec6 <_scanf_i+0x142>
 8023e7c:	0510      	lsls	r0, r2, #20
 8023e7e:	d522      	bpl.n	8023ec6 <_scanf_i+0x142>
 8023e80:	f10b 0b01 	add.w	fp, fp, #1
 8023e84:	f1b9 0f00 	cmp.w	r9, #0
 8023e88:	d003      	beq.n	8023e92 <_scanf_i+0x10e>
 8023e8a:	3301      	adds	r3, #1
 8023e8c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8023e90:	60a3      	str	r3, [r4, #8]
 8023e92:	6873      	ldr	r3, [r6, #4]
 8023e94:	3b01      	subs	r3, #1
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	6073      	str	r3, [r6, #4]
 8023e9a:	dd1b      	ble.n	8023ed4 <_scanf_i+0x150>
 8023e9c:	6833      	ldr	r3, [r6, #0]
 8023e9e:	3301      	adds	r3, #1
 8023ea0:	6033      	str	r3, [r6, #0]
 8023ea2:	68a3      	ldr	r3, [r4, #8]
 8023ea4:	3b01      	subs	r3, #1
 8023ea6:	60a3      	str	r3, [r4, #8]
 8023ea8:	e7d9      	b.n	8023e5e <_scanf_i+0xda>
 8023eaa:	f1bb 0f02 	cmp.w	fp, #2
 8023eae:	d1ae      	bne.n	8023e0e <_scanf_i+0x8a>
 8023eb0:	6822      	ldr	r2, [r4, #0]
 8023eb2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8023eb6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023eba:	d1bf      	bne.n	8023e3c <_scanf_i+0xb8>
 8023ebc:	2110      	movs	r1, #16
 8023ebe:	6061      	str	r1, [r4, #4]
 8023ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8023ec4:	e7a2      	b.n	8023e0c <_scanf_i+0x88>
 8023ec6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8023eca:	6022      	str	r2, [r4, #0]
 8023ecc:	780b      	ldrb	r3, [r1, #0]
 8023ece:	f805 3b01 	strb.w	r3, [r5], #1
 8023ed2:	e7de      	b.n	8023e92 <_scanf_i+0x10e>
 8023ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023ed8:	4631      	mov	r1, r6
 8023eda:	4650      	mov	r0, sl
 8023edc:	4798      	blx	r3
 8023ede:	2800      	cmp	r0, #0
 8023ee0:	d0df      	beq.n	8023ea2 <_scanf_i+0x11e>
 8023ee2:	6823      	ldr	r3, [r4, #0]
 8023ee4:	05d9      	lsls	r1, r3, #23
 8023ee6:	d50d      	bpl.n	8023f04 <_scanf_i+0x180>
 8023ee8:	42bd      	cmp	r5, r7
 8023eea:	d909      	bls.n	8023f00 <_scanf_i+0x17c>
 8023eec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023ef4:	4632      	mov	r2, r6
 8023ef6:	4650      	mov	r0, sl
 8023ef8:	4798      	blx	r3
 8023efa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8023efe:	464d      	mov	r5, r9
 8023f00:	42bd      	cmp	r5, r7
 8023f02:	d028      	beq.n	8023f56 <_scanf_i+0x1d2>
 8023f04:	6822      	ldr	r2, [r4, #0]
 8023f06:	f012 0210 	ands.w	r2, r2, #16
 8023f0a:	d113      	bne.n	8023f34 <_scanf_i+0x1b0>
 8023f0c:	702a      	strb	r2, [r5, #0]
 8023f0e:	6863      	ldr	r3, [r4, #4]
 8023f10:	9e01      	ldr	r6, [sp, #4]
 8023f12:	4639      	mov	r1, r7
 8023f14:	4650      	mov	r0, sl
 8023f16:	47b0      	blx	r6
 8023f18:	f8d8 3000 	ldr.w	r3, [r8]
 8023f1c:	6821      	ldr	r1, [r4, #0]
 8023f1e:	1d1a      	adds	r2, r3, #4
 8023f20:	f8c8 2000 	str.w	r2, [r8]
 8023f24:	f011 0f20 	tst.w	r1, #32
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	d00f      	beq.n	8023f4c <_scanf_i+0x1c8>
 8023f2c:	6018      	str	r0, [r3, #0]
 8023f2e:	68e3      	ldr	r3, [r4, #12]
 8023f30:	3301      	adds	r3, #1
 8023f32:	60e3      	str	r3, [r4, #12]
 8023f34:	6923      	ldr	r3, [r4, #16]
 8023f36:	1bed      	subs	r5, r5, r7
 8023f38:	445d      	add	r5, fp
 8023f3a:	442b      	add	r3, r5
 8023f3c:	6123      	str	r3, [r4, #16]
 8023f3e:	2000      	movs	r0, #0
 8023f40:	b007      	add	sp, #28
 8023f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f46:	f04f 0b00 	mov.w	fp, #0
 8023f4a:	e7ca      	b.n	8023ee2 <_scanf_i+0x15e>
 8023f4c:	07ca      	lsls	r2, r1, #31
 8023f4e:	bf4c      	ite	mi
 8023f50:	8018      	strhmi	r0, [r3, #0]
 8023f52:	6018      	strpl	r0, [r3, #0]
 8023f54:	e7eb      	b.n	8023f2e <_scanf_i+0x1aa>
 8023f56:	2001      	movs	r0, #1
 8023f58:	e7f2      	b.n	8023f40 <_scanf_i+0x1bc>
 8023f5a:	bf00      	nop
 8023f5c:	08028950 	.word	0x08028950
 8023f60:	08022b31 	.word	0x08022b31
 8023f64:	080242e5 	.word	0x080242e5
 8023f68:	08029a1f 	.word	0x08029a1f

08023f6c <__sccl>:
 8023f6c:	b570      	push	{r4, r5, r6, lr}
 8023f6e:	780b      	ldrb	r3, [r1, #0]
 8023f70:	4604      	mov	r4, r0
 8023f72:	2b5e      	cmp	r3, #94	@ 0x5e
 8023f74:	bf0b      	itete	eq
 8023f76:	784b      	ldrbeq	r3, [r1, #1]
 8023f78:	1c4a      	addne	r2, r1, #1
 8023f7a:	1c8a      	addeq	r2, r1, #2
 8023f7c:	2100      	movne	r1, #0
 8023f7e:	bf08      	it	eq
 8023f80:	2101      	moveq	r1, #1
 8023f82:	3801      	subs	r0, #1
 8023f84:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8023f88:	f800 1f01 	strb.w	r1, [r0, #1]!
 8023f8c:	42a8      	cmp	r0, r5
 8023f8e:	d1fb      	bne.n	8023f88 <__sccl+0x1c>
 8023f90:	b90b      	cbnz	r3, 8023f96 <__sccl+0x2a>
 8023f92:	1e50      	subs	r0, r2, #1
 8023f94:	bd70      	pop	{r4, r5, r6, pc}
 8023f96:	f081 0101 	eor.w	r1, r1, #1
 8023f9a:	54e1      	strb	r1, [r4, r3]
 8023f9c:	4610      	mov	r0, r2
 8023f9e:	4602      	mov	r2, r0
 8023fa0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8023fa4:	2d2d      	cmp	r5, #45	@ 0x2d
 8023fa6:	d005      	beq.n	8023fb4 <__sccl+0x48>
 8023fa8:	2d5d      	cmp	r5, #93	@ 0x5d
 8023faa:	d016      	beq.n	8023fda <__sccl+0x6e>
 8023fac:	2d00      	cmp	r5, #0
 8023fae:	d0f1      	beq.n	8023f94 <__sccl+0x28>
 8023fb0:	462b      	mov	r3, r5
 8023fb2:	e7f2      	b.n	8023f9a <__sccl+0x2e>
 8023fb4:	7846      	ldrb	r6, [r0, #1]
 8023fb6:	2e5d      	cmp	r6, #93	@ 0x5d
 8023fb8:	d0fa      	beq.n	8023fb0 <__sccl+0x44>
 8023fba:	42b3      	cmp	r3, r6
 8023fbc:	dcf8      	bgt.n	8023fb0 <__sccl+0x44>
 8023fbe:	3002      	adds	r0, #2
 8023fc0:	461a      	mov	r2, r3
 8023fc2:	3201      	adds	r2, #1
 8023fc4:	4296      	cmp	r6, r2
 8023fc6:	54a1      	strb	r1, [r4, r2]
 8023fc8:	dcfb      	bgt.n	8023fc2 <__sccl+0x56>
 8023fca:	1af2      	subs	r2, r6, r3
 8023fcc:	3a01      	subs	r2, #1
 8023fce:	1c5d      	adds	r5, r3, #1
 8023fd0:	42b3      	cmp	r3, r6
 8023fd2:	bfa8      	it	ge
 8023fd4:	2200      	movge	r2, #0
 8023fd6:	18ab      	adds	r3, r5, r2
 8023fd8:	e7e1      	b.n	8023f9e <__sccl+0x32>
 8023fda:	4610      	mov	r0, r2
 8023fdc:	e7da      	b.n	8023f94 <__sccl+0x28>
	...

08023fe0 <__sflush_r>:
 8023fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fe8:	0716      	lsls	r6, r2, #28
 8023fea:	4605      	mov	r5, r0
 8023fec:	460c      	mov	r4, r1
 8023fee:	d454      	bmi.n	802409a <__sflush_r+0xba>
 8023ff0:	684b      	ldr	r3, [r1, #4]
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	dc02      	bgt.n	8023ffc <__sflush_r+0x1c>
 8023ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	dd48      	ble.n	802408e <__sflush_r+0xae>
 8023ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023ffe:	2e00      	cmp	r6, #0
 8024000:	d045      	beq.n	802408e <__sflush_r+0xae>
 8024002:	2300      	movs	r3, #0
 8024004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024008:	682f      	ldr	r7, [r5, #0]
 802400a:	6a21      	ldr	r1, [r4, #32]
 802400c:	602b      	str	r3, [r5, #0]
 802400e:	d030      	beq.n	8024072 <__sflush_r+0x92>
 8024010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024012:	89a3      	ldrh	r3, [r4, #12]
 8024014:	0759      	lsls	r1, r3, #29
 8024016:	d505      	bpl.n	8024024 <__sflush_r+0x44>
 8024018:	6863      	ldr	r3, [r4, #4]
 802401a:	1ad2      	subs	r2, r2, r3
 802401c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802401e:	b10b      	cbz	r3, 8024024 <__sflush_r+0x44>
 8024020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024022:	1ad2      	subs	r2, r2, r3
 8024024:	2300      	movs	r3, #0
 8024026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024028:	6a21      	ldr	r1, [r4, #32]
 802402a:	4628      	mov	r0, r5
 802402c:	47b0      	blx	r6
 802402e:	1c43      	adds	r3, r0, #1
 8024030:	89a3      	ldrh	r3, [r4, #12]
 8024032:	d106      	bne.n	8024042 <__sflush_r+0x62>
 8024034:	6829      	ldr	r1, [r5, #0]
 8024036:	291d      	cmp	r1, #29
 8024038:	d82b      	bhi.n	8024092 <__sflush_r+0xb2>
 802403a:	4a2a      	ldr	r2, [pc, #168]	@ (80240e4 <__sflush_r+0x104>)
 802403c:	410a      	asrs	r2, r1
 802403e:	07d6      	lsls	r6, r2, #31
 8024040:	d427      	bmi.n	8024092 <__sflush_r+0xb2>
 8024042:	2200      	movs	r2, #0
 8024044:	6062      	str	r2, [r4, #4]
 8024046:	04d9      	lsls	r1, r3, #19
 8024048:	6922      	ldr	r2, [r4, #16]
 802404a:	6022      	str	r2, [r4, #0]
 802404c:	d504      	bpl.n	8024058 <__sflush_r+0x78>
 802404e:	1c42      	adds	r2, r0, #1
 8024050:	d101      	bne.n	8024056 <__sflush_r+0x76>
 8024052:	682b      	ldr	r3, [r5, #0]
 8024054:	b903      	cbnz	r3, 8024058 <__sflush_r+0x78>
 8024056:	6560      	str	r0, [r4, #84]	@ 0x54
 8024058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802405a:	602f      	str	r7, [r5, #0]
 802405c:	b1b9      	cbz	r1, 802408e <__sflush_r+0xae>
 802405e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024062:	4299      	cmp	r1, r3
 8024064:	d002      	beq.n	802406c <__sflush_r+0x8c>
 8024066:	4628      	mov	r0, r5
 8024068:	f7fe fff4 	bl	8023054 <_free_r>
 802406c:	2300      	movs	r3, #0
 802406e:	6363      	str	r3, [r4, #52]	@ 0x34
 8024070:	e00d      	b.n	802408e <__sflush_r+0xae>
 8024072:	2301      	movs	r3, #1
 8024074:	4628      	mov	r0, r5
 8024076:	47b0      	blx	r6
 8024078:	4602      	mov	r2, r0
 802407a:	1c50      	adds	r0, r2, #1
 802407c:	d1c9      	bne.n	8024012 <__sflush_r+0x32>
 802407e:	682b      	ldr	r3, [r5, #0]
 8024080:	2b00      	cmp	r3, #0
 8024082:	d0c6      	beq.n	8024012 <__sflush_r+0x32>
 8024084:	2b1d      	cmp	r3, #29
 8024086:	d001      	beq.n	802408c <__sflush_r+0xac>
 8024088:	2b16      	cmp	r3, #22
 802408a:	d11e      	bne.n	80240ca <__sflush_r+0xea>
 802408c:	602f      	str	r7, [r5, #0]
 802408e:	2000      	movs	r0, #0
 8024090:	e022      	b.n	80240d8 <__sflush_r+0xf8>
 8024092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024096:	b21b      	sxth	r3, r3
 8024098:	e01b      	b.n	80240d2 <__sflush_r+0xf2>
 802409a:	690f      	ldr	r7, [r1, #16]
 802409c:	2f00      	cmp	r7, #0
 802409e:	d0f6      	beq.n	802408e <__sflush_r+0xae>
 80240a0:	0793      	lsls	r3, r2, #30
 80240a2:	680e      	ldr	r6, [r1, #0]
 80240a4:	bf08      	it	eq
 80240a6:	694b      	ldreq	r3, [r1, #20]
 80240a8:	600f      	str	r7, [r1, #0]
 80240aa:	bf18      	it	ne
 80240ac:	2300      	movne	r3, #0
 80240ae:	eba6 0807 	sub.w	r8, r6, r7
 80240b2:	608b      	str	r3, [r1, #8]
 80240b4:	f1b8 0f00 	cmp.w	r8, #0
 80240b8:	dde9      	ble.n	802408e <__sflush_r+0xae>
 80240ba:	6a21      	ldr	r1, [r4, #32]
 80240bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80240be:	4643      	mov	r3, r8
 80240c0:	463a      	mov	r2, r7
 80240c2:	4628      	mov	r0, r5
 80240c4:	47b0      	blx	r6
 80240c6:	2800      	cmp	r0, #0
 80240c8:	dc08      	bgt.n	80240dc <__sflush_r+0xfc>
 80240ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80240ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80240d2:	81a3      	strh	r3, [r4, #12]
 80240d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80240d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240dc:	4407      	add	r7, r0
 80240de:	eba8 0800 	sub.w	r8, r8, r0
 80240e2:	e7e7      	b.n	80240b4 <__sflush_r+0xd4>
 80240e4:	dfbffffe 	.word	0xdfbffffe

080240e8 <_fflush_r>:
 80240e8:	b538      	push	{r3, r4, r5, lr}
 80240ea:	690b      	ldr	r3, [r1, #16]
 80240ec:	4605      	mov	r5, r0
 80240ee:	460c      	mov	r4, r1
 80240f0:	b913      	cbnz	r3, 80240f8 <_fflush_r+0x10>
 80240f2:	2500      	movs	r5, #0
 80240f4:	4628      	mov	r0, r5
 80240f6:	bd38      	pop	{r3, r4, r5, pc}
 80240f8:	b118      	cbz	r0, 8024102 <_fflush_r+0x1a>
 80240fa:	6a03      	ldr	r3, [r0, #32]
 80240fc:	b90b      	cbnz	r3, 8024102 <_fflush_r+0x1a>
 80240fe:	f7fe fc73 	bl	80229e8 <__sinit>
 8024102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024106:	2b00      	cmp	r3, #0
 8024108:	d0f3      	beq.n	80240f2 <_fflush_r+0xa>
 802410a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802410c:	07d0      	lsls	r0, r2, #31
 802410e:	d404      	bmi.n	802411a <_fflush_r+0x32>
 8024110:	0599      	lsls	r1, r3, #22
 8024112:	d402      	bmi.n	802411a <_fflush_r+0x32>
 8024114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024116:	f7fe ff7e 	bl	8023016 <__retarget_lock_acquire_recursive>
 802411a:	4628      	mov	r0, r5
 802411c:	4621      	mov	r1, r4
 802411e:	f7ff ff5f 	bl	8023fe0 <__sflush_r>
 8024122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024124:	07da      	lsls	r2, r3, #31
 8024126:	4605      	mov	r5, r0
 8024128:	d4e4      	bmi.n	80240f4 <_fflush_r+0xc>
 802412a:	89a3      	ldrh	r3, [r4, #12]
 802412c:	059b      	lsls	r3, r3, #22
 802412e:	d4e1      	bmi.n	80240f4 <_fflush_r+0xc>
 8024130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024132:	f7fe ff71 	bl	8023018 <__retarget_lock_release_recursive>
 8024136:	e7dd      	b.n	80240f4 <_fflush_r+0xc>

08024138 <__submore>:
 8024138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802413c:	460c      	mov	r4, r1
 802413e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024144:	4299      	cmp	r1, r3
 8024146:	d11d      	bne.n	8024184 <__submore+0x4c>
 8024148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802414c:	f7fe fa04 	bl	8022558 <_malloc_r>
 8024150:	b918      	cbnz	r0, 802415a <__submore+0x22>
 8024152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802415a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802415e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8024160:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8024164:	6360      	str	r0, [r4, #52]	@ 0x34
 8024166:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802416a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802416e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8024172:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8024176:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802417a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802417e:	6020      	str	r0, [r4, #0]
 8024180:	2000      	movs	r0, #0
 8024182:	e7e8      	b.n	8024156 <__submore+0x1e>
 8024184:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8024186:	0077      	lsls	r7, r6, #1
 8024188:	463a      	mov	r2, r7
 802418a:	f000 f80f 	bl	80241ac <_realloc_r>
 802418e:	4605      	mov	r5, r0
 8024190:	2800      	cmp	r0, #0
 8024192:	d0de      	beq.n	8024152 <__submore+0x1a>
 8024194:	eb00 0806 	add.w	r8, r0, r6
 8024198:	4601      	mov	r1, r0
 802419a:	4632      	mov	r2, r6
 802419c:	4640      	mov	r0, r8
 802419e:	f7fe ff3c 	bl	802301a <memcpy>
 80241a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80241a6:	f8c4 8000 	str.w	r8, [r4]
 80241aa:	e7e9      	b.n	8024180 <__submore+0x48>

080241ac <_realloc_r>:
 80241ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241b0:	4680      	mov	r8, r0
 80241b2:	4615      	mov	r5, r2
 80241b4:	460c      	mov	r4, r1
 80241b6:	b921      	cbnz	r1, 80241c2 <_realloc_r+0x16>
 80241b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80241bc:	4611      	mov	r1, r2
 80241be:	f7fe b9cb 	b.w	8022558 <_malloc_r>
 80241c2:	b92a      	cbnz	r2, 80241d0 <_realloc_r+0x24>
 80241c4:	f7fe ff46 	bl	8023054 <_free_r>
 80241c8:	2400      	movs	r4, #0
 80241ca:	4620      	mov	r0, r4
 80241cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241d0:	f000 fa1a 	bl	8024608 <_malloc_usable_size_r>
 80241d4:	4285      	cmp	r5, r0
 80241d6:	4606      	mov	r6, r0
 80241d8:	d802      	bhi.n	80241e0 <_realloc_r+0x34>
 80241da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80241de:	d8f4      	bhi.n	80241ca <_realloc_r+0x1e>
 80241e0:	4629      	mov	r1, r5
 80241e2:	4640      	mov	r0, r8
 80241e4:	f7fe f9b8 	bl	8022558 <_malloc_r>
 80241e8:	4607      	mov	r7, r0
 80241ea:	2800      	cmp	r0, #0
 80241ec:	d0ec      	beq.n	80241c8 <_realloc_r+0x1c>
 80241ee:	42b5      	cmp	r5, r6
 80241f0:	462a      	mov	r2, r5
 80241f2:	4621      	mov	r1, r4
 80241f4:	bf28      	it	cs
 80241f6:	4632      	movcs	r2, r6
 80241f8:	f7fe ff0f 	bl	802301a <memcpy>
 80241fc:	4621      	mov	r1, r4
 80241fe:	4640      	mov	r0, r8
 8024200:	f7fe ff28 	bl	8023054 <_free_r>
 8024204:	463c      	mov	r4, r7
 8024206:	e7e0      	b.n	80241ca <_realloc_r+0x1e>

08024208 <_strtoul_l.constprop.0>:
 8024208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802420c:	4e34      	ldr	r6, [pc, #208]	@ (80242e0 <_strtoul_l.constprop.0+0xd8>)
 802420e:	4686      	mov	lr, r0
 8024210:	460d      	mov	r5, r1
 8024212:	4628      	mov	r0, r5
 8024214:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024218:	5d37      	ldrb	r7, [r6, r4]
 802421a:	f017 0708 	ands.w	r7, r7, #8
 802421e:	d1f8      	bne.n	8024212 <_strtoul_l.constprop.0+0xa>
 8024220:	2c2d      	cmp	r4, #45	@ 0x2d
 8024222:	d12f      	bne.n	8024284 <_strtoul_l.constprop.0+0x7c>
 8024224:	782c      	ldrb	r4, [r5, #0]
 8024226:	2701      	movs	r7, #1
 8024228:	1c85      	adds	r5, r0, #2
 802422a:	f033 0010 	bics.w	r0, r3, #16
 802422e:	d109      	bne.n	8024244 <_strtoul_l.constprop.0+0x3c>
 8024230:	2c30      	cmp	r4, #48	@ 0x30
 8024232:	d12c      	bne.n	802428e <_strtoul_l.constprop.0+0x86>
 8024234:	7828      	ldrb	r0, [r5, #0]
 8024236:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802423a:	2858      	cmp	r0, #88	@ 0x58
 802423c:	d127      	bne.n	802428e <_strtoul_l.constprop.0+0x86>
 802423e:	786c      	ldrb	r4, [r5, #1]
 8024240:	2310      	movs	r3, #16
 8024242:	3502      	adds	r5, #2
 8024244:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8024248:	2600      	movs	r6, #0
 802424a:	fbb8 f8f3 	udiv	r8, r8, r3
 802424e:	fb03 f908 	mul.w	r9, r3, r8
 8024252:	ea6f 0909 	mvn.w	r9, r9
 8024256:	4630      	mov	r0, r6
 8024258:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802425c:	f1bc 0f09 	cmp.w	ip, #9
 8024260:	d81c      	bhi.n	802429c <_strtoul_l.constprop.0+0x94>
 8024262:	4664      	mov	r4, ip
 8024264:	42a3      	cmp	r3, r4
 8024266:	dd2a      	ble.n	80242be <_strtoul_l.constprop.0+0xb6>
 8024268:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802426c:	d007      	beq.n	802427e <_strtoul_l.constprop.0+0x76>
 802426e:	4580      	cmp	r8, r0
 8024270:	d322      	bcc.n	80242b8 <_strtoul_l.constprop.0+0xb0>
 8024272:	d101      	bne.n	8024278 <_strtoul_l.constprop.0+0x70>
 8024274:	45a1      	cmp	r9, r4
 8024276:	db1f      	blt.n	80242b8 <_strtoul_l.constprop.0+0xb0>
 8024278:	fb00 4003 	mla	r0, r0, r3, r4
 802427c:	2601      	movs	r6, #1
 802427e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024282:	e7e9      	b.n	8024258 <_strtoul_l.constprop.0+0x50>
 8024284:	2c2b      	cmp	r4, #43	@ 0x2b
 8024286:	bf04      	itt	eq
 8024288:	782c      	ldrbeq	r4, [r5, #0]
 802428a:	1c85      	addeq	r5, r0, #2
 802428c:	e7cd      	b.n	802422a <_strtoul_l.constprop.0+0x22>
 802428e:	2b00      	cmp	r3, #0
 8024290:	d1d8      	bne.n	8024244 <_strtoul_l.constprop.0+0x3c>
 8024292:	2c30      	cmp	r4, #48	@ 0x30
 8024294:	bf0c      	ite	eq
 8024296:	2308      	moveq	r3, #8
 8024298:	230a      	movne	r3, #10
 802429a:	e7d3      	b.n	8024244 <_strtoul_l.constprop.0+0x3c>
 802429c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80242a0:	f1bc 0f19 	cmp.w	ip, #25
 80242a4:	d801      	bhi.n	80242aa <_strtoul_l.constprop.0+0xa2>
 80242a6:	3c37      	subs	r4, #55	@ 0x37
 80242a8:	e7dc      	b.n	8024264 <_strtoul_l.constprop.0+0x5c>
 80242aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80242ae:	f1bc 0f19 	cmp.w	ip, #25
 80242b2:	d804      	bhi.n	80242be <_strtoul_l.constprop.0+0xb6>
 80242b4:	3c57      	subs	r4, #87	@ 0x57
 80242b6:	e7d5      	b.n	8024264 <_strtoul_l.constprop.0+0x5c>
 80242b8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80242bc:	e7df      	b.n	802427e <_strtoul_l.constprop.0+0x76>
 80242be:	1c73      	adds	r3, r6, #1
 80242c0:	d106      	bne.n	80242d0 <_strtoul_l.constprop.0+0xc8>
 80242c2:	2322      	movs	r3, #34	@ 0x22
 80242c4:	f8ce 3000 	str.w	r3, [lr]
 80242c8:	4630      	mov	r0, r6
 80242ca:	b932      	cbnz	r2, 80242da <_strtoul_l.constprop.0+0xd2>
 80242cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80242d0:	b107      	cbz	r7, 80242d4 <_strtoul_l.constprop.0+0xcc>
 80242d2:	4240      	negs	r0, r0
 80242d4:	2a00      	cmp	r2, #0
 80242d6:	d0f9      	beq.n	80242cc <_strtoul_l.constprop.0+0xc4>
 80242d8:	b106      	cbz	r6, 80242dc <_strtoul_l.constprop.0+0xd4>
 80242da:	1e69      	subs	r1, r5, #1
 80242dc:	6011      	str	r1, [r2, #0]
 80242de:	e7f5      	b.n	80242cc <_strtoul_l.constprop.0+0xc4>
 80242e0:	080298dc 	.word	0x080298dc

080242e4 <_strtoul_r>:
 80242e4:	f7ff bf90 	b.w	8024208 <_strtoul_l.constprop.0>

080242e8 <__swbuf_r>:
 80242e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242ea:	460e      	mov	r6, r1
 80242ec:	4614      	mov	r4, r2
 80242ee:	4605      	mov	r5, r0
 80242f0:	b118      	cbz	r0, 80242fa <__swbuf_r+0x12>
 80242f2:	6a03      	ldr	r3, [r0, #32]
 80242f4:	b90b      	cbnz	r3, 80242fa <__swbuf_r+0x12>
 80242f6:	f7fe fb77 	bl	80229e8 <__sinit>
 80242fa:	69a3      	ldr	r3, [r4, #24]
 80242fc:	60a3      	str	r3, [r4, #8]
 80242fe:	89a3      	ldrh	r3, [r4, #12]
 8024300:	071a      	lsls	r2, r3, #28
 8024302:	d501      	bpl.n	8024308 <__swbuf_r+0x20>
 8024304:	6923      	ldr	r3, [r4, #16]
 8024306:	b943      	cbnz	r3, 802431a <__swbuf_r+0x32>
 8024308:	4621      	mov	r1, r4
 802430a:	4628      	mov	r0, r5
 802430c:	f000 f82a 	bl	8024364 <__swsetup_r>
 8024310:	b118      	cbz	r0, 802431a <__swbuf_r+0x32>
 8024312:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024316:	4638      	mov	r0, r7
 8024318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802431a:	6823      	ldr	r3, [r4, #0]
 802431c:	6922      	ldr	r2, [r4, #16]
 802431e:	1a98      	subs	r0, r3, r2
 8024320:	6963      	ldr	r3, [r4, #20]
 8024322:	b2f6      	uxtb	r6, r6
 8024324:	4283      	cmp	r3, r0
 8024326:	4637      	mov	r7, r6
 8024328:	dc05      	bgt.n	8024336 <__swbuf_r+0x4e>
 802432a:	4621      	mov	r1, r4
 802432c:	4628      	mov	r0, r5
 802432e:	f7ff fedb 	bl	80240e8 <_fflush_r>
 8024332:	2800      	cmp	r0, #0
 8024334:	d1ed      	bne.n	8024312 <__swbuf_r+0x2a>
 8024336:	68a3      	ldr	r3, [r4, #8]
 8024338:	3b01      	subs	r3, #1
 802433a:	60a3      	str	r3, [r4, #8]
 802433c:	6823      	ldr	r3, [r4, #0]
 802433e:	1c5a      	adds	r2, r3, #1
 8024340:	6022      	str	r2, [r4, #0]
 8024342:	701e      	strb	r6, [r3, #0]
 8024344:	6962      	ldr	r2, [r4, #20]
 8024346:	1c43      	adds	r3, r0, #1
 8024348:	429a      	cmp	r2, r3
 802434a:	d004      	beq.n	8024356 <__swbuf_r+0x6e>
 802434c:	89a3      	ldrh	r3, [r4, #12]
 802434e:	07db      	lsls	r3, r3, #31
 8024350:	d5e1      	bpl.n	8024316 <__swbuf_r+0x2e>
 8024352:	2e0a      	cmp	r6, #10
 8024354:	d1df      	bne.n	8024316 <__swbuf_r+0x2e>
 8024356:	4621      	mov	r1, r4
 8024358:	4628      	mov	r0, r5
 802435a:	f7ff fec5 	bl	80240e8 <_fflush_r>
 802435e:	2800      	cmp	r0, #0
 8024360:	d0d9      	beq.n	8024316 <__swbuf_r+0x2e>
 8024362:	e7d6      	b.n	8024312 <__swbuf_r+0x2a>

08024364 <__swsetup_r>:
 8024364:	b538      	push	{r3, r4, r5, lr}
 8024366:	4b29      	ldr	r3, [pc, #164]	@ (802440c <__swsetup_r+0xa8>)
 8024368:	4605      	mov	r5, r0
 802436a:	6818      	ldr	r0, [r3, #0]
 802436c:	460c      	mov	r4, r1
 802436e:	b118      	cbz	r0, 8024378 <__swsetup_r+0x14>
 8024370:	6a03      	ldr	r3, [r0, #32]
 8024372:	b90b      	cbnz	r3, 8024378 <__swsetup_r+0x14>
 8024374:	f7fe fb38 	bl	80229e8 <__sinit>
 8024378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802437c:	0719      	lsls	r1, r3, #28
 802437e:	d422      	bmi.n	80243c6 <__swsetup_r+0x62>
 8024380:	06da      	lsls	r2, r3, #27
 8024382:	d407      	bmi.n	8024394 <__swsetup_r+0x30>
 8024384:	2209      	movs	r2, #9
 8024386:	602a      	str	r2, [r5, #0]
 8024388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802438c:	81a3      	strh	r3, [r4, #12]
 802438e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024392:	e033      	b.n	80243fc <__swsetup_r+0x98>
 8024394:	0758      	lsls	r0, r3, #29
 8024396:	d512      	bpl.n	80243be <__swsetup_r+0x5a>
 8024398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802439a:	b141      	cbz	r1, 80243ae <__swsetup_r+0x4a>
 802439c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80243a0:	4299      	cmp	r1, r3
 80243a2:	d002      	beq.n	80243aa <__swsetup_r+0x46>
 80243a4:	4628      	mov	r0, r5
 80243a6:	f7fe fe55 	bl	8023054 <_free_r>
 80243aa:	2300      	movs	r3, #0
 80243ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80243ae:	89a3      	ldrh	r3, [r4, #12]
 80243b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80243b4:	81a3      	strh	r3, [r4, #12]
 80243b6:	2300      	movs	r3, #0
 80243b8:	6063      	str	r3, [r4, #4]
 80243ba:	6923      	ldr	r3, [r4, #16]
 80243bc:	6023      	str	r3, [r4, #0]
 80243be:	89a3      	ldrh	r3, [r4, #12]
 80243c0:	f043 0308 	orr.w	r3, r3, #8
 80243c4:	81a3      	strh	r3, [r4, #12]
 80243c6:	6923      	ldr	r3, [r4, #16]
 80243c8:	b94b      	cbnz	r3, 80243de <__swsetup_r+0x7a>
 80243ca:	89a3      	ldrh	r3, [r4, #12]
 80243cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80243d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80243d4:	d003      	beq.n	80243de <__swsetup_r+0x7a>
 80243d6:	4621      	mov	r1, r4
 80243d8:	4628      	mov	r0, r5
 80243da:	f000 f83f 	bl	802445c <__smakebuf_r>
 80243de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80243e2:	f013 0201 	ands.w	r2, r3, #1
 80243e6:	d00a      	beq.n	80243fe <__swsetup_r+0x9a>
 80243e8:	2200      	movs	r2, #0
 80243ea:	60a2      	str	r2, [r4, #8]
 80243ec:	6962      	ldr	r2, [r4, #20]
 80243ee:	4252      	negs	r2, r2
 80243f0:	61a2      	str	r2, [r4, #24]
 80243f2:	6922      	ldr	r2, [r4, #16]
 80243f4:	b942      	cbnz	r2, 8024408 <__swsetup_r+0xa4>
 80243f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80243fa:	d1c5      	bne.n	8024388 <__swsetup_r+0x24>
 80243fc:	bd38      	pop	{r3, r4, r5, pc}
 80243fe:	0799      	lsls	r1, r3, #30
 8024400:	bf58      	it	pl
 8024402:	6962      	ldrpl	r2, [r4, #20]
 8024404:	60a2      	str	r2, [r4, #8]
 8024406:	e7f4      	b.n	80243f2 <__swsetup_r+0x8e>
 8024408:	2000      	movs	r0, #0
 802440a:	e7f7      	b.n	80243fc <__swsetup_r+0x98>
 802440c:	200002b8 	.word	0x200002b8

08024410 <__swhatbuf_r>:
 8024410:	b570      	push	{r4, r5, r6, lr}
 8024412:	460c      	mov	r4, r1
 8024414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024418:	2900      	cmp	r1, #0
 802441a:	b096      	sub	sp, #88	@ 0x58
 802441c:	4615      	mov	r5, r2
 802441e:	461e      	mov	r6, r3
 8024420:	da0d      	bge.n	802443e <__swhatbuf_r+0x2e>
 8024422:	89a3      	ldrh	r3, [r4, #12]
 8024424:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024428:	f04f 0100 	mov.w	r1, #0
 802442c:	bf14      	ite	ne
 802442e:	2340      	movne	r3, #64	@ 0x40
 8024430:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024434:	2000      	movs	r0, #0
 8024436:	6031      	str	r1, [r6, #0]
 8024438:	602b      	str	r3, [r5, #0]
 802443a:	b016      	add	sp, #88	@ 0x58
 802443c:	bd70      	pop	{r4, r5, r6, pc}
 802443e:	466a      	mov	r2, sp
 8024440:	f000 f87c 	bl	802453c <_fstat_r>
 8024444:	2800      	cmp	r0, #0
 8024446:	dbec      	blt.n	8024422 <__swhatbuf_r+0x12>
 8024448:	9901      	ldr	r1, [sp, #4]
 802444a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802444e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024452:	4259      	negs	r1, r3
 8024454:	4159      	adcs	r1, r3
 8024456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802445a:	e7eb      	b.n	8024434 <__swhatbuf_r+0x24>

0802445c <__smakebuf_r>:
 802445c:	898b      	ldrh	r3, [r1, #12]
 802445e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024460:	079d      	lsls	r5, r3, #30
 8024462:	4606      	mov	r6, r0
 8024464:	460c      	mov	r4, r1
 8024466:	d507      	bpl.n	8024478 <__smakebuf_r+0x1c>
 8024468:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802446c:	6023      	str	r3, [r4, #0]
 802446e:	6123      	str	r3, [r4, #16]
 8024470:	2301      	movs	r3, #1
 8024472:	6163      	str	r3, [r4, #20]
 8024474:	b003      	add	sp, #12
 8024476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024478:	ab01      	add	r3, sp, #4
 802447a:	466a      	mov	r2, sp
 802447c:	f7ff ffc8 	bl	8024410 <__swhatbuf_r>
 8024480:	9f00      	ldr	r7, [sp, #0]
 8024482:	4605      	mov	r5, r0
 8024484:	4639      	mov	r1, r7
 8024486:	4630      	mov	r0, r6
 8024488:	f7fe f866 	bl	8022558 <_malloc_r>
 802448c:	b948      	cbnz	r0, 80244a2 <__smakebuf_r+0x46>
 802448e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024492:	059a      	lsls	r2, r3, #22
 8024494:	d4ee      	bmi.n	8024474 <__smakebuf_r+0x18>
 8024496:	f023 0303 	bic.w	r3, r3, #3
 802449a:	f043 0302 	orr.w	r3, r3, #2
 802449e:	81a3      	strh	r3, [r4, #12]
 80244a0:	e7e2      	b.n	8024468 <__smakebuf_r+0xc>
 80244a2:	89a3      	ldrh	r3, [r4, #12]
 80244a4:	6020      	str	r0, [r4, #0]
 80244a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80244aa:	81a3      	strh	r3, [r4, #12]
 80244ac:	9b01      	ldr	r3, [sp, #4]
 80244ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80244b2:	b15b      	cbz	r3, 80244cc <__smakebuf_r+0x70>
 80244b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80244b8:	4630      	mov	r0, r6
 80244ba:	f000 f851 	bl	8024560 <_isatty_r>
 80244be:	b128      	cbz	r0, 80244cc <__smakebuf_r+0x70>
 80244c0:	89a3      	ldrh	r3, [r4, #12]
 80244c2:	f023 0303 	bic.w	r3, r3, #3
 80244c6:	f043 0301 	orr.w	r3, r3, #1
 80244ca:	81a3      	strh	r3, [r4, #12]
 80244cc:	89a3      	ldrh	r3, [r4, #12]
 80244ce:	431d      	orrs	r5, r3
 80244d0:	81a5      	strh	r5, [r4, #12]
 80244d2:	e7cf      	b.n	8024474 <__smakebuf_r+0x18>

080244d4 <_putc_r>:
 80244d4:	b570      	push	{r4, r5, r6, lr}
 80244d6:	460d      	mov	r5, r1
 80244d8:	4614      	mov	r4, r2
 80244da:	4606      	mov	r6, r0
 80244dc:	b118      	cbz	r0, 80244e6 <_putc_r+0x12>
 80244de:	6a03      	ldr	r3, [r0, #32]
 80244e0:	b90b      	cbnz	r3, 80244e6 <_putc_r+0x12>
 80244e2:	f7fe fa81 	bl	80229e8 <__sinit>
 80244e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80244e8:	07d8      	lsls	r0, r3, #31
 80244ea:	d405      	bmi.n	80244f8 <_putc_r+0x24>
 80244ec:	89a3      	ldrh	r3, [r4, #12]
 80244ee:	0599      	lsls	r1, r3, #22
 80244f0:	d402      	bmi.n	80244f8 <_putc_r+0x24>
 80244f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80244f4:	f7fe fd8f 	bl	8023016 <__retarget_lock_acquire_recursive>
 80244f8:	68a3      	ldr	r3, [r4, #8]
 80244fa:	3b01      	subs	r3, #1
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	60a3      	str	r3, [r4, #8]
 8024500:	da05      	bge.n	802450e <_putc_r+0x3a>
 8024502:	69a2      	ldr	r2, [r4, #24]
 8024504:	4293      	cmp	r3, r2
 8024506:	db12      	blt.n	802452e <_putc_r+0x5a>
 8024508:	b2eb      	uxtb	r3, r5
 802450a:	2b0a      	cmp	r3, #10
 802450c:	d00f      	beq.n	802452e <_putc_r+0x5a>
 802450e:	6823      	ldr	r3, [r4, #0]
 8024510:	1c5a      	adds	r2, r3, #1
 8024512:	6022      	str	r2, [r4, #0]
 8024514:	701d      	strb	r5, [r3, #0]
 8024516:	b2ed      	uxtb	r5, r5
 8024518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802451a:	07da      	lsls	r2, r3, #31
 802451c:	d405      	bmi.n	802452a <_putc_r+0x56>
 802451e:	89a3      	ldrh	r3, [r4, #12]
 8024520:	059b      	lsls	r3, r3, #22
 8024522:	d402      	bmi.n	802452a <_putc_r+0x56>
 8024524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024526:	f7fe fd77 	bl	8023018 <__retarget_lock_release_recursive>
 802452a:	4628      	mov	r0, r5
 802452c:	bd70      	pop	{r4, r5, r6, pc}
 802452e:	4629      	mov	r1, r5
 8024530:	4622      	mov	r2, r4
 8024532:	4630      	mov	r0, r6
 8024534:	f7ff fed8 	bl	80242e8 <__swbuf_r>
 8024538:	4605      	mov	r5, r0
 802453a:	e7ed      	b.n	8024518 <_putc_r+0x44>

0802453c <_fstat_r>:
 802453c:	b538      	push	{r3, r4, r5, lr}
 802453e:	4d07      	ldr	r5, [pc, #28]	@ (802455c <_fstat_r+0x20>)
 8024540:	2300      	movs	r3, #0
 8024542:	4604      	mov	r4, r0
 8024544:	4608      	mov	r0, r1
 8024546:	4611      	mov	r1, r2
 8024548:	602b      	str	r3, [r5, #0]
 802454a:	f7dd ff8f 	bl	800246c <_fstat>
 802454e:	1c43      	adds	r3, r0, #1
 8024550:	d102      	bne.n	8024558 <_fstat_r+0x1c>
 8024552:	682b      	ldr	r3, [r5, #0]
 8024554:	b103      	cbz	r3, 8024558 <_fstat_r+0x1c>
 8024556:	6023      	str	r3, [r4, #0]
 8024558:	bd38      	pop	{r3, r4, r5, pc}
 802455a:	bf00      	nop
 802455c:	20017a14 	.word	0x20017a14

08024560 <_isatty_r>:
 8024560:	b538      	push	{r3, r4, r5, lr}
 8024562:	4d06      	ldr	r5, [pc, #24]	@ (802457c <_isatty_r+0x1c>)
 8024564:	2300      	movs	r3, #0
 8024566:	4604      	mov	r4, r0
 8024568:	4608      	mov	r0, r1
 802456a:	602b      	str	r3, [r5, #0]
 802456c:	f7dd ff8e 	bl	800248c <_isatty>
 8024570:	1c43      	adds	r3, r0, #1
 8024572:	d102      	bne.n	802457a <_isatty_r+0x1a>
 8024574:	682b      	ldr	r3, [r5, #0]
 8024576:	b103      	cbz	r3, 802457a <_isatty_r+0x1a>
 8024578:	6023      	str	r3, [r4, #0]
 802457a:	bd38      	pop	{r3, r4, r5, pc}
 802457c:	20017a14 	.word	0x20017a14

08024580 <_raise_r>:
 8024580:	291f      	cmp	r1, #31
 8024582:	b538      	push	{r3, r4, r5, lr}
 8024584:	4605      	mov	r5, r0
 8024586:	460c      	mov	r4, r1
 8024588:	d904      	bls.n	8024594 <_raise_r+0x14>
 802458a:	2316      	movs	r3, #22
 802458c:	6003      	str	r3, [r0, #0]
 802458e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024592:	bd38      	pop	{r3, r4, r5, pc}
 8024594:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024596:	b112      	cbz	r2, 802459e <_raise_r+0x1e>
 8024598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802459c:	b94b      	cbnz	r3, 80245b2 <_raise_r+0x32>
 802459e:	4628      	mov	r0, r5
 80245a0:	f000 f830 	bl	8024604 <_getpid_r>
 80245a4:	4622      	mov	r2, r4
 80245a6:	4601      	mov	r1, r0
 80245a8:	4628      	mov	r0, r5
 80245aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80245ae:	f000 b817 	b.w	80245e0 <_kill_r>
 80245b2:	2b01      	cmp	r3, #1
 80245b4:	d00a      	beq.n	80245cc <_raise_r+0x4c>
 80245b6:	1c59      	adds	r1, r3, #1
 80245b8:	d103      	bne.n	80245c2 <_raise_r+0x42>
 80245ba:	2316      	movs	r3, #22
 80245bc:	6003      	str	r3, [r0, #0]
 80245be:	2001      	movs	r0, #1
 80245c0:	e7e7      	b.n	8024592 <_raise_r+0x12>
 80245c2:	2100      	movs	r1, #0
 80245c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80245c8:	4620      	mov	r0, r4
 80245ca:	4798      	blx	r3
 80245cc:	2000      	movs	r0, #0
 80245ce:	e7e0      	b.n	8024592 <_raise_r+0x12>

080245d0 <raise>:
 80245d0:	4b02      	ldr	r3, [pc, #8]	@ (80245dc <raise+0xc>)
 80245d2:	4601      	mov	r1, r0
 80245d4:	6818      	ldr	r0, [r3, #0]
 80245d6:	f7ff bfd3 	b.w	8024580 <_raise_r>
 80245da:	bf00      	nop
 80245dc:	200002b8 	.word	0x200002b8

080245e0 <_kill_r>:
 80245e0:	b538      	push	{r3, r4, r5, lr}
 80245e2:	4d07      	ldr	r5, [pc, #28]	@ (8024600 <_kill_r+0x20>)
 80245e4:	2300      	movs	r3, #0
 80245e6:	4604      	mov	r4, r0
 80245e8:	4608      	mov	r0, r1
 80245ea:	4611      	mov	r1, r2
 80245ec:	602b      	str	r3, [r5, #0]
 80245ee:	f7dd fedd 	bl	80023ac <_kill>
 80245f2:	1c43      	adds	r3, r0, #1
 80245f4:	d102      	bne.n	80245fc <_kill_r+0x1c>
 80245f6:	682b      	ldr	r3, [r5, #0]
 80245f8:	b103      	cbz	r3, 80245fc <_kill_r+0x1c>
 80245fa:	6023      	str	r3, [r4, #0]
 80245fc:	bd38      	pop	{r3, r4, r5, pc}
 80245fe:	bf00      	nop
 8024600:	20017a14 	.word	0x20017a14

08024604 <_getpid_r>:
 8024604:	f7dd beca 	b.w	800239c <_getpid>

08024608 <_malloc_usable_size_r>:
 8024608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802460c:	1f18      	subs	r0, r3, #4
 802460e:	2b00      	cmp	r3, #0
 8024610:	bfbc      	itt	lt
 8024612:	580b      	ldrlt	r3, [r1, r0]
 8024614:	18c0      	addlt	r0, r0, r3
 8024616:	4770      	bx	lr

08024618 <_init>:
 8024618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802461a:	bf00      	nop
 802461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802461e:	bc08      	pop	{r3}
 8024620:	469e      	mov	lr, r3
 8024622:	4770      	bx	lr

08024624 <_fini>:
 8024624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024626:	bf00      	nop
 8024628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802462a:	bc08      	pop	{r3}
 802462c:	469e      	mov	lr, r3
 802462e:	4770      	bx	lr
